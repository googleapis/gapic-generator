load("//:gapic_generator.bzl", "gapic_generator_tests")
load("//:gapic_generator.bzl", "google_java_format_srcs")

_SRCS = glob(["src/main/java/**/*.java"])

_COMPILE_DEPS = [
    "@cglib_cglib//jar",
    "@com_atlassian_commonmark_commonmark//jar",
    "@com_fasterxml_jackson_core_jackson_annotations//jar",
    "@com_fasterxml_jackson_core_jackson_core//jar",
    "@com_fasterxml_jackson_core_jackson_databind//jar",
    "@com_google_api_api_common//jar",
    "@com_google_api_api_compiler//jar",
    "@com_google_api_gax//jar",
    "@com_google_api_grpc_proto_google_common_protos//jar",
    "@com_google_auto_value_auto_value//jar",
    "@com_google_auto_value_auto_value_annotations//jar",
    "@com_google_code_findbugs_jsr305//jar",
    "@com_google_code_gson_gson//jar",
    "@com_google_guava_guava//jar",
    "@com_google_inject_guice//jar",
    "@com_google_protobuf//:protobuf_java",
    "@commons_cli_commons_cli//jar",
    "@io_grpc_grpc_core//jar",
    "@javax_inject_javax_inject//jar",
    "@org_apache_commons_commons_lang3//jar",
    "@org_ow2_asm_asm//jar",
    "@org_threeten_threetenbp//jar",
    "@org_yaml_snakeyaml//jar",
]

_TEST_SRCS = glob(["src/test/java/**/*.java"])

_TEST_COMPILE_DEPS = [
    "@com_google_api_api_compiler_testing//jar",
    "@com_google_truth_truth//jar",
    "@com_google_truth_extensions_truth_java8_extension//jar",
    "@junit_junit//jar",
    "@pl_pragmatists_JUnitParams//jar",
    "@org_mockito_mockito_core//jar",
    "@org_hamcrest_hamcrest_core//jar",
    "@net_bytebuddy_byte_buddy//jar",
    "@org_objenesis_objenesis//jar",
]

_JAVA_COPTS = [
    "-source",
    "1.8",
    "-target",
    "1.8",
]

java_plugin(
    name = "auto_value_plugin",
    processor_class = "com.google.auto.value.processor.AutoValueProcessor",
    deps = ["@com_google_auto_value_auto_value//jar"],
)

java_library(
    name = "auto_value",
    exported_plugins = [":auto_value_plugin"],
    exports = ["@com_google_auto_value_auto_value//jar"],
)

proto_library(
    name = "config_proto",
    srcs = ["src/main/proto/com/google/api/codegen/config.proto"],
)

java_proto_library(
    name = "config_java_proto",
    deps = [":config_proto"],
)

java_binary(
    name = "gapic_generator",
    srcs = _SRCS,
    create_executable = True,
    javacopts = _JAVA_COPTS,
    main_class = "com.google.api.codegen.GeneratorMain",
    resources = glob(["src/main/resources/**/*"]),
    visibility = ["//visibility:public"],
    deps = [
        ":auto_value",
        ":config_java_proto",
    ] + _COMPILE_DEPS,
)


# This is probably not the right way of doing it, but good enough for now.
# api-compiler module expects "protoc" binary to be accessible during tests execution, this genrule
# "puts" the "binary" in a proper location (the tests are still hermetic, even with this hack).
genrule(
    name = "protoc_binary_hack_for_test",
    outs = ["protoc"],
    cmd = "echo 'external/com_google_protobuf/protoc \"$$@\"' > $@",
    executable = True,
    tools = ["@com_google_protobuf//:protoc"],
)

java_library(
    name = "gapic_generator_testlib",
    srcs = _TEST_SRCS,
    data = glob([
        "src/**/testdata/**/*",
        "src/**/testsrc/**/*",
    ]) + [":protoc_binary_hack_for_test"],
    javacopts = _JAVA_COPTS,
    resources = glob([
        "src/**/testdata/**/*",
        "src/**/testsrc/**/*",
        "src/**/discoverytestdata/**/*",
        "src/test/java/**/*.proto",
    ]) + ["@com_google_protobuf//:well_known_protos"],
    visibility = ["//visibility:public"],
    runtime_deps = ["@com_google_protobuf//:protoc"],
    deps = [
        ":auto_value",
        ":config_java_proto",
        ":gapic_generator",
    ] + _COMPILE_DEPS + _TEST_COMPILE_DEPS,
)

# This will generate test targets, one for each test and put them in one big test_suite
# (with same name as this macros). The targets will be accessible by the corresponding tagets in the
# format `//:<fully.qualified.test.class.name>`.
# For example try running `bazel test //:com.google.api.codegen.config.ConfigGenerationTest`.
# To run all tests and see error details (if any) try:
#   `bazel test //:all --test_output=errors`
#    or
#   `bazel test //:gapic_generator_tests --test_output=errors`
gapic_generator_tests(
    name = "gapic_generator_tests",
    size = "small",
    srcs = glob(["src/test/java/**/*Test.java"]),
    runtime_deps = [":gapic_generator_testlib"],
)

# google-java-format
java_binary(
    name = "google_java_format_binary",
    main_class = "com.google.googlejavaformat.java.Main",
    visibility = ["//visibility:public"],
    runtime_deps = ["@google_java_format_all_deps//jar"],
)

# Run `bazel run //:google_java_format` to format gapic-generator sources
google_java_format_srcs(
    name = "google_java_format_srcs",
    srcs = _SRCS + _TEST_SRCS,
    formatter = "//:google_java_format_binary",
)
