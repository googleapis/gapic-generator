
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudbilling/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := cloudbilling.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'get' method:
  var (
    // The resource name of the billing account to retrieve. For example, `billingAccounts/012345-567890-ABCDEF`.
    name = ""

  )

  callResult, err := service.BillingAccounts.Get(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudbilling/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := cloudbilling.New(client)
  if err != nil {
    log.Fatal(err)
  }

  var (
  )

  fn := func(page *cloudbilling.ListBillingAccountsResponse) error {
    // doThingsWith(page)
    for i, element := range page.BillingAccounts {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  err = service.BillingAccounts.List().Pages(ctx, fn)
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudbilling/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := cloudbilling.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'list' method:
  var (
    // The resource name of the billing account associated with the projects that you want to list. For example, `billingAccounts/012345-567890-ABCDEF`.
    name = ""

  )

  fn := func(page *cloudbilling.ListProjectBillingInfoResponse) error {
    // doThingsWith(page)
    for i, element := range page.ProjectBillingInfo {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  err = service.BillingAccounts.Projects.List(name).Pages(ctx, fn)
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudbilling/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := cloudbilling.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'getBillingInfo' method:
  var (
    // The resource name of the project for which billing information is retrieved. For example, `projects/tokyo-rain-123`.
    name = ""

  )

  callResult, err := service.Projects.GetBillingInfo(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudbilling/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := cloudbilling.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'updateBillingInfo' method:
  var (
    // The resource name of the project associated with the billing information that you want to update. For example, `projects/tokyo-rain-123`.
    name = ""


    requestBody = &cloudbilling.ProjectBillingInfo{}
  )

  callResult, err := service.Projects.UpdateBillingInfo(name, requestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
