
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := container.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'create' method:
  // The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
  projectId := ""
  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides.
  zone := ""
            requestBody := &container.CreateClusterRequest{}

  callResult, err := service.Projects.Zones.Clusters.Create(projectId, zone, requestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := container.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'delete' method:
  // The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
  projectId := ""
  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides.
  zone := ""
  // The name of the cluster to delete.
  clusterId := ""

  callResult, err := service.Projects.Zones.Clusters.Delete(projectId, zone, clusterId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := container.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'get' method:
  // The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
  projectId := ""
  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides.
  zone := ""
  // The name of the cluster to retrieve.
  clusterId := ""

  callResult, err := service.Projects.Zones.Clusters.Get(projectId, zone, clusterId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := container.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'list' method:
  // The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
  projectId := ""
  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides, or "-" for all zones.
  zone := ""

  callResult, err := service.Projects.Zones.Clusters.List(projectId, zone).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := container.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'update' method:
  // The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
  projectId := ""
  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides.
  zone := ""
  // The name of the cluster to upgrade.
  clusterId := ""
                 requestBody := &container.UpdateClusterRequest{}

  callResult, err := service.Projects.Zones.Clusters.Update(projectId, zone, clusterId, requestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := container.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'getServerconfig' method:
  // The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
  projectId := ""
  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations for, or "-" for all zones.
  zone := ""

  callResult, err := service.Projects.Zones.GetServerconfig(projectId, zone).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := container.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'get' method:
  // The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
  projectId := ""
  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides.
  zone := ""
  // The server-assigned `name` of the operation.
  operationId := ""

  callResult, err := service.Projects.Zones.Operations.Get(projectId, zone, operationId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := container.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'list' method:
  // The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
  projectId := ""
  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations for, or "-" for all zones.
  zone := ""

  callResult, err := service.Projects.Zones.Operations.List(projectId, zone).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
