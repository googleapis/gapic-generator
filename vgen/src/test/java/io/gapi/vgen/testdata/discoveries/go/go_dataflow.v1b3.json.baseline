
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := dataflow.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'create' method:
  // The project which owns the job.
  projectId := ""
                 requestBody := &dataflow.Job{}

  callResult, err := service.Projects.Jobs.Create(projectId, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := dataflow.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'get' method:
  // The project which owns the job.
  projectId := ""
  // Identifies a single job.
  jobId := ""

  callResult, err := service.Projects.Jobs.Get(projectId, jobId).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := dataflow.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'getMetrics' method:
  // A project id.
  projectId := ""
  // The job to get messages for.
  jobId := ""

  callResult, err := service.Projects.Jobs.GetMetrics(projectId, jobId).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := dataflow.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'list' method:
  // The project which owns the jobs.
  projectId := ""

  fn := func(page *dataflow.ListJobsResponse) error {
    for i, v := range page.Jobs {
      _, _ = i, v
    }
    return nil
  }
  err = service.Projects.Jobs.List(projectId).Pages(ctx, fn)
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := dataflow.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'list' method:
  // A project id.
  projectId := ""
  // The job to get messages about.
  jobId := ""

  fn := func(page *dataflow.ListJobMessagesResponse) error {
    for i, v := range page.JobMessages {
      _, _ = i, v
    }
    return nil
  }
  err = service.Projects.Jobs.Messages.List(projectId, jobId).Pages(ctx, fn)
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := dataflow.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'update' method:
  // The project which owns the job.
  projectId := ""
  // Identifies a single job.
  jobId := ""
             requestBody := &dataflow.Job{}

  callResult, err := service.Projects.Jobs.Update(projectId, jobId, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := dataflow.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'lease' method:
  // Identifies the project this worker belongs to.
  projectId := ""
  // Identifies the workflow job this worker belongs to.
  jobId := ""
             requestBody := &dataflow.LeaseWorkItemRequest{}

  callResult, err := service.Projects.Jobs.WorkItems.Lease(projectId, jobId, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := dataflow.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'reportStatus' method:
  // The project which owns the WorkItem's job.
  projectId := ""
  // The job which the WorkItem is part of.
  jobId := ""
             requestBody := &dataflow.ReportWorkItemStatusRequest{}

  callResult, err := service.Projects.Jobs.WorkItems.ReportStatus(projectId, jobId, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := dataflow.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'workerMessages' method:
  // The project to send the WorkerMessages to.
  projectId := ""
                 requestBody := &dataflow.SendWorkerMessagesRequest{}

  callResult, err := service.Projects.WorkerMessages(projectId, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
