
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataflow = google.dataflow('v1b3');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'create' method:

    // The project which owns the job.
    projectId: "",
    resource: {},
    // Auth client
    auth: authClient
  };

  dataflow.projects.jobs.create(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataflow = google.dataflow('v1b3');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'get' method:

    // The project which owns the job.
    projectId: "",
    // Identifies a single job.
    jobId: "",
    // Auth client
    auth: authClient
  };

  dataflow.projects.jobs.get(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataflow = google.dataflow('v1b3');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'getMetrics' method:

    // A project id.
    projectId: "",
    // The job to get messages for.
    jobId: "",
    // Auth client
    auth: authClient
  };

  dataflow.projects.jobs.getMetrics(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataflow = google.dataflow('v1b3');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'list' method:

    // The project which owns the jobs.
    projectId: "",
    // Auth client
    auth: authClient
  };


  var recur = function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      if (result.nextPageToken) {
        request.pageToken = result.nextPageToken;
        dataflow.projects.jobs.list(request, recur);
      }
    }
  };

  dataflow.projects.jobs.list(request, recur);
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataflow = google.dataflow('v1b3');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'list' method:

    // A project id.
    projectId: "",
    // The job to get messages about.
    jobId: "",
    // Auth client
    auth: authClient
  };


  var recur = function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      if (result.nextPageToken) {
        request.pageToken = result.nextPageToken;
        dataflow.projects.jobs.messages.list(request, recur);
      }
    }
  };

  dataflow.projects.jobs.messages.list(request, recur);
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataflow = google.dataflow('v1b3');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'update' method:

    // The project which owns the job.
    projectId: "",
    // Identifies a single job.
    jobId: "",
    resource: {},
    // Auth client
    auth: authClient
  };

  dataflow.projects.jobs.update(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataflow = google.dataflow('v1b3');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'lease' method:

    // Identifies the project this worker belongs to.
    projectId: "",
    // Identifies the workflow job this worker belongs to.
    jobId: "",
    resource: {},
    // Auth client
    auth: authClient
  };

  dataflow.projects.jobs.workItems.lease(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataflow = google.dataflow('v1b3');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'reportStatus' method:

    // The project which owns the WorkItem's job.
    projectId: "",
    // The job which the WorkItem is part of.
    jobId: "",
    resource: {},
    // Auth client
    auth: authClient
  };

  dataflow.projects.jobs.workItems.reportStatus(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataflow = google.dataflow('v1b3');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'workerMessages' method:

    // The project to send the WorkerMessages to.
    projectId: "",
    resource: {},
    // Auth client
    auth: authClient
  };

  dataflow.projects.workerMessages(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
