
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'delete' method:
  // Name of a bucket.
  bucket := ""
  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := ""

  err = service.BucketAccessControls.Delete(bucket, entity).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'get' method:
  // Name of a bucket.
  bucket := ""
  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := ""

  callResult, err := service.BucketAccessControls.Get(bucket, entity).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'insert' method:
  // Name of a bucket.
  bucket := ""
              requestBody := &storage.BucketAccessControl{}

  callResult, err := service.BucketAccessControls.Insert(bucket, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'list' method:
  // Name of a bucket.
  bucket := ""

  callResult, err := service.BucketAccessControls.List(bucket).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'patch' method:
  // Name of a bucket.
  bucket := ""
  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := ""
              requestBody := &storage.BucketAccessControl{}

  callResult, err := service.BucketAccessControls.Patch(bucket, entity, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'update' method:
  // Name of a bucket.
  bucket := ""
  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := ""
              requestBody := &storage.BucketAccessControl{}

  callResult, err := service.BucketAccessControls.Update(bucket, entity, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'delete' method:
  // Name of a bucket.
  bucket := ""

  err = service.Buckets.Delete(bucket).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'get' method:
  // Name of a bucket.
  bucket := ""

  callResult, err := service.Buckets.Get(bucket).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'insert' method:
  // A valid API project identifier.
  project := ""
               requestBody := &storage.Bucket{}

  callResult, err := service.Buckets.Insert(project, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'list' method:
  // A valid API project identifier.
  project := ""

  fn := func(page *storage.Buckets) error {
    for i, v := range page.Items {
      _, _ = i, v
    }
    return nil
  }
  err = service.Buckets.List(project).Pages(ctx, fn)
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'patch' method:
  // Name of a bucket.
  bucket := ""
              requestBody := &storage.Bucket{}

  callResult, err := service.Buckets.Patch(bucket, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'update' method:
  // Name of a bucket.
  bucket := ""
              requestBody := &storage.Bucket{}

  callResult, err := service.Buckets.Update(bucket, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'stop' method:

  requestBody := &storage.Channel{}

  err = service.Channels.Stop(requestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'delete' method:
  // Name of a bucket.
  bucket := ""
  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := ""

  err = service.DefaultObjectAccessControls.Delete(bucket, entity).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'get' method:
  // Name of a bucket.
  bucket := ""
  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := ""

  callResult, err := service.DefaultObjectAccessControls.Get(bucket, entity).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'insert' method:
  // Name of a bucket.
  bucket := ""
              requestBody := &storage.ObjectAccessControl{}

  callResult, err := service.DefaultObjectAccessControls.Insert(bucket, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'list' method:
  // Name of a bucket.
  bucket := ""

  callResult, err := service.DefaultObjectAccessControls.List(bucket).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'patch' method:
  // Name of a bucket.
  bucket := ""
  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := ""
              requestBody := &storage.ObjectAccessControl{}

  callResult, err := service.DefaultObjectAccessControls.Patch(bucket, entity, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'update' method:
  // Name of a bucket.
  bucket := ""
  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := ""
              requestBody := &storage.ObjectAccessControl{}

  callResult, err := service.DefaultObjectAccessControls.Update(bucket, entity, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'delete' method:
  // Name of a bucket.
  bucket := ""
  // Name of the object. For information about how to URL encode object names to be path safe, see Encoding URI Path Parts.
  object := ""
  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := ""

  err = service.ObjectAccessControls.Delete(bucket, object, entity).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'get' method:
  // Name of a bucket.
  bucket := ""
  // Name of the object. For information about how to URL encode object names to be path safe, see Encoding URI Path Parts.
  object := ""
  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := ""

  callResult, err := service.ObjectAccessControls.Get(bucket, object, entity).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'insert' method:
  // Name of a bucket.
  bucket := ""
  // Name of the object. For information about how to URL encode object names to be path safe, see Encoding URI Path Parts.
  object := ""
              requestBody := &storage.ObjectAccessControl{}

  callResult, err := service.ObjectAccessControls.Insert(bucket, object, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'list' method:
  // Name of a bucket.
  bucket := ""
  // Name of the object. For information about how to URL encode object names to be path safe, see Encoding URI Path Parts.
  object := ""

  callResult, err := service.ObjectAccessControls.List(bucket, object).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'patch' method:
  // Name of a bucket.
  bucket := ""
  // Name of the object. For information about how to URL encode object names to be path safe, see Encoding URI Path Parts.
  object := ""
  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := ""
              requestBody := &storage.ObjectAccessControl{}

  callResult, err := service.ObjectAccessControls.Patch(bucket, object, entity, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'update' method:
  // Name of a bucket.
  bucket := ""
  // Name of the object. For information about how to URL encode object names to be path safe, see Encoding URI Path Parts.
  object := ""
  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId, group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := ""
              requestBody := &storage.ObjectAccessControl{}

  callResult, err := service.ObjectAccessControls.Update(bucket, object, entity, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'compose' method:
  // Name of the bucket in which to store the new object.
  destinationBucket := ""
  // Name of the new object. For information about how to URL encode object names to be path safe, see Encoding URI Path Parts.
  destinationObject := ""
                         requestBody := &storage.ComposeRequest{}

  callResult, err := service.Objects.Compose(destinationBucket, destinationObject, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'copy' method:
  // Name of the bucket in which to find the source object.
  sourceBucket := ""
  // Name of the source object. For information about how to URL encode object names to be path safe, see Encoding URI Path Parts.
  sourceObject := ""
  // Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket value, if any.For information about how to URL encode object names to be path safe, see Encoding URI Path Parts.
  destinationBucket := ""
  // Name of the new object. Required when the object metadata is not otherwise provided. Overrides the object metadata's name value, if any.
  destinationObject := ""
                         requestBody := &storage.Object{}

  callResult, err := service.Objects.Copy(sourceBucket, sourceObject, destinationBucket, destinationObject, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'delete' method:
  // Name of the bucket in which the object resides.
  bucket := ""
  // Name of the object. For information about how to URL encode object names to be path safe, see Encoding URI Path Parts.
  object := ""

  err = service.Objects.Delete(bucket, object).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'get' method:
  // Name of the bucket in which the object resides.
  bucket := ""
  // Name of the object. For information about how to URL encode object names to be path safe, see Encoding URI Path Parts.
  object := ""

  callResult, err := service.Objects.Get(bucket, object).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'insert' method:
  // Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket value, if any.
  bucket := ""
              requestBody := &storage.Object{}

  callResult, err := service.Objects.Insert(bucket, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'list' method:
  // Name of the bucket in which to look for objects.
  bucket := ""

  fn := func(page *storage.Objects) error {
    for i, v := range page.Items {
      _, _ = i, v
    }
    return nil
  }
  err = service.Objects.List(bucket).Pages(ctx, fn)
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'patch' method:
  // Name of the bucket in which the object resides.
  bucket := ""
  // Name of the object. For information about how to URL encode object names to be path safe, see Encoding URI Path Parts.
  object := ""
              requestBody := &storage.Object{}

  callResult, err := service.Objects.Patch(bucket, object, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'rewrite' method:
  // Name of the bucket in which to find the source object.
  sourceBucket := ""
  // Name of the source object. For information about how to URL encode object names to be path safe, see Encoding URI Path Parts.
  sourceObject := ""
  // Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket value, if any.
  destinationBucket := ""
  // Name of the new object. Required when the object metadata is not otherwise provided. Overrides the object metadata's name value, if any. For information about how to URL encode object names to be path safe, see Encoding URI Path Parts.
  destinationObject := ""
                         requestBody := &storage.Object{}

  callResult, err := service.Objects.Rewrite(sourceBucket, sourceObject, destinationBucket, destinationObject, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'update' method:
  // Name of the bucket in which the object resides.
  bucket := ""
  // Name of the object. For information about how to URL encode object names to be path safe, see Encoding URI Path Parts.
  object := ""
              requestBody := &storage.Object{}

  callResult, err := service.Objects.Update(bucket, object, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := storage.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'watchAll' method:
  // Name of the bucket in which to look for objects.
  bucket := ""
              requestBody := &storage.Channel{}

  callResult, err := service.Objects.WatchAll(bucket, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
