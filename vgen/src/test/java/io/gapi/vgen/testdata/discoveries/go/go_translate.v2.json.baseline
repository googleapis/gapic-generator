
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/translate/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := translate.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'list' method:
  var (
    // The text to detect
    q = []string{}

  )

  callResult, err := service.Detections.List(q).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/translate/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := translate.New(client)
  if err != nil {
    log.Fatal(err)
  }

  var (
  )

  callResult, err := service.Languages.List().Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/translate/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := translate.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'list' method:
  var (
    // The text to translate
    q = []string{}

    // The target language into which the text should be translated
    target = ""

  )

  callResult, err := service.Translations.List(q, target).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
