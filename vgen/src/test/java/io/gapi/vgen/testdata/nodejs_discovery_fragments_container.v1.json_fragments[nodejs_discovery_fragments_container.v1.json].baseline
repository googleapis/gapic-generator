
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'create' method:

    // * The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
    request.projectId = "";
    // * The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides.
    request.zone = "";
    request.resource = {};

    container.projects.zones.clusters.create(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'delete' method:

    // * The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
    request.projectId = "";
    // * The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides.
    request.zone = "";
    // * The name of the cluster to delete.
    request.clusterId = "";

    container.projects.zones.clusters.delete(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'get' method:

    // * The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
    request.projectId = "";
    // * The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides.
    request.zone = "";
    // * The name of the cluster to retrieve.
    request.clusterId = "";

    container.projects.zones.clusters.get(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'list' method:

    // * The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
    request.projectId = "";
    // * The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides, or "-" for all zones.
    request.zone = "";

    container.projects.zones.clusters.list(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'update' method:

    // * The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
    request.projectId = "";
    // * The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides.
    request.zone = "";
    // * The name of the cluster to upgrade.
    request.clusterId = "";
    request.resource = {};

    container.projects.zones.clusters.update(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'getServerconfig' method:

    // * The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
    request.projectId = "";
    // * The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations for, or "-" for all zones.
    request.zone = "";

    container.projects.zones.getServerconfig(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'get' method:

    // * The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
    request.projectId = "";
    // * The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides.
    request.zone = "";
    // * The server-assigned `name` of the operation.
    request.operationId = "";

    container.projects.zones.operations.get(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'list' method:

    // * The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
    request.projectId = "";
    // * The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations for, or "-" for all zones.
    request.zone = "";

    container.projects.zones.operations.list(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
