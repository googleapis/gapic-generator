
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataproc = google.dataproc('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'download' method:

    // Name of the media that is being downloaded. See ByteStream.ReadRequest.resource_name.
    resourceName: "",
    // Auth client
    auth: authClient
  };

  dataproc.media.download(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataproc = google.dataproc('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'upload' method:

    // Name of the media that is being downloaded. See ByteStream.ReadRequest.resource_name.
    resourceName: "",
    resource: {},
    // Auth client
    auth: authClient
  };

  dataproc.media.upload(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataproc = google.dataproc('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'create' method:

    // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
    projectId: "",
    // [Required] The Cloud Dataproc region in which to handle the request.
    region: "",
    resource: {},
    // Auth client
    auth: authClient
  };

  dataproc.projects.regions.clusters.create(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataproc = google.dataproc('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'delete' method:

    // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
    projectId: "",
    // [Required] The Cloud Dataproc region in which to handle the request.
    region: "",
    // [Required] The cluster name.
    clusterName: "",
    // Auth client
    auth: authClient
  };

  dataproc.projects.regions.clusters.delete(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataproc = google.dataproc('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'diagnose' method:

    // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
    projectId: "",
    // [Required] The Cloud Dataproc region in which to handle the request.
    region: "",
    // [Required] The cluster name.
    clusterName: "",
    resource: {},
    // Auth client
    auth: authClient
  };

  dataproc.projects.regions.clusters.diagnose(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataproc = google.dataproc('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'get' method:

    // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
    projectId: "",
    // [Required] The Cloud Dataproc region in which to handle the request.
    region: "",
    // [Required] The cluster name.
    clusterName: "",
    // Auth client
    auth: authClient
  };

  dataproc.projects.regions.clusters.get(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataproc = google.dataproc('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'list' method:

    // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
    projectId: "",
    // [Required] The Cloud Dataproc region in which to handle the request.
    region: "",
    // Auth client
    auth: authClient
  };


  var recur = function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      if (result.nextPageToken) {
        request.pageToken = result.nextPageToken;
        dataproc.projects.regions.clusters.list(request, recur);
      }
    }
  };

  dataproc.projects.regions.clusters.list(request, recur);
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataproc = google.dataproc('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'patch' method:

    // [Required] The ID of the Google Cloud Platform project the cluster belongs to.
    projectId: "",
    // [Required] The Cloud Dataproc region in which to handle the request.
    region: "",
    // [Required] The cluster name.
    clusterName: "",
    resource: {},
    // Auth client
    auth: authClient
  };

  dataproc.projects.regions.clusters.patch(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataproc = google.dataproc('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'cancel' method:

    // [Required] The ID of the Google Cloud Platform project that the job belongs to.
    projectId: "",
    // [Required] The Cloud Dataproc region in which to handle the request.
    region: "",
    // [Required] The job ID.
    jobId: "",
    resource: {},
    // Auth client
    auth: authClient
  };

  dataproc.projects.regions.jobs.cancel(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataproc = google.dataproc('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'delete' method:

    // [Required] The ID of the Google Cloud Platform project that the job belongs to.
    projectId: "",
    // [Required] The Cloud Dataproc region in which to handle the request.
    region: "",
    // [Required] The job ID.
    jobId: "",
    // Auth client
    auth: authClient
  };

  dataproc.projects.regions.jobs.delete(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataproc = google.dataproc('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'get' method:

    // [Required] The ID of the Google Cloud Platform project that the job belongs to.
    projectId: "",
    // [Required] The Cloud Dataproc region in which to handle the request.
    region: "",
    // [Required] The job ID.
    jobId: "",
    // Auth client
    auth: authClient
  };

  dataproc.projects.regions.jobs.get(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataproc = google.dataproc('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'list' method:

    // [Required] The ID of the Google Cloud Platform project that the job belongs to.
    projectId: "",
    // [Required] The Cloud Dataproc region in which to handle the request.
    region: "",
    // Auth client
    auth: authClient
  };


  var recur = function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      if (result.nextPageToken) {
        request.pageToken = result.nextPageToken;
        dataproc.projects.regions.jobs.list(request, recur);
      }
    }
  };

  dataproc.projects.regions.jobs.list(request, recur);
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataproc = google.dataproc('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'submit' method:

    // [Required] The ID of the Google Cloud Platform project that the job belongs to.
    projectId: "",
    // [Required] The Cloud Dataproc region in which to handle the request.
    region: "",
    resource: {},
    // Auth client
    auth: authClient
  };

  dataproc.projects.regions.jobs.submit(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataproc = google.dataproc('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'cancel' method:

    // The name of the operation resource to be cancelled.
    name: "",
    // Auth client
    auth: authClient
  };

  dataproc.projects.regions.operations.cancel(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataproc = google.dataproc('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'delete' method:

    // The name of the operation resource to be deleted.
    name: "",
    // Auth client
    auth: authClient
  };

  dataproc.projects.regions.operations.delete(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataproc = google.dataproc('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'get' method:

    // The name of the operation resource.
    name: "",
    // Auth client
    auth: authClient
  };

  dataproc.projects.regions.operations.get(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var dataproc = google.dataproc('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'list' method:

    // The name of the operation collection.
    name: "",
    // Auth client
    auth: authClient
  };


  var recur = function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      if (result.nextPageToken) {
        request.pageToken = result.nextPageToken;
        dataproc.projects.regions.operations.list(request, recur);
      }
    }
  };

  dataproc.projects.regions.operations.list(request, recur);
});
