/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

/*
 * EDITING INSTRUCTIONS
 * This file was generated from the file
 * https://github.com/google/googleapis/blob/master/library.proto
 * and updates to that file get reflected here through a refresh process.
 * For the short term, the refresh process will only be runnable by Google engineers.
 * Manual additions are allowed because the refresh process performs
 * a 3-way merge in order to preserve those manual additions. In order to not
 * break the refresh process, only certain types of modifications are
 * allowed.
 *
 * Allowed modifications - currently these are the only types allowed:
 * 1. New methods (these should be added to the end of the class)
 * 2. New imports
 * 3. Additional documentation between "manual edit" demarcations
 *
 * Happy editing!
 */

package com.google.gcloud.pubsub.spi;

import com.google.api.gax.grpc.ApiCallable;
import com.google.api.gax.protobuf.PathTemplate;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.CreateBookRequest;
import com.google.example.library.v1.CreateShelfRequest;
import com.google.example.library.v1.DeleteBookRequest;
import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.GetShelfRequest;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.MergeShelvesRequest;
import com.google.example.library.v1.MoveBookRequest;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.Shelf;
import com.google.example.library.v1.SomeMessage;
import com.google.example.library.v1.UpdateBookRequest;
import com.google.protobuf.Empty;
import com.google.protobuf.FieldMask;
import io.grpc.ManagedChannel;
import java.io.Closeable;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

// Manually-added imports: add custom (non-generated) imports after this point.



// AUTO-GENERATED DOCUMENTATION AND SERVICE - see instructions at the top of the file for editing.
/**
 * Service Description: This API represents a simple digital library.  It lets you manage Shelf
 * resources and Book resources in the library. It defines the following
 * resource model:
 *
 * - The API has a collection of [Shelf][google.example.library.v1.Shelf]
 *   resources, named ``shelves/&ast;``
 *
 * - Each Shelf has a collection of [Book][google.example.library.v1.Book]
 *   resources, named `shelves/&ast;/books/&ast;`
 *
 * Check out [cloud docs!](/library/example/link).
 *
 * <p>This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * <pre>
 * <code>
 * try (LibraryServiceApi libraryServiceApi = LibraryServiceApi.defaultInstance()) {
 *   // make calls here
 * Shelf shelf = Shelf.newBuilder().build();
 * Shelf callResult = createShelf(shelf);
 * }
 * </code>
 * </pre>
 *
 * <p>Note: close() needs to be called on the libraryServiceApi object to clean up resources such
 * as threads. In the example above, try-with-resources is used, which automatically calls
 * close().
 *
 * <p>The surface of this class includes several types of Java methods for each of the API's methods:
 *
 * <ol>
 * <li> A "flattened" method. With this type of method, the fields of the request type have been
 * converted into function parameters. It may be the case that not all fields are available
 * as parameters, and not every API method will have a flattened method entry point.
 * <li> A "request object" method. This type of method only takes one parameter, a request
 * object, which must be constructed before the call. Not every API method will have a request
 * object method.
 * <li> A "callable" method. This type of method takes no parameters and returns an immutable
 * ApiCallable object, which can be used to initiate calls to the service.
 * </ol>
 *
 * <p>See the individual methods for example code.
 *
 * <p>Many parameters require resource names to be formatted in a particular way. To assist
 * with these names, this class includes a format method for each type of name, and additionally
 * a parse method to extract the individual identifiers contained within names that are
 * returned.
 *
 * <p>This class can be customized by passing in a custom instance of LibraryServiceSettings to
 * create(). For example:
 *
 * <!-- TODO(garrettjones) refactor code to make this simpler -->
 * <pre>
 * <code>
 * ConnectionSettings updatedConnectionSettings =
 *     LibraryServiceSettings.DEFAULT_CONNECTION_SETTINGS.toBuilder().provideCredentialsWith(myCredentials).build();
 * LibraryServiceSettings libraryServiceSettings = LibraryServiceSettings.defaultBuilder()
 *     .provideChannelWith(updatedConnectionSettings)
 *     .build();
 * LibraryServiceApi libraryServiceApi = LibraryServiceApi.create(libraryServiceSettings);
 * </code>
 * </pre>
 *
 * <!-- manual edit -->
 * <!-- end manual edit -->
 */
@javax.annotation.Generated("by GAPIC")
public class LibraryServiceApi implements AutoCloseable {
  private final ManagedChannel channel;
  private final List<AutoCloseable> closeables = new ArrayList<>();

  private final ApiCallable<CreateShelfRequest, Shelf> createShelfCallable;
  private final ApiCallable<GetShelfRequest, Shelf> getShelfCallable;
  private final ApiCallable<ListShelvesRequest, ListShelvesResponse> listShelvesCallable;
  private final ApiCallable<ListShelvesRequest, Iterable<Shelf>>
      listShelvesIterableCallable;
  private final ApiCallable<DeleteShelfRequest, Empty> deleteShelfCallable;
  private final ApiCallable<MergeShelvesRequest, Shelf> mergeShelvesCallable;
  private final ApiCallable<CreateBookRequest, Book> createBookCallable;
  private final ApiCallable<PublishSeriesRequest, PublishSeriesResponse> publishSeriesCallable;
  private final ApiCallable<GetBookRequest, Book> getBookCallable;
  private final ApiCallable<ListBooksRequest, ListBooksResponse> listBooksCallable;
  private final ApiCallable<ListBooksRequest, Iterable<Book>>
      listBooksIterableCallable;
  private final ApiCallable<DeleteBookRequest, Empty> deleteBookCallable;
  private final ApiCallable<UpdateBookRequest, Book> updateBookCallable;
  private final ApiCallable<MoveBookRequest, Book> moveBookCallable;


  private static final PathTemplate SHELF_PATH_TEMPLATE =
      PathTemplate.createWithoutUrlEncoding("shelves/{shelf}");

  private static final PathTemplate BOOK_PATH_TEMPLATE =
      PathTemplate.createWithoutUrlEncoding("shelves/{shelf}/books/{book}");

  /**
   * Formats a string containing the fully-qualified path to represent
   * a shelf resource.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public static final String formatShelfName(String shelf) {
    return SHELF_PATH_TEMPLATE.instantiate(
        "shelf", shelf);
  }

  /**
   * Formats a string containing the fully-qualified path to represent
   * a book resource.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public static final String formatBookName(String shelf, String book) {
    return BOOK_PATH_TEMPLATE.instantiate(
        "shelf", shelf,"book", book);
  }

  /**
   * Parses the shelf from the given fully-qualified path which
   * represents a shelf resource.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public static final String parseShelfFromShelfName(String shelfName) {
    return SHELF_PATH_TEMPLATE.parse(shelfName).get("shelf");
  }

  /**
   * Parses the shelf from the given fully-qualified path which
   * represents a book resource.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public static final String parseShelfFromBookName(String bookName) {
    return BOOK_PATH_TEMPLATE.parse(bookName).get("shelf");
  }

  /**
   * Parses the book from the given fully-qualified path which
   * represents a book resource.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public static final String parseBookFromBookName(String bookName) {
    return BOOK_PATH_TEMPLATE.parse(bookName).get("book");
  }


  /**
   * Constructs an instance of LibraryServiceApi with default settings.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public static final LibraryServiceApi defaultInstance() throws IOException {
    return create(LibraryServiceSettings.defaultInstance());
  }

  /**
   * Constructs an instance of LibraryServiceApi, using the given settings.
   * The channels are created based on the settings passed in, or defaults for any
   * settings that are not set.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public static final LibraryServiceApi create(LibraryServiceSettings settings) throws IOException {
    return new LibraryServiceApi(settings);
  }

  /**
   * Constructs an instance of LibraryServiceApi, using the given settings.
   * This is protected so that it easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  protected LibraryServiceApi(LibraryServiceSettings settings) throws IOException {
    this.channel = settings.getChannel();

    this.createShelfCallable = ApiCallable.create(settings.createShelfSettings(), settings);
    this.getShelfCallable = ApiCallable.create(settings.getShelfSettings(), settings);
    this.listShelvesCallable = ApiCallable.create(settings.listShelvesSettings(), settings);
    this.listShelvesIterableCallable =
        ApiCallable.createIterable(settings.listShelvesSettings(), settings);
    this.deleteShelfCallable = ApiCallable.create(settings.deleteShelfSettings(), settings);
    this.mergeShelvesCallable = ApiCallable.create(settings.mergeShelvesSettings(), settings);
    this.createBookCallable = ApiCallable.create(settings.createBookSettings(), settings);
    this.publishSeriesCallable = ApiCallable.create(settings.publishSeriesSettings(), settings);
    if (settings.publishSeriesSettings().getBundlerFactory() != null) {
      closeables.add(settings.publishSeriesSettings().getBundlerFactory());
    }
    this.getBookCallable = ApiCallable.create(settings.getBookSettings(), settings);
    this.listBooksCallable = ApiCallable.create(settings.listBooksSettings(), settings);
    this.listBooksIterableCallable =
        ApiCallable.createIterable(settings.listBooksSettings(), settings);
    this.deleteBookCallable = ApiCallable.create(settings.deleteBookSettings(), settings);
    this.updateBookCallable = ApiCallable.create(settings.updateBookSettings(), settings);
    this.moveBookCallable = ApiCallable.create(settings.moveBookSettings(), settings);

    if (settings.shouldAutoCloseChannel()) {
      closeables.add(
        new Closeable() {
          @Override
          public void close() throws IOException {
            channel.shutdown();
          }
        });
    }
  }

  // ----- createShelf -----

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Creates a shelf, and returns the new Shelf.
   *
   * <pre><code>
   * Shelf shelf = Shelf.newBuilder().build();
   * Shelf callResult = createShelf(shelf);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param shelf The shelf to create.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Shelf createShelf(Shelf shelf) {
    CreateShelfRequest request =
        CreateShelfRequest.newBuilder()
        .setShelf(shelf)
        .build();

    return createShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Creates a shelf, and returns the new Shelf.
   *
   * <pre><code>
   * CreateShelfRequest request = CreateShelfRequest.newBuilder().build();
   * Shelf callResult = createShelf(request);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  private Shelf createShelf(CreateShelfRequest request) {
    return createShelfCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Creates a shelf, and returns the new Shelf.
   *
   * <pre><code>
   * CreateShelfRequest request = CreateShelfRequest.newBuilder().build();
   * Shelf callResult = createShelfCallable().call(request);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable<CreateShelfRequest, Shelf> createShelfCallable() {
    return createShelfCallable;
  }

  // ----- getShelf -----

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Gets a shelf.
   *
   * <pre><code>
   * String name = "";
   * Shelf callResult = getShelf(name);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param name The name of the shelf to retrieve.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Shelf getShelf(String name) {
    GetShelfRequest request =
        GetShelfRequest.newBuilder()
        .setName(name)
        .build();

    return getShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Gets a shelf.
   *
   * <pre><code>
   * String name = "";
   * SomeMessage message = SomeMessage.newBuilder().build();
   * Shelf callResult = getShelf(name, message);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param name The name of the shelf to retrieve.
   * @param message Field to verify that message-type query parameter gets flattened.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Shelf getShelf(String name, SomeMessage message) {
    GetShelfRequest request =
        GetShelfRequest.newBuilder()
        .setName(name)
        .setMessage(message)
        .build();

    return getShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Gets a shelf.
   *
   * <pre><code>
   * String name = "";
   * SomeMessage message = SomeMessage.newBuilder().build();
   * com.google.example.library.v1.StringBuilder stringBuilder = com.google.example.library.v1.StringBuilder.newBuilder().build();
   * Shelf callResult = getShelf(name, message, stringBuilder);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param name The name of the shelf to retrieve.
   * @param message Field to verify that message-type query parameter gets flattened.
   * @param stringBuilder
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Shelf getShelf(String name, SomeMessage message, com.google.example.library.v1.StringBuilder stringBuilder) {
    GetShelfRequest request =
        GetShelfRequest.newBuilder()
        .setName(name)
        .setMessage(message)
        .setStringBuilder(stringBuilder)
        .build();

    return getShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Gets a shelf.
   *
   * <pre><code>
   * GetShelfRequest request = GetShelfRequest.newBuilder().build();
   * Shelf callResult = getShelf(request);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public Shelf getShelf(GetShelfRequest request) {
    return getShelfCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Gets a shelf.
   *
   * <pre><code>
   * GetShelfRequest request = GetShelfRequest.newBuilder().build();
   * Shelf callResult = getShelfCallable().call(request);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable<GetShelfRequest, Shelf> getShelfCallable() {
    return getShelfCallable;
  }

  // ----- listShelves -----

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Lists shelves.
   *
   * <pre><code>
   *
   * for (Shelf elements : listShelves()) {
   *   // doThingsWith(elements);
   * }
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Iterable<Shelf> listShelves() {
    ListShelvesRequest request =
        ListShelvesRequest.newBuilder()

        .build();
    return listShelves(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Lists shelves.
   *
   * <pre><code>
   * ListShelvesRequest request = ListShelvesRequest.newBuilder().build();
   * for (Shelf elements : listShelves(request)) {
   *   // doThingsWith(elements);
   * }
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  private final Iterable<Shelf> listShelves(ListShelvesRequest request) {
    return listShelvesIterableCallable()
        .call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Lists shelves.
   *
   * <pre><code>
   * ListShelvesRequest request = ListShelvesRequest.newBuilder().build();
   * for (Shelf elements : listShelvesCallable().call(request)) {
   *   // doThingsWith(elements);
   * }
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable<ListShelvesRequest, Iterable<Shelf>> listShelvesIterableCallable() {
    return listShelvesIterableCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Lists shelves.
   *
   * <pre><code>
   * ListShelvesRequest request = ListShelvesRequest.newBuilder().build();
   * ListShelvesResponse callResult = listShelvesCallable().call(request);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable<ListShelvesRequest, ListShelvesResponse> listShelvesCallable() {
    return listShelvesCallable;
  }

  // ----- deleteShelf -----

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Deletes a shelf.
   *
   * <pre><code>
   * String name = "";
   * deleteShelf(name);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param name The name of the shelf to delete.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final void deleteShelf(String name) {
    DeleteShelfRequest request =
        DeleteShelfRequest.newBuilder()
        .setName(name)
        .build();

    deleteShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Deletes a shelf.
   *
   * <pre><code>
   * DeleteShelfRequest request = DeleteShelfRequest.newBuilder().build();
   * deleteShelf(request);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  private void deleteShelf(DeleteShelfRequest request) {
    deleteShelfCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Deletes a shelf.
   *
   * <pre><code>
   * DeleteShelfRequest request = DeleteShelfRequest.newBuilder().build();
   * deleteShelfCallable().call(request);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable<DeleteShelfRequest, Empty> deleteShelfCallable() {
    return deleteShelfCallable;
  }

  // ----- mergeShelves -----

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Merges two shelves by adding all books from the shelf named
   * `other_shelf_name` to shelf `name`, and deletes
   * `other_shelf_name`. Returns the updated shelf.
   *
   * <pre><code>
   * String name = "";
   * String otherShelfName = "";
   * Shelf callResult = mergeShelves(name, otherShelfName);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param name The name of the shelf we're adding books to.
   * @param otherShelfName The name of the shelf we're removing books from and deleting.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Shelf mergeShelves(String name, String otherShelfName) {
    MergeShelvesRequest request =
        MergeShelvesRequest.newBuilder()
        .setName(name)
        .setOtherShelfName(otherShelfName)
        .build();

    return mergeShelves(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Merges two shelves by adding all books from the shelf named
   * `other_shelf_name` to shelf `name`, and deletes
   * `other_shelf_name`. Returns the updated shelf.
   *
   * <pre><code>
   * MergeShelvesRequest request = MergeShelvesRequest.newBuilder().build();
   * Shelf callResult = mergeShelves(request);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public Shelf mergeShelves(MergeShelvesRequest request) {
    return mergeShelvesCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Merges two shelves by adding all books from the shelf named
   * `other_shelf_name` to shelf `name`, and deletes
   * `other_shelf_name`. Returns the updated shelf.
   *
   * <pre><code>
   * MergeShelvesRequest request = MergeShelvesRequest.newBuilder().build();
   * Shelf callResult = mergeShelvesCallable().call(request);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable<MergeShelvesRequest, Shelf> mergeShelvesCallable() {
    return mergeShelvesCallable;
  }

  // ----- createBook -----

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Creates a book.
   *
   * <pre><code>
   * String name = "";
   * Book book = Book.newBuilder().build();
   * Book callResult = createBook(name, book);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param name The name of the shelf in which the book is created.
   * @param book The book to create.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Book createBook(String name, Book book) {
    CreateBookRequest request =
        CreateBookRequest.newBuilder()
        .setName(name)
        .setBook(book)
        .build();

    return createBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Creates a book.
   *
   * <pre><code>
   * CreateBookRequest request = CreateBookRequest.newBuilder().build();
   * Book callResult = createBook(request);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public Book createBook(CreateBookRequest request) {
    return createBookCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Creates a book.
   *
   * <pre><code>
   * CreateBookRequest request = CreateBookRequest.newBuilder().build();
   * Book callResult = createBookCallable().call(request);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable<CreateBookRequest, Book> createBookCallable() {
    return createBookCallable;
  }

  // ----- publishSeries -----

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Creates a series of books.
   *
   * <pre><code>
   * Shelf shelf = Shelf.newBuilder().build();
   * List&lt;Book&gt; books = new ArrayList&lt;&gt;();
   * int edition = 0;
   * PublishSeriesResponse callResult = publishSeries(shelf, books, edition);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param shelf The shelf in which the series is created.
   * @param books The books to publish in the series.
   * @param edition The edition of the series
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final PublishSeriesResponse publishSeries(Shelf shelf, List<Book> books, int edition) {
    PublishSeriesRequest request =
        PublishSeriesRequest.newBuilder()
        .setShelf(shelf)
        .addAllBooks(books)
        .setEdition(edition)
        .build();

    return publishSeries(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Creates a series of books.
   *
   * <pre><code>
   * PublishSeriesRequest request = PublishSeriesRequest.newBuilder().build();
   * PublishSeriesResponse callResult = publishSeries(request);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public PublishSeriesResponse publishSeries(PublishSeriesRequest request) {
    return publishSeriesCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Creates a series of books.
   *
   * <pre><code>
   * PublishSeriesRequest request = PublishSeriesRequest.newBuilder().build();
   * PublishSeriesResponse callResult = publishSeriesCallable().call(request);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable<PublishSeriesRequest, PublishSeriesResponse> publishSeriesCallable() {
    return publishSeriesCallable;
  }

  // ----- getBook -----

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Gets a book.
   *
   * <pre><code>
   * String name = "";
   * Book callResult = getBook(name);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param name The name of the book to retrieve.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Book getBook(String name) {
    GetBookRequest request =
        GetBookRequest.newBuilder()
        .setName(name)
        .build();

    return getBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Gets a book.
   *
   * <pre><code>
   * GetBookRequest request = GetBookRequest.newBuilder().build();
   * Book callResult = getBook(request);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  private Book getBook(GetBookRequest request) {
    return getBookCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Gets a book.
   *
   * <pre><code>
   * GetBookRequest request = GetBookRequest.newBuilder().build();
   * Book callResult = getBookCallable().call(request);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable<GetBookRequest, Book> getBookCallable() {
    return getBookCallable;
  }

  // ----- listBooks -----

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Lists books in a shelf.
   *
   * <pre><code>
   * String name = "";
   * String filter = "";
   * for (Book elements : listBooks(name, filter)) {
   *   // doThingsWith(elements);
   * }
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param name The name of the shelf whose books we'd like to list.
   * @param filter To test python built-in wrapping.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Iterable<Book> listBooks(String name, String filter) {
    ListBooksRequest request =
        ListBooksRequest.newBuilder()
        .setName(name)
        .setFilter(filter)
        .build();
    return listBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Lists books in a shelf.
   *
   * <pre><code>
   * ListBooksRequest request = ListBooksRequest.newBuilder().build();
   * for (Book elements : listBooks(request)) {
   *   // doThingsWith(elements);
   * }
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Iterable<Book> listBooks(ListBooksRequest request) {
    return listBooksIterableCallable()
        .call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Lists books in a shelf.
   *
   * <pre><code>
   * ListBooksRequest request = ListBooksRequest.newBuilder().build();
   * for (Book elements : listBooksCallable().call(request)) {
   *   // doThingsWith(elements);
   * }
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable<ListBooksRequest, Iterable<Book>> listBooksIterableCallable() {
    return listBooksIterableCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Lists books in a shelf.
   *
   * <pre><code>
   * ListBooksRequest request = ListBooksRequest.newBuilder().build();
   * ListBooksResponse callResult = listBooksCallable().call(request);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable<ListBooksRequest, ListBooksResponse> listBooksCallable() {
    return listBooksCallable;
  }

  // ----- deleteBook -----

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Deletes a book.
   *
   * <pre><code>
   * String name = "";
   * deleteBook(name);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param name The name of the book to delete.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final void deleteBook(String name) {
    DeleteBookRequest request =
        DeleteBookRequest.newBuilder()
        .setName(name)
        .build();

    deleteBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Deletes a book.
   *
   * <pre><code>
   * DeleteBookRequest request = DeleteBookRequest.newBuilder().build();
   * deleteBook(request);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  private void deleteBook(DeleteBookRequest request) {
    deleteBookCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Deletes a book.
   *
   * <pre><code>
   * DeleteBookRequest request = DeleteBookRequest.newBuilder().build();
   * deleteBookCallable().call(request);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable<DeleteBookRequest, Empty> deleteBookCallable() {
    return deleteBookCallable;
  }

  // ----- updateBook -----

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Updates a book.
   *
   * <pre><code>
   * String name = "";
   * Book book = Book.newBuilder().build();
   * Book callResult = updateBook(name, book);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param name The name of the book to update.
   * @param book The book to update with.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Book updateBook(String name, Book book) {
    UpdateBookRequest request =
        UpdateBookRequest.newBuilder()
        .setName(name)
        .setBook(book)
        .build();

    return updateBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Updates a book.
   *
   * <pre><code>
   * String name = "";
   * Book book = Book.newBuilder().build();
   * FieldMask updateMask = FieldMask.newBuilder().build();
   * com.google.example.library.v1.FieldMask physicalMask = com.google.example.library.v1.FieldMask.newBuilder().build();
   * Book callResult = updateBook(name, book, updateMask, physicalMask);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param name The name of the book to update.
   * @param book The book to update with.
   * @param updateMask A field mask to apply, rendered as an HTTP parameter.
   * @param physicalMask To test Python import clash resolution.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Book updateBook(String name, Book book, FieldMask updateMask, com.google.example.library.v1.FieldMask physicalMask) {
    UpdateBookRequest request =
        UpdateBookRequest.newBuilder()
        .setName(name)
        .setBook(book)
        .setUpdateMask(updateMask)
        .setPhysicalMask(physicalMask)
        .build();

    return updateBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Updates a book.
   *
   * <pre><code>
   * UpdateBookRequest request = UpdateBookRequest.newBuilder().build();
   * Book callResult = updateBook(request);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public Book updateBook(UpdateBookRequest request) {
    return updateBookCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Updates a book.
   *
   * <pre><code>
   * UpdateBookRequest request = UpdateBookRequest.newBuilder().build();
   * Book callResult = updateBookCallable().call(request);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable<UpdateBookRequest, Book> updateBookCallable() {
    return updateBookCallable;
  }

  // ----- moveBook -----

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Moves a book to another shelf, and returns the new book.
   *
   * <pre><code>
   * String name = "";
   * String otherShelfName = "";
   * Book callResult = moveBook(name, otherShelfName);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param name The name of the book to move.
   * @param otherShelfName The name of the destination shelf.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Book moveBook(String name, String otherShelfName) {
    MoveBookRequest request =
        MoveBookRequest.newBuilder()
        .setName(name)
        .setOtherShelfName(otherShelfName)
        .build();

    return moveBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Moves a book to another shelf, and returns the new book.
   *
   * <pre><code>
   * MoveBookRequest request = MoveBookRequest.newBuilder().build();
   * Book callResult = moveBook(request);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public Book moveBook(MoveBookRequest request) {
    return moveBookCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD - see instructions at the top of the file for editing.
  /**
   * Moves a book to another shelf, and returns the new book.
   *
   * <pre><code>
   * MoveBookRequest request = MoveBookRequest.newBuilder().build();
   * Book callResult = moveBookCallable().call(request);
   * </code></pre>
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public final ApiCallable<MoveBookRequest, Book> moveBookCallable() {
    return moveBookCallable;
  }


  /**
   * Initiates an orderly shutdown in which preexisting calls continue but new calls are immediately
   * cancelled.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  @Override
  public final void close() throws Exception {
    for (AutoCloseable closeable : closeables) {
      closeable.close();
    }
  }


  // ========
  // Manually-added methods: add custom (non-generated) methods after this point.
  // ========

}
