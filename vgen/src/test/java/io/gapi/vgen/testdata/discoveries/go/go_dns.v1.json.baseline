
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := dns.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'create' method:
  // Identifies the project addressed by this request.
  project := ""
  // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
  managedZone := ""
                   requestBody := &dns.Change{}

  callResult, err := service.Changes.Create(project, managedZone, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := dns.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'get' method:
  // Identifies the project addressed by this request.
  project := ""
  // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
  managedZone := ""
  // The identifier of the requested change, from a previous ResourceRecordSetsChangeResponse.
  changeId := ""

  callResult, err := service.Changes.Get(project, managedZone, changeId).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := dns.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'list' method:
  // Identifies the project addressed by this request.
  project := ""
  // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
  managedZone := ""

  fn := func(page *dns.ChangesListResponse) error {
    for i, v := range page.Changes {
      _, _ = i, v
    }
    return nil
  }
  err = service.Changes.List(project, managedZone).Pages(ctx, fn)
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := dns.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'create' method:
  // Identifies the project addressed by this request.
  project := ""
               requestBody := &dns.ManagedZone{}

  callResult, err := service.ManagedZones.Create(project, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := dns.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'delete' method:
  // Identifies the project addressed by this request.
  project := ""
  // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
  managedZone := ""

  err = service.ManagedZones.Delete(project, managedZone).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := dns.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'get' method:
  // Identifies the project addressed by this request.
  project := ""
  // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
  managedZone := ""

  callResult, err := service.ManagedZones.Get(project, managedZone).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := dns.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'list' method:
  // Identifies the project addressed by this request.
  project := ""

  fn := func(page *dns.ManagedZonesListResponse) error {
    for i, v := range page.ManagedZones {
      _, _ = i, v
    }
    return nil
  }
  err = service.ManagedZones.List(project).Pages(ctx, fn)
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := dns.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'get' method:
  // Identifies the project addressed by this request.
  project := ""

  callResult, err := service.Projects.Get(project).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := dns.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'list' method:
  // Identifies the project addressed by this request.
  project := ""
  // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
  managedZone := ""

  fn := func(page *dns.ResourceRecordSetsListResponse) error {
    for i, v := range page.Rrsets {
      _, _ = i, v
    }
    return nil
  }
  err = service.ResourceRecordSets.List(project, managedZone).Pages(ctx, fn)
  if err != nil {
    log.Fatal(err)
  }
}
