
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := dns.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'create' method:
  var (
    // Identifies the project addressed by this request.
    project = ""

    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    managedZone = ""


    requestBody = &dns.Change{}
  )

  callResult, err := service.Changes.Create(project, managedZone, requestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := dns.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'get' method:
  var (
    // Identifies the project addressed by this request.
    project = ""

    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    managedZone = ""

    // The identifier of the requested change, from a previous ResourceRecordSetsChangeResponse.
    changeId = ""

  )

  callResult, err := service.Changes.Get(project, managedZone, changeId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := dns.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'list' method:
  var (
    // Identifies the project addressed by this request.
    project = ""

    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    managedZone = ""

  )

  fn := func(page *dns.ChangesListResponse) error {
    // doThingsWith(page)
    for i, element := range page.Changes {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  err = service.Changes.List(project, managedZone).Pages(ctx, fn)
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := dns.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'create' method:
  var (
    // Identifies the project addressed by this request.
    project = ""


    requestBody = &dns.ManagedZone{}
  )

  callResult, err := service.ManagedZones.Create(project, requestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := dns.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'delete' method:
  var (
    // Identifies the project addressed by this request.
    project = ""

    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    managedZone = ""

  )

  err = service.ManagedZones.Delete(project, managedZone).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := dns.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'get' method:
  var (
    // Identifies the project addressed by this request.
    project = ""

    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    managedZone = ""

  )

  callResult, err := service.ManagedZones.Get(project, managedZone).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := dns.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'list' method:
  var (
    // Identifies the project addressed by this request.
    project = ""

  )

  fn := func(page *dns.ManagedZonesListResponse) error {
    // doThingsWith(page)
    for i, element := range page.ManagedZones {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  err = service.ManagedZones.List(project).Pages(ctx, fn)
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := dns.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'get' method:
  var (
    // Identifies the project addressed by this request.
    project = ""

  )

  callResult, err := service.Projects.Get(project).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := dns.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'list' method:
  var (
    // Identifies the project addressed by this request.
    project = ""

    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    managedZone = ""

  )

  fn := func(page *dns.ResourceRecordSetsListResponse) error {
    // doThingsWith(page)
    for i, element := range page.Rrsets {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  err = service.ResourceRecordSets.List(project, managedZone).Pages(ctx, fn)
  if err != nil {
    log.Fatal(err)
  }
}
