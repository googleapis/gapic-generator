
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'delete' method:
  // Project ID of the dataset being deleted
  projectId := ""
  // Dataset ID of dataset being deleted
  datasetId := ""

  err = service.Datasets.Delete(projectId, datasetId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'get' method:
  // Project ID of the requested dataset
  projectId := ""
  // Dataset ID of the requested dataset
  datasetId := ""

  callResult, err := service.Datasets.Get(projectId, datasetId).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'insert' method:
  // Project ID of the new dataset
  projectId := ""
                 requestBody := &bigquery.Dataset{}

  callResult, err := service.Datasets.Insert(projectId, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'list' method:
  // Project ID of the datasets to be listed
  projectId := ""

  fn := func(page *bigquery.DatasetList) error {
    for i, v := range page.Datasets {
      _, _ = i, v
    }
    return nil
  }
  err = service.Datasets.List(projectId).Pages(ctx, fn)
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'patch' method:
  // Project ID of the dataset being updated
  projectId := ""
  // Dataset ID of the dataset being updated
  datasetId := ""
                 requestBody := &bigquery.Dataset{}

  callResult, err := service.Datasets.Patch(projectId, datasetId, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'update' method:
  // Project ID of the dataset being updated
  projectId := ""
  // Dataset ID of the dataset being updated
  datasetId := ""
                 requestBody := &bigquery.Dataset{}

  callResult, err := service.Datasets.Update(projectId, datasetId, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'cancel' method:
  // [Required] Project ID of the job to cancel
  projectId := ""
  // [Required] Job ID of the job to cancel
  jobId := ""

  callResult, err := service.Jobs.Cancel(projectId, jobId).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'get' method:
  // [Required] Project ID of the requested job
  projectId := ""
  // [Required] Job ID of the requested job
  jobId := ""

  callResult, err := service.Jobs.Get(projectId, jobId).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'getQueryResults' method:
  // [Required] Project ID of the query job
  projectId := ""
  // [Required] Job ID of the query job
  jobId := ""

  callResult, err := service.Jobs.GetQueryResults(projectId, jobId).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'insert' method:
  // Project ID of the project that will be billed for the job
  projectId := ""
                 requestBody := &bigquery.Job{}

  callResult, err := service.Jobs.Insert(projectId, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'list' method:
  // Project ID of the jobs to list
  projectId := ""

  fn := func(page *bigquery.JobList) error {
    for i, v := range page.Jobs {
      _, _ = i, v
    }
    return nil
  }
  err = service.Jobs.List(projectId).Pages(ctx, fn)
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'query' method:
  // Project ID of the project billed for the query
  projectId := ""
                 requestBody := &bigquery.QueryRequest{}

  callResult, err := service.Jobs.Query(projectId, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }



  fn := func(page *bigquery.ProjectList) error {
    for i, v := range page.Projects {
      _, _ = i, v
    }
    return nil
  }
  err = service.Projects.List().Pages(ctx, fn)
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'insertAll' method:
  // Project ID of the destination table.
  projectId := ""
  // Dataset ID of the destination table.
  datasetId := ""
  // Table ID of the destination table.
  tableId := ""
               requestBody := &bigquery.TableDataInsertAllRequest{}

  callResult, err := service.Tabledata.InsertAll(projectId, datasetId, tableId, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'list' method:
  // Project ID of the table to read
  projectId := ""
  // Dataset ID of the table to read
  datasetId := ""
  // Table ID of the table to read
  tableId := ""

  callResult, err := service.Tabledata.List(projectId, datasetId, tableId).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'delete' method:
  // Project ID of the table to delete
  projectId := ""
  // Dataset ID of the table to delete
  datasetId := ""
  // Table ID of the table to delete
  tableId := ""

  err = service.Tables.Delete(projectId, datasetId, tableId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'get' method:
  // Project ID of the requested table
  projectId := ""
  // Dataset ID of the requested table
  datasetId := ""
  // Table ID of the requested table
  tableId := ""

  callResult, err := service.Tables.Get(projectId, datasetId, tableId).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'insert' method:
  // Project ID of the new table
  projectId := ""
  // Dataset ID of the new table
  datasetId := ""
                 requestBody := &bigquery.Table{}

  callResult, err := service.Tables.Insert(projectId, datasetId, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'list' method:
  // Project ID of the tables to list
  projectId := ""
  // Dataset ID of the tables to list
  datasetId := ""

  fn := func(page *bigquery.TableList) error {
    for i, v := range page.Tables {
      _, _ = i, v
    }
    return nil
  }
  err = service.Tables.List(projectId, datasetId).Pages(ctx, fn)
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'patch' method:
  // Project ID of the table to update
  projectId := ""
  // Dataset ID of the table to update
  datasetId := ""
  // Table ID of the table to update
  tableId := ""
               requestBody := &bigquery.Table{}

  callResult, err := service.Tables.Patch(projectId, datasetId, tableId, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
package main

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  // client, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  client, err := google.DefaultClient(ctx)
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to values for parameters to the 'update' method:
  // Project ID of the table to update
  projectId := ""
  // Dataset ID of the table to update
  datasetId := ""
  // Table ID of the table to update
  tableId := ""
               requestBody := &bigquery.Table{}

  callResult, err := service.Tables.Update(projectId, datasetId, tableId, requestBody).Context(ctx).Do()
  _ = callResult
  if err != nil {
    log.Fatal(err)
  }
}
