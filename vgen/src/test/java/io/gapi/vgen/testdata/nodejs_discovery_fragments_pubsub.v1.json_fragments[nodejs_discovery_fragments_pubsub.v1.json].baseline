
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'acknowledge' method:

    // * The subscription whose message is being acknowledged.
    request.subscription = "";
    request.resource = {};

    pubsub.projects.subscriptions.acknowledge(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'create' method:

    // * The name of the subscription. It must have the format `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must start with a letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters in length, and it must not start with `"goog"`.
    request.name = "";
    request.resource = {};

    pubsub.projects.subscriptions.create(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'delete' method:

    // * The subscription to delete.
    request.subscription = "";

    pubsub.projects.subscriptions.delete(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'get' method:

    // * The name of the subscription to get.
    request.subscription = "";

    pubsub.projects.subscriptions.get(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'getIamPolicy' method:

    // * REQUIRED: The resource for which policy is being requested. `resource` is usually specified as a path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in this value is resource specific and is specified in the documentation for the respective GetIamPolicy rpc.
    request.resource_ = "";

    pubsub.projects.subscriptions.getIamPolicy(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'list' method:

    // * The name of the cloud project that subscriptions belong to.
    request.project = "";


    var recur = function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
        if (result.nextPageToken) {
          request.pageToken = result.nextPageToken;
          pubsub.projects.subscriptions.list(request, recur);
        }
      }
    };

    pubsub.projects.subscriptions.list(request, recur);
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'modifyAckDeadline' method:

    // * The name of the subscription.
    request.subscription = "";
    request.resource = {};

    pubsub.projects.subscriptions.modifyAckDeadline(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'modifyPushConfig' method:

    // * The name of the subscription.
    request.subscription = "";
    request.resource = {};

    pubsub.projects.subscriptions.modifyPushConfig(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'pull' method:

    // * The subscription from which messages should be pulled.
    request.subscription = "";
    request.resource = {};

    pubsub.projects.subscriptions.pull(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'setIamPolicy' method:

    // * REQUIRED: The resource for which policy is being specified. `resource` is usually specified as a path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in this value is resource specific and is specified in the documentation for the respective SetIamPolicy rpc.
    request.resource_ = "";
    request.resource = {};

    pubsub.projects.subscriptions.setIamPolicy(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'testIamPermissions' method:

    // * REQUIRED: The resource for which policy detail is being requested. `resource` is usually specified as a path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in this value is resource specific and is specified in the documentation for the respective TestIamPermissions rpc.
    request.resource_ = "";
    request.resource = {};

    pubsub.projects.subscriptions.testIamPermissions(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'create' method:

    // * The name of the topic. It must have the format `"projects/{project}/topics/{topic}"`. `{topic}` must start with a letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters in length, and it must not start with `"goog"`.
    request.name = "";
    request.resource = {};

    pubsub.projects.topics.create(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'delete' method:

    // * Name of the topic to delete.
    request.topic = "";

    pubsub.projects.topics.delete(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'get' method:

    // * The name of the topic to get.
    request.topic = "";

    pubsub.projects.topics.get(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'getIamPolicy' method:

    // * REQUIRED: The resource for which policy is being requested. `resource` is usually specified as a path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in this value is resource specific and is specified in the documentation for the respective GetIamPolicy rpc.
    request.resource_ = "";

    pubsub.projects.topics.getIamPolicy(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'list' method:

    // * The name of the cloud project that topics belong to.
    request.project = "";


    var recur = function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
        if (result.nextPageToken) {
          request.pageToken = result.nextPageToken;
          pubsub.projects.topics.list(request, recur);
        }
      }
    };

    pubsub.projects.topics.list(request, recur);
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'publish' method:

    // * The messages in the request will be published on this topic.
    request.topic = "";
    request.resource = {};

    pubsub.projects.topics.publish(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'setIamPolicy' method:

    // * REQUIRED: The resource for which policy is being specified. `resource` is usually specified as a path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in this value is resource specific and is specified in the documentation for the respective SetIamPolicy rpc.
    request.resource_ = "";
    request.resource = {};

    pubsub.projects.topics.setIamPolicy(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'list' method:

    // * The name of the topic that subscriptions are attached to.
    request.topic = "";


    var recur = function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
        if (result.nextPageToken) {
          request.pageToken = result.nextPageToken;
          pubsub.projects.topics.subscriptions.list(request, recur);
        }
      }
    };

    pubsub.projects.topics.subscriptions.list(request, recur);
   }
});
var google = require('googleapis');
var pubsub = google.pubsub('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'testIamPermissions' method:

    // * REQUIRED: The resource for which policy detail is being requested. `resource` is usually specified as a path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in this value is resource specific and is specified in the documentation for the respective TestIamPermissions rpc.
    request.resource_ = "";
    request.resource = {};

    pubsub.projects.topics.testIamPermissions(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
