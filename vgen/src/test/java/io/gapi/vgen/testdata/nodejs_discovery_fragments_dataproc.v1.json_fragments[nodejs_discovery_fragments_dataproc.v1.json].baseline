
var google = require('googleapis');
var dataproc = google.dataproc('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'download' method:

    // * Name of the media that is being downloaded. See ByteStream.ReadRequest.resource_name.
    request.resourceName = "";

    dataproc.media.download(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var dataproc = google.dataproc('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'upload' method:

    // * Name of the media that is being downloaded. See ByteStream.ReadRequest.resource_name.
    request.resourceName = "";
    request.resource = {};

    dataproc.media.upload(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var dataproc = google.dataproc('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'create' method:

    // * [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
    request.projectId = "";
    // * [Required] The Cloud Dataproc region in which to handle the request.
    request.region = "";
    request.resource = {};

    dataproc.projects.regions.clusters.create(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var dataproc = google.dataproc('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'delete' method:

    // * [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
    request.projectId = "";
    // * [Required] The Cloud Dataproc region in which to handle the request.
    request.region = "";
    // * [Required] The cluster name.
    request.clusterName = "";

    dataproc.projects.regions.clusters.delete(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var dataproc = google.dataproc('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'diagnose' method:

    // * [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
    request.projectId = "";
    // * [Required] The Cloud Dataproc region in which to handle the request.
    request.region = "";
    // * [Required] The cluster name.
    request.clusterName = "";
    request.resource = {};

    dataproc.projects.regions.clusters.diagnose(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var dataproc = google.dataproc('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'get' method:

    // * [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
    request.projectId = "";
    // * [Required] The Cloud Dataproc region in which to handle the request.
    request.region = "";
    // * [Required] The cluster name.
    request.clusterName = "";

    dataproc.projects.regions.clusters.get(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var dataproc = google.dataproc('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'list' method:

    // * [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
    request.projectId = "";
    // * [Required] The Cloud Dataproc region in which to handle the request.
    request.region = "";


    var recur = function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
        if (result.nextPageToken) {
          request.pageToken = result.nextPageToken;
          dataproc.projects.regions.clusters.list(request, recur);
        }
      }
    };

    dataproc.projects.regions.clusters.list(request, recur);
   }
});
var google = require('googleapis');
var dataproc = google.dataproc('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'patch' method:

    // * [Required] The ID of the Google Cloud Platform project the cluster belongs to.
    request.projectId = "";
    // * [Required] The Cloud Dataproc region in which to handle the request.
    request.region = "";
    // * [Required] The cluster name.
    request.clusterName = "";
    request.resource = {};

    dataproc.projects.regions.clusters.patch(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var dataproc = google.dataproc('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'cancel' method:

    // * [Required] The ID of the Google Cloud Platform project that the job belongs to.
    request.projectId = "";
    // * [Required] The Cloud Dataproc region in which to handle the request.
    request.region = "";
    // * [Required] The job ID.
    request.jobId = "";
    request.resource = {};

    dataproc.projects.regions.jobs.cancel(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var dataproc = google.dataproc('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'delete' method:

    // * [Required] The ID of the Google Cloud Platform project that the job belongs to.
    request.projectId = "";
    // * [Required] The Cloud Dataproc region in which to handle the request.
    request.region = "";
    // * [Required] The job ID.
    request.jobId = "";

    dataproc.projects.regions.jobs.delete(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var dataproc = google.dataproc('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'get' method:

    // * [Required] The ID of the Google Cloud Platform project that the job belongs to.
    request.projectId = "";
    // * [Required] The Cloud Dataproc region in which to handle the request.
    request.region = "";
    // * [Required] The job ID.
    request.jobId = "";

    dataproc.projects.regions.jobs.get(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var dataproc = google.dataproc('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'list' method:

    // * [Required] The ID of the Google Cloud Platform project that the job belongs to.
    request.projectId = "";
    // * [Required] The Cloud Dataproc region in which to handle the request.
    request.region = "";


    var recur = function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
        if (result.nextPageToken) {
          request.pageToken = result.nextPageToken;
          dataproc.projects.regions.jobs.list(request, recur);
        }
      }
    };

    dataproc.projects.regions.jobs.list(request, recur);
   }
});
var google = require('googleapis');
var dataproc = google.dataproc('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'submit' method:

    // * [Required] The ID of the Google Cloud Platform project that the job belongs to.
    request.projectId = "";
    // * [Required] The Cloud Dataproc region in which to handle the request.
    request.region = "";
    request.resource = {};

    dataproc.projects.regions.jobs.submit(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var dataproc = google.dataproc('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'cancel' method:

    // * The name of the operation resource to be cancelled.
    request.name = "";

    dataproc.projects.regions.operations.cancel(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var dataproc = google.dataproc('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'delete' method:

    // * The name of the operation resource to be deleted.
    request.name = "";

    dataproc.projects.regions.operations.delete(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var dataproc = google.dataproc('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'get' method:

    // * The name of the operation resource.
    request.name = "";

    dataproc.projects.regions.operations.get(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
   }
});
var google = require('googleapis');
var dataproc = google.dataproc('v1');
var GoogleAuth = require('google-auth-library');

(new GoogleAuth).getApplicationDefault(function(err, authClient) {
  if (err === null) {
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }

    var request = {
      auth: authClient
    };

    // TODO: Change placeholders below to values for parameters to the 'list' method:

    // * The name of the operation collection.
    request.name = "";


    var recur = function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
        if (result.nextPageToken) {
          request.pageToken = result.nextPageToken;
          dataproc.projects.regions.operations.list(request, recur);
        }
      }
    };

    dataproc.projects.regions.operations.list(request, recur);
   }
});
