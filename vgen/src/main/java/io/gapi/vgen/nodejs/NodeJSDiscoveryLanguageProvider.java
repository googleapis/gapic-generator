/* Copyright 2016 Google Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.gapi.vgen.nodejs;

import com.google.api.Service;
import com.google.common.collect.Multimap;
import com.google.protobuf.Api;
import com.google.protobuf.Method;

import io.gapi.vgen.ApiaryConfig;
import io.gapi.vgen.DiscoveryLanguageProvider;
import io.gapi.vgen.GeneratedResult;
import io.gapi.vgen.SnippetDescriptor;

import java.io.IOException;

/**
 * Language provider for NodeJS discovery doc codegen.
 */
public class NodeJSDiscoveryLanguageProvider implements DiscoveryLanguageProvider {
  private final NodeJSDiscoveryContext context;
  private final NodeJSLanguageProvider provider;

  public NodeJSDiscoveryLanguageProvider(Service service, ApiaryConfig apiaryConfig) {
    this.context = new NodeJSDiscoveryContext(service, apiaryConfig);
    this.provider = new NodeJSLanguageProvider();
  }

  @Override
  public GeneratedResult generateFragments(Method method, SnippetDescriptor snippetDescriptor) {
    return provider.generate(method, snippetDescriptor, context);
  }

  @Override
  public void output(String outputPath, Multimap<Method, GeneratedResult> methods)
      throws IOException {
    Api api = getService().getApis(0);
    String root =
        "autogenerated/"
            + api.getName()
            + "/"
            + api.getVersion()
            + "/"
            + context.getApiRevision()
            + "/";
    provider.output(root, outputPath, methods);
  }

  @Override
  public Service getService() {
    return context.getService();
  }
}
