@snippet generateFilename(method)
  {@method.getName}.frag.njs
@end

@snippet generateBody(method)
  @let api = context.getApi, \
      apiName = api.getName, \
      apiVersion = api.getVersion
    var google = require('googleapis');
    var {@apiName} = google.{@apiName}('{@apiVersion}');
    var GoogleAuth = require('google-auth-library');

    (new GoogleAuth).getApplicationDefault(function(err, authClient) {
      if (err === null) {
        if (authClient.createScopedRequired && authClient.createScopedRequired()) {
          var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
          authClient = authClient.createScoped(scopes);
        }

        var request = {
          auth: authClient
        };

        {@initialize(method)}

        @if context.isPageStreaming(method)
          {@iterableCall(method)}
        @else
          {@compactCall(method)}
        @end
       }
    });
  @end
@end

@private initialize(method)
  @let methodName = context.getMethodName(method), \
        apiaryConfig = context.getApiaryConfig, \
        signatureType = apiaryConfig.getType(method.getRequestTypeUrl), \
        params = context.getFlatMethodParams(method)
    // TODO: Change placeholders below to values for parameters to the '{@methodName}' method:

    @join param : params
      @let paramField = context.getField(signatureType, param), \
           paramValue = context.typeDefaultValue(signatureType, paramField), \
           paramDescription = apiaryConfig.getDescription(signatureType.getName, param)
        {@item(paramDescription)}
        request.{@context.mapParamName(param)} = {@paramValue}
      @end
    @end
    @if context.hasRequestField(method)
      request.resource = {};
    @end
  @end
@end

@private item(description)
  @if description
    // * {@description}
  @end
@end

@private elementPath(resourcePath)
  @join r : resourcePath on "."
    {@r}
  @end
@end

@private compactCall(method)
  @let methodName = context.getMethodName(method), \
       resourcesPath = context.getApiaryConfig.getResources(method.getName)
    {@context.getApi.getName}.{@elementPath(resourcesPath)}.{@methodName}(request, function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
      }
    });
  @end
@end

@private iterableCall(method)
  @let methodName = context.getMethodName(method), \
       resourcesPath = context.getApiaryConfig.getResources(method.getName)

    var recur = function(error, result) {
      if (error) {
        console.log(error);
      } else {
        console.log(result);
        if (result.nextPageToken) {
          request.pageToken = result.nextPageToken;
          {@context.getApi.getName}.{@elementPath(resourcesPath)}.{@methodName}(request, recur);
        }
      }
    };

    {@context.getApi.getName}.{@elementPath(resourcesPath)}.{@methodName}(request, recur);
  @end
@end
