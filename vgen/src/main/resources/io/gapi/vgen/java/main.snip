@extends "common.snip"

@snippet generateFilename(service)
  {@context.getApiWrapperName(service)}.java
@end

@snippet generateClass(service, body, imports)
  {@fileHeader(service)}
  package {@context.getApiConfig.getPackageName};

  @join import : imports
    import {@import};
  @end

  // Manually-added imports: add custom (non-generated) imports after this point.

  {@body}
@end

@snippet generateBody(service)
  {@alwaysImport()}

  {@serviceJavaDoc(service)}
  @@javax.annotation.Generated("by GAPIC")
  public class {@context.getApiWrapperName(service)} implements AutoCloseable {
    {@members(service)}

    {@resourceUtils(service)}

    {@constructors(service)}

    {@callables(service)}

    {@cleanupSection()}

    {@manualSection()}
  }
@end

@private alwaysImport() fill
  {@context.addImport("com.google.api.gax.grpc.ApiCallable")}
  {@context.addImport("com.google.api.gax.protobuf.PathTemplate")}
  {@context.addImport("io.grpc.ManagedChannel")}
  {@context.addImport("java.io.Closeable")}
  {@context.addImport("java.io.IOException")}
  {@context.addImport("java.util.ArrayList")}
  {@context.addImport("java.util.List")}
  {@context.addImport("java.util.concurrent.ScheduledExecutorService")}
@end

@private resourceUtils(service)
  {@resourceConstants(service)}
  {@resourceFunctions(service)}
@end

@private resourceConstants(service)
  {@pathTemplateConstants(service)}
@end

@private pathTemplateConstants(service)
  @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()
    {@pathTemplateConstant(collectionConfig)}

  @end
@end

@private pathTemplateConstant(collectionConfig)
  private static final PathTemplate {@pathTemplateConstantName(collectionConfig)} =
      PathTemplate.createWithoutUrlEncoding("{@collectionConfig.getNamePattern}");
@end

@private pathTemplateConstantName(collectionConfig)
  {@context.lowerUnderscoreToUpperUnderscore(collectionConfig.getMethodBaseName)}_PATH_TEMPLATE
@end

@private resourceFunctions(service)
  @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()
    {@formatResourceFunctions(collectionConfig)}
  @end

  @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()
    {@parseResourceFunctions(collectionConfig)}
  @end
@end

@private formatResourceFunctions(collectionConfig)
  /**
   * Formats a string containing the fully-qualified path to represent
   * a {@collectionConfig.getMethodBaseName} resource.
   *
  {@javaDocManualEdit()}
   */
  public static final String {@formatResourceFunctionName(collectionConfig)}(\
      {@formatResourceFunctionParams(collectionConfig)}) {
    return {@pathTemplateConstantName(collectionConfig)}.instantiate(
        {@pathTemplateArgs(collectionConfig)});
  }

@end

@private formatResourceFunctionName(collectionConfig)
  format{@resourceName(collectionConfig)}
@end

@private formatResourceFunctionParams(collectionConfig)
  @join param : collectionConfig.getNameTemplate.vars() on ", "
    String {@context.lowerUnderscoreToLowerCamel(param)}
  @end
@end

@private pathTemplateArgs(collectionConfig)
  @join param : collectionConfig.getNameTemplate.vars() vertical on ","
    "{@param}", {@context.lowerUnderscoreToLowerCamel(param)}
  @end
@end

@private parseResourceFunctions(collectionConfig)
  @join subField : collectionConfig.getNameTemplate.vars()
    @let fieldPath = context.upperCamelToLowerCamel(resourceName(collectionConfig))
      /**
       * Parses the {@subField} from the given fully-qualified path which
       * represents a {@context.lowerUnderscoreToLowerCamel(collectionConfig.getMethodBaseName)} resource.
       *
      {@javaDocManualEdit()}
       */
      public static final String \
          parse{@context.lowerUnderscoreToUpperCamel(subField)}From{@resourceName(collectionConfig)}(\
          String {@fieldPath}) {
        return {@pathTemplateConstantName(collectionConfig)}.parse({@fieldPath}).get("{@subField}");
      }

    @end
  @end
@end

@private resourceName(collectionConfig)
  {@context.lowerUnderscoreToUpperCamel(collectionConfig.getMethodBaseName)}Name
@end

@private members(service)
  private final {@settingsClassName(service)} settings;
  private final ManagedChannel channel;
  private final ScheduledExecutorService executor;
  private final List<AutoCloseable> closeables = new ArrayList<>();

  @join method : service.getMethods
    @let methodName = context.upperCamelToLowerCamel(method.getSimpleName), \
         methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
         inTypeName = context.typeName(method.getInputType), \
         outTypeName = context.typeName(method.getOutputType), \
         isPageStreaming = methodConfig.isPageStreaming
      private final ApiCallable<{@inTypeName}, {@outTypeName}> {@methodName}Callable;
      @if {@isPageStreaming}
        @let pageStreaming = methodConfig.getPageStreaming(), \
             resourceTypeName = context.basicTypeNameBoxed(pageStreaming.getResourcesField().getType())
          private final ApiCallable<{@inTypeName}, Iterable<{@resourceTypeName}>>
              {@methodName}IterableCallable;
        @end
      @end
    @end
  @end

  public final {@settingsClassName(service)} getSettings() {
    return settings;
  }
@end

@private constructors(service)
  @let className = context.getApiWrapperName(service)
    /**
     * Constructs an instance of {@className} with default settings.
     *
    {@javaDocManualEdit()}
     */
    public static final {@className} createWithDefaults() throws IOException {
      return create({@settingsClassName(service)}.defaultBuilder().build());
    }

    /**
     * Constructs an instance of {@className}, using the given settings.
     * The channels are created based on the settings passed in, or defaults for any
     * settings that are not set.
     *
    {@javaDocManualEdit()}
     */
    public static final {@className} create({@settingsClassName(service)} settings) throws IOException {
      return new {@className}(settings);
    }

    /**
     * Constructs an instance of {@className}, using the given settings.
     * This is protected so that it easy to make a subclass, but otherwise, the static
     * factory methods should be preferred.
     *
    {@javaDocManualEdit()}
     */
    protected {@className}({@settingsClassName(service)} settings) throws IOException {
      this.settings = settings;
      this.executor = settings.getExecutorProvider().getOrBuildExecutor();
      this.channel = settings.getChannelProvider().getOrBuildChannel(this.executor);

      @join method : service.getMethods
        @let methodName = context.upperCamelToLowerCamel(method.getSimpleName), \
             methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
             isPageStreaming = methodConfig.isPageStreaming, \
             isBundling = methodConfig.isBundling
          this.{@methodName}Callable = ApiCallable.create(settings.{@methodName}Settings(), this.channel, this.executor);
          @if {@isPageStreaming}
            this.{@methodName}IterableCallable =
                ApiCallable.createIterable(settings.{@methodName}Settings(), this.channel, this.executor);
          @end
          @if {@isBundling}
            if (settings.{@methodName}Settings().getBundlerFactory() != null) {
              closeables.add(settings.{@methodName}Settings().getBundlerFactory());
            }
          @end
        @end
      @end

      if (settings.getChannelProvider().shouldAutoClose()) {
        closeables.add(
          new Closeable() {
            @@Override
            public void close() throws IOException {
              channel.shutdown();
            }
          });
      }
      if (settings.getExecutorProvider().shouldAutoClose()) {
        closeables.add(
          new Closeable() {
            @@Override
            public void close() throws IOException {
              executor.shutdown();
            }
          });
      }
    }
  @end
@end

@private callables(service)
  @join method : service.getMethods
    @let callableConstant = context.upperCamelToUpperUnderscore(method.getSimpleName), \
         methodName = context.upperCamelToLowerCamel(method.getSimpleName), \
         inTypeName = context.typeName(method.getInputType), \
         outTypeName = context.typeName(method.getOutputType), \
         methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
         isPageStreaming = methodConfig.isPageStreaming, \
         isFlattening = methodConfig.isFlattening, \
         requestObjectMethodAccessStr = requestObjectMethodAccess(methodConfig)
      // ----- {@methodName} -----

      # TODO (garrettjones) put some kind of limit on number of flattened parameters, and
      # don't generated a flattened method if there are too many.
      @if {@isPageStreaming}
        @if {@isFlattening}
          @join flatteningGroup: \
              methodConfig.getFlattening().getFlatteningGroups()
            {@iterableFlattenedMethod(service, method, methodName, flatteningGroup)}
          @end
          {@BREAK}
        @end
        {@iterableMethodWithRequestParam(service, method, methodName, inTypeName, outTypeName, requestObjectMethodAccessStr)}
        {@methodReturningIterableCallable(service, method, methodName, inTypeName, outTypeName)}
      @else
        @if {@isFlattening}
          @join flatteningGroup : \
              methodConfig.getFlattening().getFlatteningGroups()
            {@flattenedMethod(method, methodName, flatteningGroup)}
          @end
          {@BREAK}
        @end
        {@methodWithRequestParam(method, methodName, inTypeName, outTypeName, requestObjectMethodAccessStr)}
      @end
      {@methodReturningCallable(method, callableConstant, methodName, inTypeName, outTypeName)}
    @end
  @end
@end

@private requestObjectMethodAccess(methodConfig)
  @if {@methodConfig.hasRequestObjectMethod}
    public
  @else
    private
  @end
@end

@private cleanupSection()
  /**
   * Initiates an orderly shutdown in which preexisting calls continue but new calls are immediately
   * cancelled.
   *
  {@javaDocManualEdit()}
   */
  @@Override
  public final void close() throws Exception {
    for (AutoCloseable closeable : closeables) {
      closeable.close();
    }
  }

@end

@private manualSection()
  // ========
  // Manually-added methods: add custom (non-generated) methods after this point.
  // ========

@end

@private iterableFlattenedMethod(service, method, methodName, fields)
  @let methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
       pageStreaming = methodConfig.getPageStreaming(), \
       resourceTypeName = context.basicTypeNameBoxed(pageStreaming.getResourcesField().getType()), \
       requestTypeName = context.typeName(method.getInputType)
    {@iterableFlattenedMethodJavaDoc(method, methodName, resourceTypeName, fields)}
    public final Iterable<{@resourceTypeName}> \
        {@methodName}({@paramList(fields)}) {
      {@context.typeName(method.getInputType)} request =
          {@requestTypeName}.newBuilder()
          {@builderSetCalls(fields)}
          .build();
      return {@methodName}(request);
    }

  @end
@end

@private iterableMethodWithRequestParam(service, method, methodName, inTypeName, outTypeName, accessModifier)
  @let methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
       pageStreaming = methodConfig.getPageStreaming(), \
       resourceTypeName = context.basicTypeNameBoxed(pageStreaming.getResourcesField().getType())
    {@methodJavaDoc(method, context.java.newJavaDocConfigBuilder \
      .setApiName(context.getApiWrapperName(method.getParent)) \
      .setMethodName(methodName) \
      .setReturnType(resourceTypeName) \
      .setSingleParam(context, method.getInputType, context.java.requestParam, context.java.requestParamDoc) \
      .setIterableVariant(context.java.getTrue) \
      .setCallableVariant(context.java.getFalse) \
      .build)}
    {@accessModifier} final Iterable<{@resourceTypeName}> {@methodName}({@inTypeName} request) {
      return {@methodName}IterableCallable()
          .call(request);
    }

  @end
@end

@private methodReturningIterableCallable(service, method, methodName, inTypeName, outTypeName)
  @let methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
       pageStreaming = methodConfig.getPageStreaming(), \
       resourceTypeName = context.basicTypeNameBoxed(pageStreaming.getResourcesField().getType())
    {@methodJavaDoc(method, context.java.newJavaDocConfigBuilder \
      .setApiName(context.getApiWrapperName(method.getParent)) \
      .setMethodName(methodName) \
      .setReturnType(resourceTypeName) \
      .setSingleParam(context, method.getInputType, context.java.requestParam, context.java.requestParamDoc) \
      .setIterableVariant(context.java.getTrue) \
      .setCallableVariant(context.java.getTrue) \
      .build)}
    public final ApiCallable<{@inTypeName}, Iterable<{@resourceTypeName}>> {@methodName}IterableCallable() {
      return {@methodName}IterableCallable;
    }

  @end
@end

@private flattenedMethod(method, methodName, fields)
  {@flattenedMethodJavaDoc(method, methodName, fields)}
  @let returnType = context.methodReturnTypeName(method.getOutputType), \
       returnStatement = context.methodReturnStatement(method.getOutputType), \
       requestTypeName = context.typeName(method.getInputType)
    public final {@returnType} {@methodName}({@paramList(fields)}) {
      {@context.typeName(method.getInputType)} request =
          {@requestTypeName}.newBuilder()
          {@builderSetCalls(fields)}
          .build();

      {@returnStatement}{@methodName}(request);
    }

  @end
@end

@private methodWithRequestParam(method, methodName, inTypeName, outTypeName, accessModifier)
  {@methodJavaDoc(method, context.java.newJavaDocConfigBuilder \
      .setApiName(context.getApiWrapperName(method.getParent)) \
      .setMethodName(context.upperCamelToLowerCamel(method.getSimpleName)) \
      .setReturnType(context.returnTypeOrEmpty(method.getOutputType)) \
      .setSingleParam(context, method.getInputType, context.java.requestParam, context.java.requestParamDoc) \
      .setIterableVariant(context.java.getFalse) \
      .setCallableVariant(context.java.getFalse) \
      .build)}
  @let returnType = context.methodReturnTypeName(method.getOutputType), \
       returnStatement = context.methodReturnStatement(method.getOutputType)
    {@accessModifier} {@returnType} {@methodName}({@inTypeName} request) {
      {@returnStatement}{@methodName}Callable().call(request);
    }

  @end
@end

@private methodReturningCallable(method, callableConstant, methodName, inTypeName, outTypeName)
  {@methodJavaDoc(method, context.java.newJavaDocConfigBuilder \
      .setApiName(context.getApiWrapperName(method.getParent)) \
      .setMethodName(methodName) \
      .setReturnType(context.returnTypeOrEmpty(method.getOutputType)) \
      .setSingleParam(context, method.getInputType, context.java.requestParam, context.java.requestParamDoc) \
      .setIterableVariant(context.java.getFalse) \
      .setCallableVariant(context.java.getTrue) \
      .build)}
  public final ApiCallable<{@inTypeName}, {@outTypeName}> {@methodName}Callable() {
    return {@methodName}Callable;
  }

@end

@private serviceJavaDoc(service)
  {@autoGenServiceWarning()}
  @let serviceApiVariable = context.upperCamelToLowerCamel(context.getApiWrapperName(service)), \
       settingsVariable = context.upperCamelToLowerCamel(settingsClassName(service)), \
       # TODO: support the case where the API has no flattened methods.
       firstFlattenedMethod = context.getFirstFlattenedMethod(service), \
       firstFlattenedMethodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(firstFlattenedMethod)
    /**
    {@javaDocLinesFromStr(serviceDocString(service))}
     *
     * <p>This class provides the ability to make remote calls to the backing service through method
     * calls that map to API methods. Sample code to get started:
     *
     * <pre>
     * <code>
    @join commentLine : context.java.getJavaDocLines(context.generateMethodSampleCode(context.java.newJavaDocConfigBuilder \
                               .setApiName(context.getApiWrapperName(service)) \
                               .setMethodName(context.upperCamelToLowerCamel(firstFlattenedMethod.getSimpleName)) \
                               .setReturnType(context.returnTypeOrEmpty(firstFlattenedMethod.getOutputType)) \
                               .setParams(context, firstFlattenedMethodConfig.getFlattening().getFlatteningGroups().get(0)) \
                               .setIterableVariant(context.java.getFalse) \
                               .setCallableVariant(context.java.getFalse) \
                               .build))
      {@commentLine}
    @end
     * </code>
     * </pre>
     *
     * <p>Note: close() needs to be called on the {@serviceApiVariable} object to clean up resources such
     * as threads. In the example above, try-with-resources is used, which automatically calls
     * close().
     *
     * <p>The surface of this class includes several types of Java methods for each of the API's methods:
     *
     * <ol>
     * <li> A "flattened" method. With this type of method, the fields of the request type have been
     * converted into function parameters. It may be the case that not all fields are available
     * as parameters, and not every API method will have a flattened method entry point.
     * <li> A "request object" method. This type of method only takes one parameter, a request
     * object, which must be constructed before the call. Not every API method will have a request
     * object method.
     * <li> A "callable" method. This type of method takes no parameters and returns an immutable
     * ApiCallable object, which can be used to initiate calls to the service.
     * </ol>
     *
     * <p>See the individual methods for example code.
     *
     * <p>Many parameters require resource names to be formatted in a particular way. To assist
     * with these names, this class includes a format method for each type of name, and additionally
     * a parse method to extract the individual identifiers contained within names that are
     * returned.
     *
     * <p>This class can be customized by passing in a custom instance of {@settingsClassName(service)} to
     * create(). For example:
     *
     * <!-- TODO(garrettjones) refactor code to make this simpler -->
     * <pre>
     * <code>
     * ConnectionSettings updatedConnectionSettings =
     *     {@settingsClassName(service)}.DEFAULT_CONNECTION_SETTINGS.toBuilder().provideCredentialsWith(myCredentials).build();
     * {@settingsClassName(service)} {@settingsVariable} = {@settingsClassName(service)}.defaultBuilder()
     *     .provideChannelWith(updatedConnectionSettings)
     *     .build();
     * {@context.getApiWrapperName(service)} {@serviceApiVariable} = \
         {@context.getApiWrapperName(service)}.create({@settingsVariable});
     * </code>
     * </pre>
     *
     * <!-- manual edit -->
     * <!-- end manual edit -->
     */
  @end
@end

@private serviceDocString(protoElement)
  Service Description: {@getDoc(protoElement)}
@end

@private flattenedMethodJavaDoc(method, methodName, fields)
  {@methodJavaDoc(method, context.java.newJavaDocConfigBuilder \
      .setApiName(context.getApiWrapperName(method.getParent)) \
      .setMethodName(methodName) \
      .setReturnType(context.returnTypeOrEmpty(method.getOutputType)) \
      .setParams(context, fields) \
      .setIterableVariant(context.java.getFalse) \
      .setCallableVariant(context.java.getFalse) \
      .build)}
@end

@private iterableFlattenedMethodJavaDoc(method, methodName, resourceName, fields)
  {@methodJavaDoc(method, context.java.newJavaDocConfigBuilder \
      .setApiName(context.getApiWrapperName(method.getParent)) \
      .setMethodName(methodName) \
      .setReturnType(resourceName) \
      .setParams(context, fields) \
      .setIterableVariant(context.java.getTrue) \
      .setCallableVariant(context.java.getFalse) \
      .build)}
@end

@private methodJavaDoc(method, docConfig)
  {@autoGenMethodWarning()}
  {@javaDocStart()}
  {@javaDocLines(method)}
  @if context.getApiConfig.generateSamples
    {@javaDocEmptyLine()}
    {@javaDocEmptyLine()} <pre><code>
    @join commentLine : context.java.getJavaDocLines(context.generateMethodSampleCode(docConfig))
      {@commentLine}
    @end
    {@javaDocEmptyLine()} </code></pre>
  @end
  {@javaDocEmptyLine()}
  {@javaDocManualEdit()}
  @if docConfig.isCallableVariant
  @else
    {@javaDocEmptyLine()}
    @join param : docConfig.getParams
      @join commentLine : context.java.getJavaDocLinesWithPrefix(param.getDescription, paramDocLinePrefix(param))
        {@commentLine}
      @end
    @end
    {@javaDocThrows()}
  @end
  {@javaDocEnd()}
@end

@private paramDocLinePrefix(param)
  @@param {@param.getName} {@""}
@end

@private paramList(fields)
  @join field : fields on ", "
    @let paramName = context.lowerUnderscoreToLowerCamel(field.getSimpleName)
      {@context.typeName(field.getType)} {@paramName}
    @end
  @end
@end

@private builderSetCalls(fields)
  @join field : fields
    @let paramName = context.lowerUnderscoreToLowerCamel(field.getSimpleName)
      .{@setCallName(field)}({@paramName})
    @end
  @end
@end

@snippet generateMethodSampleCode(docConfig)
  @let ApiName = docConfig.getApiName, \
      apiName = context.upperCamelToLowerCamel(ApiName)
    try ({@ApiName} {@apiName} = {@ApiName}.createWithDefaults()) {
      @join param : docConfig.getParams
        {@context.typeName(param.getType)} {@param.getName} = {@context.zeroValue(param.getType)};
      @end

      @if docConfig.isIterableVariant
        for ({@docConfig.getReturnType} elements : {@methodCallSampleCode(docConfig, apiName)}) {
          // doThingsWith(elements);
        }
      @else
        {@callResultSampleCode(docConfig.getReturnType)}{@methodCallSampleCode(docConfig, apiName)};
      @end
    }
  @end
@end

@private callResultSampleCode(returnType)
  @if returnType.isEmpty
  @else
    {@returnType} callResult = {@""}
  @end
@end

@private methodCallSampleCode(docConfig, apiName)
  @if docConfig.isCallableVariant
    {@apiName}.{@methodCallName(docConfig)}().call({@argList(docConfig.getParams)})
  @else
    {@apiName}.{@methodCallName(docConfig)}({@argList(docConfig.getParams)})
  @end
@end

@private methodCallName(docConfig)
  @if docConfig.isCallableVariant
    {@methodCallNameIter(docConfig)}Callable
  @else
    {@docConfig.getMethodName}
  @end
@end

@private methodCallNameIter(docConfig)
  @if docConfig.isIterableVariant
    {@docConfig.getMethodName}Iterable
  @else
    {@docConfig.getMethodName}
  @end
@end

@private argList(params)
  @join param : params on ", "
    {@param.getName}
  @end
@end
