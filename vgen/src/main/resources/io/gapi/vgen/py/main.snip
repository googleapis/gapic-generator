@extends "../common.snip"

@snippet generateFilename(service)
    {@context.upperCamelToLowerUnderscore(context.getApiWrapperName(service))}.py
@end

@snippet generateClass(service, imports)
    {@licenseSection(service)}

    {@moduleDocstring(service)}

    {@importSection(imports)}


    @if aliasSection(service)
        {@aliasSection(service)}


    @end
    {@serviceClass(service)}
@end

@private licenseSection(service)
    @# Copyright 2016 Google Inc. All rights reserved.
    @#
    @# Licensed under the Apache License, Version 2.0 (the "License");
    @# you may not use this file except in compliance with the License.
    @# You may obtain a copy of the License at
    @#
    @# http://www.apache.org/licenses/LICENSE-2.0
    @#
    @# Unless required by applicable law or agreed to in writing, software
    @# distributed under the License is distributed on an "AS IS" BASIS,
    @# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    @# See the License for the specific language governing permissions and
    @# limitations under the License.
    @#
    @# EDITING INSTRUCTIONS
    @# This file was generated from the file
    @# https://github.com/google/googleapis/blob/master/{@service.getFile().getSimpleName()},
    @# and updates to that file get reflected here through a refresh process.
    @# For the short term, the refresh process will only be runnable by Google engineers.
    @#
    @# The only allowed edits are to method and file documentation. A 3-way
    @# merge preserves those additions if the generated source changes.
@end

@private moduleDocstring(service)
    """Accesses the {@service.getParent.getFullName} {@service.getSimpleName} API."""
@end

@private importSection(imports)
    @join import : imports
        {@import}
    @end
@end

@private aliasSection(service)
    @let ifaceConfig = context.getApiConfig.getInterfaceConfig(service), \
            bundling = context.messages.filterBundlingMethods(ifaceConfig, service.getMethods), \
            pageStreaming = context.messages.filterPageStreamingMethods(ifaceConfig, service.getMethods)
        @if bundling
            _BundleDesc = google.gax.BundleDescriptor
        @end
        # Note that this should be inside the page streaming conditional. But a snippets bug
        # causes the indentation to render improperly if so. The result is that sometimes we
        # generate too much whitespace, which can be removed by yapf in the pipeline.
        {@BREAK}
        @if pageStreaming

            _PageDesc = google.gax.PageDescriptor
        @end
    @end
@end

@private serviceClass(service)
    @let path_templates = {@pathTemplateSection(service)}, \
         documentation = {@comments(service)}
        class {@context.getApiWrapperName(service)}(object):
            @if documentation
                {@documentation}

            @end
            {@constantSection(service)}

            @if path_templates
                {@path_templates}

            @end
            {@initMethodSection(service)}

            {@serviceMethodsSection(service)}

    @end
@end

@private constantSection(service)
    @let ifaceConfig = context.getApiConfig.getInterfaceConfig(service)
        SERVICE_ADDRESS = '{@context.getServiceConfig.getServiceAddress(service)}'
        """The default address of the service."""

        DEFAULT_SERVICE_PORT = {@context.getServiceConfig.getServicePort()}
        """The default port of the service."""

        _CODE_GEN_NAME_VERSION = 'gapic/0.1.0'

        _GAX_VERSION = pkg_resources.get_distribution('google-gax').version

        _DEFAULT_TIMEOUT = 30
        @if context.messages.filterPageStreamingMethods(ifaceConfig, service.getMethods)

            _PAGE_DESCRIPTORS = {
                @join method : context.messages.filterPageStreamingMethods(ifaceConfig, service.getMethods) on {@", "}.add(BREAK)
                    @let pageStreaming = ifaceConfig.getMethodConfig(method).getPageStreaming(), \
                            requestToken = pageStreaming.getRequestTokenField().getSimpleName(), \
                            responseToken = pageStreaming.getResponseTokenField().getSimpleName(), \
                            resources = pageStreaming.getResourcesField().getSimpleName(), \
                            methodName = context.upperCamelToLowerUnderscore(method.getSimpleName)
                        '{@methodName}': _PageDesc(
                            '{@requestToken}',
                            '{@responseToken}',
                            '{@resources}'
                        )
                    @end
                @end
            }
        @end
        @if context.messages.filterBundlingMethods(ifaceConfig, service.getMethods)

            _BUNDLE_DESCRIPTORS = {
                @let ifaceConfig = context.getApiConfig.getInterfaceConfig(service)
                    @join method : context.messages.filterBundlingMethods(ifaceConfig, service.getMethods) on {@", "}.add(BREAK)
                        @let bundling = ifaceConfig.getMethodConfig(method).getBundling(), \
                                methodName = context.upperCamelToLowerUnderscore(method.getSimpleName)
                            '{@methodName}': _BundleDesc(
                                {@bundleDescriptorBody(bundling, method)}
                            )
                        @end
                    @end
                @end
            }
        @end

        @# The scopes needed to make gRPC calls to all of the methods defined in
        @# this service
        _ALL_SCOPES = (
            @join auth_scope : context.getServiceConfig.getAuthScopes(service) on BREAK
                '{@auth_scope}',
            @end
        )
    @end
@end

@private constructDefaults(service)
    @let ifaceConfig = context.getApiConfig.getInterfaceConfig(service)
        @if or(context.messages.filterPageStreamingMethods(ifaceConfig, service.getMethods), \
               context.messages.filterBundlingMethods(ifaceConfig, service.getMethods))
            self._defaults = api_callable.construct_settings(
                '{@service.getFullName}',
                json.loads(client_config),
                bundling_override,
                retrying_override,
                config.STATUS_CODE_NAMES,
                timeout,
                @if context.messages.filterBundlingMethods(ifaceConfig, service.getMethods)
                    @if context.messages.filterPageStreamingMethods(ifaceConfig, service.getMethods)
                        bundle_descriptors=self._BUNDLE_DESCRIPTORS,
                    @else
                        bundle_descriptors=self._BUNDLE_DESCRIPTORS
                    @end
                @end
                @if context.messages.filterPageStreamingMethods(ifaceConfig, service.getMethods)
                    page_descriptors=self._PAGE_DESCRIPTORS
                @end
            )
        @else
            self._defaults = api_callable.construct_settings(
                '{@service.getFullName}',
                json.loads(client_config),
                bundling_override,
                retrying_override,
                config.STATUS_CODE_NAMES,
                timeout
            )
        @end
    @end
@end

@private initMethodSection(service)
    @let stubModule = pyproto.getPbFileName(service), \
             stubService = service.getSimpleName(), \
             jsonBaseName = {@context.upperCamelToLowerUnderscore(service.getSimpleName)}, \
             ifaceConfig = context.getApiConfig.getInterfaceConfig(service)
        def __init__(
                self,
                service_path=SERVICE_ADDRESS,
                port=DEFAULT_SERVICE_PORT,
                channel=None,
                ssl_creds=None,
                scopes=None,
                retrying_override=None,
                bundling_override=None,
                timeout=_DEFAULT_TIMEOUT,
                app_name='gax',
                app_version=_GAX_VERSION):
            """Constructor.

            Args:
              service_path (string): The domain name of the API remote host.
              port (int): The port on which to connect to the remote host.
              channel (:class:`grpc.beta.implementations.Channel`): A ``Channel``
                object through which to make calls.
              ssl_creds (:class:`grpc.beta.implementations.ClientCredentials`):
                A `ClientCredentials` for use with an SSL-enabled channel.
              retrying_override (dict[string, :class:`google.gax.RetryOptions`]): A
                dictionary that overrides default retrying settings.
                ``retrying_override`` maps method names (e.g., ``'list_foo'``) to
                custom RetryOptions objects, or to None. A value of None indicates
                that the method in question should not retry.
              bundling_override (dict[string, :class:`google.gax.BundleOptions`]): A
                dictionary that overrides default bundling settings.
                ``bundling_override`` maps bundling method names (e.g.,
                'publish_foo') to custom BundleOptions objects, or to None. It is
                invalid to have a key for a method that is not bundling-enabled. A
                value of None indicates that the method in question should not
                bundle.
              timeout (int): The default timeout, in seconds, for calls made
                through this client
              app_name (string): The codename of the calling service.
              app_version (string): The version of the calling service.

            Returns:
              A {@context.getApiWrapperName(service)} object.
            """
            if scopes is None:
                scopes = self._ALL_SCOPES
            bundling_override = bundling_override or {}
            retrying_override = retrying_override or {}
            client_config = pkg_resources.resource_string(
                __name__, '{@jsonBaseName}_client_config.json')
            {@constructDefaults(service)}
            goog_api_client = '{}/{} {} gax/{} python/{}'.format(
                app_name,
                app_version,
                self._CODE_GEN_NAME_VERSION,
                self._GAX_VERSION,
                platform.python_version()
            )
            self._headers = [('x-goog-api-client', goog_api_client)]
            self.stub = config.create_stub(
                {@stubModule}.beta_create_{@stubService}_stub,
                service_path,
                port,
                ssl_creds=ssl_creds,
                channel=channel,
                scopes=scopes)
    @end
@end

@private bundleDescriptorBody(bundling, method)
    @let bundledField = bundling.getBundledField().getSimpleName(), \
            discriminatorFields = bundling.getDiscriminatorFields()
        @if {@bundling.hasSubresponseField}
                '{@bundledField}',
                [
                    @join fieldSelector : bundling.getDiscriminatorFields() on {@", "}.add(BREAK)
                        '{@fieldSelector.getParamName}'
                    @end
                ],
                subresponse_field='{@bundling.getSubresponseField().getSimpleName()}',
        @else
                '{@bundledField}',
                [
                    @join fieldSelector : bundling.getDiscriminatorFields() on {@", "}.add(BREAK)
                        '{@fieldSelector.getParamName}'
                    @end
                ]
        @end
    @end
@end

@private pathTemplateName(collectionConfig)
    _{@context.lowerUnderscoreToUpperUnderscore(collectionConfig.getEntityName)}_PATH_TEMPLATE
@end

@private pathTemplateSection(service)
    @if context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()
        @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()
            {@pathTemplateName(collectionConfig)} = path_template.PathTemplate(
                '{@collectionConfig.getNamePattern}')
        @end

        @join collectionConfig : context.getApiConfig.getInterfaceConfig(service).getCollectionConfigs()

            {@createResourceFunction(collectionConfig)}
        @end
    @end
@end

@private createResourceFunction(collectionConfig)
    {@"@classmethod"}
    def {@collectionConfig.getEntityName}_path(cls, {@createResourceFunctionParams(collectionConfig)}):
        """Returns a fully-qualified {@collectionConfig.getEntityName} resource name string."""
        return cls.{@pathTemplateName(collectionConfig)}.render({
            {@createRenderDictionary(collectionConfig)}
        })
@end

@private createResourceFunctionParams(collectionConfig)
    @join param : collectionConfig.getNameTemplate.vars() on ", "
        {@param}
    @end
@end

@private createRenderDictionary(collectionConfig)
    @join param: collectionConfig.getNameTemplate.vars() on BREAK
        '{@param}': {@param},
    @end
@end

@private comments(element)
    @join comment : context.comments(element, importHandler)
        {@comment}
    @end
@end

@private serviceMethodsSection(service)
    @# Service calls
    @join method : service.getMethods on BREAK.add(BREAK)
        {@flattenedMethod(service, method)}
    @end
@end

@private callableConstructor(method)
    api_call = api_callable.create_api_call(
        self.stub.{@method.getSimpleName()}, settings=settings)
    @if pyproto.isEmptyMessage(method.getOutputMessage)
        api_call(req, metadata=self._headers)
    @else
        return api_call(req, metadata=self._headers)
    @end
@end

@private flattenedMethod(service, method)
    @let methodName = context.upperCamelToLowerUnderscore(method.getSimpleName()), \
             methodInputModule = pyproto.getPbFileName(method.getInputMessage()), \
             inputTypeName = method.getInputMessage().getSimpleName(), \
             documentation = comments(method), \
             methodConfig = context.getApiConfig.getInterfaceConfig(service).getMethodConfig(method), \
             requiredParams = methodConfig.getRequiredFields(), \
             optionalParams = methodConfig.getOptionalFields()
        @if or(requiredParams, optionalParams)
            def {@methodName}(
                    self,
                    @if requiredParams
                        @if optionalParams
                            {@requiredParameterNames(requiredParams)},
                            {@optionalParameterValues(optionalParams)},
                        @else
                            {@requiredParameterNames(requiredParams)},
                        @end
                    @else
                        {@optionalParameterValues(optionalParams)},
                    @end
                    options=None):
                @if documentation
                    {@documentation}
                @end
                @if {@defaultMutableValues(optionalParams)}
                    {@defaultMutableValues(optionalParams)}
                @end
                @if requiredParams
                    @if optionalParams
                        req = {@methodInputModule}.{@inputTypeName}(
                            {@namedParameters(requiredParams)},
                            {@namedParameters(optionalParams)})
                    @else
                        req = {@methodInputModule}.{@inputTypeName}(
                            {@namedParameters(requiredParams)})
                    @end
                @else
                    req = {@methodInputModule}.{@inputTypeName}(
                        {@namedParameters(optionalParams)})
                @end
                settings = self._defaults['{@methodName}'].merge(options)
                {@callableConstructor(method)}
        @else
            def {@methodName}(
                    self,
                    options=None):
                @if documentation
                    {@documentation}
                @end
                req = {@methodInputModule}.{@inputTypeName}()
                settings = self._defaults['{@methodName}'].merge(options)
                {@callableConstructor(method)}
        @end
    @end
@end

@private requiredParameterNames(params)
    @join field : params on ",".add(BREAK)
        {@context.python.wrapIfKeywordOrBuiltIn({@field.getSimpleName()})}
    @end
@end

@private optionalParameterValues(params)
    @join field : params on ",".add(BREAK)
        @let paramName = {@context.python.wrapIfKeywordOrBuiltIn(field.getSimpleName())}
            @if {@context.isDefaultValueMutable(field)}
                {@paramName}=None
            @else
                {@paramName}={@context.defaultValue(field, importHandler)}
            @end
        @end
    @end
@end

@private defaultMutableValues(params)
    @join field : params if {@context.isDefaultValueMutable(field)} on BREAK
        @let paramName = {@context.python.wrapIfKeywordOrBuiltIn(field.getSimpleName())}
            if {@paramName} is None:
                {@paramName} = {@context.defaultValue(field, importHandler)}
        @end
    @end
@end

@private namedParameters(params)
    @join field : params on ",".add(BREAK)
        @let paramName = {@field.getSimpleName()}
            {@paramName}={@context.python.wrapIfKeywordOrBuiltIn(field.getSimpleName())}
        @end
    @end
@end
