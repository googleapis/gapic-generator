// (-- Library API for toolkit testing purposes --)

syntax = "proto3";

package google.example.library.v1;

import "book_from_anywhere.proto";
import "field_mask.proto";
import "google/api/annotations.proto";
import "google/longrunning/operations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "shared_type.proto";
import "tagger.proto";
import "errors.proto";

option java_multiple_files = true;
option java_outer_classname = "LibraryProto";
option java_package = "com.google.example.library.v1";
option go_package = "google.golang.org/genproto/googleapis/example/library/v1;library";

// This API represents a simple digital library.  It lets you manage Shelf
// resources and Book resources in the library. It defines the following
// resource model:
//
// - The API has a collection of [Shelf][google.example.library.v1.Shelf]
//   resources, named ``bookShelves/*``
//
// - Each Shelf has a collection of [Book][google.example.library.v1.Book]
//   resources, named `bookShelves/*/books/*`
//
// Check out [cloud docs!](/library/example/link).
// This is [not a cloud link](http://www.google.com).
//
// Service comment may include special characters: <>&"`'@.
//
service LibraryService {

  // Creates a shelf, and returns the new Shelf.
  // RPC method comment may include special characters: <>&"`'@.
  rpc CreateShelf(CreateShelfRequest) returns (Shelf) {
    option (google.api.http) = { post: "/v1/bookShelves" body: "shelf" };
  }

  // Gets a shelf.
  rpc GetShelf(GetShelfRequest) returns (Shelf) {
    option (google.api.http) = { get: "/v1/{name=bookShelves/*}" };
  }

  // Lists shelves.
  rpc ListShelves(ListShelvesRequest) returns (ListShelvesResponse) {
    option (google.api.http) = { get: "/v1/bookShelves" };
  }

  // Deletes a shelf.
  rpc DeleteShelf(DeleteShelfRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { delete: "/v1/{name=bookShelves/*}" };
  }

  // Merges two shelves by adding all books from the shelf named
  // `other_shelf_name` to shelf `name`, and deletes
  // `other_shelf_name`. Returns the updated shelf.
  rpc MergeShelves(MergeShelvesRequest) returns (Shelf) {
    option (google.api.http) = { post: "/v1/{name=bookShelves/*}:merge" body: "*" };
  }

  // Creates a book.
  rpc CreateBook(CreateBookRequest) returns (Book) {
    option (google.api.http) = { post: "/v1/{name=bookShelves/*}/books" body: "book" };
  }

  // Creates a series of books.
  rpc PublishSeries(PublishSeriesRequest) returns (PublishSeriesResponse) {
    option (google.api.http) = { post: "/v1:publish" body: "*" };
  }

  // Gets a book.
  rpc GetBook(GetBookRequest) returns (Book) {
    option (google.api.http) = { get: "/v1/{name=bookShelves/*/books/*}" };
  }

  // Lists books in a shelf.
  rpc ListBooks(ListBooksRequest) returns (ListBooksResponse) {
    option (google.api.http) = { get: "/v1/{name=bookShelves/*}/books" };
  }

  // Deletes a book.
  rpc DeleteBook(DeleteBookRequest) returns (protobuf.Empty) {
    option (google.api.http) = { delete: "/v1/{name=bookShelves/*/books/*}" };
  }

  // Updates a book.
  rpc UpdateBook(UpdateBookRequest) returns (Book) {
    option (google.api.http) = { put: "/v1/{name=bookShelves/*/books/*}" body: "book" };
  }

  // Moves a book to another shelf, and returns the new book.
  rpc MoveBook(MoveBookRequest) returns (Book) {
    option (google.api.http) = { post: "/v1/{name=bookShelves/*/books/*}:move" body: "*" };
  }

  // Lists a primitive resource. To test go page streaming.
  rpc ListStrings(ListStringsRequest) returns (ListStringsResponse) {
    option (google.api.http) = { get: "/v1/strings" };
  }

  // Adds comments to a book
  rpc AddComments(AddCommentsRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { post: "/v1/{name=bookShelves/*}/comments" body: "*" };
  }

  // Gets a book from an archive.
  rpc GetBookFromArchive(GetBookFromArchiveRequest) returns (BookFromArchive) {
    // The http binding on this field does not include the "**" path in order to
    // test the name conflict resolution in configgen.
    option (google.api.http) = { get: "/v1/{name=archives/*/books/*}"};
  }

  // Gets a book from a shelf or archive.
  rpc GetBookFromAnywhere(GetBookFromAnywhereRequest) returns (BookFromAnywhere) {
    option (google.api.http) = { get: "/v1/{name=archives/*/books/**}"};
  }

  // Test proper OneOf-Any resource name mapping
  rpc GetBookFromAbsolutelyAnywhere(GetBookFromAbsolutelyAnywhereRequest) returns (BookFromAnywhere) {
    option (google.api.http) = {
      post: "/v1/{name=archives/*/books/*}"
      additional_bindings {
        post: "/v1/{alt_book_name=bookShelves/*/books/*}"
      }
    };
  }

  // Updates the index of a book.
  rpc UpdateBookIndex(UpdateBookIndexRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = { post: "/v1/{name=bookShelves/*/books/*}/index" body: "*" };
  }

  // Test server streaming
  rpc StreamShelves(StreamShelvesRequest) returns (stream StreamShelvesResponse) {
    // gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
  }

  // Test server streaming, non-paged responses.
  rpc StreamBooks(StreamBooksRequest) returns (stream Book) {
    // gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
  }

  // Test bidi-streaming.
  rpc DiscussBook(stream DiscussBookRequest) returns (stream Comment) {
    // gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
  }

  // Test client streaming.
  rpc MonologAboutBook(stream DiscussBookRequest) returns (Comment) {
    // gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
  }

  rpc FindRelatedBooks(FindRelatedBooksRequest) returns (FindRelatedBooksResponse) {
    option (google.api.http) = { get: "/v1/bookShelves" };
  }

  // Adds a tag to the book. This RPC is a mixin.
  rpc AddTag(google.tagger.v1.AddTagRequest) returns (google.tagger.v1.AddTagResponse) {
    option (google.api.http) = { post: "/v1/{resource=bookShelves/*/books/*}:addTag" body: "*" };
  }

  // AddLabel intentionally left out to test the reroute_to_grpc_interface feature

  // Test long-running operations
  rpc GetBigBook(GetBookRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = { get: "/v1/{name=bookShelves/*/books/*}:big" };
  }

  // Test long-running operations with empty return type.
  rpc GetBigNothing(GetBookRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = { get: "/v1/{name=bookShelves/*/books/*}:bignothing" };
  }

  // Test optional flattening parameters of all types
  rpc TestOptionalRequiredFlatteningParams(TestOptionalRequiredFlatteningParamsRequest) returns (TestOptionalRequiredFlatteningParamsResponse) {
    option (google.api.http) = { post: "/v1/testofp" body: "*" };
  }

  // This method is not exposed in the GAPIC config.
  rpc PrivateGetBook(GetBookRequest) returns (Book)  {
    // http_get retry codes should not be generated from this private method.
    option (google.api.http) = { get: "/v1/{name=bookShelves/*/books/*}" };
  }
}

// A single book in the library.
// Message comment may include special characters: <>&"`'@.
message Book {
  // The resource name of the book.
  // Book names have the form `bookShelves/{shelf_id}/books/{book_id}`.
  // Message field comment may include special characters: <>&"`'@.
  string name = 1;

  // The name of the book author.
  string author = 2;

  // The title of the book.
  string title = 3;

  // Value indicating whether the book has been read.
  bool read = 4;


  enum Rating {
    GOOD = 0; // GOOD enum description
    BAD = 1; // Enum description with special characters: <>&"`'@.
  }

  // For testing enums.
  Rating rating = 5;

  // For testing all well-known types.
  google.protobuf.Any any_value = 10;
  google.protobuf.Struct struct_value = 11;
  google.protobuf.Value value_value = 12;
  google.protobuf.ListValue list_value_value = 27;
  map<string, google.protobuf.ListValue> map_list_value_value = 28;
  google.protobuf.Timestamp time_value = 13;
  google.protobuf.Duration duration_value = 14;
  google.protobuf.FieldMask field_mask_value = 15;
  google.protobuf.Int32Value int32_value = 16;
  google.protobuf.UInt32Value uint32_value = 17;
  google.protobuf.Int64Value int64_value = 18;
  google.protobuf.UInt64Value uint64_value = 19;
  google.protobuf.FloatValue float_value = 20;
  google.protobuf.DoubleValue double_value = 21;
  google.protobuf.StringValue string_value = 22;
  google.protobuf.BoolValue bool_value = 23;
  google.protobuf.BytesValue bytes_value = 24;

  // Test doc generation of lists:
  //
  // +   Here is a sentence about the first element of the list that continues
  //     into a second line.
  // +   The second element of the list.
  // +   Another element of the list where the indentation isn't consistent
  // after a blank space.
  //
  //     The second paragraph of the list
  // that doesn't have a hanging indent.
  map<int32, string> map_string_value = 25;
  map<string, SomeMessage> map_message_value = 26;

  // Tests Python doc generation: should generate a dummy file for shared_type
  // resource, but *not* its import, other_shared_type
  google.test.shared.data.Used resource = 29;
}

// A single book in the archives.
message BookFromArchive {
  // The resource name of the book.
  // Book names have the form `archives/{archive_id}/books/{book_id}`.
  string name = 1;

  // The name of the book author.
  string author = 2;

  // The title of the book.
  string title = 3;

  // Value indicating whether the book has been read.
  bool read = 4;
}

message SomeMessage {
  int32 field = 1;

  SomeMessage2 field2 = 2;

  // Tests service with two enums of the same simple name
  enum Alignment {
    GOOD = 0;
    NEUTRAL = 1;
    EVIL = 2;
  }

  Alignment alignment = 3;
}

message SomeMessage2 {
  int32 field1 = 1;

  message SomeMessage3 {

    // Tests Python nested enums
    enum Alignment {
      // 8-bit
      CHAR = 0;
      // 32-bit
      INT = 1;
      // 64-bit
      DOUBLE = 2;
    }
  }

  // Another enum with duplicated simple name
  enum Alignment {
    FLUSH_LEFT = 0;
    FLUSH_RIGHT = 1;
    CENTERED = 2;
    JUSTIFIED = 3;
  }

  Alignment format = 2;
}

// A Shelf contains a collection of books with a theme.
message Shelf {
  // The resource name of the shelf.
  // Shelf names have the form `bookShelves/{shelf_id}`.
  string name = 1;

  // The theme of the shelf
  string theme = 2;

  // Internal theme that is visible to trusted testers only.
  string internal_theme = 3;
}

// Request message for LibraryService.CreateShelf.
message CreateShelfRequest {
  // The shelf to create.
  Shelf shelf = 1;
}

// Request message for LibraryService.GetShelf.
message GetShelfRequest {
  // The name of the shelf to retrieve.
  string name = 1;

  // Field to verify that message-type query parameter gets flattened.
  SomeMessage message = 2;

  StringBuilder string_builder = 3;

  // To test 'options' parameter name conflict.
  string options = 4;
}


// Creates a name conflict with java.lang type
message StringBuilder {
  string name = 1;
}

// Request message for LibraryService.ListShelves.
message ListShelvesRequest {
  // A token identifying a page of results the server should return.
  // Typically, this is the value of
  // [ListShelvesResponse.next_page_token][google.example.library.v1.ListShelvesResponse.next_page_token]
  // returned from the previous call to `ListShelves` method.
  string page_token = 2;
}

// Response message for LibraryService.ListShelves.
message ListShelvesResponse {
  // The list of shelves.
  repeated Shelf shelves = 1;

  // A token to retrieve next page of results.
  // Pass this value in the
  // [ListShelvesRequest.page_token][google.example.library.v1.ListShelvesRequest.page_token]
  // field in the subsequent call to `ListShelves` method to retrieve the next
  // page of results.
  string next_page_token = 2;
}

// Request message for LibraryService.StreamShelves.
message StreamShelvesRequest {
}

// Response message for LibraryService.StreamShelves.
message StreamShelvesResponse {
  // The list of shelves.
  repeated Shelf shelves = 1;
}

// Request message for LibraryService.DeleteShelf.
message DeleteShelfRequest {
  // The name of the shelf to delete.
  string name = 1;
}

// Describes the shelf being removed (other_shelf_name) and updated
// (name) in this merge.
message MergeShelvesRequest {
  // The name of the shelf we're adding books to.
  string name = 1;

  // The name of the shelf we're removing books from and deleting.
  string other_shelf_name = 2;
}

// Request message for LibraryService.CreateBook.
message CreateBookRequest {
  // The name of the shelf in which the book is created.
  string name = 1;

  // The book to create.
  Book book = 2;
}

// Request message for LibraryService.PublishSeries.
message PublishSeriesRequest {
  // The shelf in which the series is created.
  Shelf shelf = 1;

  // The books to publish in the series.
  repeated Book books = 2;

  oneof versioning {
    // The edition of the series
    uint32 edition = 3;

    // If the book is in a pre-publish state
    bool review_copy = 4;
  }

  // Uniquely identifies the series to the publishing house.
  SeriesUuid series_uuid = 5;
}

message SeriesUuid {
  oneof source {
    bytes series_bytes = 1;
    string series_string = 2;
  }
}

// Response message for LibraryService.PublishSeries.
message PublishSeriesResponse {
  // The names of the books in the series that were published
  repeated string book_names = 1;

  // Uniquely identifies the series published
  SeriesUuid series_uuid = 2;
}

// Request message for LibraryService.GetBook.
message GetBookRequest {
  // The name of the book to retrieve.
  string name = 1;
}

// Request message for LibraryService.ListBooks.
message ListBooksRequest {
  // The name of the shelf whose books we'd like to list.
  string name = 1;

  // Requested page size. Server may return fewer books than requested.
  // If unspecified, server will pick an appropriate default.
  int32 page_size = 2;

  // A token identifying a page of results the server should return.
  // Typically, this is the value of
  // [ListBooksResponse.next_page_token][google.example.library.v1.ListBooksResponse.next_page_token].
  // returned from the previous call to `ListBooks` method.
  string page_token = 3;

  // To test python built-in wrapping.
  string filter = 4;
}

// Response message for LibraryService.ListBooks.
message ListBooksResponse {
  // The list of books.
  repeated Book books = 1;

  // A token to retrieve next page of results.
  // Pass this value in the
  // [ListBooksRequest.page_token][google.example.library.v1.ListBooksRequest.page_token]
  // field in the subsequent call to `ListBooks` method to retrieve the next
  // page of results.
  string next_page_token = 2;
}

// Request message for LibraryService.StreamBooks.
message StreamBooksRequest {
  // The name of the shelf whose books we'd like to list.
  string name = 1;
}

// Request message for LibraryService.UpdateBook.
message UpdateBookRequest {
  // The name of the book to update.
  string name = 1;

  // An optional foo.
  string optional_foo = 2;

  // The book to update with.
  Book book = 3;

  // A field mask to apply, rendered as an HTTP parameter.
  google.protobuf.FieldMask update_mask = 4;

  // To test Python import clash resolution.
  google.example.library.v1.FieldMask physical_mask = 5;
}

// Request message for LibraryService.DeleteBook.
message DeleteBookRequest {
  // The name of the book to delete.
  string name = 1;
}

// Describes what book to move (name) and what shelf we're moving it
// to (other_shelf_name).
message MoveBookRequest {
  // The name of the book to move.
  string name = 1;

  // The name of the destination shelf.
  string other_shelf_name = 2;
}

message ListStringsRequest {
  string name = 1;
  int32 page_size = 2;
  string page_token = 3;
}

message ListStringsResponse {
  repeated string strings = 1;
  string next_page_token = 2;
}

message AddCommentsRequest {
  string name = 1;

  repeated Comment comments = 2;
}

message Comment {
  // won't be filled in by the sample generator
  string user_name = 1;

  // should be filled in by the sample generator
  bytes comment = 2;

  enum Stage {
    UNSET = 0;
    DRAFT = 1;
    PUBLISHED = 2;
    DELETED = 3;
  }

  // should be filled in by the sample generator
  Stage stage = 5;

  // Tests Python nested enums
  SomeMessage2.SomeMessage3.Alignment alignment = 6;
}

// Request message for LibraryService.GetBookFromArchive.
message GetBookFromArchiveRequest {
  // The name of the book to retrieve.
  string name = 1;
}

// Request message for LibraryService.GetBookFromAnywhere.
message GetBookFromAnywhereRequest {
  // The name of the book to retrieve.
  string name = 1;

  // An alternate book name, used to test restricting flattened field to a
  // single resource name type in a oneof.
  string alt_book_name = 2;
}

// Request message for LibraryService.GetBookFromAbsolutelyAnywhere.
message GetBookFromAbsolutelyAnywhereRequest {
  // The name of the book to retrieve.
  string name = 1;

  // An alternate book name, used to test proper processing of placeholders
  // within additional bindings.
  string alt_book_name = 2;
}

// Request message for LibraryService.UpdateBookIndex.
message UpdateBookIndexRequest {
  // The name of the book to update.
  string name = 1;

  // The name of the index for the book
  string index_name = 2;

  // The index to update the book with
  map<string, string> index_map = 3;
}

message DiscussBookRequest {
  // The name of the book to be discussed. If this is in the middle
  // of the stream and this is not specified, the name in the previous
  // message will be reused.
  string name = 1;

  // The new comment.
  Comment comment = 2;

  bytes image = 3;
}

// Test repeated field with resource name format in request
message FindRelatedBooksRequest {
  repeated string names = 1;
  repeated string shelves = 2;
  int32 page_size = 4;
  string page_token = 5;
}

// Test repeated field with resource name format in page streaming response
message FindRelatedBooksResponse {
  repeated string names = 1;
  string next_page_token = 2;
}

// Metadata for a longrunning operation.
message GetBigBookMetadata {
    // Approximate percentage of the book processed thus far.
    int32 progress_percent = 1;
}

enum TopLevelEnum {
  FOO = 0;
  BAR = 1;
}

message TestOptionalRequiredFlatteningParamsRequest {
    // For testing all types, plus resource-names, as required and optional.
    enum InnerEnum {
        ZERO = 0;
        ONE = 1;
    }

    message InnerMessage {
    }

    int32 required_singular_int32 = 1;
    int64 required_singular_int64 = 2;
    float required_singular_float = 3;
    double required_singular_double = 4;
    bool required_singular_bool = 5;
    InnerEnum required_singular_enum = 6;
    string required_singular_string = 7;
    bytes required_singular_bytes = 8;
    InnerMessage required_singular_message = 9;
    string required_singular_resource_name = 10;
    string required_singular_resource_name_oneof = 11;
    string required_singular_resource_name_common = 14;
    fixed32 required_singular_fixed32 = 12;
    fixed64 required_singular_fixed64 = 13;

    repeated int32 required_repeated_int32 = 21;
    repeated int64 required_repeated_int64 = 22;
    repeated float required_repeated_float = 23;
    repeated double required_repeated_double = 24;
    repeated bool required_repeated_bool = 25;
    repeated InnerEnum required_repeated_enum = 26;
    repeated string required_repeated_string = 27;
    repeated bytes required_repeated_bytes = 28;
    repeated InnerMessage required_repeated_message = 29;
    repeated string required_repeated_resource_name = 30;
    repeated string required_repeated_resource_name_oneof = 31;
    repeated string required_repeated_resource_name_common = 34;
    repeated fixed32 required_repeated_fixed32 = 32;
    repeated fixed64 required_repeated_fixed64 = 33;

    map<int32, string> required_map = 41;

    int32 optional_singular_int32 = 51;
    int64 optional_singular_int64 = 52;
    float optional_singular_float = 53;
    double optional_singular_double = 54;
    bool optional_singular_bool = 55;
    InnerEnum optional_singular_enum = 56;
    string optional_singular_string = 57;
    bytes optional_singular_bytes = 58;
    InnerMessage optional_singular_message = 59;
    string optional_singular_resource_name = 60;
    string optional_singular_resource_name_oneof = 61;
    string optional_singular_resource_name_common = 64;
    fixed32 optional_singular_fixed32 = 62;
    fixed64 optional_singular_fixed64 = 63;

    repeated int32 optional_repeated_int32 = 71;
    repeated int64 optional_repeated_int64 = 72;
    repeated float optional_repeated_float = 73;
    repeated double optional_repeated_double = 74;
    repeated bool optional_repeated_bool = 75;
    repeated InnerEnum optional_repeated_enum = 76;
    repeated string optional_repeated_string = 77;
    repeated bytes optional_repeated_bytes = 78;
    repeated InnerMessage optional_repeated_message = 79;
    repeated string optional_repeated_resource_name = 80;
    repeated string optional_repeated_resource_name_oneof = 81;
    repeated string optional_repeated_resource_name_common = 84;
    repeated fixed32 optional_repeated_fixed32 = 82;
    repeated fixed64 optional_repeated_fixed64 = 83;

    map<int32, string> optional_map = 91;

    google.protobuf.Any any_value = 100;
    google.protobuf.Struct struct_value = 101;
    google.protobuf.Value value_value = 102;
    google.protobuf.ListValue list_value_value = 103;
    google.protobuf.Timestamp time_value = 104;
    google.protobuf.Duration duration_value = 105;
    google.protobuf.FieldMask field_mask_value = 106;
    google.protobuf.Int32Value int32_value = 107;
    google.protobuf.UInt32Value uint32_value = 108;
    google.protobuf.Int64Value int64_value = 109;
    google.protobuf.UInt64Value uint64_value = 110;
    google.protobuf.FloatValue float_value = 111;
    google.protobuf.DoubleValue double_value = 112;
    google.protobuf.StringValue string_value = 113;
    google.protobuf.BoolValue bool_value = 114;
    google.protobuf.BytesValue bytes_value = 115;

    repeated google.protobuf.Any repeated_any_value = 120;
    repeated google.protobuf.Struct repeated_struct_value = 121;
    repeated google.protobuf.Value repeated_value_value = 122;
    repeated google.protobuf.ListValue repeated_list_value_value = 123;
    repeated google.protobuf.Timestamp repeated_time_value = 124;
    repeated google.protobuf.Duration repeated_duration_value = 125;
    repeated google.protobuf.FieldMask repeated_field_mask_value = 126;
    repeated google.protobuf.Int32Value repeated_int32_value = 127;
    repeated google.protobuf.UInt32Value repeated_uint32_value = 128;
    repeated google.protobuf.Int64Value repeated_int64_value = 129;
    repeated google.protobuf.UInt64Value repeated_uint64_value = 130;
    repeated google.protobuf.FloatValue repeated_float_value = 131;
    repeated google.protobuf.DoubleValue repeated_double_value = 132;
    repeated google.protobuf.StringValue repeated_string_value = 133;
    repeated google.protobuf.BoolValue repeated_bool_value = 134;
    repeated google.protobuf.BytesValue repeated_bytes_value = 135;
}

message TestOptionalRequiredFlatteningParamsResponse {
}
