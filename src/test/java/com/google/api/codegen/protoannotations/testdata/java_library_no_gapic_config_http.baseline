============== file: ../build.gradle ==============
Static or binary file content is not shown.
============== file: ../gradle/wrapper/gradle-wrapper.jar ==============
Static or binary file content is not shown.
============== file: ../gradle/wrapper/gradle-wrapper.properties ==============
Static or binary file content is not shown.
============== file: ../gradlew ==============
Static or binary file content is not shown.
============== file: ../gradlew.bat ==============
Static or binary file content is not shown.
============== file: ../settings.gradle ==============
Static or binary file content is not shown.
============== file: build.gradle ==============
buildscript {
  repositories {
    mavenCentral()
  }
}

apply plugin: 'java'

description = 'GAPIC library for google-cloud-library-v1'
group = 'com.google.cloud'
version = (findProperty('version') == 'unspecified') ? '0.0.0-SNAPSHOT' : version
sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
  mavenCentral()
  mavenLocal()
}

compileJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

dependencies {
  compile 'com.google.api:gax:1.0.0'
  testCompile 'com.google.api:gax:1.0.0:testlib'
  compile 'com.google.api:gax-grpc:0.18.0'
  testCompile 'com.google.api:gax-grpc:0.18.0:testlib'
  testCompile 'io.grpc:grpc-netty-shaded:1.9.0'
  testCompile 'junit:junit:4.12'
  // Remove this line if you are bundling your proto-generated classes together with your client classes
  compile project(':proto-google-cloud-library-v1')
  // Remove this line if you are bundling your proto-generated classes together with your client classes
  testCompile project(':grpc-google-cloud-library-v1')
  testCompile 'com.google.api.grpc:grpc-google-some-test-package-v1:0.0.0'
}

task smokeTest(type: Test) {
  filter {
    includeTestsMatching "*SmokeTest"
    setFailOnNoMatchingTests false
  }
}

test {
  exclude "**/*SmokeTest*"
}

sourceSets {
  main {
    java {
      srcDir 'src/main/java'
    }
  }
}

clean {
  delete 'all-jars'
}

task allJars(type: Copy) {
  dependsOn test, jar
  into 'all-jars'
  // Replace with `from configurations.testRuntime, jar` to include test dependencies
  from configurations.runtime, jar
}
============== file: src/main/java/com/google/example/library/v1/LibraryServiceClient.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1;

import com.google.api.core.ApiFunction;
import com.google.api.core.ApiFuture;
import com.google.api.core.ApiFutures;
import com.google.api.core.BetaApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.longrunning.OperationFuture;
import com.google.api.gax.paging.AbstractFixedSizeCollection;
import com.google.api.gax.paging.AbstractPage;
import com.google.api.gax.paging.AbstractPagedListResponse;
import com.google.api.gax.paging.FixedSizeCollection;
import com.google.api.gax.paging.Page;
import com.google.api.gax.rpc.ApiExceptions;
import com.google.api.gax.rpc.OperationCallable;
import com.google.api.gax.rpc.PageContext;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.api.pathtemplate.PathTemplate;
import com.google.api.resourcenames.ResourceName;
import com.google.common.base.Function;
import com.google.common.collect.Iterables;
import com.google.common.util.concurrent.MoreExecutors;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest.InnerMessage;
import com.google.example.library.v1.stub.LibraryServiceStub;
import com.google.example.library.v1.stub.LibraryServiceStubSettings;
import com.google.longrunning.Operation;
import com.google.longrunning.OperationsClient;
import com.google.protobuf.Any;
import com.google.protobuf.BoolValue;
import com.google.protobuf.ByteString;
import com.google.protobuf.BytesValue;
import com.google.protobuf.DoubleValue;
import com.google.protobuf.Duration;
import com.google.protobuf.Empty;
import com.google.protobuf.FieldMask;
import com.google.protobuf.FloatValue;
import com.google.protobuf.Int32Value;
import com.google.protobuf.Int64Value;
import com.google.protobuf.ListValue;
import com.google.protobuf.StringValue;
import com.google.protobuf.Struct;
import com.google.protobuf.Timestamp;
import com.google.protobuf.UInt32Value;
import com.google.protobuf.UInt64Value;
import com.google.protobuf.Value;
import com.google.tagger.v1.TaggerProto.AddTagRequest;
import com.google.tagger.v1.TaggerProto.AddTagResponse;
import java.io.Closeable;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND SERVICE
/**
 * Service Description: This API represents a simple digital library.  It lets you manage Shelf
 * resources and Book resources in the library. It defines the following
 * resource model:
 *
 * - The API has a collection of [Shelf][google.example.library.v1.Shelf]
 *   resources, named ``bookShelves/&#42;``
 *
 * - Each Shelf has a collection of [Book][google.example.library.v1.Book]
 *   resources, named `bookShelves/&#42;/books/&#42;`
 *
 * Check out [cloud docs!](/library/example/link).
 * This is [not a cloud link](http://www.google.com).
 *
 * Service comment may include special characters: &lt;&gt;&amp;"`'{@literal @}.
 *
 * <p>This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * <pre>
 * <code>
 * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
 *   Shelf shelf = Shelf.newBuilder().build();
 *   Shelf response = libraryServiceClient.createShelf(shelf);
 * }
 * </code>
 * </pre>
 *
 * <p>Note: close() needs to be called on the libraryServiceClient object to clean up resources such
 * as threads. In the example above, try-with-resources is used, which automatically calls
 * close().
 *
 * <p>The surface of this class includes several types of Java methods for each of the API's methods:
 *
 * <ol>
 * <li> A "flattened" method. With this type of method, the fields of the request type have been
 * converted into function parameters. It may be the case that not all fields are available
 * as parameters, and not every API method will have a flattened method entry point.
 * <li> A "request object" method. This type of method only takes one parameter, a request
 * object, which must be constructed before the call. Not every API method will have a request
 * object method.
 * <li> A "callable" method. This type of method takes no parameters and returns an immutable
 * API callable object, which can be used to initiate calls to the service.
 * </ol>
 *
 * <p>See the individual methods for example code.
 *
 * <p>Many parameters require resource names to be formatted in a particular way. To assist
 * with these names, this class includes a format method for each type of name, and additionally
 * a parse method to extract the individual identifiers contained within names that are
 * returned.
 *
 * <p>This class can be customized by passing in a custom instance of LibraryServiceSettings to
 * create(). For example:
 *
 * To customize credentials:
 *
 * <pre>
 * <code>
 * LibraryServiceSettings libraryServiceSettings =
 *     LibraryServiceSettings.newBuilder()
 *         .setCredentialsProvider(FixedCredentialsProvider.create(myCredentials))
 *         .build();
 * LibraryServiceClient libraryServiceClient =
 *     LibraryServiceClient.create(libraryServiceSettings);
 * </code>
 * </pre>
 *
 * To customize the endpoint:
 *
 * <pre>
 * <code>
 * LibraryServiceSettings libraryServiceSettings =
 *     LibraryServiceSettings.newBuilder().setEndpoint(myEndpoint).build();
 * LibraryServiceClient libraryServiceClient =
 *     LibraryServiceClient.create(libraryServiceSettings);
 * </code>
 * </pre>
 */
@Generated("by gapic-generator")
@BetaApi
public class LibraryServiceClient implements BackgroundResource {
  private final LibraryServiceSettings settings;
  private final LibraryServiceStub stub;
  private final OperationsClient operationsClient;



  /**
   * Constructs an instance of LibraryServiceClient with default settings.
   */
  public static final LibraryServiceClient create() throws IOException {
    return create(LibraryServiceSettings.newBuilder().build());
  }

  /**
   * Constructs an instance of LibraryServiceClient, using the given settings.
   * The channels are created based on the settings passed in, or defaults for any
   * settings that are not set.
   */
  public static final LibraryServiceClient create(LibraryServiceSettings settings) throws IOException {
    return new LibraryServiceClient(settings);
  }

  /**
   * Constructs an instance of LibraryServiceClient, using the given stub for making calls. This is for
   * advanced usage - prefer to use LibraryServiceSettings}.
   */
  @BetaApi("A restructuring of stub classes is planned, so this may break in the future")
  public static final LibraryServiceClient create(LibraryServiceStub stub) {
    return new LibraryServiceClient(stub);
  }

  /**
   * Constructs an instance of LibraryServiceClient, using the given settings.
   * This is protected so that it is easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected LibraryServiceClient(LibraryServiceSettings settings) throws IOException {
    this.settings = settings;
    this.stub = ((LibraryServiceStubSettings) settings.getStubSettings()).createStub();
    this.operationsClient = OperationsClient.create(this.stub.getOperationsStub());
  }

  @BetaApi("A restructuring of stub classes is planned, so this may break in the future")
  protected LibraryServiceClient(LibraryServiceStub stub) {
    this.settings = null;
    this.stub = stub;
    this.operationsClient = OperationsClient.create(this.stub.getOperationsStub());
  }

  public final LibraryServiceSettings getSettings() {
    return settings;
  }

  @BetaApi("A restructuring of stub classes is planned, so this may break in the future")
  public LibraryServiceStub getStub() {
    return stub;
  }

  /**
   * Returns the OperationsClient that can be used to query the status of a long-running
   * operation returned by another API method call.
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationsClient getOperationsClient() {
    return operationsClient;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a shelf, and returns the new Shelf.
   * RPC method comment may include special characters: &lt;&gt;&amp;"`'{@literal @}.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   Shelf shelf = Shelf.newBuilder().build();
   *   Shelf response = libraryServiceClient.createShelf(shelf);
   * }
   * </code></pre>
   *
   * @param shelf The shelf to create.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Shelf createShelf(Shelf shelf) {
    CreateShelfRequest request =
        CreateShelfRequest.newBuilder()
            .setShelf(shelf)
            .build();
    return createShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a shelf, and returns the new Shelf.
   * RPC method comment may include special characters: &lt;&gt;&amp;"`'{@literal @}.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   Shelf shelf = Shelf.newBuilder().build();
   *   CreateShelfRequest request = CreateShelfRequest.newBuilder()
   *     .setShelf(shelf)
   *     .build();
   *   Shelf response = libraryServiceClient.createShelf(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Shelf createShelf(CreateShelfRequest request) {
    return createShelfCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a shelf, and returns the new Shelf.
   * RPC method comment may include special characters: &lt;&gt;&amp;"`'{@literal @}.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   Shelf shelf = Shelf.newBuilder().build();
   *   CreateShelfRequest request = CreateShelfRequest.newBuilder()
   *     .setShelf(shelf)
   *     .build();
   *   ApiFuture&lt;Shelf&gt; future = libraryServiceClient.createShelfCallable().futureCall(request);
   *   // Do something
   *   Shelf response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<CreateShelfRequest, Shelf> createShelfCallable() {
    return stub.createShelfCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   Shelf response = libraryServiceClient.getShelf(name);
   * }
   * </code></pre>
   *
   * @param name The name of the shelf to retrieve.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Shelf getShelf(ShelfName name) {
    GetShelfRequest request =
        GetShelfRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .build();
    return getShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   Shelf response = libraryServiceClient.getShelf(name.toString());
   * }
   * </code></pre>
   *
   * @param name The name of the shelf to retrieve.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Shelf getShelf(String name) {
    GetShelfRequest request =
        GetShelfRequest.newBuilder()
            .setName(name)
            .build();
    return getShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   SomeMessage message = SomeMessage.newBuilder().build();
   *   Shelf response = libraryServiceClient.getShelf(name, message);
   * }
   * </code></pre>
   *
   * @param name The name of the shelf to retrieve.
   * @param message Field to verify that message-type query parameter gets flattened.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Shelf getShelf(ShelfName name, SomeMessage message) {
    GetShelfRequest request =
        GetShelfRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .setMessage(message)
            .build();
    return getShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   SomeMessage message = SomeMessage.newBuilder().build();
   *   Shelf response = libraryServiceClient.getShelf(name.toString(), message);
   * }
   * </code></pre>
   *
   * @param name The name of the shelf to retrieve.
   * @param message Field to verify that message-type query parameter gets flattened.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Shelf getShelf(String name, SomeMessage message) {
    GetShelfRequest request =
        GetShelfRequest.newBuilder()
            .setName(name)
            .setMessage(message)
            .build();
    return getShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   SomeMessage message = SomeMessage.newBuilder().build();
   *   com.google.example.library.v1.StringBuilder stringBuilder = com.google.example.library.v1.StringBuilder.newBuilder().build();
   *   Shelf response = libraryServiceClient.getShelf(name, message, stringBuilder);
   * }
   * </code></pre>
   *
   * @param name The name of the shelf to retrieve.
   * @param message Field to verify that message-type query parameter gets flattened.
   * @param stringBuilder
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Shelf getShelf(ShelfName name, SomeMessage message, com.google.example.library.v1.StringBuilder stringBuilder) {
    GetShelfRequest request =
        GetShelfRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .setMessage(message)
            .setStringBuilder(stringBuilder)
            .build();
    return getShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   SomeMessage message = SomeMessage.newBuilder().build();
   *   com.google.example.library.v1.StringBuilder stringBuilder = com.google.example.library.v1.StringBuilder.newBuilder().build();
   *   Shelf response = libraryServiceClient.getShelf(name.toString(), message, stringBuilder);
   * }
   * </code></pre>
   *
   * @param name The name of the shelf to retrieve.
   * @param message Field to verify that message-type query parameter gets flattened.
   * @param stringBuilder
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Shelf getShelf(String name, SomeMessage message, com.google.example.library.v1.StringBuilder stringBuilder) {
    GetShelfRequest request =
        GetShelfRequest.newBuilder()
            .setName(name)
            .setMessage(message)
            .setStringBuilder(stringBuilder)
            .build();
    return getShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   String options = "";
   *   GetShelfRequest request = GetShelfRequest.newBuilder()
   *     .setName(name.toString())
   *     .setOptions(options)
   *     .build();
   *   Shelf response = libraryServiceClient.getShelf(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Shelf getShelf(GetShelfRequest request) {
    return getShelfCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   String options = "";
   *   GetShelfRequest request = GetShelfRequest.newBuilder()
   *     .setName(name.toString())
   *     .setOptions(options)
   *     .build();
   *   ApiFuture&lt;Shelf&gt; future = libraryServiceClient.getShelfCallable().futureCall(request);
   *   // Do something
   *   Shelf response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<GetShelfRequest, Shelf> getShelfCallable() {
    return stub.getShelfCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists shelves.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *
   *   ListShelvesResponse response = libraryServiceClient.listShelves();
   * }
   * </code></pre>
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ListShelvesResponse listShelves() {
    ListShelvesRequest request =
        ListShelvesRequest.newBuilder().build();
    return listShelves(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists shelves.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ListShelvesRequest request = ListShelvesRequest.newBuilder().build();
   *   ListShelvesResponse response = libraryServiceClient.listShelves(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ListShelvesResponse listShelves(ListShelvesRequest request) {
    return listShelvesCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists shelves.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ListShelvesRequest request = ListShelvesRequest.newBuilder().build();
   *   ApiFuture&lt;ListShelvesResponse&gt; future = libraryServiceClient.listShelvesCallable().futureCall(request);
   *   // Do something
   *   ListShelvesResponse response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<ListShelvesRequest, ListShelvesResponse> listShelvesCallable() {
    return stub.listShelvesCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists shelves.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *
   *   for (Entry&lt;String, Shelf&gt; element : libraryServiceClient.listAggregatedShelves().iterateAll()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ListAggregatedShelvesPagedResponse listAggregatedShelves() {
    ListAggregatedShelvesRequest request =
        ListAggregatedShelvesRequest.newBuilder().build();
    return listAggregatedShelves(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists shelves.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ListAggregatedShelvesRequest request = ListAggregatedShelvesRequest.newBuilder().build();
   *   for (Entry&lt;String, Shelf&gt; element : libraryServiceClient.listAggregatedShelves(request).iterateAll()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ListAggregatedShelvesPagedResponse listAggregatedShelves(ListAggregatedShelvesRequest request) {
    return listAggregatedShelvesPagedCallable()
        .call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists shelves.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ListAggregatedShelvesRequest request = ListAggregatedShelvesRequest.newBuilder().build();
   *   ApiFuture&lt;ListAggregatedShelvesPagedResponse&gt; future = libraryServiceClient.listAggregatedShelvesPagedCallable().futureCall(request);
   *   // Do something
   *   for (Entry&lt;String, Shelf&gt; element : future.get().iterateAll()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   */
  public final UnaryCallable<ListAggregatedShelvesRequest, ListAggregatedShelvesPagedResponse> listAggregatedShelvesPagedCallable() {
    return stub.listAggregatedShelvesPagedCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists shelves.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ListAggregatedShelvesRequest request = ListAggregatedShelvesRequest.newBuilder().build();
   *   while (true) {
   *     ListAggregatedShelvesResponse response = libraryServiceClient.listAggregatedShelvesCallable().call(request);
   *     for (Entry&lt;String, Shelf&gt; element : response.getShelvesMap()) {
   *       // doThingsWith(element);
   *     }
   *     String nextPageToken = response.getNextPageToken();
   *     if (!Strings.isNullOrEmpty(nextPageToken)) {
   *       request = request.toBuilder().setPageToken(nextPageToken).build();
   *     } else {
   *       break;
   *     }
   *   }
   * }
   * </code></pre>
   */
  public final UnaryCallable<ListAggregatedShelvesRequest, ListAggregatedShelvesResponse> listAggregatedShelvesCallable() {
    return stub.listAggregatedShelvesCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Deletes a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   libraryServiceClient.deleteShelf(name);
   * }
   * </code></pre>
   *
   * @param name The name of the shelf to delete.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void deleteShelf(ShelfName name) {
    DeleteShelfRequest request =
        DeleteShelfRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .build();
    deleteShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Deletes a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   libraryServiceClient.deleteShelf(name.toString());
   * }
   * </code></pre>
   *
   * @param name The name of the shelf to delete.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void deleteShelf(String name) {
    DeleteShelfRequest request =
        DeleteShelfRequest.newBuilder()
            .setName(name)
            .build();
    deleteShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Deletes a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   DeleteShelfRequest request = DeleteShelfRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   libraryServiceClient.deleteShelf(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void deleteShelf(DeleteShelfRequest request) {
    deleteShelfCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Deletes a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   DeleteShelfRequest request = DeleteShelfRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   ApiFuture&lt;Void&gt; future = libraryServiceClient.deleteShelfCallable().futureCall(request);
   *   // Do something
   *   future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<DeleteShelfRequest, Empty> deleteShelfCallable() {
    return stub.deleteShelfCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Merges two shelves by adding all books from the shelf named
   * `other_shelf_name` to shelf `name`, and deletes
   * `other_shelf_name`. Returns the updated shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   ShelfName otherShelfName = ShelfName.of("[SHELF]");
   *   Shelf response = libraryServiceClient.mergeShelves(name, otherShelfName);
   * }
   * </code></pre>
   *
   * @param name The name of the shelf we're adding books to.
   * @param otherShelfName The name of the shelf we're removing books from and deleting.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Shelf mergeShelves(ShelfName name, ShelfName otherShelfName) {
    MergeShelvesRequest request =
        MergeShelvesRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .setOtherShelfName(otherShelfName == null ? null : otherShelfName.toString())
            .build();
    return mergeShelves(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Merges two shelves by adding all books from the shelf named
   * `other_shelf_name` to shelf `name`, and deletes
   * `other_shelf_name`. Returns the updated shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   ShelfName otherShelfName = ShelfName.of("[SHELF]");
   *   Shelf response = libraryServiceClient.mergeShelves(name.toString(), otherShelfName.toString());
   * }
   * </code></pre>
   *
   * @param name The name of the shelf we're adding books to.
   * @param otherShelfName The name of the shelf we're removing books from and deleting.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Shelf mergeShelves(String name, String otherShelfName) {
    MergeShelvesRequest request =
        MergeShelvesRequest.newBuilder()
            .setName(name)
            .setOtherShelfName(otherShelfName)
            .build();
    return mergeShelves(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Merges two shelves by adding all books from the shelf named
   * `other_shelf_name` to shelf `name`, and deletes
   * `other_shelf_name`. Returns the updated shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   ShelfName otherShelfName = ShelfName.of("[SHELF]");
   *   MergeShelvesRequest request = MergeShelvesRequest.newBuilder()
   *     .setName(name.toString())
   *     .setOtherShelfName(otherShelfName.toString())
   *     .build();
   *   Shelf response = libraryServiceClient.mergeShelves(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Shelf mergeShelves(MergeShelvesRequest request) {
    return mergeShelvesCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Merges two shelves by adding all books from the shelf named
   * `other_shelf_name` to shelf `name`, and deletes
   * `other_shelf_name`. Returns the updated shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   ShelfName otherShelfName = ShelfName.of("[SHELF]");
   *   MergeShelvesRequest request = MergeShelvesRequest.newBuilder()
   *     .setName(name.toString())
   *     .setOtherShelfName(otherShelfName.toString())
   *     .build();
   *   ApiFuture&lt;Shelf&gt; future = libraryServiceClient.mergeShelvesCallable().futureCall(request);
   *   // Do something
   *   Shelf response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<MergeShelvesRequest, Shelf> mergeShelvesCallable() {
    return stub.mergeShelvesCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   Book book = Book.newBuilder().build();
   *   Book response = libraryServiceClient.createBook(name, book);
   * }
   * </code></pre>
   *
   * @param name The name of the shelf in which the book is created.
   * @param book The book to create.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book createBook(ShelfName name, Book book) {
    CreateBookRequest request =
        CreateBookRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .setBook(book)
            .build();
    return createBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   Book book = Book.newBuilder().build();
   *   Book response = libraryServiceClient.createBook(name.toString(), book);
   * }
   * </code></pre>
   *
   * @param name The name of the shelf in which the book is created.
   * @param book The book to create.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book createBook(String name, Book book) {
    CreateBookRequest request =
        CreateBookRequest.newBuilder()
            .setName(name)
            .setBook(book)
            .build();
    return createBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   Book book = Book.newBuilder().build();
   *   CreateBookRequest request = CreateBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .setBook(book)
   *     .build();
   *   Book response = libraryServiceClient.createBook(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book createBook(CreateBookRequest request) {
    return createBookCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   Book book = Book.newBuilder().build();
   *   CreateBookRequest request = CreateBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .setBook(book)
   *     .build();
   *   ApiFuture&lt;Book&gt; future = libraryServiceClient.createBookCallable().futureCall(request);
   *   // Do something
   *   Book response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<CreateBookRequest, Book> createBookCallable() {
    return stub.createBookCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a series of books.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   Shelf shelf = Shelf.newBuilder().build();
   *   List&lt;Book&gt; books = new ArrayList&lt;&gt;();
   *   int edition = 0;
   *   SeriesUuid seriesUuid = SeriesUuid.newBuilder().build();
   *   PublisherName publisher = PublisherName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");
   *   PublishSeriesResponse response = libraryServiceClient.publishSeries(shelf, books, edition, seriesUuid, publisher);
   * }
   * </code></pre>
   *
   * @param shelf The shelf in which the series is created.
   * @param books The books to publish in the series.
   * @param edition The edition of the series
   * @param seriesUuid Uniquely identifies the series to the publishing house.
   * @param publisher The publisher of the series.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final PublishSeriesResponse publishSeries(Shelf shelf, List<Book> books, int edition, SeriesUuid seriesUuid, PublisherName publisher) {
    PublishSeriesRequest request =
        PublishSeriesRequest.newBuilder()
            .setShelf(shelf)
            .addAllBooks(books)
            .setEdition(edition)
            .setSeriesUuid(seriesUuid)
            .setPublisher(publisher == null ? null : publisher.toString())
            .build();
    return publishSeries(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a series of books.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   Shelf shelf = Shelf.newBuilder().build();
   *   List&lt;Book&gt; books = new ArrayList&lt;&gt;();
   *   int edition = 0;
   *   SeriesUuid seriesUuid = SeriesUuid.newBuilder().build();
   *   PublisherName publisher = PublisherName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");
   *   PublishSeriesResponse response = libraryServiceClient.publishSeries(shelf, books, edition, seriesUuid, publisher.toString());
   * }
   * </code></pre>
   *
   * @param shelf The shelf in which the series is created.
   * @param books The books to publish in the series.
   * @param edition The edition of the series
   * @param seriesUuid Uniquely identifies the series to the publishing house.
   * @param publisher The publisher of the series.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final PublishSeriesResponse publishSeries(Shelf shelf, List<Book> books, int edition, SeriesUuid seriesUuid, String publisher) {
    PublishSeriesRequest request =
        PublishSeriesRequest.newBuilder()
            .setShelf(shelf)
            .addAllBooks(books)
            .setEdition(edition)
            .setSeriesUuid(seriesUuid)
            .setPublisher(publisher)
            .build();
    return publishSeries(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a series of books.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   Shelf shelf = Shelf.newBuilder().build();
   *   List&lt;Book&gt; books = new ArrayList&lt;&gt;();
   *   SeriesUuid seriesUuid = SeriesUuid.newBuilder().build();
   *   PublishSeriesRequest request = PublishSeriesRequest.newBuilder()
   *     .setShelf(shelf)
   *     .addAllBooks(books)
   *     .setSeriesUuid(seriesUuid)
   *     .build();
   *   PublishSeriesResponse response = libraryServiceClient.publishSeries(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final PublishSeriesResponse publishSeries(PublishSeriesRequest request) {
    return publishSeriesCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a series of books.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   Shelf shelf = Shelf.newBuilder().build();
   *   List&lt;Book&gt; books = new ArrayList&lt;&gt;();
   *   SeriesUuid seriesUuid = SeriesUuid.newBuilder().build();
   *   PublishSeriesRequest request = PublishSeriesRequest.newBuilder()
   *     .setShelf(shelf)
   *     .addAllBooks(books)
   *     .setSeriesUuid(seriesUuid)
   *     .build();
   *   ApiFuture&lt;PublishSeriesResponse&gt; future = libraryServiceClient.publishSeriesCallable().futureCall(request);
   *   // Do something
   *   PublishSeriesResponse response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<PublishSeriesRequest, PublishSeriesResponse> publishSeriesCallable() {
    return stub.publishSeriesCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates an inventory. Tests singleton resources.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   PublisherName parent = PublisherName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");
   *   Inventory inventory = Inventory.newBuilder().build();
   *   ResourceName asset = ArchiveName.of("[ARCHIVE]");
   *   ResourceName parentAsset = ArchiveName.of("[ARCHIVE]");
   *   List&lt;String&gt; assets = new ArrayList&lt;&gt;();
   *   Inventory response = libraryServiceClient.createInventory(parent, inventory, asset, parentAsset, assets);
   * }
   * </code></pre>
   *
   * @param parent
   * @param inventory
   * @param asset
   * @param parentAsset
   * @param assets
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Inventory createInventory(PublisherName parent, Inventory inventory, ResourceName asset, ResourceName parentAsset, List<String> assets) {
    CreateInventoryRequest request =
        CreateInventoryRequest.newBuilder()
            .setParent(parent == null ? null : parent.toString())
            .setInventory(inventory)
            .setAsset(asset == null ? null : asset.toString())
            .setParentAsset(parentAsset == null ? null : parentAsset.toString())
            .addAllAssets(assets)
            .build();
    return createInventory(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates an inventory. Tests singleton resources.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   PublisherName parent = PublisherName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");
   *   Inventory inventory = Inventory.newBuilder().build();
   *   ResourceName asset = ArchiveName.of("[ARCHIVE]");
   *   ResourceName parentAsset = ArchiveName.of("[ARCHIVE]");
   *   List&lt;String&gt; assets = new ArrayList&lt;&gt;();
   *   Inventory response = libraryServiceClient.createInventory(parent.toString(), inventory, asset.toString(), parentAsset.toString(), assets);
   * }
   * </code></pre>
   *
   * @param parent
   * @param inventory
   * @param asset
   * @param parentAsset
   * @param assets
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Inventory createInventory(String parent, Inventory inventory, String asset, String parentAsset, List<String> assets) {
    CreateInventoryRequest request =
        CreateInventoryRequest.newBuilder()
            .setParent(parent)
            .setInventory(inventory)
            .setAsset(asset)
            .setParentAsset(parentAsset)
            .addAllAssets(assets)
            .build();
    return createInventory(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates an inventory. Tests singleton resources.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   PublisherName parent = PublisherName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");
   *   ResourceName asset = ArchiveName.of("[ARCHIVE]");
   *   ResourceName parentAsset = ArchiveName.of("[ARCHIVE]");
   *   List&lt;ResourceName&gt; assets = new ArrayList&lt;&gt;();
   *   CreateInventoryRequest request = CreateInventoryRequest.newBuilder()
   *     .setParent(parent.toString())
   *     .setAsset(asset.toString())
   *     .setParentAsset(parentAsset.toString())
   *     .addAllAssets(UntypedResourceName.toStringList(assets))
   *     .build();
   *   Inventory response = libraryServiceClient.createInventory(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Inventory createInventory(CreateInventoryRequest request) {
    return createInventoryCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates an inventory. Tests singleton resources.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   PublisherName parent = PublisherName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");
   *   ResourceName asset = ArchiveName.of("[ARCHIVE]");
   *   ResourceName parentAsset = ArchiveName.of("[ARCHIVE]");
   *   List&lt;ResourceName&gt; assets = new ArrayList&lt;&gt;();
   *   CreateInventoryRequest request = CreateInventoryRequest.newBuilder()
   *     .setParent(parent.toString())
   *     .setAsset(asset.toString())
   *     .setParentAsset(parentAsset.toString())
   *     .addAllAssets(UntypedResourceName.toStringList(assets))
   *     .build();
   *   ApiFuture&lt;Inventory&gt; future = libraryServiceClient.createInventoryCallable().futureCall(request);
   *   // Do something
   *   Inventory response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<CreateInventoryRequest, Inventory> createInventoryCallable() {
    return stub.createInventoryCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   Book response = libraryServiceClient.getBook(name);
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book getBook(BookName name) {
    GetBookRequest request =
        GetBookRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .build();
    return getBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   Book response = libraryServiceClient.getBook(name.toString());
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book getBook(String name) {
    GetBookRequest request =
        GetBookRequest.newBuilder()
            .setName(name)
            .build();
    return getBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   GetBookRequest request = GetBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   Book response = libraryServiceClient.getBook(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book getBook(GetBookRequest request) {
    return getBookCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   GetBookRequest request = GetBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   ApiFuture&lt;Book&gt; future = libraryServiceClient.getBookCallable().futureCall(request);
   *   // Do something
   *   Book response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<GetBookRequest, Book> getBookCallable() {
    return stub.getBookCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists books in a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   String filter = "";
   *   for (Book element : libraryServiceClient.listBooks(name, filter).iterateAll()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param name The name of the shelf whose books we'd like to list.
   * @param filter To test python built-in wrapping.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ListBooksPagedResponse listBooks(ShelfName name, String filter) {
    ListBooksRequest request =
        ListBooksRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .setFilter(filter)
            .build();
    return listBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists books in a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   String filter = "";
   *   for (Book element : libraryServiceClient.listBooks(name.toString(), filter).iterateAll()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param name The name of the shelf whose books we'd like to list.
   * @param filter To test python built-in wrapping.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ListBooksPagedResponse listBooks(String name, String filter) {
    ListBooksRequest request =
        ListBooksRequest.newBuilder()
            .setName(name)
            .setFilter(filter)
            .build();
    return listBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists books in a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   ListBooksRequest request = ListBooksRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   for (Book element : libraryServiceClient.listBooks(request).iterateAll()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ListBooksPagedResponse listBooks(ListBooksRequest request) {
    return listBooksPagedCallable()
        .call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists books in a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   ListBooksRequest request = ListBooksRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   ApiFuture&lt;ListBooksPagedResponse&gt; future = libraryServiceClient.listBooksPagedCallable().futureCall(request);
   *   // Do something
   *   for (Book element : future.get().iterateAll()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   */
  public final UnaryCallable<ListBooksRequest, ListBooksPagedResponse> listBooksPagedCallable() {
    return stub.listBooksPagedCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists books in a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   ListBooksRequest request = ListBooksRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   while (true) {
   *     ListBooksResponse response = libraryServiceClient.listBooksCallable().call(request);
   *     for (Book element : response.getBooksList()) {
   *       // doThingsWith(element);
   *     }
   *     String nextPageToken = response.getNextPageToken();
   *     if (!Strings.isNullOrEmpty(nextPageToken)) {
   *       request = request.toBuilder().setPageToken(nextPageToken).build();
   *     } else {
   *       break;
   *     }
   *   }
   * }
   * </code></pre>
   */
  public final UnaryCallable<ListBooksRequest, ListBooksResponse> listBooksCallable() {
    return stub.listBooksCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Deletes a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   libraryServiceClient.deleteBook(name);
   * }
   * </code></pre>
   *
   * @param name The name of the book to delete.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void deleteBook(BookName name) {
    DeleteBookRequest request =
        DeleteBookRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .build();
    deleteBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Deletes a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   libraryServiceClient.deleteBook(name.toString());
   * }
   * </code></pre>
   *
   * @param name The name of the book to delete.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void deleteBook(String name) {
    DeleteBookRequest request =
        DeleteBookRequest.newBuilder()
            .setName(name)
            .build();
    deleteBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Deletes a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   DeleteBookRequest request = DeleteBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   libraryServiceClient.deleteBook(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void deleteBook(DeleteBookRequest request) {
    deleteBookCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Deletes a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   DeleteBookRequest request = DeleteBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   ApiFuture&lt;Void&gt; future = libraryServiceClient.deleteBookCallable().futureCall(request);
   *   // Do something
   *   future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<DeleteBookRequest, Empty> deleteBookCallable() {
    return stub.deleteBookCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   Book book = Book.newBuilder().build();
   *   Book response = libraryServiceClient.updateBook(name, book);
   * }
   * </code></pre>
   *
   * @param name The name of the book to update.
   * @param book The book to update with.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book updateBook(BookName name, Book book) {
    UpdateBookRequest request =
        UpdateBookRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .setBook(book)
            .build();
    return updateBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   Book book = Book.newBuilder().build();
   *   Book response = libraryServiceClient.updateBook(name.toString(), book);
   * }
   * </code></pre>
   *
   * @param name The name of the book to update.
   * @param book The book to update with.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book updateBook(String name, Book book) {
    UpdateBookRequest request =
        UpdateBookRequest.newBuilder()
            .setName(name)
            .setBook(book)
            .build();
    return updateBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   String optionalFoo = "";
   *   Book book = Book.newBuilder().build();
   *   FieldMask updateMask = FieldMask.newBuilder().build();
   *   com.google.example.library.v1.FieldMask physicalMask = com.google.example.library.v1.FieldMask.newBuilder().build();
   *   Book response = libraryServiceClient.updateBook(name, optionalFoo, book, updateMask, physicalMask);
   * }
   * </code></pre>
   *
   * @param name The name of the book to update.
   * @param optionalFoo An optional foo.
   * @param book The book to update with.
   * @param updateMask A field mask to apply, rendered as an HTTP parameter.
   * @param physicalMask To test Python import clash resolution.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book updateBook(BookName name, String optionalFoo, Book book, FieldMask updateMask, com.google.example.library.v1.FieldMask physicalMask) {
    UpdateBookRequest request =
        UpdateBookRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .setOptionalFoo(optionalFoo)
            .setBook(book)
            .setUpdateMask(updateMask)
            .setPhysicalMask(physicalMask)
            .build();
    return updateBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   String optionalFoo = "";
   *   Book book = Book.newBuilder().build();
   *   FieldMask updateMask = FieldMask.newBuilder().build();
   *   com.google.example.library.v1.FieldMask physicalMask = com.google.example.library.v1.FieldMask.newBuilder().build();
   *   Book response = libraryServiceClient.updateBook(name.toString(), optionalFoo, book, updateMask, physicalMask);
   * }
   * </code></pre>
   *
   * @param name The name of the book to update.
   * @param optionalFoo An optional foo.
   * @param book The book to update with.
   * @param updateMask A field mask to apply, rendered as an HTTP parameter.
   * @param physicalMask To test Python import clash resolution.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book updateBook(String name, String optionalFoo, Book book, FieldMask updateMask, com.google.example.library.v1.FieldMask physicalMask) {
    UpdateBookRequest request =
        UpdateBookRequest.newBuilder()
            .setName(name)
            .setOptionalFoo(optionalFoo)
            .setBook(book)
            .setUpdateMask(updateMask)
            .setPhysicalMask(physicalMask)
            .build();
    return updateBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   Book book = Book.newBuilder().build();
   *   UpdateBookRequest request = UpdateBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .setBook(book)
   *     .build();
   *   Book response = libraryServiceClient.updateBook(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book updateBook(UpdateBookRequest request) {
    return updateBookCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   Book book = Book.newBuilder().build();
   *   UpdateBookRequest request = UpdateBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .setBook(book)
   *     .build();
   *   ApiFuture&lt;Book&gt; future = libraryServiceClient.updateBookCallable().futureCall(request);
   *   // Do something
   *   Book response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<UpdateBookRequest, Book> updateBookCallable() {
    return stub.updateBookCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Moves a book to another shelf, and returns the new book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   ShelfName otherShelfName = ShelfName.of("[SHELF]");
   *   Book response = libraryServiceClient.moveBook(name, otherShelfName);
   * }
   * </code></pre>
   *
   * @param name The name of the book to move.
   * @param otherShelfName The name of the destination shelf.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book moveBook(BookName name, ShelfName otherShelfName) {
    MoveBookRequest request =
        MoveBookRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .setOtherShelfName(otherShelfName == null ? null : otherShelfName.toString())
            .build();
    return moveBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Moves a book to another shelf, and returns the new book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   ShelfName otherShelfName = ShelfName.of("[SHELF]");
   *   Book response = libraryServiceClient.moveBook(name.toString(), otherShelfName.toString());
   * }
   * </code></pre>
   *
   * @param name The name of the book to move.
   * @param otherShelfName The name of the destination shelf.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book moveBook(String name, String otherShelfName) {
    MoveBookRequest request =
        MoveBookRequest.newBuilder()
            .setName(name)
            .setOtherShelfName(otherShelfName)
            .build();
    return moveBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Moves a book to another shelf, and returns the new book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   ShelfName otherShelfName = ShelfName.of("[SHELF]");
   *   MoveBookRequest request = MoveBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .setOtherShelfName(otherShelfName.toString())
   *     .build();
   *   Book response = libraryServiceClient.moveBook(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book moveBook(MoveBookRequest request) {
    return moveBookCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Moves a book to another shelf, and returns the new book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   ShelfName otherShelfName = ShelfName.of("[SHELF]");
   *   MoveBookRequest request = MoveBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .setOtherShelfName(otherShelfName.toString())
   *     .build();
   *   ApiFuture&lt;Book&gt; future = libraryServiceClient.moveBookCallable().futureCall(request);
   *   // Do something
   *   Book response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<MoveBookRequest, Book> moveBookCallable() {
    return stub.moveBookCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists a primitive resource. To test go page streaming.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *
   *   for (ResourceName element : libraryServiceClient.listStrings().iterateAllAsResourceName()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ListStringsPagedResponse listStrings() {
    ListStringsRequest request =
        ListStringsRequest.newBuilder().build();
    return listStrings(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists a primitive resource. To test go page streaming.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ResourceName name = ArchiveName.of("[ARCHIVE]");
   *   for (ResourceName element : libraryServiceClient.listStrings(name).iterateAllAsResourceName()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param name
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ListStringsPagedResponse listStrings(ResourceName name) {
    ListStringsRequest request =
        ListStringsRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .build();
    return listStrings(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists a primitive resource. To test go page streaming.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ResourceName name = ArchiveName.of("[ARCHIVE]");
   *   for (ResourceName element : libraryServiceClient.listStrings(name.toString()).iterateAllAsResourceName()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param name
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ListStringsPagedResponse listStrings(String name) {
    ListStringsRequest request =
        ListStringsRequest.newBuilder()
            .setName(name)
            .build();
    return listStrings(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists a primitive resource. To test go page streaming.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ListStringsRequest request = ListStringsRequest.newBuilder().build();
   *   for (ResourceName element : libraryServiceClient.listStrings(request).iterateAllAsResourceName()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ListStringsPagedResponse listStrings(ListStringsRequest request) {
    return listStringsPagedCallable()
        .call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists a primitive resource. To test go page streaming.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ListStringsRequest request = ListStringsRequest.newBuilder().build();
   *   ApiFuture&lt;ListStringsPagedResponse&gt; future = libraryServiceClient.listStringsPagedCallable().futureCall(request);
   *   // Do something
   *   for (ResourceName element : future.get().iterateAllAsResourceName()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   */
  public final UnaryCallable<ListStringsRequest, ListStringsPagedResponse> listStringsPagedCallable() {
    return stub.listStringsPagedCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists a primitive resource. To test go page streaming.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ListStringsRequest request = ListStringsRequest.newBuilder().build();
   *   while (true) {
   *     ListStringsResponse response = libraryServiceClient.listStringsCallable().call(request);
   *     for (ResourceName element : UntypedResourceName.parseList(response.getStringsList())) {
   *       // doThingsWith(element);
   *     }
   *     String nextPageToken = response.getNextPageToken();
   *     if (!Strings.isNullOrEmpty(nextPageToken)) {
   *       request = request.toBuilder().setPageToken(nextPageToken).build();
   *     } else {
   *       break;
   *     }
   *   }
   * }
   * </code></pre>
   */
  public final UnaryCallable<ListStringsRequest, ListStringsResponse> listStringsCallable() {
    return stub.listStringsCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Adds comments to a book
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   List&lt;Comment&gt; comments = new ArrayList&lt;&gt;();
   *   libraryServiceClient.addComments(name, comments);
   * }
   * </code></pre>
   *
   * @param name
   * @param comments
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void addComments(BookName name, List<Comment> comments) {
    AddCommentsRequest request =
        AddCommentsRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .addAllComments(comments)
            .build();
    addComments(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Adds comments to a book
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   List&lt;Comment&gt; comments = new ArrayList&lt;&gt;();
   *   libraryServiceClient.addComments(name.toString(), comments);
   * }
   * </code></pre>
   *
   * @param name
   * @param comments
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void addComments(String name, List<Comment> comments) {
    AddCommentsRequest request =
        AddCommentsRequest.newBuilder()
            .setName(name)
            .addAllComments(comments)
            .build();
    addComments(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Adds comments to a book
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   List&lt;Comment&gt; comments = new ArrayList&lt;&gt;();
   *   AddCommentsRequest request = AddCommentsRequest.newBuilder()
   *     .setName(name.toString())
   *     .addAllComments(comments)
   *     .build();
   *   libraryServiceClient.addComments(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void addComments(AddCommentsRequest request) {
    addCommentsCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Adds comments to a book
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   List&lt;Comment&gt; comments = new ArrayList&lt;&gt;();
   *   AddCommentsRequest request = AddCommentsRequest.newBuilder()
   *     .setName(name.toString())
   *     .addAllComments(comments)
   *     .build();
   *   ApiFuture&lt;Void&gt; future = libraryServiceClient.addCommentsCallable().futureCall(request);
   *   // Do something
   *   future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<AddCommentsRequest, Empty> addCommentsCallable() {
    return stub.addCommentsCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book from an archive.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ArchivedBookName name = ArchivedBookName.of("[ARCHIVE]", "[BOOK]");
   *   ProjectName parent = ProjectName.of("[PROJECT]");
   *   BookFromArchive response = libraryServiceClient.getBookFromArchive(name, parent);
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @param parent
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final BookFromArchive getBookFromArchive(ArchivedBookName name, ProjectName parent) {
    GetBookFromArchiveRequest request =
        GetBookFromArchiveRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .setParent(parent == null ? null : parent.toString())
            .build();
    return getBookFromArchive(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book from an archive.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ArchivedBookName name = ArchivedBookName.of("[ARCHIVE]", "[BOOK]");
   *   ProjectName parent = ProjectName.of("[PROJECT]");
   *   BookFromArchive response = libraryServiceClient.getBookFromArchive(name.toString(), parent.toString());
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @param parent
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final BookFromArchive getBookFromArchive(String name, String parent) {
    GetBookFromArchiveRequest request =
        GetBookFromArchiveRequest.newBuilder()
            .setName(name)
            .setParent(parent)
            .build();
    return getBookFromArchive(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book from an archive.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ArchivedBookName name = ArchivedBookName.of("[ARCHIVE]", "[BOOK]");
   *   ProjectName parent = ProjectName.of("[PROJECT]");
   *   GetBookFromArchiveRequest request = GetBookFromArchiveRequest.newBuilder()
   *     .setName(name.toString())
   *     .setParent(parent.toString())
   *     .build();
   *   BookFromArchive response = libraryServiceClient.getBookFromArchive(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final BookFromArchive getBookFromArchive(GetBookFromArchiveRequest request) {
    return getBookFromArchiveCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book from an archive.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ArchivedBookName name = ArchivedBookName.of("[ARCHIVE]", "[BOOK]");
   *   ProjectName parent = ProjectName.of("[PROJECT]");
   *   GetBookFromArchiveRequest request = GetBookFromArchiveRequest.newBuilder()
   *     .setName(name.toString())
   *     .setParent(parent.toString())
   *     .build();
   *   ApiFuture&lt;BookFromArchive&gt; future = libraryServiceClient.getBookFromArchiveCallable().futureCall(request);
   *   // Do something
   *   BookFromArchive response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveCallable() {
    return stub.getBookFromArchiveCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book from a shelf or archive.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   BookName altBookName = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   LocationName place = LocationName.of("[PROJECT]", "[LOCATION]");
   *   FolderName folder = FolderName.of("[FOLDER]");
   *   BookFromAnywhere response = libraryServiceClient.getBookFromAnywhere(name, altBookName, place, folder);
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @param altBookName An alternate book name, used to test restricting flattened field to a
   * single resource name type in a oneof.
   * @param place
   * @param folder
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final BookFromAnywhere getBookFromAnywhere(BookName name, BookName altBookName, LocationName place, FolderName folder) {
    GetBookFromAnywhereRequest request =
        GetBookFromAnywhereRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .setAltBookName(altBookName == null ? null : altBookName.toString())
            .setPlace(place == null ? null : place.toString())
            .setFolder(folder == null ? null : folder.toString())
            .build();
    return getBookFromAnywhere(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book from a shelf or archive.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   BookName altBookName = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   LocationName place = LocationName.of("[PROJECT]", "[LOCATION]");
   *   FolderName folder = FolderName.of("[FOLDER]");
   *   BookFromAnywhere response = libraryServiceClient.getBookFromAnywhere(name.toString(), altBookName.toString(), place.toString(), folder.toString());
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @param altBookName An alternate book name, used to test restricting flattened field to a
   * single resource name type in a oneof.
   * @param place
   * @param folder
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final BookFromAnywhere getBookFromAnywhere(String name, String altBookName, String place, String folder) {
    GetBookFromAnywhereRequest request =
        GetBookFromAnywhereRequest.newBuilder()
            .setName(name)
            .setAltBookName(altBookName)
            .setPlace(place)
            .setFolder(folder)
            .build();
    return getBookFromAnywhere(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book from a shelf or archive.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   BookName altBookName = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   LocationName place = LocationName.of("[PROJECT]", "[LOCATION]");
   *   FolderName folder = FolderName.of("[FOLDER]");
   *   GetBookFromAnywhereRequest request = GetBookFromAnywhereRequest.newBuilder()
   *     .setName(name.toString())
   *     .setAltBookName(altBookName.toString())
   *     .setPlace(place.toString())
   *     .setFolder(folder.toString())
   *     .build();
   *   BookFromAnywhere response = libraryServiceClient.getBookFromAnywhere(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final BookFromAnywhere getBookFromAnywhere(GetBookFromAnywhereRequest request) {
    return getBookFromAnywhereCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book from a shelf or archive.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   BookName altBookName = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   LocationName place = LocationName.of("[PROJECT]", "[LOCATION]");
   *   FolderName folder = FolderName.of("[FOLDER]");
   *   GetBookFromAnywhereRequest request = GetBookFromAnywhereRequest.newBuilder()
   *     .setName(name.toString())
   *     .setAltBookName(altBookName.toString())
   *     .setPlace(place.toString())
   *     .setFolder(folder.toString())
   *     .build();
   *   ApiFuture&lt;BookFromAnywhere&gt; future = libraryServiceClient.getBookFromAnywhereCallable().futureCall(request);
   *   // Do something
   *   BookFromAnywhere response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereCallable() {
    return stub.getBookFromAnywhereCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test proper OneOf-Any resource name mapping
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   BookFromAnywhere response = libraryServiceClient.getBookFromAbsolutelyAnywhere(name);
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final BookFromAnywhere getBookFromAbsolutelyAnywhere(BookName name) {
    GetBookFromAbsolutelyAnywhereRequest request =
        GetBookFromAbsolutelyAnywhereRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .build();
    return getBookFromAbsolutelyAnywhere(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test proper OneOf-Any resource name mapping
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   BookFromAnywhere response = libraryServiceClient.getBookFromAbsolutelyAnywhere(name.toString());
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final BookFromAnywhere getBookFromAbsolutelyAnywhere(String name) {
    GetBookFromAbsolutelyAnywhereRequest request =
        GetBookFromAbsolutelyAnywhereRequest.newBuilder()
            .setName(name)
            .build();
    return getBookFromAbsolutelyAnywhere(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test proper OneOf-Any resource name mapping
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   GetBookFromAbsolutelyAnywhereRequest request = GetBookFromAbsolutelyAnywhereRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   BookFromAnywhere response = libraryServiceClient.getBookFromAbsolutelyAnywhere(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final BookFromAnywhere getBookFromAbsolutelyAnywhere(GetBookFromAbsolutelyAnywhereRequest request) {
    return getBookFromAbsolutelyAnywhereCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test proper OneOf-Any resource name mapping
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   GetBookFromAbsolutelyAnywhereRequest request = GetBookFromAbsolutelyAnywhereRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   ApiFuture&lt;BookFromAnywhere&gt; future = libraryServiceClient.getBookFromAbsolutelyAnywhereCallable().futureCall(request);
   *   // Do something
   *   BookFromAnywhere response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere> getBookFromAbsolutelyAnywhereCallable() {
    return stub.getBookFromAbsolutelyAnywhereCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates the index of a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   String indexName = "";
   *   Map&lt;String, String&gt; indexMap = new HashMap&lt;&gt;();
   *   libraryServiceClient.updateBookIndex(name, indexName, indexMap);
   * }
   * </code></pre>
   *
   * @param name The name of the book to update.
   * @param indexName The name of the index for the book
   * @param indexMap The index to update the book with
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void updateBookIndex(BookName name, String indexName, Map<String, String> indexMap) {
    UpdateBookIndexRequest request =
        UpdateBookIndexRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .setIndexName(indexName)
            .putAllIndexMap(indexMap)
            .build();
    updateBookIndex(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates the index of a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   String indexName = "";
   *   Map&lt;String, String&gt; indexMap = new HashMap&lt;&gt;();
   *   libraryServiceClient.updateBookIndex(name.toString(), indexName, indexMap);
   * }
   * </code></pre>
   *
   * @param name The name of the book to update.
   * @param indexName The name of the index for the book
   * @param indexMap The index to update the book with
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void updateBookIndex(String name, String indexName, Map<String, String> indexMap) {
    UpdateBookIndexRequest request =
        UpdateBookIndexRequest.newBuilder()
            .setName(name)
            .setIndexName(indexName)
            .putAllIndexMap(indexMap)
            .build();
    updateBookIndex(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates the index of a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   String indexName = "";
   *   Map&lt;String, String&gt; indexMap = new HashMap&lt;&gt;();
   *   UpdateBookIndexRequest request = UpdateBookIndexRequest.newBuilder()
   *     .setName(name.toString())
   *     .setIndexName(indexName)
   *     .putAllIndexMap(indexMap)
   *     .build();
   *   libraryServiceClient.updateBookIndex(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void updateBookIndex(UpdateBookIndexRequest request) {
    updateBookIndexCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates the index of a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   String indexName = "";
   *   Map&lt;String, String&gt; indexMap = new HashMap&lt;&gt;();
   *   UpdateBookIndexRequest request = UpdateBookIndexRequest.newBuilder()
   *     .setName(name.toString())
   *     .setIndexName(indexName)
   *     .putAllIndexMap(indexMap)
   *     .build();
   *   ApiFuture&lt;Void&gt; future = libraryServiceClient.updateBookIndexCallable().futureCall(request);
   *   // Do something
   *   future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<UpdateBookIndexRequest, Empty> updateBookIndexCallable() {
    return stub.updateBookIndexCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   List&lt;String&gt; names = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; formattedShelves = new ArrayList&lt;&gt;();
   *   for (BookName element : libraryServiceClient.findRelatedBooks(names, formattedShelves).iterateAllAsBookName()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param names
   * @param shelves
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final FindRelatedBooksPagedResponse findRelatedBooks(List<String> names, List<String> shelves) {
    FindRelatedBooksRequest request =
        FindRelatedBooksRequest.newBuilder()
            .addAllNames(names)
            .addAllShelves(shelves)
            .build();
    return findRelatedBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   List&lt;BookName&gt; names = new ArrayList&lt;&gt;();
   *   List&lt;ShelfName&gt; shelves = new ArrayList&lt;&gt;();
   *   FindRelatedBooksRequest request = FindRelatedBooksRequest.newBuilder()
   *     .addAllNames(BookName.toStringList(names))
   *     .addAllShelves(ShelfName.toStringList(shelves))
   *     .build();
   *   for (BookName element : libraryServiceClient.findRelatedBooks(request).iterateAllAsBookName()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final FindRelatedBooksPagedResponse findRelatedBooks(FindRelatedBooksRequest request) {
    return findRelatedBooksPagedCallable()
        .call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   List&lt;BookName&gt; names = new ArrayList&lt;&gt;();
   *   List&lt;ShelfName&gt; shelves = new ArrayList&lt;&gt;();
   *   FindRelatedBooksRequest request = FindRelatedBooksRequest.newBuilder()
   *     .addAllNames(BookName.toStringList(names))
   *     .addAllShelves(ShelfName.toStringList(shelves))
   *     .build();
   *   ApiFuture&lt;FindRelatedBooksPagedResponse&gt; future = libraryServiceClient.findRelatedBooksPagedCallable().futureCall(request);
   *   // Do something
   *   for (BookName element : future.get().iterateAllAsBookName()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   */
  public final UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksPagedResponse> findRelatedBooksPagedCallable() {
    return stub.findRelatedBooksPagedCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   List&lt;BookName&gt; names = new ArrayList&lt;&gt;();
   *   List&lt;ShelfName&gt; shelves = new ArrayList&lt;&gt;();
   *   FindRelatedBooksRequest request = FindRelatedBooksRequest.newBuilder()
   *     .addAllNames(BookName.toStringList(names))
   *     .addAllShelves(ShelfName.toStringList(shelves))
   *     .build();
   *   while (true) {
   *     FindRelatedBooksResponse response = libraryServiceClient.findRelatedBooksCallable().call(request);
   *     for (BookName element : BookName.parseList(response.getNamesList())) {
   *       // doThingsWith(element);
   *     }
   *     String nextPageToken = response.getNextPageToken();
   *     if (!Strings.isNullOrEmpty(nextPageToken)) {
   *       request = request.toBuilder().setPageToken(nextPageToken).build();
   *     } else {
   *       break;
   *     }
   *   }
   * }
   * </code></pre>
   */
  public final UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksResponse> findRelatedBooksCallable() {
    return stub.findRelatedBooksCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Adds a tag to the book. This RPC is a mixin.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ResourceName resource = ArchiveName.of("[ARCHIVE]");
   *   String tag = "";
   *   AddTagResponse response = libraryServiceClient.addTag(resource, tag);
   * }
   * </code></pre>
   *
   * @param resource REQUIRED: The resource which the tag is being added to.
   * In the form "shelves/{shelf_id}/books/{book_id}".
   * @param tag REQUIRED: The tag to add.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final AddTagResponse addTag(ResourceName resource, String tag) {
    AddTagRequest request =
        AddTagRequest.newBuilder()
            .setResource(resource == null ? null : resource.toString())
            .setTag(tag)
            .build();
    return addTag(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Adds a tag to the book. This RPC is a mixin.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ResourceName resource = ArchiveName.of("[ARCHIVE]");
   *   String tag = "";
   *   AddTagResponse response = libraryServiceClient.addTag(resource.toString(), tag);
   * }
   * </code></pre>
   *
   * @param resource REQUIRED: The resource which the tag is being added to.
   * In the form "shelves/{shelf_id}/books/{book_id}".
   * @param tag REQUIRED: The tag to add.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final AddTagResponse addTag(String resource, String tag) {
    AddTagRequest request =
        AddTagRequest.newBuilder()
            .setResource(resource)
            .setTag(tag)
            .build();
    return addTag(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Adds a tag to the book. This RPC is a mixin.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ResourceName resource = ArchiveName.of("[ARCHIVE]");
   *   String tag = "";
   *   AddTagRequest request = AddTagRequest.newBuilder()
   *     .setResource(resource.toString())
   *     .setTag(tag)
   *     .build();
   *   AddTagResponse response = libraryServiceClient.addTag(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final AddTagResponse addTag(AddTagRequest request) {
    return addTagCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Adds a tag to the book. This RPC is a mixin.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ResourceName resource = ArchiveName.of("[ARCHIVE]");
   *   String tag = "";
   *   AddTagRequest request = AddTagRequest.newBuilder()
   *     .setResource(resource.toString())
   *     .setTag(tag)
   *     .build();
   *   ApiFuture&lt;AddTagResponse&gt; future = libraryServiceClient.addTagCallable().futureCall(request);
   *   // Do something
   *   AddTagResponse response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<AddTagRequest, AddTagResponse> addTagCallable() {
    return stub.addTagCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   Book response = libraryServiceClient.getBigBookAsync(name).get();
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationFuture<Book, GetBigBookMetadata> getBigBookAsync(BookName name) {
    GetBookRequest request =
        GetBookRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .build();
    return getBigBookAsync(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   Book response = libraryServiceClient.getBigBookAsync(name.toString()).get();
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationFuture<Book, GetBigBookMetadata> getBigBookAsync(String name) {
    GetBookRequest request =
        GetBookRequest.newBuilder()
            .setName(name)
            .build();
    return getBigBookAsync(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   GetBookRequest request = GetBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   Book response = libraryServiceClient.getBigBookAsync(request).get();
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationFuture<Book, GetBigBookMetadata> getBigBookAsync(GetBookRequest request) {
    return getBigBookOperationCallable().futureCall(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   GetBookRequest request = GetBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   OperationFuture&lt;Book, GetBigBookMetadata&gt; future = libraryServiceClient.getBigBookOperationCallable().futureCall(request);
   *   // Do something
   *   Book response = future.get();
   * }
   * </code></pre>
   */
  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public final OperationCallable<GetBookRequest, Book, GetBigBookMetadata> getBigBookOperationCallable() {
    return stub.getBigBookOperationCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   GetBookRequest request = GetBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   ApiFuture&lt;Operation&gt; future = libraryServiceClient.getBigBookCallable().futureCall(request);
   *   // Do something
   *   Operation response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<GetBookRequest, Operation> getBigBookCallable() {
    return stub.getBigBookCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations with empty return type.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   libraryServiceClient.getBigNothingAsync(name).get();
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationFuture<Empty, GetBigBookMetadata> getBigNothingAsync(BookName name) {
    GetBookRequest request =
        GetBookRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .build();
    return getBigNothingAsync(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations with empty return type.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   libraryServiceClient.getBigNothingAsync(name.toString()).get();
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationFuture<Empty, GetBigBookMetadata> getBigNothingAsync(String name) {
    GetBookRequest request =
        GetBookRequest.newBuilder()
            .setName(name)
            .build();
    return getBigNothingAsync(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations with empty return type.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   GetBookRequest request = GetBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   libraryServiceClient.getBigNothingAsync(request).get();
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationFuture<Empty, GetBigBookMetadata> getBigNothingAsync(GetBookRequest request) {
    return getBigNothingOperationCallable().futureCall(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations with empty return type.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   GetBookRequest request = GetBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   OperationFuture&lt;Empty, GetBigBookMetadata&gt; future = libraryServiceClient.getBigNothingOperationCallable().futureCall(request);
   *   // Do something
   *   future.get();
   * }
   * </code></pre>
   */
  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public final OperationCallable<GetBookRequest, Empty, GetBigBookMetadata> getBigNothingOperationCallable() {
    return stub.getBigNothingOperationCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations with empty return type.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   GetBookRequest request = GetBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   ApiFuture&lt;Operation&gt; future = libraryServiceClient.getBigNothingCallable().futureCall(request);
   *   // Do something
   *   future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<GetBookRequest, Operation> getBigNothingCallable() {
    return stub.getBigNothingCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ArchiveName source = ArchiveName.of("[ARCHIVE]");
   *   ArchiveName destination = ArchiveName.of("[ARCHIVE]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryServiceClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(ArchiveName source, ArchiveName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ArchiveName source = ArchiveName.of("[ARCHIVE]");
   *   InventoryName destination = InventoryName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryServiceClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(ArchiveName source, InventoryName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ArchiveName source = ArchiveName.of("[ARCHIVE]");
   *   ShelfName destination = ShelfName.of("[SHELF]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryServiceClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(ArchiveName source, ShelfName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ArchiveName source = ArchiveName.of("[ARCHIVE]");
   *   ProjectName destination = ProjectName.of("[PROJECT]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryServiceClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(ArchiveName source, ProjectName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   InventoryName source = InventoryName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");
   *   ArchiveName destination = ArchiveName.of("[ARCHIVE]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryServiceClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(InventoryName source, ArchiveName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   InventoryName source = InventoryName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");
   *   InventoryName destination = InventoryName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryServiceClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(InventoryName source, InventoryName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   InventoryName source = InventoryName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");
   *   ShelfName destination = ShelfName.of("[SHELF]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryServiceClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(InventoryName source, ShelfName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   InventoryName source = InventoryName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");
   *   ProjectName destination = ProjectName.of("[PROJECT]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryServiceClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(InventoryName source, ProjectName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName source = ShelfName.of("[SHELF]");
   *   ArchiveName destination = ArchiveName.of("[ARCHIVE]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryServiceClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(ShelfName source, ArchiveName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName source = ShelfName.of("[SHELF]");
   *   InventoryName destination = InventoryName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryServiceClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(ShelfName source, InventoryName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName source = ShelfName.of("[SHELF]");
   *   ShelfName destination = ShelfName.of("[SHELF]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryServiceClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(ShelfName source, ShelfName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName source = ShelfName.of("[SHELF]");
   *   ProjectName destination = ProjectName.of("[PROJECT]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryServiceClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(ShelfName source, ProjectName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ProjectName source = ProjectName.of("[PROJECT]");
   *   ArchiveName destination = ArchiveName.of("[ARCHIVE]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryServiceClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(ProjectName source, ArchiveName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ProjectName source = ProjectName.of("[PROJECT]");
   *   InventoryName destination = InventoryName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryServiceClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(ProjectName source, InventoryName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ProjectName source = ProjectName.of("[PROJECT]");
   *   ShelfName destination = ShelfName.of("[SHELF]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryServiceClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(ProjectName source, ShelfName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ProjectName source = ProjectName.of("[PROJECT]");
   *   ProjectName destination = ProjectName.of("[PROJECT]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryServiceClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(ProjectName source, ProjectName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ArchiveName source = ArchiveName.of("[ARCHIVE]");
   *   ArchiveName destination = ArchiveName.of("[ARCHIVE]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryServiceClient.moveBooks(source.toString(), destination.toString(), formattedPublishers, project.toString());
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(String source, String destination, List<String> publishers, String project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source)
            .setDestination(destination)
            .addAllPublishers(publishers)
            .setProject(project)
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   MoveBooksRequest request = MoveBooksRequest.newBuilder().build();
   *   MoveBooksResponse response = libraryServiceClient.moveBooks(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(MoveBooksRequest request) {
    return moveBooksCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   MoveBooksRequest request = MoveBooksRequest.newBuilder().build();
   *   ApiFuture&lt;MoveBooksResponse&gt; future = libraryServiceClient.moveBooksCallable().futureCall(request);
   *   // Do something
   *   MoveBooksResponse response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<MoveBooksRequest, MoveBooksResponse> moveBooksCallable() {
    return stub.moveBooksCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ArchiveName source = ArchiveName.of("[ARCHIVE]");
   *   ArchiveName archive = ArchiveName.of("[ARCHIVE]");
   *   ArchiveBooksResponse response = libraryServiceClient.archiveBooks(source, archive);
   * }
   * </code></pre>
   *
   * @param source
   * @param archive
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ArchiveBooksResponse archiveBooks(ArchiveName source, ArchiveName archive) {
    ArchiveBooksRequest request =
        ArchiveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setArchive(archive == null ? null : archive.toString())
            .build();
    return archiveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   InventoryName source = InventoryName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");
   *   ArchiveName archive = ArchiveName.of("[ARCHIVE]");
   *   ArchiveBooksResponse response = libraryServiceClient.archiveBooks(source, archive);
   * }
   * </code></pre>
   *
   * @param source
   * @param archive
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ArchiveBooksResponse archiveBooks(InventoryName source, ArchiveName archive) {
    ArchiveBooksRequest request =
        ArchiveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setArchive(archive == null ? null : archive.toString())
            .build();
    return archiveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName source = ShelfName.of("[SHELF]");
   *   ArchiveName archive = ArchiveName.of("[ARCHIVE]");
   *   ArchiveBooksResponse response = libraryServiceClient.archiveBooks(source, archive);
   * }
   * </code></pre>
   *
   * @param source
   * @param archive
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ArchiveBooksResponse archiveBooks(ShelfName source, ArchiveName archive) {
    ArchiveBooksRequest request =
        ArchiveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setArchive(archive == null ? null : archive.toString())
            .build();
    return archiveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ProjectName source = ProjectName.of("[PROJECT]");
   *   ArchiveName archive = ArchiveName.of("[ARCHIVE]");
   *   ArchiveBooksResponse response = libraryServiceClient.archiveBooks(source, archive);
   * }
   * </code></pre>
   *
   * @param source
   * @param archive
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ArchiveBooksResponse archiveBooks(ProjectName source, ArchiveName archive) {
    ArchiveBooksRequest request =
        ArchiveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setArchive(archive == null ? null : archive.toString())
            .build();
    return archiveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ArchiveName source = ArchiveName.of("[ARCHIVE]");
   *   ArchiveName archive = ArchiveName.of("[ARCHIVE]");
   *   ArchiveBooksResponse response = libraryServiceClient.archiveBooks(source.toString(), archive.toString());
   * }
   * </code></pre>
   *
   * @param source
   * @param archive
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ArchiveBooksResponse archiveBooks(String source, String archive) {
    ArchiveBooksRequest request =
        ArchiveBooksRequest.newBuilder()
            .setSource(source)
            .setArchive(archive)
            .build();
    return archiveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ArchiveBooksRequest request = ArchiveBooksRequest.newBuilder().build();
   *   ArchiveBooksResponse response = libraryServiceClient.archiveBooks(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ArchiveBooksResponse archiveBooks(ArchiveBooksRequest request) {
    return archiveBooksCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ArchiveBooksRequest request = ArchiveBooksRequest.newBuilder().build();
   *   ApiFuture&lt;ArchiveBooksResponse&gt; future = libraryServiceClient.archiveBooksCallable().futureCall(request);
   *   // Do something
   *   ArchiveBooksResponse response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<ArchiveBooksRequest, ArchiveBooksResponse> archiveBooksCallable() {
    return stub.archiveBooksCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ArchiveName source = ArchiveName.of("[ARCHIVE]");
   *   ArchiveName archive = ArchiveName.of("[ARCHIVE]");
   *   ArchiveBooksResponse response = libraryServiceClient.longRunningArchiveBooksAsync(source, archive).get();
   * }
   * </code></pre>
   *
   * @param source
   * @param archive
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationFuture<ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksAsync(ArchiveName source, ArchiveName archive) {
    ArchiveBooksRequest request =
        ArchiveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setArchive(archive == null ? null : archive.toString())
            .build();
    return longRunningArchiveBooksAsync(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   InventoryName source = InventoryName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");
   *   ArchiveName archive = ArchiveName.of("[ARCHIVE]");
   *   ArchiveBooksResponse response = libraryServiceClient.longRunningArchiveBooksAsync(source, archive).get();
   * }
   * </code></pre>
   *
   * @param source
   * @param archive
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationFuture<ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksAsync(InventoryName source, ArchiveName archive) {
    ArchiveBooksRequest request =
        ArchiveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setArchive(archive == null ? null : archive.toString())
            .build();
    return longRunningArchiveBooksAsync(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ShelfName source = ShelfName.of("[SHELF]");
   *   ArchiveName archive = ArchiveName.of("[ARCHIVE]");
   *   ArchiveBooksResponse response = libraryServiceClient.longRunningArchiveBooksAsync(source, archive).get();
   * }
   * </code></pre>
   *
   * @param source
   * @param archive
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationFuture<ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksAsync(ShelfName source, ArchiveName archive) {
    ArchiveBooksRequest request =
        ArchiveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setArchive(archive == null ? null : archive.toString())
            .build();
    return longRunningArchiveBooksAsync(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ProjectName source = ProjectName.of("[PROJECT]");
   *   ArchiveName archive = ArchiveName.of("[ARCHIVE]");
   *   ArchiveBooksResponse response = libraryServiceClient.longRunningArchiveBooksAsync(source, archive).get();
   * }
   * </code></pre>
   *
   * @param source
   * @param archive
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationFuture<ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksAsync(ProjectName source, ArchiveName archive) {
    ArchiveBooksRequest request =
        ArchiveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setArchive(archive == null ? null : archive.toString())
            .build();
    return longRunningArchiveBooksAsync(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ArchiveName source = ArchiveName.of("[ARCHIVE]");
   *   ArchiveName archive = ArchiveName.of("[ARCHIVE]");
   *   ArchiveBooksResponse response = libraryServiceClient.longRunningArchiveBooksAsync(source.toString(), archive.toString()).get();
   * }
   * </code></pre>
   *
   * @param source
   * @param archive
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationFuture<ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksAsync(String source, String archive) {
    ArchiveBooksRequest request =
        ArchiveBooksRequest.newBuilder()
            .setSource(source)
            .setArchive(archive)
            .build();
    return longRunningArchiveBooksAsync(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ArchiveBooksRequest request = ArchiveBooksRequest.newBuilder().build();
   *   ArchiveBooksResponse response = libraryServiceClient.longRunningArchiveBooksAsync(request).get();
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationFuture<ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksAsync(ArchiveBooksRequest request) {
    return longRunningArchiveBooksOperationCallable().futureCall(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ArchiveBooksRequest request = ArchiveBooksRequest.newBuilder().build();
   *   OperationFuture&lt;ArchiveBooksResponse, ArchiveBooksMetadata&gt; future = libraryServiceClient.longRunningArchiveBooksOperationCallable().futureCall(request);
   *   // Do something
   *   ArchiveBooksResponse response = future.get();
   * }
   * </code></pre>
   */
  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public final OperationCallable<ArchiveBooksRequest, ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksOperationCallable() {
    return stub.longRunningArchiveBooksOperationCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ArchiveBooksRequest request = ArchiveBooksRequest.newBuilder().build();
   *   ApiFuture&lt;Operation&gt; future = libraryServiceClient.longRunningArchiveBooksCallable().futureCall(request);
   *   // Do something
   *   Operation response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<ArchiveBooksRequest, Operation> longRunningArchiveBooksCallable() {
    return stub.longRunningArchiveBooksCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test using resource messages as request objects. Only used by PubSub (CreateSubscription) for historical reasons.
   * New APIs should always create a separate message for a request.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   String author = "";
   *   String title = "";
   *   Book.Rating rating = Book.Rating.GOOD;
   *   libraryServiceClient.saveBook(name, author, title, rating);
   * }
   * </code></pre>
   *
   * @param name The resource name of the book.
   * Book names have the form `bookShelves/{shelf_id}/books/{book_id}`.
   * Message field comment may include special characters: &lt;&gt;&amp;"`'{@literal @}.
   * @param author The name of the book author.
   * @param title The title of the book.
   * @param rating For testing enums.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void saveBook(BookName name, String author, String title, Book.Rating rating) {
    Book request =
        Book.newBuilder()
            .setName(name == null ? null : name.toString())
            .setAuthor(author)
            .setTitle(title)
            .setRating(rating)
            .build();
    saveBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test using resource messages as request objects. Only used by PubSub (CreateSubscription) for historical reasons.
   * New APIs should always create a separate message for a request.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   String author = "";
   *   String title = "";
   *   Book.Rating rating = Book.Rating.GOOD;
   *   libraryServiceClient.saveBook(name.toString(), author, title, rating);
   * }
   * </code></pre>
   *
   * @param name The resource name of the book.
   * Book names have the form `bookShelves/{shelf_id}/books/{book_id}`.
   * Message field comment may include special characters: &lt;&gt;&amp;"`'{@literal @}.
   * @param author The name of the book author.
   * @param title The title of the book.
   * @param rating For testing enums.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void saveBook(String name, String author, String title, Book.Rating rating) {
    Book request =
        Book.newBuilder()
            .setName(name)
            .setAuthor(author)
            .setTitle(title)
            .setRating(rating)
            .build();
    saveBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test using resource messages as request objects. Only used by PubSub (CreateSubscription) for historical reasons.
   * New APIs should always create a separate message for a request.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   Book request = Book.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   libraryServiceClient.saveBook(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void saveBook(Book request) {
    saveBookCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test using resource messages as request objects. Only used by PubSub (CreateSubscription) for historical reasons.
   * New APIs should always create a separate message for a request.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   Book request = Book.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   ApiFuture&lt;Void&gt; future = libraryServiceClient.saveBookCallable().futureCall(request);
   *   // Do something
   *   future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<Book, Empty> saveBookCallable() {
    return stub.saveBookCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test optional flattening parameters of all types
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *
   *   TestOptionalRequiredFlatteningParamsResponse response = libraryServiceClient.testOptionalRequiredFlatteningParams();
   * }
   * </code></pre>
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final TestOptionalRequiredFlatteningParamsResponse testOptionalRequiredFlatteningParams() {
    TestOptionalRequiredFlatteningParamsRequest request =
        TestOptionalRequiredFlatteningParamsRequest.newBuilder().build();
    return testOptionalRequiredFlatteningParams(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test optional flattening parameters of all types
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   int requiredSingularInt32 = 0;
   *   long requiredSingularInt64 = 0L;
   *   float requiredSingularFloat = 0.0F;
   *   double requiredSingularDouble = 0.0;
   *   boolean requiredSingularBool = false;
   *   TestOptionalRequiredFlatteningParamsRequest.InnerEnum requiredSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
   *   String requiredSingularString = "";
   *   ByteString requiredSingularBytes = ByteString.copyFromUtf8("");
   *   TestOptionalRequiredFlatteningParamsRequest.InnerMessage requiredSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
   *   BookName requiredSingularResourceName = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   BookName requiredSingularResourceNameOneof = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   String requiredSingularResourceNameCommon = "";
   *   int requiredSingularFixed32 = 0;
   *   long requiredSingularFixed64 = 0L;
   *   List&lt;Integer&gt; requiredRepeatedInt32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; requiredRepeatedInt64 = new ArrayList&lt;&gt;();
   *   List&lt;Float&gt; requiredRepeatedFloat = new ArrayList&lt;&gt;();
   *   List&lt;Double&gt; requiredRepeatedDouble = new ArrayList&lt;&gt;();
   *   List&lt;Boolean&gt; requiredRepeatedBool = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerEnum&gt; requiredRepeatedEnum = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; requiredRepeatedString = new ArrayList&lt;&gt;();
   *   List&lt;ByteString&gt; requiredRepeatedBytes = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerMessage&gt; requiredRepeatedMessage = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; requiredRepeatedResourceName = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; requiredRepeatedResourceNameOneof = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; requiredRepeatedResourceNameCommon = new ArrayList&lt;&gt;();
   *   List&lt;Integer&gt; requiredRepeatedFixed32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; requiredRepeatedFixed64 = new ArrayList&lt;&gt;();
   *   Map&lt;Integer, String&gt; requiredMap = new HashMap&lt;&gt;();
   *   Any requiredAnyValue = Any.newBuilder().build();
   *   Struct requiredStructValue = Struct.newBuilder().build();
   *   Value requiredValueValue = Value.newBuilder().build();
   *   ListValue requiredListValueValue = ListValue.newBuilder().build();
   *   Timestamp requiredTimeValue = Timestamp.newBuilder().build();
   *   Duration requiredDurationValue = Duration.newBuilder().build();
   *   FieldMask requiredFieldMaskValue = FieldMask.newBuilder().build();
   *   Int32Value requiredInt32Value = Int32Value.newBuilder().build();
   *   UInt32Value requiredUint32Value = UInt32Value.newBuilder().build();
   *   Int64Value requiredInt64Value = Int64Value.newBuilder().build();
   *   UInt64Value requiredUint64Value = UInt64Value.newBuilder().build();
   *   FloatValue requiredFloatValue = FloatValue.newBuilder().build();
   *   DoubleValue requiredDoubleValue = DoubleValue.newBuilder().build();
   *   StringValue requiredStringValue = StringValue.newBuilder().build();
   *   BoolValue requiredBoolValue = BoolValue.newBuilder().build();
   *   BytesValue requiredBytesValue = BytesValue.newBuilder().build();
   *   List&lt;Any&gt; requiredRepeatedAnyValue = new ArrayList&lt;&gt;();
   *   List&lt;Struct&gt; requiredRepeatedStructValue = new ArrayList&lt;&gt;();
   *   List&lt;Value&gt; requiredRepeatedValueValue = new ArrayList&lt;&gt;();
   *   List&lt;ListValue&gt; requiredRepeatedListValueValue = new ArrayList&lt;&gt;();
   *   List&lt;Timestamp&gt; requiredRepeatedTimeValue = new ArrayList&lt;&gt;();
   *   List&lt;Duration&gt; requiredRepeatedDurationValue = new ArrayList&lt;&gt;();
   *   List&lt;FieldMask&gt; requiredRepeatedFieldMaskValue = new ArrayList&lt;&gt;();
   *   List&lt;Int32Value&gt; requiredRepeatedInt32Value = new ArrayList&lt;&gt;();
   *   List&lt;UInt32Value&gt; requiredRepeatedUint32Value = new ArrayList&lt;&gt;();
   *   List&lt;Int64Value&gt; requiredRepeatedInt64Value = new ArrayList&lt;&gt;();
   *   List&lt;UInt64Value&gt; requiredRepeatedUint64Value = new ArrayList&lt;&gt;();
   *   List&lt;FloatValue&gt; requiredRepeatedFloatValue = new ArrayList&lt;&gt;();
   *   List&lt;DoubleValue&gt; requiredRepeatedDoubleValue = new ArrayList&lt;&gt;();
   *   List&lt;StringValue&gt; requiredRepeatedStringValue = new ArrayList&lt;&gt;();
   *   List&lt;BoolValue&gt; requiredRepeatedBoolValue = new ArrayList&lt;&gt;();
   *   List&lt;BytesValue&gt; requiredRepeatedBytesValue = new ArrayList&lt;&gt;();
   *   int optionalSingularInt32 = 0;
   *   long optionalSingularInt64 = 0L;
   *   float optionalSingularFloat = 0.0F;
   *   double optionalSingularDouble = 0.0;
   *   boolean optionalSingularBool = false;
   *   TestOptionalRequiredFlatteningParamsRequest.InnerEnum optionalSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
   *   String optionalSingularString = "";
   *   ByteString optionalSingularBytes = ByteString.copyFromUtf8("");
   *   TestOptionalRequiredFlatteningParamsRequest.InnerMessage optionalSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
   *   BookName optionalSingularResourceName = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   BookName optionalSingularResourceNameOneof = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   String optionalSingularResourceNameCommon = "";
   *   int optionalSingularFixed32 = 0;
   *   long optionalSingularFixed64 = 0L;
   *   List&lt;Integer&gt; optionalRepeatedInt32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; optionalRepeatedInt64 = new ArrayList&lt;&gt;();
   *   List&lt;Float&gt; optionalRepeatedFloat = new ArrayList&lt;&gt;();
   *   List&lt;Double&gt; optionalRepeatedDouble = new ArrayList&lt;&gt;();
   *   List&lt;Boolean&gt; optionalRepeatedBool = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerEnum&gt; optionalRepeatedEnum = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; optionalRepeatedString = new ArrayList&lt;&gt;();
   *   List&lt;ByteString&gt; optionalRepeatedBytes = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerMessage&gt; optionalRepeatedMessage = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; optionalRepeatedResourceName = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; optionalRepeatedResourceNameOneof = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; optionalRepeatedResourceNameCommon = new ArrayList&lt;&gt;();
   *   List&lt;Integer&gt; optionalRepeatedFixed32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; optionalRepeatedFixed64 = new ArrayList&lt;&gt;();
   *   Map&lt;Integer, String&gt; optionalMap = new HashMap&lt;&gt;();
   *   Any anyValue = Any.newBuilder().build();
   *   Struct structValue = Struct.newBuilder().build();
   *   Value valueValue = Value.newBuilder().build();
   *   ListValue listValueValue = ListValue.newBuilder().build();
   *   Timestamp timeValue = Timestamp.newBuilder().build();
   *   Duration durationValue = Duration.newBuilder().build();
   *   FieldMask fieldMaskValue = FieldMask.newBuilder().build();
   *   Int32Value int32Value = Int32Value.newBuilder().build();
   *   UInt32Value uint32Value = UInt32Value.newBuilder().build();
   *   Int64Value int64Value = Int64Value.newBuilder().build();
   *   UInt64Value uint64Value = UInt64Value.newBuilder().build();
   *   FloatValue floatValue = FloatValue.newBuilder().build();
   *   DoubleValue doubleValue = DoubleValue.newBuilder().build();
   *   StringValue stringValue = StringValue.newBuilder().build();
   *   BoolValue boolValue = BoolValue.newBuilder().build();
   *   BytesValue bytesValue = BytesValue.newBuilder().build();
   *   List&lt;Any&gt; repeatedAnyValue = new ArrayList&lt;&gt;();
   *   List&lt;Struct&gt; repeatedStructValue = new ArrayList&lt;&gt;();
   *   List&lt;Value&gt; repeatedValueValue = new ArrayList&lt;&gt;();
   *   List&lt;ListValue&gt; repeatedListValueValue = new ArrayList&lt;&gt;();
   *   List&lt;Timestamp&gt; repeatedTimeValue = new ArrayList&lt;&gt;();
   *   List&lt;Duration&gt; repeatedDurationValue = new ArrayList&lt;&gt;();
   *   List&lt;FieldMask&gt; repeatedFieldMaskValue = new ArrayList&lt;&gt;();
   *   List&lt;Int32Value&gt; repeatedInt32Value = new ArrayList&lt;&gt;();
   *   List&lt;UInt32Value&gt; repeatedUint32Value = new ArrayList&lt;&gt;();
   *   List&lt;Int64Value&gt; repeatedInt64Value = new ArrayList&lt;&gt;();
   *   List&lt;UInt64Value&gt; repeatedUint64Value = new ArrayList&lt;&gt;();
   *   List&lt;FloatValue&gt; repeatedFloatValue = new ArrayList&lt;&gt;();
   *   List&lt;DoubleValue&gt; repeatedDoubleValue = new ArrayList&lt;&gt;();
   *   List&lt;StringValue&gt; repeatedStringValue = new ArrayList&lt;&gt;();
   *   List&lt;BoolValue&gt; repeatedBoolValue = new ArrayList&lt;&gt;();
   *   List&lt;BytesValue&gt; repeatedBytesValue = new ArrayList&lt;&gt;();
   *   TestOptionalRequiredFlatteningParamsResponse response = libraryServiceClient.testOptionalRequiredFlatteningParams(requiredSingularInt32, requiredSingularInt64, requiredSingularFloat, requiredSingularDouble, requiredSingularBool, requiredSingularEnum, requiredSingularString, requiredSingularBytes, requiredSingularMessage, requiredSingularResourceName, requiredSingularResourceNameOneof, requiredSingularResourceNameCommon, requiredSingularFixed32, requiredSingularFixed64, requiredRepeatedInt32, requiredRepeatedInt64, requiredRepeatedFloat, requiredRepeatedDouble, requiredRepeatedBool, requiredRepeatedEnum, requiredRepeatedString, requiredRepeatedBytes, requiredRepeatedMessage, requiredRepeatedResourceName, requiredRepeatedResourceNameOneof, requiredRepeatedResourceNameCommon, requiredRepeatedFixed32, requiredRepeatedFixed64, requiredMap, requiredAnyValue, requiredStructValue, requiredValueValue, requiredListValueValue, requiredTimeValue, requiredDurationValue, requiredFieldMaskValue, requiredInt32Value, requiredUint32Value, requiredInt64Value, requiredUint64Value, requiredFloatValue, requiredDoubleValue, requiredStringValue, requiredBoolValue, requiredBytesValue, requiredRepeatedAnyValue, requiredRepeatedStructValue, requiredRepeatedValueValue, requiredRepeatedListValueValue, requiredRepeatedTimeValue, requiredRepeatedDurationValue, requiredRepeatedFieldMaskValue, requiredRepeatedInt32Value, requiredRepeatedUint32Value, requiredRepeatedInt64Value, requiredRepeatedUint64Value, requiredRepeatedFloatValue, requiredRepeatedDoubleValue, requiredRepeatedStringValue, requiredRepeatedBoolValue, requiredRepeatedBytesValue, optionalSingularInt32, optionalSingularInt64, optionalSingularFloat, optionalSingularDouble, optionalSingularBool, optionalSingularEnum, optionalSingularString, optionalSingularBytes, optionalSingularMessage, optionalSingularResourceName, optionalSingularResourceNameOneof, optionalSingularResourceNameCommon, optionalSingularFixed32, optionalSingularFixed64, optionalRepeatedInt32, optionalRepeatedInt64, optionalRepeatedFloat, optionalRepeatedDouble, optionalRepeatedBool, optionalRepeatedEnum, optionalRepeatedString, optionalRepeatedBytes, optionalRepeatedMessage, optionalRepeatedResourceName, optionalRepeatedResourceNameOneof, optionalRepeatedResourceNameCommon, optionalRepeatedFixed32, optionalRepeatedFixed64, optionalMap, anyValue, structValue, valueValue, listValueValue, timeValue, durationValue, fieldMaskValue, int32Value, uint32Value, int64Value, uint64Value, floatValue, doubleValue, stringValue, boolValue, bytesValue, repeatedAnyValue, repeatedStructValue, repeatedValueValue, repeatedListValueValue, repeatedTimeValue, repeatedDurationValue, repeatedFieldMaskValue, repeatedInt32Value, repeatedUint32Value, repeatedInt64Value, repeatedUint64Value, repeatedFloatValue, repeatedDoubleValue, repeatedStringValue, repeatedBoolValue, repeatedBytesValue);
   * }
   * </code></pre>
   *
   * @param requiredSingularInt32
   * @param requiredSingularInt64
   * @param requiredSingularFloat
   * @param requiredSingularDouble
   * @param requiredSingularBool
   * @param requiredSingularEnum
   * @param requiredSingularString
   * @param requiredSingularBytes
   * @param requiredSingularMessage
   * @param requiredSingularResourceName
   * @param requiredSingularResourceNameOneof
   * @param requiredSingularResourceNameCommon
   * @param requiredSingularFixed32
   * @param requiredSingularFixed64
   * @param requiredRepeatedInt32
   * @param requiredRepeatedInt64
   * @param requiredRepeatedFloat
   * @param requiredRepeatedDouble
   * @param requiredRepeatedBool
   * @param requiredRepeatedEnum
   * @param requiredRepeatedString
   * @param requiredRepeatedBytes
   * @param requiredRepeatedMessage
   * @param requiredRepeatedResourceName
   * @param requiredRepeatedResourceNameOneof
   * @param requiredRepeatedResourceNameCommon
   * @param requiredRepeatedFixed32
   * @param requiredRepeatedFixed64
   * @param requiredMap
   * @param requiredAnyValue
   * @param requiredStructValue
   * @param requiredValueValue
   * @param requiredListValueValue
   * @param requiredTimeValue
   * @param requiredDurationValue
   * @param requiredFieldMaskValue
   * @param requiredInt32Value
   * @param requiredUint32Value
   * @param requiredInt64Value
   * @param requiredUint64Value
   * @param requiredFloatValue
   * @param requiredDoubleValue
   * @param requiredStringValue
   * @param requiredBoolValue
   * @param requiredBytesValue
   * @param requiredRepeatedAnyValue
   * @param requiredRepeatedStructValue
   * @param requiredRepeatedValueValue
   * @param requiredRepeatedListValueValue
   * @param requiredRepeatedTimeValue
   * @param requiredRepeatedDurationValue
   * @param requiredRepeatedFieldMaskValue
   * @param requiredRepeatedInt32Value
   * @param requiredRepeatedUint32Value
   * @param requiredRepeatedInt64Value
   * @param requiredRepeatedUint64Value
   * @param requiredRepeatedFloatValue
   * @param requiredRepeatedDoubleValue
   * @param requiredRepeatedStringValue
   * @param requiredRepeatedBoolValue
   * @param requiredRepeatedBytesValue
   * @param optionalSingularInt32
   * @param optionalSingularInt64
   * @param optionalSingularFloat
   * @param optionalSingularDouble
   * @param optionalSingularBool
   * @param optionalSingularEnum
   * @param optionalSingularString
   * @param optionalSingularBytes
   * @param optionalSingularMessage
   * @param optionalSingularResourceName
   * @param optionalSingularResourceNameOneof
   * @param optionalSingularResourceNameCommon
   * @param optionalSingularFixed32
   * @param optionalSingularFixed64
   * @param optionalRepeatedInt32
   * @param optionalRepeatedInt64
   * @param optionalRepeatedFloat
   * @param optionalRepeatedDouble
   * @param optionalRepeatedBool
   * @param optionalRepeatedEnum
   * @param optionalRepeatedString
   * @param optionalRepeatedBytes
   * @param optionalRepeatedMessage
   * @param optionalRepeatedResourceName
   * @param optionalRepeatedResourceNameOneof
   * @param optionalRepeatedResourceNameCommon
   * @param optionalRepeatedFixed32
   * @param optionalRepeatedFixed64
   * @param optionalMap
   * @param anyValue
   * @param structValue
   * @param valueValue
   * @param listValueValue
   * @param timeValue
   * @param durationValue
   * @param fieldMaskValue
   * @param int32Value
   * @param uint32Value
   * @param int64Value
   * @param uint64Value
   * @param floatValue
   * @param doubleValue
   * @param stringValue
   * @param boolValue
   * @param bytesValue
   * @param repeatedAnyValue
   * @param repeatedStructValue
   * @param repeatedValueValue
   * @param repeatedListValueValue
   * @param repeatedTimeValue
   * @param repeatedDurationValue
   * @param repeatedFieldMaskValue
   * @param repeatedInt32Value
   * @param repeatedUint32Value
   * @param repeatedInt64Value
   * @param repeatedUint64Value
   * @param repeatedFloatValue
   * @param repeatedDoubleValue
   * @param repeatedStringValue
   * @param repeatedBoolValue
   * @param repeatedBytesValue
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final TestOptionalRequiredFlatteningParamsResponse testOptionalRequiredFlatteningParams(int requiredSingularInt32, long requiredSingularInt64, float requiredSingularFloat, double requiredSingularDouble, boolean requiredSingularBool, TestOptionalRequiredFlatteningParamsRequest.InnerEnum requiredSingularEnum, String requiredSingularString, ByteString requiredSingularBytes, TestOptionalRequiredFlatteningParamsRequest.InnerMessage requiredSingularMessage, BookName requiredSingularResourceName, BookName requiredSingularResourceNameOneof, String requiredSingularResourceNameCommon, int requiredSingularFixed32, long requiredSingularFixed64, List<Integer> requiredRepeatedInt32, List<Long> requiredRepeatedInt64, List<Float> requiredRepeatedFloat, List<Double> requiredRepeatedDouble, List<Boolean> requiredRepeatedBool, List<TestOptionalRequiredFlatteningParamsRequest.InnerEnum> requiredRepeatedEnum, List<String> requiredRepeatedString, List<ByteString> requiredRepeatedBytes, List<TestOptionalRequiredFlatteningParamsRequest.InnerMessage> requiredRepeatedMessage, List<String> requiredRepeatedResourceName, List<String> requiredRepeatedResourceNameOneof, List<String> requiredRepeatedResourceNameCommon, List<Integer> requiredRepeatedFixed32, List<Long> requiredRepeatedFixed64, Map<Integer, String> requiredMap, Any requiredAnyValue, Struct requiredStructValue, Value requiredValueValue, ListValue requiredListValueValue, Timestamp requiredTimeValue, Duration requiredDurationValue, FieldMask requiredFieldMaskValue, Int32Value requiredInt32Value, UInt32Value requiredUint32Value, Int64Value requiredInt64Value, UInt64Value requiredUint64Value, FloatValue requiredFloatValue, DoubleValue requiredDoubleValue, StringValue requiredStringValue, BoolValue requiredBoolValue, BytesValue requiredBytesValue, List<Any> requiredRepeatedAnyValue, List<Struct> requiredRepeatedStructValue, List<Value> requiredRepeatedValueValue, List<ListValue> requiredRepeatedListValueValue, List<Timestamp> requiredRepeatedTimeValue, List<Duration> requiredRepeatedDurationValue, List<FieldMask> requiredRepeatedFieldMaskValue, List<Int32Value> requiredRepeatedInt32Value, List<UInt32Value> requiredRepeatedUint32Value, List<Int64Value> requiredRepeatedInt64Value, List<UInt64Value> requiredRepeatedUint64Value, List<FloatValue> requiredRepeatedFloatValue, List<DoubleValue> requiredRepeatedDoubleValue, List<StringValue> requiredRepeatedStringValue, List<BoolValue> requiredRepeatedBoolValue, List<BytesValue> requiredRepeatedBytesValue, int optionalSingularInt32, long optionalSingularInt64, float optionalSingularFloat, double optionalSingularDouble, boolean optionalSingularBool, TestOptionalRequiredFlatteningParamsRequest.InnerEnum optionalSingularEnum, String optionalSingularString, ByteString optionalSingularBytes, TestOptionalRequiredFlatteningParamsRequest.InnerMessage optionalSingularMessage, BookName optionalSingularResourceName, BookName optionalSingularResourceNameOneof, String optionalSingularResourceNameCommon, int optionalSingularFixed32, long optionalSingularFixed64, List<Integer> optionalRepeatedInt32, List<Long> optionalRepeatedInt64, List<Float> optionalRepeatedFloat, List<Double> optionalRepeatedDouble, List<Boolean> optionalRepeatedBool, List<TestOptionalRequiredFlatteningParamsRequest.InnerEnum> optionalRepeatedEnum, List<String> optionalRepeatedString, List<ByteString> optionalRepeatedBytes, List<TestOptionalRequiredFlatteningParamsRequest.InnerMessage> optionalRepeatedMessage, List<String> optionalRepeatedResourceName, List<String> optionalRepeatedResourceNameOneof, List<String> optionalRepeatedResourceNameCommon, List<Integer> optionalRepeatedFixed32, List<Long> optionalRepeatedFixed64, Map<Integer, String> optionalMap, Any anyValue, Struct structValue, Value valueValue, ListValue listValueValue, Timestamp timeValue, Duration durationValue, FieldMask fieldMaskValue, Int32Value int32Value, UInt32Value uint32Value, Int64Value int64Value, UInt64Value uint64Value, FloatValue floatValue, DoubleValue doubleValue, StringValue stringValue, BoolValue boolValue, BytesValue bytesValue, List<Any> repeatedAnyValue, List<Struct> repeatedStructValue, List<Value> repeatedValueValue, List<ListValue> repeatedListValueValue, List<Timestamp> repeatedTimeValue, List<Duration> repeatedDurationValue, List<FieldMask> repeatedFieldMaskValue, List<Int32Value> repeatedInt32Value, List<UInt32Value> repeatedUint32Value, List<Int64Value> repeatedInt64Value, List<UInt64Value> repeatedUint64Value, List<FloatValue> repeatedFloatValue, List<DoubleValue> repeatedDoubleValue, List<StringValue> repeatedStringValue, List<BoolValue> repeatedBoolValue, List<BytesValue> repeatedBytesValue) {
    TestOptionalRequiredFlatteningParamsRequest request =
        TestOptionalRequiredFlatteningParamsRequest.newBuilder()
            .setRequiredSingularInt32(requiredSingularInt32)
            .setRequiredSingularInt64(requiredSingularInt64)
            .setRequiredSingularFloat(requiredSingularFloat)
            .setRequiredSingularDouble(requiredSingularDouble)
            .setRequiredSingularBool(requiredSingularBool)
            .setRequiredSingularEnum(requiredSingularEnum)
            .setRequiredSingularString(requiredSingularString)
            .setRequiredSingularBytes(requiredSingularBytes)
            .setRequiredSingularMessage(requiredSingularMessage)
            .setRequiredSingularResourceName(requiredSingularResourceName == null ? null : requiredSingularResourceName.toString())
            .setRequiredSingularResourceNameOneof(requiredSingularResourceNameOneof == null ? null : requiredSingularResourceNameOneof.toString())
            .setRequiredSingularResourceNameCommon(requiredSingularResourceNameCommon)
            .setRequiredSingularFixed32(requiredSingularFixed32)
            .setRequiredSingularFixed64(requiredSingularFixed64)
            .addAllRequiredRepeatedInt32(requiredRepeatedInt32)
            .addAllRequiredRepeatedInt64(requiredRepeatedInt64)
            .addAllRequiredRepeatedFloat(requiredRepeatedFloat)
            .addAllRequiredRepeatedDouble(requiredRepeatedDouble)
            .addAllRequiredRepeatedBool(requiredRepeatedBool)
            .addAllRequiredRepeatedEnum(requiredRepeatedEnum)
            .addAllRequiredRepeatedString(requiredRepeatedString)
            .addAllRequiredRepeatedBytes(requiredRepeatedBytes)
            .addAllRequiredRepeatedMessage(requiredRepeatedMessage)
            .addAllRequiredRepeatedResourceName(requiredRepeatedResourceName)
            .addAllRequiredRepeatedResourceNameOneof(requiredRepeatedResourceNameOneof)
            .addAllRequiredRepeatedResourceNameCommon(requiredRepeatedResourceNameCommon)
            .addAllRequiredRepeatedFixed32(requiredRepeatedFixed32)
            .addAllRequiredRepeatedFixed64(requiredRepeatedFixed64)
            .putAllRequiredMap(requiredMap)
            .setRequiredAnyValue(requiredAnyValue)
            .setRequiredStructValue(requiredStructValue)
            .setRequiredValueValue(requiredValueValue)
            .setRequiredListValueValue(requiredListValueValue)
            .setRequiredTimeValue(requiredTimeValue)
            .setRequiredDurationValue(requiredDurationValue)
            .setRequiredFieldMaskValue(requiredFieldMaskValue)
            .setRequiredInt32Value(requiredInt32Value)
            .setRequiredUint32Value(requiredUint32Value)
            .setRequiredInt64Value(requiredInt64Value)
            .setRequiredUint64Value(requiredUint64Value)
            .setRequiredFloatValue(requiredFloatValue)
            .setRequiredDoubleValue(requiredDoubleValue)
            .setRequiredStringValue(requiredStringValue)
            .setRequiredBoolValue(requiredBoolValue)
            .setRequiredBytesValue(requiredBytesValue)
            .addAllRequiredRepeatedAnyValue(requiredRepeatedAnyValue)
            .addAllRequiredRepeatedStructValue(requiredRepeatedStructValue)
            .addAllRequiredRepeatedValueValue(requiredRepeatedValueValue)
            .addAllRequiredRepeatedListValueValue(requiredRepeatedListValueValue)
            .addAllRequiredRepeatedTimeValue(requiredRepeatedTimeValue)
            .addAllRequiredRepeatedDurationValue(requiredRepeatedDurationValue)
            .addAllRequiredRepeatedFieldMaskValue(requiredRepeatedFieldMaskValue)
            .addAllRequiredRepeatedInt32Value(requiredRepeatedInt32Value)
            .addAllRequiredRepeatedUint32Value(requiredRepeatedUint32Value)
            .addAllRequiredRepeatedInt64Value(requiredRepeatedInt64Value)
            .addAllRequiredRepeatedUint64Value(requiredRepeatedUint64Value)
            .addAllRequiredRepeatedFloatValue(requiredRepeatedFloatValue)
            .addAllRequiredRepeatedDoubleValue(requiredRepeatedDoubleValue)
            .addAllRequiredRepeatedStringValue(requiredRepeatedStringValue)
            .addAllRequiredRepeatedBoolValue(requiredRepeatedBoolValue)
            .addAllRequiredRepeatedBytesValue(requiredRepeatedBytesValue)
            .setOptionalSingularInt32(optionalSingularInt32)
            .setOptionalSingularInt64(optionalSingularInt64)
            .setOptionalSingularFloat(optionalSingularFloat)
            .setOptionalSingularDouble(optionalSingularDouble)
            .setOptionalSingularBool(optionalSingularBool)
            .setOptionalSingularEnum(optionalSingularEnum)
            .setOptionalSingularString(optionalSingularString)
            .setOptionalSingularBytes(optionalSingularBytes)
            .setOptionalSingularMessage(optionalSingularMessage)
            .setOptionalSingularResourceName(optionalSingularResourceName == null ? null : optionalSingularResourceName.toString())
            .setOptionalSingularResourceNameOneof(optionalSingularResourceNameOneof == null ? null : optionalSingularResourceNameOneof.toString())
            .setOptionalSingularResourceNameCommon(optionalSingularResourceNameCommon)
            .setOptionalSingularFixed32(optionalSingularFixed32)
            .setOptionalSingularFixed64(optionalSingularFixed64)
            .addAllOptionalRepeatedInt32(optionalRepeatedInt32)
            .addAllOptionalRepeatedInt64(optionalRepeatedInt64)
            .addAllOptionalRepeatedFloat(optionalRepeatedFloat)
            .addAllOptionalRepeatedDouble(optionalRepeatedDouble)
            .addAllOptionalRepeatedBool(optionalRepeatedBool)
            .addAllOptionalRepeatedEnum(optionalRepeatedEnum)
            .addAllOptionalRepeatedString(optionalRepeatedString)
            .addAllOptionalRepeatedBytes(optionalRepeatedBytes)
            .addAllOptionalRepeatedMessage(optionalRepeatedMessage)
            .addAllOptionalRepeatedResourceName(optionalRepeatedResourceName)
            .addAllOptionalRepeatedResourceNameOneof(optionalRepeatedResourceNameOneof)
            .addAllOptionalRepeatedResourceNameCommon(optionalRepeatedResourceNameCommon)
            .addAllOptionalRepeatedFixed32(optionalRepeatedFixed32)
            .addAllOptionalRepeatedFixed64(optionalRepeatedFixed64)
            .putAllOptionalMap(optionalMap)
            .setAnyValue(anyValue)
            .setStructValue(structValue)
            .setValueValue(valueValue)
            .setListValueValue(listValueValue)
            .setTimeValue(timeValue)
            .setDurationValue(durationValue)
            .setFieldMaskValue(fieldMaskValue)
            .setInt32Value(int32Value)
            .setUint32Value(uint32Value)
            .setInt64Value(int64Value)
            .setUint64Value(uint64Value)
            .setFloatValue(floatValue)
            .setDoubleValue(doubleValue)
            .setStringValue(stringValue)
            .setBoolValue(boolValue)
            .setBytesValue(bytesValue)
            .addAllRepeatedAnyValue(repeatedAnyValue)
            .addAllRepeatedStructValue(repeatedStructValue)
            .addAllRepeatedValueValue(repeatedValueValue)
            .addAllRepeatedListValueValue(repeatedListValueValue)
            .addAllRepeatedTimeValue(repeatedTimeValue)
            .addAllRepeatedDurationValue(repeatedDurationValue)
            .addAllRepeatedFieldMaskValue(repeatedFieldMaskValue)
            .addAllRepeatedInt32Value(repeatedInt32Value)
            .addAllRepeatedUint32Value(repeatedUint32Value)
            .addAllRepeatedInt64Value(repeatedInt64Value)
            .addAllRepeatedUint64Value(repeatedUint64Value)
            .addAllRepeatedFloatValue(repeatedFloatValue)
            .addAllRepeatedDoubleValue(repeatedDoubleValue)
            .addAllRepeatedStringValue(repeatedStringValue)
            .addAllRepeatedBoolValue(repeatedBoolValue)
            .addAllRepeatedBytesValue(repeatedBytesValue)
            .build();
    return testOptionalRequiredFlatteningParams(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test optional flattening parameters of all types
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   int requiredSingularInt32 = 0;
   *   long requiredSingularInt64 = 0L;
   *   float requiredSingularFloat = 0.0F;
   *   double requiredSingularDouble = 0.0;
   *   boolean requiredSingularBool = false;
   *   TestOptionalRequiredFlatteningParamsRequest.InnerEnum requiredSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
   *   String requiredSingularString = "";
   *   ByteString requiredSingularBytes = ByteString.copyFromUtf8("");
   *   TestOptionalRequiredFlatteningParamsRequest.InnerMessage requiredSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
   *   BookName requiredSingularResourceName = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   BookName requiredSingularResourceNameOneof = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   String requiredSingularResourceNameCommon = "";
   *   int requiredSingularFixed32 = 0;
   *   long requiredSingularFixed64 = 0L;
   *   List&lt;Integer&gt; requiredRepeatedInt32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; requiredRepeatedInt64 = new ArrayList&lt;&gt;();
   *   List&lt;Float&gt; requiredRepeatedFloat = new ArrayList&lt;&gt;();
   *   List&lt;Double&gt; requiredRepeatedDouble = new ArrayList&lt;&gt;();
   *   List&lt;Boolean&gt; requiredRepeatedBool = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerEnum&gt; requiredRepeatedEnum = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; requiredRepeatedString = new ArrayList&lt;&gt;();
   *   List&lt;ByteString&gt; requiredRepeatedBytes = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerMessage&gt; requiredRepeatedMessage = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; requiredRepeatedResourceName = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; requiredRepeatedResourceNameOneof = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; requiredRepeatedResourceNameCommon = new ArrayList&lt;&gt;();
   *   List&lt;Integer&gt; requiredRepeatedFixed32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; requiredRepeatedFixed64 = new ArrayList&lt;&gt;();
   *   Map&lt;Integer, String&gt; requiredMap = new HashMap&lt;&gt;();
   *   Any requiredAnyValue = Any.newBuilder().build();
   *   Struct requiredStructValue = Struct.newBuilder().build();
   *   Value requiredValueValue = Value.newBuilder().build();
   *   ListValue requiredListValueValue = ListValue.newBuilder().build();
   *   Timestamp requiredTimeValue = Timestamp.newBuilder().build();
   *   Duration requiredDurationValue = Duration.newBuilder().build();
   *   FieldMask requiredFieldMaskValue = FieldMask.newBuilder().build();
   *   Int32Value requiredInt32Value = Int32Value.newBuilder().build();
   *   UInt32Value requiredUint32Value = UInt32Value.newBuilder().build();
   *   Int64Value requiredInt64Value = Int64Value.newBuilder().build();
   *   UInt64Value requiredUint64Value = UInt64Value.newBuilder().build();
   *   FloatValue requiredFloatValue = FloatValue.newBuilder().build();
   *   DoubleValue requiredDoubleValue = DoubleValue.newBuilder().build();
   *   StringValue requiredStringValue = StringValue.newBuilder().build();
   *   BoolValue requiredBoolValue = BoolValue.newBuilder().build();
   *   BytesValue requiredBytesValue = BytesValue.newBuilder().build();
   *   List&lt;Any&gt; requiredRepeatedAnyValue = new ArrayList&lt;&gt;();
   *   List&lt;Struct&gt; requiredRepeatedStructValue = new ArrayList&lt;&gt;();
   *   List&lt;Value&gt; requiredRepeatedValueValue = new ArrayList&lt;&gt;();
   *   List&lt;ListValue&gt; requiredRepeatedListValueValue = new ArrayList&lt;&gt;();
   *   List&lt;Timestamp&gt; requiredRepeatedTimeValue = new ArrayList&lt;&gt;();
   *   List&lt;Duration&gt; requiredRepeatedDurationValue = new ArrayList&lt;&gt;();
   *   List&lt;FieldMask&gt; requiredRepeatedFieldMaskValue = new ArrayList&lt;&gt;();
   *   List&lt;Int32Value&gt; requiredRepeatedInt32Value = new ArrayList&lt;&gt;();
   *   List&lt;UInt32Value&gt; requiredRepeatedUint32Value = new ArrayList&lt;&gt;();
   *   List&lt;Int64Value&gt; requiredRepeatedInt64Value = new ArrayList&lt;&gt;();
   *   List&lt;UInt64Value&gt; requiredRepeatedUint64Value = new ArrayList&lt;&gt;();
   *   List&lt;FloatValue&gt; requiredRepeatedFloatValue = new ArrayList&lt;&gt;();
   *   List&lt;DoubleValue&gt; requiredRepeatedDoubleValue = new ArrayList&lt;&gt;();
   *   List&lt;StringValue&gt; requiredRepeatedStringValue = new ArrayList&lt;&gt;();
   *   List&lt;BoolValue&gt; requiredRepeatedBoolValue = new ArrayList&lt;&gt;();
   *   List&lt;BytesValue&gt; requiredRepeatedBytesValue = new ArrayList&lt;&gt;();
   *   int optionalSingularInt32 = 0;
   *   long optionalSingularInt64 = 0L;
   *   float optionalSingularFloat = 0.0F;
   *   double optionalSingularDouble = 0.0;
   *   boolean optionalSingularBool = false;
   *   TestOptionalRequiredFlatteningParamsRequest.InnerEnum optionalSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
   *   String optionalSingularString = "";
   *   ByteString optionalSingularBytes = ByteString.copyFromUtf8("");
   *   TestOptionalRequiredFlatteningParamsRequest.InnerMessage optionalSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
   *   BookName optionalSingularResourceName = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   BookName optionalSingularResourceNameOneof = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   String optionalSingularResourceNameCommon = "";
   *   int optionalSingularFixed32 = 0;
   *   long optionalSingularFixed64 = 0L;
   *   List&lt;Integer&gt; optionalRepeatedInt32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; optionalRepeatedInt64 = new ArrayList&lt;&gt;();
   *   List&lt;Float&gt; optionalRepeatedFloat = new ArrayList&lt;&gt;();
   *   List&lt;Double&gt; optionalRepeatedDouble = new ArrayList&lt;&gt;();
   *   List&lt;Boolean&gt; optionalRepeatedBool = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerEnum&gt; optionalRepeatedEnum = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; optionalRepeatedString = new ArrayList&lt;&gt;();
   *   List&lt;ByteString&gt; optionalRepeatedBytes = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerMessage&gt; optionalRepeatedMessage = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; optionalRepeatedResourceName = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; optionalRepeatedResourceNameOneof = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; optionalRepeatedResourceNameCommon = new ArrayList&lt;&gt;();
   *   List&lt;Integer&gt; optionalRepeatedFixed32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; optionalRepeatedFixed64 = new ArrayList&lt;&gt;();
   *   Map&lt;Integer, String&gt; optionalMap = new HashMap&lt;&gt;();
   *   Any anyValue = Any.newBuilder().build();
   *   Struct structValue = Struct.newBuilder().build();
   *   Value valueValue = Value.newBuilder().build();
   *   ListValue listValueValue = ListValue.newBuilder().build();
   *   Timestamp timeValue = Timestamp.newBuilder().build();
   *   Duration durationValue = Duration.newBuilder().build();
   *   FieldMask fieldMaskValue = FieldMask.newBuilder().build();
   *   Int32Value int32Value = Int32Value.newBuilder().build();
   *   UInt32Value uint32Value = UInt32Value.newBuilder().build();
   *   Int64Value int64Value = Int64Value.newBuilder().build();
   *   UInt64Value uint64Value = UInt64Value.newBuilder().build();
   *   FloatValue floatValue = FloatValue.newBuilder().build();
   *   DoubleValue doubleValue = DoubleValue.newBuilder().build();
   *   StringValue stringValue = StringValue.newBuilder().build();
   *   BoolValue boolValue = BoolValue.newBuilder().build();
   *   BytesValue bytesValue = BytesValue.newBuilder().build();
   *   List&lt;Any&gt; repeatedAnyValue = new ArrayList&lt;&gt;();
   *   List&lt;Struct&gt; repeatedStructValue = new ArrayList&lt;&gt;();
   *   List&lt;Value&gt; repeatedValueValue = new ArrayList&lt;&gt;();
   *   List&lt;ListValue&gt; repeatedListValueValue = new ArrayList&lt;&gt;();
   *   List&lt;Timestamp&gt; repeatedTimeValue = new ArrayList&lt;&gt;();
   *   List&lt;Duration&gt; repeatedDurationValue = new ArrayList&lt;&gt;();
   *   List&lt;FieldMask&gt; repeatedFieldMaskValue = new ArrayList&lt;&gt;();
   *   List&lt;Int32Value&gt; repeatedInt32Value = new ArrayList&lt;&gt;();
   *   List&lt;UInt32Value&gt; repeatedUint32Value = new ArrayList&lt;&gt;();
   *   List&lt;Int64Value&gt; repeatedInt64Value = new ArrayList&lt;&gt;();
   *   List&lt;UInt64Value&gt; repeatedUint64Value = new ArrayList&lt;&gt;();
   *   List&lt;FloatValue&gt; repeatedFloatValue = new ArrayList&lt;&gt;();
   *   List&lt;DoubleValue&gt; repeatedDoubleValue = new ArrayList&lt;&gt;();
   *   List&lt;StringValue&gt; repeatedStringValue = new ArrayList&lt;&gt;();
   *   List&lt;BoolValue&gt; repeatedBoolValue = new ArrayList&lt;&gt;();
   *   List&lt;BytesValue&gt; repeatedBytesValue = new ArrayList&lt;&gt;();
   *   TestOptionalRequiredFlatteningParamsResponse response = libraryServiceClient.testOptionalRequiredFlatteningParams(requiredSingularInt32, requiredSingularInt64, requiredSingularFloat, requiredSingularDouble, requiredSingularBool, requiredSingularEnum, requiredSingularString, requiredSingularBytes, requiredSingularMessage, requiredSingularResourceName.toString(), requiredSingularResourceNameOneof.toString(), requiredSingularResourceNameCommon, requiredSingularFixed32, requiredSingularFixed64, requiredRepeatedInt32, requiredRepeatedInt64, requiredRepeatedFloat, requiredRepeatedDouble, requiredRepeatedBool, requiredRepeatedEnum, requiredRepeatedString, requiredRepeatedBytes, requiredRepeatedMessage, requiredRepeatedResourceName, requiredRepeatedResourceNameOneof, requiredRepeatedResourceNameCommon, requiredRepeatedFixed32, requiredRepeatedFixed64, requiredMap, requiredAnyValue, requiredStructValue, requiredValueValue, requiredListValueValue, requiredTimeValue, requiredDurationValue, requiredFieldMaskValue, requiredInt32Value, requiredUint32Value, requiredInt64Value, requiredUint64Value, requiredFloatValue, requiredDoubleValue, requiredStringValue, requiredBoolValue, requiredBytesValue, requiredRepeatedAnyValue, requiredRepeatedStructValue, requiredRepeatedValueValue, requiredRepeatedListValueValue, requiredRepeatedTimeValue, requiredRepeatedDurationValue, requiredRepeatedFieldMaskValue, requiredRepeatedInt32Value, requiredRepeatedUint32Value, requiredRepeatedInt64Value, requiredRepeatedUint64Value, requiredRepeatedFloatValue, requiredRepeatedDoubleValue, requiredRepeatedStringValue, requiredRepeatedBoolValue, requiredRepeatedBytesValue, optionalSingularInt32, optionalSingularInt64, optionalSingularFloat, optionalSingularDouble, optionalSingularBool, optionalSingularEnum, optionalSingularString, optionalSingularBytes, optionalSingularMessage, optionalSingularResourceName.toString(), optionalSingularResourceNameOneof.toString(), optionalSingularResourceNameCommon, optionalSingularFixed32, optionalSingularFixed64, optionalRepeatedInt32, optionalRepeatedInt64, optionalRepeatedFloat, optionalRepeatedDouble, optionalRepeatedBool, optionalRepeatedEnum, optionalRepeatedString, optionalRepeatedBytes, optionalRepeatedMessage, optionalRepeatedResourceName, optionalRepeatedResourceNameOneof, optionalRepeatedResourceNameCommon, optionalRepeatedFixed32, optionalRepeatedFixed64, optionalMap, anyValue, structValue, valueValue, listValueValue, timeValue, durationValue, fieldMaskValue, int32Value, uint32Value, int64Value, uint64Value, floatValue, doubleValue, stringValue, boolValue, bytesValue, repeatedAnyValue, repeatedStructValue, repeatedValueValue, repeatedListValueValue, repeatedTimeValue, repeatedDurationValue, repeatedFieldMaskValue, repeatedInt32Value, repeatedUint32Value, repeatedInt64Value, repeatedUint64Value, repeatedFloatValue, repeatedDoubleValue, repeatedStringValue, repeatedBoolValue, repeatedBytesValue);
   * }
   * </code></pre>
   *
   * @param requiredSingularInt32
   * @param requiredSingularInt64
   * @param requiredSingularFloat
   * @param requiredSingularDouble
   * @param requiredSingularBool
   * @param requiredSingularEnum
   * @param requiredSingularString
   * @param requiredSingularBytes
   * @param requiredSingularMessage
   * @param requiredSingularResourceName
   * @param requiredSingularResourceNameOneof
   * @param requiredSingularResourceNameCommon
   * @param requiredSingularFixed32
   * @param requiredSingularFixed64
   * @param requiredRepeatedInt32
   * @param requiredRepeatedInt64
   * @param requiredRepeatedFloat
   * @param requiredRepeatedDouble
   * @param requiredRepeatedBool
   * @param requiredRepeatedEnum
   * @param requiredRepeatedString
   * @param requiredRepeatedBytes
   * @param requiredRepeatedMessage
   * @param requiredRepeatedResourceName
   * @param requiredRepeatedResourceNameOneof
   * @param requiredRepeatedResourceNameCommon
   * @param requiredRepeatedFixed32
   * @param requiredRepeatedFixed64
   * @param requiredMap
   * @param requiredAnyValue
   * @param requiredStructValue
   * @param requiredValueValue
   * @param requiredListValueValue
   * @param requiredTimeValue
   * @param requiredDurationValue
   * @param requiredFieldMaskValue
   * @param requiredInt32Value
   * @param requiredUint32Value
   * @param requiredInt64Value
   * @param requiredUint64Value
   * @param requiredFloatValue
   * @param requiredDoubleValue
   * @param requiredStringValue
   * @param requiredBoolValue
   * @param requiredBytesValue
   * @param requiredRepeatedAnyValue
   * @param requiredRepeatedStructValue
   * @param requiredRepeatedValueValue
   * @param requiredRepeatedListValueValue
   * @param requiredRepeatedTimeValue
   * @param requiredRepeatedDurationValue
   * @param requiredRepeatedFieldMaskValue
   * @param requiredRepeatedInt32Value
   * @param requiredRepeatedUint32Value
   * @param requiredRepeatedInt64Value
   * @param requiredRepeatedUint64Value
   * @param requiredRepeatedFloatValue
   * @param requiredRepeatedDoubleValue
   * @param requiredRepeatedStringValue
   * @param requiredRepeatedBoolValue
   * @param requiredRepeatedBytesValue
   * @param optionalSingularInt32
   * @param optionalSingularInt64
   * @param optionalSingularFloat
   * @param optionalSingularDouble
   * @param optionalSingularBool
   * @param optionalSingularEnum
   * @param optionalSingularString
   * @param optionalSingularBytes
   * @param optionalSingularMessage
   * @param optionalSingularResourceName
   * @param optionalSingularResourceNameOneof
   * @param optionalSingularResourceNameCommon
   * @param optionalSingularFixed32
   * @param optionalSingularFixed64
   * @param optionalRepeatedInt32
   * @param optionalRepeatedInt64
   * @param optionalRepeatedFloat
   * @param optionalRepeatedDouble
   * @param optionalRepeatedBool
   * @param optionalRepeatedEnum
   * @param optionalRepeatedString
   * @param optionalRepeatedBytes
   * @param optionalRepeatedMessage
   * @param optionalRepeatedResourceName
   * @param optionalRepeatedResourceNameOneof
   * @param optionalRepeatedResourceNameCommon
   * @param optionalRepeatedFixed32
   * @param optionalRepeatedFixed64
   * @param optionalMap
   * @param anyValue
   * @param structValue
   * @param valueValue
   * @param listValueValue
   * @param timeValue
   * @param durationValue
   * @param fieldMaskValue
   * @param int32Value
   * @param uint32Value
   * @param int64Value
   * @param uint64Value
   * @param floatValue
   * @param doubleValue
   * @param stringValue
   * @param boolValue
   * @param bytesValue
   * @param repeatedAnyValue
   * @param repeatedStructValue
   * @param repeatedValueValue
   * @param repeatedListValueValue
   * @param repeatedTimeValue
   * @param repeatedDurationValue
   * @param repeatedFieldMaskValue
   * @param repeatedInt32Value
   * @param repeatedUint32Value
   * @param repeatedInt64Value
   * @param repeatedUint64Value
   * @param repeatedFloatValue
   * @param repeatedDoubleValue
   * @param repeatedStringValue
   * @param repeatedBoolValue
   * @param repeatedBytesValue
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final TestOptionalRequiredFlatteningParamsResponse testOptionalRequiredFlatteningParams(int requiredSingularInt32, long requiredSingularInt64, float requiredSingularFloat, double requiredSingularDouble, boolean requiredSingularBool, TestOptionalRequiredFlatteningParamsRequest.InnerEnum requiredSingularEnum, String requiredSingularString, ByteString requiredSingularBytes, TestOptionalRequiredFlatteningParamsRequest.InnerMessage requiredSingularMessage, String requiredSingularResourceName, String requiredSingularResourceNameOneof, String requiredSingularResourceNameCommon, int requiredSingularFixed32, long requiredSingularFixed64, List<Integer> requiredRepeatedInt32, List<Long> requiredRepeatedInt64, List<Float> requiredRepeatedFloat, List<Double> requiredRepeatedDouble, List<Boolean> requiredRepeatedBool, List<TestOptionalRequiredFlatteningParamsRequest.InnerEnum> requiredRepeatedEnum, List<String> requiredRepeatedString, List<ByteString> requiredRepeatedBytes, List<TestOptionalRequiredFlatteningParamsRequest.InnerMessage> requiredRepeatedMessage, List<String> requiredRepeatedResourceName, List<String> requiredRepeatedResourceNameOneof, List<String> requiredRepeatedResourceNameCommon, List<Integer> requiredRepeatedFixed32, List<Long> requiredRepeatedFixed64, Map<Integer, String> requiredMap, Any requiredAnyValue, Struct requiredStructValue, Value requiredValueValue, ListValue requiredListValueValue, Timestamp requiredTimeValue, Duration requiredDurationValue, FieldMask requiredFieldMaskValue, Int32Value requiredInt32Value, UInt32Value requiredUint32Value, Int64Value requiredInt64Value, UInt64Value requiredUint64Value, FloatValue requiredFloatValue, DoubleValue requiredDoubleValue, StringValue requiredStringValue, BoolValue requiredBoolValue, BytesValue requiredBytesValue, List<Any> requiredRepeatedAnyValue, List<Struct> requiredRepeatedStructValue, List<Value> requiredRepeatedValueValue, List<ListValue> requiredRepeatedListValueValue, List<Timestamp> requiredRepeatedTimeValue, List<Duration> requiredRepeatedDurationValue, List<FieldMask> requiredRepeatedFieldMaskValue, List<Int32Value> requiredRepeatedInt32Value, List<UInt32Value> requiredRepeatedUint32Value, List<Int64Value> requiredRepeatedInt64Value, List<UInt64Value> requiredRepeatedUint64Value, List<FloatValue> requiredRepeatedFloatValue, List<DoubleValue> requiredRepeatedDoubleValue, List<StringValue> requiredRepeatedStringValue, List<BoolValue> requiredRepeatedBoolValue, List<BytesValue> requiredRepeatedBytesValue, int optionalSingularInt32, long optionalSingularInt64, float optionalSingularFloat, double optionalSingularDouble, boolean optionalSingularBool, TestOptionalRequiredFlatteningParamsRequest.InnerEnum optionalSingularEnum, String optionalSingularString, ByteString optionalSingularBytes, TestOptionalRequiredFlatteningParamsRequest.InnerMessage optionalSingularMessage, String optionalSingularResourceName, String optionalSingularResourceNameOneof, String optionalSingularResourceNameCommon, int optionalSingularFixed32, long optionalSingularFixed64, List<Integer> optionalRepeatedInt32, List<Long> optionalRepeatedInt64, List<Float> optionalRepeatedFloat, List<Double> optionalRepeatedDouble, List<Boolean> optionalRepeatedBool, List<TestOptionalRequiredFlatteningParamsRequest.InnerEnum> optionalRepeatedEnum, List<String> optionalRepeatedString, List<ByteString> optionalRepeatedBytes, List<TestOptionalRequiredFlatteningParamsRequest.InnerMessage> optionalRepeatedMessage, List<String> optionalRepeatedResourceName, List<String> optionalRepeatedResourceNameOneof, List<String> optionalRepeatedResourceNameCommon, List<Integer> optionalRepeatedFixed32, List<Long> optionalRepeatedFixed64, Map<Integer, String> optionalMap, Any anyValue, Struct structValue, Value valueValue, ListValue listValueValue, Timestamp timeValue, Duration durationValue, FieldMask fieldMaskValue, Int32Value int32Value, UInt32Value uint32Value, Int64Value int64Value, UInt64Value uint64Value, FloatValue floatValue, DoubleValue doubleValue, StringValue stringValue, BoolValue boolValue, BytesValue bytesValue, List<Any> repeatedAnyValue, List<Struct> repeatedStructValue, List<Value> repeatedValueValue, List<ListValue> repeatedListValueValue, List<Timestamp> repeatedTimeValue, List<Duration> repeatedDurationValue, List<FieldMask> repeatedFieldMaskValue, List<Int32Value> repeatedInt32Value, List<UInt32Value> repeatedUint32Value, List<Int64Value> repeatedInt64Value, List<UInt64Value> repeatedUint64Value, List<FloatValue> repeatedFloatValue, List<DoubleValue> repeatedDoubleValue, List<StringValue> repeatedStringValue, List<BoolValue> repeatedBoolValue, List<BytesValue> repeatedBytesValue) {
    TestOptionalRequiredFlatteningParamsRequest request =
        TestOptionalRequiredFlatteningParamsRequest.newBuilder()
            .setRequiredSingularInt32(requiredSingularInt32)
            .setRequiredSingularInt64(requiredSingularInt64)
            .setRequiredSingularFloat(requiredSingularFloat)
            .setRequiredSingularDouble(requiredSingularDouble)
            .setRequiredSingularBool(requiredSingularBool)
            .setRequiredSingularEnum(requiredSingularEnum)
            .setRequiredSingularString(requiredSingularString)
            .setRequiredSingularBytes(requiredSingularBytes)
            .setRequiredSingularMessage(requiredSingularMessage)
            .setRequiredSingularResourceName(requiredSingularResourceName)
            .setRequiredSingularResourceNameOneof(requiredSingularResourceNameOneof)
            .setRequiredSingularResourceNameCommon(requiredSingularResourceNameCommon)
            .setRequiredSingularFixed32(requiredSingularFixed32)
            .setRequiredSingularFixed64(requiredSingularFixed64)
            .addAllRequiredRepeatedInt32(requiredRepeatedInt32)
            .addAllRequiredRepeatedInt64(requiredRepeatedInt64)
            .addAllRequiredRepeatedFloat(requiredRepeatedFloat)
            .addAllRequiredRepeatedDouble(requiredRepeatedDouble)
            .addAllRequiredRepeatedBool(requiredRepeatedBool)
            .addAllRequiredRepeatedEnum(requiredRepeatedEnum)
            .addAllRequiredRepeatedString(requiredRepeatedString)
            .addAllRequiredRepeatedBytes(requiredRepeatedBytes)
            .addAllRequiredRepeatedMessage(requiredRepeatedMessage)
            .addAllRequiredRepeatedResourceName(requiredRepeatedResourceName)
            .addAllRequiredRepeatedResourceNameOneof(requiredRepeatedResourceNameOneof)
            .addAllRequiredRepeatedResourceNameCommon(requiredRepeatedResourceNameCommon)
            .addAllRequiredRepeatedFixed32(requiredRepeatedFixed32)
            .addAllRequiredRepeatedFixed64(requiredRepeatedFixed64)
            .putAllRequiredMap(requiredMap)
            .setRequiredAnyValue(requiredAnyValue)
            .setRequiredStructValue(requiredStructValue)
            .setRequiredValueValue(requiredValueValue)
            .setRequiredListValueValue(requiredListValueValue)
            .setRequiredTimeValue(requiredTimeValue)
            .setRequiredDurationValue(requiredDurationValue)
            .setRequiredFieldMaskValue(requiredFieldMaskValue)
            .setRequiredInt32Value(requiredInt32Value)
            .setRequiredUint32Value(requiredUint32Value)
            .setRequiredInt64Value(requiredInt64Value)
            .setRequiredUint64Value(requiredUint64Value)
            .setRequiredFloatValue(requiredFloatValue)
            .setRequiredDoubleValue(requiredDoubleValue)
            .setRequiredStringValue(requiredStringValue)
            .setRequiredBoolValue(requiredBoolValue)
            .setRequiredBytesValue(requiredBytesValue)
            .addAllRequiredRepeatedAnyValue(requiredRepeatedAnyValue)
            .addAllRequiredRepeatedStructValue(requiredRepeatedStructValue)
            .addAllRequiredRepeatedValueValue(requiredRepeatedValueValue)
            .addAllRequiredRepeatedListValueValue(requiredRepeatedListValueValue)
            .addAllRequiredRepeatedTimeValue(requiredRepeatedTimeValue)
            .addAllRequiredRepeatedDurationValue(requiredRepeatedDurationValue)
            .addAllRequiredRepeatedFieldMaskValue(requiredRepeatedFieldMaskValue)
            .addAllRequiredRepeatedInt32Value(requiredRepeatedInt32Value)
            .addAllRequiredRepeatedUint32Value(requiredRepeatedUint32Value)
            .addAllRequiredRepeatedInt64Value(requiredRepeatedInt64Value)
            .addAllRequiredRepeatedUint64Value(requiredRepeatedUint64Value)
            .addAllRequiredRepeatedFloatValue(requiredRepeatedFloatValue)
            .addAllRequiredRepeatedDoubleValue(requiredRepeatedDoubleValue)
            .addAllRequiredRepeatedStringValue(requiredRepeatedStringValue)
            .addAllRequiredRepeatedBoolValue(requiredRepeatedBoolValue)
            .addAllRequiredRepeatedBytesValue(requiredRepeatedBytesValue)
            .setOptionalSingularInt32(optionalSingularInt32)
            .setOptionalSingularInt64(optionalSingularInt64)
            .setOptionalSingularFloat(optionalSingularFloat)
            .setOptionalSingularDouble(optionalSingularDouble)
            .setOptionalSingularBool(optionalSingularBool)
            .setOptionalSingularEnum(optionalSingularEnum)
            .setOptionalSingularString(optionalSingularString)
            .setOptionalSingularBytes(optionalSingularBytes)
            .setOptionalSingularMessage(optionalSingularMessage)
            .setOptionalSingularResourceName(optionalSingularResourceName)
            .setOptionalSingularResourceNameOneof(optionalSingularResourceNameOneof)
            .setOptionalSingularResourceNameCommon(optionalSingularResourceNameCommon)
            .setOptionalSingularFixed32(optionalSingularFixed32)
            .setOptionalSingularFixed64(optionalSingularFixed64)
            .addAllOptionalRepeatedInt32(optionalRepeatedInt32)
            .addAllOptionalRepeatedInt64(optionalRepeatedInt64)
            .addAllOptionalRepeatedFloat(optionalRepeatedFloat)
            .addAllOptionalRepeatedDouble(optionalRepeatedDouble)
            .addAllOptionalRepeatedBool(optionalRepeatedBool)
            .addAllOptionalRepeatedEnum(optionalRepeatedEnum)
            .addAllOptionalRepeatedString(optionalRepeatedString)
            .addAllOptionalRepeatedBytes(optionalRepeatedBytes)
            .addAllOptionalRepeatedMessage(optionalRepeatedMessage)
            .addAllOptionalRepeatedResourceName(optionalRepeatedResourceName)
            .addAllOptionalRepeatedResourceNameOneof(optionalRepeatedResourceNameOneof)
            .addAllOptionalRepeatedResourceNameCommon(optionalRepeatedResourceNameCommon)
            .addAllOptionalRepeatedFixed32(optionalRepeatedFixed32)
            .addAllOptionalRepeatedFixed64(optionalRepeatedFixed64)
            .putAllOptionalMap(optionalMap)
            .setAnyValue(anyValue)
            .setStructValue(structValue)
            .setValueValue(valueValue)
            .setListValueValue(listValueValue)
            .setTimeValue(timeValue)
            .setDurationValue(durationValue)
            .setFieldMaskValue(fieldMaskValue)
            .setInt32Value(int32Value)
            .setUint32Value(uint32Value)
            .setInt64Value(int64Value)
            .setUint64Value(uint64Value)
            .setFloatValue(floatValue)
            .setDoubleValue(doubleValue)
            .setStringValue(stringValue)
            .setBoolValue(boolValue)
            .setBytesValue(bytesValue)
            .addAllRepeatedAnyValue(repeatedAnyValue)
            .addAllRepeatedStructValue(repeatedStructValue)
            .addAllRepeatedValueValue(repeatedValueValue)
            .addAllRepeatedListValueValue(repeatedListValueValue)
            .addAllRepeatedTimeValue(repeatedTimeValue)
            .addAllRepeatedDurationValue(repeatedDurationValue)
            .addAllRepeatedFieldMaskValue(repeatedFieldMaskValue)
            .addAllRepeatedInt32Value(repeatedInt32Value)
            .addAllRepeatedUint32Value(repeatedUint32Value)
            .addAllRepeatedInt64Value(repeatedInt64Value)
            .addAllRepeatedUint64Value(repeatedUint64Value)
            .addAllRepeatedFloatValue(repeatedFloatValue)
            .addAllRepeatedDoubleValue(repeatedDoubleValue)
            .addAllRepeatedStringValue(repeatedStringValue)
            .addAllRepeatedBoolValue(repeatedBoolValue)
            .addAllRepeatedBytesValue(repeatedBytesValue)
            .build();
    return testOptionalRequiredFlatteningParams(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test optional flattening parameters of all types
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   int requiredSingularInt32 = 0;
   *   long requiredSingularInt64 = 0L;
   *   float requiredSingularFloat = 0.0F;
   *   double requiredSingularDouble = 0.0;
   *   boolean requiredSingularBool = false;
   *   TestOptionalRequiredFlatteningParamsRequest.InnerEnum requiredSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
   *   String requiredSingularString = "";
   *   ByteString requiredSingularBytes = ByteString.copyFromUtf8("");
   *   TestOptionalRequiredFlatteningParamsRequest.InnerMessage requiredSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
   *   BookName requiredSingularResourceName = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   BookName requiredSingularResourceNameOneof = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   String requiredSingularResourceNameCommon = "";
   *   int requiredSingularFixed32 = 0;
   *   long requiredSingularFixed64 = 0L;
   *   List&lt;Integer&gt; requiredRepeatedInt32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; requiredRepeatedInt64 = new ArrayList&lt;&gt;();
   *   List&lt;Float&gt; requiredRepeatedFloat = new ArrayList&lt;&gt;();
   *   List&lt;Double&gt; requiredRepeatedDouble = new ArrayList&lt;&gt;();
   *   List&lt;Boolean&gt; requiredRepeatedBool = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerEnum&gt; requiredRepeatedEnum = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; requiredRepeatedString = new ArrayList&lt;&gt;();
   *   List&lt;ByteString&gt; requiredRepeatedBytes = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerMessage&gt; requiredRepeatedMessage = new ArrayList&lt;&gt;();
   *   List&lt;BookName&gt; requiredRepeatedResourceName = new ArrayList&lt;&gt;();
   *   List&lt;BookName&gt; requiredRepeatedResourceNameOneof = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; requiredRepeatedResourceNameCommon = new ArrayList&lt;&gt;();
   *   List&lt;Integer&gt; requiredRepeatedFixed32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; requiredRepeatedFixed64 = new ArrayList&lt;&gt;();
   *   Map&lt;Integer, String&gt; requiredMap = new HashMap&lt;&gt;();
   *   Any requiredAnyValue = Any.newBuilder().build();
   *   Struct requiredStructValue = Struct.newBuilder().build();
   *   Value requiredValueValue = Value.newBuilder().build();
   *   ListValue requiredListValueValue = ListValue.newBuilder().build();
   *   Timestamp requiredTimeValue = Timestamp.newBuilder().build();
   *   Duration requiredDurationValue = Duration.newBuilder().build();
   *   FieldMask requiredFieldMaskValue = FieldMask.newBuilder().build();
   *   Int32Value requiredInt32Value = Int32Value.newBuilder().build();
   *   UInt32Value requiredUint32Value = UInt32Value.newBuilder().build();
   *   Int64Value requiredInt64Value = Int64Value.newBuilder().build();
   *   UInt64Value requiredUint64Value = UInt64Value.newBuilder().build();
   *   FloatValue requiredFloatValue = FloatValue.newBuilder().build();
   *   DoubleValue requiredDoubleValue = DoubleValue.newBuilder().build();
   *   StringValue requiredStringValue = StringValue.newBuilder().build();
   *   BoolValue requiredBoolValue = BoolValue.newBuilder().build();
   *   BytesValue requiredBytesValue = BytesValue.newBuilder().build();
   *   List&lt;Any&gt; requiredRepeatedAnyValue = new ArrayList&lt;&gt;();
   *   List&lt;Struct&gt; requiredRepeatedStructValue = new ArrayList&lt;&gt;();
   *   List&lt;Value&gt; requiredRepeatedValueValue = new ArrayList&lt;&gt;();
   *   List&lt;ListValue&gt; requiredRepeatedListValueValue = new ArrayList&lt;&gt;();
   *   List&lt;Timestamp&gt; requiredRepeatedTimeValue = new ArrayList&lt;&gt;();
   *   List&lt;Duration&gt; requiredRepeatedDurationValue = new ArrayList&lt;&gt;();
   *   List&lt;FieldMask&gt; requiredRepeatedFieldMaskValue = new ArrayList&lt;&gt;();
   *   List&lt;Int32Value&gt; requiredRepeatedInt32Value = new ArrayList&lt;&gt;();
   *   List&lt;UInt32Value&gt; requiredRepeatedUint32Value = new ArrayList&lt;&gt;();
   *   List&lt;Int64Value&gt; requiredRepeatedInt64Value = new ArrayList&lt;&gt;();
   *   List&lt;UInt64Value&gt; requiredRepeatedUint64Value = new ArrayList&lt;&gt;();
   *   List&lt;FloatValue&gt; requiredRepeatedFloatValue = new ArrayList&lt;&gt;();
   *   List&lt;DoubleValue&gt; requiredRepeatedDoubleValue = new ArrayList&lt;&gt;();
   *   List&lt;StringValue&gt; requiredRepeatedStringValue = new ArrayList&lt;&gt;();
   *   List&lt;BoolValue&gt; requiredRepeatedBoolValue = new ArrayList&lt;&gt;();
   *   List&lt;BytesValue&gt; requiredRepeatedBytesValue = new ArrayList&lt;&gt;();
   *   TestOptionalRequiredFlatteningParamsRequest request = TestOptionalRequiredFlatteningParamsRequest.newBuilder()
   *     .setRequiredSingularInt32(requiredSingularInt32)
   *     .setRequiredSingularInt64(requiredSingularInt64)
   *     .setRequiredSingularFloat(requiredSingularFloat)
   *     .setRequiredSingularDouble(requiredSingularDouble)
   *     .setRequiredSingularBool(requiredSingularBool)
   *     .setRequiredSingularEnum(requiredSingularEnum)
   *     .setRequiredSingularString(requiredSingularString)
   *     .setRequiredSingularBytes(requiredSingularBytes)
   *     .setRequiredSingularMessage(requiredSingularMessage)
   *     .setRequiredSingularResourceName(requiredSingularResourceName.toString())
   *     .setRequiredSingularResourceNameOneof(requiredSingularResourceNameOneof.toString())
   *     .setRequiredSingularResourceNameCommon(requiredSingularResourceNameCommon)
   *     .setRequiredSingularFixed32(requiredSingularFixed32)
   *     .setRequiredSingularFixed64(requiredSingularFixed64)
   *     .addAllRequiredRepeatedInt32(requiredRepeatedInt32)
   *     .addAllRequiredRepeatedInt64(requiredRepeatedInt64)
   *     .addAllRequiredRepeatedFloat(requiredRepeatedFloat)
   *     .addAllRequiredRepeatedDouble(requiredRepeatedDouble)
   *     .addAllRequiredRepeatedBool(requiredRepeatedBool)
   *     .addAllRequiredRepeatedEnum(requiredRepeatedEnum)
   *     .addAllRequiredRepeatedString(requiredRepeatedString)
   *     .addAllRequiredRepeatedBytes(requiredRepeatedBytes)
   *     .addAllRequiredRepeatedMessage(requiredRepeatedMessage)
   *     .addAllRequiredRepeatedResourceName(BookName.toStringList(requiredRepeatedResourceName))
   *     .addAllRequiredRepeatedResourceNameOneof(BookName.toStringList(requiredRepeatedResourceNameOneof))
   *     .addAllRequiredRepeatedResourceNameCommon(requiredRepeatedResourceNameCommon)
   *     .addAllRequiredRepeatedFixed32(requiredRepeatedFixed32)
   *     .addAllRequiredRepeatedFixed64(requiredRepeatedFixed64)
   *     .putAllRequiredMap(requiredMap)
   *     .setRequiredAnyValue(requiredAnyValue)
   *     .setRequiredStructValue(requiredStructValue)
   *     .setRequiredValueValue(requiredValueValue)
   *     .setRequiredListValueValue(requiredListValueValue)
   *     .setRequiredTimeValue(requiredTimeValue)
   *     .setRequiredDurationValue(requiredDurationValue)
   *     .setRequiredFieldMaskValue(requiredFieldMaskValue)
   *     .setRequiredInt32Value(requiredInt32Value)
   *     .setRequiredUint32Value(requiredUint32Value)
   *     .setRequiredInt64Value(requiredInt64Value)
   *     .setRequiredUint64Value(requiredUint64Value)
   *     .setRequiredFloatValue(requiredFloatValue)
   *     .setRequiredDoubleValue(requiredDoubleValue)
   *     .setRequiredStringValue(requiredStringValue)
   *     .setRequiredBoolValue(requiredBoolValue)
   *     .setRequiredBytesValue(requiredBytesValue)
   *     .addAllRequiredRepeatedAnyValue(requiredRepeatedAnyValue)
   *     .addAllRequiredRepeatedStructValue(requiredRepeatedStructValue)
   *     .addAllRequiredRepeatedValueValue(requiredRepeatedValueValue)
   *     .addAllRequiredRepeatedListValueValue(requiredRepeatedListValueValue)
   *     .addAllRequiredRepeatedTimeValue(requiredRepeatedTimeValue)
   *     .addAllRequiredRepeatedDurationValue(requiredRepeatedDurationValue)
   *     .addAllRequiredRepeatedFieldMaskValue(requiredRepeatedFieldMaskValue)
   *     .addAllRequiredRepeatedInt32Value(requiredRepeatedInt32Value)
   *     .addAllRequiredRepeatedUint32Value(requiredRepeatedUint32Value)
   *     .addAllRequiredRepeatedInt64Value(requiredRepeatedInt64Value)
   *     .addAllRequiredRepeatedUint64Value(requiredRepeatedUint64Value)
   *     .addAllRequiredRepeatedFloatValue(requiredRepeatedFloatValue)
   *     .addAllRequiredRepeatedDoubleValue(requiredRepeatedDoubleValue)
   *     .addAllRequiredRepeatedStringValue(requiredRepeatedStringValue)
   *     .addAllRequiredRepeatedBoolValue(requiredRepeatedBoolValue)
   *     .addAllRequiredRepeatedBytesValue(requiredRepeatedBytesValue)
   *     .build();
   *   TestOptionalRequiredFlatteningParamsResponse response = libraryServiceClient.testOptionalRequiredFlatteningParams(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final TestOptionalRequiredFlatteningParamsResponse testOptionalRequiredFlatteningParams(TestOptionalRequiredFlatteningParamsRequest request) {
    return testOptionalRequiredFlatteningParamsCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test optional flattening parameters of all types
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   int requiredSingularInt32 = 0;
   *   long requiredSingularInt64 = 0L;
   *   float requiredSingularFloat = 0.0F;
   *   double requiredSingularDouble = 0.0;
   *   boolean requiredSingularBool = false;
   *   TestOptionalRequiredFlatteningParamsRequest.InnerEnum requiredSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
   *   String requiredSingularString = "";
   *   ByteString requiredSingularBytes = ByteString.copyFromUtf8("");
   *   TestOptionalRequiredFlatteningParamsRequest.InnerMessage requiredSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
   *   BookName requiredSingularResourceName = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   BookName requiredSingularResourceNameOneof = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
   *   String requiredSingularResourceNameCommon = "";
   *   int requiredSingularFixed32 = 0;
   *   long requiredSingularFixed64 = 0L;
   *   List&lt;Integer&gt; requiredRepeatedInt32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; requiredRepeatedInt64 = new ArrayList&lt;&gt;();
   *   List&lt;Float&gt; requiredRepeatedFloat = new ArrayList&lt;&gt;();
   *   List&lt;Double&gt; requiredRepeatedDouble = new ArrayList&lt;&gt;();
   *   List&lt;Boolean&gt; requiredRepeatedBool = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerEnum&gt; requiredRepeatedEnum = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; requiredRepeatedString = new ArrayList&lt;&gt;();
   *   List&lt;ByteString&gt; requiredRepeatedBytes = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerMessage&gt; requiredRepeatedMessage = new ArrayList&lt;&gt;();
   *   List&lt;BookName&gt; requiredRepeatedResourceName = new ArrayList&lt;&gt;();
   *   List&lt;BookName&gt; requiredRepeatedResourceNameOneof = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; requiredRepeatedResourceNameCommon = new ArrayList&lt;&gt;();
   *   List&lt;Integer&gt; requiredRepeatedFixed32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; requiredRepeatedFixed64 = new ArrayList&lt;&gt;();
   *   Map&lt;Integer, String&gt; requiredMap = new HashMap&lt;&gt;();
   *   Any requiredAnyValue = Any.newBuilder().build();
   *   Struct requiredStructValue = Struct.newBuilder().build();
   *   Value requiredValueValue = Value.newBuilder().build();
   *   ListValue requiredListValueValue = ListValue.newBuilder().build();
   *   Timestamp requiredTimeValue = Timestamp.newBuilder().build();
   *   Duration requiredDurationValue = Duration.newBuilder().build();
   *   FieldMask requiredFieldMaskValue = FieldMask.newBuilder().build();
   *   Int32Value requiredInt32Value = Int32Value.newBuilder().build();
   *   UInt32Value requiredUint32Value = UInt32Value.newBuilder().build();
   *   Int64Value requiredInt64Value = Int64Value.newBuilder().build();
   *   UInt64Value requiredUint64Value = UInt64Value.newBuilder().build();
   *   FloatValue requiredFloatValue = FloatValue.newBuilder().build();
   *   DoubleValue requiredDoubleValue = DoubleValue.newBuilder().build();
   *   StringValue requiredStringValue = StringValue.newBuilder().build();
   *   BoolValue requiredBoolValue = BoolValue.newBuilder().build();
   *   BytesValue requiredBytesValue = BytesValue.newBuilder().build();
   *   List&lt;Any&gt; requiredRepeatedAnyValue = new ArrayList&lt;&gt;();
   *   List&lt;Struct&gt; requiredRepeatedStructValue = new ArrayList&lt;&gt;();
   *   List&lt;Value&gt; requiredRepeatedValueValue = new ArrayList&lt;&gt;();
   *   List&lt;ListValue&gt; requiredRepeatedListValueValue = new ArrayList&lt;&gt;();
   *   List&lt;Timestamp&gt; requiredRepeatedTimeValue = new ArrayList&lt;&gt;();
   *   List&lt;Duration&gt; requiredRepeatedDurationValue = new ArrayList&lt;&gt;();
   *   List&lt;FieldMask&gt; requiredRepeatedFieldMaskValue = new ArrayList&lt;&gt;();
   *   List&lt;Int32Value&gt; requiredRepeatedInt32Value = new ArrayList&lt;&gt;();
   *   List&lt;UInt32Value&gt; requiredRepeatedUint32Value = new ArrayList&lt;&gt;();
   *   List&lt;Int64Value&gt; requiredRepeatedInt64Value = new ArrayList&lt;&gt;();
   *   List&lt;UInt64Value&gt; requiredRepeatedUint64Value = new ArrayList&lt;&gt;();
   *   List&lt;FloatValue&gt; requiredRepeatedFloatValue = new ArrayList&lt;&gt;();
   *   List&lt;DoubleValue&gt; requiredRepeatedDoubleValue = new ArrayList&lt;&gt;();
   *   List&lt;StringValue&gt; requiredRepeatedStringValue = new ArrayList&lt;&gt;();
   *   List&lt;BoolValue&gt; requiredRepeatedBoolValue = new ArrayList&lt;&gt;();
   *   List&lt;BytesValue&gt; requiredRepeatedBytesValue = new ArrayList&lt;&gt;();
   *   TestOptionalRequiredFlatteningParamsRequest request = TestOptionalRequiredFlatteningParamsRequest.newBuilder()
   *     .setRequiredSingularInt32(requiredSingularInt32)
   *     .setRequiredSingularInt64(requiredSingularInt64)
   *     .setRequiredSingularFloat(requiredSingularFloat)
   *     .setRequiredSingularDouble(requiredSingularDouble)
   *     .setRequiredSingularBool(requiredSingularBool)
   *     .setRequiredSingularEnum(requiredSingularEnum)
   *     .setRequiredSingularString(requiredSingularString)
   *     .setRequiredSingularBytes(requiredSingularBytes)
   *     .setRequiredSingularMessage(requiredSingularMessage)
   *     .setRequiredSingularResourceName(requiredSingularResourceName.toString())
   *     .setRequiredSingularResourceNameOneof(requiredSingularResourceNameOneof.toString())
   *     .setRequiredSingularResourceNameCommon(requiredSingularResourceNameCommon)
   *     .setRequiredSingularFixed32(requiredSingularFixed32)
   *     .setRequiredSingularFixed64(requiredSingularFixed64)
   *     .addAllRequiredRepeatedInt32(requiredRepeatedInt32)
   *     .addAllRequiredRepeatedInt64(requiredRepeatedInt64)
   *     .addAllRequiredRepeatedFloat(requiredRepeatedFloat)
   *     .addAllRequiredRepeatedDouble(requiredRepeatedDouble)
   *     .addAllRequiredRepeatedBool(requiredRepeatedBool)
   *     .addAllRequiredRepeatedEnum(requiredRepeatedEnum)
   *     .addAllRequiredRepeatedString(requiredRepeatedString)
   *     .addAllRequiredRepeatedBytes(requiredRepeatedBytes)
   *     .addAllRequiredRepeatedMessage(requiredRepeatedMessage)
   *     .addAllRequiredRepeatedResourceName(BookName.toStringList(requiredRepeatedResourceName))
   *     .addAllRequiredRepeatedResourceNameOneof(BookName.toStringList(requiredRepeatedResourceNameOneof))
   *     .addAllRequiredRepeatedResourceNameCommon(requiredRepeatedResourceNameCommon)
   *     .addAllRequiredRepeatedFixed32(requiredRepeatedFixed32)
   *     .addAllRequiredRepeatedFixed64(requiredRepeatedFixed64)
   *     .putAllRequiredMap(requiredMap)
   *     .setRequiredAnyValue(requiredAnyValue)
   *     .setRequiredStructValue(requiredStructValue)
   *     .setRequiredValueValue(requiredValueValue)
   *     .setRequiredListValueValue(requiredListValueValue)
   *     .setRequiredTimeValue(requiredTimeValue)
   *     .setRequiredDurationValue(requiredDurationValue)
   *     .setRequiredFieldMaskValue(requiredFieldMaskValue)
   *     .setRequiredInt32Value(requiredInt32Value)
   *     .setRequiredUint32Value(requiredUint32Value)
   *     .setRequiredInt64Value(requiredInt64Value)
   *     .setRequiredUint64Value(requiredUint64Value)
   *     .setRequiredFloatValue(requiredFloatValue)
   *     .setRequiredDoubleValue(requiredDoubleValue)
   *     .setRequiredStringValue(requiredStringValue)
   *     .setRequiredBoolValue(requiredBoolValue)
   *     .setRequiredBytesValue(requiredBytesValue)
   *     .addAllRequiredRepeatedAnyValue(requiredRepeatedAnyValue)
   *     .addAllRequiredRepeatedStructValue(requiredRepeatedStructValue)
   *     .addAllRequiredRepeatedValueValue(requiredRepeatedValueValue)
   *     .addAllRequiredRepeatedListValueValue(requiredRepeatedListValueValue)
   *     .addAllRequiredRepeatedTimeValue(requiredRepeatedTimeValue)
   *     .addAllRequiredRepeatedDurationValue(requiredRepeatedDurationValue)
   *     .addAllRequiredRepeatedFieldMaskValue(requiredRepeatedFieldMaskValue)
   *     .addAllRequiredRepeatedInt32Value(requiredRepeatedInt32Value)
   *     .addAllRequiredRepeatedUint32Value(requiredRepeatedUint32Value)
   *     .addAllRequiredRepeatedInt64Value(requiredRepeatedInt64Value)
   *     .addAllRequiredRepeatedUint64Value(requiredRepeatedUint64Value)
   *     .addAllRequiredRepeatedFloatValue(requiredRepeatedFloatValue)
   *     .addAllRequiredRepeatedDoubleValue(requiredRepeatedDoubleValue)
   *     .addAllRequiredRepeatedStringValue(requiredRepeatedStringValue)
   *     .addAllRequiredRepeatedBoolValue(requiredRepeatedBoolValue)
   *     .addAllRequiredRepeatedBytesValue(requiredRepeatedBytesValue)
   *     .build();
   *   ApiFuture&lt;TestOptionalRequiredFlatteningParamsResponse&gt; future = libraryServiceClient.testOptionalRequiredFlatteningParamsCallable().futureCall(request);
   *   // Do something
   *   TestOptionalRequiredFlatteningParamsResponse response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsCallable() {
    return stub.testOptionalRequiredFlatteningParamsCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * This method is not exposed in the GAPIC config. It should be generated.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *
   *   Book response = libraryServiceClient.privateListShelves();
   * }
   * </code></pre>
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book privateListShelves() {
    ListShelvesRequest request =
        ListShelvesRequest.newBuilder().build();
    return privateListShelves(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * This method is not exposed in the GAPIC config. It should be generated.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ListShelvesRequest request = ListShelvesRequest.newBuilder().build();
   *   Book response = libraryServiceClient.privateListShelves(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book privateListShelves(ListShelvesRequest request) {
    return privateListShelvesCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * This method is not exposed in the GAPIC config. It should be generated.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
   *   ListShelvesRequest request = ListShelvesRequest.newBuilder().build();
   *   ApiFuture&lt;Book&gt; future = libraryServiceClient.privateListShelvesCallable().futureCall(request);
   *   // Do something
   *   Book response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<ListShelvesRequest, Book> privateListShelvesCallable() {
    return stub.privateListShelvesCallable();
  }

  @Override
  public final void close() {
    stub.close();
  }

  @Override
  public void shutdown() {
    stub.shutdown();
  }

  @Override
  public boolean isShutdown() {
    return stub.isShutdown();
  }

  @Override
  public boolean isTerminated() {
    return stub.isTerminated();
  }

  @Override
  public void shutdownNow() {
    stub.shutdownNow();
  }

  @Override
  public boolean awaitTermination(long duration, TimeUnit unit) throws InterruptedException {
    return stub.awaitTermination(duration, unit);
  }

  public static class ListAggregatedShelvesPagedResponse extends AbstractPagedListResponse<
      ListAggregatedShelvesRequest,
      ListAggregatedShelvesResponse,
      Entry<String, Shelf>,
      ListAggregatedShelvesPage,
      ListAggregatedShelvesFixedSizeCollection> {

    public static ApiFuture<ListAggregatedShelvesPagedResponse> createAsync(
        PageContext<ListAggregatedShelvesRequest, ListAggregatedShelvesResponse, Entry<String, Shelf>> context,
        ApiFuture<ListAggregatedShelvesResponse> futureResponse) {
      ApiFuture<ListAggregatedShelvesPage> futurePage =
          ListAggregatedShelvesPage.createEmptyPage().createPageAsync(context, futureResponse);
      return ApiFutures.transform(
          futurePage,
          new ApiFunction<ListAggregatedShelvesPage, ListAggregatedShelvesPagedResponse>() {
            @Override
            public ListAggregatedShelvesPagedResponse apply(ListAggregatedShelvesPage input) {
              return new ListAggregatedShelvesPagedResponse(input);
            }
          },
          MoreExecutors.directExecutor());
    }

    private ListAggregatedShelvesPagedResponse(ListAggregatedShelvesPage page) {
      super(page, ListAggregatedShelvesFixedSizeCollection.createEmptyCollection());
    }


  }

  public static class ListAggregatedShelvesPage extends AbstractPage<
      ListAggregatedShelvesRequest,
      ListAggregatedShelvesResponse,
      Entry<String, Shelf>,
      ListAggregatedShelvesPage> {

    private ListAggregatedShelvesPage(
        PageContext<ListAggregatedShelvesRequest, ListAggregatedShelvesResponse, Entry<String, Shelf>> context,
        ListAggregatedShelvesResponse response) {
      super(context, response);
    }

    private static ListAggregatedShelvesPage createEmptyPage() {
      return new ListAggregatedShelvesPage(null, null);
    }

    @Override
    protected ListAggregatedShelvesPage createPage(
        PageContext<ListAggregatedShelvesRequest, ListAggregatedShelvesResponse, Entry<String, Shelf>> context,
        ListAggregatedShelvesResponse response) {
      return new ListAggregatedShelvesPage(context, response);
    }

    @Override
    public ApiFuture<ListAggregatedShelvesPage> createPageAsync(
        PageContext<ListAggregatedShelvesRequest, ListAggregatedShelvesResponse, Entry<String, Shelf>> context,
        ApiFuture<ListAggregatedShelvesResponse> futureResponse) {
      return super.createPageAsync(context, futureResponse);
    }




  }

  public static class ListAggregatedShelvesFixedSizeCollection extends AbstractFixedSizeCollection<
      ListAggregatedShelvesRequest,
      ListAggregatedShelvesResponse,
      Entry<String, Shelf>,
      ListAggregatedShelvesPage,
      ListAggregatedShelvesFixedSizeCollection> {

    private ListAggregatedShelvesFixedSizeCollection(List<ListAggregatedShelvesPage> pages, int collectionSize) {
      super(pages, collectionSize);
    }

    private static ListAggregatedShelvesFixedSizeCollection createEmptyCollection() {
      return new ListAggregatedShelvesFixedSizeCollection(null, 0);
    }

    @Override
    protected ListAggregatedShelvesFixedSizeCollection createCollection(
        List<ListAggregatedShelvesPage> pages, int collectionSize) {
      return new ListAggregatedShelvesFixedSizeCollection(pages, collectionSize);
    }


  }
  public static class ListBooksPagedResponse extends AbstractPagedListResponse<
      ListBooksRequest,
      ListBooksResponse,
      Book,
      ListBooksPage,
      ListBooksFixedSizeCollection> {

    public static ApiFuture<ListBooksPagedResponse> createAsync(
        PageContext<ListBooksRequest, ListBooksResponse, Book> context,
        ApiFuture<ListBooksResponse> futureResponse) {
      ApiFuture<ListBooksPage> futurePage =
          ListBooksPage.createEmptyPage().createPageAsync(context, futureResponse);
      return ApiFutures.transform(
          futurePage,
          new ApiFunction<ListBooksPage, ListBooksPagedResponse>() {
            @Override
            public ListBooksPagedResponse apply(ListBooksPage input) {
              return new ListBooksPagedResponse(input);
            }
          },
          MoreExecutors.directExecutor());
    }

    private ListBooksPagedResponse(ListBooksPage page) {
      super(page, ListBooksFixedSizeCollection.createEmptyCollection());
    }


  }

  public static class ListBooksPage extends AbstractPage<
      ListBooksRequest,
      ListBooksResponse,
      Book,
      ListBooksPage> {

    private ListBooksPage(
        PageContext<ListBooksRequest, ListBooksResponse, Book> context,
        ListBooksResponse response) {
      super(context, response);
    }

    private static ListBooksPage createEmptyPage() {
      return new ListBooksPage(null, null);
    }

    @Override
    protected ListBooksPage createPage(
        PageContext<ListBooksRequest, ListBooksResponse, Book> context,
        ListBooksResponse response) {
      return new ListBooksPage(context, response);
    }

    @Override
    public ApiFuture<ListBooksPage> createPageAsync(
        PageContext<ListBooksRequest, ListBooksResponse, Book> context,
        ApiFuture<ListBooksResponse> futureResponse) {
      return super.createPageAsync(context, futureResponse);
    }




  }

  public static class ListBooksFixedSizeCollection extends AbstractFixedSizeCollection<
      ListBooksRequest,
      ListBooksResponse,
      Book,
      ListBooksPage,
      ListBooksFixedSizeCollection> {

    private ListBooksFixedSizeCollection(List<ListBooksPage> pages, int collectionSize) {
      super(pages, collectionSize);
    }

    private static ListBooksFixedSizeCollection createEmptyCollection() {
      return new ListBooksFixedSizeCollection(null, 0);
    }

    @Override
    protected ListBooksFixedSizeCollection createCollection(
        List<ListBooksPage> pages, int collectionSize) {
      return new ListBooksFixedSizeCollection(pages, collectionSize);
    }


  }
  public static class ListStringsPagedResponse extends AbstractPagedListResponse<
      ListStringsRequest,
      ListStringsResponse,
      String,
      ListStringsPage,
      ListStringsFixedSizeCollection> {

    public static ApiFuture<ListStringsPagedResponse> createAsync(
        PageContext<ListStringsRequest, ListStringsResponse, String> context,
        ApiFuture<ListStringsResponse> futureResponse) {
      ApiFuture<ListStringsPage> futurePage =
          ListStringsPage.createEmptyPage().createPageAsync(context, futureResponse);
      return ApiFutures.transform(
          futurePage,
          new ApiFunction<ListStringsPage, ListStringsPagedResponse>() {
            @Override
            public ListStringsPagedResponse apply(ListStringsPage input) {
              return new ListStringsPagedResponse(input);
            }
          },
          MoreExecutors.directExecutor());
    }

    private ListStringsPagedResponse(ListStringsPage page) {
      super(page, ListStringsFixedSizeCollection.createEmptyCollection());
    }
    public Iterable<ResourceName> iterateAllAsResourceName() {
      return Iterables.transform(iterateAll(), new Function<String, ResourceName>() {
          @Override
          public ResourceName apply(String arg0) {
            return UntypedResourceName.parse(arg0);
          }
        }
      );
    }

  }

  public static class ListStringsPage extends AbstractPage<
      ListStringsRequest,
      ListStringsResponse,
      String,
      ListStringsPage> {

    private ListStringsPage(
        PageContext<ListStringsRequest, ListStringsResponse, String> context,
        ListStringsResponse response) {
      super(context, response);
    }

    private static ListStringsPage createEmptyPage() {
      return new ListStringsPage(null, null);
    }

    @Override
    protected ListStringsPage createPage(
        PageContext<ListStringsRequest, ListStringsResponse, String> context,
        ListStringsResponse response) {
      return new ListStringsPage(context, response);
    }

    @Override
    public ApiFuture<ListStringsPage> createPageAsync(
        PageContext<ListStringsRequest, ListStringsResponse, String> context,
        ApiFuture<ListStringsResponse> futureResponse) {
      return super.createPageAsync(context, futureResponse);
    }
    public Iterable<ResourceName> iterateAllAsResourceName() {
      return Iterables.transform(iterateAll(), new Function<String, ResourceName>() {
          @Override
          public ResourceName apply(String arg0) {
            return UntypedResourceName.parse(arg0);
          }
        }
      );
    }

    public Iterable<ResourceName> getValuesAsResourceName() {
      return Iterables.transform(getValues(), new Function<String, ResourceName>() {
          @Override
          public ResourceName apply(String arg0) {
            return UntypedResourceName.parse(arg0);
          }
        }
      );
    }

  }

  public static class ListStringsFixedSizeCollection extends AbstractFixedSizeCollection<
      ListStringsRequest,
      ListStringsResponse,
      String,
      ListStringsPage,
      ListStringsFixedSizeCollection> {

    private ListStringsFixedSizeCollection(List<ListStringsPage> pages, int collectionSize) {
      super(pages, collectionSize);
    }

    private static ListStringsFixedSizeCollection createEmptyCollection() {
      return new ListStringsFixedSizeCollection(null, 0);
    }

    @Override
    protected ListStringsFixedSizeCollection createCollection(
        List<ListStringsPage> pages, int collectionSize) {
      return new ListStringsFixedSizeCollection(pages, collectionSize);
    }
    public Iterable<ResourceName> getValuesAsResourceName() {
      return Iterables.transform(getValues(), new Function<String, ResourceName>() {
          @Override
          public ResourceName apply(String arg0) {
            return UntypedResourceName.parse(arg0);
          }
        }
      );
    }

  }
  public static class FindRelatedBooksPagedResponse extends AbstractPagedListResponse<
      FindRelatedBooksRequest,
      FindRelatedBooksResponse,
      String,
      FindRelatedBooksPage,
      FindRelatedBooksFixedSizeCollection> {

    public static ApiFuture<FindRelatedBooksPagedResponse> createAsync(
        PageContext<FindRelatedBooksRequest, FindRelatedBooksResponse, String> context,
        ApiFuture<FindRelatedBooksResponse> futureResponse) {
      ApiFuture<FindRelatedBooksPage> futurePage =
          FindRelatedBooksPage.createEmptyPage().createPageAsync(context, futureResponse);
      return ApiFutures.transform(
          futurePage,
          new ApiFunction<FindRelatedBooksPage, FindRelatedBooksPagedResponse>() {
            @Override
            public FindRelatedBooksPagedResponse apply(FindRelatedBooksPage input) {
              return new FindRelatedBooksPagedResponse(input);
            }
          },
          MoreExecutors.directExecutor());
    }

    private FindRelatedBooksPagedResponse(FindRelatedBooksPage page) {
      super(page, FindRelatedBooksFixedSizeCollection.createEmptyCollection());
    }
    public Iterable<BookName> iterateAllAsBookName() {
      return Iterables.transform(iterateAll(), new Function<String, BookName>() {
          @Override
          public BookName apply(String arg0) {
            return BookName.parse(arg0);
          }
        }
      );
    }

  }

  public static class FindRelatedBooksPage extends AbstractPage<
      FindRelatedBooksRequest,
      FindRelatedBooksResponse,
      String,
      FindRelatedBooksPage> {

    private FindRelatedBooksPage(
        PageContext<FindRelatedBooksRequest, FindRelatedBooksResponse, String> context,
        FindRelatedBooksResponse response) {
      super(context, response);
    }

    private static FindRelatedBooksPage createEmptyPage() {
      return new FindRelatedBooksPage(null, null);
    }

    @Override
    protected FindRelatedBooksPage createPage(
        PageContext<FindRelatedBooksRequest, FindRelatedBooksResponse, String> context,
        FindRelatedBooksResponse response) {
      return new FindRelatedBooksPage(context, response);
    }

    @Override
    public ApiFuture<FindRelatedBooksPage> createPageAsync(
        PageContext<FindRelatedBooksRequest, FindRelatedBooksResponse, String> context,
        ApiFuture<FindRelatedBooksResponse> futureResponse) {
      return super.createPageAsync(context, futureResponse);
    }
    public Iterable<BookName> iterateAllAsBookName() {
      return Iterables.transform(iterateAll(), new Function<String, BookName>() {
          @Override
          public BookName apply(String arg0) {
            return BookName.parse(arg0);
          }
        }
      );
    }

    public Iterable<BookName> getValuesAsBookName() {
      return Iterables.transform(getValues(), new Function<String, BookName>() {
          @Override
          public BookName apply(String arg0) {
            return BookName.parse(arg0);
          }
        }
      );
    }

  }

  public static class FindRelatedBooksFixedSizeCollection extends AbstractFixedSizeCollection<
      FindRelatedBooksRequest,
      FindRelatedBooksResponse,
      String,
      FindRelatedBooksPage,
      FindRelatedBooksFixedSizeCollection> {

    private FindRelatedBooksFixedSizeCollection(List<FindRelatedBooksPage> pages, int collectionSize) {
      super(pages, collectionSize);
    }

    private static FindRelatedBooksFixedSizeCollection createEmptyCollection() {
      return new FindRelatedBooksFixedSizeCollection(null, 0);
    }

    @Override
    protected FindRelatedBooksFixedSizeCollection createCollection(
        List<FindRelatedBooksPage> pages, int collectionSize) {
      return new FindRelatedBooksFixedSizeCollection(pages, collectionSize);
    }
    public Iterable<BookName> getValuesAsBookName() {
      return Iterables.transform(getValues(), new Function<String, BookName>() {
          @Override
          public BookName apply(String arg0) {
            return BookName.parse(arg0);
          }
        }
      );
    }

  }
}
============== file: src/main/java/com/google/example/library/v1/LibraryServiceSettings.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1;

import com.google.api.core.ApiFunction;
import com.google.api.core.ApiFuture;
import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.core.GaxProperties;
import com.google.api.gax.core.GoogleCredentialsProvider;
import com.google.api.gax.core.InstantiatingExecutorProvider;
import com.google.api.gax.httpjson.GaxHttpJsonProperties;
import com.google.api.gax.httpjson.HttpJsonTransportChannel;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.longrunning.OperationFuture;
import com.google.api.gax.longrunning.OperationSnapshot;
import com.google.api.gax.longrunning.OperationTimedPollAlgorithm;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.ApiCallContext;
import com.google.api.gax.rpc.ApiClientHeaderProvider;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.ClientSettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.OperationCallSettings;
import com.google.api.gax.rpc.PageContext;
import com.google.api.gax.rpc.PagedCallSettings;
import com.google.api.gax.rpc.PagedListDescriptor;
import com.google.api.gax.rpc.PagedListResponseFactory;
import com.google.api.gax.rpc.ServerStreamingCallSettings;
import com.google.api.gax.rpc.StatusCode;
import com.google.api.gax.rpc.StreamingCallSettings;
import com.google.api.gax.rpc.StubSettings;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.api.gax.rpc.UnaryCallSettings;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.auth.Credentials;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import static com.google.example.library.v1.LibraryServiceClient.FindRelatedBooksPagedResponse;
import static com.google.example.library.v1.LibraryServiceClient.ListAggregatedShelvesPagedResponse;
import static com.google.example.library.v1.LibraryServiceClient.ListBooksPagedResponse;
import static com.google.example.library.v1.LibraryServiceClient.ListStringsPagedResponse;
import com.google.example.library.v1.stub.LibraryServiceStubSettings;
import com.google.longrunning.Operation;
import com.google.protobuf.Empty;
import com.google.tagger.v1.TaggerProto.AddTagRequest;
import com.google.tagger.v1.TaggerProto.AddTagResponse;
import java.io.IOException;
import java.util.List;
import java.util.Map.Entry;
import java.util.concurrent.ScheduledExecutorService;
import javax.annotation.Generated;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * Settings class to configure an instance of {@link LibraryServiceClient}.
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 * <li>The default service address (library-example.googleapis.com) and default port (1234)
 * are used.
 * <li>Credentials are acquired automatically through Application Default Credentials.
 * <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 *
 * <p>The builder of this class is recursive, so contained classes are themselves builders.
 * When build() is called, the tree of builders is called to create the complete settings
 * object.
 *
 * For example, to set the total timeout of createShelf to 30 seconds:
 *
 * <pre>
 * <code>
 * LibraryServiceSettings.Builder libraryServiceSettingsBuilder =
 *     LibraryServiceSettings.newBuilder();
 * libraryServiceSettingsBuilder
 *     .createShelfSettings()
 *     .setRetrySettings(
 *         libraryServiceSettingsBuilder.createShelfSettings().getRetrySettings().toBuilder()
 *             .setTotalTimeout(Duration.ofSeconds(30))
 *             .build());
 * LibraryServiceSettings libraryServiceSettings = libraryServiceSettingsBuilder.build();
 * </code>
 * </pre>
 */
@Generated("by gapic-generator")
@BetaApi
public class LibraryServiceSettings extends ClientSettings<LibraryServiceSettings> {
  /**
   * Returns the object with the settings used for calls to createShelf.
   */
  public UnaryCallSettings<CreateShelfRequest, Shelf> createShelfSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).createShelfSettings();
  }

  /**
   * Returns the object with the settings used for calls to getShelf.
   */
  public UnaryCallSettings<GetShelfRequest, Shelf> getShelfSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).getShelfSettings();
  }

  /**
   * Returns the object with the settings used for calls to listShelves.
   */
  public UnaryCallSettings<ListShelvesRequest, ListShelvesResponse> listShelvesSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).listShelvesSettings();
  }

  /**
   * Returns the object with the settings used for calls to listAggregatedShelves.
   */
  public PagedCallSettings<ListAggregatedShelvesRequest, ListAggregatedShelvesResponse, ListAggregatedShelvesPagedResponse> listAggregatedShelvesSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).listAggregatedShelvesSettings();
  }

  /**
   * Returns the object with the settings used for calls to deleteShelf.
   */
  public UnaryCallSettings<DeleteShelfRequest, Empty> deleteShelfSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).deleteShelfSettings();
  }

  /**
   * Returns the object with the settings used for calls to mergeShelves.
   */
  public UnaryCallSettings<MergeShelvesRequest, Shelf> mergeShelvesSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).mergeShelvesSettings();
  }

  /**
   * Returns the object with the settings used for calls to createBook.
   */
  public UnaryCallSettings<CreateBookRequest, Book> createBookSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).createBookSettings();
  }

  /**
   * Returns the object with the settings used for calls to publishSeries.
   */
  public UnaryCallSettings<PublishSeriesRequest, PublishSeriesResponse> publishSeriesSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).publishSeriesSettings();
  }

  /**
   * Returns the object with the settings used for calls to createInventory.
   */
  public UnaryCallSettings<CreateInventoryRequest, Inventory> createInventorySettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).createInventorySettings();
  }

  /**
   * Returns the object with the settings used for calls to getBook.
   */
  public UnaryCallSettings<GetBookRequest, Book> getBookSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).getBookSettings();
  }

  /**
   * Returns the object with the settings used for calls to listBooks.
   */
  public PagedCallSettings<ListBooksRequest, ListBooksResponse, ListBooksPagedResponse> listBooksSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).listBooksSettings();
  }

  /**
   * Returns the object with the settings used for calls to deleteBook.
   */
  public UnaryCallSettings<DeleteBookRequest, Empty> deleteBookSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).deleteBookSettings();
  }

  /**
   * Returns the object with the settings used for calls to updateBook.
   */
  public UnaryCallSettings<UpdateBookRequest, Book> updateBookSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).updateBookSettings();
  }

  /**
   * Returns the object with the settings used for calls to moveBook.
   */
  public UnaryCallSettings<MoveBookRequest, Book> moveBookSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).moveBookSettings();
  }

  /**
   * Returns the object with the settings used for calls to listStrings.
   */
  public PagedCallSettings<ListStringsRequest, ListStringsResponse, ListStringsPagedResponse> listStringsSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).listStringsSettings();
  }

  /**
   * Returns the object with the settings used for calls to addComments.
   */
  public UnaryCallSettings<AddCommentsRequest, Empty> addCommentsSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).addCommentsSettings();
  }

  /**
   * Returns the object with the settings used for calls to getBookFromArchive.
   */
  public UnaryCallSettings<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).getBookFromArchiveSettings();
  }

  /**
   * Returns the object with the settings used for calls to getBookFromAnywhere.
   */
  public UnaryCallSettings<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).getBookFromAnywhereSettings();
  }

  /**
   * Returns the object with the settings used for calls to getBookFromAbsolutelyAnywhere.
   */
  public UnaryCallSettings<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere> getBookFromAbsolutelyAnywhereSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).getBookFromAbsolutelyAnywhereSettings();
  }

  /**
   * Returns the object with the settings used for calls to updateBookIndex.
   */
  public UnaryCallSettings<UpdateBookIndexRequest, Empty> updateBookIndexSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).updateBookIndexSettings();
  }

  /**
   * Returns the object with the settings used for calls to findRelatedBooks.
   */
  public PagedCallSettings<FindRelatedBooksRequest, FindRelatedBooksResponse, FindRelatedBooksPagedResponse> findRelatedBooksSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).findRelatedBooksSettings();
  }

  /**
   * Returns the object with the settings used for calls to addTag.
   */
  public UnaryCallSettings<AddTagRequest, AddTagResponse> addTagSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).addTagSettings();
  }

  /**
   * Returns the object with the settings used for calls to getBigBook.
   */
  public UnaryCallSettings<GetBookRequest, Operation> getBigBookSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).getBigBookSettings();
  }

  /**
   * Returns the object with the settings used for calls to getBigBook.
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public OperationCallSettings<GetBookRequest, Book, GetBigBookMetadata> getBigBookOperationSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).getBigBookOperationSettings();
  }

  /**
   * Returns the object with the settings used for calls to getBigNothing.
   */
  public UnaryCallSettings<GetBookRequest, Operation> getBigNothingSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).getBigNothingSettings();
  }

  /**
   * Returns the object with the settings used for calls to getBigNothing.
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public OperationCallSettings<GetBookRequest, Empty, GetBigBookMetadata> getBigNothingOperationSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).getBigNothingOperationSettings();
  }

  /**
   * Returns the object with the settings used for calls to moveBooks.
   */
  public UnaryCallSettings<MoveBooksRequest, MoveBooksResponse> moveBooksSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).moveBooksSettings();
  }

  /**
   * Returns the object with the settings used for calls to archiveBooks.
   */
  public UnaryCallSettings<ArchiveBooksRequest, ArchiveBooksResponse> archiveBooksSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).archiveBooksSettings();
  }

  /**
   * Returns the object with the settings used for calls to longRunningArchiveBooks.
   */
  public UnaryCallSettings<ArchiveBooksRequest, Operation> longRunningArchiveBooksSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).longRunningArchiveBooksSettings();
  }

  /**
   * Returns the object with the settings used for calls to longRunningArchiveBooks.
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public OperationCallSettings<ArchiveBooksRequest, ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksOperationSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).longRunningArchiveBooksOperationSettings();
  }

  /**
   * Returns the object with the settings used for calls to saveBook.
   */
  public UnaryCallSettings<Book, Empty> saveBookSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).saveBookSettings();
  }

  /**
   * Returns the object with the settings used for calls to testOptionalRequiredFlatteningParams.
   */
  public UnaryCallSettings<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).testOptionalRequiredFlatteningParamsSettings();
  }

  /**
   * Returns the object with the settings used for calls to privateListShelves.
   */
  public UnaryCallSettings<ListShelvesRequest, Book> privateListShelvesSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).privateListShelvesSettings();
  }


  public static final LibraryServiceSettings create(LibraryServiceStubSettings stub) throws IOException {
    return new LibraryServiceSettings.Builder(stub.toBuilder()).build();
  }

  /**
   * Returns a builder for the default ExecutorProvider for this service.
   */
  public static InstantiatingExecutorProvider.Builder defaultExecutorProviderBuilder() {
    return LibraryServiceStubSettings.defaultExecutorProviderBuilder();
  }

  /**
   * Returns the default service endpoint.
   */
   public static String getDefaultEndpoint() {
     return LibraryServiceStubSettings.getDefaultEndpoint();
   }
  /**
   * Returns the default service port.
   */
  public static int getDefaultServicePort() {
    return LibraryServiceStubSettings.getDefaultServicePort();
  }


  /**
   * Returns the default service scopes.
   */
  public static List<String> getDefaultServiceScopes() {
    return LibraryServiceStubSettings.getDefaultServiceScopes();
  }


  /**
   * Returns a builder for the default credentials for this service.
   */
  public static GoogleCredentialsProvider.Builder defaultCredentialsProviderBuilder() {
    return LibraryServiceStubSettings.defaultCredentialsProviderBuilder();
  }

  /** Returns a builder for the default ChannelProvider for this service. */
  public static InstantiatingHttpJsonChannelProvider.Builder defaultHttpJsonTransportProviderBuilder() {
    return LibraryServiceStubSettings.defaultHttpJsonTransportProviderBuilder();
  }

  public static TransportChannelProvider defaultTransportChannelProvider() {
    return LibraryServiceStubSettings.defaultTransportChannelProvider();
  }

  @BetaApi("The surface for customizing headers is not stable yet and may change in the future.")
  public static ApiClientHeaderProvider.Builder defaultApiClientHeaderProviderBuilder() {
    return LibraryServiceStubSettings.defaultApiClientHeaderProviderBuilder();
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder() {
    return Builder.createDefault();
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder(ClientContext clientContext) {
    return new Builder(clientContext);
  }

  /**
   * Returns a builder containing all the values of this settings class.
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  protected LibraryServiceSettings(Builder settingsBuilder) throws IOException {
    super(settingsBuilder);
  }

  /**
   * Builder for LibraryServiceSettings.
   */
  public static class Builder extends ClientSettings.Builder<LibraryServiceSettings, Builder> {
    protected Builder() throws IOException {
      this((ClientContext) null);
    }

    protected Builder(ClientContext clientContext) {
      super(LibraryServiceStubSettings.newBuilder(clientContext));
    }

    private static Builder createDefault() {
      return new Builder(LibraryServiceStubSettings.newBuilder());
    }

    protected Builder(LibraryServiceSettings settings) {
      super(settings.getStubSettings().toBuilder());
    }

    protected Builder(LibraryServiceStubSettings.Builder stubSettings) {
      super(stubSettings);
    }


    public LibraryServiceStubSettings.Builder getStubSettingsBuilder() {
      return ((LibraryServiceStubSettings.Builder) getStubSettings());
    }

    // NEXT_MAJOR_VER: remove 'throws Exception'
    /**
     * Applies the given settings updater function to all of the unary API methods in this service.
     *
     * Note: This method does not support applying settings to streaming methods.
     */
    public Builder applyToAllUnaryMethods(ApiFunction<UnaryCallSettings.Builder<?, ?>, Void> settingsUpdater) throws Exception {
      super.applyToAllUnaryMethods(getStubSettingsBuilder().unaryMethodSettingsBuilders(), settingsUpdater);
      return this;
    }

    /**
     * Returns the builder for the settings used for calls to createShelf.
     */
    public UnaryCallSettings.Builder<CreateShelfRequest, Shelf> createShelfSettings() {
      return getStubSettingsBuilder().createShelfSettings();
    }

    /**
     * Returns the builder for the settings used for calls to getShelf.
     */
    public UnaryCallSettings.Builder<GetShelfRequest, Shelf> getShelfSettings() {
      return getStubSettingsBuilder().getShelfSettings();
    }

    /**
     * Returns the builder for the settings used for calls to listShelves.
     */
    public UnaryCallSettings.Builder<ListShelvesRequest, ListShelvesResponse> listShelvesSettings() {
      return getStubSettingsBuilder().listShelvesSettings();
    }

    /**
     * Returns the builder for the settings used for calls to listAggregatedShelves.
     */
    public PagedCallSettings.Builder<ListAggregatedShelvesRequest, ListAggregatedShelvesResponse, ListAggregatedShelvesPagedResponse> listAggregatedShelvesSettings() {
      return getStubSettingsBuilder().listAggregatedShelvesSettings();
    }

    /**
     * Returns the builder for the settings used for calls to deleteShelf.
     */
    public UnaryCallSettings.Builder<DeleteShelfRequest, Empty> deleteShelfSettings() {
      return getStubSettingsBuilder().deleteShelfSettings();
    }

    /**
     * Returns the builder for the settings used for calls to mergeShelves.
     */
    public UnaryCallSettings.Builder<MergeShelvesRequest, Shelf> mergeShelvesSettings() {
      return getStubSettingsBuilder().mergeShelvesSettings();
    }

    /**
     * Returns the builder for the settings used for calls to createBook.
     */
    public UnaryCallSettings.Builder<CreateBookRequest, Book> createBookSettings() {
      return getStubSettingsBuilder().createBookSettings();
    }

    /**
     * Returns the builder for the settings used for calls to publishSeries.
     */
    public UnaryCallSettings.Builder<PublishSeriesRequest, PublishSeriesResponse> publishSeriesSettings() {
      return getStubSettingsBuilder().publishSeriesSettings();
    }

    /**
     * Returns the builder for the settings used for calls to createInventory.
     */
    public UnaryCallSettings.Builder<CreateInventoryRequest, Inventory> createInventorySettings() {
      return getStubSettingsBuilder().createInventorySettings();
    }

    /**
     * Returns the builder for the settings used for calls to getBook.
     */
    public UnaryCallSettings.Builder<GetBookRequest, Book> getBookSettings() {
      return getStubSettingsBuilder().getBookSettings();
    }

    /**
     * Returns the builder for the settings used for calls to listBooks.
     */
    public PagedCallSettings.Builder<ListBooksRequest, ListBooksResponse, ListBooksPagedResponse> listBooksSettings() {
      return getStubSettingsBuilder().listBooksSettings();
    }

    /**
     * Returns the builder for the settings used for calls to deleteBook.
     */
    public UnaryCallSettings.Builder<DeleteBookRequest, Empty> deleteBookSettings() {
      return getStubSettingsBuilder().deleteBookSettings();
    }

    /**
     * Returns the builder for the settings used for calls to updateBook.
     */
    public UnaryCallSettings.Builder<UpdateBookRequest, Book> updateBookSettings() {
      return getStubSettingsBuilder().updateBookSettings();
    }

    /**
     * Returns the builder for the settings used for calls to moveBook.
     */
    public UnaryCallSettings.Builder<MoveBookRequest, Book> moveBookSettings() {
      return getStubSettingsBuilder().moveBookSettings();
    }

    /**
     * Returns the builder for the settings used for calls to listStrings.
     */
    public PagedCallSettings.Builder<ListStringsRequest, ListStringsResponse, ListStringsPagedResponse> listStringsSettings() {
      return getStubSettingsBuilder().listStringsSettings();
    }

    /**
     * Returns the builder for the settings used for calls to addComments.
     */
    public UnaryCallSettings.Builder<AddCommentsRequest, Empty> addCommentsSettings() {
      return getStubSettingsBuilder().addCommentsSettings();
    }

    /**
     * Returns the builder for the settings used for calls to getBookFromArchive.
     */
    public UnaryCallSettings.Builder<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveSettings() {
      return getStubSettingsBuilder().getBookFromArchiveSettings();
    }

    /**
     * Returns the builder for the settings used for calls to getBookFromAnywhere.
     */
    public UnaryCallSettings.Builder<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereSettings() {
      return getStubSettingsBuilder().getBookFromAnywhereSettings();
    }

    /**
     * Returns the builder for the settings used for calls to getBookFromAbsolutelyAnywhere.
     */
    public UnaryCallSettings.Builder<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere> getBookFromAbsolutelyAnywhereSettings() {
      return getStubSettingsBuilder().getBookFromAbsolutelyAnywhereSettings();
    }

    /**
     * Returns the builder for the settings used for calls to updateBookIndex.
     */
    public UnaryCallSettings.Builder<UpdateBookIndexRequest, Empty> updateBookIndexSettings() {
      return getStubSettingsBuilder().updateBookIndexSettings();
    }

    /**
     * Returns the builder for the settings used for calls to findRelatedBooks.
     */
    public PagedCallSettings.Builder<FindRelatedBooksRequest, FindRelatedBooksResponse, FindRelatedBooksPagedResponse> findRelatedBooksSettings() {
      return getStubSettingsBuilder().findRelatedBooksSettings();
    }

    /**
     * Returns the builder for the settings used for calls to addTag.
     */
    public UnaryCallSettings.Builder<AddTagRequest, AddTagResponse> addTagSettings() {
      return getStubSettingsBuilder().addTagSettings();
    }

    /**
     * Returns the builder for the settings used for calls to getBigBook.
     */
    public UnaryCallSettings.Builder<GetBookRequest, Operation> getBigBookSettings() {
      return getStubSettingsBuilder().getBigBookSettings();
    }

    /**
     * Returns the builder for the settings used for calls to getBigBook.
     */
    @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
    public OperationCallSettings.Builder<GetBookRequest, Book, GetBigBookMetadata> getBigBookOperationSettings() {
      return getStubSettingsBuilder().getBigBookOperationSettings();
    }

    /**
     * Returns the builder for the settings used for calls to getBigNothing.
     */
    public UnaryCallSettings.Builder<GetBookRequest, Operation> getBigNothingSettings() {
      return getStubSettingsBuilder().getBigNothingSettings();
    }

    /**
     * Returns the builder for the settings used for calls to getBigNothing.
     */
    @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
    public OperationCallSettings.Builder<GetBookRequest, Empty, GetBigBookMetadata> getBigNothingOperationSettings() {
      return getStubSettingsBuilder().getBigNothingOperationSettings();
    }

    /**
     * Returns the builder for the settings used for calls to moveBooks.
     */
    public UnaryCallSettings.Builder<MoveBooksRequest, MoveBooksResponse> moveBooksSettings() {
      return getStubSettingsBuilder().moveBooksSettings();
    }

    /**
     * Returns the builder for the settings used for calls to archiveBooks.
     */
    public UnaryCallSettings.Builder<ArchiveBooksRequest, ArchiveBooksResponse> archiveBooksSettings() {
      return getStubSettingsBuilder().archiveBooksSettings();
    }

    /**
     * Returns the builder for the settings used for calls to longRunningArchiveBooks.
     */
    public UnaryCallSettings.Builder<ArchiveBooksRequest, Operation> longRunningArchiveBooksSettings() {
      return getStubSettingsBuilder().longRunningArchiveBooksSettings();
    }

    /**
     * Returns the builder for the settings used for calls to longRunningArchiveBooks.
     */
    @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
    public OperationCallSettings.Builder<ArchiveBooksRequest, ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksOperationSettings() {
      return getStubSettingsBuilder().longRunningArchiveBooksOperationSettings();
    }

    /**
     * Returns the builder for the settings used for calls to saveBook.
     */
    public UnaryCallSettings.Builder<Book, Empty> saveBookSettings() {
      return getStubSettingsBuilder().saveBookSettings();
    }

    /**
     * Returns the builder for the settings used for calls to testOptionalRequiredFlatteningParams.
     */
    public UnaryCallSettings.Builder<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsSettings() {
      return getStubSettingsBuilder().testOptionalRequiredFlatteningParamsSettings();
    }

    /**
     * Returns the builder for the settings used for calls to privateListShelves.
     */
    public UnaryCallSettings.Builder<ListShelvesRequest, Book> privateListShelvesSettings() {
      return getStubSettingsBuilder().privateListShelvesSettings();
    }

    @Override
    public LibraryServiceSettings build() throws IOException {
      return new LibraryServiceSettings(this);
    }
  }
}
============== file: src/main/java/com/google/example/library/v1/MyProtoClient.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1;

import com.google.api.core.ApiFunction;
import com.google.api.core.ApiFuture;
import com.google.api.core.ApiFutures;
import com.google.api.core.BetaApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.paging.AbstractFixedSizeCollection;
import com.google.api.gax.paging.AbstractPage;
import com.google.api.gax.paging.AbstractPagedListResponse;
import com.google.api.gax.paging.FixedSizeCollection;
import com.google.api.gax.paging.Page;
import com.google.api.gax.rpc.ApiExceptions;
import com.google.api.gax.rpc.PageContext;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.api.pathtemplate.PathTemplate;
import com.google.common.base.Function;
import com.google.common.collect.Iterables;
import com.google.common.util.concurrent.MoreExecutors;
import com.google.example.library.v1.stub.MyProtoStub;
import com.google.example.library.v1.stub.MyProtoStubSettings;
import com.google.protos.google.example.library.v1.AnotherService.MethodRequest;
import com.google.protos.google.example.library.v1.AnotherService.MethodResponse;
import com.google.protos.google.example.library.v1.AnotherService.Namespace;
import java.io.Closeable;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND SERVICE
/**
 * Service Description:
 *
 * <p>This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * <pre>
 * <code>
 * try (MyProtoClient myProtoClient = MyProtoClient.create()) {
 *   MethodRequest request = MethodRequest.newBuilder().build();
 *   MethodResponse response = myProtoClient.myMethod(request);
 * }
 * </code>
 * </pre>
 *
 * <p>Note: close() needs to be called on the myProtoClient object to clean up resources such
 * as threads. In the example above, try-with-resources is used, which automatically calls
 * close().
 *
 * <p>The surface of this class includes several types of Java methods for each of the API's methods:
 *
 * <ol>
 * <li> A "flattened" method. With this type of method, the fields of the request type have been
 * converted into function parameters. It may be the case that not all fields are available
 * as parameters, and not every API method will have a flattened method entry point.
 * <li> A "request object" method. This type of method only takes one parameter, a request
 * object, which must be constructed before the call. Not every API method will have a request
 * object method.
 * <li> A "callable" method. This type of method takes no parameters and returns an immutable
 * API callable object, which can be used to initiate calls to the service.
 * </ol>
 *
 * <p>See the individual methods for example code.
 *
 * <p>Many parameters require resource names to be formatted in a particular way. To assist
 * with these names, this class includes a format method for each type of name, and additionally
 * a parse method to extract the individual identifiers contained within names that are
 * returned.
 *
 * <p>This class can be customized by passing in a custom instance of MyProtoSettings to
 * create(). For example:
 *
 * To customize credentials:
 *
 * <pre>
 * <code>
 * MyProtoSettings myProtoSettings =
 *     MyProtoSettings.newBuilder()
 *         .setCredentialsProvider(FixedCredentialsProvider.create(myCredentials))
 *         .build();
 * MyProtoClient myProtoClient =
 *     MyProtoClient.create(myProtoSettings);
 * </code>
 * </pre>
 *
 * To customize the endpoint:
 *
 * <pre>
 * <code>
 * MyProtoSettings myProtoSettings =
 *     MyProtoSettings.newBuilder().setEndpoint(myEndpoint).build();
 * MyProtoClient myProtoClient =
 *     MyProtoClient.create(myProtoSettings);
 * </code>
 * </pre>
 */
@Generated("by gapic-generator")
@BetaApi
public class MyProtoClient implements BackgroundResource {
  private final MyProtoSettings settings;
  private final MyProtoStub stub;



  /**
   * Constructs an instance of MyProtoClient with default settings.
   */
  public static final MyProtoClient create() throws IOException {
    return create(MyProtoSettings.newBuilder().build());
  }

  /**
   * Constructs an instance of MyProtoClient, using the given settings.
   * The channels are created based on the settings passed in, or defaults for any
   * settings that are not set.
   */
  public static final MyProtoClient create(MyProtoSettings settings) throws IOException {
    return new MyProtoClient(settings);
  }

  /**
   * Constructs an instance of MyProtoClient, using the given stub for making calls. This is for
   * advanced usage - prefer to use MyProtoSettings}.
   */
  @BetaApi("A restructuring of stub classes is planned, so this may break in the future")
  public static final MyProtoClient create(MyProtoStub stub) {
    return new MyProtoClient(stub);
  }

  /**
   * Constructs an instance of MyProtoClient, using the given settings.
   * This is protected so that it is easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected MyProtoClient(MyProtoSettings settings) throws IOException {
    this.settings = settings;
    this.stub = ((MyProtoStubSettings) settings.getStubSettings()).createStub();
  }

  @BetaApi("A restructuring of stub classes is planned, so this may break in the future")
  protected MyProtoClient(MyProtoStub stub) {
    this.settings = null;
    this.stub = stub;
  }

  public final MyProtoSettings getSettings() {
    return settings;
  }

  @BetaApi("A restructuring of stub classes is planned, so this may break in the future")
  public MyProtoStub getStub() {
    return stub;
  }


  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (MyProtoClient myProtoClient = MyProtoClient.create()) {
   *   MethodRequest request = MethodRequest.newBuilder().build();
   *   MethodResponse response = myProtoClient.myMethod(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MethodResponse myMethod(MethodRequest request) {
    return myMethodCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (MyProtoClient myProtoClient = MyProtoClient.create()) {
   *   MethodRequest request = MethodRequest.newBuilder().build();
   *   ApiFuture&lt;MethodResponse&gt; future = myProtoClient.myMethodCallable().futureCall(request);
   *   // Do something
   *   MethodResponse response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<MethodRequest, MethodResponse> myMethodCallable() {
    return stub.myMethodCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Define a service with a reserved name
   *
   * Sample code:
   * <pre><code>
   * try (MyProtoClient myProtoClient = MyProtoClient.create()) {
   *   MethodRequest request = MethodRequest.newBuilder().build();
   *   Namespace response = myProtoClient.getNamespace(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Namespace getNamespace(MethodRequest request) {
    return getNamespaceCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Define a service with a reserved name
   *
   * Sample code:
   * <pre><code>
   * try (MyProtoClient myProtoClient = MyProtoClient.create()) {
   *   MethodRequest request = MethodRequest.newBuilder().build();
   *   ApiFuture&lt;Namespace&gt; future = myProtoClient.getNamespaceCallable().futureCall(request);
   *   // Do something
   *   Namespace response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<MethodRequest, Namespace> getNamespaceCallable() {
    return stub.getNamespaceCallable();
  }

  @Override
  public final void close() {
    stub.close();
  }

  @Override
  public void shutdown() {
    stub.shutdown();
  }

  @Override
  public boolean isShutdown() {
    return stub.isShutdown();
  }

  @Override
  public boolean isTerminated() {
    return stub.isTerminated();
  }

  @Override
  public void shutdownNow() {
    stub.shutdownNow();
  }

  @Override
  public boolean awaitTermination(long duration, TimeUnit unit) throws InterruptedException {
    return stub.awaitTermination(duration, unit);
  }


}
============== file: src/main/java/com/google/example/library/v1/MyProtoSettings.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1;

import com.google.api.core.ApiFunction;
import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.core.GaxProperties;
import com.google.api.gax.core.GoogleCredentialsProvider;
import com.google.api.gax.core.InstantiatingExecutorProvider;
import com.google.api.gax.httpjson.GaxHttpJsonProperties;
import com.google.api.gax.httpjson.HttpJsonTransportChannel;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.ApiClientHeaderProvider;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.ClientSettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.StatusCode;
import com.google.api.gax.rpc.StubSettings;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.api.gax.rpc.UnaryCallSettings;
import com.google.auth.Credentials;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.google.example.library.v1.stub.MyProtoStubSettings;
import com.google.protos.google.example.library.v1.AnotherService.MethodRequest;
import com.google.protos.google.example.library.v1.AnotherService.MethodResponse;
import com.google.protos.google.example.library.v1.AnotherService.Namespace;
import com.google.protos.google.example.library.v1.MyProtoGrpc;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.ScheduledExecutorService;
import javax.annotation.Generated;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * Settings class to configure an instance of {@link MyProtoClient}.
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 * <li>The default service address (library-example.googleapis.com) and default port (1234)
 * are used.
 * <li>Credentials are acquired automatically through Application Default Credentials.
 * <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 *
 * <p>The builder of this class is recursive, so contained classes are themselves builders.
 * When build() is called, the tree of builders is called to create the complete settings
 * object.
 *
 * For example, to set the total timeout of myMethod to 30 seconds:
 *
 * <pre>
 * <code>
 * MyProtoSettings.Builder myProtoSettingsBuilder =
 *     MyProtoSettings.newBuilder();
 * myProtoSettingsBuilder
 *     .myMethodSettings()
 *     .setRetrySettings(
 *         myProtoSettingsBuilder.myMethodSettings().getRetrySettings().toBuilder()
 *             .setTotalTimeout(Duration.ofSeconds(30))
 *             .build());
 * MyProtoSettings myProtoSettings = myProtoSettingsBuilder.build();
 * </code>
 * </pre>
 */
@Generated("by gapic-generator")
@BetaApi
public class MyProtoSettings extends ClientSettings<MyProtoSettings> {
  /**
   * Returns the object with the settings used for calls to myMethod.
   */
  public UnaryCallSettings<MethodRequest, MethodResponse> myMethodSettings() {
    return ((MyProtoStubSettings) getStubSettings()).myMethodSettings();
  }

  /**
   * Returns the object with the settings used for calls to getNamespace.
   */
  public UnaryCallSettings<MethodRequest, Namespace> getNamespaceSettings() {
    return ((MyProtoStubSettings) getStubSettings()).getNamespaceSettings();
  }


  public static final MyProtoSettings create(MyProtoStubSettings stub) throws IOException {
    return new MyProtoSettings.Builder(stub.toBuilder()).build();
  }

  /**
   * Returns a builder for the default ExecutorProvider for this service.
   */
  public static InstantiatingExecutorProvider.Builder defaultExecutorProviderBuilder() {
    return MyProtoStubSettings.defaultExecutorProviderBuilder();
  }

  /**
   * Returns the default service endpoint.
   */
   public static String getDefaultEndpoint() {
     return MyProtoStubSettings.getDefaultEndpoint();
   }
  /**
   * Returns the default service port.
   */
  public static int getDefaultServicePort() {
    return MyProtoStubSettings.getDefaultServicePort();
  }


  /**
   * Returns the default service scopes.
   */
  public static List<String> getDefaultServiceScopes() {
    return MyProtoStubSettings.getDefaultServiceScopes();
  }


  /**
   * Returns a builder for the default credentials for this service.
   */
  public static GoogleCredentialsProvider.Builder defaultCredentialsProviderBuilder() {
    return MyProtoStubSettings.defaultCredentialsProviderBuilder();
  }

  /** Returns a builder for the default ChannelProvider for this service. */
  public static InstantiatingHttpJsonChannelProvider.Builder defaultHttpJsonTransportProviderBuilder() {
    return MyProtoStubSettings.defaultHttpJsonTransportProviderBuilder();
  }

  public static TransportChannelProvider defaultTransportChannelProvider() {
    return MyProtoStubSettings.defaultTransportChannelProvider();
  }

  @BetaApi("The surface for customizing headers is not stable yet and may change in the future.")
  public static ApiClientHeaderProvider.Builder defaultApiClientHeaderProviderBuilder() {
    return MyProtoStubSettings.defaultApiClientHeaderProviderBuilder();
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder() {
    return Builder.createDefault();
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder(ClientContext clientContext) {
    return new Builder(clientContext);
  }

  /**
   * Returns a builder containing all the values of this settings class.
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  protected MyProtoSettings(Builder settingsBuilder) throws IOException {
    super(settingsBuilder);
  }

  /**
   * Builder for MyProtoSettings.
   */
  public static class Builder extends ClientSettings.Builder<MyProtoSettings, Builder> {
    protected Builder() throws IOException {
      this((ClientContext) null);
    }

    protected Builder(ClientContext clientContext) {
      super(MyProtoStubSettings.newBuilder(clientContext));
    }

    private static Builder createDefault() {
      return new Builder(MyProtoStubSettings.newBuilder());
    }

    protected Builder(MyProtoSettings settings) {
      super(settings.getStubSettings().toBuilder());
    }

    protected Builder(MyProtoStubSettings.Builder stubSettings) {
      super(stubSettings);
    }


    public MyProtoStubSettings.Builder getStubSettingsBuilder() {
      return ((MyProtoStubSettings.Builder) getStubSettings());
    }

    // NEXT_MAJOR_VER: remove 'throws Exception'
    /**
     * Applies the given settings updater function to all of the unary API methods in this service.
     *
     * Note: This method does not support applying settings to streaming methods.
     */
    public Builder applyToAllUnaryMethods(ApiFunction<UnaryCallSettings.Builder<?, ?>, Void> settingsUpdater) throws Exception {
      super.applyToAllUnaryMethods(getStubSettingsBuilder().unaryMethodSettingsBuilders(), settingsUpdater);
      return this;
    }

    /**
     * Returns the builder for the settings used for calls to myMethod.
     */
    public UnaryCallSettings.Builder<MethodRequest, MethodResponse> myMethodSettings() {
      return getStubSettingsBuilder().myMethodSettings();
    }

    /**
     * Returns the builder for the settings used for calls to getNamespace.
     */
    public UnaryCallSettings.Builder<MethodRequest, Namespace> getNamespaceSettings() {
      return getStubSettingsBuilder().getNamespaceSettings();
    }

    @Override
    public MyProtoSettings build() throws IOException {
      return new MyProtoSettings(this);
    }
  }
}
============== file: src/main/java/com/google/example/library/v1/package-info.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A client to Google Example Library API.
 *
 * The interfaces provided are listed below, along with usage samples.
 *
 * ====================
 * LibraryServiceClient
 * ====================
 *
 * Service Description: This API represents a simple digital library.  It lets you manage Shelf
 * resources and Book resources in the library. It defines the following
 * resource model:
 *
 * - The API has a collection of [Shelf][google.example.library.v1.Shelf]
 *   resources, named ``bookShelves/&#42;``
 *
 * - Each Shelf has a collection of [Book][google.example.library.v1.Book]
 *   resources, named `bookShelves/&#42;/books/&#42;`
 *
 * Check out [cloud docs!](/library/example/link).
 * This is [not a cloud link](http://www.google.com).
 *
 * Service comment may include special characters: &lt;&gt;&amp;"`'{@literal @}.
 *
 * Sample for LibraryServiceClient:
 * <pre>
 * <code>
 * try (LibraryServiceClient libraryServiceClient = LibraryServiceClient.create()) {
 *   Shelf shelf = Shelf.newBuilder().build();
 *   Shelf response = libraryServiceClient.createShelf(shelf);
 * }
 * </code>
 * </pre>
 *
 * =============
 * MyProtoClient
 * =============
 *
 * Service Description:
 *
 * Sample for MyProtoClient:
 * <pre>
 * <code>
 * try (MyProtoClient myProtoClient = MyProtoClient.create()) {
 *   MethodRequest request = MethodRequest.newBuilder().build();
 *   MethodResponse response = myProtoClient.myMethod(request);
 * }
 * </code>
 * </pre>
 *
 */
@Generated("by gapic-generator")
package com.google.example.library.v1;

import  javax.annotation.Generated;
============== file: src/main/java/com/google/example/library/v1/stub/HttpJsonLibraryServiceCallableFactory.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1.stub;

import com.google.api.client.http.HttpMethods;
import com.google.api.core.BetaApi;
import com.google.api.core.InternalApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.core.BackgroundResourceAggregation;
import com.google.api.gax.httpjson.ApiMessage;
import com.google.api.gax.httpjson.ApiMethodDescriptor;
import com.google.api.gax.httpjson.FieldsExtractor;
import com.google.api.gax.httpjson.HttpJsonCallSettings;
import com.google.api.gax.httpjson.HttpJsonCallableFactory;
import com.google.api.gax.httpjson.HttpJsonStubCallableFactory;
import com.google.api.gax.httpjson.ProtoMessageRequestFormatter;
import com.google.api.gax.httpjson.ProtoMessageResponseParser;
import com.google.api.gax.httpjson.ProtoRestSerializer;
import com.google.api.gax.longrunning.OperationFuture;
import com.google.api.gax.longrunning.OperationSnapshot;
import com.google.api.gax.rpc.BatchingCallSettings;
import com.google.api.gax.rpc.BidiStreamingCallable;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.ClientStreamingCallable;
import com.google.api.gax.rpc.OperationCallSettings;
import com.google.api.gax.rpc.OperationCallable;
import com.google.api.gax.rpc.PagedCallSettings;
import com.google.api.gax.rpc.RequestParamsExtractor;
import com.google.api.gax.rpc.ServerStreamingCallSettings;
import com.google.api.gax.rpc.ServerStreamingCallable;
import com.google.api.gax.rpc.StreamingCallSettings;
import com.google.api.gax.rpc.UnaryCallSettings;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.api.pathtemplate.PathTemplate;
import com.google.api.resourcenames.ResourceName;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Sets;
import com.google.example.library.v1.AddCommentsRequest;
import com.google.example.library.v1.ArchiveBooksMetadata;
import com.google.example.library.v1.ArchiveBooksRequest;
import com.google.example.library.v1.ArchiveBooksResponse;
import com.google.example.library.v1.ArchiveName;
import com.google.example.library.v1.ArchivedBookName;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookFromAnywhere;
import com.google.example.library.v1.BookFromArchive;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.Comment;
import com.google.example.library.v1.CreateBookRequest;
import com.google.example.library.v1.CreateInventoryRequest;
import com.google.example.library.v1.CreateShelfRequest;
import com.google.example.library.v1.DeleteBookRequest;
import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.FindRelatedBooksRequest;
import com.google.example.library.v1.FindRelatedBooksResponse;
import com.google.example.library.v1.FolderName;
import com.google.example.library.v1.GetBigBookMetadata;
import com.google.example.library.v1.GetBookFromAbsolutelyAnywhereRequest;
import com.google.example.library.v1.GetBookFromAnywhereRequest;
import com.google.example.library.v1.GetBookFromArchiveRequest;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.GetShelfRequest;
import com.google.example.library.v1.Inventory;
import com.google.example.library.v1.InventoryName;
import static com.google.example.library.v1.LibraryServiceClient.FindRelatedBooksPagedResponse;
import static com.google.example.library.v1.LibraryServiceClient.ListAggregatedShelvesPagedResponse;
import static com.google.example.library.v1.LibraryServiceClient.ListBooksPagedResponse;
import static com.google.example.library.v1.LibraryServiceClient.ListStringsPagedResponse;
import com.google.example.library.v1.LibraryServiceSettings;
import com.google.example.library.v1.ListAggregatedShelvesRequest;
import com.google.example.library.v1.ListAggregatedShelvesResponse;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.ListStringsRequest;
import com.google.example.library.v1.ListStringsResponse;
import com.google.example.library.v1.LocationName;
import com.google.example.library.v1.MergeShelvesRequest;
import com.google.example.library.v1.MoveBookRequest;
import com.google.example.library.v1.MoveBooksRequest;
import com.google.example.library.v1.MoveBooksResponse;
import com.google.example.library.v1.ProjectName;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.PublisherName;
import com.google.example.library.v1.SeriesUuid;
import com.google.example.library.v1.Shelf;
import com.google.example.library.v1.ShelfName;
import com.google.example.library.v1.SomeMessage;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest.InnerMessage;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsResponse;
import com.google.example.library.v1.UpdateBookIndexRequest;
import com.google.example.library.v1.UpdateBookRequest;
import com.google.longrunning.Operation;
import com.google.protobuf.Any;
import com.google.protobuf.BoolValue;
import com.google.protobuf.ByteString;
import com.google.protobuf.BytesValue;
import com.google.protobuf.DoubleValue;
import com.google.protobuf.Duration;
import com.google.protobuf.Empty;
import com.google.protobuf.FieldMask;
import com.google.protobuf.FloatValue;
import com.google.protobuf.Int32Value;
import com.google.protobuf.Int64Value;
import com.google.protobuf.ListValue;
import com.google.protobuf.StringValue;
import com.google.protobuf.Struct;
import com.google.protobuf.Timestamp;
import com.google.protobuf.UInt32Value;
import com.google.protobuf.UInt64Value;
import com.google.protobuf.Value;
import com.google.tagger.v1.TaggerProto.AddTagRequest;
import com.google.tagger.v1.TaggerProto.AddTagResponse;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;
import javax.annotation.Nullable;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * REST callable factory implementation for Google Example Library API.
 *
 * <p>This class is for advanced usage.
 */
@Generated("by gapic-generator")
@BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
public class HttpJsonLibraryServiceCallableFactory implements HttpJsonStubCallableFactory<
    ApiMessage, BackgroundResource> {
  @Override
  public <RequestT, ResponseT> UnaryCallable<RequestT, ResponseT> createUnaryCallable(
      HttpJsonCallSettings<RequestT, ResponseT> httpJsonCallSettings,
      UnaryCallSettings<RequestT, ResponseT> callSettings,
      ClientContext clientContext) {
    return HttpJsonCallableFactory.createUnaryCallable(httpJsonCallSettings, callSettings, clientContext);
  }


  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  @Override
  @Nullable
  public <RequestT, ResponseT, MetadataT> OperationCallable<RequestT, ResponseT, MetadataT> createOperationCallable(
      HttpJsonCallSettings<RequestT, ApiMessage> httpJsonCallSettings,
      OperationCallSettings<RequestT, ResponseT, MetadataT> operationCallSettings,
      ClientContext clientContext, BackgroundResource operationsStub) {
      return null;
  }

  @Override
  public <RequestT, ResponseT, PagedListResponseT>
      UnaryCallable<RequestT, PagedListResponseT> createPagedCallable(
      HttpJsonCallSettings<RequestT, ResponseT> httpJsonCallSettings,
      PagedCallSettings<RequestT, ResponseT, PagedListResponseT> pagedCallSettings,
      ClientContext clientContext) {
    return HttpJsonCallableFactory.createPagedCallable(httpJsonCallSettings, pagedCallSettings, clientContext);
  }

  @Override
  public <RequestT, ResponseT> UnaryCallable<RequestT, ResponseT> createBatchingCallable(
      HttpJsonCallSettings<RequestT, ResponseT> httpJsonCallSettings,
      BatchingCallSettings<RequestT, ResponseT> batchingCallSettings,
      ClientContext clientContext) {
    return HttpJsonCallableFactory.createBatchingCallable(httpJsonCallSettings, batchingCallSettings, clientContext);
  }
}
============== file: src/main/java/com/google/example/library/v1/stub/HttpJsonLibraryServiceStub.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1.stub;

import com.google.api.client.http.HttpMethods;
import com.google.api.core.BetaApi;
import com.google.api.core.InternalApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.core.BackgroundResourceAggregation;
import com.google.api.gax.httpjson.ApiMethodDescriptor;
import com.google.api.gax.httpjson.FieldsExtractor;
import com.google.api.gax.httpjson.HttpJsonCallSettings;
import com.google.api.gax.httpjson.HttpJsonStubCallableFactory;
import com.google.api.gax.httpjson.ProtoMessageRequestFormatter;
import com.google.api.gax.httpjson.ProtoMessageResponseParser;
import com.google.api.gax.httpjson.ProtoRestSerializer;
import com.google.api.gax.longrunning.OperationFuture;
import com.google.api.gax.longrunning.OperationSnapshot;
import com.google.api.gax.rpc.BidiStreamingCallable;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.ClientStreamingCallable;
import com.google.api.gax.rpc.OperationCallable;
import com.google.api.gax.rpc.RequestParamsExtractor;
import com.google.api.gax.rpc.ServerStreamingCallable;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.api.pathtemplate.PathTemplate;
import com.google.api.resourcenames.ResourceName;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Sets;
import com.google.example.library.v1.AddCommentsRequest;
import com.google.example.library.v1.ArchiveBooksMetadata;
import com.google.example.library.v1.ArchiveBooksRequest;
import com.google.example.library.v1.ArchiveBooksResponse;
import com.google.example.library.v1.ArchiveName;
import com.google.example.library.v1.ArchivedBookName;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookFromAnywhere;
import com.google.example.library.v1.BookFromArchive;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.Comment;
import com.google.example.library.v1.CreateBookRequest;
import com.google.example.library.v1.CreateInventoryRequest;
import com.google.example.library.v1.CreateShelfRequest;
import com.google.example.library.v1.DeleteBookRequest;
import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.FindRelatedBooksRequest;
import com.google.example.library.v1.FindRelatedBooksResponse;
import com.google.example.library.v1.FolderName;
import com.google.example.library.v1.GetBigBookMetadata;
import com.google.example.library.v1.GetBookFromAbsolutelyAnywhereRequest;
import com.google.example.library.v1.GetBookFromAnywhereRequest;
import com.google.example.library.v1.GetBookFromArchiveRequest;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.GetShelfRequest;
import com.google.example.library.v1.Inventory;
import com.google.example.library.v1.InventoryName;
import static com.google.example.library.v1.LibraryServiceClient.FindRelatedBooksPagedResponse;
import static com.google.example.library.v1.LibraryServiceClient.ListAggregatedShelvesPagedResponse;
import static com.google.example.library.v1.LibraryServiceClient.ListBooksPagedResponse;
import static com.google.example.library.v1.LibraryServiceClient.ListStringsPagedResponse;
import com.google.example.library.v1.LibraryServiceSettings;
import com.google.example.library.v1.ListAggregatedShelvesRequest;
import com.google.example.library.v1.ListAggregatedShelvesResponse;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.ListStringsRequest;
import com.google.example.library.v1.ListStringsResponse;
import com.google.example.library.v1.LocationName;
import com.google.example.library.v1.MergeShelvesRequest;
import com.google.example.library.v1.MoveBookRequest;
import com.google.example.library.v1.MoveBooksRequest;
import com.google.example.library.v1.MoveBooksResponse;
import com.google.example.library.v1.ProjectName;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.PublisherName;
import com.google.example.library.v1.SeriesUuid;
import com.google.example.library.v1.Shelf;
import com.google.example.library.v1.ShelfName;
import com.google.example.library.v1.SomeMessage;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest.InnerMessage;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsResponse;
import com.google.example.library.v1.UpdateBookIndexRequest;
import com.google.example.library.v1.UpdateBookRequest;
import com.google.longrunning.Operation;
import com.google.protobuf.Any;
import com.google.protobuf.BoolValue;
import com.google.protobuf.ByteString;
import com.google.protobuf.BytesValue;
import com.google.protobuf.DoubleValue;
import com.google.protobuf.Duration;
import com.google.protobuf.Empty;
import com.google.protobuf.FieldMask;
import com.google.protobuf.FloatValue;
import com.google.protobuf.Int32Value;
import com.google.protobuf.Int64Value;
import com.google.protobuf.ListValue;
import com.google.protobuf.StringValue;
import com.google.protobuf.Struct;
import com.google.protobuf.Timestamp;
import com.google.protobuf.UInt32Value;
import com.google.protobuf.UInt64Value;
import com.google.protobuf.Value;
import com.google.tagger.v1.TaggerProto.AddTagRequest;
import com.google.tagger.v1.TaggerProto.AddTagResponse;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * REST stub implementation for Google Example Library API.
 *
 * <p>This class is for advanced usage and reflects the underlying API directly.
 */
@Generated("by gapic-generator")
@BetaApi("A restructuring of stub classes is planned, so this may break in the future")
public class HttpJsonLibraryServiceStub extends LibraryServiceStub {

  @InternalApi
  public static final ApiMethodDescriptor<CreateShelfRequest, Shelf> createShelfMethodDescriptor =
      ApiMethodDescriptor.<CreateShelfRequest, Shelf>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.CreateShelf")
          .setHttpMethod(HttpMethods.POST)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<CreateShelfRequest>newBuilder()
                  .setPath(
                      "/v1/bookShelves",
                      new FieldsExtractor<CreateShelfRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(CreateShelfRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<CreateShelfRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<CreateShelfRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(CreateShelfRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<CreateShelfRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<CreateShelfRequest, String>() {
                        @Override
                        public String extract(CreateShelfRequest request) {
                          return ProtoRestSerializer.create().toBody("shelf", request.getShelf());
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<Shelf>newBuilder()
                  .setDefaultInstance(Shelf.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<GetShelfRequest, Shelf> getShelfMethodDescriptor =
      ApiMethodDescriptor.<GetShelfRequest, Shelf>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.GetShelf")
          .setHttpMethod(HttpMethods.GET)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<GetShelfRequest>newBuilder()
                  .setPath(
                      "/v1/{name=bookShelves/*}",
                      new FieldsExtractor<GetShelfRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(GetShelfRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<GetShelfRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putPathParam(fields, "name", request.getName());
                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<GetShelfRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(GetShelfRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<GetShelfRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putQueryParam(fields, "message", request.getMessage());
                          serializer.putQueryParam(fields, "stringBuilder", request.getStringBuilder());
                          serializer.putQueryParam(fields, "options", request.getOptions());
                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<GetShelfRequest, String>() {
                        @Override
                        public String extract(GetShelfRequest request) {
                          return "";
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<Shelf>newBuilder()
                  .setDefaultInstance(Shelf.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<ListShelvesRequest, ListShelvesResponse> listShelvesMethodDescriptor =
      ApiMethodDescriptor.<ListShelvesRequest, ListShelvesResponse>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.ListShelves")
          .setHttpMethod(HttpMethods.GET)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<ListShelvesRequest>newBuilder()
                  .setPath(
                      "/v1/bookShelves",
                      new FieldsExtractor<ListShelvesRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(ListShelvesRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<ListShelvesRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<ListShelvesRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(ListShelvesRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<ListShelvesRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putQueryParam(fields, "pageToken", request.getPageToken());
                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<ListShelvesRequest, String>() {
                        @Override
                        public String extract(ListShelvesRequest request) {
                          return "";
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<ListShelvesResponse>newBuilder()
                  .setDefaultInstance(ListShelvesResponse.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<ListAggregatedShelvesRequest, ListAggregatedShelvesResponse> listAggregatedShelvesMethodDescriptor =
      ApiMethodDescriptor.<ListAggregatedShelvesRequest, ListAggregatedShelvesResponse>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.ListAggregatedShelves")
          .setHttpMethod(HttpMethods.GET)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<ListAggregatedShelvesRequest>newBuilder()
                  .setPath(
                      "/v1/bookAggregatedShelves",
                      new FieldsExtractor<ListAggregatedShelvesRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(ListAggregatedShelvesRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<ListAggregatedShelvesRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<ListAggregatedShelvesRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(ListAggregatedShelvesRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<ListAggregatedShelvesRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putQueryParam(fields, "maxResults", request.getMaxResults());
                          serializer.putQueryParam(fields, "pageToken", request.getPageToken());
                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<ListAggregatedShelvesRequest, String>() {
                        @Override
                        public String extract(ListAggregatedShelvesRequest request) {
                          return "";
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<ListAggregatedShelvesResponse>newBuilder()
                  .setDefaultInstance(ListAggregatedShelvesResponse.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<DeleteShelfRequest, Empty> deleteShelfMethodDescriptor =
      ApiMethodDescriptor.<DeleteShelfRequest, Empty>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.DeleteShelf")
          .setHttpMethod(HttpMethods.DELETE)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<DeleteShelfRequest>newBuilder()
                  .setPath(
                      "/v1/bookShelves/{name}",
                      new FieldsExtractor<DeleteShelfRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(DeleteShelfRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<DeleteShelfRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putPathParam(fields, "name", request.getName());
                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<DeleteShelfRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(DeleteShelfRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<DeleteShelfRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<DeleteShelfRequest, String>() {
                        @Override
                        public String extract(DeleteShelfRequest request) {
                          return "";
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<Empty>newBuilder()
                  .setDefaultInstance(Empty.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<MergeShelvesRequest, Shelf> mergeShelvesMethodDescriptor =
      ApiMethodDescriptor.<MergeShelvesRequest, Shelf>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.MergeShelves")
          .setHttpMethod(HttpMethods.POST)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<MergeShelvesRequest>newBuilder()
                  .setPath(
                      "/v1/{name=bookShelves/*}/merge",
                      new FieldsExtractor<MergeShelvesRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(MergeShelvesRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<MergeShelvesRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putPathParam(fields, "name", request.getName());
                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<MergeShelvesRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(MergeShelvesRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<MergeShelvesRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<MergeShelvesRequest, String>() {
                        @Override
                        public String extract(MergeShelvesRequest request) {
                          return ProtoRestSerializer.create().toBody("otherShelfName", request.getOtherShelfName());
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<Shelf>newBuilder()
                  .setDefaultInstance(Shelf.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<CreateBookRequest, Book> createBookMethodDescriptor =
      ApiMethodDescriptor.<CreateBookRequest, Book>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.CreateBook")
          .setHttpMethod(HttpMethods.POST)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<CreateBookRequest>newBuilder()
                  .setPath(
                      "/v1/{name=bookShelves/*}/books",
                      new FieldsExtractor<CreateBookRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(CreateBookRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<CreateBookRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putPathParam(fields, "name", request.getName());
                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<CreateBookRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(CreateBookRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<CreateBookRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<CreateBookRequest, String>() {
                        @Override
                        public String extract(CreateBookRequest request) {
                          return ProtoRestSerializer.create().toBody("book", request.getBook());
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<Book>newBuilder()
                  .setDefaultInstance(Book.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<PublishSeriesRequest, PublishSeriesResponse> publishSeriesMethodDescriptor =
      ApiMethodDescriptor.<PublishSeriesRequest, PublishSeriesResponse>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.PublishSeries")
          .setHttpMethod(HttpMethods.POST)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<PublishSeriesRequest>newBuilder()
                  .setPath(
                      "/v1/publish",
                      new FieldsExtractor<PublishSeriesRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(PublishSeriesRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<PublishSeriesRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<PublishSeriesRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(PublishSeriesRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<PublishSeriesRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<PublishSeriesRequest, String>() {
                        @Override
                        public String extract(PublishSeriesRequest request) {
                          return ProtoRestSerializer.create().toBody("shelf", request.getShelf());
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<PublishSeriesResponse>newBuilder()
                  .setDefaultInstance(PublishSeriesResponse.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<CreateInventoryRequest, Inventory> createInventoryMethodDescriptor =
      ApiMethodDescriptor.<CreateInventoryRequest, Inventory>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.CreateInventory")
          .setHttpMethod(HttpMethods.POST)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<CreateInventoryRequest>newBuilder()
                  .setPath(
                      "/v1/{parent=projects/*/locations/*/publishers/*}",
                      new FieldsExtractor<CreateInventoryRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(CreateInventoryRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<CreateInventoryRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putPathParam(fields, "parent", request.getParent());
                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<CreateInventoryRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(CreateInventoryRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<CreateInventoryRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putQueryParam(fields, "asset", request.getAsset());
                          serializer.putQueryParam(fields, "parentAsset", request.getParentAsset());
                          serializer.putQueryParam(fields, "assets", request.getAssetsList());
                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<CreateInventoryRequest, String>() {
                        @Override
                        public String extract(CreateInventoryRequest request) {
                          return ProtoRestSerializer.create().toBody("inventory", request.getInventory());
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<Inventory>newBuilder()
                  .setDefaultInstance(Inventory.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<GetBookRequest, Book> getBookMethodDescriptor =
      ApiMethodDescriptor.<GetBookRequest, Book>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.GetBook")
          .setHttpMethod(HttpMethods.GET)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<GetBookRequest>newBuilder()
                  .setPath(
                      "/v1/{name=bookShelves/*/books/*}",
                      new FieldsExtractor<GetBookRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(GetBookRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<GetBookRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putPathParam(fields, "name", request.getName());
                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<GetBookRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(GetBookRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<GetBookRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<GetBookRequest, String>() {
                        @Override
                        public String extract(GetBookRequest request) {
                          return "";
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<Book>newBuilder()
                  .setDefaultInstance(Book.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<ListBooksRequest, ListBooksResponse> listBooksMethodDescriptor =
      ApiMethodDescriptor.<ListBooksRequest, ListBooksResponse>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.ListBooks")
          .setHttpMethod(HttpMethods.GET)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<ListBooksRequest>newBuilder()
                  .setPath(
                      "/v1/{name=bookShelves/*}/books",
                      new FieldsExtractor<ListBooksRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(ListBooksRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<ListBooksRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putPathParam(fields, "name", request.getName());
                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<ListBooksRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(ListBooksRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<ListBooksRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putQueryParam(fields, "pageSize", request.getPageSize());
                          serializer.putQueryParam(fields, "pageToken", request.getPageToken());
                          serializer.putQueryParam(fields, "filter", request.getFilter());
                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<ListBooksRequest, String>() {
                        @Override
                        public String extract(ListBooksRequest request) {
                          return "";
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<ListBooksResponse>newBuilder()
                  .setDefaultInstance(ListBooksResponse.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<DeleteBookRequest, Empty> deleteBookMethodDescriptor =
      ApiMethodDescriptor.<DeleteBookRequest, Empty>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.DeleteBook")
          .setHttpMethod(HttpMethods.DELETE)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<DeleteBookRequest>newBuilder()
                  .setPath(
                      "/v1/{name=bookShelves/*/books/*}",
                      new FieldsExtractor<DeleteBookRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(DeleteBookRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<DeleteBookRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putPathParam(fields, "name", request.getName());
                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<DeleteBookRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(DeleteBookRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<DeleteBookRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<DeleteBookRequest, String>() {
                        @Override
                        public String extract(DeleteBookRequest request) {
                          return "";
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<Empty>newBuilder()
                  .setDefaultInstance(Empty.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<UpdateBookRequest, Book> updateBookMethodDescriptor =
      ApiMethodDescriptor.<UpdateBookRequest, Book>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.UpdateBook")
          .setHttpMethod(HttpMethods.PUT)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<UpdateBookRequest>newBuilder()
                  .setPath(
                      "/v1/{name=bookShelves/*/books/*}",
                      new FieldsExtractor<UpdateBookRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(UpdateBookRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<UpdateBookRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putPathParam(fields, "name", request.getName());
                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<UpdateBookRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(UpdateBookRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<UpdateBookRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putQueryParam(fields, "optionalFoo", request.getOptionalFoo());
                          serializer.putQueryParam(fields, "updateMask", request.getUpdateMask());
                          serializer.putQueryParam(fields, "physicalMask", request.getPhysicalMask());
                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<UpdateBookRequest, String>() {
                        @Override
                        public String extract(UpdateBookRequest request) {
                          return ProtoRestSerializer.create().toBody("book", request.getBook());
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<Book>newBuilder()
                  .setDefaultInstance(Book.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<MoveBookRequest, Book> moveBookMethodDescriptor =
      ApiMethodDescriptor.<MoveBookRequest, Book>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.MoveBook")
          .setHttpMethod(HttpMethods.POST)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<MoveBookRequest>newBuilder()
                  .setPath(
                      "/v1/{name=bookShelves/*/books/*}/move",
                      new FieldsExtractor<MoveBookRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(MoveBookRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<MoveBookRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putPathParam(fields, "name", request.getName());
                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<MoveBookRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(MoveBookRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<MoveBookRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<MoveBookRequest, String>() {
                        @Override
                        public String extract(MoveBookRequest request) {
                          return ProtoRestSerializer.create().toBody("otherShelfName", request.getOtherShelfName());
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<Book>newBuilder()
                  .setDefaultInstance(Book.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<ListStringsRequest, ListStringsResponse> listStringsMethodDescriptor =
      ApiMethodDescriptor.<ListStringsRequest, ListStringsResponse>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.ListStrings")
          .setHttpMethod(HttpMethods.GET)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<ListStringsRequest>newBuilder()
                  .setPath(
                      "/v1/strings",
                      new FieldsExtractor<ListStringsRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(ListStringsRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<ListStringsRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<ListStringsRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(ListStringsRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<ListStringsRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putQueryParam(fields, "name", request.getName());
                          serializer.putQueryParam(fields, "pageSize", request.getPageSize());
                          serializer.putQueryParam(fields, "pageToken", request.getPageToken());
                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<ListStringsRequest, String>() {
                        @Override
                        public String extract(ListStringsRequest request) {
                          return "";
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<ListStringsResponse>newBuilder()
                  .setDefaultInstance(ListStringsResponse.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<AddCommentsRequest, Empty> addCommentsMethodDescriptor =
      ApiMethodDescriptor.<AddCommentsRequest, Empty>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.AddComments")
          .setHttpMethod(HttpMethods.POST)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<AddCommentsRequest>newBuilder()
                  .setPath(
                      "/v1/{name=bookShelves/*}/comments",
                      new FieldsExtractor<AddCommentsRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(AddCommentsRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<AddCommentsRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putPathParam(fields, "name", request.getName());
                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<AddCommentsRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(AddCommentsRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<AddCommentsRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<AddCommentsRequest, String>() {
                        @Override
                        public String extract(AddCommentsRequest request) {
                          return ProtoRestSerializer.create().toBody("comments", request.getCommentsList());
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<Empty>newBuilder()
                  .setDefaultInstance(Empty.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveMethodDescriptor =
      ApiMethodDescriptor.<GetBookFromArchiveRequest, BookFromArchive>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.GetBookFromArchive")
          .setHttpMethod(HttpMethods.GET)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<GetBookFromArchiveRequest>newBuilder()
                  .setPath(
                      "/v1/{name=archives/*/books/*}",
                      new FieldsExtractor<GetBookFromArchiveRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(GetBookFromArchiveRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<GetBookFromArchiveRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putPathParam(fields, "name", request.getName());
                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<GetBookFromArchiveRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(GetBookFromArchiveRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<GetBookFromArchiveRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putQueryParam(fields, "parent", request.getParent());
                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<GetBookFromArchiveRequest, String>() {
                        @Override
                        public String extract(GetBookFromArchiveRequest request) {
                          return "";
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<BookFromArchive>newBuilder()
                  .setDefaultInstance(BookFromArchive.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereMethodDescriptor =
      ApiMethodDescriptor.<GetBookFromAnywhereRequest, BookFromAnywhere>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.GetBookFromAnywhere")
          .setHttpMethod(HttpMethods.GET)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<GetBookFromAnywhereRequest>newBuilder()
                  .setPath(
                      "/v1/{name=archives/*/books/**}",
                      new FieldsExtractor<GetBookFromAnywhereRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(GetBookFromAnywhereRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<GetBookFromAnywhereRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putPathParam(fields, "name", request.getName());
                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<GetBookFromAnywhereRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(GetBookFromAnywhereRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<GetBookFromAnywhereRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putQueryParam(fields, "altBookName", request.getAltBookName());
                          serializer.putQueryParam(fields, "place", request.getPlace());
                          serializer.putQueryParam(fields, "folder", request.getFolder());
                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<GetBookFromAnywhereRequest, String>() {
                        @Override
                        public String extract(GetBookFromAnywhereRequest request) {
                          return "";
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<BookFromAnywhere>newBuilder()
                  .setDefaultInstance(BookFromAnywhere.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere> getBookFromAbsolutelyAnywhereMethodDescriptor =
      ApiMethodDescriptor.<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.GetBookFromAbsolutelyAnywhere")
          .setHttpMethod(HttpMethods.POST)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<GetBookFromAbsolutelyAnywhereRequest>newBuilder()
                  .setPath(
                      "/v1/{name=archives/*/books/*}",
                      new FieldsExtractor<GetBookFromAbsolutelyAnywhereRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(GetBookFromAbsolutelyAnywhereRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<GetBookFromAbsolutelyAnywhereRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putPathParam(fields, "name", request.getName());
                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<GetBookFromAbsolutelyAnywhereRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(GetBookFromAbsolutelyAnywhereRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<GetBookFromAbsolutelyAnywhereRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putQueryParam(fields, "altBookName", request.getAltBookName());
                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<GetBookFromAbsolutelyAnywhereRequest, String>() {
                        @Override
                        public String extract(GetBookFromAbsolutelyAnywhereRequest request) {
                          return "";
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<BookFromAnywhere>newBuilder()
                  .setDefaultInstance(BookFromAnywhere.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<UpdateBookIndexRequest, Empty> updateBookIndexMethodDescriptor =
      ApiMethodDescriptor.<UpdateBookIndexRequest, Empty>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.UpdateBookIndex")
          .setHttpMethod(HttpMethods.POST)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<UpdateBookIndexRequest>newBuilder()
                  .setPath(
                      "/v1/{name=bookShelves/*/books/*}/index",
                      new FieldsExtractor<UpdateBookIndexRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(UpdateBookIndexRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<UpdateBookIndexRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putPathParam(fields, "name", request.getName());
                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<UpdateBookIndexRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(UpdateBookIndexRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<UpdateBookIndexRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<UpdateBookIndexRequest, String>() {
                        @Override
                        public String extract(UpdateBookIndexRequest request) {
                          return ProtoRestSerializer.create().toBody("indexName", request.getIndexName());
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<Empty>newBuilder()
                  .setDefaultInstance(Empty.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<FindRelatedBooksRequest, FindRelatedBooksResponse> findRelatedBooksMethodDescriptor =
      ApiMethodDescriptor.<FindRelatedBooksRequest, FindRelatedBooksResponse>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.FindRelatedBooks")
          .setHttpMethod(HttpMethods.GET)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<FindRelatedBooksRequest>newBuilder()
                  .setPath(
                      "/v1/bookShelves",
                      new FieldsExtractor<FindRelatedBooksRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(FindRelatedBooksRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<FindRelatedBooksRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<FindRelatedBooksRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(FindRelatedBooksRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<FindRelatedBooksRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putQueryParam(fields, "names", request.getNamesList());
                          serializer.putQueryParam(fields, "shelves", request.getShelvesList());
                          serializer.putQueryParam(fields, "pageSize", request.getPageSize());
                          serializer.putQueryParam(fields, "pageToken", request.getPageToken());
                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<FindRelatedBooksRequest, String>() {
                        @Override
                        public String extract(FindRelatedBooksRequest request) {
                          return "";
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<FindRelatedBooksResponse>newBuilder()
                  .setDefaultInstance(FindRelatedBooksResponse.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<AddTagRequest, AddTagResponse> addTagMethodDescriptor =
      ApiMethodDescriptor.<AddTagRequest, AddTagResponse>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.AddTag")
          .setHttpMethod(HttpMethods.POST)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<AddTagRequest>newBuilder()
                  .setPath(
                      "/v1/{resource=bookShelves/*/books/*}/addTag",
                      new FieldsExtractor<AddTagRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(AddTagRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<AddTagRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putPathParam(fields, "resource", request.getResource());
                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<AddTagRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(AddTagRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<AddTagRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<AddTagRequest, String>() {
                        @Override
                        public String extract(AddTagRequest request) {
                          return ProtoRestSerializer.create().toBody("tag", request.getTag());
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<AddTagResponse>newBuilder()
                  .setDefaultInstance(AddTagResponse.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<GetBookRequest, Operation> getBigBookMethodDescriptor =
      ApiMethodDescriptor.<GetBookRequest, Operation>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.GetBigBook")
          .setHttpMethod(HttpMethods.GET)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<GetBookRequest>newBuilder()
                  .setPath(
                      "/v1/{name=bookShelves/*/books/*}/big",
                      new FieldsExtractor<GetBookRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(GetBookRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<GetBookRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putPathParam(fields, "name", request.getName());
                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<GetBookRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(GetBookRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<GetBookRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<GetBookRequest, String>() {
                        @Override
                        public String extract(GetBookRequest request) {
                          return "";
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<Operation>newBuilder()
                  .setDefaultInstance(Operation.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<GetBookRequest, Operation> getBigNothingMethodDescriptor =
      ApiMethodDescriptor.<GetBookRequest, Operation>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.GetBigNothing")
          .setHttpMethod(HttpMethods.GET)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<GetBookRequest>newBuilder()
                  .setPath(
                      "/v1/{name=bookShelves/*/books/*}/bignothing",
                      new FieldsExtractor<GetBookRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(GetBookRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<GetBookRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putPathParam(fields, "name", request.getName());
                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<GetBookRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(GetBookRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<GetBookRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<GetBookRequest, String>() {
                        @Override
                        public String extract(GetBookRequest request) {
                          return "";
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<Operation>newBuilder()
                  .setDefaultInstance(Operation.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<MoveBooksRequest, MoveBooksResponse> moveBooksMethodDescriptor =
      ApiMethodDescriptor.<MoveBooksRequest, MoveBooksResponse>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.MoveBooks")
          .setHttpMethod(HttpMethods.POST)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<MoveBooksRequest>newBuilder()
                  .setPath(
                      "/v1/{source=**}/move",
                      new FieldsExtractor<MoveBooksRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(MoveBooksRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<MoveBooksRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putPathParam(fields, "source", request.getSource());
                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<MoveBooksRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(MoveBooksRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<MoveBooksRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<MoveBooksRequest, String>() {
                        @Override
                        public String extract(MoveBooksRequest request) {
                          return ProtoRestSerializer.create().toBody("destination", request.getDestination());
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<MoveBooksResponse>newBuilder()
                  .setDefaultInstance(MoveBooksResponse.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<ArchiveBooksRequest, ArchiveBooksResponse> archiveBooksMethodDescriptor =
      ApiMethodDescriptor.<ArchiveBooksRequest, ArchiveBooksResponse>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.ArchiveBooks")
          .setHttpMethod(HttpMethods.POST)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<ArchiveBooksRequest>newBuilder()
                  .setPath(
                      "/v1/{source=**}/archive",
                      new FieldsExtractor<ArchiveBooksRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(ArchiveBooksRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<ArchiveBooksRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putPathParam(fields, "source", request.getSource());
                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<ArchiveBooksRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(ArchiveBooksRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<ArchiveBooksRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<ArchiveBooksRequest, String>() {
                        @Override
                        public String extract(ArchiveBooksRequest request) {
                          return ProtoRestSerializer.create().toBody("archive", request.getArchive());
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<ArchiveBooksResponse>newBuilder()
                  .setDefaultInstance(ArchiveBooksResponse.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<ArchiveBooksRequest, Operation> longRunningArchiveBooksMethodDescriptor =
      ApiMethodDescriptor.<ArchiveBooksRequest, Operation>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.LongRunningArchiveBooks")
          .setHttpMethod(HttpMethods.POST)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<ArchiveBooksRequest>newBuilder()
                  .setPath(
                      "/v1/{source=**}/longrunningmove",
                      new FieldsExtractor<ArchiveBooksRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(ArchiveBooksRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<ArchiveBooksRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putPathParam(fields, "source", request.getSource());
                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<ArchiveBooksRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(ArchiveBooksRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<ArchiveBooksRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<ArchiveBooksRequest, String>() {
                        @Override
                        public String extract(ArchiveBooksRequest request) {
                          return ProtoRestSerializer.create().toBody("archive", request.getArchive());
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<Operation>newBuilder()
                  .setDefaultInstance(Operation.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<Book, Empty> saveBookMethodDescriptor =
      ApiMethodDescriptor.<Book, Empty>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.SaveBook")
          .setHttpMethod(HttpMethods.POST)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<Book>newBuilder()
                  .setPath(
                      "/v1/saveBook",
                      new FieldsExtractor<Book, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(Book request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<Book> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<Book, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(Book request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<Book> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<Book, String>() {
                        @Override
                        public String extract(Book request) {
                          return ProtoRestSerializer.create().toBody("name", request.getName());
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<Empty>newBuilder()
                  .setDefaultInstance(Empty.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsMethodDescriptor =
      ApiMethodDescriptor.<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.TestOptionalRequiredFlatteningParams")
          .setHttpMethod(HttpMethods.POST)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<TestOptionalRequiredFlatteningParamsRequest>newBuilder()
                  .setPath(
                      "/v1/testofp",
                      new FieldsExtractor<TestOptionalRequiredFlatteningParamsRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(TestOptionalRequiredFlatteningParamsRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<TestOptionalRequiredFlatteningParamsRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<TestOptionalRequiredFlatteningParamsRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(TestOptionalRequiredFlatteningParamsRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<TestOptionalRequiredFlatteningParamsRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<TestOptionalRequiredFlatteningParamsRequest, String>() {
                        @Override
                        public String extract(TestOptionalRequiredFlatteningParamsRequest request) {
                          return ProtoRestSerializer.create().toBody("requiredSingularInt32", request.getRequiredSingularInt32());
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<TestOptionalRequiredFlatteningParamsResponse>newBuilder()
                  .setDefaultInstance(TestOptionalRequiredFlatteningParamsResponse.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<ListShelvesRequest, Book> privateListShelvesMethodDescriptor =
      ApiMethodDescriptor.<ListShelvesRequest, Book>newBuilder()
          .setFullMethodName("google.example.library.v1.LibraryService.PrivateListShelves")
          .setHttpMethod(HttpMethods.GET)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<ListShelvesRequest>newBuilder()
                  .setPath(
                      "/v1/bookShelves",
                      new FieldsExtractor<ListShelvesRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(ListShelvesRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<ListShelvesRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<ListShelvesRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(ListShelvesRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<ListShelvesRequest> serializer =
                              ProtoRestSerializer.create();
                          serializer.putQueryParam(fields, "pageToken", request.getPageToken());
                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<ListShelvesRequest, String>() {
                        @Override
                        public String extract(ListShelvesRequest request) {
                          return "";
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<Book>newBuilder()
                  .setDefaultInstance(Book.getDefaultInstance())
                  .build())
          .build();


  private final BackgroundResource backgroundResources;
  private final GrpcOperationsStub operationsStub;

  private final UnaryCallable<CreateShelfRequest, Shelf> createShelfCallable;
  private final UnaryCallable<GetShelfRequest, Shelf> getShelfCallable;
  private final UnaryCallable<ListShelvesRequest, ListShelvesResponse> listShelvesCallable;
  private final UnaryCallable<ListAggregatedShelvesRequest, ListAggregatedShelvesResponse> listAggregatedShelvesCallable;
  private final UnaryCallable<ListAggregatedShelvesRequest, ListAggregatedShelvesPagedResponse> listAggregatedShelvesPagedCallable;
  private final UnaryCallable<DeleteShelfRequest, Empty> deleteShelfCallable;
  private final UnaryCallable<MergeShelvesRequest, Shelf> mergeShelvesCallable;
  private final UnaryCallable<CreateBookRequest, Book> createBookCallable;
  private final UnaryCallable<PublishSeriesRequest, PublishSeriesResponse> publishSeriesCallable;
  private final UnaryCallable<CreateInventoryRequest, Inventory> createInventoryCallable;
  private final UnaryCallable<GetBookRequest, Book> getBookCallable;
  private final UnaryCallable<ListBooksRequest, ListBooksResponse> listBooksCallable;
  private final UnaryCallable<ListBooksRequest, ListBooksPagedResponse> listBooksPagedCallable;
  private final UnaryCallable<DeleteBookRequest, Empty> deleteBookCallable;
  private final UnaryCallable<UpdateBookRequest, Book> updateBookCallable;
  private final UnaryCallable<MoveBookRequest, Book> moveBookCallable;
  private final UnaryCallable<ListStringsRequest, ListStringsResponse> listStringsCallable;
  private final UnaryCallable<ListStringsRequest, ListStringsPagedResponse> listStringsPagedCallable;
  private final UnaryCallable<AddCommentsRequest, Empty> addCommentsCallable;
  private final UnaryCallable<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveCallable;
  private final UnaryCallable<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereCallable;
  private final UnaryCallable<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere> getBookFromAbsolutelyAnywhereCallable;
  private final UnaryCallable<UpdateBookIndexRequest, Empty> updateBookIndexCallable;
  private final UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksResponse> findRelatedBooksCallable;
  private final UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksPagedResponse> findRelatedBooksPagedCallable;
  private final UnaryCallable<AddTagRequest, AddTagResponse> addTagCallable;
  private final UnaryCallable<GetBookRequest, Operation> getBigBookCallable;
  private final OperationCallable<GetBookRequest, Book, GetBigBookMetadata> getBigBookOperationCallable;
  private final UnaryCallable<GetBookRequest, Operation> getBigNothingCallable;
  private final OperationCallable<GetBookRequest, Empty, GetBigBookMetadata> getBigNothingOperationCallable;
  private final UnaryCallable<MoveBooksRequest, MoveBooksResponse> moveBooksCallable;
  private final UnaryCallable<ArchiveBooksRequest, ArchiveBooksResponse> archiveBooksCallable;
  private final UnaryCallable<ArchiveBooksRequest, Operation> longRunningArchiveBooksCallable;
  private final OperationCallable<ArchiveBooksRequest, ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksOperationCallable;
  private final UnaryCallable<Book, Empty> saveBookCallable;
  private final UnaryCallable<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsCallable;
  private final UnaryCallable<ListShelvesRequest, Book> privateListShelvesCallable;

  private final HttpJsonStubCallableFactory callableFactory;

  public static final HttpJsonLibraryServiceStub create(LibraryServiceStubSettings settings) throws IOException {
    return new HttpJsonLibraryServiceStub(settings, ClientContext.create(settings));
  }

  public static final HttpJsonLibraryServiceStub create(ClientContext clientContext) throws IOException {
    return new HttpJsonLibraryServiceStub(LibraryServiceStubSettings.newBuilder().build(), clientContext);
  }

  public static final HttpJsonLibraryServiceStub create(ClientContext clientContext, HttpJsonStubCallableFactory callableFactory) throws IOException {
    return new HttpJsonLibraryServiceStub(LibraryServiceStubSettings.newBuilder().build(), clientContext, callableFactory);
  }

  /**
   * Constructs an instance of HttpJsonLibraryServiceStub, using the given settings.
   * This is protected so that it is easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected HttpJsonLibraryServiceStub(LibraryServiceStubSettings settings, ClientContext clientContext) throws IOException {
    this(settings, clientContext, new HttpJsonLibraryServiceCallableFactory());
  }

  /**
   * Constructs an instance of HttpJsonLibraryServiceStub, using the given settings.
   * This is protected so that it is easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected HttpJsonLibraryServiceStub(LibraryServiceStubSettings settings, ClientContext clientContext, HttpJsonStubCallableFactory callableFactory) throws IOException {
    this.callableFactory = callableFactory;
    this.operationsStub = GrpcOperationsStub.create(clientContext, callableFactory);

    HttpJsonCallSettings<CreateShelfRequest, Shelf> createShelfTransportSettings =
        HttpJsonCallSettings.<CreateShelfRequest, Shelf>newBuilder()
            .setMethodDescriptor(createShelfMethodDescriptor)
            .build();
    HttpJsonCallSettings<GetShelfRequest, Shelf> getShelfTransportSettings =
        HttpJsonCallSettings.<GetShelfRequest, Shelf>newBuilder()
            .setMethodDescriptor(getShelfMethodDescriptor)
            .build();
    HttpJsonCallSettings<ListShelvesRequest, ListShelvesResponse> listShelvesTransportSettings =
        HttpJsonCallSettings.<ListShelvesRequest, ListShelvesResponse>newBuilder()
            .setMethodDescriptor(listShelvesMethodDescriptor)
            .build();
    HttpJsonCallSettings<ListAggregatedShelvesRequest, ListAggregatedShelvesResponse> listAggregatedShelvesTransportSettings =
        HttpJsonCallSettings.<ListAggregatedShelvesRequest, ListAggregatedShelvesResponse>newBuilder()
            .setMethodDescriptor(listAggregatedShelvesMethodDescriptor)
            .build();
    HttpJsonCallSettings<DeleteShelfRequest, Empty> deleteShelfTransportSettings =
        HttpJsonCallSettings.<DeleteShelfRequest, Empty>newBuilder()
            .setMethodDescriptor(deleteShelfMethodDescriptor)
            .build();
    HttpJsonCallSettings<MergeShelvesRequest, Shelf> mergeShelvesTransportSettings =
        HttpJsonCallSettings.<MergeShelvesRequest, Shelf>newBuilder()
            .setMethodDescriptor(mergeShelvesMethodDescriptor)
            .build();
    HttpJsonCallSettings<CreateBookRequest, Book> createBookTransportSettings =
        HttpJsonCallSettings.<CreateBookRequest, Book>newBuilder()
            .setMethodDescriptor(createBookMethodDescriptor)
            .build();
    HttpJsonCallSettings<PublishSeriesRequest, PublishSeriesResponse> publishSeriesTransportSettings =
        HttpJsonCallSettings.<PublishSeriesRequest, PublishSeriesResponse>newBuilder()
            .setMethodDescriptor(publishSeriesMethodDescriptor)
            .build();
    HttpJsonCallSettings<CreateInventoryRequest, Inventory> createInventoryTransportSettings =
        HttpJsonCallSettings.<CreateInventoryRequest, Inventory>newBuilder()
            .setMethodDescriptor(createInventoryMethodDescriptor)
            .build();
    HttpJsonCallSettings<GetBookRequest, Book> getBookTransportSettings =
        HttpJsonCallSettings.<GetBookRequest, Book>newBuilder()
            .setMethodDescriptor(getBookMethodDescriptor)
            .build();
    HttpJsonCallSettings<ListBooksRequest, ListBooksResponse> listBooksTransportSettings =
        HttpJsonCallSettings.<ListBooksRequest, ListBooksResponse>newBuilder()
            .setMethodDescriptor(listBooksMethodDescriptor)
            .build();
    HttpJsonCallSettings<DeleteBookRequest, Empty> deleteBookTransportSettings =
        HttpJsonCallSettings.<DeleteBookRequest, Empty>newBuilder()
            .setMethodDescriptor(deleteBookMethodDescriptor)
            .build();
    HttpJsonCallSettings<UpdateBookRequest, Book> updateBookTransportSettings =
        HttpJsonCallSettings.<UpdateBookRequest, Book>newBuilder()
            .setMethodDescriptor(updateBookMethodDescriptor)
            .build();
    HttpJsonCallSettings<MoveBookRequest, Book> moveBookTransportSettings =
        HttpJsonCallSettings.<MoveBookRequest, Book>newBuilder()
            .setMethodDescriptor(moveBookMethodDescriptor)
            .build();
    HttpJsonCallSettings<ListStringsRequest, ListStringsResponse> listStringsTransportSettings =
        HttpJsonCallSettings.<ListStringsRequest, ListStringsResponse>newBuilder()
            .setMethodDescriptor(listStringsMethodDescriptor)
            .build();
    HttpJsonCallSettings<AddCommentsRequest, Empty> addCommentsTransportSettings =
        HttpJsonCallSettings.<AddCommentsRequest, Empty>newBuilder()
            .setMethodDescriptor(addCommentsMethodDescriptor)
            .build();
    HttpJsonCallSettings<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveTransportSettings =
        HttpJsonCallSettings.<GetBookFromArchiveRequest, BookFromArchive>newBuilder()
            .setMethodDescriptor(getBookFromArchiveMethodDescriptor)
            .build();
    HttpJsonCallSettings<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereTransportSettings =
        HttpJsonCallSettings.<GetBookFromAnywhereRequest, BookFromAnywhere>newBuilder()
            .setMethodDescriptor(getBookFromAnywhereMethodDescriptor)
            .build();
    HttpJsonCallSettings<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere> getBookFromAbsolutelyAnywhereTransportSettings =
        HttpJsonCallSettings.<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere>newBuilder()
            .setMethodDescriptor(getBookFromAbsolutelyAnywhereMethodDescriptor)
            .build();
    HttpJsonCallSettings<UpdateBookIndexRequest, Empty> updateBookIndexTransportSettings =
        HttpJsonCallSettings.<UpdateBookIndexRequest, Empty>newBuilder()
            .setMethodDescriptor(updateBookIndexMethodDescriptor)
            .build();
    HttpJsonCallSettings<FindRelatedBooksRequest, FindRelatedBooksResponse> findRelatedBooksTransportSettings =
        HttpJsonCallSettings.<FindRelatedBooksRequest, FindRelatedBooksResponse>newBuilder()
            .setMethodDescriptor(findRelatedBooksMethodDescriptor)
            .build();
    HttpJsonCallSettings<AddTagRequest, AddTagResponse> addTagTransportSettings =
        HttpJsonCallSettings.<AddTagRequest, AddTagResponse>newBuilder()
            .setMethodDescriptor(addTagMethodDescriptor)
            .build();
    HttpJsonCallSettings<GetBookRequest, Operation> getBigBookTransportSettings =
        HttpJsonCallSettings.<GetBookRequest, Operation>newBuilder()
            .setMethodDescriptor(getBigBookMethodDescriptor)
            .build();
    HttpJsonCallSettings<GetBookRequest, Operation> getBigNothingTransportSettings =
        HttpJsonCallSettings.<GetBookRequest, Operation>newBuilder()
            .setMethodDescriptor(getBigNothingMethodDescriptor)
            .build();
    HttpJsonCallSettings<MoveBooksRequest, MoveBooksResponse> moveBooksTransportSettings =
        HttpJsonCallSettings.<MoveBooksRequest, MoveBooksResponse>newBuilder()
            .setMethodDescriptor(moveBooksMethodDescriptor)
            .build();
    HttpJsonCallSettings<ArchiveBooksRequest, ArchiveBooksResponse> archiveBooksTransportSettings =
        HttpJsonCallSettings.<ArchiveBooksRequest, ArchiveBooksResponse>newBuilder()
            .setMethodDescriptor(archiveBooksMethodDescriptor)
            .build();
    HttpJsonCallSettings<ArchiveBooksRequest, Operation> longRunningArchiveBooksTransportSettings =
        HttpJsonCallSettings.<ArchiveBooksRequest, Operation>newBuilder()
            .setMethodDescriptor(longRunningArchiveBooksMethodDescriptor)
            .build();
    HttpJsonCallSettings<Book, Empty> saveBookTransportSettings =
        HttpJsonCallSettings.<Book, Empty>newBuilder()
            .setMethodDescriptor(saveBookMethodDescriptor)
            .build();
    HttpJsonCallSettings<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsTransportSettings =
        HttpJsonCallSettings.<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse>newBuilder()
            .setMethodDescriptor(testOptionalRequiredFlatteningParamsMethodDescriptor)
            .build();
    HttpJsonCallSettings<ListShelvesRequest, Book> privateListShelvesTransportSettings =
        HttpJsonCallSettings.<ListShelvesRequest, Book>newBuilder()
            .setMethodDescriptor(privateListShelvesMethodDescriptor)
            .build();

    this.createShelfCallable = callableFactory.createUnaryCallable(createShelfTransportSettings,settings.createShelfSettings(), clientContext);
    this.getShelfCallable = callableFactory.createUnaryCallable(getShelfTransportSettings,settings.getShelfSettings(), clientContext);
    this.listShelvesCallable = callableFactory.createUnaryCallable(listShelvesTransportSettings,settings.listShelvesSettings(), clientContext);
    this.listAggregatedShelvesCallable = callableFactory.createUnaryCallable(listAggregatedShelvesTransportSettings,settings.listAggregatedShelvesSettings(), clientContext);
    this.listAggregatedShelvesPagedCallable = callableFactory.createPagedCallable(listAggregatedShelvesTransportSettings,settings.listAggregatedShelvesSettings(), clientContext);
    this.deleteShelfCallable = callableFactory.createUnaryCallable(deleteShelfTransportSettings,settings.deleteShelfSettings(), clientContext);
    this.mergeShelvesCallable = callableFactory.createUnaryCallable(mergeShelvesTransportSettings,settings.mergeShelvesSettings(), clientContext);
    this.createBookCallable = callableFactory.createUnaryCallable(createBookTransportSettings,settings.createBookSettings(), clientContext);
    this.publishSeriesCallable = callableFactory.createUnaryCallable(publishSeriesTransportSettings,settings.publishSeriesSettings(), clientContext);
    this.createInventoryCallable = callableFactory.createUnaryCallable(createInventoryTransportSettings,settings.createInventorySettings(), clientContext);
    this.getBookCallable = callableFactory.createUnaryCallable(getBookTransportSettings,settings.getBookSettings(), clientContext);
    this.listBooksCallable = callableFactory.createUnaryCallable(listBooksTransportSettings,settings.listBooksSettings(), clientContext);
    this.listBooksPagedCallable = callableFactory.createPagedCallable(listBooksTransportSettings,settings.listBooksSettings(), clientContext);
    this.deleteBookCallable = callableFactory.createUnaryCallable(deleteBookTransportSettings,settings.deleteBookSettings(), clientContext);
    this.updateBookCallable = callableFactory.createUnaryCallable(updateBookTransportSettings,settings.updateBookSettings(), clientContext);
    this.moveBookCallable = callableFactory.createUnaryCallable(moveBookTransportSettings,settings.moveBookSettings(), clientContext);
    this.listStringsCallable = callableFactory.createUnaryCallable(listStringsTransportSettings,settings.listStringsSettings(), clientContext);
    this.listStringsPagedCallable = callableFactory.createPagedCallable(listStringsTransportSettings,settings.listStringsSettings(), clientContext);
    this.addCommentsCallable = callableFactory.createUnaryCallable(addCommentsTransportSettings,settings.addCommentsSettings(), clientContext);
    this.getBookFromArchiveCallable = callableFactory.createUnaryCallable(getBookFromArchiveTransportSettings,settings.getBookFromArchiveSettings(), clientContext);
    this.getBookFromAnywhereCallable = callableFactory.createUnaryCallable(getBookFromAnywhereTransportSettings,settings.getBookFromAnywhereSettings(), clientContext);
    this.getBookFromAbsolutelyAnywhereCallable = callableFactory.createUnaryCallable(getBookFromAbsolutelyAnywhereTransportSettings,settings.getBookFromAbsolutelyAnywhereSettings(), clientContext);
    this.updateBookIndexCallable = callableFactory.createUnaryCallable(updateBookIndexTransportSettings,settings.updateBookIndexSettings(), clientContext);
    this.findRelatedBooksCallable = callableFactory.createUnaryCallable(findRelatedBooksTransportSettings,settings.findRelatedBooksSettings(), clientContext);
    this.findRelatedBooksPagedCallable = callableFactory.createPagedCallable(findRelatedBooksTransportSettings,settings.findRelatedBooksSettings(), clientContext);
    this.addTagCallable = callableFactory.createUnaryCallable(addTagTransportSettings,settings.addTagSettings(), clientContext);
    this.getBigBookCallable = callableFactory.createUnaryCallable(getBigBookTransportSettings,settings.getBigBookSettings(), clientContext);
    this.getBigBookOperationCallable = callableFactory.createOperationCallable(
        getBigBookTransportSettings,settings.getBigBookOperationSettings(), clientContext, this.operationsStub);
    this.getBigNothingCallable = callableFactory.createUnaryCallable(getBigNothingTransportSettings,settings.getBigNothingSettings(), clientContext);
    this.getBigNothingOperationCallable = callableFactory.createOperationCallable(
        getBigNothingTransportSettings,settings.getBigNothingOperationSettings(), clientContext, this.operationsStub);
    this.moveBooksCallable = callableFactory.createUnaryCallable(moveBooksTransportSettings,settings.moveBooksSettings(), clientContext);
    this.archiveBooksCallable = callableFactory.createUnaryCallable(archiveBooksTransportSettings,settings.archiveBooksSettings(), clientContext);
    this.longRunningArchiveBooksCallable = callableFactory.createUnaryCallable(longRunningArchiveBooksTransportSettings,settings.longRunningArchiveBooksSettings(), clientContext);
    this.longRunningArchiveBooksOperationCallable = callableFactory.createOperationCallable(
        longRunningArchiveBooksTransportSettings,settings.longRunningArchiveBooksOperationSettings(), clientContext, this.operationsStub);
    this.saveBookCallable = callableFactory.createUnaryCallable(saveBookTransportSettings,settings.saveBookSettings(), clientContext);
    this.testOptionalRequiredFlatteningParamsCallable = callableFactory.createUnaryCallable(testOptionalRequiredFlatteningParamsTransportSettings,settings.testOptionalRequiredFlatteningParamsSettings(), clientContext);
    this.privateListShelvesCallable = callableFactory.createUnaryCallable(privateListShelvesTransportSettings,settings.privateListShelvesSettings(), clientContext);

    backgroundResources = new BackgroundResourceAggregation(clientContext.getBackgroundResources());
  }

  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public GrpcOperationsStub getOperationsStub() {
    return operationsStub;
  }
  public UnaryCallable<CreateShelfRequest, Shelf> createShelfCallable() {
    return createShelfCallable;
  }

  public UnaryCallable<GetShelfRequest, Shelf> getShelfCallable() {
    return getShelfCallable;
  }

  public UnaryCallable<ListShelvesRequest, ListShelvesResponse> listShelvesCallable() {
    return listShelvesCallable;
  }

  public UnaryCallable<ListAggregatedShelvesRequest, ListAggregatedShelvesPagedResponse> listAggregatedShelvesPagedCallable() {
    return listAggregatedShelvesPagedCallable;
  }

  public UnaryCallable<ListAggregatedShelvesRequest, ListAggregatedShelvesResponse> listAggregatedShelvesCallable() {
    return listAggregatedShelvesCallable;
  }

  public UnaryCallable<DeleteShelfRequest, Empty> deleteShelfCallable() {
    return deleteShelfCallable;
  }

  public UnaryCallable<MergeShelvesRequest, Shelf> mergeShelvesCallable() {
    return mergeShelvesCallable;
  }

  public UnaryCallable<CreateBookRequest, Book> createBookCallable() {
    return createBookCallable;
  }

  public UnaryCallable<PublishSeriesRequest, PublishSeriesResponse> publishSeriesCallable() {
    return publishSeriesCallable;
  }

  public UnaryCallable<CreateInventoryRequest, Inventory> createInventoryCallable() {
    return createInventoryCallable;
  }

  public UnaryCallable<GetBookRequest, Book> getBookCallable() {
    return getBookCallable;
  }

  public UnaryCallable<ListBooksRequest, ListBooksPagedResponse> listBooksPagedCallable() {
    return listBooksPagedCallable;
  }

  public UnaryCallable<ListBooksRequest, ListBooksResponse> listBooksCallable() {
    return listBooksCallable;
  }

  public UnaryCallable<DeleteBookRequest, Empty> deleteBookCallable() {
    return deleteBookCallable;
  }

  public UnaryCallable<UpdateBookRequest, Book> updateBookCallable() {
    return updateBookCallable;
  }

  public UnaryCallable<MoveBookRequest, Book> moveBookCallable() {
    return moveBookCallable;
  }

  public UnaryCallable<ListStringsRequest, ListStringsPagedResponse> listStringsPagedCallable() {
    return listStringsPagedCallable;
  }

  public UnaryCallable<ListStringsRequest, ListStringsResponse> listStringsCallable() {
    return listStringsCallable;
  }

  public UnaryCallable<AddCommentsRequest, Empty> addCommentsCallable() {
    return addCommentsCallable;
  }

  public UnaryCallable<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveCallable() {
    return getBookFromArchiveCallable;
  }

  public UnaryCallable<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereCallable() {
    return getBookFromAnywhereCallable;
  }

  public UnaryCallable<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere> getBookFromAbsolutelyAnywhereCallable() {
    return getBookFromAbsolutelyAnywhereCallable;
  }

  public UnaryCallable<UpdateBookIndexRequest, Empty> updateBookIndexCallable() {
    return updateBookIndexCallable;
  }

  public UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksPagedResponse> findRelatedBooksPagedCallable() {
    return findRelatedBooksPagedCallable;
  }

  public UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksResponse> findRelatedBooksCallable() {
    return findRelatedBooksCallable;
  }

  public UnaryCallable<AddTagRequest, AddTagResponse> addTagCallable() {
    return addTagCallable;
  }

  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public OperationCallable<GetBookRequest, Book, GetBigBookMetadata> getBigBookOperationCallable() {
    return getBigBookOperationCallable;
  }

  public UnaryCallable<GetBookRequest, Operation> getBigBookCallable() {
    return getBigBookCallable;
  }

  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public OperationCallable<GetBookRequest, Empty, GetBigBookMetadata> getBigNothingOperationCallable() {
    return getBigNothingOperationCallable;
  }

  public UnaryCallable<GetBookRequest, Operation> getBigNothingCallable() {
    return getBigNothingCallable;
  }

  public UnaryCallable<MoveBooksRequest, MoveBooksResponse> moveBooksCallable() {
    return moveBooksCallable;
  }

  public UnaryCallable<ArchiveBooksRequest, ArchiveBooksResponse> archiveBooksCallable() {
    return archiveBooksCallable;
  }

  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public OperationCallable<ArchiveBooksRequest, ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksOperationCallable() {
    return longRunningArchiveBooksOperationCallable;
  }

  public UnaryCallable<ArchiveBooksRequest, Operation> longRunningArchiveBooksCallable() {
    return longRunningArchiveBooksCallable;
  }

  public UnaryCallable<Book, Empty> saveBookCallable() {
    return saveBookCallable;
  }

  public UnaryCallable<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsCallable() {
    return testOptionalRequiredFlatteningParamsCallable;
  }

  public UnaryCallable<ListShelvesRequest, Book> privateListShelvesCallable() {
    return privateListShelvesCallable;
  }

  @Override
  public final void close() {
    shutdown();
  }

  @Override
  public void shutdown() {
    backgroundResources.shutdown();
  }

  @Override
  public boolean isShutdown() {
    return backgroundResources.isShutdown();
  }

  @Override
  public boolean isTerminated() {
    return backgroundResources.isTerminated();
  }

  @Override
  public void shutdownNow() {
    backgroundResources.shutdownNow();
  }

  @Override
  public boolean awaitTermination(long duration, TimeUnit unit) throws InterruptedException {
    return backgroundResources.awaitTermination(duration, unit);
  }

}
============== file: src/main/java/com/google/example/library/v1/stub/HttpJsonMyProtoCallableFactory.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1.stub;

import com.google.api.client.http.HttpMethods;
import com.google.api.core.BetaApi;
import com.google.api.core.InternalApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.core.BackgroundResourceAggregation;
import com.google.api.gax.httpjson.ApiMessage;
import com.google.api.gax.httpjson.ApiMethodDescriptor;
import com.google.api.gax.httpjson.FieldsExtractor;
import com.google.api.gax.httpjson.HttpJsonCallSettings;
import com.google.api.gax.httpjson.HttpJsonCallableFactory;
import com.google.api.gax.httpjson.HttpJsonStubCallableFactory;
import com.google.api.gax.httpjson.ProtoMessageRequestFormatter;
import com.google.api.gax.httpjson.ProtoMessageResponseParser;
import com.google.api.gax.httpjson.ProtoRestSerializer;
import com.google.api.gax.rpc.BatchingCallSettings;
import com.google.api.gax.rpc.BidiStreamingCallable;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.ClientStreamingCallable;
import com.google.api.gax.rpc.OperationCallSettings;
import com.google.api.gax.rpc.OperationCallable;
import com.google.api.gax.rpc.PagedCallSettings;
import com.google.api.gax.rpc.RequestParamsExtractor;
import com.google.api.gax.rpc.ServerStreamingCallSettings;
import com.google.api.gax.rpc.ServerStreamingCallable;
import com.google.api.gax.rpc.StreamingCallSettings;
import com.google.api.gax.rpc.UnaryCallSettings;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.api.pathtemplate.PathTemplate;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Sets;
import com.google.example.library.v1.MyProtoSettings;
import com.google.protos.google.example.library.v1.AnotherService.MethodRequest;
import com.google.protos.google.example.library.v1.AnotherService.MethodResponse;
import com.google.protos.google.example.library.v1.AnotherService.Namespace;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;
import javax.annotation.Nullable;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * REST callable factory implementation for Google Example Library API.
 *
 * <p>This class is for advanced usage.
 */
@Generated("by gapic-generator")
@BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
public class HttpJsonMyProtoCallableFactory implements HttpJsonStubCallableFactory<
    ApiMessage, BackgroundResource> {
  @Override
  public <RequestT, ResponseT> UnaryCallable<RequestT, ResponseT> createUnaryCallable(
      HttpJsonCallSettings<RequestT, ResponseT> httpJsonCallSettings,
      UnaryCallSettings<RequestT, ResponseT> callSettings,
      ClientContext clientContext) {
    return HttpJsonCallableFactory.createUnaryCallable(httpJsonCallSettings, callSettings, clientContext);
  }


  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  @Override
  @Nullable
  public <RequestT, ResponseT, MetadataT> OperationCallable<RequestT, ResponseT, MetadataT> createOperationCallable(
      HttpJsonCallSettings<RequestT, ApiMessage> httpJsonCallSettings,
      OperationCallSettings<RequestT, ResponseT, MetadataT> operationCallSettings,
      ClientContext clientContext, BackgroundResource operationsStub) {
      return null;
  }

  @Override
  public <RequestT, ResponseT, PagedListResponseT>
      UnaryCallable<RequestT, PagedListResponseT> createPagedCallable(
      HttpJsonCallSettings<RequestT, ResponseT> httpJsonCallSettings,
      PagedCallSettings<RequestT, ResponseT, PagedListResponseT> pagedCallSettings,
      ClientContext clientContext) {
    return HttpJsonCallableFactory.createPagedCallable(httpJsonCallSettings, pagedCallSettings, clientContext);
  }

  @Override
  public <RequestT, ResponseT> UnaryCallable<RequestT, ResponseT> createBatchingCallable(
      HttpJsonCallSettings<RequestT, ResponseT> httpJsonCallSettings,
      BatchingCallSettings<RequestT, ResponseT> batchingCallSettings,
      ClientContext clientContext) {
    return HttpJsonCallableFactory.createBatchingCallable(httpJsonCallSettings, batchingCallSettings, clientContext);
  }
}
============== file: src/main/java/com/google/example/library/v1/stub/HttpJsonMyProtoStub.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1.stub;

import com.google.api.client.http.HttpMethods;
import com.google.api.core.BetaApi;
import com.google.api.core.InternalApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.core.BackgroundResourceAggregation;
import com.google.api.gax.httpjson.ApiMethodDescriptor;
import com.google.api.gax.httpjson.FieldsExtractor;
import com.google.api.gax.httpjson.HttpJsonCallSettings;
import com.google.api.gax.httpjson.HttpJsonStubCallableFactory;
import com.google.api.gax.httpjson.ProtoMessageRequestFormatter;
import com.google.api.gax.httpjson.ProtoMessageResponseParser;
import com.google.api.gax.httpjson.ProtoRestSerializer;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.RequestParamsExtractor;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.api.pathtemplate.PathTemplate;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Sets;
import com.google.example.library.v1.MyProtoSettings;
import com.google.protos.google.example.library.v1.AnotherService.MethodRequest;
import com.google.protos.google.example.library.v1.AnotherService.MethodResponse;
import com.google.protos.google.example.library.v1.AnotherService.Namespace;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * REST stub implementation for Google Example Library API.
 *
 * <p>This class is for advanced usage and reflects the underlying API directly.
 */
@Generated("by gapic-generator")
@BetaApi("A restructuring of stub classes is planned, so this may break in the future")
public class HttpJsonMyProtoStub extends MyProtoStub {

  @InternalApi
  public static final ApiMethodDescriptor<MethodRequest, MethodResponse> myMethodMethodDescriptor =
      ApiMethodDescriptor.<MethodRequest, MethodResponse>newBuilder()
          .setFullMethodName("google.example.library.v1.MyProto.MyMethod")
          .setHttpMethod(HttpMethods.POST)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<MethodRequest>newBuilder()
                  .setPath(
                      "/v1/myMethod",
                      new FieldsExtractor<MethodRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(MethodRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<MethodRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<MethodRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(MethodRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<MethodRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<MethodRequest, String>() {
                        @Override
                        public String extract(MethodRequest request) {
                          return ProtoRestSerializer.create().toBody("mylist", request.getMylistList());
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<MethodResponse>newBuilder()
                  .setDefaultInstance(MethodResponse.getDefaultInstance())
                  .build())
          .build();
  @InternalApi
  public static final ApiMethodDescriptor<MethodRequest, Namespace> getNamespaceMethodDescriptor =
      ApiMethodDescriptor.<MethodRequest, Namespace>newBuilder()
          .setFullMethodName("google.example.library.v1.MyProto.GetNamespace")
          .setHttpMethod(HttpMethods.POST)
          .setRequestFormatter(
              ProtoMessageRequestFormatter.<MethodRequest>newBuilder()
                  .setPath(
                      "/v1/myMethod",
                      new FieldsExtractor<MethodRequest, Map<String, String>>() {
                        @Override
                        public Map<String, String> extract(MethodRequest request) {
                          Map<String, String> fields = new HashMap<>();
                          ProtoRestSerializer<MethodRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setQueryParamsExtractor(
                      new FieldsExtractor<MethodRequest, Map<String, List<String>>>() {
                        @Override
                        public Map<String, List<String>> extract(MethodRequest request) {
                          Map<String, List<String>> fields = new HashMap<>();
                          ProtoRestSerializer<MethodRequest> serializer =
                              ProtoRestSerializer.create();

                          return fields;
                        }
                      })
                  .setRequestBodyExtractor(
                      new FieldsExtractor<MethodRequest, String>() {
                        @Override
                        public String extract(MethodRequest request) {
                          return ProtoRestSerializer.create().toBody("mylist", request.getMylistList());
                        }
                      })
                  .build())
          .setResponseParser(
              ProtoMessageResponseParser.<Namespace>newBuilder()
                  .setDefaultInstance(Namespace.getDefaultInstance())
                  .build())
          .build();


  private final BackgroundResource backgroundResources;

  private final UnaryCallable<MethodRequest, MethodResponse> myMethodCallable;
  private final UnaryCallable<MethodRequest, Namespace> getNamespaceCallable;

  private final HttpJsonStubCallableFactory callableFactory;

  public static final HttpJsonMyProtoStub create(MyProtoStubSettings settings) throws IOException {
    return new HttpJsonMyProtoStub(settings, ClientContext.create(settings));
  }

  public static final HttpJsonMyProtoStub create(ClientContext clientContext) throws IOException {
    return new HttpJsonMyProtoStub(MyProtoStubSettings.newBuilder().build(), clientContext);
  }

  public static final HttpJsonMyProtoStub create(ClientContext clientContext, HttpJsonStubCallableFactory callableFactory) throws IOException {
    return new HttpJsonMyProtoStub(MyProtoStubSettings.newBuilder().build(), clientContext, callableFactory);
  }

  /**
   * Constructs an instance of HttpJsonMyProtoStub, using the given settings.
   * This is protected so that it is easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected HttpJsonMyProtoStub(MyProtoStubSettings settings, ClientContext clientContext) throws IOException {
    this(settings, clientContext, new HttpJsonMyProtoCallableFactory());
  }

  /**
   * Constructs an instance of HttpJsonMyProtoStub, using the given settings.
   * This is protected so that it is easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected HttpJsonMyProtoStub(MyProtoStubSettings settings, ClientContext clientContext, HttpJsonStubCallableFactory callableFactory) throws IOException {
    this.callableFactory = callableFactory;

    HttpJsonCallSettings<MethodRequest, MethodResponse> myMethodTransportSettings =
        HttpJsonCallSettings.<MethodRequest, MethodResponse>newBuilder()
            .setMethodDescriptor(myMethodMethodDescriptor)
            .build();
    HttpJsonCallSettings<MethodRequest, Namespace> getNamespaceTransportSettings =
        HttpJsonCallSettings.<MethodRequest, Namespace>newBuilder()
            .setMethodDescriptor(getNamespaceMethodDescriptor)
            .build();

    this.myMethodCallable = callableFactory.createUnaryCallable(myMethodTransportSettings,settings.myMethodSettings(), clientContext);
    this.getNamespaceCallable = callableFactory.createUnaryCallable(getNamespaceTransportSettings,settings.getNamespaceSettings(), clientContext);

    backgroundResources = new BackgroundResourceAggregation(clientContext.getBackgroundResources());
  }


  public UnaryCallable<MethodRequest, MethodResponse> myMethodCallable() {
    return myMethodCallable;
  }

  public UnaryCallable<MethodRequest, Namespace> getNamespaceCallable() {
    return getNamespaceCallable;
  }

  @Override
  public final void close() {
    shutdown();
  }

  @Override
  public void shutdown() {
    backgroundResources.shutdown();
  }

  @Override
  public boolean isShutdown() {
    return backgroundResources.isShutdown();
  }

  @Override
  public boolean isTerminated() {
    return backgroundResources.isTerminated();
  }

  @Override
  public void shutdownNow() {
    backgroundResources.shutdownNow();
  }

  @Override
  public boolean awaitTermination(long duration, TimeUnit unit) throws InterruptedException {
    return backgroundResources.awaitTermination(duration, unit);
  }

}
============== file: src/main/java/com/google/example/library/v1/stub/LibraryServiceStub.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1.stub;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.longrunning.OperationFuture;
import com.google.api.gax.rpc.OperationCallable;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.api.resourcenames.ResourceName;
import com.google.example.library.v1.AddCommentsRequest;
import com.google.example.library.v1.ArchiveBooksMetadata;
import com.google.example.library.v1.ArchiveBooksRequest;
import com.google.example.library.v1.ArchiveBooksResponse;
import com.google.example.library.v1.ArchiveName;
import com.google.example.library.v1.ArchivedBookName;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookFromAnywhere;
import com.google.example.library.v1.BookFromArchive;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.Comment;
import com.google.example.library.v1.CreateBookRequest;
import com.google.example.library.v1.CreateInventoryRequest;
import com.google.example.library.v1.CreateShelfRequest;
import com.google.example.library.v1.DeleteBookRequest;
import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.FindRelatedBooksRequest;
import com.google.example.library.v1.FindRelatedBooksResponse;
import com.google.example.library.v1.FolderName;
import com.google.example.library.v1.GetBigBookMetadata;
import com.google.example.library.v1.GetBookFromAbsolutelyAnywhereRequest;
import com.google.example.library.v1.GetBookFromAnywhereRequest;
import com.google.example.library.v1.GetBookFromArchiveRequest;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.GetShelfRequest;
import com.google.example.library.v1.Inventory;
import com.google.example.library.v1.InventoryName;
import static com.google.example.library.v1.LibraryServiceClient.FindRelatedBooksPagedResponse;
import static com.google.example.library.v1.LibraryServiceClient.ListAggregatedShelvesPagedResponse;
import static com.google.example.library.v1.LibraryServiceClient.ListBooksPagedResponse;
import static com.google.example.library.v1.LibraryServiceClient.ListStringsPagedResponse;
import com.google.example.library.v1.ListAggregatedShelvesRequest;
import com.google.example.library.v1.ListAggregatedShelvesResponse;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.ListStringsRequest;
import com.google.example.library.v1.ListStringsResponse;
import com.google.example.library.v1.LocationName;
import com.google.example.library.v1.MergeShelvesRequest;
import com.google.example.library.v1.MoveBookRequest;
import com.google.example.library.v1.MoveBooksRequest;
import com.google.example.library.v1.MoveBooksResponse;
import com.google.example.library.v1.ProjectName;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.PublisherName;
import com.google.example.library.v1.SeriesUuid;
import com.google.example.library.v1.Shelf;
import com.google.example.library.v1.ShelfName;
import com.google.example.library.v1.SomeMessage;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest.InnerMessage;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsResponse;
import com.google.example.library.v1.UpdateBookIndexRequest;
import com.google.example.library.v1.UpdateBookRequest;
import com.google.longrunning.Operation;
import com.google.longrunning.stub.OperationsStub;
import com.google.protobuf.Any;
import com.google.protobuf.BoolValue;
import com.google.protobuf.ByteString;
import com.google.protobuf.BytesValue;
import com.google.protobuf.DoubleValue;
import com.google.protobuf.Duration;
import com.google.protobuf.Empty;
import com.google.protobuf.FieldMask;
import com.google.protobuf.FloatValue;
import com.google.protobuf.Int32Value;
import com.google.protobuf.Int64Value;
import com.google.protobuf.ListValue;
import com.google.protobuf.StringValue;
import com.google.protobuf.Struct;
import com.google.protobuf.Timestamp;
import com.google.protobuf.UInt32Value;
import com.google.protobuf.UInt64Value;
import com.google.protobuf.Value;
import com.google.tagger.v1.TaggerProto.AddTagRequest;
import com.google.tagger.v1.TaggerProto.AddTagResponse;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * Base stub class for Google Example Library API.
 *
 * <p>This class is for advanced usage and reflects the underlying API directly.
 */
@Generated("by gapic-generator")
@BetaApi("A restructuring of stub classes is planned, so this may break in the future")
public abstract class LibraryServiceStub implements BackgroundResource {

  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public OperationsStub getOperationsStub() {
    throw new UnsupportedOperationException("Not implemented: getOperationsStub()");
  }

  public UnaryCallable<CreateShelfRequest, Shelf> createShelfCallable() {
    throw new UnsupportedOperationException("Not implemented: createShelfCallable()");
  }

  public UnaryCallable<GetShelfRequest, Shelf> getShelfCallable() {
    throw new UnsupportedOperationException("Not implemented: getShelfCallable()");
  }

  public UnaryCallable<ListShelvesRequest, ListShelvesResponse> listShelvesCallable() {
    throw new UnsupportedOperationException("Not implemented: listShelvesCallable()");
  }

  public UnaryCallable<ListAggregatedShelvesRequest, ListAggregatedShelvesPagedResponse> listAggregatedShelvesPagedCallable() {
    throw new UnsupportedOperationException("Not implemented: listAggregatedShelvesPagedCallable()");
  }

  public UnaryCallable<ListAggregatedShelvesRequest, ListAggregatedShelvesResponse> listAggregatedShelvesCallable() {
    throw new UnsupportedOperationException("Not implemented: listAggregatedShelvesCallable()");
  }

  public UnaryCallable<DeleteShelfRequest, Empty> deleteShelfCallable() {
    throw new UnsupportedOperationException("Not implemented: deleteShelfCallable()");
  }

  public UnaryCallable<MergeShelvesRequest, Shelf> mergeShelvesCallable() {
    throw new UnsupportedOperationException("Not implemented: mergeShelvesCallable()");
  }

  public UnaryCallable<CreateBookRequest, Book> createBookCallable() {
    throw new UnsupportedOperationException("Not implemented: createBookCallable()");
  }

  public UnaryCallable<PublishSeriesRequest, PublishSeriesResponse> publishSeriesCallable() {
    throw new UnsupportedOperationException("Not implemented: publishSeriesCallable()");
  }

  public UnaryCallable<CreateInventoryRequest, Inventory> createInventoryCallable() {
    throw new UnsupportedOperationException("Not implemented: createInventoryCallable()");
  }

  public UnaryCallable<GetBookRequest, Book> getBookCallable() {
    throw new UnsupportedOperationException("Not implemented: getBookCallable()");
  }

  public UnaryCallable<ListBooksRequest, ListBooksPagedResponse> listBooksPagedCallable() {
    throw new UnsupportedOperationException("Not implemented: listBooksPagedCallable()");
  }

  public UnaryCallable<ListBooksRequest, ListBooksResponse> listBooksCallable() {
    throw new UnsupportedOperationException("Not implemented: listBooksCallable()");
  }

  public UnaryCallable<DeleteBookRequest, Empty> deleteBookCallable() {
    throw new UnsupportedOperationException("Not implemented: deleteBookCallable()");
  }

  public UnaryCallable<UpdateBookRequest, Book> updateBookCallable() {
    throw new UnsupportedOperationException("Not implemented: updateBookCallable()");
  }

  public UnaryCallable<MoveBookRequest, Book> moveBookCallable() {
    throw new UnsupportedOperationException("Not implemented: moveBookCallable()");
  }

  public UnaryCallable<ListStringsRequest, ListStringsPagedResponse> listStringsPagedCallable() {
    throw new UnsupportedOperationException("Not implemented: listStringsPagedCallable()");
  }

  public UnaryCallable<ListStringsRequest, ListStringsResponse> listStringsCallable() {
    throw new UnsupportedOperationException("Not implemented: listStringsCallable()");
  }

  public UnaryCallable<AddCommentsRequest, Empty> addCommentsCallable() {
    throw new UnsupportedOperationException("Not implemented: addCommentsCallable()");
  }

  public UnaryCallable<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveCallable() {
    throw new UnsupportedOperationException("Not implemented: getBookFromArchiveCallable()");
  }

  public UnaryCallable<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereCallable() {
    throw new UnsupportedOperationException("Not implemented: getBookFromAnywhereCallable()");
  }

  public UnaryCallable<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere> getBookFromAbsolutelyAnywhereCallable() {
    throw new UnsupportedOperationException("Not implemented: getBookFromAbsolutelyAnywhereCallable()");
  }

  public UnaryCallable<UpdateBookIndexRequest, Empty> updateBookIndexCallable() {
    throw new UnsupportedOperationException("Not implemented: updateBookIndexCallable()");
  }

  public UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksPagedResponse> findRelatedBooksPagedCallable() {
    throw new UnsupportedOperationException("Not implemented: findRelatedBooksPagedCallable()");
  }

  public UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksResponse> findRelatedBooksCallable() {
    throw new UnsupportedOperationException("Not implemented: findRelatedBooksCallable()");
  }

  public UnaryCallable<AddTagRequest, AddTagResponse> addTagCallable() {
    throw new UnsupportedOperationException("Not implemented: addTagCallable()");
  }

  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public OperationCallable<GetBookRequest, Book, GetBigBookMetadata> getBigBookOperationCallable() {
    throw new UnsupportedOperationException("Not implemented: getBigBookOperationCallable()");
  }

  public UnaryCallable<GetBookRequest, Operation> getBigBookCallable() {
    throw new UnsupportedOperationException("Not implemented: getBigBookCallable()");
  }

  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public OperationCallable<GetBookRequest, Empty, GetBigBookMetadata> getBigNothingOperationCallable() {
    throw new UnsupportedOperationException("Not implemented: getBigNothingOperationCallable()");
  }

  public UnaryCallable<GetBookRequest, Operation> getBigNothingCallable() {
    throw new UnsupportedOperationException("Not implemented: getBigNothingCallable()");
  }

  public UnaryCallable<MoveBooksRequest, MoveBooksResponse> moveBooksCallable() {
    throw new UnsupportedOperationException("Not implemented: moveBooksCallable()");
  }

  public UnaryCallable<ArchiveBooksRequest, ArchiveBooksResponse> archiveBooksCallable() {
    throw new UnsupportedOperationException("Not implemented: archiveBooksCallable()");
  }

  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public OperationCallable<ArchiveBooksRequest, ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksOperationCallable() {
    throw new UnsupportedOperationException("Not implemented: longRunningArchiveBooksOperationCallable()");
  }

  public UnaryCallable<ArchiveBooksRequest, Operation> longRunningArchiveBooksCallable() {
    throw new UnsupportedOperationException("Not implemented: longRunningArchiveBooksCallable()");
  }

  public UnaryCallable<Book, Empty> saveBookCallable() {
    throw new UnsupportedOperationException("Not implemented: saveBookCallable()");
  }

  public UnaryCallable<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsCallable() {
    throw new UnsupportedOperationException("Not implemented: testOptionalRequiredFlatteningParamsCallable()");
  }

  public UnaryCallable<ListShelvesRequest, Book> privateListShelvesCallable() {
    throw new UnsupportedOperationException("Not implemented: privateListShelvesCallable()");
  }

  @Override
  public abstract void close();
}
============== file: src/main/java/com/google/example/library/v1/stub/LibraryServiceStubSettings.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1.stub;

import com.google.api.core.ApiFunction;
import com.google.api.core.ApiFuture;
import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.core.GaxProperties;
import com.google.api.gax.core.GoogleCredentialsProvider;
import com.google.api.gax.core.InstantiatingExecutorProvider;
import com.google.api.gax.httpjson.GaxHttpJsonProperties;
import com.google.api.gax.httpjson.HttpJsonTransportChannel;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.longrunning.OperationFuture;
import com.google.api.gax.longrunning.OperationSnapshot;
import com.google.api.gax.longrunning.OperationTimedPollAlgorithm;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.ApiCallContext;
import com.google.api.gax.rpc.ApiClientHeaderProvider;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.ClientSettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.OperationCallSettings;
import com.google.api.gax.rpc.PageContext;
import com.google.api.gax.rpc.PagedCallSettings;
import com.google.api.gax.rpc.PagedListDescriptor;
import com.google.api.gax.rpc.PagedListResponseFactory;
import com.google.api.gax.rpc.ServerStreamingCallSettings;
import com.google.api.gax.rpc.StatusCode;
import com.google.api.gax.rpc.StreamingCallSettings;
import com.google.api.gax.rpc.StubSettings;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.api.gax.rpc.UnaryCallSettings;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.auth.Credentials;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.google.example.library.v1.AddCommentsRequest;
import com.google.example.library.v1.ArchiveBooksMetadata;
import com.google.example.library.v1.ArchiveBooksRequest;
import com.google.example.library.v1.ArchiveBooksResponse;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookFromAnywhere;
import com.google.example.library.v1.BookFromArchive;
import com.google.example.library.v1.CreateBookRequest;
import com.google.example.library.v1.CreateInventoryRequest;
import com.google.example.library.v1.CreateShelfRequest;
import com.google.example.library.v1.DeleteBookRequest;
import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.FindRelatedBooksRequest;
import com.google.example.library.v1.FindRelatedBooksResponse;
import com.google.example.library.v1.GetBigBookMetadata;
import com.google.example.library.v1.GetBookFromAbsolutelyAnywhereRequest;
import com.google.example.library.v1.GetBookFromAnywhereRequest;
import com.google.example.library.v1.GetBookFromArchiveRequest;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.GetShelfRequest;
import com.google.example.library.v1.Inventory;
import static com.google.example.library.v1.LibraryServiceClient.FindRelatedBooksPagedResponse;
import static com.google.example.library.v1.LibraryServiceClient.ListAggregatedShelvesPagedResponse;
import static com.google.example.library.v1.LibraryServiceClient.ListBooksPagedResponse;
import static com.google.example.library.v1.LibraryServiceClient.ListStringsPagedResponse;
import com.google.example.library.v1.LibraryServiceGrpc;
import com.google.example.library.v1.ListAggregatedShelvesRequest;
import com.google.example.library.v1.ListAggregatedShelvesResponse;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.ListStringsRequest;
import com.google.example.library.v1.ListStringsResponse;
import com.google.example.library.v1.MergeShelvesRequest;
import com.google.example.library.v1.MoveBookRequest;
import com.google.example.library.v1.MoveBooksRequest;
import com.google.example.library.v1.MoveBooksResponse;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.Shelf;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsResponse;
import com.google.example.library.v1.UpdateBookIndexRequest;
import com.google.example.library.v1.UpdateBookRequest;
import com.google.longrunning.Operation;
import com.google.protobuf.Empty;
import com.google.tagger.v1.TaggerProto.AddTagRequest;
import com.google.tagger.v1.TaggerProto.AddTagResponse;
import java.io.IOException;
import java.util.List;
import java.util.Map.Entry;
import java.util.concurrent.ScheduledExecutorService;
import javax.annotation.Generated;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * Settings class to configure an instance of {@link LibraryServiceStub}.
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 * <li>The default service address (library-example.googleapis.com) and default port (1234)
 * are used.
 * <li>Credentials are acquired automatically through Application Default Credentials.
 * <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 *
 * <p>The builder of this class is recursive, so contained classes are themselves builders.
 * When build() is called, the tree of builders is called to create the complete settings
 * object.
 *
 * For example, to set the total timeout of createShelf to 30 seconds:
 *
 * <pre>
 * <code>
 * LibraryServiceStubSettings.Builder libraryServiceSettingsBuilder =
 *     LibraryServiceStubSettings.newBuilder();
 * libraryServiceSettingsBuilder
 *     .createShelfSettings()
 *     .setRetrySettings(
 *         libraryServiceSettingsBuilder.createShelfSettings().getRetrySettings().toBuilder()
 *             .setTotalTimeout(Duration.ofSeconds(30))
 *             .build());
 * LibraryServiceStubSettings libraryServiceSettings = libraryServiceSettingsBuilder.build();
 * </code>
 * </pre>
 */
@Generated("by gapic-generator")
@BetaApi
public class LibraryServiceStubSettings extends StubSettings<LibraryServiceStubSettings> {
  /**
   * The default scopes of the service.
   */
  private static final ImmutableList<String> DEFAULT_SERVICE_SCOPES = ImmutableList.<String>builder()
      .add("https://www.googleapis.com/auth/cloud-platform")
      .add("https://www.googleapis.com/auth/library")
      .build();

  private final UnaryCallSettings<CreateShelfRequest, Shelf> createShelfSettings;
  private final UnaryCallSettings<GetShelfRequest, Shelf> getShelfSettings;
  private final UnaryCallSettings<ListShelvesRequest, ListShelvesResponse> listShelvesSettings;
  private final PagedCallSettings<ListAggregatedShelvesRequest, ListAggregatedShelvesResponse, ListAggregatedShelvesPagedResponse> listAggregatedShelvesSettings;
  private final UnaryCallSettings<DeleteShelfRequest, Empty> deleteShelfSettings;
  private final UnaryCallSettings<MergeShelvesRequest, Shelf> mergeShelvesSettings;
  private final UnaryCallSettings<CreateBookRequest, Book> createBookSettings;
  private final UnaryCallSettings<PublishSeriesRequest, PublishSeriesResponse> publishSeriesSettings;
  private final UnaryCallSettings<CreateInventoryRequest, Inventory> createInventorySettings;
  private final UnaryCallSettings<GetBookRequest, Book> getBookSettings;
  private final PagedCallSettings<ListBooksRequest, ListBooksResponse, ListBooksPagedResponse> listBooksSettings;
  private final UnaryCallSettings<DeleteBookRequest, Empty> deleteBookSettings;
  private final UnaryCallSettings<UpdateBookRequest, Book> updateBookSettings;
  private final UnaryCallSettings<MoveBookRequest, Book> moveBookSettings;
  private final PagedCallSettings<ListStringsRequest, ListStringsResponse, ListStringsPagedResponse> listStringsSettings;
  private final UnaryCallSettings<AddCommentsRequest, Empty> addCommentsSettings;
  private final UnaryCallSettings<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveSettings;
  private final UnaryCallSettings<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereSettings;
  private final UnaryCallSettings<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere> getBookFromAbsolutelyAnywhereSettings;
  private final UnaryCallSettings<UpdateBookIndexRequest, Empty> updateBookIndexSettings;
  private final PagedCallSettings<FindRelatedBooksRequest, FindRelatedBooksResponse, FindRelatedBooksPagedResponse> findRelatedBooksSettings;
  private final UnaryCallSettings<AddTagRequest, AddTagResponse> addTagSettings;
  private final UnaryCallSettings<GetBookRequest, Operation> getBigBookSettings;
  private final OperationCallSettings<GetBookRequest, Book, GetBigBookMetadata> getBigBookOperationSettings;
  private final UnaryCallSettings<GetBookRequest, Operation> getBigNothingSettings;
  private final OperationCallSettings<GetBookRequest, Empty, GetBigBookMetadata> getBigNothingOperationSettings;
  private final UnaryCallSettings<MoveBooksRequest, MoveBooksResponse> moveBooksSettings;
  private final UnaryCallSettings<ArchiveBooksRequest, ArchiveBooksResponse> archiveBooksSettings;
  private final UnaryCallSettings<ArchiveBooksRequest, Operation> longRunningArchiveBooksSettings;
  private final OperationCallSettings<ArchiveBooksRequest, ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksOperationSettings;
  private final UnaryCallSettings<Book, Empty> saveBookSettings;
  private final UnaryCallSettings<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsSettings;
  private final UnaryCallSettings<ListShelvesRequest, Book> privateListShelvesSettings;

  /**
   * Returns the object with the settings used for calls to createShelf.
   */
  public UnaryCallSettings<CreateShelfRequest, Shelf> createShelfSettings() {
    return createShelfSettings;
  }

  /**
   * Returns the object with the settings used for calls to getShelf.
   */
  public UnaryCallSettings<GetShelfRequest, Shelf> getShelfSettings() {
    return getShelfSettings;
  }

  /**
   * Returns the object with the settings used for calls to listShelves.
   */
  public UnaryCallSettings<ListShelvesRequest, ListShelvesResponse> listShelvesSettings() {
    return listShelvesSettings;
  }

  /**
   * Returns the object with the settings used for calls to listAggregatedShelves.
   */
  public PagedCallSettings<ListAggregatedShelvesRequest, ListAggregatedShelvesResponse, ListAggregatedShelvesPagedResponse> listAggregatedShelvesSettings() {
    return listAggregatedShelvesSettings;
  }

  /**
   * Returns the object with the settings used for calls to deleteShelf.
   */
  public UnaryCallSettings<DeleteShelfRequest, Empty> deleteShelfSettings() {
    return deleteShelfSettings;
  }

  /**
   * Returns the object with the settings used for calls to mergeShelves.
   */
  public UnaryCallSettings<MergeShelvesRequest, Shelf> mergeShelvesSettings() {
    return mergeShelvesSettings;
  }

  /**
   * Returns the object with the settings used for calls to createBook.
   */
  public UnaryCallSettings<CreateBookRequest, Book> createBookSettings() {
    return createBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to publishSeries.
   */
  public UnaryCallSettings<PublishSeriesRequest, PublishSeriesResponse> publishSeriesSettings() {
    return publishSeriesSettings;
  }

  /**
   * Returns the object with the settings used for calls to createInventory.
   */
  public UnaryCallSettings<CreateInventoryRequest, Inventory> createInventorySettings() {
    return createInventorySettings;
  }

  /**
   * Returns the object with the settings used for calls to getBook.
   */
  public UnaryCallSettings<GetBookRequest, Book> getBookSettings() {
    return getBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to listBooks.
   */
  public PagedCallSettings<ListBooksRequest, ListBooksResponse, ListBooksPagedResponse> listBooksSettings() {
    return listBooksSettings;
  }

  /**
   * Returns the object with the settings used for calls to deleteBook.
   */
  public UnaryCallSettings<DeleteBookRequest, Empty> deleteBookSettings() {
    return deleteBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to updateBook.
   */
  public UnaryCallSettings<UpdateBookRequest, Book> updateBookSettings() {
    return updateBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to moveBook.
   */
  public UnaryCallSettings<MoveBookRequest, Book> moveBookSettings() {
    return moveBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to listStrings.
   */
  public PagedCallSettings<ListStringsRequest, ListStringsResponse, ListStringsPagedResponse> listStringsSettings() {
    return listStringsSettings;
  }

  /**
   * Returns the object with the settings used for calls to addComments.
   */
  public UnaryCallSettings<AddCommentsRequest, Empty> addCommentsSettings() {
    return addCommentsSettings;
  }

  /**
   * Returns the object with the settings used for calls to getBookFromArchive.
   */
  public UnaryCallSettings<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveSettings() {
    return getBookFromArchiveSettings;
  }

  /**
   * Returns the object with the settings used for calls to getBookFromAnywhere.
   */
  public UnaryCallSettings<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereSettings() {
    return getBookFromAnywhereSettings;
  }

  /**
   * Returns the object with the settings used for calls to getBookFromAbsolutelyAnywhere.
   */
  public UnaryCallSettings<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere> getBookFromAbsolutelyAnywhereSettings() {
    return getBookFromAbsolutelyAnywhereSettings;
  }

  /**
   * Returns the object with the settings used for calls to updateBookIndex.
   */
  public UnaryCallSettings<UpdateBookIndexRequest, Empty> updateBookIndexSettings() {
    return updateBookIndexSettings;
  }

  /**
   * Returns the object with the settings used for calls to findRelatedBooks.
   */
  public PagedCallSettings<FindRelatedBooksRequest, FindRelatedBooksResponse, FindRelatedBooksPagedResponse> findRelatedBooksSettings() {
    return findRelatedBooksSettings;
  }

  /**
   * Returns the object with the settings used for calls to addTag.
   */
  public UnaryCallSettings<AddTagRequest, AddTagResponse> addTagSettings() {
    return addTagSettings;
  }

  /**
   * Returns the object with the settings used for calls to getBigBook.
   */
  public UnaryCallSettings<GetBookRequest, Operation> getBigBookSettings() {
    return getBigBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to getBigBook.
   */
  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public OperationCallSettings<GetBookRequest, Book, GetBigBookMetadata> getBigBookOperationSettings() {
    return getBigBookOperationSettings;
  }

  /**
   * Returns the object with the settings used for calls to getBigNothing.
   */
  public UnaryCallSettings<GetBookRequest, Operation> getBigNothingSettings() {
    return getBigNothingSettings;
  }

  /**
   * Returns the object with the settings used for calls to getBigNothing.
   */
  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public OperationCallSettings<GetBookRequest, Empty, GetBigBookMetadata> getBigNothingOperationSettings() {
    return getBigNothingOperationSettings;
  }

  /**
   * Returns the object with the settings used for calls to moveBooks.
   */
  public UnaryCallSettings<MoveBooksRequest, MoveBooksResponse> moveBooksSettings() {
    return moveBooksSettings;
  }

  /**
   * Returns the object with the settings used for calls to archiveBooks.
   */
  public UnaryCallSettings<ArchiveBooksRequest, ArchiveBooksResponse> archiveBooksSettings() {
    return archiveBooksSettings;
  }

  /**
   * Returns the object with the settings used for calls to longRunningArchiveBooks.
   */
  public UnaryCallSettings<ArchiveBooksRequest, Operation> longRunningArchiveBooksSettings() {
    return longRunningArchiveBooksSettings;
  }

  /**
   * Returns the object with the settings used for calls to longRunningArchiveBooks.
   */
  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public OperationCallSettings<ArchiveBooksRequest, ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksOperationSettings() {
    return longRunningArchiveBooksOperationSettings;
  }

  /**
   * Returns the object with the settings used for calls to saveBook.
   */
  public UnaryCallSettings<Book, Empty> saveBookSettings() {
    return saveBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to testOptionalRequiredFlatteningParams.
   */
  public UnaryCallSettings<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsSettings() {
    return testOptionalRequiredFlatteningParamsSettings;
  }

  /**
   * Returns the object with the settings used for calls to privateListShelves.
   */
  public UnaryCallSettings<ListShelvesRequest, Book> privateListShelvesSettings() {
    return privateListShelvesSettings;
  }


  @BetaApi("A restructuring of stub classes is planned, so this may break in the future")
  public LibraryServiceStub createStub() throws IOException {
    if (getTransportChannelProvider()
        .getTransportName()
        .equals(HttpJsonTransportChannel.getHttpJsonTransportName())) {
      return HttpJsonLibraryServiceStub.create(this);
    } else {
      throw new UnsupportedOperationException(
          "Transport not supported: " + getTransportChannelProvider().getTransportName());
    }
  }

  /**
   * Returns a builder for the default ExecutorProvider for this service.
   */
  public static InstantiatingExecutorProvider.Builder defaultExecutorProviderBuilder() {
    return InstantiatingExecutorProvider.newBuilder();
  }

  /**
   * Returns the default service endpoint.
   */
  public static String getDefaultEndpoint() {
    return "library-example.googleapis.com";
  }

  /**
   * Returns the default service port.
   */
  public static int getDefaultServicePort() {
    return 1234;
  }


  /**
   * Returns the default service scopes.
   */
  public static List<String> getDefaultServiceScopes() {
    return DEFAULT_SERVICE_SCOPES;
  }


  /**
   * Returns a builder for the default credentials for this service.
   */
  public static GoogleCredentialsProvider.Builder defaultCredentialsProviderBuilder() {
    return GoogleCredentialsProvider.newBuilder()
        .setScopesToApply(DEFAULT_SERVICE_SCOPES)
        ;
  }

  /** Returns a builder for the default ChannelProvider for this service. */
  public static InstantiatingHttpJsonChannelProvider.Builder defaultHttpJsonTransportProviderBuilder() {
    return InstantiatingHttpJsonChannelProvider.newBuilder();
  }

  public static TransportChannelProvider defaultTransportChannelProvider() {
    return defaultHttpJsonTransportProviderBuilder().build();
  }

  @BetaApi("The surface for customizing headers is not stable yet and may change in the future.")
  public static ApiClientHeaderProvider.Builder defaultApiClientHeaderProviderBuilder() {
    return ApiClientHeaderProvider.newBuilder()
        .setGeneratedLibToken("gapic", GaxProperties.getLibraryVersion(LibraryServiceStubSettings.class))
        .setTransportToken(GaxHttpJsonProperties.getHttpJsonTokenName(), GaxHttpJsonProperties.getHttpJsonVersion());
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder() {
    return Builder.createDefault();
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder(ClientContext clientContext) {
    return new Builder(clientContext);
  }

  /**
   * Returns a builder containing all the values of this settings class.
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  protected LibraryServiceStubSettings(Builder settingsBuilder) throws IOException {
    super(settingsBuilder);

    createShelfSettings = settingsBuilder.createShelfSettings().build();
    getShelfSettings = settingsBuilder.getShelfSettings().build();
    listShelvesSettings = settingsBuilder.listShelvesSettings().build();
    listAggregatedShelvesSettings = settingsBuilder.listAggregatedShelvesSettings().build();
    deleteShelfSettings = settingsBuilder.deleteShelfSettings().build();
    mergeShelvesSettings = settingsBuilder.mergeShelvesSettings().build();
    createBookSettings = settingsBuilder.createBookSettings().build();
    publishSeriesSettings = settingsBuilder.publishSeriesSettings().build();
    createInventorySettings = settingsBuilder.createInventorySettings().build();
    getBookSettings = settingsBuilder.getBookSettings().build();
    listBooksSettings = settingsBuilder.listBooksSettings().build();
    deleteBookSettings = settingsBuilder.deleteBookSettings().build();
    updateBookSettings = settingsBuilder.updateBookSettings().build();
    moveBookSettings = settingsBuilder.moveBookSettings().build();
    listStringsSettings = settingsBuilder.listStringsSettings().build();
    addCommentsSettings = settingsBuilder.addCommentsSettings().build();
    getBookFromArchiveSettings = settingsBuilder.getBookFromArchiveSettings().build();
    getBookFromAnywhereSettings = settingsBuilder.getBookFromAnywhereSettings().build();
    getBookFromAbsolutelyAnywhereSettings = settingsBuilder.getBookFromAbsolutelyAnywhereSettings().build();
    updateBookIndexSettings = settingsBuilder.updateBookIndexSettings().build();
    findRelatedBooksSettings = settingsBuilder.findRelatedBooksSettings().build();
    addTagSettings = settingsBuilder.addTagSettings().build();
    getBigBookSettings = settingsBuilder.getBigBookSettings().build();
    getBigBookOperationSettings = settingsBuilder.getBigBookOperationSettings().build();
    getBigNothingSettings = settingsBuilder.getBigNothingSettings().build();
    getBigNothingOperationSettings = settingsBuilder.getBigNothingOperationSettings().build();
    moveBooksSettings = settingsBuilder.moveBooksSettings().build();
    archiveBooksSettings = settingsBuilder.archiveBooksSettings().build();
    longRunningArchiveBooksSettings = settingsBuilder.longRunningArchiveBooksSettings().build();
    longRunningArchiveBooksOperationSettings = settingsBuilder.longRunningArchiveBooksOperationSettings().build();
    saveBookSettings = settingsBuilder.saveBookSettings().build();
    testOptionalRequiredFlatteningParamsSettings = settingsBuilder.testOptionalRequiredFlatteningParamsSettings().build();
    privateListShelvesSettings = settingsBuilder.privateListShelvesSettings().build();
  }

  private static final PagedListDescriptor<ListAggregatedShelvesRequest, ListAggregatedShelvesResponse, Entry<String, Shelf>> LIST_AGGREGATED_SHELVES_PAGE_STR_DESC =
      new PagedListDescriptor<ListAggregatedShelvesRequest, ListAggregatedShelvesResponse, Entry<String, Shelf>>() {
        @Override
        public String emptyToken() {
          return "";
        }
        @Override
        public ListAggregatedShelvesRequest injectToken(ListAggregatedShelvesRequest payload, String token) {
          return ListAggregatedShelvesRequest
            .newBuilder(payload)
            .setPageToken(token)
            .build();
        }
        @Override
        public ListAggregatedShelvesRequest injectPageSize(ListAggregatedShelvesRequest payload, int pageSize) {
          return ListAggregatedShelvesRequest
            .newBuilder(payload)
            .setMaxResults(pageSize)
            .build();
        }
        @Override
        public Integer extractPageSize(ListAggregatedShelvesRequest payload) {
          return payload.getMaxResults();
        }
        @Override
        public String extractNextToken(ListAggregatedShelvesResponse payload) {
          return payload.getNextPageToken();
        }
        @Override
        public Iterable<Entry<String, Shelf>> extractResources(ListAggregatedShelvesResponse payload) {
          return payload.getShelvesMap() != null ? payload.getShelvesMap().entrySet() :
            ImmutableList.<Entry<String, Shelf>>of();
        }
      };

  private static final PagedListDescriptor<ListBooksRequest, ListBooksResponse, Book> LIST_BOOKS_PAGE_STR_DESC =
      new PagedListDescriptor<ListBooksRequest, ListBooksResponse, Book>() {
        @Override
        public String emptyToken() {
          return "";
        }
        @Override
        public ListBooksRequest injectToken(ListBooksRequest payload, String token) {
          return ListBooksRequest
            .newBuilder(payload)
            .setPageToken(token)
            .build();
        }
        @Override
        public ListBooksRequest injectPageSize(ListBooksRequest payload, int pageSize) {
          return ListBooksRequest
            .newBuilder(payload)
            .setPageSize(pageSize)
            .build();
        }
        @Override
        public Integer extractPageSize(ListBooksRequest payload) {
          return payload.getPageSize();
        }
        @Override
        public String extractNextToken(ListBooksResponse payload) {
          return payload.getNextPageToken();
        }
        @Override
        public Iterable<Book> extractResources(ListBooksResponse payload) {
          return payload.getBooksList() != null ? payload.getBooksList() :
            ImmutableList.<Book>of();
        }
      };

  private static final PagedListDescriptor<ListStringsRequest, ListStringsResponse, String> LIST_STRINGS_PAGE_STR_DESC =
      new PagedListDescriptor<ListStringsRequest, ListStringsResponse, String>() {
        @Override
        public String emptyToken() {
          return "";
        }
        @Override
        public ListStringsRequest injectToken(ListStringsRequest payload, String token) {
          return ListStringsRequest
            .newBuilder(payload)
            .setPageToken(token)
            .build();
        }
        @Override
        public ListStringsRequest injectPageSize(ListStringsRequest payload, int pageSize) {
          return ListStringsRequest
            .newBuilder(payload)
            .setPageSize(pageSize)
            .build();
        }
        @Override
        public Integer extractPageSize(ListStringsRequest payload) {
          return payload.getPageSize();
        }
        @Override
        public String extractNextToken(ListStringsResponse payload) {
          return payload.getNextPageToken();
        }
        @Override
        public Iterable<String> extractResources(ListStringsResponse payload) {
          return payload.getStringsList() != null ? payload.getStringsList() :
            ImmutableList.<String>of();
        }
      };

  private static final PagedListDescriptor<FindRelatedBooksRequest, FindRelatedBooksResponse, String> FIND_RELATED_BOOKS_PAGE_STR_DESC =
      new PagedListDescriptor<FindRelatedBooksRequest, FindRelatedBooksResponse, String>() {
        @Override
        public String emptyToken() {
          return "";
        }
        @Override
        public FindRelatedBooksRequest injectToken(FindRelatedBooksRequest payload, String token) {
          return FindRelatedBooksRequest
            .newBuilder(payload)
            .setPageToken(token)
            .build();
        }
        @Override
        public FindRelatedBooksRequest injectPageSize(FindRelatedBooksRequest payload, int pageSize) {
          return FindRelatedBooksRequest
            .newBuilder(payload)
            .setPageSize(pageSize)
            .build();
        }
        @Override
        public Integer extractPageSize(FindRelatedBooksRequest payload) {
          return payload.getPageSize();
        }
        @Override
        public String extractNextToken(FindRelatedBooksResponse payload) {
          return payload.getNextPageToken();
        }
        @Override
        public Iterable<String> extractResources(FindRelatedBooksResponse payload) {
          return payload.getNamesList() != null ? payload.getNamesList() :
            ImmutableList.<String>of();
        }
      };

  private static final PagedListResponseFactory<ListAggregatedShelvesRequest, ListAggregatedShelvesResponse, ListAggregatedShelvesPagedResponse> LIST_AGGREGATED_SHELVES_PAGE_STR_FACT =
      new PagedListResponseFactory<ListAggregatedShelvesRequest, ListAggregatedShelvesResponse, ListAggregatedShelvesPagedResponse>() {
        @Override
        public ApiFuture<ListAggregatedShelvesPagedResponse> getFuturePagedResponse(
            UnaryCallable<ListAggregatedShelvesRequest, ListAggregatedShelvesResponse> callable,
            ListAggregatedShelvesRequest request,
            ApiCallContext context,
            ApiFuture<ListAggregatedShelvesResponse> futureResponse) {
          PageContext<ListAggregatedShelvesRequest, ListAggregatedShelvesResponse, Entry<String, Shelf>> pageContext =
              PageContext.create(callable, LIST_AGGREGATED_SHELVES_PAGE_STR_DESC, request, context);
          return ListAggregatedShelvesPagedResponse.createAsync(pageContext, futureResponse);
        }
      };

  private static final PagedListResponseFactory<ListBooksRequest, ListBooksResponse, ListBooksPagedResponse> LIST_BOOKS_PAGE_STR_FACT =
      new PagedListResponseFactory<ListBooksRequest, ListBooksResponse, ListBooksPagedResponse>() {
        @Override
        public ApiFuture<ListBooksPagedResponse> getFuturePagedResponse(
            UnaryCallable<ListBooksRequest, ListBooksResponse> callable,
            ListBooksRequest request,
            ApiCallContext context,
            ApiFuture<ListBooksResponse> futureResponse) {
          PageContext<ListBooksRequest, ListBooksResponse, Book> pageContext =
              PageContext.create(callable, LIST_BOOKS_PAGE_STR_DESC, request, context);
          return ListBooksPagedResponse.createAsync(pageContext, futureResponse);
        }
      };

  private static final PagedListResponseFactory<ListStringsRequest, ListStringsResponse, ListStringsPagedResponse> LIST_STRINGS_PAGE_STR_FACT =
      new PagedListResponseFactory<ListStringsRequest, ListStringsResponse, ListStringsPagedResponse>() {
        @Override
        public ApiFuture<ListStringsPagedResponse> getFuturePagedResponse(
            UnaryCallable<ListStringsRequest, ListStringsResponse> callable,
            ListStringsRequest request,
            ApiCallContext context,
            ApiFuture<ListStringsResponse> futureResponse) {
          PageContext<ListStringsRequest, ListStringsResponse, String> pageContext =
              PageContext.create(callable, LIST_STRINGS_PAGE_STR_DESC, request, context);
          return ListStringsPagedResponse.createAsync(pageContext, futureResponse);
        }
      };

  private static final PagedListResponseFactory<FindRelatedBooksRequest, FindRelatedBooksResponse, FindRelatedBooksPagedResponse> FIND_RELATED_BOOKS_PAGE_STR_FACT =
      new PagedListResponseFactory<FindRelatedBooksRequest, FindRelatedBooksResponse, FindRelatedBooksPagedResponse>() {
        @Override
        public ApiFuture<FindRelatedBooksPagedResponse> getFuturePagedResponse(
            UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksResponse> callable,
            FindRelatedBooksRequest request,
            ApiCallContext context,
            ApiFuture<FindRelatedBooksResponse> futureResponse) {
          PageContext<FindRelatedBooksRequest, FindRelatedBooksResponse, String> pageContext =
              PageContext.create(callable, FIND_RELATED_BOOKS_PAGE_STR_DESC, request, context);
          return FindRelatedBooksPagedResponse.createAsync(pageContext, futureResponse);
        }
      };


  /**
   * Builder for LibraryServiceStubSettings.
   */
  public static class Builder extends StubSettings.Builder<LibraryServiceStubSettings, Builder> {
    private final ImmutableList<UnaryCallSettings.Builder<?, ?>> unaryMethodSettingsBuilders;

    private final UnaryCallSettings.Builder<CreateShelfRequest, Shelf> createShelfSettings;
    private final UnaryCallSettings.Builder<GetShelfRequest, Shelf> getShelfSettings;
    private final UnaryCallSettings.Builder<ListShelvesRequest, ListShelvesResponse> listShelvesSettings;
    private final PagedCallSettings.Builder<ListAggregatedShelvesRequest, ListAggregatedShelvesResponse, ListAggregatedShelvesPagedResponse> listAggregatedShelvesSettings;
    private final UnaryCallSettings.Builder<DeleteShelfRequest, Empty> deleteShelfSettings;
    private final UnaryCallSettings.Builder<MergeShelvesRequest, Shelf> mergeShelvesSettings;
    private final UnaryCallSettings.Builder<CreateBookRequest, Book> createBookSettings;
    private final UnaryCallSettings.Builder<PublishSeriesRequest, PublishSeriesResponse> publishSeriesSettings;
    private final UnaryCallSettings.Builder<CreateInventoryRequest, Inventory> createInventorySettings;
    private final UnaryCallSettings.Builder<GetBookRequest, Book> getBookSettings;
    private final PagedCallSettings.Builder<ListBooksRequest, ListBooksResponse, ListBooksPagedResponse> listBooksSettings;
    private final UnaryCallSettings.Builder<DeleteBookRequest, Empty> deleteBookSettings;
    private final UnaryCallSettings.Builder<UpdateBookRequest, Book> updateBookSettings;
    private final UnaryCallSettings.Builder<MoveBookRequest, Book> moveBookSettings;
    private final PagedCallSettings.Builder<ListStringsRequest, ListStringsResponse, ListStringsPagedResponse> listStringsSettings;
    private final UnaryCallSettings.Builder<AddCommentsRequest, Empty> addCommentsSettings;
    private final UnaryCallSettings.Builder<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveSettings;
    private final UnaryCallSettings.Builder<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereSettings;
    private final UnaryCallSettings.Builder<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere> getBookFromAbsolutelyAnywhereSettings;
    private final UnaryCallSettings.Builder<UpdateBookIndexRequest, Empty> updateBookIndexSettings;
    private final PagedCallSettings.Builder<FindRelatedBooksRequest, FindRelatedBooksResponse, FindRelatedBooksPagedResponse> findRelatedBooksSettings;
    private final UnaryCallSettings.Builder<AddTagRequest, AddTagResponse> addTagSettings;
    private final UnaryCallSettings.Builder<GetBookRequest, Operation> getBigBookSettings;
    private final OperationCallSettings.Builder<GetBookRequest, Book, GetBigBookMetadata> getBigBookOperationSettings;
    private final UnaryCallSettings.Builder<GetBookRequest, Operation> getBigNothingSettings;
    private final OperationCallSettings.Builder<GetBookRequest, Empty, GetBigBookMetadata> getBigNothingOperationSettings;
    private final UnaryCallSettings.Builder<MoveBooksRequest, MoveBooksResponse> moveBooksSettings;
    private final UnaryCallSettings.Builder<ArchiveBooksRequest, ArchiveBooksResponse> archiveBooksSettings;
    private final UnaryCallSettings.Builder<ArchiveBooksRequest, Operation> longRunningArchiveBooksSettings;
    private final OperationCallSettings.Builder<ArchiveBooksRequest, ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksOperationSettings;
    private final UnaryCallSettings.Builder<Book, Empty> saveBookSettings;
    private final UnaryCallSettings.Builder<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsSettings;
    private final UnaryCallSettings.Builder<ListShelvesRequest, Book> privateListShelvesSettings;

    private static final ImmutableMap<String, ImmutableSet<StatusCode.Code>> RETRYABLE_CODE_DEFINITIONS;

    static {
      ImmutableMap.Builder<String, ImmutableSet<StatusCode.Code>> definitions = ImmutableMap.builder();
      definitions.put(
          "idempotent",
          ImmutableSet.copyOf(Lists.<StatusCode.Code>newArrayList(StatusCode.Code.DEADLINE_EXCEEDED, StatusCode.Code.UNAVAILABLE)));
      definitions.put(
          "non_idempotent",
          ImmutableSet.copyOf(Lists.<StatusCode.Code>newArrayList()));
      RETRYABLE_CODE_DEFINITIONS = definitions.build();
    }

    private static final ImmutableMap<String, RetrySettings> RETRY_PARAM_DEFINITIONS;

    static {
      ImmutableMap.Builder<String, RetrySettings> definitions = ImmutableMap.builder();
      RetrySettings settings = null;
      settings = RetrySettings.newBuilder()
          .setInitialRetryDelay(Duration.ofMillis(100L))
          .setRetryDelayMultiplier(1.3)
          .setMaxRetryDelay(Duration.ofMillis(60000L))
          .setInitialRpcTimeout(Duration.ofMillis(20000L))
          .setRpcTimeoutMultiplier(1.0)
          .setMaxRpcTimeout(Duration.ofMillis(20000L))
          .setTotalTimeout(Duration.ofMillis(600000L))
          .build();
      definitions.put("default", settings);
      RETRY_PARAM_DEFINITIONS = definitions.build();
    }

    protected Builder() {
      this((ClientContext) null);
    }

    protected Builder(ClientContext clientContext) {
      super(clientContext);

      createShelfSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      getShelfSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      listShelvesSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      listAggregatedShelvesSettings = PagedCallSettings.newBuilder(
          LIST_AGGREGATED_SHELVES_PAGE_STR_FACT);

      deleteShelfSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      mergeShelvesSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      createBookSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      publishSeriesSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      createInventorySettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      getBookSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      listBooksSettings = PagedCallSettings.newBuilder(
          LIST_BOOKS_PAGE_STR_FACT);

      deleteBookSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      updateBookSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      moveBookSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      listStringsSettings = PagedCallSettings.newBuilder(
          LIST_STRINGS_PAGE_STR_FACT);

      addCommentsSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      getBookFromArchiveSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      getBookFromAnywhereSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      getBookFromAbsolutelyAnywhereSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      updateBookIndexSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      findRelatedBooksSettings = PagedCallSettings.newBuilder(
          FIND_RELATED_BOOKS_PAGE_STR_FACT);

      addTagSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      getBigBookSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      getBigBookOperationSettings = OperationCallSettings.newBuilder();

      getBigNothingSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      getBigNothingOperationSettings = OperationCallSettings.newBuilder();

      moveBooksSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      archiveBooksSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      longRunningArchiveBooksSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      longRunningArchiveBooksOperationSettings = OperationCallSettings.newBuilder();

      saveBookSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      testOptionalRequiredFlatteningParamsSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      privateListShelvesSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      unaryMethodSettingsBuilders = ImmutableList.<UnaryCallSettings.Builder<?, ?>>of(
          createShelfSettings,
          getShelfSettings,
          listShelvesSettings,
          listAggregatedShelvesSettings,
          deleteShelfSettings,
          mergeShelvesSettings,
          createBookSettings,
          publishSeriesSettings,
          createInventorySettings,
          getBookSettings,
          listBooksSettings,
          deleteBookSettings,
          updateBookSettings,
          moveBookSettings,
          listStringsSettings,
          addCommentsSettings,
          getBookFromArchiveSettings,
          getBookFromAnywhereSettings,
          getBookFromAbsolutelyAnywhereSettings,
          updateBookIndexSettings,
          findRelatedBooksSettings,
          addTagSettings,
          getBigBookSettings,
          getBigNothingSettings,
          moveBooksSettings,
          archiveBooksSettings,
          longRunningArchiveBooksSettings,
          saveBookSettings,
          testOptionalRequiredFlatteningParamsSettings,
          privateListShelvesSettings
      );

      initDefaults(this);
    }

    private static Builder createDefault() {
      Builder builder = new Builder((ClientContext) null);
      builder.setTransportChannelProvider(defaultTransportChannelProvider());
      builder.setCredentialsProvider(defaultCredentialsProviderBuilder().build());
      builder.setInternalHeaderProvider(defaultApiClientHeaderProviderBuilder().build());
      builder.setEndpoint(getDefaultEndpoint());
      return initDefaults(builder);
    }

    private static Builder initDefaults(Builder builder) {

      builder.createShelfSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.getShelfSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.listShelvesSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.listAggregatedShelvesSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.deleteShelfSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.mergeShelvesSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.createBookSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.publishSeriesSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.createInventorySettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.getBookSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.listBooksSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.deleteBookSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.updateBookSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.moveBookSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.listStringsSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.addCommentsSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.getBookFromArchiveSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.getBookFromAnywhereSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.getBookFromAbsolutelyAnywhereSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.updateBookIndexSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.findRelatedBooksSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.addTagSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.getBigBookSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.getBigNothingSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.moveBooksSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.archiveBooksSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.longRunningArchiveBooksSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.saveBookSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.testOptionalRequiredFlatteningParamsSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.privateListShelvesSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));
      builder
          .getBigBookOperationSettings()
          .setInitialCallSettings(
              UnaryCallSettings.<GetBookRequest, OperationSnapshot>newUnaryCallSettingsBuilder()
                  .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
                  .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"))
                  .build())
          .setResponseTransformer(ProtoOperationTransformers.ResponseTransformer.create(Book.class))
          .setMetadataTransformer(ProtoOperationTransformers.MetadataTransformer.create(GetBigBookMetadata.class))
          .setPollingAlgorithm(
              OperationTimedPollAlgorithm.create(
                  RetrySettings.newBuilder()
                     .setInitialRetryDelay(Duration.ofMillis(500L))
                     .setRetryDelayMultiplier(1.5)
                     .setMaxRetryDelay(Duration.ofMillis(5000L))
                     .setInitialRpcTimeout(Duration.ZERO) // ignored
                     .setRpcTimeoutMultiplier(1.0) // ignored
                     .setMaxRpcTimeout(Duration.ZERO) // ignored
                     .setTotalTimeout(Duration.ofMillis(300000L))
                     .build()));
      builder
          .getBigNothingOperationSettings()
          .setInitialCallSettings(
              UnaryCallSettings.<GetBookRequest, OperationSnapshot>newUnaryCallSettingsBuilder()
                  .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
                  .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"))
                  .build())
          .setResponseTransformer(ProtoOperationTransformers.ResponseTransformer.create(Empty.class))
          .setMetadataTransformer(ProtoOperationTransformers.MetadataTransformer.create(GetBigBookMetadata.class))
          .setPollingAlgorithm(
              OperationTimedPollAlgorithm.create(
                  RetrySettings.newBuilder()
                     .setInitialRetryDelay(Duration.ofMillis(500L))
                     .setRetryDelayMultiplier(1.5)
                     .setMaxRetryDelay(Duration.ofMillis(5000L))
                     .setInitialRpcTimeout(Duration.ZERO) // ignored
                     .setRpcTimeoutMultiplier(1.0) // ignored
                     .setMaxRpcTimeout(Duration.ZERO) // ignored
                     .setTotalTimeout(Duration.ofMillis(300000L))
                     .build()));
      builder
          .longRunningArchiveBooksOperationSettings()
          .setInitialCallSettings(
              UnaryCallSettings.<ArchiveBooksRequest, OperationSnapshot>newUnaryCallSettingsBuilder()
                  .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
                  .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"))
                  .build())
          .setResponseTransformer(ProtoOperationTransformers.ResponseTransformer.create(ArchiveBooksResponse.class))
          .setMetadataTransformer(ProtoOperationTransformers.MetadataTransformer.create(ArchiveBooksMetadata.class))
          .setPollingAlgorithm(
              OperationTimedPollAlgorithm.create(
                  RetrySettings.newBuilder()
                     .setInitialRetryDelay(Duration.ofMillis(500L))
                     .setRetryDelayMultiplier(1.5)
                     .setMaxRetryDelay(Duration.ofMillis(5000L))
                     .setInitialRpcTimeout(Duration.ZERO) // ignored
                     .setRpcTimeoutMultiplier(1.0) // ignored
                     .setMaxRpcTimeout(Duration.ZERO) // ignored
                     .setTotalTimeout(Duration.ofMillis(300000L))
                     .build()));

      return builder;
    }

    protected Builder(LibraryServiceStubSettings settings) {
      super(settings);

      createShelfSettings = settings.createShelfSettings.toBuilder();
      getShelfSettings = settings.getShelfSettings.toBuilder();
      listShelvesSettings = settings.listShelvesSettings.toBuilder();
      listAggregatedShelvesSettings = settings.listAggregatedShelvesSettings.toBuilder();
      deleteShelfSettings = settings.deleteShelfSettings.toBuilder();
      mergeShelvesSettings = settings.mergeShelvesSettings.toBuilder();
      createBookSettings = settings.createBookSettings.toBuilder();
      publishSeriesSettings = settings.publishSeriesSettings.toBuilder();
      createInventorySettings = settings.createInventorySettings.toBuilder();
      getBookSettings = settings.getBookSettings.toBuilder();
      listBooksSettings = settings.listBooksSettings.toBuilder();
      deleteBookSettings = settings.deleteBookSettings.toBuilder();
      updateBookSettings = settings.updateBookSettings.toBuilder();
      moveBookSettings = settings.moveBookSettings.toBuilder();
      listStringsSettings = settings.listStringsSettings.toBuilder();
      addCommentsSettings = settings.addCommentsSettings.toBuilder();
      getBookFromArchiveSettings = settings.getBookFromArchiveSettings.toBuilder();
      getBookFromAnywhereSettings = settings.getBookFromAnywhereSettings.toBuilder();
      getBookFromAbsolutelyAnywhereSettings = settings.getBookFromAbsolutelyAnywhereSettings.toBuilder();
      updateBookIndexSettings = settings.updateBookIndexSettings.toBuilder();
      findRelatedBooksSettings = settings.findRelatedBooksSettings.toBuilder();
      addTagSettings = settings.addTagSettings.toBuilder();
      getBigBookSettings = settings.getBigBookSettings.toBuilder();
      getBigBookOperationSettings = settings.getBigBookOperationSettings.toBuilder();
      getBigNothingSettings = settings.getBigNothingSettings.toBuilder();
      getBigNothingOperationSettings = settings.getBigNothingOperationSettings.toBuilder();
      moveBooksSettings = settings.moveBooksSettings.toBuilder();
      archiveBooksSettings = settings.archiveBooksSettings.toBuilder();
      longRunningArchiveBooksSettings = settings.longRunningArchiveBooksSettings.toBuilder();
      longRunningArchiveBooksOperationSettings = settings.longRunningArchiveBooksOperationSettings.toBuilder();
      saveBookSettings = settings.saveBookSettings.toBuilder();
      testOptionalRequiredFlatteningParamsSettings = settings.testOptionalRequiredFlatteningParamsSettings.toBuilder();
      privateListShelvesSettings = settings.privateListShelvesSettings.toBuilder();

      unaryMethodSettingsBuilders = ImmutableList.<UnaryCallSettings.Builder<?, ?>>of(
          createShelfSettings,
          getShelfSettings,
          listShelvesSettings,
          listAggregatedShelvesSettings,
          deleteShelfSettings,
          mergeShelvesSettings,
          createBookSettings,
          publishSeriesSettings,
          createInventorySettings,
          getBookSettings,
          listBooksSettings,
          deleteBookSettings,
          updateBookSettings,
          moveBookSettings,
          listStringsSettings,
          addCommentsSettings,
          getBookFromArchiveSettings,
          getBookFromAnywhereSettings,
          getBookFromAbsolutelyAnywhereSettings,
          updateBookIndexSettings,
          findRelatedBooksSettings,
          addTagSettings,
          getBigBookSettings,
          getBigNothingSettings,
          moveBooksSettings,
          archiveBooksSettings,
          longRunningArchiveBooksSettings,
          saveBookSettings,
          testOptionalRequiredFlatteningParamsSettings,
          privateListShelvesSettings
      );
    }

    // NEXT_MAJOR_VER: remove 'throws Exception'
    /**
     * Applies the given settings updater function to all of the unary API methods in this service.
     *
     * Note: This method does not support applying settings to streaming methods.
     */
    public Builder applyToAllUnaryMethods(ApiFunction<UnaryCallSettings.Builder<?, ?>, Void> settingsUpdater) throws Exception {
      super.applyToAllUnaryMethods(unaryMethodSettingsBuilders, settingsUpdater);
      return this;
    }

    public ImmutableList<UnaryCallSettings.Builder<?, ?>> unaryMethodSettingsBuilders() {
      return unaryMethodSettingsBuilders;
    }

    /**
     * Returns the builder for the settings used for calls to createShelf.
     */
    public UnaryCallSettings.Builder<CreateShelfRequest, Shelf> createShelfSettings() {
      return createShelfSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getShelf.
     */
    public UnaryCallSettings.Builder<GetShelfRequest, Shelf> getShelfSettings() {
      return getShelfSettings;
    }

    /**
     * Returns the builder for the settings used for calls to listShelves.
     */
    public UnaryCallSettings.Builder<ListShelvesRequest, ListShelvesResponse> listShelvesSettings() {
      return listShelvesSettings;
    }

    /**
     * Returns the builder for the settings used for calls to listAggregatedShelves.
     */
    public PagedCallSettings.Builder<ListAggregatedShelvesRequest, ListAggregatedShelvesResponse, ListAggregatedShelvesPagedResponse> listAggregatedShelvesSettings() {
      return listAggregatedShelvesSettings;
    }

    /**
     * Returns the builder for the settings used for calls to deleteShelf.
     */
    public UnaryCallSettings.Builder<DeleteShelfRequest, Empty> deleteShelfSettings() {
      return deleteShelfSettings;
    }

    /**
     * Returns the builder for the settings used for calls to mergeShelves.
     */
    public UnaryCallSettings.Builder<MergeShelvesRequest, Shelf> mergeShelvesSettings() {
      return mergeShelvesSettings;
    }

    /**
     * Returns the builder for the settings used for calls to createBook.
     */
    public UnaryCallSettings.Builder<CreateBookRequest, Book> createBookSettings() {
      return createBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to publishSeries.
     */
    public UnaryCallSettings.Builder<PublishSeriesRequest, PublishSeriesResponse> publishSeriesSettings() {
      return publishSeriesSettings;
    }

    /**
     * Returns the builder for the settings used for calls to createInventory.
     */
    public UnaryCallSettings.Builder<CreateInventoryRequest, Inventory> createInventorySettings() {
      return createInventorySettings;
    }

    /**
     * Returns the builder for the settings used for calls to getBook.
     */
    public UnaryCallSettings.Builder<GetBookRequest, Book> getBookSettings() {
      return getBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to listBooks.
     */
    public PagedCallSettings.Builder<ListBooksRequest, ListBooksResponse, ListBooksPagedResponse> listBooksSettings() {
      return listBooksSettings;
    }

    /**
     * Returns the builder for the settings used for calls to deleteBook.
     */
    public UnaryCallSettings.Builder<DeleteBookRequest, Empty> deleteBookSettings() {
      return deleteBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to updateBook.
     */
    public UnaryCallSettings.Builder<UpdateBookRequest, Book> updateBookSettings() {
      return updateBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to moveBook.
     */
    public UnaryCallSettings.Builder<MoveBookRequest, Book> moveBookSettings() {
      return moveBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to listStrings.
     */
    public PagedCallSettings.Builder<ListStringsRequest, ListStringsResponse, ListStringsPagedResponse> listStringsSettings() {
      return listStringsSettings;
    }

    /**
     * Returns the builder for the settings used for calls to addComments.
     */
    public UnaryCallSettings.Builder<AddCommentsRequest, Empty> addCommentsSettings() {
      return addCommentsSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getBookFromArchive.
     */
    public UnaryCallSettings.Builder<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveSettings() {
      return getBookFromArchiveSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getBookFromAnywhere.
     */
    public UnaryCallSettings.Builder<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereSettings() {
      return getBookFromAnywhereSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getBookFromAbsolutelyAnywhere.
     */
    public UnaryCallSettings.Builder<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere> getBookFromAbsolutelyAnywhereSettings() {
      return getBookFromAbsolutelyAnywhereSettings;
    }

    /**
     * Returns the builder for the settings used for calls to updateBookIndex.
     */
    public UnaryCallSettings.Builder<UpdateBookIndexRequest, Empty> updateBookIndexSettings() {
      return updateBookIndexSettings;
    }

    /**
     * Returns the builder for the settings used for calls to findRelatedBooks.
     */
    public PagedCallSettings.Builder<FindRelatedBooksRequest, FindRelatedBooksResponse, FindRelatedBooksPagedResponse> findRelatedBooksSettings() {
      return findRelatedBooksSettings;
    }

    /**
     * Returns the builder for the settings used for calls to addTag.
     */
    public UnaryCallSettings.Builder<AddTagRequest, AddTagResponse> addTagSettings() {
      return addTagSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getBigBook.
     */
    public UnaryCallSettings.Builder<GetBookRequest, Operation> getBigBookSettings() {
      return getBigBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getBigBook.
     */
    @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
    public OperationCallSettings.Builder<GetBookRequest, Book, GetBigBookMetadata> getBigBookOperationSettings() {
      return getBigBookOperationSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getBigNothing.
     */
    public UnaryCallSettings.Builder<GetBookRequest, Operation> getBigNothingSettings() {
      return getBigNothingSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getBigNothing.
     */
    @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
    public OperationCallSettings.Builder<GetBookRequest, Empty, GetBigBookMetadata> getBigNothingOperationSettings() {
      return getBigNothingOperationSettings;
    }

    /**
     * Returns the builder for the settings used for calls to moveBooks.
     */
    public UnaryCallSettings.Builder<MoveBooksRequest, MoveBooksResponse> moveBooksSettings() {
      return moveBooksSettings;
    }

    /**
     * Returns the builder for the settings used for calls to archiveBooks.
     */
    public UnaryCallSettings.Builder<ArchiveBooksRequest, ArchiveBooksResponse> archiveBooksSettings() {
      return archiveBooksSettings;
    }

    /**
     * Returns the builder for the settings used for calls to longRunningArchiveBooks.
     */
    public UnaryCallSettings.Builder<ArchiveBooksRequest, Operation> longRunningArchiveBooksSettings() {
      return longRunningArchiveBooksSettings;
    }

    /**
     * Returns the builder for the settings used for calls to longRunningArchiveBooks.
     */
    @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
    public OperationCallSettings.Builder<ArchiveBooksRequest, ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksOperationSettings() {
      return longRunningArchiveBooksOperationSettings;
    }

    /**
     * Returns the builder for the settings used for calls to saveBook.
     */
    public UnaryCallSettings.Builder<Book, Empty> saveBookSettings() {
      return saveBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to testOptionalRequiredFlatteningParams.
     */
    public UnaryCallSettings.Builder<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsSettings() {
      return testOptionalRequiredFlatteningParamsSettings;
    }

    /**
     * Returns the builder for the settings used for calls to privateListShelves.
     */
    public UnaryCallSettings.Builder<ListShelvesRequest, Book> privateListShelvesSettings() {
      return privateListShelvesSettings;
    }

    @Override
    public LibraryServiceStubSettings build() throws IOException {
      return new LibraryServiceStubSettings(this);
    }
  }
}
============== file: src/main/java/com/google/example/library/v1/stub/MyProtoStub.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1.stub;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.protos.google.example.library.v1.AnotherService.MethodRequest;
import com.google.protos.google.example.library.v1.AnotherService.MethodResponse;
import com.google.protos.google.example.library.v1.AnotherService.Namespace;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * Base stub class for Google Example Library API.
 *
 * <p>This class is for advanced usage and reflects the underlying API directly.
 */
@Generated("by gapic-generator")
@BetaApi("A restructuring of stub classes is planned, so this may break in the future")
public abstract class MyProtoStub implements BackgroundResource {


  public UnaryCallable<MethodRequest, MethodResponse> myMethodCallable() {
    throw new UnsupportedOperationException("Not implemented: myMethodCallable()");
  }

  public UnaryCallable<MethodRequest, Namespace> getNamespaceCallable() {
    throw new UnsupportedOperationException("Not implemented: getNamespaceCallable()");
  }

  @Override
  public abstract void close();
}
============== file: src/main/java/com/google/example/library/v1/stub/MyProtoStubSettings.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1.stub;

import com.google.api.core.ApiFunction;
import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.core.GaxProperties;
import com.google.api.gax.core.GoogleCredentialsProvider;
import com.google.api.gax.core.InstantiatingExecutorProvider;
import com.google.api.gax.httpjson.GaxHttpJsonProperties;
import com.google.api.gax.httpjson.HttpJsonTransportChannel;
import com.google.api.gax.httpjson.InstantiatingHttpJsonChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.ApiClientHeaderProvider;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.ClientSettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.StatusCode;
import com.google.api.gax.rpc.StubSettings;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.api.gax.rpc.UnaryCallSettings;
import com.google.auth.Credentials;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.google.protos.google.example.library.v1.AnotherService.MethodRequest;
import com.google.protos.google.example.library.v1.AnotherService.MethodResponse;
import com.google.protos.google.example.library.v1.AnotherService.Namespace;
import com.google.protos.google.example.library.v1.MyProtoGrpc;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.ScheduledExecutorService;
import javax.annotation.Generated;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * Settings class to configure an instance of {@link MyProtoStub}.
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 * <li>The default service address (library-example.googleapis.com) and default port (1234)
 * are used.
 * <li>Credentials are acquired automatically through Application Default Credentials.
 * <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 *
 * <p>The builder of this class is recursive, so contained classes are themselves builders.
 * When build() is called, the tree of builders is called to create the complete settings
 * object.
 *
 * For example, to set the total timeout of myMethod to 30 seconds:
 *
 * <pre>
 * <code>
 * MyProtoStubSettings.Builder myProtoSettingsBuilder =
 *     MyProtoStubSettings.newBuilder();
 * myProtoSettingsBuilder
 *     .myMethodSettings()
 *     .setRetrySettings(
 *         myProtoSettingsBuilder.myMethodSettings().getRetrySettings().toBuilder()
 *             .setTotalTimeout(Duration.ofSeconds(30))
 *             .build());
 * MyProtoStubSettings myProtoSettings = myProtoSettingsBuilder.build();
 * </code>
 * </pre>
 */
@Generated("by gapic-generator")
@BetaApi
public class MyProtoStubSettings extends StubSettings<MyProtoStubSettings> {
  /**
   * The default scopes of the service.
   */
  private static final ImmutableList<String> DEFAULT_SERVICE_SCOPES = ImmutableList.<String>builder()
      .add("https://www.googleapis.com/auth/cloud-platform")
      .add("https://www.googleapis.com/auth/library")
      .build();

  private final UnaryCallSettings<MethodRequest, MethodResponse> myMethodSettings;
  private final UnaryCallSettings<MethodRequest, Namespace> getNamespaceSettings;

  /**
   * Returns the object with the settings used for calls to myMethod.
   */
  public UnaryCallSettings<MethodRequest, MethodResponse> myMethodSettings() {
    return myMethodSettings;
  }

  /**
   * Returns the object with the settings used for calls to getNamespace.
   */
  public UnaryCallSettings<MethodRequest, Namespace> getNamespaceSettings() {
    return getNamespaceSettings;
  }


  @BetaApi("A restructuring of stub classes is planned, so this may break in the future")
  public MyProtoStub createStub() throws IOException {
    if (getTransportChannelProvider()
        .getTransportName()
        .equals(HttpJsonTransportChannel.getHttpJsonTransportName())) {
      return HttpJsonMyProtoStub.create(this);
    } else {
      throw new UnsupportedOperationException(
          "Transport not supported: " + getTransportChannelProvider().getTransportName());
    }
  }

  /**
   * Returns a builder for the default ExecutorProvider for this service.
   */
  public static InstantiatingExecutorProvider.Builder defaultExecutorProviderBuilder() {
    return InstantiatingExecutorProvider.newBuilder();
  }

  /**
   * Returns the default service endpoint.
   */
  public static String getDefaultEndpoint() {
    return "library-example.googleapis.com";
  }

  /**
   * Returns the default service port.
   */
  public static int getDefaultServicePort() {
    return 1234;
  }


  /**
   * Returns the default service scopes.
   */
  public static List<String> getDefaultServiceScopes() {
    return DEFAULT_SERVICE_SCOPES;
  }


  /**
   * Returns a builder for the default credentials for this service.
   */
  public static GoogleCredentialsProvider.Builder defaultCredentialsProviderBuilder() {
    return GoogleCredentialsProvider.newBuilder()
        .setScopesToApply(DEFAULT_SERVICE_SCOPES)
        ;
  }

  /** Returns a builder for the default ChannelProvider for this service. */
  public static InstantiatingHttpJsonChannelProvider.Builder defaultHttpJsonTransportProviderBuilder() {
    return InstantiatingHttpJsonChannelProvider.newBuilder();
  }

  public static TransportChannelProvider defaultTransportChannelProvider() {
    return defaultHttpJsonTransportProviderBuilder().build();
  }

  @BetaApi("The surface for customizing headers is not stable yet and may change in the future.")
  public static ApiClientHeaderProvider.Builder defaultApiClientHeaderProviderBuilder() {
    return ApiClientHeaderProvider.newBuilder()
        .setGeneratedLibToken("gapic", GaxProperties.getLibraryVersion(MyProtoStubSettings.class))
        .setTransportToken(GaxHttpJsonProperties.getHttpJsonTokenName(), GaxHttpJsonProperties.getHttpJsonVersion());
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder() {
    return Builder.createDefault();
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder(ClientContext clientContext) {
    return new Builder(clientContext);
  }

  /**
   * Returns a builder containing all the values of this settings class.
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  protected MyProtoStubSettings(Builder settingsBuilder) throws IOException {
    super(settingsBuilder);

    myMethodSettings = settingsBuilder.myMethodSettings().build();
    getNamespaceSettings = settingsBuilder.getNamespaceSettings().build();
  }




  /**
   * Builder for MyProtoStubSettings.
   */
  public static class Builder extends StubSettings.Builder<MyProtoStubSettings, Builder> {
    private final ImmutableList<UnaryCallSettings.Builder<?, ?>> unaryMethodSettingsBuilders;

    private final UnaryCallSettings.Builder<MethodRequest, MethodResponse> myMethodSettings;
    private final UnaryCallSettings.Builder<MethodRequest, Namespace> getNamespaceSettings;

    private static final ImmutableMap<String, ImmutableSet<StatusCode.Code>> RETRYABLE_CODE_DEFINITIONS;

    static {
      ImmutableMap.Builder<String, ImmutableSet<StatusCode.Code>> definitions = ImmutableMap.builder();
      definitions.put(
          "idempotent",
          ImmutableSet.copyOf(Lists.<StatusCode.Code>newArrayList(StatusCode.Code.DEADLINE_EXCEEDED, StatusCode.Code.UNAVAILABLE)));
      definitions.put(
          "non_idempotent",
          ImmutableSet.copyOf(Lists.<StatusCode.Code>newArrayList()));
      RETRYABLE_CODE_DEFINITIONS = definitions.build();
    }

    private static final ImmutableMap<String, RetrySettings> RETRY_PARAM_DEFINITIONS;

    static {
      ImmutableMap.Builder<String, RetrySettings> definitions = ImmutableMap.builder();
      RetrySettings settings = null;
      settings = RetrySettings.newBuilder()
          .setInitialRetryDelay(Duration.ofMillis(100L))
          .setRetryDelayMultiplier(1.3)
          .setMaxRetryDelay(Duration.ofMillis(60000L))
          .setInitialRpcTimeout(Duration.ofMillis(20000L))
          .setRpcTimeoutMultiplier(1.0)
          .setMaxRpcTimeout(Duration.ofMillis(20000L))
          .setTotalTimeout(Duration.ofMillis(600000L))
          .build();
      definitions.put("default", settings);
      RETRY_PARAM_DEFINITIONS = definitions.build();
    }

    protected Builder() {
      this((ClientContext) null);
    }

    protected Builder(ClientContext clientContext) {
      super(clientContext);

      myMethodSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      getNamespaceSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      unaryMethodSettingsBuilders = ImmutableList.<UnaryCallSettings.Builder<?, ?>>of(
          myMethodSettings,
          getNamespaceSettings
      );

      initDefaults(this);
    }

    private static Builder createDefault() {
      Builder builder = new Builder((ClientContext) null);
      builder.setTransportChannelProvider(defaultTransportChannelProvider());
      builder.setCredentialsProvider(defaultCredentialsProviderBuilder().build());
      builder.setInternalHeaderProvider(defaultApiClientHeaderProviderBuilder().build());
      builder.setEndpoint(getDefaultEndpoint());
      return initDefaults(builder);
    }

    private static Builder initDefaults(Builder builder) {

      builder.myMethodSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.getNamespaceSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      return builder;
    }

    protected Builder(MyProtoStubSettings settings) {
      super(settings);

      myMethodSettings = settings.myMethodSettings.toBuilder();
      getNamespaceSettings = settings.getNamespaceSettings.toBuilder();

      unaryMethodSettingsBuilders = ImmutableList.<UnaryCallSettings.Builder<?, ?>>of(
          myMethodSettings,
          getNamespaceSettings
      );
    }

    // NEXT_MAJOR_VER: remove 'throws Exception'
    /**
     * Applies the given settings updater function to all of the unary API methods in this service.
     *
     * Note: This method does not support applying settings to streaming methods.
     */
    public Builder applyToAllUnaryMethods(ApiFunction<UnaryCallSettings.Builder<?, ?>, Void> settingsUpdater) throws Exception {
      super.applyToAllUnaryMethods(unaryMethodSettingsBuilders, settingsUpdater);
      return this;
    }

    public ImmutableList<UnaryCallSettings.Builder<?, ?>> unaryMethodSettingsBuilders() {
      return unaryMethodSettingsBuilders;
    }

    /**
     * Returns the builder for the settings used for calls to myMethod.
     */
    public UnaryCallSettings.Builder<MethodRequest, MethodResponse> myMethodSettings() {
      return myMethodSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getNamespace.
     */
    public UnaryCallSettings.Builder<MethodRequest, Namespace> getNamespaceSettings() {
      return getNamespaceSettings;
    }

    @Override
    public MyProtoStubSettings build() throws IOException {
      return new MyProtoStubSettings(this);
    }
  }
}
============== file: src/test/java/com/google/example/library/v1/LibraryServiceClientTest.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1;

import com.google.api.gax.core.NoCredentialsProvider;
import com.google.api.gax.httpjson.ApiMethodDescriptor;
import com.google.api.gax.httpjson.GaxHttpJsonProperties;
import com.google.api.gax.httpjson.testing.MockHttpService;
import com.google.api.gax.rpc.ApiClientHeaderProvider;
import com.google.api.gax.rpc.ApiException;
import com.google.api.gax.rpc.ApiExceptionFactory;
import com.google.api.gax.rpc.InvalidArgumentException;
import com.google.api.gax.rpc.StatusCode.Code;
import com.google.api.gax.rpc.testing.FakeStatusCode;
import com.google.api.resourcenames.ResourceName;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;
import com.google.example.library.v1.Book;
import static com.google.example.library.v1.LibraryServiceClient.FindRelatedBooksPagedResponse;
import static com.google.example.library.v1.LibraryServiceClient.ListAggregatedShelvesPagedResponse;
import static com.google.example.library.v1.LibraryServiceClient.ListBooksPagedResponse;
import static com.google.example.library.v1.LibraryServiceClient.ListStringsPagedResponse;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest.InnerMessage;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.addCommentsMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.addTagMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.archiveBooksMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.createBookMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.createInventoryMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.createShelfMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.deleteBookMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.deleteShelfMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.findRelatedBooksMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.getBigBookMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.getBigNothingMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.getBookFromAbsolutelyAnywhereMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.getBookFromAnywhereMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.getBookFromArchiveMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.getBookMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.getShelfMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.listAggregatedShelvesMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.listBooksMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.listShelvesMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.listStringsMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.longRunningArchiveBooksMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.mergeShelvesMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.moveBookMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.moveBooksMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.privateListShelvesMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.publishSeriesMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.saveBookMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.testOptionalRequiredFlatteningParamsMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.updateBookIndexMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonLibraryServiceStub.updateBookMethodDescriptor;
import com.google.example.library.v1.stub.LibraryServiceStubSettings;
import com.google.longrunning.Operation;
import com.google.protobuf.Any;
import com.google.protobuf.BoolValue;
import com.google.protobuf.ByteString;
import com.google.protobuf.BytesValue;
import com.google.protobuf.DoubleValue;
import com.google.protobuf.Duration;
import com.google.protobuf.Empty;
import com.google.protobuf.FieldMask;
import com.google.protobuf.FloatValue;
import com.google.protobuf.Int32Value;
import com.google.protobuf.Int64Value;
import com.google.protobuf.ListValue;
import com.google.protobuf.StringValue;
import com.google.protobuf.Struct;
import com.google.protobuf.Timestamp;
import com.google.protobuf.UInt32Value;
import com.google.protobuf.UInt64Value;
import com.google.protobuf.Value;
import com.google.tagger.v1.TaggerProto.AddTagRequest;
import com.google.tagger.v1.TaggerProto.AddTagResponse;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

@javax.annotation.Generated("by GAPIC")
public class LibraryServiceClientTest {
  private static final List<ApiMethodDescriptor> METHOD_DESCRIPTORS = ImmutableList.copyOf(
        Lists.<ApiMethodDescriptor>newArrayList(
          createShelfMethodDescriptor,
          getShelfMethodDescriptor,
          getShelfMethodDescriptor,
          getShelfMethodDescriptor,
          listShelvesMethodDescriptor,
          listAggregatedShelvesMethodDescriptor,
          deleteShelfMethodDescriptor,
          mergeShelvesMethodDescriptor,
          createBookMethodDescriptor,
          publishSeriesMethodDescriptor,
          createInventoryMethodDescriptor,
          getBookMethodDescriptor,
          listBooksMethodDescriptor,
          deleteBookMethodDescriptor,
          updateBookMethodDescriptor,
          updateBookMethodDescriptor,
          moveBookMethodDescriptor,
          listStringsMethodDescriptor,
          listStringsMethodDescriptor,
          addCommentsMethodDescriptor,
          getBookFromArchiveMethodDescriptor,
          getBookFromAnywhereMethodDescriptor,
          getBookFromAbsolutelyAnywhereMethodDescriptor,
          updateBookIndexMethodDescriptor,
          findRelatedBooksMethodDescriptor,
          addTagMethodDescriptor,
          getBigBookMethodDescriptor,
          getBigNothingMethodDescriptor,
          moveBooksMethodDescriptor,
          archiveBooksMethodDescriptor,
          longRunningArchiveBooksMethodDescriptor,
          saveBookMethodDescriptor,
          testOptionalRequiredFlatteningParamsMethodDescriptor,
          testOptionalRequiredFlatteningParamsMethodDescriptor,
          privateListShelvesMethodDescriptor
        ));
  private static final MockHttpService mockService
      = new MockHttpService(METHOD_DESCRIPTORS, LibraryServiceStubSettings.getDefaultEndpoint());

  private static LibraryServiceClient client;
  private static LibraryServiceSettings clientSettings;

  @BeforeClass
  public static void setUp() throws IOException {
    clientSettings =
        LibraryServiceSettings.newBuilder()
           .setTransportChannelProvider(
               LibraryServiceSettings.defaultHttpJsonTransportProviderBuilder()
                   .setHttpTransport(mockService).build())
           .setCredentialsProvider(NoCredentialsProvider.create())
           .build();
    client =
       LibraryServiceClient.create(clientSettings);
  }

  @After
  public void cleanUp() {
    mockService.reset();
  }

  @AfterClass
  public static void tearDown() throws Exception {
    client.close();
  }

  @Test
  @SuppressWarnings("all")
  public void createShelfTest() {
    ShelfName name = ShelfName.of("[SHELF]");
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setName(name.toString())
      .setTheme(theme)
      .setInternalTheme(internalTheme)
      .build();
    mockService.addResponse(expectedResponse);

    Shelf shelf = Shelf.newBuilder().build();

    Shelf actualResponse =
        client.createShelf(shelf);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void createShelfExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      Shelf shelf = Shelf.newBuilder().build();

      client.createShelf(shelf);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfTest() {
    ShelfName name2 = ShelfName.of("[SHELF]");
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setName(name2.toString())
      .setTheme(theme)
      .setInternalTheme(internalTheme)
      .build();
    mockService.addResponse(expectedResponse);

    ShelfName name = ShelfName.of("[SHELF]");

    Shelf actualResponse =
        client.getShelf(name);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      ShelfName name = ShelfName.of("[SHELF]");

      client.getShelf(name);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfTest2() {
    ShelfName name2 = ShelfName.of("[SHELF]");
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setName(name2.toString())
      .setTheme(theme)
      .setInternalTheme(internalTheme)
      .build();
    mockService.addResponse(expectedResponse);

    ShelfName name = ShelfName.of("[SHELF]");
    SomeMessage message = SomeMessage.newBuilder().build();

    Shelf actualResponse =
        client.getShelf(name, message);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfExceptionTest2() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      ShelfName name = ShelfName.of("[SHELF]");
      SomeMessage message = SomeMessage.newBuilder().build();

      client.getShelf(name, message);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfTest3() {
    ShelfName name2 = ShelfName.of("[SHELF]");
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setName(name2.toString())
      .setTheme(theme)
      .setInternalTheme(internalTheme)
      .build();
    mockService.addResponse(expectedResponse);

    ShelfName name = ShelfName.of("[SHELF]");
    SomeMessage message = SomeMessage.newBuilder().build();
    com.google.example.library.v1.StringBuilder stringBuilder = com.google.example.library.v1.StringBuilder.newBuilder().build();

    Shelf actualResponse =
        client.getShelf(name, message, stringBuilder);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfExceptionTest3() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      ShelfName name = ShelfName.of("[SHELF]");
      SomeMessage message = SomeMessage.newBuilder().build();
      com.google.example.library.v1.StringBuilder stringBuilder = com.google.example.library.v1.StringBuilder.newBuilder().build();

      client.getShelf(name, message, stringBuilder);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void listShelvesTest() {
    String nextPageToken = "nextPageToken-1530815211";
    ListShelvesResponse expectedResponse = ListShelvesResponse.newBuilder()
      .setNextPageToken(nextPageToken)
      .build();
    mockService.addResponse(expectedResponse);

    ListShelvesResponse actualResponse =
        client.listShelves();
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void listShelvesExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      client.listShelves();
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void listAggregatedShelvesTest() {
    String nextPageToken = "";
    Shelf shelvesItem = Shelf.newBuilder().build();
    Map<String, Shelf> shelves = new HashMap<>();
    shelves.put("shelves", shelvesItem);
    ListAggregatedShelvesResponse expectedResponse = ListAggregatedShelvesResponse.newBuilder()
      .setNextPageToken(nextPageToken)
      .putAllShelves(shelves)
      .build();
    mockService.addResponse(expectedResponse);

    ListAggregatedShelvesPagedResponse pagedListResponse = client.listAggregatedShelves();

    List<Entry<String, Shelf>> resources = Lists.newArrayList(pagedListResponse.iterateAll());
    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getShelvesMap().entrySet().iterator().next(), resources.get(0));

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void listAggregatedShelvesExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      client.listAggregatedShelves();
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void deleteShelfTest() {
    Empty expectedResponse = Empty.newBuilder().build();
    mockService.addResponse(expectedResponse);

    ShelfName name = ShelfName.of("[SHELF]");

    client.deleteShelf(name);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void deleteShelfExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      ShelfName name = ShelfName.of("[SHELF]");

      client.deleteShelf(name);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void mergeShelvesTest() {
    ShelfName name2 = ShelfName.of("[SHELF]");
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setName(name2.toString())
      .setTheme(theme)
      .setInternalTheme(internalTheme)
      .build();
    mockService.addResponse(expectedResponse);

    ShelfName name = ShelfName.of("[SHELF]");
    ShelfName otherShelfName = ShelfName.of("[SHELF]");

    Shelf actualResponse =
        client.mergeShelves(name, otherShelfName);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void mergeShelvesExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      ShelfName name = ShelfName.of("[SHELF]");
      ShelfName otherShelfName = ShelfName.of("[SHELF]");

      client.mergeShelves(name, otherShelfName);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void createBookTest() {
    BookName name2 = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    ReaderName reader = ReaderName.ofProjectReaderName("[PROJECT]", "[READER]");
    Book expectedResponse = Book.newBuilder()
      .setName(name2.toString())
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .setReader(reader.toString())
      .build();
    mockService.addResponse(expectedResponse);

    ShelfName name = ShelfName.of("[SHELF]");
    Book book = Book.newBuilder().build();

    Book actualResponse =
        client.createBook(name, book);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void createBookExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      ShelfName name = ShelfName.of("[SHELF]");
      Book book = Book.newBuilder().build();

      client.createBook(name, book);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void publishSeriesTest() {
    PublishSeriesResponse expectedResponse = PublishSeriesResponse.newBuilder().build();
    mockService.addResponse(expectedResponse);

    Shelf shelf = Shelf.newBuilder().build();
    List<Book> books = new ArrayList<>();
    int edition = 1887963714;
    SeriesUuid seriesUuid = SeriesUuid.newBuilder().build();
    PublisherName publisher = PublisherName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");

    PublishSeriesResponse actualResponse =
        client.publishSeries(shelf, books, edition, seriesUuid, publisher);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void publishSeriesExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      Shelf shelf = Shelf.newBuilder().build();
      List<Book> books = new ArrayList<>();
      int edition = 1887963714;
      SeriesUuid seriesUuid = SeriesUuid.newBuilder().build();
      PublisherName publisher = PublisherName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");

      client.publishSeries(shelf, books, edition, seriesUuid, publisher);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void createInventoryTest() {
    InventoryName name = InventoryName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");
    Inventory expectedResponse = Inventory.newBuilder()
      .setName(name.toString())
      .build();
    mockService.addResponse(expectedResponse);

    PublisherName parent = PublisherName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");
    Inventory inventory = Inventory.newBuilder().build();
    ResourceName asset = ArchiveName.of("[ARCHIVE]");
    ResourceName parentAsset = ArchiveName.of("[ARCHIVE]");
    List<String> assets = new ArrayList<>();

    Inventory actualResponse =
        client.createInventory(parent, inventory, asset, parentAsset, assets);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void createInventoryExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      PublisherName parent = PublisherName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");
      Inventory inventory = Inventory.newBuilder().build();
      ResourceName asset = ArchiveName.of("[ARCHIVE]");
      ResourceName parentAsset = ArchiveName.of("[ARCHIVE]");
      List<String> assets = new ArrayList<>();

      client.createInventory(parent, inventory, asset, parentAsset, assets);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getBookTest() {
    BookName name2 = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    ReaderName reader = ReaderName.ofProjectReaderName("[PROJECT]", "[READER]");
    Book expectedResponse = Book.newBuilder()
      .setName(name2.toString())
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .setReader(reader.toString())
      .build();
    mockService.addResponse(expectedResponse);

    BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");

    Book actualResponse =
        client.getBook(name);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void getBookExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");

      client.getBook(name);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void listBooksTest() {
    String nextPageToken = "";
    Book booksElement = Book.newBuilder().build();
    List<Book> books = Arrays.asList(booksElement);
    ListBooksResponse expectedResponse = ListBooksResponse.newBuilder()
      .setNextPageToken(nextPageToken)
      .addAllBooks(books)
      .build();
    mockService.addResponse(expectedResponse);

    ShelfName name = ShelfName.of("[SHELF]");
    String filter = "filter-1274492040";

    ListBooksPagedResponse pagedListResponse = client.listBooks(name, filter);

    List<Book> resources = Lists.newArrayList(pagedListResponse.iterateAll());
    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getBooksList().get(0), resources.get(0));

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void listBooksExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      ShelfName name = ShelfName.of("[SHELF]");
      String filter = "filter-1274492040";

      client.listBooks(name, filter);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void deleteBookTest() {
    Empty expectedResponse = Empty.newBuilder().build();
    mockService.addResponse(expectedResponse);

    BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");

    client.deleteBook(name);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void deleteBookExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");

      client.deleteBook(name);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookTest() {
    BookName name2 = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    ReaderName reader = ReaderName.ofProjectReaderName("[PROJECT]", "[READER]");
    Book expectedResponse = Book.newBuilder()
      .setName(name2.toString())
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .setReader(reader.toString())
      .build();
    mockService.addResponse(expectedResponse);

    BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
    Book book = Book.newBuilder().build();

    Book actualResponse =
        client.updateBook(name, book);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
      Book book = Book.newBuilder().build();

      client.updateBook(name, book);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookTest2() {
    BookName name2 = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    ReaderName reader = ReaderName.ofProjectReaderName("[PROJECT]", "[READER]");
    Book expectedResponse = Book.newBuilder()
      .setName(name2.toString())
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .setReader(reader.toString())
      .build();
    mockService.addResponse(expectedResponse);

    BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
    String optionalFoo = "optionalFoo1822578535";
    Book book = Book.newBuilder().build();
    FieldMask updateMask = FieldMask.newBuilder().build();
    com.google.example.library.v1.FieldMask physicalMask = com.google.example.library.v1.FieldMask.newBuilder().build();

    Book actualResponse =
        client.updateBook(name, optionalFoo, book, updateMask, physicalMask);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookExceptionTest2() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
      String optionalFoo = "optionalFoo1822578535";
      Book book = Book.newBuilder().build();
      FieldMask updateMask = FieldMask.newBuilder().build();
      com.google.example.library.v1.FieldMask physicalMask = com.google.example.library.v1.FieldMask.newBuilder().build();

      client.updateBook(name, optionalFoo, book, updateMask, physicalMask);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void moveBookTest() {
    BookName name2 = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    ReaderName reader = ReaderName.ofProjectReaderName("[PROJECT]", "[READER]");
    Book expectedResponse = Book.newBuilder()
      .setName(name2.toString())
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .setReader(reader.toString())
      .build();
    mockService.addResponse(expectedResponse);

    BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
    ShelfName otherShelfName = ShelfName.of("[SHELF]");

    Book actualResponse =
        client.moveBook(name, otherShelfName);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void moveBookExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
      ShelfName otherShelfName = ShelfName.of("[SHELF]");

      client.moveBook(name, otherShelfName);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void listStringsTest() {
    String nextPageToken = "";
    ResourceName stringsElement = ArchiveName.of("[ARCHIVE]");
    List<ResourceName> strings = Arrays.asList(stringsElement);
    ListStringsResponse expectedResponse = ListStringsResponse.newBuilder()
      .setNextPageToken(nextPageToken)
      .addAllStrings(UntypedResourceName.toStringList(strings))
      .build();
    mockService.addResponse(expectedResponse);

    ListStringsPagedResponse pagedListResponse = client.listStrings();

    List<String> resources = Lists.newArrayList(pagedListResponse.iterateAll());
    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getStringsList().get(0), resources.get(0));
    List<ResourceName> resourceNames = Lists.newArrayList(pagedListResponse.iterateAllAsResourceName());
    Assert.assertEquals(1, resourceNames.size());
    Assert.assertEquals(UntypedResourceName.parse(expectedResponse.getStringsList().get(0)),
        resourceNames.get(0));

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void listStringsExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      client.listStrings();
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void listStringsTest2() {
    String nextPageToken = "";
    ResourceName stringsElement = ArchiveName.of("[ARCHIVE]");
    List<ResourceName> strings = Arrays.asList(stringsElement);
    ListStringsResponse expectedResponse = ListStringsResponse.newBuilder()
      .setNextPageToken(nextPageToken)
      .addAllStrings(UntypedResourceName.toStringList(strings))
      .build();
    mockService.addResponse(expectedResponse);

    ResourceName name = ArchiveName.of("[ARCHIVE]");

    ListStringsPagedResponse pagedListResponse = client.listStrings(name);

    List<String> resources = Lists.newArrayList(pagedListResponse.iterateAll());
    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getStringsList().get(0), resources.get(0));
    List<ResourceName> resourceNames = Lists.newArrayList(pagedListResponse.iterateAllAsResourceName());
    Assert.assertEquals(1, resourceNames.size());
    Assert.assertEquals(UntypedResourceName.parse(expectedResponse.getStringsList().get(0)),
        resourceNames.get(0));

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void listStringsExceptionTest2() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      ResourceName name = ArchiveName.of("[ARCHIVE]");

      client.listStrings(name);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void addCommentsTest() {
    Empty expectedResponse = Empty.newBuilder().build();
    mockService.addResponse(expectedResponse);

    BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
    List<Comment> comments = new ArrayList<>();

    client.addComments(name, comments);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void addCommentsExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
      List<Comment> comments = new ArrayList<>();

      client.addComments(name, comments);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getBookFromArchiveTest() {
    ArchivedBookName name2 = ArchivedBookName.of("[ARCHIVE]", "[BOOK]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    BookFromArchive expectedResponse = BookFromArchive.newBuilder()
      .setName(name2.toString())
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    mockService.addResponse(expectedResponse);

    ArchivedBookName name = ArchivedBookName.of("[ARCHIVE]", "[BOOK]");
    ProjectName parent = ProjectName.of("[PROJECT]");

    BookFromArchive actualResponse =
        client.getBookFromArchive(name, parent);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void getBookFromArchiveExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      ArchivedBookName name = ArchivedBookName.of("[ARCHIVE]", "[BOOK]");
      ProjectName parent = ProjectName.of("[PROJECT]");

      client.getBookFromArchive(name, parent);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getBookFromAnywhereTest() {
    BookName name2 = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    BookFromAnywhere expectedResponse = BookFromAnywhere.newBuilder()
      .setName(name2.toString())
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    mockService.addResponse(expectedResponse);

    BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
    BookName altBookName = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
    LocationName place = LocationName.of("[PROJECT]", "[LOCATION]");
    FolderName folder = FolderName.of("[FOLDER]");

    BookFromAnywhere actualResponse =
        client.getBookFromAnywhere(name, altBookName, place, folder);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void getBookFromAnywhereExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
      BookName altBookName = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
      LocationName place = LocationName.of("[PROJECT]", "[LOCATION]");
      FolderName folder = FolderName.of("[FOLDER]");

      client.getBookFromAnywhere(name, altBookName, place, folder);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getBookFromAbsolutelyAnywhereTest() {
    BookName name2 = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    BookFromAnywhere expectedResponse = BookFromAnywhere.newBuilder()
      .setName(name2.toString())
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    mockService.addResponse(expectedResponse);

    BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");

    BookFromAnywhere actualResponse =
        client.getBookFromAbsolutelyAnywhere(name);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void getBookFromAbsolutelyAnywhereExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");

      client.getBookFromAbsolutelyAnywhere(name);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookIndexTest() {
    Empty expectedResponse = Empty.newBuilder().build();
    mockService.addResponse(expectedResponse);

    BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
    String indexName = "indexName746962392";
    Map<String, String> indexMap = new HashMap<>();

    client.updateBookIndex(name, indexName, indexMap);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookIndexExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
      String indexName = "indexName746962392";
      Map<String, String> indexMap = new HashMap<>();

      client.updateBookIndex(name, indexName, indexMap);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void findRelatedBooksTest() {
    String nextPageToken = "";
    BookName namesElement = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
    List<BookName> names2 = Arrays.asList(namesElement);
    FindRelatedBooksResponse expectedResponse = FindRelatedBooksResponse.newBuilder()
      .setNextPageToken(nextPageToken)
      .addAllNames(BookName.toStringList(names2))
      .build();
    mockService.addResponse(expectedResponse);

    List<String> names = new ArrayList<>();
    List<String> formattedShelves = new ArrayList<>();

    FindRelatedBooksPagedResponse pagedListResponse = client.findRelatedBooks(names, formattedShelves);

    List<String> resources = Lists.newArrayList(pagedListResponse.iterateAll());
    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getNamesList().get(0), resources.get(0));
    List<BookName> resourceNames = Lists.newArrayList(pagedListResponse.iterateAllAsBookName());
    Assert.assertEquals(1, resourceNames.size());
    Assert.assertEquals(BookName.parse(expectedResponse.getNamesList().get(0)),
        resourceNames.get(0));

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void findRelatedBooksExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      List<String> names = new ArrayList<>();
      List<String> formattedShelves = new ArrayList<>();

      client.findRelatedBooks(names, formattedShelves);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void addTagTest() {
    AddTagResponse expectedResponse = AddTagResponse.newBuilder().build();
    mockService.addResponse(expectedResponse);

    ResourceName resource = ArchiveName.of("[ARCHIVE]");
    String tag = "tag114586";

    AddTagResponse actualResponse =
        client.addTag(resource, tag);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void addTagExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      ResourceName resource = ArchiveName.of("[ARCHIVE]");
      String tag = "tag114586";

      client.addTag(resource, tag);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getBigBookTest() throws Exception {
    BookName name2 = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    ReaderName reader = ReaderName.ofProjectReaderName("[PROJECT]", "[READER]");
    Book expectedResponse = Book.newBuilder()
      .setName(name2.toString())
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .setReader(reader.toString())
      .build();
    Operation resultOperation =
        Operation.newBuilder()
            .setName("getBigBookTest")
            .setDone(true)
            .setResponse(Any.pack(expectedResponse))
            .build();
    mockLibraryService.addResponse(resultOperation);

    BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");

    Book actualResponse =
        client.getBigBookAsync(name).get();
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void getBigBookExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");

      client.getBigBookAsync(name).get();
      Assert.fail("No exception raised");
    } catch (ExecutionException e) {
      Assert.assertEquals(InvalidArgumentException.class, e.getCause().getClass());
      InvalidArgumentException apiException = (InvalidArgumentException) e.getCause();
      Assert.assertEquals(StatusCode.Code.INVALID_ARGUMENT, apiException.getStatusCode().getCode());
    }
  }


  @Test
  @SuppressWarnings("all")
  public void getBigNothingTest() throws Exception {
    Empty expectedResponse = Empty.newBuilder().build();
    Operation resultOperation =
        Operation.newBuilder()
            .setName("getBigNothingTest")
            .setDone(true)
            .setResponse(Any.pack(expectedResponse))
            .build();
    mockLibraryService.addResponse(resultOperation);

    BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");

    Empty actualResponse =
        client.getBigNothingAsync(name).get();
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void getBigNothingExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");

      client.getBigNothingAsync(name).get();
      Assert.fail("No exception raised");
    } catch (ExecutionException e) {
      Assert.assertEquals(InvalidArgumentException.class, e.getCause().getClass());
      InvalidArgumentException apiException = (InvalidArgumentException) e.getCause();
      Assert.assertEquals(StatusCode.Code.INVALID_ARGUMENT, apiException.getStatusCode().getCode());
    }
  }


  @Test
  @SuppressWarnings("all")
  public void moveBooksTest() {
    boolean success = false;
    MoveBooksResponse expectedResponse = MoveBooksResponse.newBuilder()
      .setSuccess(success)
      .build();
    mockService.addResponse(expectedResponse);

    ArchiveName source = ArchiveName.of("[ARCHIVE]");
    ArchiveName destination = ArchiveName.of("[ARCHIVE]");
    List<String> formattedPublishers = new ArrayList<>();
    ProjectName project = ProjectName.of("[PROJECT]");

    MoveBooksResponse actualResponse =
        client.moveBooks(source, destination, formattedPublishers, project);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void moveBooksExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      ArchiveName source = ArchiveName.of("[ARCHIVE]");
      ArchiveName destination = ArchiveName.of("[ARCHIVE]");
      List<String> formattedPublishers = new ArrayList<>();
      ProjectName project = ProjectName.of("[PROJECT]");

      client.moveBooks(source, destination, formattedPublishers, project);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void archiveBooksTest() {
    boolean success = false;
    ArchiveBooksResponse expectedResponse = ArchiveBooksResponse.newBuilder()
      .setSuccess(success)
      .build();
    mockService.addResponse(expectedResponse);

    ArchiveName source = ArchiveName.of("[ARCHIVE]");
    ArchiveName archive = ArchiveName.of("[ARCHIVE]");

    ArchiveBooksResponse actualResponse =
        client.archiveBooks(source, archive);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void archiveBooksExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      ArchiveName source = ArchiveName.of("[ARCHIVE]");
      ArchiveName archive = ArchiveName.of("[ARCHIVE]");

      client.archiveBooks(source, archive);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void longRunningArchiveBooksTest() throws Exception {
    boolean success = false;
    ArchiveBooksResponse expectedResponse = ArchiveBooksResponse.newBuilder()
      .setSuccess(success)
      .build();
    Operation resultOperation =
        Operation.newBuilder()
            .setName("longRunningArchiveBooksTest")
            .setDone(true)
            .setResponse(Any.pack(expectedResponse))
            .build();
    mockLibraryService.addResponse(resultOperation);

    ArchiveName source = ArchiveName.of("[ARCHIVE]");
    ArchiveName archive = ArchiveName.of("[ARCHIVE]");

    ArchiveBooksResponse actualResponse =
        client.longRunningArchiveBooksAsync(source, archive).get();
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void longRunningArchiveBooksExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      ArchiveName source = ArchiveName.of("[ARCHIVE]");
      ArchiveName archive = ArchiveName.of("[ARCHIVE]");

      client.longRunningArchiveBooksAsync(source, archive).get();
      Assert.fail("No exception raised");
    } catch (ExecutionException e) {
      Assert.assertEquals(InvalidArgumentException.class, e.getCause().getClass());
      InvalidArgumentException apiException = (InvalidArgumentException) e.getCause();
      Assert.assertEquals(StatusCode.Code.INVALID_ARGUMENT, apiException.getStatusCode().getCode());
    }
  }


  @Test
  @SuppressWarnings("all")
  public void saveBookTest() {
    Empty expectedResponse = Empty.newBuilder().build();
    mockService.addResponse(expectedResponse);

    BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
    String author = "author-1406328437";
    String title = "title110371416";
    Book.Rating rating = Book.Rating.GOOD;

    client.saveBook(name, author, title, rating);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void saveBookExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
      String author = "author-1406328437";
      String title = "title110371416";
      Book.Rating rating = Book.Rating.GOOD;

      client.saveBook(name, author, title, rating);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void testOptionalRequiredFlatteningParamsTest() {
    TestOptionalRequiredFlatteningParamsResponse expectedResponse = TestOptionalRequiredFlatteningParamsResponse.newBuilder().build();
    mockService.addResponse(expectedResponse);

    TestOptionalRequiredFlatteningParamsResponse actualResponse =
        client.testOptionalRequiredFlatteningParams();
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void testOptionalRequiredFlatteningParamsExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      client.testOptionalRequiredFlatteningParams();
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void testOptionalRequiredFlatteningParamsTest2() {
    TestOptionalRequiredFlatteningParamsResponse expectedResponse = TestOptionalRequiredFlatteningParamsResponse.newBuilder().build();
    mockService.addResponse(expectedResponse);

    int requiredSingularInt32 = 72313594;
    long requiredSingularInt64 = 72313499L;
    float requiredSingularFloat = -7514705.0F;
    double requiredSingularDouble = 1.9111005E8;
    boolean requiredSingularBool = true;
    TestOptionalRequiredFlatteningParamsRequest.InnerEnum requiredSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
    String requiredSingularString = "requiredSingularString-1949894503";
    ByteString requiredSingularBytes = ByteString.copyFromUtf8("-29");
    TestOptionalRequiredFlatteningParamsRequest.InnerMessage requiredSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
    BookName requiredSingularResourceName = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
    BookName requiredSingularResourceNameOneof = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
    String requiredSingularResourceNameCommon = "requiredSingularResourceNameCommon-1126805002";
    int requiredSingularFixed32 = 720656715;
    long requiredSingularFixed64 = 720656810;
    List<Integer> requiredRepeatedInt32 = new ArrayList<>();
    List<Long> requiredRepeatedInt64 = new ArrayList<>();
    List<Float> requiredRepeatedFloat = new ArrayList<>();
    List<Double> requiredRepeatedDouble = new ArrayList<>();
    List<Boolean> requiredRepeatedBool = new ArrayList<>();
    List<TestOptionalRequiredFlatteningParamsRequest.InnerEnum> requiredRepeatedEnum = new ArrayList<>();
    List<String> requiredRepeatedString = new ArrayList<>();
    List<ByteString> requiredRepeatedBytes = new ArrayList<>();
    List<TestOptionalRequiredFlatteningParamsRequest.InnerMessage> requiredRepeatedMessage = new ArrayList<>();
    List<String> requiredRepeatedResourceName = new ArrayList<>();
    List<String> requiredRepeatedResourceNameOneof = new ArrayList<>();
    List<String> requiredRepeatedResourceNameCommon = new ArrayList<>();
    List<Integer> requiredRepeatedFixed32 = new ArrayList<>();
    List<Long> requiredRepeatedFixed64 = new ArrayList<>();
    Map<Integer, String> requiredMap = new HashMap<>();
    Any requiredAnyValue = Any.newBuilder().build();
    Struct requiredStructValue = Struct.newBuilder().build();
    Value requiredValueValue = Value.newBuilder().build();
    ListValue requiredListValueValue = ListValue.newBuilder().build();
    Timestamp requiredTimeValue = Timestamp.newBuilder().build();
    Duration requiredDurationValue = Duration.newBuilder().build();
    FieldMask requiredFieldMaskValue = FieldMask.newBuilder().build();
    Int32Value requiredInt32Value = Int32Value.newBuilder().build();
    UInt32Value requiredUint32Value = UInt32Value.newBuilder().build();
    Int64Value requiredInt64Value = Int64Value.newBuilder().build();
    UInt64Value requiredUint64Value = UInt64Value.newBuilder().build();
    FloatValue requiredFloatValue = FloatValue.newBuilder().build();
    DoubleValue requiredDoubleValue = DoubleValue.newBuilder().build();
    StringValue requiredStringValue = StringValue.newBuilder().build();
    BoolValue requiredBoolValue = BoolValue.newBuilder().build();
    BytesValue requiredBytesValue = BytesValue.newBuilder().build();
    List<Any> requiredRepeatedAnyValue = new ArrayList<>();
    List<Struct> requiredRepeatedStructValue = new ArrayList<>();
    List<Value> requiredRepeatedValueValue = new ArrayList<>();
    List<ListValue> requiredRepeatedListValueValue = new ArrayList<>();
    List<Timestamp> requiredRepeatedTimeValue = new ArrayList<>();
    List<Duration> requiredRepeatedDurationValue = new ArrayList<>();
    List<FieldMask> requiredRepeatedFieldMaskValue = new ArrayList<>();
    List<Int32Value> requiredRepeatedInt32Value = new ArrayList<>();
    List<UInt32Value> requiredRepeatedUint32Value = new ArrayList<>();
    List<Int64Value> requiredRepeatedInt64Value = new ArrayList<>();
    List<UInt64Value> requiredRepeatedUint64Value = new ArrayList<>();
    List<FloatValue> requiredRepeatedFloatValue = new ArrayList<>();
    List<DoubleValue> requiredRepeatedDoubleValue = new ArrayList<>();
    List<StringValue> requiredRepeatedStringValue = new ArrayList<>();
    List<BoolValue> requiredRepeatedBoolValue = new ArrayList<>();
    List<BytesValue> requiredRepeatedBytesValue = new ArrayList<>();
    int optionalSingularInt32 = 1196565723;
    long optionalSingularInt64 = 1196565628L;
    float optionalSingularFloat = -1.19939918E8F;
    double optionalSingularDouble = 1.41902287E8;
    boolean optionalSingularBool = false;
    TestOptionalRequiredFlatteningParamsRequest.InnerEnum optionalSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
    String optionalSingularString = "optionalSingularString1852995162";
    ByteString optionalSingularBytes = ByteString.copyFromUtf8("2");
    TestOptionalRequiredFlatteningParamsRequest.InnerMessage optionalSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
    BookName optionalSingularResourceName = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
    BookName optionalSingularResourceNameOneof = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
    String optionalSingularResourceNameCommon = "optionalSingularResourceNameCommon-108123657";
    int optionalSingularFixed32 = 1648847958;
    long optionalSingularFixed64 = 1648847863;
    List<Integer> optionalRepeatedInt32 = new ArrayList<>();
    List<Long> optionalRepeatedInt64 = new ArrayList<>();
    List<Float> optionalRepeatedFloat = new ArrayList<>();
    List<Double> optionalRepeatedDouble = new ArrayList<>();
    List<Boolean> optionalRepeatedBool = new ArrayList<>();
    List<TestOptionalRequiredFlatteningParamsRequest.InnerEnum> optionalRepeatedEnum = new ArrayList<>();
    List<String> optionalRepeatedString = new ArrayList<>();
    List<ByteString> optionalRepeatedBytes = new ArrayList<>();
    List<TestOptionalRequiredFlatteningParamsRequest.InnerMessage> optionalRepeatedMessage = new ArrayList<>();
    List<String> optionalRepeatedResourceName = new ArrayList<>();
    List<String> optionalRepeatedResourceNameOneof = new ArrayList<>();
    List<String> optionalRepeatedResourceNameCommon = new ArrayList<>();
    List<Integer> optionalRepeatedFixed32 = new ArrayList<>();
    List<Long> optionalRepeatedFixed64 = new ArrayList<>();
    Map<Integer, String> optionalMap = new HashMap<>();
    Any anyValue = Any.newBuilder().build();
    Struct structValue = Struct.newBuilder().build();
    Value valueValue = Value.newBuilder().build();
    ListValue listValueValue = ListValue.newBuilder().build();
    Timestamp timeValue = Timestamp.newBuilder().build();
    Duration durationValue = Duration.newBuilder().build();
    FieldMask fieldMaskValue = FieldMask.newBuilder().build();
    Int32Value int32Value = Int32Value.newBuilder().build();
    UInt32Value uint32Value = UInt32Value.newBuilder().build();
    Int64Value int64Value = Int64Value.newBuilder().build();
    UInt64Value uint64Value = UInt64Value.newBuilder().build();
    FloatValue floatValue = FloatValue.newBuilder().build();
    DoubleValue doubleValue = DoubleValue.newBuilder().build();
    StringValue stringValue = StringValue.newBuilder().build();
    BoolValue boolValue = BoolValue.newBuilder().build();
    BytesValue bytesValue = BytesValue.newBuilder().build();
    List<Any> repeatedAnyValue = new ArrayList<>();
    List<Struct> repeatedStructValue = new ArrayList<>();
    List<Value> repeatedValueValue = new ArrayList<>();
    List<ListValue> repeatedListValueValue = new ArrayList<>();
    List<Timestamp> repeatedTimeValue = new ArrayList<>();
    List<Duration> repeatedDurationValue = new ArrayList<>();
    List<FieldMask> repeatedFieldMaskValue = new ArrayList<>();
    List<Int32Value> repeatedInt32Value = new ArrayList<>();
    List<UInt32Value> repeatedUint32Value = new ArrayList<>();
    List<Int64Value> repeatedInt64Value = new ArrayList<>();
    List<UInt64Value> repeatedUint64Value = new ArrayList<>();
    List<FloatValue> repeatedFloatValue = new ArrayList<>();
    List<DoubleValue> repeatedDoubleValue = new ArrayList<>();
    List<StringValue> repeatedStringValue = new ArrayList<>();
    List<BoolValue> repeatedBoolValue = new ArrayList<>();
    List<BytesValue> repeatedBytesValue = new ArrayList<>();

    TestOptionalRequiredFlatteningParamsResponse actualResponse =
        client.testOptionalRequiredFlatteningParams(requiredSingularInt32, requiredSingularInt64, requiredSingularFloat, requiredSingularDouble, requiredSingularBool, requiredSingularEnum, requiredSingularString, requiredSingularBytes, requiredSingularMessage, requiredSingularResourceName, requiredSingularResourceNameOneof, requiredSingularResourceNameCommon, requiredSingularFixed32, requiredSingularFixed64, requiredRepeatedInt32, requiredRepeatedInt64, requiredRepeatedFloat, requiredRepeatedDouble, requiredRepeatedBool, requiredRepeatedEnum, requiredRepeatedString, requiredRepeatedBytes, requiredRepeatedMessage, requiredRepeatedResourceName, requiredRepeatedResourceNameOneof, requiredRepeatedResourceNameCommon, requiredRepeatedFixed32, requiredRepeatedFixed64, requiredMap, requiredAnyValue, requiredStructValue, requiredValueValue, requiredListValueValue, requiredTimeValue, requiredDurationValue, requiredFieldMaskValue, requiredInt32Value, requiredUint32Value, requiredInt64Value, requiredUint64Value, requiredFloatValue, requiredDoubleValue, requiredStringValue, requiredBoolValue, requiredBytesValue, requiredRepeatedAnyValue, requiredRepeatedStructValue, requiredRepeatedValueValue, requiredRepeatedListValueValue, requiredRepeatedTimeValue, requiredRepeatedDurationValue, requiredRepeatedFieldMaskValue, requiredRepeatedInt32Value, requiredRepeatedUint32Value, requiredRepeatedInt64Value, requiredRepeatedUint64Value, requiredRepeatedFloatValue, requiredRepeatedDoubleValue, requiredRepeatedStringValue, requiredRepeatedBoolValue, requiredRepeatedBytesValue, optionalSingularInt32, optionalSingularInt64, optionalSingularFloat, optionalSingularDouble, optionalSingularBool, optionalSingularEnum, optionalSingularString, optionalSingularBytes, optionalSingularMessage, optionalSingularResourceName, optionalSingularResourceNameOneof, optionalSingularResourceNameCommon, optionalSingularFixed32, optionalSingularFixed64, optionalRepeatedInt32, optionalRepeatedInt64, optionalRepeatedFloat, optionalRepeatedDouble, optionalRepeatedBool, optionalRepeatedEnum, optionalRepeatedString, optionalRepeatedBytes, optionalRepeatedMessage, optionalRepeatedResourceName, optionalRepeatedResourceNameOneof, optionalRepeatedResourceNameCommon, optionalRepeatedFixed32, optionalRepeatedFixed64, optionalMap, anyValue, structValue, valueValue, listValueValue, timeValue, durationValue, fieldMaskValue, int32Value, uint32Value, int64Value, uint64Value, floatValue, doubleValue, stringValue, boolValue, bytesValue, repeatedAnyValue, repeatedStructValue, repeatedValueValue, repeatedListValueValue, repeatedTimeValue, repeatedDurationValue, repeatedFieldMaskValue, repeatedInt32Value, repeatedUint32Value, repeatedInt64Value, repeatedUint64Value, repeatedFloatValue, repeatedDoubleValue, repeatedStringValue, repeatedBoolValue, repeatedBytesValue);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void testOptionalRequiredFlatteningParamsExceptionTest2() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      int requiredSingularInt32 = 72313594;
      long requiredSingularInt64 = 72313499L;
      float requiredSingularFloat = -7514705.0F;
      double requiredSingularDouble = 1.9111005E8;
      boolean requiredSingularBool = true;
      TestOptionalRequiredFlatteningParamsRequest.InnerEnum requiredSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
      String requiredSingularString = "requiredSingularString-1949894503";
      ByteString requiredSingularBytes = ByteString.copyFromUtf8("-29");
      TestOptionalRequiredFlatteningParamsRequest.InnerMessage requiredSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
      BookName requiredSingularResourceName = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
      BookName requiredSingularResourceNameOneof = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
      String requiredSingularResourceNameCommon = "requiredSingularResourceNameCommon-1126805002";
      int requiredSingularFixed32 = 720656715;
      long requiredSingularFixed64 = 720656810;
      List<Integer> requiredRepeatedInt32 = new ArrayList<>();
      List<Long> requiredRepeatedInt64 = new ArrayList<>();
      List<Float> requiredRepeatedFloat = new ArrayList<>();
      List<Double> requiredRepeatedDouble = new ArrayList<>();
      List<Boolean> requiredRepeatedBool = new ArrayList<>();
      List<TestOptionalRequiredFlatteningParamsRequest.InnerEnum> requiredRepeatedEnum = new ArrayList<>();
      List<String> requiredRepeatedString = new ArrayList<>();
      List<ByteString> requiredRepeatedBytes = new ArrayList<>();
      List<TestOptionalRequiredFlatteningParamsRequest.InnerMessage> requiredRepeatedMessage = new ArrayList<>();
      List<String> requiredRepeatedResourceName = new ArrayList<>();
      List<String> requiredRepeatedResourceNameOneof = new ArrayList<>();
      List<String> requiredRepeatedResourceNameCommon = new ArrayList<>();
      List<Integer> requiredRepeatedFixed32 = new ArrayList<>();
      List<Long> requiredRepeatedFixed64 = new ArrayList<>();
      Map<Integer, String> requiredMap = new HashMap<>();
      Any requiredAnyValue = Any.newBuilder().build();
      Struct requiredStructValue = Struct.newBuilder().build();
      Value requiredValueValue = Value.newBuilder().build();
      ListValue requiredListValueValue = ListValue.newBuilder().build();
      Timestamp requiredTimeValue = Timestamp.newBuilder().build();
      Duration requiredDurationValue = Duration.newBuilder().build();
      FieldMask requiredFieldMaskValue = FieldMask.newBuilder().build();
      Int32Value requiredInt32Value = Int32Value.newBuilder().build();
      UInt32Value requiredUint32Value = UInt32Value.newBuilder().build();
      Int64Value requiredInt64Value = Int64Value.newBuilder().build();
      UInt64Value requiredUint64Value = UInt64Value.newBuilder().build();
      FloatValue requiredFloatValue = FloatValue.newBuilder().build();
      DoubleValue requiredDoubleValue = DoubleValue.newBuilder().build();
      StringValue requiredStringValue = StringValue.newBuilder().build();
      BoolValue requiredBoolValue = BoolValue.newBuilder().build();
      BytesValue requiredBytesValue = BytesValue.newBuilder().build();
      List<Any> requiredRepeatedAnyValue = new ArrayList<>();
      List<Struct> requiredRepeatedStructValue = new ArrayList<>();
      List<Value> requiredRepeatedValueValue = new ArrayList<>();
      List<ListValue> requiredRepeatedListValueValue = new ArrayList<>();
      List<Timestamp> requiredRepeatedTimeValue = new ArrayList<>();
      List<Duration> requiredRepeatedDurationValue = new ArrayList<>();
      List<FieldMask> requiredRepeatedFieldMaskValue = new ArrayList<>();
      List<Int32Value> requiredRepeatedInt32Value = new ArrayList<>();
      List<UInt32Value> requiredRepeatedUint32Value = new ArrayList<>();
      List<Int64Value> requiredRepeatedInt64Value = new ArrayList<>();
      List<UInt64Value> requiredRepeatedUint64Value = new ArrayList<>();
      List<FloatValue> requiredRepeatedFloatValue = new ArrayList<>();
      List<DoubleValue> requiredRepeatedDoubleValue = new ArrayList<>();
      List<StringValue> requiredRepeatedStringValue = new ArrayList<>();
      List<BoolValue> requiredRepeatedBoolValue = new ArrayList<>();
      List<BytesValue> requiredRepeatedBytesValue = new ArrayList<>();
      int optionalSingularInt32 = 1196565723;
      long optionalSingularInt64 = 1196565628L;
      float optionalSingularFloat = -1.19939918E8F;
      double optionalSingularDouble = 1.41902287E8;
      boolean optionalSingularBool = false;
      TestOptionalRequiredFlatteningParamsRequest.InnerEnum optionalSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
      String optionalSingularString = "optionalSingularString1852995162";
      ByteString optionalSingularBytes = ByteString.copyFromUtf8("2");
      TestOptionalRequiredFlatteningParamsRequest.InnerMessage optionalSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
      BookName optionalSingularResourceName = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
      BookName optionalSingularResourceNameOneof = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
      String optionalSingularResourceNameCommon = "optionalSingularResourceNameCommon-108123657";
      int optionalSingularFixed32 = 1648847958;
      long optionalSingularFixed64 = 1648847863;
      List<Integer> optionalRepeatedInt32 = new ArrayList<>();
      List<Long> optionalRepeatedInt64 = new ArrayList<>();
      List<Float> optionalRepeatedFloat = new ArrayList<>();
      List<Double> optionalRepeatedDouble = new ArrayList<>();
      List<Boolean> optionalRepeatedBool = new ArrayList<>();
      List<TestOptionalRequiredFlatteningParamsRequest.InnerEnum> optionalRepeatedEnum = new ArrayList<>();
      List<String> optionalRepeatedString = new ArrayList<>();
      List<ByteString> optionalRepeatedBytes = new ArrayList<>();
      List<TestOptionalRequiredFlatteningParamsRequest.InnerMessage> optionalRepeatedMessage = new ArrayList<>();
      List<String> optionalRepeatedResourceName = new ArrayList<>();
      List<String> optionalRepeatedResourceNameOneof = new ArrayList<>();
      List<String> optionalRepeatedResourceNameCommon = new ArrayList<>();
      List<Integer> optionalRepeatedFixed32 = new ArrayList<>();
      List<Long> optionalRepeatedFixed64 = new ArrayList<>();
      Map<Integer, String> optionalMap = new HashMap<>();
      Any anyValue = Any.newBuilder().build();
      Struct structValue = Struct.newBuilder().build();
      Value valueValue = Value.newBuilder().build();
      ListValue listValueValue = ListValue.newBuilder().build();
      Timestamp timeValue = Timestamp.newBuilder().build();
      Duration durationValue = Duration.newBuilder().build();
      FieldMask fieldMaskValue = FieldMask.newBuilder().build();
      Int32Value int32Value = Int32Value.newBuilder().build();
      UInt32Value uint32Value = UInt32Value.newBuilder().build();
      Int64Value int64Value = Int64Value.newBuilder().build();
      UInt64Value uint64Value = UInt64Value.newBuilder().build();
      FloatValue floatValue = FloatValue.newBuilder().build();
      DoubleValue doubleValue = DoubleValue.newBuilder().build();
      StringValue stringValue = StringValue.newBuilder().build();
      BoolValue boolValue = BoolValue.newBuilder().build();
      BytesValue bytesValue = BytesValue.newBuilder().build();
      List<Any> repeatedAnyValue = new ArrayList<>();
      List<Struct> repeatedStructValue = new ArrayList<>();
      List<Value> repeatedValueValue = new ArrayList<>();
      List<ListValue> repeatedListValueValue = new ArrayList<>();
      List<Timestamp> repeatedTimeValue = new ArrayList<>();
      List<Duration> repeatedDurationValue = new ArrayList<>();
      List<FieldMask> repeatedFieldMaskValue = new ArrayList<>();
      List<Int32Value> repeatedInt32Value = new ArrayList<>();
      List<UInt32Value> repeatedUint32Value = new ArrayList<>();
      List<Int64Value> repeatedInt64Value = new ArrayList<>();
      List<UInt64Value> repeatedUint64Value = new ArrayList<>();
      List<FloatValue> repeatedFloatValue = new ArrayList<>();
      List<DoubleValue> repeatedDoubleValue = new ArrayList<>();
      List<StringValue> repeatedStringValue = new ArrayList<>();
      List<BoolValue> repeatedBoolValue = new ArrayList<>();
      List<BytesValue> repeatedBytesValue = new ArrayList<>();

      client.testOptionalRequiredFlatteningParams(requiredSingularInt32, requiredSingularInt64, requiredSingularFloat, requiredSingularDouble, requiredSingularBool, requiredSingularEnum, requiredSingularString, requiredSingularBytes, requiredSingularMessage, requiredSingularResourceName, requiredSingularResourceNameOneof, requiredSingularResourceNameCommon, requiredSingularFixed32, requiredSingularFixed64, requiredRepeatedInt32, requiredRepeatedInt64, requiredRepeatedFloat, requiredRepeatedDouble, requiredRepeatedBool, requiredRepeatedEnum, requiredRepeatedString, requiredRepeatedBytes, requiredRepeatedMessage, requiredRepeatedResourceName, requiredRepeatedResourceNameOneof, requiredRepeatedResourceNameCommon, requiredRepeatedFixed32, requiredRepeatedFixed64, requiredMap, requiredAnyValue, requiredStructValue, requiredValueValue, requiredListValueValue, requiredTimeValue, requiredDurationValue, requiredFieldMaskValue, requiredInt32Value, requiredUint32Value, requiredInt64Value, requiredUint64Value, requiredFloatValue, requiredDoubleValue, requiredStringValue, requiredBoolValue, requiredBytesValue, requiredRepeatedAnyValue, requiredRepeatedStructValue, requiredRepeatedValueValue, requiredRepeatedListValueValue, requiredRepeatedTimeValue, requiredRepeatedDurationValue, requiredRepeatedFieldMaskValue, requiredRepeatedInt32Value, requiredRepeatedUint32Value, requiredRepeatedInt64Value, requiredRepeatedUint64Value, requiredRepeatedFloatValue, requiredRepeatedDoubleValue, requiredRepeatedStringValue, requiredRepeatedBoolValue, requiredRepeatedBytesValue, optionalSingularInt32, optionalSingularInt64, optionalSingularFloat, optionalSingularDouble, optionalSingularBool, optionalSingularEnum, optionalSingularString, optionalSingularBytes, optionalSingularMessage, optionalSingularResourceName, optionalSingularResourceNameOneof, optionalSingularResourceNameCommon, optionalSingularFixed32, optionalSingularFixed64, optionalRepeatedInt32, optionalRepeatedInt64, optionalRepeatedFloat, optionalRepeatedDouble, optionalRepeatedBool, optionalRepeatedEnum, optionalRepeatedString, optionalRepeatedBytes, optionalRepeatedMessage, optionalRepeatedResourceName, optionalRepeatedResourceNameOneof, optionalRepeatedResourceNameCommon, optionalRepeatedFixed32, optionalRepeatedFixed64, optionalMap, anyValue, structValue, valueValue, listValueValue, timeValue, durationValue, fieldMaskValue, int32Value, uint32Value, int64Value, uint64Value, floatValue, doubleValue, stringValue, boolValue, bytesValue, repeatedAnyValue, repeatedStructValue, repeatedValueValue, repeatedListValueValue, repeatedTimeValue, repeatedDurationValue, repeatedFieldMaskValue, repeatedInt32Value, repeatedUint32Value, repeatedInt64Value, repeatedUint64Value, repeatedFloatValue, repeatedDoubleValue, repeatedStringValue, repeatedBoolValue, repeatedBytesValue);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void privateListShelvesTest() {
    BookName name = BookName.ofShelfBookOneBookTwoName("[SHELF]", "[BOOK_ONE]", "[BOOK_TWO]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    ReaderName reader = ReaderName.ofProjectReaderName("[PROJECT]", "[READER]");
    Book expectedResponse = Book.newBuilder()
      .setName(name.toString())
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .setReader(reader.toString())
      .build();
    mockService.addResponse(expectedResponse);

    Book actualResponse =
        client.privateListShelves();
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void privateListShelvesExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      client.privateListShelves();
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

}
============== file: src/test/java/com/google/example/library/v1/MyProtoClientTest.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1;

import com.google.api.gax.core.NoCredentialsProvider;
import com.google.api.gax.httpjson.ApiMethodDescriptor;
import com.google.api.gax.httpjson.GaxHttpJsonProperties;
import com.google.api.gax.httpjson.testing.MockHttpService;
import com.google.api.gax.rpc.ApiClientHeaderProvider;
import com.google.api.gax.rpc.ApiException;
import com.google.api.gax.rpc.ApiExceptionFactory;
import com.google.api.gax.rpc.InvalidArgumentException;
import com.google.api.gax.rpc.StatusCode.Code;
import com.google.api.gax.rpc.testing.FakeStatusCode;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;
import static com.google.example.library.v1.stub.HttpJsonMyProtoStub.getNamespaceMethodDescriptor;
import static com.google.example.library.v1.stub.HttpJsonMyProtoStub.myMethodMethodDescriptor;
import com.google.example.library.v1.stub.MyProtoStubSettings;
import com.google.protos.google.example.library.v1.AnotherService.MethodRequest;
import com.google.protos.google.example.library.v1.AnotherService.MethodResponse;
import com.google.protos.google.example.library.v1.AnotherService.Namespace;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

@javax.annotation.Generated("by GAPIC")
public class MyProtoClientTest {
  private static final List<ApiMethodDescriptor> METHOD_DESCRIPTORS = ImmutableList.copyOf(
        Lists.<ApiMethodDescriptor>newArrayList(
          myMethodMethodDescriptor,
          getNamespaceMethodDescriptor
        ));
  private static final MockHttpService mockService
      = new MockHttpService(METHOD_DESCRIPTORS, MyProtoStubSettings.getDefaultEndpoint());

  private static MyProtoClient client;
  private static MyProtoSettings clientSettings;

  @BeforeClass
  public static void setUp() throws IOException {
    clientSettings =
        MyProtoSettings.newBuilder()
           .setTransportChannelProvider(
               MyProtoSettings.defaultHttpJsonTransportProviderBuilder()
                   .setHttpTransport(mockService).build())
           .setCredentialsProvider(NoCredentialsProvider.create())
           .build();
    client =
       MyProtoClient.create(clientSettings);
  }

  @After
  public void cleanUp() {
    mockService.reset();
  }

  @AfterClass
  public static void tearDown() throws Exception {
    client.close();
  }

  @Test
  @SuppressWarnings("all")
  public void myMethodTest() {
    String myfield = "myfield1515208398";
    MethodResponse expectedResponse = MethodResponse.newBuilder()
      .setMyfield(myfield)
      .build();
    mockService.addResponse(expectedResponse);

    MethodRequest request = MethodRequest.newBuilder().build();

    MethodResponse actualResponse =
        client.myMethod(request);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void myMethodExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      MethodRequest request = MethodRequest.newBuilder().build();

      client.myMethod(request);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getNamespaceTest() {
    String value = "value111972721";
    Namespace expectedResponse = Namespace.newBuilder()
      .setValue(value)
      .build();
    mockService.addResponse(expectedResponse);

    MethodRequest request = MethodRequest.newBuilder().build();

    Namespace actualResponse =
        client.getNamespace(request);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<String> actualRequests = mockService.getRequestPaths();
    Assert.assertEquals(1, actualRequests.size());

    String apiClientHeaderKey = mockService.getRequestHeaders()
        .get(ApiClientHeaderProvider.getDefaultApiClientHeaderKey()).iterator().next();
    Assert.assertTrue(GaxHttpJsonProperties.getDefaultApiClientHeaderPattern()
        .matcher(apiClientHeaderKey).matches());
  }

  @Test
  @SuppressWarnings("all")
  public void getNamespaceExceptionTest() throws Exception {
    ApiException exception = ApiExceptionFactory.createException(new Exception(), FakeStatusCode.of(Code.INVALID_ARGUMENT), false);
    mockService.addException(exception);

    try {
      MethodRequest request = MethodRequest.newBuilder().build();

      client.getNamespace(request);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

}
