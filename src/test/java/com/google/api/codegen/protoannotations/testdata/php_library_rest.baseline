============== file: composer.json ==============
{
  "name": "google/cloud-example-library",
  "description": "Google Example Library API client for PHP",
  "license": "Apache-2.0",
  "minimum-stability": "stable",
  "autoload": {
    "psr-4": {
      "Google\\Cloud\\Example\\Library\\": "src",
      "Google\\Cloud\\Example\\Library\\Tests\\": "tests",
      "": "proto/src"
    }
  },
  "require": {
    "google/gax": "^0.6.*",
    "google/protobuf": "^0.7.*",
    "php" : "^5.5 || ^7.0"
  },
  "require-dev": {
    "phpunit/phpunit": "^4.8|^5.0"
  }
}
============== file: samples/V1/DeleteShelfRequestEmptyResponseTypeWithResponseHandling.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DO NOT EDIT! This is a generated sample ("Request",  "empty_response_type_with_response_handling")
 */

// sample-metadata
//   title: Test response handling for methods that return empty
//   description: Test response handling for methods that return empty
//   usage: php samples/V1/DeleteShelfRequestEmptyResponseTypeWithResponseHandling.php
// [START sample]
require __DIR__ . '/../../vendor/autoload.php';

use Google\Cloud\Example\Library\V1\LibraryServiceClient;

/** Test response handling for methods that return empty */
function sampleDeleteShelf()
{
    $libraryServiceClient = new LibraryServiceClient();

    $formattedName = $libraryServiceClient->shelfName('[SHELF]');

    try {
        $libraryServiceClient->deleteShelf($formattedName);
        // Shelf deleted
        printf("Shelf deleted." . PHP_EOL);
    } finally {
        $libraryServiceClient->close();
    }
}
// [END sample]

sampleDeleteShelf();

============== file: samples/V1/DeleteShelfRequestEmptyResponseTypeWithoutResponseHandling.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DO NOT EDIT! This is a generated sample ("Request",  "empty_response_type_without_response_handling")
 */

// sample-metadata
//   title: Test default response handling is turned off for methods that return empty
//   description: Test default response handling is turned off for methods that return empty
//   usage: php samples/V1/DeleteShelfRequestEmptyResponseTypeWithoutResponseHandling.php
// [START sample]
require __DIR__ . '/../../vendor/autoload.php';

use Google\Cloud\Example\Library\V1\LibraryServiceClient;

/** Test default response handling is turned off for methods that return empty */
function sampleDeleteShelf()
{
    $libraryServiceClient = new LibraryServiceClient();

    $formattedName = $libraryServiceClient->shelfName('[SHELF]');

    try {
        $libraryServiceClient->deleteShelf($formattedName);

    } finally {
        $libraryServiceClient->close();
    }
}
// [END sample]

sampleDeleteShelf();

============== file: samples/V1/FindRelatedBooksRequestPagedAllOdyssey.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DO NOT EDIT! This is a generated sample ("RequestPagedAll",  "odyssey")
 */

// sample-metadata
//   title: The Odyssey
//   description: Testing calling forms
//   usage: php samples/V1/FindRelatedBooksRequestPagedAllOdyssey.php
// [START sample]
require __DIR__ . '/../../vendor/autoload.php';

use Google\Cloud\Example\Library\V1\LibraryServiceClient;

/** Testing calling forms */
function sampleFindRelatedBooks()
{
    $libraryServiceClient = new LibraryServiceClient();

    $namesElement = 'Odyssey';
    $names = [$namesElement];
    $shelvesElement = 'Classics';
    $shelves = [$shelvesElement];

    try {
        // Iterate through all elements
        $pagedResponse = $libraryServiceClient->findRelatedBooks($formattedNames, $formattedShelves);
        foreach ($pagedResponse->iterateAllElements() as $responseItem) {
            $book = $responseItem;
            printf("Here's a related book: %s" . PHP_EOL, $book);
        }
    } finally {
        $libraryServiceClient->close();
    }
}
// [END sample]

sampleFindRelatedBooks();

============== file: samples/V1/FindRelatedBooksRequestPagedOdyssey.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DO NOT EDIT! This is a generated sample ("RequestPaged",  "odyssey")
 */

// sample-metadata
//   title: The Odyssey
//   description: Testing calling forms
//   usage: php samples/V1/FindRelatedBooksRequestPagedOdyssey.php
// [START sample]
require __DIR__ . '/../../vendor/autoload.php';

use Google\Cloud\Example\Library\V1\LibraryServiceClient;

/** Testing calling forms */
function sampleFindRelatedBooks()
{
    $libraryServiceClient = new LibraryServiceClient();

    $namesElement = 'Odyssey';
    $names = [$namesElement];
    $shelvesElement = 'Classics';
    $shelves = [$shelvesElement];

    try {
        // Iterate over pages of elements
        $pagedResponse = $libraryServiceClient->findRelatedBooks($formattedNames, $formattedShelves);
        foreach ($pagedResponse->iteratePages() as $page) {
            foreach ($page as $responseItem) {
                $book = $responseItem;
                printf("Here's a related book: %s" . PHP_EOL, $book);
            }
        }
    } finally {
        $libraryServiceClient->close();
    }
}
// [END sample]

sampleFindRelatedBooks();

============== file: samples/V1/GetBigBookLongRunningRequestAsyncWap.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DO NOT EDIT! This is a generated sample ("LongRunningRequestAsync",  "wap")
 */

// sample-metadata
//   title: GetBigBook: 'War and Peace'
//   description: Testing calling forms
//   usage: php samples/V1/GetBigBookLongRunningRequestAsyncWap.php [--shelf "Novel\\\"\`\b\t\n\r"]
// [START hopper]
require __DIR__ . '/../../vendor/autoload.php';

use Google\Cloud\Example\Library\V1\LibraryServiceClient;

/** Testing calling forms */
function sampleGetBigBook($shelf)
{
    $libraryServiceClient = new LibraryServiceClient();

    // $shelf = 'Novel\\"`\b\t\n\r';
    $formattedName = $libraryServiceClient->shelfBookOneBookTwoName($shelf, '[BOOK_ONE]', '[BOOK_TWO]');

    try {
        // start the operation, keep the operation name, and resume later
        $operationResponse = $libraryServiceClient->getBigBook($formattedName);
        $operationName = $operationResponse->getName();
        // ... do other work
        $newOperationResponse = $libraryServiceClient->resumeOperation($operationName, 'getBigBook');
        while (!$newOperationResponse->isDone()) {
            // ... do other work
            $newOperationResponse->reload();
        }
        if ($newOperationResponse->operationSucceeded()) {
            $response = $newOperationResponse->getResult();
            // Testing iterating over map fields when both key and value are specified.
            foreach ($response->getMapListValueValue() as $myKey => $myValue) {
                printf("key: %s, value: %s" . PHP_EOL, $myKey, print_r($myValue, true));
            }

            // Testing iterating over map fields when only key is specified.
            foreach (array_keys($response->getMapListValueValue()) as $anotherKey) {
                printf("key: %s" . PHP_EOL, $anotherKey);
            }

            // Testing iterating over map fields when only value is specified.
            foreach ($response->getMapListValueValue() as $anotherValue) {
                printf("value: %s" . PHP_EOL, print_r($anotherValue, true));
            }

            printf("name: %s" . PHP_EOL, $response->getName());
            printf("author: %s" . PHP_EOL, $response->getAuthor());
        } else {
          $error = $newOperationResponse->getError();
          // handleError($error)
        }
    } finally {
        $libraryServiceClient->close();
    }
}
// [END hopper]

$opts = [
    'shelf::',
];

$defaultOptions = [
    'shelf' => 'Novel\\"`\b\t\n\r',
];

$options = getopt('', $opts);
$options += $defaultOptions;

$shelf = $options['shelf'];

sampleGetBigBook($shelf);

============== file: samples/V1/GetBigBookLongRunningRequestAsyncWap2.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DO NOT EDIT! This is a generated sample ("LongRunningRequestAsync",  "wap2")
 */

// sample-metadata
//   title: GetBigBook: 'War and Peace'
//   description: Testing resource name overlap
//   usage: php samples/V1/GetBigBookLongRunningRequestAsyncWap2.php [--shelf Novel] [--big_book_name "War and Peace"]
// [START hopper]
require __DIR__ . '/../../vendor/autoload.php';

use Google\Cloud\Example\Library\V1\LibraryServiceClient;

/**
 * Testing resource name overlap
 *
 * @param string $shelf Test word wrapping for long lines. This is a long comment. The name of the
 * shelf to retrieve the big book from.
 * @param string $bigBookName The name of the book.
 */
function sampleGetBigBook($shelf, $bigBookName)
{
    $libraryServiceClient = new LibraryServiceClient();

    // $shelf = 'Novel';
    // $bigBookName = 'War and Peace';
    $formattedName = $libraryServiceClient->shelfBookOneBookTwoName($shelf, '[BOOK_ONE]', '[BOOK_TWO]');

    try {
        // start the operation, keep the operation name, and resume later
        $operationResponse = $libraryServiceClient->getBigBook($formattedName);
        $operationName = $operationResponse->getName();
        // ... do other work
        $newOperationResponse = $libraryServiceClient->resumeOperation($operationName, 'getBigBook');
        while (!$newOperationResponse->isDone()) {
            // ... do other work
            $newOperationResponse->reload();
        }
        if ($newOperationResponse->operationSucceeded()) {
            $response = $newOperationResponse->getResult();
            printf("%s" . PHP_EOL, print_r($response, true));
        } else {
          $error = $newOperationResponse->getError();
          // handleError($error)
        }
    } finally {
        $libraryServiceClient->close();
    }
}
// [END hopper]

$opts = [
    'shelf::',
    'big_book_name::',
];

$defaultOptions = [
    'shelf' => 'Novel',
    'big_book_name' => 'War and Peace',
];

$options = getopt('', $opts);
$options += $defaultOptions;

$shelf = $options['shelf'];
$bigBookName = $options['big_book_name'];

sampleGetBigBook($shelf, $bigBookName);

============== file: samples/V1/GetBigBookLongRunningRequestWap.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DO NOT EDIT! This is a generated sample ("LongRunningRequest",  "wap")
 */

// sample-metadata
//   title: GetBigBook: 'War and Peace'
//   description: Testing calling forms
//   usage: php samples/V1/GetBigBookLongRunningRequestWap.php [--shelf "Novel\\\"\`\b\t\n\r"]
// [START hopper]
require __DIR__ . '/../../vendor/autoload.php';

use Google\Cloud\Example\Library\V1\LibraryServiceClient;

/** Testing calling forms */
function sampleGetBigBook($shelf)
{
    $libraryServiceClient = new LibraryServiceClient();

    // $shelf = 'Novel\\"`\b\t\n\r';
    $formattedName = $libraryServiceClient->shelfBookOneBookTwoName($shelf, '[BOOK_ONE]', '[BOOK_TWO]');

    try {
        $operationResponse = $libraryServiceClient->getBigBook($formattedName);
        $operationResponse->pollUntilComplete();
        if ($operationResponse->operationSucceeded()) {
            $response = $operationResponse->getResult();
            // Testing iterating over map fields when both key and value are specified.
            foreach ($response->getMapListValueValue() as $myKey => $myValue) {
                printf("key: %s, value: %s" . PHP_EOL, $myKey, print_r($myValue, true));
            }

            // Testing iterating over map fields when only key is specified.
            foreach (array_keys($response->getMapListValueValue()) as $anotherKey) {
                printf("key: %s" . PHP_EOL, $anotherKey);
            }

            // Testing iterating over map fields when only value is specified.
            foreach ($response->getMapListValueValue() as $anotherValue) {
                printf("value: %s" . PHP_EOL, print_r($anotherValue, true));
            }

            printf("name: %s" . PHP_EOL, $response->getName());
            printf("author: %s" . PHP_EOL, $response->getAuthor());
        } else {
            $error = $operationResponse->getError();
            // handleError($error)
        }
    } finally {
        $libraryServiceClient->close();
    }
}
// [END hopper]

$opts = [
    'shelf::',
];

$defaultOptions = [
    'shelf' => 'Novel\\"`\b\t\n\r',
];

$options = getopt('', $opts);
$options += $defaultOptions;

$shelf = $options['shelf'];

sampleGetBigBook($shelf);

============== file: samples/V1/GetBigBookLongRunningRequestWap2.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DO NOT EDIT! This is a generated sample ("LongRunningRequest",  "wap2")
 */

// sample-metadata
//   title: GetBigBook: 'War and Peace'
//   description: Testing resource name overlap
//   usage: php samples/V1/GetBigBookLongRunningRequestWap2.php [--shelf Novel] [--big_book_name "War and Peace"]
// [START hopper]
require __DIR__ . '/../../vendor/autoload.php';

use Google\Cloud\Example\Library\V1\LibraryServiceClient;

/**
 * Testing resource name overlap
 *
 * @param string $shelf Test word wrapping for long lines. This is a long comment. The name of the
 * shelf to retrieve the big book from.
 * @param string $bigBookName The name of the book.
 */
function sampleGetBigBook($shelf, $bigBookName)
{
    $libraryServiceClient = new LibraryServiceClient();

    // $shelf = 'Novel';
    // $bigBookName = 'War and Peace';
    $formattedName = $libraryServiceClient->shelfBookOneBookTwoName($shelf, '[BOOK_ONE]', '[BOOK_TWO]');

    try {
        $operationResponse = $libraryServiceClient->getBigBook($formattedName);
        $operationResponse->pollUntilComplete();
        if ($operationResponse->operationSucceeded()) {
            $response = $operationResponse->getResult();
            printf("%s" . PHP_EOL, print_r($response, true));
        } else {
            $error = $operationResponse->getError();
            // handleError($error)
        }
    } finally {
        $libraryServiceClient->close();
    }
}
// [END hopper]

$opts = [
    'shelf::',
    'big_book_name::',
];

$defaultOptions = [
    'shelf' => 'Novel',
    'big_book_name' => 'War and Peace',
];

$options = getopt('', $opts);
$options += $defaultOptions;

$shelf = $options['shelf'];
$bigBookName = $options['big_book_name'];

sampleGetBigBook($shelf, $bigBookName);

============== file: samples/V1/GetBigNothingLongRunningRequestAsyncEmptyResponseTypeWithResponseHandling.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DO NOT EDIT! This is a generated sample ("LongRunningRequestAsync",  "empty_response_type_with_response_handling")
 */

// sample-metadata
//   title: Test response handling for methods that return empty
//   description: Test response handling for methods that return empty
//   usage: php samples/V1/GetBigNothingLongRunningRequestAsyncEmptyResponseTypeWithResponseHandling.php
// [START sample]
require __DIR__ . '/../../vendor/autoload.php';

use Google\Cloud\Example\Library\V1\LibraryServiceClient;

/** Test response handling for methods that return empty */
function sampleGetBigNothing()
{
    $libraryServiceClient = new LibraryServiceClient();

    $formattedName = $libraryServiceClient->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');

    try {
        // start the operation, keep the operation name, and resume later
        $operationResponse = $libraryServiceClient->getBigNothing($formattedName);
        $operationName = $operationResponse->getName();
        // ... do other work
        $newOperationResponse = $libraryServiceClient->resumeOperation($operationName, 'getBigNothing');
        while (!$newOperationResponse->isDone()) {
            // ... do other work
            $newOperationResponse->reload();
        }
        if ($newOperationResponse->operationSucceeded()) {
            // operation succeeded and returns no value
        } else {
          $error = $newOperationResponse->getError();
          // handleError($error)
        }
    } finally {
        $libraryServiceClient->close();
    }
}
// [END sample]

sampleGetBigNothing();

============== file: samples/V1/GetBigNothingLongRunningRequestAsyncEmptyResponseTypeWithoutResponseHandling.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DO NOT EDIT! This is a generated sample ("LongRunningRequestAsync",  "empty_response_type_without_response_handling")
 */

// sample-metadata
//   title: Test default response handling is turned off for methods that return empty
//   description: Test default response handling is turned off for methods that return empty
//   usage: php samples/V1/GetBigNothingLongRunningRequestAsyncEmptyResponseTypeWithoutResponseHandling.php
// [START sample]
require __DIR__ . '/../../vendor/autoload.php';

use Google\Cloud\Example\Library\V1\LibraryServiceClient;

/** Test default response handling is turned off for methods that return empty */
function sampleGetBigNothing()
{
    $libraryServiceClient = new LibraryServiceClient();

    $formattedName = $libraryServiceClient->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');

    try {
        // start the operation, keep the operation name, and resume later
        $operationResponse = $libraryServiceClient->getBigNothing($formattedName);
        $operationName = $operationResponse->getName();
        // ... do other work
        $newOperationResponse = $libraryServiceClient->resumeOperation($operationName, 'getBigNothing');
        while (!$newOperationResponse->isDone()) {
            // ... do other work
            $newOperationResponse->reload();
        }
        if ($newOperationResponse->operationSucceeded()) {
            // operation succeeded and returns no value
        } else {
          $error = $newOperationResponse->getError();
          // handleError($error)
        }
    } finally {
        $libraryServiceClient->close();
    }
}
// [END sample]

sampleGetBigNothing();

============== file: samples/V1/GetBigNothingLongRunningRequestEmptyResponseTypeWithResponseHandling.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DO NOT EDIT! This is a generated sample ("LongRunningRequest",  "empty_response_type_with_response_handling")
 */

// sample-metadata
//   title: Test response handling for methods that return empty
//   description: Test response handling for methods that return empty
//   usage: php samples/V1/GetBigNothingLongRunningRequestEmptyResponseTypeWithResponseHandling.php
// [START sample]
require __DIR__ . '/../../vendor/autoload.php';

use Google\Cloud\Example\Library\V1\LibraryServiceClient;

/** Test response handling for methods that return empty */
function sampleGetBigNothing()
{
    $libraryServiceClient = new LibraryServiceClient();

    $formattedName = $libraryServiceClient->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');

    try {
        $operationResponse = $libraryServiceClient->getBigNothing($formattedName);
        $operationResponse->pollUntilComplete();
        if ($operationResponse->operationSucceeded()) {
            // operation succeeded and returns no value
        } else {
            $error = $operationResponse->getError();
            // handleError($error)
        }
    } finally {
        $libraryServiceClient->close();
    }
}
// [END sample]

sampleGetBigNothing();

============== file: samples/V1/GetBigNothingLongRunningRequestEmptyResponseTypeWithoutResponseHandling.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DO NOT EDIT! This is a generated sample ("LongRunningRequest",  "empty_response_type_without_response_handling")
 */

// sample-metadata
//   title: Test default response handling is turned off for methods that return empty
//   description: Test default response handling is turned off for methods that return empty
//   usage: php samples/V1/GetBigNothingLongRunningRequestEmptyResponseTypeWithoutResponseHandling.php
// [START sample]
require __DIR__ . '/../../vendor/autoload.php';

use Google\Cloud\Example\Library\V1\LibraryServiceClient;

/** Test default response handling is turned off for methods that return empty */
function sampleGetBigNothing()
{
    $libraryServiceClient = new LibraryServiceClient();

    $formattedName = $libraryServiceClient->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');

    try {
        $operationResponse = $libraryServiceClient->getBigNothing($formattedName);
        $operationResponse->pollUntilComplete();
        if ($operationResponse->operationSucceeded()) {
            // operation succeeded and returns no value
        } else {
            $error = $operationResponse->getError();
            // handleError($error)
        }
    } finally {
        $libraryServiceClient->close();
    }
}
// [END sample]

sampleGetBigNothing();

============== file: samples/V1/GetBookRequestTestOnSuccessMap.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DO NOT EDIT! This is a generated sample ("Request",  "test_on_success_map")
 */

// sample-metadata
//   title: test maps in response handling
//   description: When there is a very long description for a sample file we can split
//     the description into multiple lines and the samples will be just fine
//   usage: php samples/V1/GetBookRequestTestOnSuccessMap.php
// [START sample]
require __DIR__ . '/../../vendor/autoload.php';

use Google\Cloud\Example\Library\V1\LibraryServiceClient;
use Google\Example\Library\V1\SomeMessage\Alignment;

function sampleGetBook()
{
    $libraryServiceClient = new LibraryServiceClient();

    $formattedName = $libraryServiceClient->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');

    try {
        $response = $libraryServiceClient->getBook($formattedName);
        $intKeyVal = $response->getMapStringValue()[123];
        $booleanKeyVal = $response->getMapBoolKey()[true];
        $mapValueField = $response->getMapMessageValue()['key']->getField();
        printf("Test printing map fields: %s" . PHP_EOL, print_r($response->getMapListValueValue()['quoted_key'], true));
        printf("Test printing enum fields of a map value: %s" . PHP_EOL, Alignment::name($response->getMapMessageValue()['key']->getAlignment()));
    } finally {
        $libraryServiceClient->close();
    }
}
// [END sample]

sampleGetBook();

============== file: samples/V1/PublishSeriesRequestPiVersion.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DO NOT EDIT! This is a generated sample ("Request",  "pi_version")
 */

// sample-metadata
//   title: Pi version
//   description: Testing <@calling forms>
//   usage: php samples/V1/PublishSeriesRequestPiVersion.php [--shelf_name Math] [--edition 123]
// [START canonical]
require __DIR__ . '/../../vendor/autoload.php';

use Google\Cloud\Example\Library\V1\LibraryServiceClient;
use Google\Example\Library\V1\Book;
use Google\Example\Library\V1\SeriesUuid;
use Google\Example\Library\V1\Shelf;

/**
 * Testing <&#64;calling forms>
 *
 * @param string $shelfName The name of the shelf where books are published to.
 * @param int $edition The edition of the series.
 */
function samplePublishSeries($shelfName, $edition)
{
    $libraryServiceClient = new LibraryServiceClient();

    // $shelfName = 'Math';
    // $edition = 123;
    $shelf = new Shelf();
    $shelf->setName($shelfName);
    $books = [];
    $seriesString = 'xyz3141592654';
    $seriesUuid = new SeriesUuid();
    $seriesUuid->setSeriesString($seriesString);

    try {
        $response = $libraryServiceClient->publishSeries($shelf, $books, $seriesUuid, ['edition' => $edition]);
        // % % % output handling % % % %
        // fourScoreAndSevenYears ago
        //
        // our fathers brought forth upon this continent
        // a new nation
        // conceived in liberty
        //
        // and dedicated to the proposition that allMenAreCreatedEqual.
        // Do something with bookNames one by one
        $bookNames = $response->getBookNames();
        foreach ($response->getBookNames() as $title) {
            // Now we deal with thisSingleBook!
            printf("\t%%`` The book's title: \"%s\", \\\nand the book costs $50.00 ``%%" . PHP_EOL, $title);
        }
        printf("The first book is: %s" . PHP_EOL, $response->getBookNames()[0]);
        printf("The author of the first book is: %s" . PHP_EOL, $response->getBooks()[0]->getAuthor());
        printf("That's all!" . PHP_EOL);
        printf("series_uuid: %s" . PHP_EOL, $response->getSeriesUuid()->getSeriesBytes());
    } finally {
        $libraryServiceClient->close();
    }
}
// [END canonical]

$opts = [
    'shelf_name::',
    'edition::',
];

$defaultOptions = [
    'shelf_name' => 'Math',
    'edition' => 123,
];

$options = getopt('', $opts);
$options += $defaultOptions;

$shelfName = $options['shelf_name'];
$edition = $options['edition'];

samplePublishSeries($shelfName, $edition);

============== file: samples/V1/PublishSeriesRequestSecondEdition.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DO NOT EDIT! This is a generated sample ("Request",  "second_edition")
 */

// sample-metadata
//   title: Second edition
//   description: Testing calling forms
//   usage: php samples/V1/PublishSeriesRequestSecondEdition.php
// [START canonical]
require __DIR__ . '/../../vendor/autoload.php';

use Google\Cloud\Example\Library\V1\LibraryServiceClient;
use Google\Example\Library\V1\Book;
use Google\Example\Library\V1\SeriesUuid;
use Google\Example\Library\V1\Shelf;

/** Testing calling forms */
function samplePublishSeries()
{
    $libraryServiceClient = new LibraryServiceClient();

    $shelf = new Shelf();
    $books = [];
    $seriesUuid = new SeriesUuid();
    $edition = 2;

    try {
        $response = $libraryServiceClient->publishSeries($shelf, $books, $seriesUuid, ['edition' => $edition]);
        printf("%s" . PHP_EOL, print_r($response, true));
    } finally {
        $libraryServiceClient->close();
    }
}
// [END canonical]

samplePublishSeries();

============== file: samples/V1/PublishSeriesRequestTestRequestObjectFieldComments.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DO NOT EDIT! This is a generated sample ("Request",  "test_request_object_field_comments")
 */

// sample-metadata
//   title: request object field comments
//   description: Test request object field comments
//   usage: php samples/V1/PublishSeriesRequestTestRequestObjectFieldComments.php
// [START sample]
require __DIR__ . '/../../vendor/autoload.php';

use Google\Cloud\Example\Library\V1\LibraryServiceClient;
use Google\Example\Library\V1\Book;
use Google\Example\Library\V1\SeriesUuid;
use Google\Example\Library\V1\Shelf;

/** Test request object field comments */
function samplePublishSeries()
{
    $libraryServiceClient = new LibraryServiceClient();


    // Comment on a resource name
    $formattedName = $libraryServiceClient->shelfName('math');

    // A super long comment
    // wraps words at newline characters
    // as well
    $theme = 'Math';

    // Comment on a primitive field
    $internalTheme = 'Statistics';
    $shelf = new Shelf();
    $shelf->setName($formattedName);
    $shelf->setTheme($theme);
    $shelf->setInternalTheme($internalTheme);
    $books = [];

    // Comment on a file input field
    $seriesBytes = file_get_contents('xyz3141592654');

    // Comment on a message
    $seriesUuid = new SeriesUuid();
    $seriesUuid->setSeriesBytes($seriesBytes);

    // A super long long long long long long long long long long long long long long comment that tests
    // word wrapping
    $edition = 123;

    try {
        $response = $libraryServiceClient->publishSeries($shelf, $books, $seriesUuid, ['edition' => $edition]);
        printf("%s" . PHP_EOL, print_r($response, true));
    } finally {
        $libraryServiceClient->close();
    }
}
// [END sample]

samplePublishSeries();

============== file: samples/V1/PublishSeriesRequestTestWriteToFile.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DO NOT EDIT! This is a generated sample ("Request",  "test_write_to_file")
 */

// sample-metadata
//   title: test writing fields to files
//   description: Testing write fields to files.
//   usage: php samples/V1/PublishSeriesRequestTestWriteToFile.php
// [START sample]
require __DIR__ . '/../../vendor/autoload.php';

use Google\Cloud\Example\Library\V1\LibraryServiceClient;
use Google\Example\Library\V1\Book;
use Google\Example\Library\V1\SeriesUuid;
use Google\Example\Library\V1\Shelf;

/** Testing write fields to files. */
function samplePublishSeries()
{
    $libraryServiceClient = new LibraryServiceClient();

    $shelf = new Shelf();
    $books = [];
    $seriesUuid = new SeriesUuid();

    try {
        $response = $libraryServiceClient->publishSeries($shelf, $books, $seriesUuid);
        // testing writing bytes field.
        file_put_contents(sprintf('uuid_of_series_with_book_%s.raw', $response->getBookNames()[0]), $response->getSeriesUuid()->getSeriesBytes());
        // testing writing string field.
        file_put_contents('series_uuid_in_plain_text.txt', $response->getSeriesUuid()->getSeriesString());
    } finally {
        $libraryServiceClient->close();
    }
}
// [END sample]

samplePublishSeries();

============== file: samples/V1/SampleGetShelf.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DO NOT EDIT! This is a generated sample ("Request",  "test_default_calling_form_unary")
 */

// sample-metadata
//   title: test_default_calling_form_unary
//   description: Test default calling forms for unary methods.
//   usage: php samples/V1/SampleGetShelf.php
// [START sample_get_shelf]
require __DIR__ . '/../../vendor/autoload.php';

use Google\Cloud\Example\Library\V1\LibraryServiceClient;

/** Test default calling forms for unary methods. */
function sampleGetShelf()
{
    $libraryServiceClient = new LibraryServiceClient();

    $formattedName = $libraryServiceClient->shelfName('my-shelf');
    $options = '';

    try {
        $response = $libraryServiceClient->getShelf($formattedName, $options);
        printf("The theme of the shelf is: %s" . PHP_EOL, $response->getTheme());
    } finally {
        $libraryServiceClient->close();
    }
}
// [END sample_get_shelf]

sampleGetShelf();

============== file: samples/V1/TestDefaultCallingFormForPaging.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DO NOT EDIT! This is a generated sample ("RequestPagedAll",  "test_default_calling_form_paging")
 */

// sample-metadata
//   title: test default calling form for paging
//   description: Test default calling form for paging methods.
//   usage: php samples/V1/TestDefaultCallingFormForPaging.php
// [START test_default_calling_form_for_paging]
require __DIR__ . '/../../vendor/autoload.php';

use Google\Cloud\Example\Library\V1\LibraryServiceClient;

/** Test default calling form for paging methods. */
function sampleListShelves()
{
    $libraryServiceClient = new LibraryServiceClient();

    try {
        // Iterate through all elements
        $pagedResponse = $libraryServiceClient->listShelves();
        foreach ($pagedResponse->iterateAllElements() as $responseItem) {
            printf("shelf name: %s" . PHP_EOL, print_r($responseItem, true));
        }
    } finally {
        $libraryServiceClient->close();
    }
}
// [END test_default_calling_form_for_paging]

sampleListShelves();

============== file: samples/V1/TestFloatAndInt64.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DO NOT EDIT! This is a generated sample ("Request",  "test_float_and_int64")
 */

// sample-metadata
//   title:
//   usage: php samples/V1/TestFloatAndInt64.php [--param_float 1.2345] [--param_long 67890]
// [START test_float_and_int64]
require __DIR__ . '/../../vendor/autoload.php';

use Google\Cloud\Example\Library\V1\LibraryServiceClient;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest\InnerEnum;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest\InnerMessage;
use Google\Protobuf\Any;
use Google\Protobuf\BoolValue;
use Google\Protobuf\BytesValue;
use Google\Protobuf\DoubleValue;
use Google\Protobuf\Duration;
use Google\Protobuf\FieldMask;
use Google\Protobuf\FloatValue;
use Google\Protobuf\Int32Value;
use Google\Protobuf\Int64Value;
use Google\Protobuf\ListValue;
use Google\Protobuf\StringValue;
use Google\Protobuf\Struct;
use Google\Protobuf\Timestamp;
use Google\Protobuf\UInt32Value;
use Google\Protobuf\UInt64Value;
use Google\Protobuf\Value;

function sampleTestOptionalRequiredFlatteningParams($paramFloat, $paramLong)
{
    $libraryServiceClient = new LibraryServiceClient();

    // $paramFloat = 1.2345;
    // $paramLong = 67890;
    $requiredSingularInt32 = 0;
    $requiredSingularDouble = 0.0;
    $requiredSingularBool = false;
    $requiredSingularEnum = InnerEnum::ZERO;
    $requiredSingularString = '';
    $requiredSingularBytes = '';
    $requiredSingularMessage = new InnerMessage();
    $formattedRequiredSingularResourceName = $libraryServiceClient->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
    $formattedRequiredSingularResourceNameOneof = $libraryServiceClient->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
    $requiredSingularResourceNameCommon = '';
    $requiredSingularFixed32 = 0;
    $requiredSingularFixed64 = 0;
    $requiredRepeatedInt32 = [];
    $requiredRepeatedInt64 = [];
    $requiredRepeatedFloat = [];
    $requiredRepeatedDouble = [];
    $requiredRepeatedBool = [];
    $requiredRepeatedEnum = [];
    $requiredRepeatedString = [];
    $requiredRepeatedBytes = [];
    $requiredRepeatedMessage = [];
    $formattedRequiredRepeatedResourceName = [];
    $formattedRequiredRepeatedResourceNameOneof = [];
    $requiredRepeatedResourceNameCommon = [];
    $requiredRepeatedFixed32 = [];
    $requiredRepeatedFixed64 = [];
    $requiredMap = [];
    $requiredAnyValue = new Any();
    $requiredStructValue = new Struct();
    $requiredValueValue = new Value();
    $requiredListValueValue = new ListValue();
    $requiredTimeValue = new Timestamp();
    $requiredDurationValue = new Duration();
    $requiredFieldMaskValue = new FieldMask();
    $requiredInt32Value = new Int32Value();
    $requiredUint32Value = new UInt32Value();
    $requiredInt64Value = new Int64Value();
    $requiredUint64Value = new UInt64Value();
    $requiredFloatValue = new FloatValue();
    $requiredDoubleValue = new DoubleValue();
    $requiredStringValue = new StringValue();
    $requiredBoolValue = new BoolValue();
    $requiredBytesValue = new BytesValue();
    $requiredRepeatedAnyValue = [];
    $requiredRepeatedStructValue = [];
    $requiredRepeatedValueValue = [];
    $requiredRepeatedListValueValue = [];
    $requiredRepeatedTimeValue = [];
    $requiredRepeatedDurationValue = [];
    $requiredRepeatedFieldMaskValue = [];
    $requiredRepeatedInt32Value = [];
    $requiredRepeatedUint32Value = [];
    $requiredRepeatedInt64Value = [];
    $requiredRepeatedUint64Value = [];
    $requiredRepeatedFloatValue = [];
    $requiredRepeatedDoubleValue = [];
    $requiredRepeatedStringValue = [];
    $requiredRepeatedBoolValue = [];
    $requiredRepeatedBytesValue = [];

    try {
        $response = $libraryServiceClient->testOptionalRequiredFlatteningParams($requiredSingularInt32, $paramLong, $paramFloat, $requiredSingularDouble, $requiredSingularBool, $requiredSingularEnum, $requiredSingularString, $requiredSingularBytes, $requiredSingularMessage, $formattedRequiredSingularResourceName, $formattedRequiredSingularResourceNameOneof, $requiredSingularResourceNameCommon, $requiredSingularFixed32, $requiredSingularFixed64, $requiredRepeatedInt32, $requiredRepeatedInt64, $requiredRepeatedFloat, $requiredRepeatedDouble, $requiredRepeatedBool, $requiredRepeatedEnum, $requiredRepeatedString, $requiredRepeatedBytes, $requiredRepeatedMessage, $formattedRequiredRepeatedResourceName, $formattedRequiredRepeatedResourceNameOneof, $requiredRepeatedResourceNameCommon, $requiredRepeatedFixed32, $requiredRepeatedFixed64, $requiredMap, $requiredAnyValue, $requiredStructValue, $requiredValueValue, $requiredListValueValue, $requiredTimeValue, $requiredDurationValue, $requiredFieldMaskValue, $requiredInt32Value, $requiredUint32Value, $requiredInt64Value, $requiredUint64Value, $requiredFloatValue, $requiredDoubleValue, $requiredStringValue, $requiredBoolValue, $requiredBytesValue, $requiredRepeatedAnyValue, $requiredRepeatedStructValue, $requiredRepeatedValueValue, $requiredRepeatedListValueValue, $requiredRepeatedTimeValue, $requiredRepeatedDurationValue, $requiredRepeatedFieldMaskValue, $requiredRepeatedInt32Value, $requiredRepeatedUint32Value, $requiredRepeatedInt64Value, $requiredRepeatedUint64Value, $requiredRepeatedFloatValue, $requiredRepeatedDoubleValue, $requiredRepeatedStringValue, $requiredRepeatedBoolValue, $requiredRepeatedBytesValue);
        printf("%s" . PHP_EOL, print_r($response, true));
    } finally {
        $libraryServiceClient->close();
    }
}
// [END test_float_and_int64]

$opts = [
    'param_float::',
    'param_long::',
];

$defaultOptions = [
    'param_float' => 1.2345,
    'param_long' => 67890,
];

$options = getopt('', $opts);
$options += $defaultOptions;

$paramFloat = $options['param_float'];
$paramLong = $options['param_long'];

sampleTestOptionalRequiredFlatteningParams($paramFloat, $paramLong);

============== file: samples/V1/TestResourceNameOneof.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DO NOT EDIT! This is a generated sample ("Request",  "test_resource_name_oneof")
 */

// sample-metadata
//   title:
//   usage: php samples/V1/TestResourceNameOneof.php
// [START test_resource_name_oneof]
require __DIR__ . '/../../vendor/autoload.php';

use Google\Cloud\Example\Library\V1\LibraryServiceClient;

function sampleGetBookFromAbsolutelyAnywhere()
{
    $libraryServiceClient = new LibraryServiceClient();

    $formattedName = $libraryServiceClient->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');

    try {
        $response = $libraryServiceClient->getBookFromAbsolutelyAnywhere($formattedName);
        printf("Archived book found." . PHP_EOL);
    } finally {
        $libraryServiceClient->close();
    }
}
// [END test_resource_name_oneof]

sampleGetBookFromAbsolutelyAnywhere();

============== file: samples/V1/TestResourceNameOneof2.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DO NOT EDIT! This is a generated sample ("Request",  "test_resource_name_oneof_2")
 */

// sample-metadata
//   title:
//   usage: php samples/V1/TestResourceNameOneof2.php
// [START test_resource_name_oneof_2]
require __DIR__ . '/../../vendor/autoload.php';

use Google\Cloud\Example\Library\V1\LibraryServiceClient;

function sampleGetBookFromAbsolutelyAnywhere()
{
    $libraryServiceClient = new LibraryServiceClient();

    $formattedName = $libraryServiceClient->shelfBookOneBookTwoName('The Shelf to search for the book', '[BOOK_ONE]', '[BOOK_TWO]');

    try {
        $response = $libraryServiceClient->getBookFromAbsolutelyAnywhere($formattedName);
        printf("Book on shelf found." . PHP_EOL);
    } finally {
        $libraryServiceClient->close();
    }
}
// [END test_resource_name_oneof_2]

sampleGetBookFromAbsolutelyAnywhere();

============== file: samples/V1/TestSettingUpEmptyObjectsInRequest.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DO NOT EDIT! This is a generated sample ("Request",  "test_setting_up_empty_objects_in_request")
 */

// sample-metadata
//   title: test_setting_up_empty_objects_in_request
//   description: Test setting up empty objects in the request objects.
//   usage: php samples/V1/TestSettingUpEmptyObjectsInRequest.php
// [START test_setting_up_empty_objects_in_request]
require __DIR__ . '/../../vendor/autoload.php';

use Google\Cloud\Example\Library\V1\LibraryServiceClient;
use Google\Example\Library\V1\SomeMessage;
use Google\Example\Library\V1\StringBuilder;

/** Test setting up empty objects in the request objects. */
function sampleGetShelf()
{
    $libraryServiceClient = new LibraryServiceClient();

    $formattedName = $libraryServiceClient->shelfName('my-shelf');
    $options = '';

    // we can set up this empty nested object now
    $message = new SomeMessage();
    $stringBuilder = new StringBuilder();

    try {
        $response = $libraryServiceClient->getShelf($formattedName, $options, ['message' => $message, 'stringBuilder' => $stringBuilder]);
        printf("Shelf found." . PHP_EOL);
    } finally {
        $libraryServiceClient->close();
    }
}
// [END test_setting_up_empty_objects_in_request]

sampleGetShelf();

============== file: samples/V1/ThisTagShouldBeTheNameOfTheFile.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DO NOT EDIT! This is a generated sample ("LongRunningRequest",  "wap")
 */

// sample-metadata
//   title: GetBigBook: 'War and Peace'
//   description: Testing calling forms
//   usage: php samples/V1/ThisTagShouldBeTheNameOfTheFile.php [--shelf "Novel\\\"\`\b\t\n\r"]
// [START this_tag_should_be_the_name_of_the_file]
require __DIR__ . '/../../vendor/autoload.php';

use Google\Cloud\Example\Library\V1\LibraryServiceClient;

/** Testing calling forms */
function sampleGetBigBook($shelf)
{
    $libraryServiceClient = new LibraryServiceClient();

    // $shelf = 'Novel\\"`\b\t\n\r';
    $formattedName = $libraryServiceClient->shelfBookOneBookTwoName($shelf, '[BOOK_ONE]', '[BOOK_TWO]');

    try {
        $operationResponse = $libraryServiceClient->getBigBook($formattedName);
        $operationResponse->pollUntilComplete();
        if ($operationResponse->operationSucceeded()) {
            $response = $operationResponse->getResult();
            // Testing iterating over map fields when both key and value are specified.
            foreach ($response->getMapListValueValue() as $myKey => $myValue) {
                printf("key: %s, value: %s" . PHP_EOL, $myKey, print_r($myValue, true));
            }

            // Testing iterating over map fields when only key is specified.
            foreach (array_keys($response->getMapListValueValue()) as $anotherKey) {
                printf("key: %s" . PHP_EOL, $anotherKey);
            }

            // Testing iterating over map fields when only value is specified.
            foreach ($response->getMapListValueValue() as $anotherValue) {
                printf("value: %s" . PHP_EOL, print_r($anotherValue, true));
            }

            printf("name: %s" . PHP_EOL, $response->getName());
            printf("author: %s" . PHP_EOL, $response->getAuthor());
        } else {
            $error = $operationResponse->getError();
            // handleError($error)
        }
    } finally {
        $libraryServiceClient->close();
    }
}
// [END this_tag_should_be_the_name_of_the_file]

$opts = [
    'shelf::',
];

$defaultOptions = [
    'shelf' => 'Novel\\"`\b\t\n\r',
];

$options = getopt('', $opts);
$options += $defaultOptions;

$shelf = $options['shelf'];

sampleGetBigBook($shelf);

============== file: src/V1/Gapic/LibraryServiceGapicClient.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * This file was generated from the file
 * https://github.com/google/googleapis/blob/master/library_rest.proto
 * and updates to that file get reflected here through a refresh process.
 *
 * @experimental
 */

namespace Google\Cloud\Example\Library\V1\Gapic;

use Google\ApiCore\ApiException;
use Google\ApiCore\Call;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\LongRunning\OperationsClient;
use Google\ApiCore\OperationResponse;
use Google\ApiCore\PathTemplate;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\Example\Library\V1\AddCommentsRequest;
use Google\Example\Library\V1\ArchiveBooksMetadata;
use Google\Example\Library\V1\ArchiveBooksRequest;
use Google\Example\Library\V1\ArchiveBooksResponse;
use Google\Example\Library\V1\Book;
use Google\Example\Library\V1\BookFromAnywhere;
use Google\Example\Library\V1\BookFromArchive;
use Google\Example\Library\V1\Book\MapBoolKeyEntry;
use Google\Example\Library\V1\Book\MapListValueValueEntry;
use Google\Example\Library\V1\Book\MapMessageValueEntry;
use Google\Example\Library\V1\Book\MapStringValueEntry;
use Google\Example\Library\V1\Book\Rating;
use Google\Example\Library\V1\Comment;
use Google\Example\Library\V1\CreateBookRequest;
use Google\Example\Library\V1\CreateInventoryRequest;
use Google\Example\Library\V1\CreateShelfRequest;
use Google\Example\Library\V1\DeleteBookRequest;
use Google\Example\Library\V1\DeleteShelfRequest;
use Google\Example\Library\V1\FindRelatedBooksRequest;
use Google\Example\Library\V1\FindRelatedBooksResponse;
use Google\Example\Library\V1\GetBigBookMetadata;
use Google\Example\Library\V1\GetBookFromAbsolutelyAnywhereRequest;
use Google\Example\Library\V1\GetBookFromAnywhereRequest;
use Google\Example\Library\V1\GetBookFromArchiveRequest;
use Google\Example\Library\V1\GetBookRequest;
use Google\Example\Library\V1\GetShelfRequest;
use Google\Example\Library\V1\Inventory;
use Google\Example\Library\V1\ListAggregatedShelvesRequest;
use Google\Example\Library\V1\ListAggregatedShelvesResponse;
use Google\Example\Library\V1\ListBooksRequest;
use Google\Example\Library\V1\ListBooksResponse;
use Google\Example\Library\V1\ListShelvesRequest;
use Google\Example\Library\V1\ListShelvesResponse;
use Google\Example\Library\V1\ListStringsRequest;
use Google\Example\Library\V1\ListStringsResponse;
use Google\Example\Library\V1\MergeShelvesRequest;
use Google\Example\Library\V1\MoveBookRequest;
use Google\Example\Library\V1\MoveBooksRequest;
use Google\Example\Library\V1\MoveBooksResponse;
use Google\Example\Library\V1\PublishSeriesRequest;
use Google\Example\Library\V1\PublishSeriesResponse;
use Google\Example\Library\V1\SeriesUuid;
use Google\Example\Library\V1\Shelf;
use Google\Example\Library\V1\SomeMessage;
use Google\Example\Library\V1\StringBuilder;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest\InnerEnum;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest\InnerMessage;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest\OptionalMapEntry;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest\RequiredMapEntry;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsResponse;
use Google\Example\Library\V1\UpdateBookIndexRequest;
use Google\Example\Library\V1\UpdateBookIndexRequest\IndexMapEntry;
use Google\Example\Library\V1\UpdateBookRequest;
use Google\LongRunning\Operation;
use Google\Protobuf\Any;
use Google\Protobuf\BoolValue;
use Google\Protobuf\BytesValue;
use Google\Protobuf\DoubleValue;
use Google\Protobuf\Duration;
use Google\Protobuf\FieldMask;
use Google\Protobuf\FloatValue;
use Google\Protobuf\GPBEmpty;
use Google\Protobuf\Int32Value;
use Google\Protobuf\Int64Value;
use Google\Protobuf\ListValue;
use Google\Protobuf\StringValue;
use Google\Protobuf\Struct;
use Google\Protobuf\Timestamp;
use Google\Protobuf\UInt32Value;
use Google\Protobuf\UInt64Value;
use Google\Protobuf\Value;
use Google\Tagger\CustomNamespace\V1\AddLabelRequest;
use Google\Tagger\CustomNamespace\V1\AddLabelResponse;
use Google\Test\Shared\Data\Used;

/**
 * Service Description: This API represents a simple digital library.  It lets you manage Shelf
 * resources and Book resources in the library. It defines the following
 * resource model:
 *
 * - The API has a collection of [Shelf][google.example.library.v1.Shelf]
 *   resources, named ``bookShelves/*``
 *
 * - Each Shelf has a collection of [Book][google.example.library.v1.Book]
 *   resources, named `bookShelves/&#42;/books/*`
 *
 * Check out [cloud docs!](https://cloud.google.com/library/example/link).
 * This is [not a cloud link](http://www.google.com).
 *
 * Service comment may include special characters: <>&"`'&#64;.
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * ```
 * $libraryServiceClient = new LibraryServiceClient();
 * try {
 *     $shelf = new Shelf();
 *     $response = $libraryServiceClient->createShelf($shelf);
 * } finally {
 *     $libraryServiceClient->close();
 * }
 * ```
 *
 * Many parameters require resource names to be formatted in a particular way. To assist
 * with these names, this class includes a format method for each type of name, and additionally
 * a parseName method to extract the individual identifiers contained within formatted names
 * that are returned by the API.
 * @experimental
 */
class LibraryServiceGapicClient
{
    use GapicClientTrait;

    /**
     * The name of the service.
     */
    const SERVICE_NAME = 'google.example.library.v1.LibraryService';

    /**
     * The default address of the service.
     */
    const SERVICE_ADDRESS = 'library-example.googleapis.com';

    /**
     * The default port of the service.
     */
    const DEFAULT_SERVICE_PORT = 1234;

    /**
     * The name of the code generator, to be included in the agent header.
     */
    const CODEGEN_NAME = 'gapic';

    /**
     * The default scopes required by the service.
     */
    public static $serviceScopes = [
        'https://www.googleapis.com/auth/cloud-platform',
        'https://www.googleapis.com/auth/library',
    ];
    private static $archiveNameTemplate;
    private static $archiveBookNameTemplate;
    private static $archivedBookNameTemplate;
    private static $bookNameTemplate;
    private static $bookFromArchiveNameTemplate;
    private static $folderNameTemplate;
    private static $inventoryNameTemplate;
    private static $locationNameTemplate;
    private static $organizationReaderNameTemplate;
    private static $projectNameTemplate;
    private static $projectBookNameTemplate;
    private static $projectLocationPublisherBookNameTemplate;
    private static $projectReaderNameTemplate;
    private static $projectShelfReaderSurnameReaderFirstNameNameTemplate;
    private static $publisherNameTemplate;
    private static $readerNameTemplate;
    private static $shelfNameTemplate;
    private static $shelfBookOneBookTwoNameTemplate;
    private static $pathTemplateMap;

    private $operationsClient;
    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'serviceAddress' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../resources/library_service_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../resources/library_service_descriptor_config.php',
            'credentialsConfig' => [
                'scopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../resources/library_service_rest_client_config.php',
                ]
            ]
        ];
    }

    private static function getArchiveNameTemplate()
    {
        if (self::$archiveNameTemplate == null) {
            self::$archiveNameTemplate = new PathTemplate('archives/{archive}');
        }

        return self::$archiveNameTemplate;
    }

    private static function getArchiveBookNameTemplate()
    {
        if (self::$archiveBookNameTemplate == null) {
            self::$archiveBookNameTemplate = new PathTemplate('archives/{archive}/books/{book}');
        }

        return self::$archiveBookNameTemplate;
    }

    private static function getArchivedBookNameTemplate()
    {
        if (self::$archivedBookNameTemplate == null) {
            self::$archivedBookNameTemplate = new PathTemplate('archives/{archive}/books/{book}');
        }

        return self::$archivedBookNameTemplate;
    }

    private static function getBookNameTemplate()
    {
        if (self::$bookNameTemplate == null) {
            self::$bookNameTemplate = new PathTemplate('shelves/{shelf}/books/{book_one}~{book_two}');
        }

        return self::$bookNameTemplate;
    }

    private static function getBookFromArchiveNameTemplate()
    {
        if (self::$bookFromArchiveNameTemplate == null) {
            self::$bookFromArchiveNameTemplate = new PathTemplate('archives/{archive}/books/{book}');
        }

        return self::$bookFromArchiveNameTemplate;
    }

    private static function getFolderNameTemplate()
    {
        if (self::$folderNameTemplate == null) {
            self::$folderNameTemplate = new PathTemplate('folders/{folder}');
        }

        return self::$folderNameTemplate;
    }

    private static function getInventoryNameTemplate()
    {
        if (self::$inventoryNameTemplate == null) {
            self::$inventoryNameTemplate = new PathTemplate('projects/{project}/locations/{location}/publishers/{publisher}/inventory');
        }

        return self::$inventoryNameTemplate;
    }

    private static function getLocationNameTemplate()
    {
        if (self::$locationNameTemplate == null) {
            self::$locationNameTemplate = new PathTemplate('projects/{project}/locations/{location}');
        }

        return self::$locationNameTemplate;
    }

    private static function getOrganizationReaderNameTemplate()
    {
        if (self::$organizationReaderNameTemplate == null) {
            self::$organizationReaderNameTemplate = new PathTemplate('organization/{organization}/reader');
        }

        return self::$organizationReaderNameTemplate;
    }

    private static function getProjectNameTemplate()
    {
        if (self::$projectNameTemplate == null) {
            self::$projectNameTemplate = new PathTemplate('projects/{project}');
        }

        return self::$projectNameTemplate;
    }

    private static function getProjectBookNameTemplate()
    {
        if (self::$projectBookNameTemplate == null) {
            self::$projectBookNameTemplate = new PathTemplate('projects/{project}/books/{book}');
        }

        return self::$projectBookNameTemplate;
    }

    private static function getProjectLocationPublisherBookNameTemplate()
    {
        if (self::$projectLocationPublisherBookNameTemplate == null) {
            self::$projectLocationPublisherBookNameTemplate = new PathTemplate('projects/{project}/locations/{location}/publishers/{publisher}/inventory/books/{book}');
        }

        return self::$projectLocationPublisherBookNameTemplate;
    }

    private static function getProjectReaderNameTemplate()
    {
        if (self::$projectReaderNameTemplate == null) {
            self::$projectReaderNameTemplate = new PathTemplate('projects/{project}/readers/{reader}');
        }

        return self::$projectReaderNameTemplate;
    }

    private static function getProjectShelfReaderSurnameReaderFirstNameNameTemplate()
    {
        if (self::$projectShelfReaderSurnameReaderFirstNameNameTemplate == null) {
            self::$projectShelfReaderSurnameReaderFirstNameNameTemplate = new PathTemplate('projects/{project}/shelves/{shelf}/readers/{reader_surname}.{reader_first_name}');
        }

        return self::$projectShelfReaderSurnameReaderFirstNameNameTemplate;
    }

    private static function getPublisherNameTemplate()
    {
        if (self::$publisherNameTemplate == null) {
            self::$publisherNameTemplate = new PathTemplate('projects/{project}/locations/{location}/publishers/{publisher}');
        }

        return self::$publisherNameTemplate;
    }

    private static function getReaderNameTemplate()
    {
        if (self::$readerNameTemplate == null) {
            self::$readerNameTemplate = new PathTemplate('projects/{project}/readers/{reader}');
        }

        return self::$readerNameTemplate;
    }

    private static function getShelfNameTemplate()
    {
        if (self::$shelfNameTemplate == null) {
            self::$shelfNameTemplate = new PathTemplate('shelves/{shelf}');
        }

        return self::$shelfNameTemplate;
    }

    private static function getShelfBookOneBookTwoNameTemplate()
    {
        if (self::$shelfBookOneBookTwoNameTemplate == null) {
            self::$shelfBookOneBookTwoNameTemplate = new PathTemplate('shelves/{shelf}/books/{book_one}~{book_two}');
        }

        return self::$shelfBookOneBookTwoNameTemplate;
    }


    private static function getPathTemplateMap()
    {
        if (self::$pathTemplateMap == null) {
            self::$pathTemplateMap = [
                'archive' => self::getArchiveNameTemplate(),
                'archiveBook' => self::getArchiveBookNameTemplate(),
                'archivedBook' => self::getArchivedBookNameTemplate(),
                'book' => self::getBookNameTemplate(),
                'bookFromArchive' => self::getBookFromArchiveNameTemplate(),
                'folder' => self::getFolderNameTemplate(),
                'inventory' => self::getInventoryNameTemplate(),
                'location' => self::getLocationNameTemplate(),
                'organizationReader' => self::getOrganizationReaderNameTemplate(),
                'project' => self::getProjectNameTemplate(),
                'projectBook' => self::getProjectBookNameTemplate(),
                'projectLocationPublisherBook' => self::getProjectLocationPublisherBookNameTemplate(),
                'projectReader' => self::getProjectReaderNameTemplate(),
                'projectShelfReaderSurnameReaderFirstName' => self::getProjectShelfReaderSurnameReaderFirstNameNameTemplate(),
                'publisher' => self::getPublisherNameTemplate(),
                'reader' => self::getReaderNameTemplate(),
                'shelf' => self::getShelfNameTemplate(),
                'shelfBookOneBookTwo' => self::getShelfBookOneBookTwoNameTemplate(),
            ];
        }
        return self::$pathTemplateMap;
    }
    /**
     * Formats a string containing the fully-qualified path to represent
     * a archive resource.
     *
     * @param string $archive
     * @return string The formatted archive resource.
     * @experimental
     */
    public static function archiveName($archive)
    {
        return self::getArchiveNameTemplate()->render([
            'archive' => $archive,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a archive_book resource.
     *
     * @param string $archive
     * @param string $book
     * @return string The formatted archive_book resource.
     * @experimental
     */
    public static function archiveBookName($archive, $book)
    {
        return self::getArchiveBookNameTemplate()->render([
            'archive' => $archive,
            'book' => $book,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a archived_book resource.
     *
     * @param string $archive
     * @param string $book
     * @return string The formatted archived_book resource.
     * @experimental
     */
    public static function archivedBookName($archive, $book)
    {
        return self::getArchivedBookNameTemplate()->render([
            'archive' => $archive,
            'book' => $book,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a book resource.
     *
     * @param string $shelf
     * @param string $bookOne
     * @param string $bookTwo
     * @return string The formatted book resource.
     * @experimental
     */
    public static function bookName($shelf, $bookOne, $bookTwo)
    {
        return self::getBookNameTemplate()->render([
            'shelf' => $shelf,
            'book_one' => $bookOne,
            'book_two' => $bookTwo,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a book_from_archive resource.
     *
     * @param string $archive
     * @param string $book
     * @return string The formatted book_from_archive resource.
     * @deprecated Multi-pattern resource names will have unified formatting functions.
     *             This helper function will be deleted in the next major version.
     */
    public static function bookFromArchiveName($archive, $book)
    {
        return self::getBookFromArchiveNameTemplate()->render([
            'archive' => $archive,
            'book' => $book,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a folder resource.
     *
     * @param string $folder
     * @return string The formatted folder resource.
     * @experimental
     */
    public static function folderName($folder)
    {
        return self::getFolderNameTemplate()->render([
            'folder' => $folder,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a inventory resource.
     *
     * @param string $project
     * @param string $location
     * @param string $publisher
     * @return string The formatted inventory resource.
     * @experimental
     */
    public static function inventoryName($project, $location, $publisher)
    {
        return self::getInventoryNameTemplate()->render([
            'project' => $project,
            'location' => $location,
            'publisher' => $publisher,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a location resource.
     *
     * @param string $project
     * @param string $location
     * @return string The formatted location resource.
     * @experimental
     */
    public static function locationName($project, $location)
    {
        return self::getLocationNameTemplate()->render([
            'project' => $project,
            'location' => $location,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a organization_reader resource.
     *
     * @param string $organization
     * @return string The formatted organization_reader resource.
     * @experimental
     */
    public static function organizationReaderName($organization)
    {
        return self::getOrganizationReaderNameTemplate()->render([
            'organization' => $organization,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a project resource.
     *
     * @param string $project
     * @return string The formatted project resource.
     * @experimental
     */
    public static function projectName($project)
    {
        return self::getProjectNameTemplate()->render([
            'project' => $project,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a project_book resource.
     *
     * @param string $project
     * @param string $book
     * @return string The formatted project_book resource.
     * @experimental
     */
    public static function projectBookName($project, $book)
    {
        return self::getProjectBookNameTemplate()->render([
            'project' => $project,
            'book' => $book,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a project_location_publisher_book resource.
     *
     * @param string $project
     * @param string $location
     * @param string $publisher
     * @param string $book
     * @return string The formatted project_location_publisher_book resource.
     * @experimental
     */
    public static function projectLocationPublisherBookName($project, $location, $publisher, $book)
    {
        return self::getProjectLocationPublisherBookNameTemplate()->render([
            'project' => $project,
            'location' => $location,
            'publisher' => $publisher,
            'book' => $book,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a project_reader resource.
     *
     * @param string $project
     * @param string $reader
     * @return string The formatted project_reader resource.
     * @experimental
     */
    public static function projectReaderName($project, $reader)
    {
        return self::getProjectReaderNameTemplate()->render([
            'project' => $project,
            'reader' => $reader,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a project_shelf_reader_surname_reader_first_name resource.
     *
     * @param string $project
     * @param string $shelf
     * @param string $readerSurname
     * @param string $readerFirstName
     * @return string The formatted project_shelf_reader_surname_reader_first_name resource.
     * @experimental
     */
    public static function projectShelfReaderSurnameReaderFirstNameName($project, $shelf, $readerSurname, $readerFirstName)
    {
        return self::getProjectShelfReaderSurnameReaderFirstNameNameTemplate()->render([
            'project' => $project,
            'shelf' => $shelf,
            'reader_surname' => $readerSurname,
            'reader_first_name' => $readerFirstName,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a publisher resource.
     *
     * @param string $project
     * @param string $location
     * @param string $publisher
     * @return string The formatted publisher resource.
     * @experimental
     */
    public static function publisherName($project, $location, $publisher)
    {
        return self::getPublisherNameTemplate()->render([
            'project' => $project,
            'location' => $location,
            'publisher' => $publisher,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a reader resource.
     *
     * @param string $project
     * @param string $reader
     * @return string The formatted reader resource.
     * @experimental
     */
    public static function readerName($project, $reader)
    {
        return self::getReaderNameTemplate()->render([
            'project' => $project,
            'reader' => $reader,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a shelf resource.
     *
     * @param string $shelf
     * @return string The formatted shelf resource.
     * @experimental
     */
    public static function shelfName($shelf)
    {
        return self::getShelfNameTemplate()->render([
            'shelf' => $shelf,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a shelf_book_one_book_two resource.
     *
     * @param string $shelf
     * @param string $bookOne
     * @param string $bookTwo
     * @return string The formatted shelf_book_one_book_two resource.
     * @experimental
     */
    public static function shelfBookOneBookTwoName($shelf, $bookOne, $bookTwo)
    {
        return self::getShelfBookOneBookTwoNameTemplate()->render([
            'shelf' => $shelf,
            'book_one' => $bookOne,
            'book_two' => $bookTwo,
        ]);
    }

    /**
     * Parses a formatted name string and returns an associative array of the components in the name.
     * The following name formats are supported:
     * Template: Pattern
     * - archive: archives/{archive}
     * - archiveBook: archives/{archive}/books/{book}
     * - archivedBook: archives/{archive}/books/{book}
     * - book: shelves/{shelf}/books/{book_one}~{book_two}
     * - bookFromArchive: archives/{archive}/books/{book}
     * - folder: folders/{folder}
     * - inventory: projects/{project}/locations/{location}/publishers/{publisher}/inventory
     * - location: projects/{project}/locations/{location}
     * - organizationReader: organization/{organization}/reader
     * - project: projects/{project}
     * - projectBook: projects/{project}/books/{book}
     * - projectLocationPublisherBook: projects/{project}/locations/{location}/publishers/{publisher}/inventory/books/{book}
     * - projectReader: projects/{project}/readers/{reader}
     * - projectShelfReaderSurnameReaderFirstName: projects/{project}/shelves/{shelf}/readers/{reader_surname}.{reader_first_name}
     * - publisher: projects/{project}/locations/{location}/publishers/{publisher}
     * - reader: projects/{project}/readers/{reader}
     * - shelf: shelves/{shelf}
     * - shelfBookOneBookTwo: shelves/{shelf}/books/{book_one}~{book_two}
     *
     * The optional $template argument can be supplied to specify a particular pattern, and must
     * match one of the templates listed above. If no $template argument is provided, or if the
     * $template argument does not match one of the templates listed, then parseName will check
     * each of the supported templates, and return the first match.
     *
     * @param string $formattedName The formatted name string
     * @param string $template Optional name of template to match
     * @return array An associative array from name component IDs to component values.
     * @throws ValidationException If $formattedName could not be matched.
     * @experimental
     */
    public static function parseName($formattedName, $template = null)
    {
        $templateMap = self::getPathTemplateMap();

        if ($template) {
            if (!isset($templateMap[$template])) {
                throw new ValidationException("Template name $template does not exist");
            }
            return $templateMap[$template]->match($formattedName);
        }

        foreach ($templateMap as $templateName => $pathTemplate) {
            try {
                return $pathTemplate->match($formattedName);
            } catch (ValidationException $ex) {
                // Swallow the exception to continue trying other path templates
            }
        }
        throw new ValidationException("Input did not match any known format. Input: $formattedName");
    }

    private static function defaultTransport()
    {
        return 'rest';
    }

    private static function getSupportedTransports()
    {
        return ['rest'];
    }

    /**
     * Return an OperationsClient object with the same endpoint as $this.
     *
     * @return OperationsClient
     * @experimental
     */
    public function getOperationsClient()
    {
        return $this->operationsClient;
    }

    /**
     * Resume an existing long running operation that was previously started
     * by a long running API method. If $methodName is not provided, or does
     * not match a long running API method, then the operation can still be
     * resumed, but the OperationResponse object will not deserialize the
     * final response.
     *
     * @param string $operationName The name of the long running operation
     * @param string $methodName The name of the method used to start the operation
     * @return OperationResponse
     * @experimental
     */
    public function resumeOperation($operationName, $methodName = null)
    {
        $options = isset($this->descriptors[$methodName]['longRunning'])
            ? $this->descriptors[$methodName]['longRunning']
            : [];
        $operation = new OperationResponse($operationName, $this->getOperationsClient(), $options);
        $operation->reload();
        return $operation;
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *     @type string $serviceAddress
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'library-example.googleapis.com:1234'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the client.
     *           For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()}.
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either a
     *           path to a JSON file, or a PHP array containing the decoded JSON data.
     *           By default this settings points to the default client config file, which is provided
     *           in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. At the moment, only supports
     *           `rest`.
     *           *Advanced usage*: Additionally, it is possible to pass in an already instantiated
     *           {@see \Google\ApiCore\Transport\TransportInterface} object. Note that when this
     *           object is provided, any settings in $transportConfig, and any $serviceAddress
     *           setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'rest' => [...]
     *           ];
     *           See the {@see \Google\ApiCore\Transport\RestTransport::build()} method for the
     *           supported options.
     * }
     * @throws ValidationException
     * @experimental
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
        $this->operationsClient = $this->createOperationsClient($clientOptions);
    }

    /**
     * Creates a shelf, and returns the new Shelf.
     * RPC method comment may include special characters: <>&"`'&#64;.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $shelf = new Shelf();
     *     $response = $libraryServiceClient->createShelf($shelf);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param Shelf $shelf The shelf to create.
     * @param array $optionalArgs {
     *     Optional.
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\Shelf
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function createShelf($shelf, array $optionalArgs = [])
    {
        $request = new CreateShelfRequest();
        $request->setShelf($shelf);

        return $this->startCall(
            'CreateShelf',
            Shelf::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Gets a shelf.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->shelfName('[SHELF]');
     *     $options = '';
     *     $response = $libraryServiceClient->getShelf($formattedName, $options);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the shelf to retrieve.
     * @param string $options To test 'options' parameter name conflict.
     * @param array $optionalArgs {
     *     Optional.
     *     @type SomeMessage $message
     *          Field to verify that message-type query parameter gets flattened.
     *     @type StringBuilder $stringBuilder
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\Shelf
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function getShelf($name, $options, array $optionalArgs = [])
    {
        $request = new GetShelfRequest();
        $request->setName($name);
        $request->setOptions($options);
        if (isset($optionalArgs['message'])) {
            $request->setMessage($optionalArgs['message']);
        }
        if (isset($optionalArgs['stringBuilder'])) {
            $request->setStringBuilder($optionalArgs['stringBuilder']);
        }

        return $this->startCall(
            'GetShelf',
            Shelf::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Lists shelves.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     // Iterate over pages of elements
     *     $pagedResponse = $libraryServiceClient->listShelves();
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *
     *
     *     // Alternatively:
     *
     *     // Iterate through all elements
     *     $pagedResponse = $libraryServiceClient->listShelves();
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *     @type string $pageToken
     *          A page token is used to specify a page of values to be returned.
     *          If no page token is specified (the default), the first page
     *          of values will be returned. Any page token used here must have
     *          been generated by a previous call to the API.
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function listShelves(array $optionalArgs = [])
    {
        $request = new ListShelvesRequest();
        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        return $this->getPagedListResponse(
            'ListShelves',
            $optionalArgs,
            ListShelvesResponse::class,
            $request
        );
    }

    /**
     * Deletes a shelf.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->shelfName('[SHELF]');
     *     $libraryServiceClient->deleteShelf($formattedName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the shelf to delete.
     * @param array $optionalArgs {
     *     Optional.
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function deleteShelf($name, array $optionalArgs = [])
    {
        $request = new DeleteShelfRequest();
        $request->setName($name);

        return $this->startCall(
            'DeleteShelf',
            GPBEmpty::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Merges two shelves by adding all books from the shelf named
     * `other_shelf_name` to shelf `name`, and deletes
     * `other_shelf_name`. Returns the updated shelf.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->shelfName('[SHELF]');
     *     $formattedOtherShelfName = $libraryServiceClient->shelfName('[SHELF]');
     *     $response = $libraryServiceClient->mergeShelves($formattedName, $formattedOtherShelfName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the shelf we're adding books to.
     * @param string $otherShelfName The name of the shelf we're removing books from and deleting.
     * @param array $optionalArgs {
     *     Optional.
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\Shelf
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function mergeShelves($name, $otherShelfName, array $optionalArgs = [])
    {
        $request = new MergeShelvesRequest();
        $request->setName($name);
        $request->setOtherShelfName($otherShelfName);

        return $this->startCall(
            'MergeShelves',
            Shelf::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Creates a book.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->shelfName('[SHELF]');
     *     $book = new Book();
     *     $response = $libraryServiceClient->createBook($formattedName, $book);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the shelf in which the book is created.
     * @param Book $book The book to create.
     * @param array $optionalArgs {
     *     Optional.
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\Book
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function createBook($name, $book, array $optionalArgs = [])
    {
        $request = new CreateBookRequest();
        $request->setName($name);
        $request->setBook($book);

        return $this->startCall(
            'CreateBook',
            Book::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Creates a series of books.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $shelf = new Shelf();
     *     $books = [];
     *     $seriesString = 'foobar';
     *     $seriesUuid = new SeriesUuid();
     *     $seriesUuid->setSeriesString($seriesString);
     *     $response = $libraryServiceClient->publishSeries($shelf, $books, $seriesUuid);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param Shelf $shelf The shelf in which the series is created.
     * @param Book[] $books The books to publish in the series.
     * @param SeriesUuid $seriesUuid Uniquely identifies the series to the publishing house.
     * @param array $optionalArgs {
     *     Optional.
     *     @type int $edition
     *          The edition of the series
     *     @type bool $reviewCopy
     *          If the book is in a pre-publish state
     *     @type string $publisher
     *          The publisher of the series.
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\PublishSeriesResponse
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function publishSeries($shelf, $books, $seriesUuid, array $optionalArgs = [])
    {
        $request = new PublishSeriesRequest();
        $request->setShelf($shelf);
        $request->setBooks($books);
        $request->setSeriesUuid($seriesUuid);
        if (isset($optionalArgs['edition'])) {
            $request->setEdition($optionalArgs['edition']);
        }
        if (isset($optionalArgs['reviewCopy'])) {
            $request->setReviewCopy($optionalArgs['reviewCopy']);
        }
        if (isset($optionalArgs['publisher'])) {
            $request->setPublisher($optionalArgs['publisher']);
        }

        return $this->startCall(
            'PublishSeries',
            PublishSeriesResponse::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Gets a book.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $response = $libraryServiceClient->getBook($formattedName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the book to retrieve.
     * @param array $optionalArgs {
     *     Optional.
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\Book
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function getBook($name, array $optionalArgs = [])
    {
        $request = new GetBookRequest();
        $request->setName($name);

        return $this->startCall(
            'GetBook',
            Book::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Lists books in a shelf.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->shelfName('[SHELF]');
     *     $filter = 'book-filter-string';
     *     // Iterate over pages of elements
     *     $pagedResponse = $libraryServiceClient->listBooks($formattedName, ['filter' => $filter]);
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *
     *
     *     // Alternatively:
     *
     *     // Iterate through all elements
     *     $pagedResponse = $libraryServiceClient->listBooks($formattedName, ['filter' => $filter]);
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the shelf whose books we'd like to list.
     * @param array $optionalArgs {
     *     Optional.
     *     @type int $pageSize
     *          The maximum number of resources contained in the underlying API
     *          response. The API may return fewer values in a page, even if
     *          there are additional values to be retrieved.
     *     @type string $pageToken
     *          A page token is used to specify a page of values to be returned.
     *          If no page token is specified (the default), the first page
     *          of values will be returned. Any page token used here must have
     *          been generated by a previous call to the API.
     *     @type string $filter
     *          To test python built-in wrapping.
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function listBooks($name, array $optionalArgs = [])
    {
        $request = new ListBooksRequest();
        $request->setName($name);
        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }
        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }
        if (isset($optionalArgs['filter'])) {
            $request->setFilter($optionalArgs['filter']);
        }

        return $this->getPagedListResponse(
            'ListBooks',
            $optionalArgs,
            ListBooksResponse::class,
            $request
        );
    }

    /**
     * Deletes a book.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $libraryServiceClient->deleteBook($formattedName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the book to delete.
     * @param array $optionalArgs {
     *     Optional.
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function deleteBook($name, array $optionalArgs = [])
    {
        $request = new DeleteBookRequest();
        $request->setName($name);

        return $this->startCall(
            'DeleteBook',
            GPBEmpty::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Updates a book.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $book = new Book();
     *     $response = $libraryServiceClient->updateBook($formattedName, $book);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the book to update.
     * @param Book $book The book to update with.
     * @param array $optionalArgs {
     *     Optional.
     *     @type string $optionalFoo
     *          An optional foo.
     *     @type FieldMask $updateMask
     *          A field mask to apply, rendered as an HTTP parameter.
     *     @type \Google\Example\Library\V1\FieldMask $physicalMask
     *          To test Python import clash resolution.
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\Book
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function updateBook($name, $book, array $optionalArgs = [])
    {
        $request = new UpdateBookRequest();
        $request->setName($name);
        $request->setBook($book);
        if (isset($optionalArgs['optionalFoo'])) {
            $request->setOptionalFoo($optionalArgs['optionalFoo']);
        }
        if (isset($optionalArgs['updateMask'])) {
            $request->setUpdateMask($optionalArgs['updateMask']);
        }
        if (isset($optionalArgs['physicalMask'])) {
            $request->setPhysicalMask($optionalArgs['physicalMask']);
        }

        return $this->startCall(
            'UpdateBook',
            Book::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Moves a book to another shelf, and returns the new book.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $formattedOtherShelfName = $libraryServiceClient->shelfName('[SHELF]');
     *     $response = $libraryServiceClient->moveBook($formattedName, $formattedOtherShelfName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the book to move.
     * @param string $otherShelfName The name of the destination shelf.
     * @param array $optionalArgs {
     *     Optional.
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\Book
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function moveBook($name, $otherShelfName, array $optionalArgs = [])
    {
        $request = new MoveBookRequest();
        $request->setName($name);
        $request->setOtherShelfName($otherShelfName);

        return $this->startCall(
            'MoveBook',
            Book::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Lists a primitive resource. To test go page streaming.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     // Iterate over pages of elements
     *     $pagedResponse = $libraryServiceClient->listStrings();
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *
     *
     *     // Alternatively:
     *
     *     // Iterate through all elements
     *     $pagedResponse = $libraryServiceClient->listStrings();
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *     @type string $name
     *     @type int $pageSize
     *          The maximum number of resources contained in the underlying API
     *          response. The API may return fewer values in a page, even if
     *          there are additional values to be retrieved.
     *     @type string $pageToken
     *          A page token is used to specify a page of values to be returned.
     *          If no page token is specified (the default), the first page
     *          of values will be returned. Any page token used here must have
     *          been generated by a previous call to the API.
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function listStrings(array $optionalArgs = [])
    {
        $request = new ListStringsRequest();
        if (isset($optionalArgs['name'])) {
            $request->setName($optionalArgs['name']);
        }
        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }
        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        return $this->getPagedListResponse(
            'ListStrings',
            $optionalArgs,
            ListStringsResponse::class,
            $request
        );
    }

    /**
     * Adds comments to a book
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $comment = '';
     *     $stage = Stage::UNSET;
     *     $alignment = Alignment::CHAR;
     *     $commentsElement = new Comment();
     *     $commentsElement->setComment($comment);
     *     $commentsElement->setStage($stage);
     *     $commentsElement->setAlignment($alignment);
     *     $comments = [$commentsElement];
     *     $libraryServiceClient->addComments($formattedName, $comments);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name
     * @param Comment[] $comments
     * @param array $optionalArgs {
     *     Optional.
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function addComments($name, $comments, array $optionalArgs = [])
    {
        $request = new AddCommentsRequest();
        $request->setName($name);
        $request->setComments($comments);

        return $this->startCall(
            'AddComments',
            GPBEmpty::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Gets a book from an archive.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->archivedBookName('[ARCHIVE]', '[BOOK]');
     *     $formattedParent = $libraryServiceClient->projectName('[PROJECT]');
     *     $response = $libraryServiceClient->getBookFromArchive($formattedName, $formattedParent);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the book to retrieve.
     * @param string $parent
     * @param array $optionalArgs {
     *     Optional.
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\BookFromArchive
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function getBookFromArchive($name, $parent, array $optionalArgs = [])
    {
        $request = new GetBookFromArchiveRequest();
        $request->setName($name);
        $request->setParent($parent);

        return $this->startCall(
            'GetBookFromArchive',
            BookFromArchive::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Gets a book from a shelf or archive.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $formattedAltBookName = $libraryServiceClient->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $formattedPlace = $libraryServiceClient->locationName('[PROJECT]', '[LOCATION]');
     *     $formattedFolder = $libraryServiceClient->folderName('[FOLDER]');
     *     $response = $libraryServiceClient->getBookFromAnywhere($formattedName, $formattedAltBookName, $formattedPlace, $formattedFolder);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the book to retrieve.
     * @param string $altBookName An alternate book name, used to test restricting flattened field to a
     * single resource name type in a oneof.
     * @param string $place
     * @param string $folder
     * @param array $optionalArgs {
     *     Optional.
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\BookFromAnywhere
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function getBookFromAnywhere($name, $altBookName, $place, $folder, array $optionalArgs = [])
    {
        $request = new GetBookFromAnywhereRequest();
        $request->setName($name);
        $request->setAltBookName($altBookName);
        $request->setPlace($place);
        $request->setFolder($folder);

        return $this->startCall(
            'GetBookFromAnywhere',
            BookFromAnywhere::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Test proper OneOf-Any resource name mapping
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $response = $libraryServiceClient->getBookFromAbsolutelyAnywhere($formattedName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the book to retrieve.
     * @param array $optionalArgs {
     *     Optional.
     *     @type string $altBookName
     *          An alternate book name, used to test proper processing of placeholders
     *          within additional bindings.
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\BookFromAnywhere
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function getBookFromAbsolutelyAnywhere($name, array $optionalArgs = [])
    {
        $request = new GetBookFromAbsolutelyAnywhereRequest();
        $request->setName($name);
        if (isset($optionalArgs['altBookName'])) {
            $request->setAltBookName($optionalArgs['altBookName']);
        }

        return $this->startCall(
            'GetBookFromAbsolutelyAnywhere',
            BookFromAnywhere::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Updates the index of a book.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $indexName = 'default index';
     *     $indexMapItem = '';
     *     $indexMap = ['default_key' => $indexMapItem];
     *     $libraryServiceClient->updateBookIndex($formattedName, $indexName, $indexMap);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the book to update.
     * @param string $indexName The name of the index for the book
     * @param array $indexMap The index to update the book with
     * @param array $optionalArgs {
     *     Optional.
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function updateBookIndex($name, $indexName, $indexMap, array $optionalArgs = [])
    {
        $request = new UpdateBookIndexRequest();
        $request->setName($name);
        $request->setIndexName($indexName);
        $request->setIndexMap($indexMap);

        return $this->startCall(
            'UpdateBookIndex',
            GPBEmpty::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     *
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $namesElement = '';
     *     $names = [$namesElement];
     *     $formattedShelves = [];
     *     // Iterate over pages of elements
     *     $pagedResponse = $libraryServiceClient->findRelatedBooks($formattedNames, $formattedShelves);
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     *
     *
     *     // Alternatively:
     *
     *     // Iterate through all elements
     *     $pagedResponse = $libraryServiceClient->findRelatedBooks($formattedNames, $formattedShelves);
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string[] $names
     * @param string[] $shelves
     * @param array $optionalArgs {
     *     Optional.
     *     @type int $pageSize
     *          The maximum number of resources contained in the underlying API
     *          response. The API may return fewer values in a page, even if
     *          there are additional values to be retrieved.
     *     @type string $pageToken
     *          A page token is used to specify a page of values to be returned.
     *          If no page token is specified (the default), the first page
     *          of values will be returned. Any page token used here must have
     *          been generated by a previous call to the API.
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\PagedListResponse
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function findRelatedBooks($names, $shelves, array $optionalArgs = [])
    {
        $request = new FindRelatedBooksRequest();
        $request->setNames($names);
        $request->setShelves($shelves);
        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }
        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        return $this->getPagedListResponse(
            'FindRelatedBooks',
            $optionalArgs,
            FindRelatedBooksResponse::class,
            $request
        );
    }

    /**
     * Adds a label to the entity.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $resource = '';
     *     $label = '';
     *     $response = $libraryServiceClient->addLabel($resource, $label);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $resource REQUIRED: The resource which the label is being added to.
     * @param string $label REQUIRED: The label to add.
     * @param array $optionalArgs {
     *     Optional.
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Tagger\CustomNamespace\V1\AddLabelResponse
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function addLabel($resource, $label, array $optionalArgs = [])
    {
        $request = new AddLabelRequest();
        $request->setResource($resource);
        $request->setLabel($label);

        return $this->startCall(
            'AddLabel',
            AddLabelResponse::class,
            $optionalArgs,
            $request,
            Call::UNARY_CALL,
            'google.tagger.v1.Labeler'
        )->wait();
    }

    /**
     * Test long-running operations
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $operationResponse = $libraryServiceClient->getBigBook($formattedName);
     *     $operationResponse->pollUntilComplete();
     *     if ($operationResponse->operationSucceeded()) {
     *         $result = $operationResponse->getResult();
     *         // doSomethingWith($result)
     *     } else {
     *         $error = $operationResponse->getError();
     *         // handleError($error)
     *     }
     *
     *
     *     // Alternatively:
     *
     *     // start the operation, keep the operation name, and resume later
     *     $operationResponse = $libraryServiceClient->getBigBook($formattedName);
     *     $operationName = $operationResponse->getName();
     *     // ... do other work
     *     $newOperationResponse = $libraryServiceClient->resumeOperation($operationName, 'getBigBook');
     *     while (!$newOperationResponse->isDone()) {
     *         // ... do other work
     *         $newOperationResponse->reload();
     *     }
     *     if ($newOperationResponse->operationSucceeded()) {
     *       $result = $newOperationResponse->getResult();
     *       // doSomethingWith($result)
     *     } else {
     *       $error = $newOperationResponse->getError();
     *       // handleError($error)
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the book to retrieve.
     * @param array $optionalArgs {
     *     Optional.
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\OperationResponse
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function getBigBook($name, array $optionalArgs = [])
    {
        $request = new GetBookRequest();
        $request->setName($name);

        return $this->startOperationsCall(
            'GetBigBook',
            $optionalArgs,
            $request,
            $this->getOperationsClient()
        )->wait();
    }

    /**
     * Test long-running operations with empty return type.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $operationResponse = $libraryServiceClient->getBigNothing($formattedName);
     *     $operationResponse->pollUntilComplete();
     *     if ($operationResponse->operationSucceeded()) {
     *         // operation succeeded and returns no value
     *     } else {
     *         $error = $operationResponse->getError();
     *         // handleError($error)
     *     }
     *
     *
     *     // Alternatively:
     *
     *     // start the operation, keep the operation name, and resume later
     *     $operationResponse = $libraryServiceClient->getBigNothing($formattedName);
     *     $operationName = $operationResponse->getName();
     *     // ... do other work
     *     $newOperationResponse = $libraryServiceClient->resumeOperation($operationName, 'getBigNothing');
     *     while (!$newOperationResponse->isDone()) {
     *         // ... do other work
     *         $newOperationResponse->reload();
     *     }
     *     if ($newOperationResponse->operationSucceeded()) {
     *       // operation succeeded and returns no value
     *     } else {
     *       $error = $newOperationResponse->getError();
     *       // handleError($error)
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the book to retrieve.
     * @param array $optionalArgs {
     *     Optional.
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\OperationResponse
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function getBigNothing($name, array $optionalArgs = [])
    {
        $request = new GetBookRequest();
        $request->setName($name);

        return $this->startOperationsCall(
            'GetBigNothing',
            $optionalArgs,
            $request,
            $this->getOperationsClient()
        )->wait();
    }

    /**
     * Test optional flattening parameters of all types
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $requiredSingularInt32 = 0;
     *     $requiredSingularInt64 = 0;
     *     $requiredSingularFloat = 0.0;
     *     $requiredSingularDouble = 0.0;
     *     $requiredSingularBool = false;
     *     $requiredSingularEnum = InnerEnum::ZERO;
     *     $requiredSingularString = '';
     *     $requiredSingularBytes = '';
     *     $requiredSingularMessage = new InnerMessage();
     *     $formattedRequiredSingularResourceName = $libraryServiceClient->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $formattedRequiredSingularResourceNameOneof = $libraryServiceClient->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $requiredSingularResourceNameCommon = '';
     *     $requiredSingularFixed32 = 0;
     *     $requiredSingularFixed64 = 0;
     *     $requiredRepeatedInt32 = [];
     *     $requiredRepeatedInt64 = [];
     *     $requiredRepeatedFloat = [];
     *     $requiredRepeatedDouble = [];
     *     $requiredRepeatedBool = [];
     *     $requiredRepeatedEnum = [];
     *     $requiredRepeatedString = [];
     *     $requiredRepeatedBytes = [];
     *     $requiredRepeatedMessage = [];
     *     $formattedRequiredRepeatedResourceName = [];
     *     $formattedRequiredRepeatedResourceNameOneof = [];
     *     $requiredRepeatedResourceNameCommon = [];
     *     $requiredRepeatedFixed32 = [];
     *     $requiredRepeatedFixed64 = [];
     *     $requiredMap = [];
     *     $requiredAnyValue = new Any();
     *     $requiredStructValue = new Struct();
     *     $requiredValueValue = new Value();
     *     $requiredListValueValue = new ListValue();
     *     $requiredTimeValue = new Timestamp();
     *     $requiredDurationValue = new Duration();
     *     $requiredFieldMaskValue = new FieldMask();
     *     $requiredInt32Value = new Int32Value();
     *     $requiredUint32Value = new UInt32Value();
     *     $requiredInt64Value = new Int64Value();
     *     $requiredUint64Value = new UInt64Value();
     *     $requiredFloatValue = new FloatValue();
     *     $requiredDoubleValue = new DoubleValue();
     *     $requiredStringValue = new StringValue();
     *     $requiredBoolValue = new BoolValue();
     *     $requiredBytesValue = new BytesValue();
     *     $requiredRepeatedAnyValue = [];
     *     $requiredRepeatedStructValue = [];
     *     $requiredRepeatedValueValue = [];
     *     $requiredRepeatedListValueValue = [];
     *     $requiredRepeatedTimeValue = [];
     *     $requiredRepeatedDurationValue = [];
     *     $requiredRepeatedFieldMaskValue = [];
     *     $requiredRepeatedInt32Value = [];
     *     $requiredRepeatedUint32Value = [];
     *     $requiredRepeatedInt64Value = [];
     *     $requiredRepeatedUint64Value = [];
     *     $requiredRepeatedFloatValue = [];
     *     $requiredRepeatedDoubleValue = [];
     *     $requiredRepeatedStringValue = [];
     *     $requiredRepeatedBoolValue = [];
     *     $requiredRepeatedBytesValue = [];
     *     $response = $libraryServiceClient->testOptionalRequiredFlatteningParams($requiredSingularInt32, $requiredSingularInt64, $requiredSingularFloat, $requiredSingularDouble, $requiredSingularBool, $requiredSingularEnum, $requiredSingularString, $requiredSingularBytes, $requiredSingularMessage, $formattedRequiredSingularResourceName, $formattedRequiredSingularResourceNameOneof, $requiredSingularResourceNameCommon, $requiredSingularFixed32, $requiredSingularFixed64, $requiredRepeatedInt32, $requiredRepeatedInt64, $requiredRepeatedFloat, $requiredRepeatedDouble, $requiredRepeatedBool, $requiredRepeatedEnum, $requiredRepeatedString, $requiredRepeatedBytes, $requiredRepeatedMessage, $formattedRequiredRepeatedResourceName, $formattedRequiredRepeatedResourceNameOneof, $requiredRepeatedResourceNameCommon, $requiredRepeatedFixed32, $requiredRepeatedFixed64, $requiredMap, $requiredAnyValue, $requiredStructValue, $requiredValueValue, $requiredListValueValue, $requiredTimeValue, $requiredDurationValue, $requiredFieldMaskValue, $requiredInt32Value, $requiredUint32Value, $requiredInt64Value, $requiredUint64Value, $requiredFloatValue, $requiredDoubleValue, $requiredStringValue, $requiredBoolValue, $requiredBytesValue, $requiredRepeatedAnyValue, $requiredRepeatedStructValue, $requiredRepeatedValueValue, $requiredRepeatedListValueValue, $requiredRepeatedTimeValue, $requiredRepeatedDurationValue, $requiredRepeatedFieldMaskValue, $requiredRepeatedInt32Value, $requiredRepeatedUint32Value, $requiredRepeatedInt64Value, $requiredRepeatedUint64Value, $requiredRepeatedFloatValue, $requiredRepeatedDoubleValue, $requiredRepeatedStringValue, $requiredRepeatedBoolValue, $requiredRepeatedBytesValue);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param int $requiredSingularInt32
     * @param int $requiredSingularInt64
     * @param float $requiredSingularFloat
     * @param float $requiredSingularDouble
     * @param bool $requiredSingularBool
     * @param int $requiredSingularEnum For allowed values, use constants defined on {@see \Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest\InnerEnum}
     * @param string $requiredSingularString
     * @param string $requiredSingularBytes
     * @param InnerMessage $requiredSingularMessage
     * @param string $requiredSingularResourceName
     * @param string $requiredSingularResourceNameOneof
     * @param string $requiredSingularResourceNameCommon
     * @param int $requiredSingularFixed32
     * @param int $requiredSingularFixed64
     * @param int[] $requiredRepeatedInt32
     * @param int[] $requiredRepeatedInt64
     * @param float[] $requiredRepeatedFloat
     * @param float[] $requiredRepeatedDouble
     * @param bool[] $requiredRepeatedBool
     * @param int[] $requiredRepeatedEnum For allowed values, use constants defined on {@see \Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest\InnerEnum}
     * @param string[] $requiredRepeatedString
     * @param string[] $requiredRepeatedBytes
     * @param InnerMessage[] $requiredRepeatedMessage
     * @param string[] $requiredRepeatedResourceName
     * @param string[] $requiredRepeatedResourceNameOneof
     * @param string[] $requiredRepeatedResourceNameCommon
     * @param int[] $requiredRepeatedFixed32
     * @param int[] $requiredRepeatedFixed64
     * @param array $requiredMap
     * @param Any $requiredAnyValue
     * @param Struct $requiredStructValue
     * @param Value $requiredValueValue
     * @param ListValue $requiredListValueValue
     * @param Timestamp $requiredTimeValue
     * @param Duration $requiredDurationValue
     * @param FieldMask $requiredFieldMaskValue
     * @param Int32Value $requiredInt32Value
     * @param UInt32Value $requiredUint32Value
     * @param Int64Value $requiredInt64Value
     * @param UInt64Value $requiredUint64Value
     * @param FloatValue $requiredFloatValue
     * @param DoubleValue $requiredDoubleValue
     * @param StringValue $requiredStringValue
     * @param BoolValue $requiredBoolValue
     * @param BytesValue $requiredBytesValue
     * @param Any[] $requiredRepeatedAnyValue
     * @param Struct[] $requiredRepeatedStructValue
     * @param Value[] $requiredRepeatedValueValue
     * @param ListValue[] $requiredRepeatedListValueValue
     * @param Timestamp[] $requiredRepeatedTimeValue
     * @param Duration[] $requiredRepeatedDurationValue
     * @param FieldMask[] $requiredRepeatedFieldMaskValue
     * @param Int32Value[] $requiredRepeatedInt32Value
     * @param UInt32Value[] $requiredRepeatedUint32Value
     * @param Int64Value[] $requiredRepeatedInt64Value
     * @param UInt64Value[] $requiredRepeatedUint64Value
     * @param FloatValue[] $requiredRepeatedFloatValue
     * @param DoubleValue[] $requiredRepeatedDoubleValue
     * @param StringValue[] $requiredRepeatedStringValue
     * @param BoolValue[] $requiredRepeatedBoolValue
     * @param BytesValue[] $requiredRepeatedBytesValue
     * @param array $optionalArgs {
     *     Optional.
     *     @type int $optionalSingularInt32
     *     @type int $optionalSingularInt64
     *     @type float $optionalSingularFloat
     *     @type float $optionalSingularDouble
     *     @type bool $optionalSingularBool
     *     @type int $optionalSingularEnum
     *          For allowed values, use constants defined on {@see \Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest\InnerEnum}
     *     @type string $optionalSingularString
     *     @type string $optionalSingularBytes
     *     @type InnerMessage $optionalSingularMessage
     *     @type string $optionalSingularResourceName
     *     @type string $optionalSingularResourceNameOneof
     *     @type string $optionalSingularResourceNameCommon
     *     @type int $optionalSingularFixed32
     *     @type int $optionalSingularFixed64
     *     @type int[] $optionalRepeatedInt32
     *     @type int[] $optionalRepeatedInt64
     *     @type float[] $optionalRepeatedFloat
     *     @type float[] $optionalRepeatedDouble
     *     @type bool[] $optionalRepeatedBool
     *     @type int[] $optionalRepeatedEnum
     *          For allowed values, use constants defined on {@see \Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest\InnerEnum}
     *     @type string[] $optionalRepeatedString
     *     @type string[] $optionalRepeatedBytes
     *     @type InnerMessage[] $optionalRepeatedMessage
     *     @type string[] $optionalRepeatedResourceName
     *     @type string[] $optionalRepeatedResourceNameOneof
     *     @type string[] $optionalRepeatedResourceNameCommon
     *     @type int[] $optionalRepeatedFixed32
     *     @type int[] $optionalRepeatedFixed64
     *     @type array $optionalMap
     *     @type Any $anyValue
     *     @type Struct $structValue
     *     @type Value $valueValue
     *     @type ListValue $listValueValue
     *     @type Timestamp $timeValue
     *     @type Duration $durationValue
     *     @type FieldMask $fieldMaskValue
     *     @type Int32Value $int32Value
     *     @type UInt32Value $uint32Value
     *     @type Int64Value $int64Value
     *     @type UInt64Value $uint64Value
     *     @type FloatValue $floatValue
     *     @type DoubleValue $doubleValue
     *     @type StringValue $stringValue
     *     @type BoolValue $boolValue
     *     @type BytesValue $bytesValue
     *     @type Any[] $repeatedAnyValue
     *     @type Struct[] $repeatedStructValue
     *     @type Value[] $repeatedValueValue
     *     @type ListValue[] $repeatedListValueValue
     *     @type Timestamp[] $repeatedTimeValue
     *     @type Duration[] $repeatedDurationValue
     *     @type FieldMask[] $repeatedFieldMaskValue
     *     @type Int32Value[] $repeatedInt32Value
     *     @type UInt32Value[] $repeatedUint32Value
     *     @type Int64Value[] $repeatedInt64Value
     *     @type UInt64Value[] $repeatedUint64Value
     *     @type FloatValue[] $repeatedFloatValue
     *     @type DoubleValue[] $repeatedDoubleValue
     *     @type StringValue[] $repeatedStringValue
     *     @type BoolValue[] $repeatedBoolValue
     *     @type BytesValue[] $repeatedBytesValue
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsResponse
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function testOptionalRequiredFlatteningParams($requiredSingularInt32, $requiredSingularInt64, $requiredSingularFloat, $requiredSingularDouble, $requiredSingularBool, $requiredSingularEnum, $requiredSingularString, $requiredSingularBytes, $requiredSingularMessage, $requiredSingularResourceName, $requiredSingularResourceNameOneof, $requiredSingularResourceNameCommon, $requiredSingularFixed32, $requiredSingularFixed64, $requiredRepeatedInt32, $requiredRepeatedInt64, $requiredRepeatedFloat, $requiredRepeatedDouble, $requiredRepeatedBool, $requiredRepeatedEnum, $requiredRepeatedString, $requiredRepeatedBytes, $requiredRepeatedMessage, $requiredRepeatedResourceName, $requiredRepeatedResourceNameOneof, $requiredRepeatedResourceNameCommon, $requiredRepeatedFixed32, $requiredRepeatedFixed64, $requiredMap, $requiredAnyValue, $requiredStructValue, $requiredValueValue, $requiredListValueValue, $requiredTimeValue, $requiredDurationValue, $requiredFieldMaskValue, $requiredInt32Value, $requiredUint32Value, $requiredInt64Value, $requiredUint64Value, $requiredFloatValue, $requiredDoubleValue, $requiredStringValue, $requiredBoolValue, $requiredBytesValue, $requiredRepeatedAnyValue, $requiredRepeatedStructValue, $requiredRepeatedValueValue, $requiredRepeatedListValueValue, $requiredRepeatedTimeValue, $requiredRepeatedDurationValue, $requiredRepeatedFieldMaskValue, $requiredRepeatedInt32Value, $requiredRepeatedUint32Value, $requiredRepeatedInt64Value, $requiredRepeatedUint64Value, $requiredRepeatedFloatValue, $requiredRepeatedDoubleValue, $requiredRepeatedStringValue, $requiredRepeatedBoolValue, $requiredRepeatedBytesValue, array $optionalArgs = [])
    {
        $request = new TestOptionalRequiredFlatteningParamsRequest();
        $request->setRequiredSingularInt32($requiredSingularInt32);
        $request->setRequiredSingularInt64($requiredSingularInt64);
        $request->setRequiredSingularFloat($requiredSingularFloat);
        $request->setRequiredSingularDouble($requiredSingularDouble);
        $request->setRequiredSingularBool($requiredSingularBool);
        $request->setRequiredSingularEnum($requiredSingularEnum);
        $request->setRequiredSingularString($requiredSingularString);
        $request->setRequiredSingularBytes($requiredSingularBytes);
        $request->setRequiredSingularMessage($requiredSingularMessage);
        $request->setRequiredSingularResourceName($requiredSingularResourceName);
        $request->setRequiredSingularResourceNameOneof($requiredSingularResourceNameOneof);
        $request->setRequiredSingularResourceNameCommon($requiredSingularResourceNameCommon);
        $request->setRequiredSingularFixed32($requiredSingularFixed32);
        $request->setRequiredSingularFixed64($requiredSingularFixed64);
        $request->setRequiredRepeatedInt32($requiredRepeatedInt32);
        $request->setRequiredRepeatedInt64($requiredRepeatedInt64);
        $request->setRequiredRepeatedFloat($requiredRepeatedFloat);
        $request->setRequiredRepeatedDouble($requiredRepeatedDouble);
        $request->setRequiredRepeatedBool($requiredRepeatedBool);
        $request->setRequiredRepeatedEnum($requiredRepeatedEnum);
        $request->setRequiredRepeatedString($requiredRepeatedString);
        $request->setRequiredRepeatedBytes($requiredRepeatedBytes);
        $request->setRequiredRepeatedMessage($requiredRepeatedMessage);
        $request->setRequiredRepeatedResourceName($requiredRepeatedResourceName);
        $request->setRequiredRepeatedResourceNameOneof($requiredRepeatedResourceNameOneof);
        $request->setRequiredRepeatedResourceNameCommon($requiredRepeatedResourceNameCommon);
        $request->setRequiredRepeatedFixed32($requiredRepeatedFixed32);
        $request->setRequiredRepeatedFixed64($requiredRepeatedFixed64);
        $request->setRequiredMap($requiredMap);
        $request->setRequiredAnyValue($requiredAnyValue);
        $request->setRequiredStructValue($requiredStructValue);
        $request->setRequiredValueValue($requiredValueValue);
        $request->setRequiredListValueValue($requiredListValueValue);
        $request->setRequiredTimeValue($requiredTimeValue);
        $request->setRequiredDurationValue($requiredDurationValue);
        $request->setRequiredFieldMaskValue($requiredFieldMaskValue);
        $request->setRequiredInt32Value($requiredInt32Value);
        $request->setRequiredUint32Value($requiredUint32Value);
        $request->setRequiredInt64Value($requiredInt64Value);
        $request->setRequiredUint64Value($requiredUint64Value);
        $request->setRequiredFloatValue($requiredFloatValue);
        $request->setRequiredDoubleValue($requiredDoubleValue);
        $request->setRequiredStringValue($requiredStringValue);
        $request->setRequiredBoolValue($requiredBoolValue);
        $request->setRequiredBytesValue($requiredBytesValue);
        $request->setRequiredRepeatedAnyValue($requiredRepeatedAnyValue);
        $request->setRequiredRepeatedStructValue($requiredRepeatedStructValue);
        $request->setRequiredRepeatedValueValue($requiredRepeatedValueValue);
        $request->setRequiredRepeatedListValueValue($requiredRepeatedListValueValue);
        $request->setRequiredRepeatedTimeValue($requiredRepeatedTimeValue);
        $request->setRequiredRepeatedDurationValue($requiredRepeatedDurationValue);
        $request->setRequiredRepeatedFieldMaskValue($requiredRepeatedFieldMaskValue);
        $request->setRequiredRepeatedInt32Value($requiredRepeatedInt32Value);
        $request->setRequiredRepeatedUint32Value($requiredRepeatedUint32Value);
        $request->setRequiredRepeatedInt64Value($requiredRepeatedInt64Value);
        $request->setRequiredRepeatedUint64Value($requiredRepeatedUint64Value);
        $request->setRequiredRepeatedFloatValue($requiredRepeatedFloatValue);
        $request->setRequiredRepeatedDoubleValue($requiredRepeatedDoubleValue);
        $request->setRequiredRepeatedStringValue($requiredRepeatedStringValue);
        $request->setRequiredRepeatedBoolValue($requiredRepeatedBoolValue);
        $request->setRequiredRepeatedBytesValue($requiredRepeatedBytesValue);
        if (isset($optionalArgs['optionalSingularInt32'])) {
            $request->setOptionalSingularInt32($optionalArgs['optionalSingularInt32']);
        }
        if (isset($optionalArgs['optionalSingularInt64'])) {
            $request->setOptionalSingularInt64($optionalArgs['optionalSingularInt64']);
        }
        if (isset($optionalArgs['optionalSingularFloat'])) {
            $request->setOptionalSingularFloat($optionalArgs['optionalSingularFloat']);
        }
        if (isset($optionalArgs['optionalSingularDouble'])) {
            $request->setOptionalSingularDouble($optionalArgs['optionalSingularDouble']);
        }
        if (isset($optionalArgs['optionalSingularBool'])) {
            $request->setOptionalSingularBool($optionalArgs['optionalSingularBool']);
        }
        if (isset($optionalArgs['optionalSingularEnum'])) {
            $request->setOptionalSingularEnum($optionalArgs['optionalSingularEnum']);
        }
        if (isset($optionalArgs['optionalSingularString'])) {
            $request->setOptionalSingularString($optionalArgs['optionalSingularString']);
        }
        if (isset($optionalArgs['optionalSingularBytes'])) {
            $request->setOptionalSingularBytes($optionalArgs['optionalSingularBytes']);
        }
        if (isset($optionalArgs['optionalSingularMessage'])) {
            $request->setOptionalSingularMessage($optionalArgs['optionalSingularMessage']);
        }
        if (isset($optionalArgs['optionalSingularResourceName'])) {
            $request->setOptionalSingularResourceName($optionalArgs['optionalSingularResourceName']);
        }
        if (isset($optionalArgs['optionalSingularResourceNameOneof'])) {
            $request->setOptionalSingularResourceNameOneof($optionalArgs['optionalSingularResourceNameOneof']);
        }
        if (isset($optionalArgs['optionalSingularResourceNameCommon'])) {
            $request->setOptionalSingularResourceNameCommon($optionalArgs['optionalSingularResourceNameCommon']);
        }
        if (isset($optionalArgs['optionalSingularFixed32'])) {
            $request->setOptionalSingularFixed32($optionalArgs['optionalSingularFixed32']);
        }
        if (isset($optionalArgs['optionalSingularFixed64'])) {
            $request->setOptionalSingularFixed64($optionalArgs['optionalSingularFixed64']);
        }
        if (isset($optionalArgs['optionalRepeatedInt32'])) {
            $request->setOptionalRepeatedInt32($optionalArgs['optionalRepeatedInt32']);
        }
        if (isset($optionalArgs['optionalRepeatedInt64'])) {
            $request->setOptionalRepeatedInt64($optionalArgs['optionalRepeatedInt64']);
        }
        if (isset($optionalArgs['optionalRepeatedFloat'])) {
            $request->setOptionalRepeatedFloat($optionalArgs['optionalRepeatedFloat']);
        }
        if (isset($optionalArgs['optionalRepeatedDouble'])) {
            $request->setOptionalRepeatedDouble($optionalArgs['optionalRepeatedDouble']);
        }
        if (isset($optionalArgs['optionalRepeatedBool'])) {
            $request->setOptionalRepeatedBool($optionalArgs['optionalRepeatedBool']);
        }
        if (isset($optionalArgs['optionalRepeatedEnum'])) {
            $request->setOptionalRepeatedEnum($optionalArgs['optionalRepeatedEnum']);
        }
        if (isset($optionalArgs['optionalRepeatedString'])) {
            $request->setOptionalRepeatedString($optionalArgs['optionalRepeatedString']);
        }
        if (isset($optionalArgs['optionalRepeatedBytes'])) {
            $request->setOptionalRepeatedBytes($optionalArgs['optionalRepeatedBytes']);
        }
        if (isset($optionalArgs['optionalRepeatedMessage'])) {
            $request->setOptionalRepeatedMessage($optionalArgs['optionalRepeatedMessage']);
        }
        if (isset($optionalArgs['optionalRepeatedResourceName'])) {
            $request->setOptionalRepeatedResourceName($optionalArgs['optionalRepeatedResourceName']);
        }
        if (isset($optionalArgs['optionalRepeatedResourceNameOneof'])) {
            $request->setOptionalRepeatedResourceNameOneof($optionalArgs['optionalRepeatedResourceNameOneof']);
        }
        if (isset($optionalArgs['optionalRepeatedResourceNameCommon'])) {
            $request->setOptionalRepeatedResourceNameCommon($optionalArgs['optionalRepeatedResourceNameCommon']);
        }
        if (isset($optionalArgs['optionalRepeatedFixed32'])) {
            $request->setOptionalRepeatedFixed32($optionalArgs['optionalRepeatedFixed32']);
        }
        if (isset($optionalArgs['optionalRepeatedFixed64'])) {
            $request->setOptionalRepeatedFixed64($optionalArgs['optionalRepeatedFixed64']);
        }
        if (isset($optionalArgs['optionalMap'])) {
            $request->setOptionalMap($optionalArgs['optionalMap']);
        }
        if (isset($optionalArgs['anyValue'])) {
            $request->setAnyValue($optionalArgs['anyValue']);
        }
        if (isset($optionalArgs['structValue'])) {
            $request->setStructValue($optionalArgs['structValue']);
        }
        if (isset($optionalArgs['valueValue'])) {
            $request->setValueValue($optionalArgs['valueValue']);
        }
        if (isset($optionalArgs['listValueValue'])) {
            $request->setListValueValue($optionalArgs['listValueValue']);
        }
        if (isset($optionalArgs['timeValue'])) {
            $request->setTimeValue($optionalArgs['timeValue']);
        }
        if (isset($optionalArgs['durationValue'])) {
            $request->setDurationValue($optionalArgs['durationValue']);
        }
        if (isset($optionalArgs['fieldMaskValue'])) {
            $request->setFieldMaskValue($optionalArgs['fieldMaskValue']);
        }
        if (isset($optionalArgs['int32Value'])) {
            $request->setInt32Value($optionalArgs['int32Value']);
        }
        if (isset($optionalArgs['uint32Value'])) {
            $request->setUint32Value($optionalArgs['uint32Value']);
        }
        if (isset($optionalArgs['int64Value'])) {
            $request->setInt64Value($optionalArgs['int64Value']);
        }
        if (isset($optionalArgs['uint64Value'])) {
            $request->setUint64Value($optionalArgs['uint64Value']);
        }
        if (isset($optionalArgs['floatValue'])) {
            $request->setFloatValue($optionalArgs['floatValue']);
        }
        if (isset($optionalArgs['doubleValue'])) {
            $request->setDoubleValue($optionalArgs['doubleValue']);
        }
        if (isset($optionalArgs['stringValue'])) {
            $request->setStringValue($optionalArgs['stringValue']);
        }
        if (isset($optionalArgs['boolValue'])) {
            $request->setBoolValue($optionalArgs['boolValue']);
        }
        if (isset($optionalArgs['bytesValue'])) {
            $request->setBytesValue($optionalArgs['bytesValue']);
        }
        if (isset($optionalArgs['repeatedAnyValue'])) {
            $request->setRepeatedAnyValue($optionalArgs['repeatedAnyValue']);
        }
        if (isset($optionalArgs['repeatedStructValue'])) {
            $request->setRepeatedStructValue($optionalArgs['repeatedStructValue']);
        }
        if (isset($optionalArgs['repeatedValueValue'])) {
            $request->setRepeatedValueValue($optionalArgs['repeatedValueValue']);
        }
        if (isset($optionalArgs['repeatedListValueValue'])) {
            $request->setRepeatedListValueValue($optionalArgs['repeatedListValueValue']);
        }
        if (isset($optionalArgs['repeatedTimeValue'])) {
            $request->setRepeatedTimeValue($optionalArgs['repeatedTimeValue']);
        }
        if (isset($optionalArgs['repeatedDurationValue'])) {
            $request->setRepeatedDurationValue($optionalArgs['repeatedDurationValue']);
        }
        if (isset($optionalArgs['repeatedFieldMaskValue'])) {
            $request->setRepeatedFieldMaskValue($optionalArgs['repeatedFieldMaskValue']);
        }
        if (isset($optionalArgs['repeatedInt32Value'])) {
            $request->setRepeatedInt32Value($optionalArgs['repeatedInt32Value']);
        }
        if (isset($optionalArgs['repeatedUint32Value'])) {
            $request->setRepeatedUint32Value($optionalArgs['repeatedUint32Value']);
        }
        if (isset($optionalArgs['repeatedInt64Value'])) {
            $request->setRepeatedInt64Value($optionalArgs['repeatedInt64Value']);
        }
        if (isset($optionalArgs['repeatedUint64Value'])) {
            $request->setRepeatedUint64Value($optionalArgs['repeatedUint64Value']);
        }
        if (isset($optionalArgs['repeatedFloatValue'])) {
            $request->setRepeatedFloatValue($optionalArgs['repeatedFloatValue']);
        }
        if (isset($optionalArgs['repeatedDoubleValue'])) {
            $request->setRepeatedDoubleValue($optionalArgs['repeatedDoubleValue']);
        }
        if (isset($optionalArgs['repeatedStringValue'])) {
            $request->setRepeatedStringValue($optionalArgs['repeatedStringValue']);
        }
        if (isset($optionalArgs['repeatedBoolValue'])) {
            $request->setRepeatedBoolValue($optionalArgs['repeatedBoolValue']);
        }
        if (isset($optionalArgs['repeatedBytesValue'])) {
            $request->setRepeatedBytesValue($optionalArgs['repeatedBytesValue']);
        }

        return $this->startCall(
            'TestOptionalRequiredFlatteningParams',
            TestOptionalRequiredFlatteningParamsResponse::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Lists shelves.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $response = $libraryServiceClient->listAggregatedShelves();
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *     @type int $maxResults
     *          Requested page size.
     *     @type string $pageToken
     *          A token identifying a page of results the server should return.
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\ListAggregatedShelvesResponse
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function listAggregatedShelves(array $optionalArgs = [])
    {
        $request = new ListAggregatedShelvesRequest();
        if (isset($optionalArgs['maxResults'])) {
            $request->setMaxResults($optionalArgs['maxResults']);
        }
        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        return $this->startCall(
            'ListAggregatedShelves',
            ListAggregatedShelvesResponse::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Creates an inventory. Tests singleton resources.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedParent = $libraryServiceClient->publisherName('[PROJECT]', '[LOCATION]', '[PUBLISHER]');
     *     $asset = '';
     *     $parentAsset = '';
     *     $assets = [];
     *     $response = $libraryServiceClient->createInventory($formattedParent, $asset, $parentAsset, $assets);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $parent
     * @param string $asset
     * @param string $parentAsset
     * @param string[] $assets
     * @param array $optionalArgs {
     *     Optional.
     *     @type Inventory $inventory
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\Inventory
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function createInventory($parent, $asset, $parentAsset, $assets, array $optionalArgs = [])
    {
        $request = new CreateInventoryRequest();
        $request->setParent($parent);
        $request->setAsset($asset);
        $request->setParentAsset($parentAsset);
        $request->setAssets($assets);
        if (isset($optionalArgs['inventory'])) {
            $request->setInventory($optionalArgs['inventory']);
        }

        return $this->startCall(
            'CreateInventory',
            Inventory::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     *
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $response = $libraryServiceClient->moveBooks();
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *     @type string $source
     *     @type string $destination
     *     @type string[] $publishers
     *     @type string $project
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\MoveBooksResponse
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function moveBooks(array $optionalArgs = [])
    {
        $request = new MoveBooksRequest();
        if (isset($optionalArgs['source'])) {
            $request->setSource($optionalArgs['source']);
        }
        if (isset($optionalArgs['destination'])) {
            $request->setDestination($optionalArgs['destination']);
        }
        if (isset($optionalArgs['publishers'])) {
            $request->setPublishers($optionalArgs['publishers']);
        }
        if (isset($optionalArgs['project'])) {
            $request->setProject($optionalArgs['project']);
        }

        return $this->startCall(
            'MoveBooks',
            MoveBooksResponse::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     *
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $response = $libraryServiceClient->archiveBooks();
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *     @type string $source
     *     @type string $archive
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\ArchiveBooksResponse
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function archiveBooks(array $optionalArgs = [])
    {
        $request = new ArchiveBooksRequest();
        if (isset($optionalArgs['source'])) {
            $request->setSource($optionalArgs['source']);
        }
        if (isset($optionalArgs['archive'])) {
            $request->setArchive($optionalArgs['archive']);
        }

        return $this->startCall(
            'ArchiveBooks',
            ArchiveBooksResponse::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     *
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $operationResponse = $libraryServiceClient->longRunningArchiveBooks();
     *     $operationResponse->pollUntilComplete();
     *     if ($operationResponse->operationSucceeded()) {
     *         $result = $operationResponse->getResult();
     *         // doSomethingWith($result)
     *     } else {
     *         $error = $operationResponse->getError();
     *         // handleError($error)
     *     }
     *
     *
     *     // Alternatively:
     *
     *     // start the operation, keep the operation name, and resume later
     *     $operationResponse = $libraryServiceClient->longRunningArchiveBooks();
     *     $operationName = $operationResponse->getName();
     *     // ... do other work
     *     $newOperationResponse = $libraryServiceClient->resumeOperation($operationName, 'longRunningArchiveBooks');
     *     while (!$newOperationResponse->isDone()) {
     *         // ... do other work
     *         $newOperationResponse->reload();
     *     }
     *     if ($newOperationResponse->operationSucceeded()) {
     *       $result = $newOperationResponse->getResult();
     *       // doSomethingWith($result)
     *     } else {
     *       $error = $newOperationResponse->getError();
     *       // handleError($error)
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *     @type string $source
     *     @type string $archive
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\ApiCore\OperationResponse
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function longRunningArchiveBooks(array $optionalArgs = [])
    {
        $request = new ArchiveBooksRequest();
        if (isset($optionalArgs['source'])) {
            $request->setSource($optionalArgs['source']);
        }
        if (isset($optionalArgs['archive'])) {
            $request->setArchive($optionalArgs['archive']);
        }

        return $this->startOperationsCall(
            'LongRunningArchiveBooks',
            $optionalArgs,
            $request,
            $this->getOperationsClient()
        )->wait();
    }

    /**
     * Test using resource messages as request objects. Only used by PubSub (CreateSubscription) for historical reasons.
     * New APIs should always create a separate message for a request.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $formattedName = $libraryServiceClient->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
     *     $libraryServiceClient->saveBook($formattedName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The resource name of the book.
     * Book names have the form `bookShelves/{shelf_id}/books/{book_id}`.
     * Message field comment may include special characters: <>&"`'&#64;.
     * @param array $optionalArgs {
     *     Optional.
     *     @type string $author
     *          The name of the book author.
     *     @type string $title
     *          The title of the book.
     *     @type bool $read
     *          Value indicating whether the book has been read.
     *     @type int $rating
     *          For testing enums.
     *          For allowed values, use constants defined on {@see \Google\Example\Library\V1\Book\Rating}
     *     @type string $reader
     *     @type Any $anyValue
     *          For testing all well-known types.
     *     @type Struct $structValue
     *     @type Value $valueValue
     *     @type ListValue $listValueValue
     *     @type array $mapListValueValue
     *     @type Timestamp $timeValue
     *     @type Duration $durationValue
     *     @type FieldMask $fieldMaskValue
     *     @type Int32Value $int32Value
     *     @type UInt32Value $uint32Value
     *     @type Int64Value $int64Value
     *     @type UInt64Value $uint64Value
     *     @type FloatValue $floatValue
     *     @type DoubleValue $doubleValue
     *     @type StringValue $stringValue
     *     @type BoolValue $boolValue
     *     @type BytesValue $bytesValue
     *     @type array $mapStringValue
     *          Test doc generation of lists:
     *
     *          +   Here is a sentence about the first element of the list that continues
     *              into a second line.
     *          +   The second element of the list.
     *          +   Another element of the list where the indentation isn't consistent
     *          after a blank space.
     *
     *              The second paragraph of the list
     *          that doesn't have a hanging indent.
     *     @type array $mapMessageValue
     *     @type Used $resource
     *          Tests Python doc generation: should generate a dummy file for shared_type
     *          resource, but *not* its import, other_shared_type
     *     @type array $mapBoolKey
     *          For testing accessing map fields in samplegen
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function saveBook($name, array $optionalArgs = [])
    {
        $request = new Book();
        $request->setName($name);
        if (isset($optionalArgs['author'])) {
            $request->setAuthor($optionalArgs['author']);
        }
        if (isset($optionalArgs['title'])) {
            $request->setTitle($optionalArgs['title']);
        }
        if (isset($optionalArgs['read'])) {
            $request->setRead($optionalArgs['read']);
        }
        if (isset($optionalArgs['rating'])) {
            $request->setRating($optionalArgs['rating']);
        }
        if (isset($optionalArgs['reader'])) {
            $request->setReader($optionalArgs['reader']);
        }
        if (isset($optionalArgs['anyValue'])) {
            $request->setAnyValue($optionalArgs['anyValue']);
        }
        if (isset($optionalArgs['structValue'])) {
            $request->setStructValue($optionalArgs['structValue']);
        }
        if (isset($optionalArgs['valueValue'])) {
            $request->setValueValue($optionalArgs['valueValue']);
        }
        if (isset($optionalArgs['listValueValue'])) {
            $request->setListValueValue($optionalArgs['listValueValue']);
        }
        if (isset($optionalArgs['mapListValueValue'])) {
            $request->setMapListValueValue($optionalArgs['mapListValueValue']);
        }
        if (isset($optionalArgs['timeValue'])) {
            $request->setTimeValue($optionalArgs['timeValue']);
        }
        if (isset($optionalArgs['durationValue'])) {
            $request->setDurationValue($optionalArgs['durationValue']);
        }
        if (isset($optionalArgs['fieldMaskValue'])) {
            $request->setFieldMaskValue($optionalArgs['fieldMaskValue']);
        }
        if (isset($optionalArgs['int32Value'])) {
            $request->setInt32Value($optionalArgs['int32Value']);
        }
        if (isset($optionalArgs['uint32Value'])) {
            $request->setUint32Value($optionalArgs['uint32Value']);
        }
        if (isset($optionalArgs['int64Value'])) {
            $request->setInt64Value($optionalArgs['int64Value']);
        }
        if (isset($optionalArgs['uint64Value'])) {
            $request->setUint64Value($optionalArgs['uint64Value']);
        }
        if (isset($optionalArgs['floatValue'])) {
            $request->setFloatValue($optionalArgs['floatValue']);
        }
        if (isset($optionalArgs['doubleValue'])) {
            $request->setDoubleValue($optionalArgs['doubleValue']);
        }
        if (isset($optionalArgs['stringValue'])) {
            $request->setStringValue($optionalArgs['stringValue']);
        }
        if (isset($optionalArgs['boolValue'])) {
            $request->setBoolValue($optionalArgs['boolValue']);
        }
        if (isset($optionalArgs['bytesValue'])) {
            $request->setBytesValue($optionalArgs['bytesValue']);
        }
        if (isset($optionalArgs['mapStringValue'])) {
            $request->setMapStringValue($optionalArgs['mapStringValue']);
        }
        if (isset($optionalArgs['mapMessageValue'])) {
            $request->setMapMessageValue($optionalArgs['mapMessageValue']);
        }
        if (isset($optionalArgs['resource'])) {
            $request->setResource($optionalArgs['resource']);
        }
        if (isset($optionalArgs['mapBoolKey'])) {
            $request->setMapBoolKey($optionalArgs['mapBoolKey']);
        }

        return $this->startCall(
            'SaveBook',
            GPBEmpty::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * This method is not exposed in the GAPIC config. It should be generated.
     *
     * Sample code:
     * ```
     * $libraryServiceClient = new LibraryServiceClient();
     * try {
     *     $response = $libraryServiceClient->privateListShelves();
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *     @type string $pageToken
     *          A token identifying a page of results the server should return.
     *          Typically, this is the value of
     *          [ListShelvesResponse.next_page_token][google.example.library.v1.ListShelvesResponse.next_page_token]
     *          returned from the previous call to `ListShelves` method.
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\Book
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function privateListShelves(array $optionalArgs = [])
    {
        $request = new ListShelvesRequest();
        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        return $this->startCall(
            'PrivateListShelves',
            Book::class,
            $optionalArgs,
            $request
        )->wait();
    }

}
============== file: src/V1/Gapic/MyProtoGapicClient.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * This file was generated from the file
 * https://github.com/google/googleapis/blob/master/another_service.proto
 * and updates to that file get reflected here through a refresh process.
 *
 * @experimental
 */

namespace Google\Cloud\Example\Library\V1\Gapic;

use Google\ApiCore\ApiException;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\GapicClientTrait;
use Google\ApiCore\PathTemplate;
use Google\ApiCore\RetrySettings;
use Google\ApiCore\Transport\TransportInterface;
use Google\ApiCore\ValidationException;
use Google\Auth\FetchAuthTokenInterface;
use Google\Example\Library\V1\MethodRequest;
use Google\Example\Library\V1\MethodResponse;
use Google\Example\Library\V1\PBNamespace;
use Google\Example\Library\V1\SubMessage;

/**
 * Service Description:
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * ```
 * $myProtoClient = new MyProtoClient();
 * try {
 *     $response = $myProtoClient->myMethod();
 * } finally {
 *     $myProtoClient->close();
 * }
 * ```
 *
 * @experimental
 */
class MyProtoGapicClient
{
    use GapicClientTrait;

    /**
     * The name of the service.
     */
    const SERVICE_NAME = 'google.example.library.v1.MyProto';

    /**
     * The default address of the service.
     */
    const SERVICE_ADDRESS = 'library-example.googleapis.com';

    /**
     * The default port of the service.
     */
    const DEFAULT_SERVICE_PORT = 1234;

    /**
     * The name of the code generator, to be included in the agent header.
     */
    const CODEGEN_NAME = 'gapic';

    /**
     * The default scopes required by the service.
     */
    public static $serviceScopes = [
        'https://www.googleapis.com/auth/cloud-platform',
        'https://www.googleapis.com/auth/library',
    ];



    private static function getClientDefaults()
    {
        return [
            'serviceName' => self::SERVICE_NAME,
            'serviceAddress' => self::SERVICE_ADDRESS . ':' . self::DEFAULT_SERVICE_PORT,
            'clientConfig' => __DIR__ . '/../resources/my_proto_client_config.json',
            'descriptorsConfigPath' => __DIR__ . '/../resources/my_proto_descriptor_config.php',
            'credentialsConfig' => [
                'scopes' => self::$serviceScopes,
            ],
            'transportConfig' => [
                'rest' => [
                    'restClientConfigPath' => __DIR__ . '/../resources/my_proto_rest_client_config.php',
                ]
            ]
        ];
    }


    private static function defaultTransport()
    {
        return 'rest';
    }

    private static function getSupportedTransports()
    {
        return ['rest'];
    }



    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *     @type string $serviceAddress
     *           The address of the API remote host. May optionally include the port, formatted
     *           as "<uri>:<port>". Default 'library-example.googleapis.com:1234'.
     *     @type string|array|FetchAuthTokenInterface|CredentialsWrapper $credentials
     *           The credentials to be used by the client to authorize API calls. This option
     *           accepts either a path to a credentials file, or a decoded credentials file as a
     *           PHP array.
     *           *Advanced usage*: In addition, this option can also accept a pre-constructed
     *           {@see \Google\Auth\FetchAuthTokenInterface} object or
     *           {@see \Google\ApiCore\CredentialsWrapper} object. Note that when one of these
     *           objects are provided, any settings in $credentialsConfig will be ignored.
     *     @type array $credentialsConfig
     *           Options used to configure credentials, including auth token caching, for the client.
     *           For a full list of supporting configuration options, see
     *           {@see \Google\ApiCore\CredentialsWrapper::build()}.
     *     @type bool $disableRetries
     *           Determines whether or not retries defined by the client configuration should be
     *           disabled. Defaults to `false`.
     *     @type string|array $clientConfig
     *           Client method configuration, including retry settings. This option can be either a
     *           path to a JSON file, or a PHP array containing the decoded JSON data.
     *           By default this settings points to the default client config file, which is provided
     *           in the resources folder.
     *     @type string|TransportInterface $transport
     *           The transport used for executing network requests. At the moment, only supports
     *           `rest`.
     *           *Advanced usage*: Additionally, it is possible to pass in an already instantiated
     *           {@see \Google\ApiCore\Transport\TransportInterface} object. Note that when this
     *           object is provided, any settings in $transportConfig, and any $serviceAddress
     *           setting, will be ignored.
     *     @type array $transportConfig
     *           Configuration options that will be used to construct the transport. Options for
     *           each supported transport type should be passed in a key for that transport. For
     *           example:
     *           $transportConfig = [
     *               'rest' => [...]
     *           ];
     *           See the {@see \Google\ApiCore\Transport\RestTransport::build()} method for the
     *           supported options.
     * }
     * @throws ValidationException
     * @experimental
     */
    public function __construct(array $options = [])
    {
        $clientOptions = $this->buildClientOptions($options);
        $this->setClientOptions($clientOptions);
    }

    /**
     *
     *
     * Sample code:
     * ```
     * $myProtoClient = new MyProtoClient();
     * try {
     *     $response = $myProtoClient->myMethod();
     * } finally {
     *     $myProtoClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *     @type SubMessage[] $mylist
     *     @type SubMessage $myfield
     *     @type SubMessage $secondfield
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\MethodResponse
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function myMethod(array $optionalArgs = [])
    {
        $request = new MethodRequest();
        if (isset($optionalArgs['mylist'])) {
            $request->setMylist($optionalArgs['mylist']);
        }
        if (isset($optionalArgs['myfield'])) {
            $request->setMyfield($optionalArgs['myfield']);
        }
        if (isset($optionalArgs['secondfield'])) {
            $request->setSecondfield($optionalArgs['secondfield']);
        }

        return $this->startCall(
            'MyMethod',
            MethodResponse::class,
            $optionalArgs,
            $request
        )->wait();
    }

    /**
     * Define a service with a reserved name
     *
     * Sample code:
     * ```
     * $myProtoClient = new MyProtoClient();
     * try {
     *     $response = $myProtoClient->getNamespace();
     * } finally {
     *     $myProtoClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *     @type SubMessage[] $mylist
     *     @type SubMessage $myfield
     *     @type SubMessage $secondfield
     *     @type RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\ApiCore\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\ApiCore\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\PBNamespace
     *
     * @throws ApiException if the remote call fails
     * @experimental
     */
    public function getNamespace(array $optionalArgs = [])
    {
        $request = new MethodRequest();
        if (isset($optionalArgs['mylist'])) {
            $request->setMylist($optionalArgs['mylist']);
        }
        if (isset($optionalArgs['myfield'])) {
            $request->setMyfield($optionalArgs['myfield']);
        }
        if (isset($optionalArgs['secondfield'])) {
            $request->setSecondfield($optionalArgs['secondfield']);
        }

        return $this->startCall(
            'GetNamespace',
            PBNamespace::class,
            $optionalArgs,
            $request
        )->wait();
    }

}
============== file: src/V1/LibraryServiceClient.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * This file was generated from the file
 * https://github.com/google/googleapis/blob/master/library_rest.proto
 * and updates to that file get reflected here through a refresh process.
 *
 * @experimental
 */

namespace Google\Cloud\Example\Library\V1;

use Google\Cloud\Example\Library\V1\Gapic\LibraryServiceGapicClient;

/**
 * {@inheritdoc}
 */
class LibraryServiceClient extends LibraryServiceGapicClient
{
    // This class is intentionally empty, and is intended to hold manual
    // additions to the generated {@see LibraryServiceGapicClient} class.
}
============== file: src/V1/MyProtoClient.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * This file was generated from the file
 * https://github.com/google/googleapis/blob/master/another_service.proto
 * and updates to that file get reflected here through a refresh process.
 *
 * @experimental
 */

namespace Google\Cloud\Example\Library\V1;

use Google\Cloud\Example\Library\V1\Gapic\MyProtoGapicClient;

/**
 * {@inheritdoc}
 */
class MyProtoClient extends MyProtoGapicClient
{
    // This class is intentionally empty, and is intended to hold manual
    // additions to the generated {@see MyProtoGapicClient} class.
}
============== file: src/V1/resources/library_service_client_config.json ==============
{
  "interfaces": {
    "google.example.library.v1.LibraryService": {
      "retry_codes": {
        "idempotent": [
          "DEADLINE_EXCEEDED",
          "UNAVAILABLE"
        ],
        "non_idempotent": []
      },
      "retry_params": {
        "default": {
          "initial_retry_delay_millis": 100,
          "retry_delay_multiplier": 1.2,
          "max_retry_delay_millis": 1000,
          "initial_rpc_timeout_millis": 300,
          "rpc_timeout_multiplier": 1.3,
          "max_rpc_timeout_millis": 3000,
          "total_timeout_millis": 30000
        }
      },
      "methods": {
        "CreateShelf": {
          "timeout_millis": 1000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "GetShelf": {
          "timeout_millis": 2000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "ListShelves": {
          "timeout_millis": 3000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "DeleteShelf": {
          "timeout_millis": 4000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "MergeShelves": {
          "timeout_millis": 5000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "CreateBook": {
          "timeout_millis": 6000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "PublishSeries": {
          "timeout_millis": 7000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default",
          "bundling": {
            "element_count_threshold": 6,
            "element_count_limit": 7,
            "request_byte_threshold": 100000,
            "request_byte_limit": 150000,
            "delay_threshold_millis": 500
          }
        },
        "GetBook": {
          "timeout_millis": 8000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "ListBooks": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "DeleteBook": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "UpdateBook": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "MoveBook": {
          "timeout_millis": 10000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "ListStrings": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "AddComments": {
          "timeout_millis": 10000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default",
          "bundling": {
            "element_count_threshold": 6,
            "request_byte_threshold": 100000,
            "delay_threshold_millis": 500
          }
        },
        "GetBookFromArchive": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "GetBookFromAnywhere": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "GetBookFromAbsolutelyAnywhere": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "UpdateBookIndex": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "FindRelatedBooks": {
          "timeout_millis": 3000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "AddLabel": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "GetBigBook": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "GetBigNothing": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "TestOptionalRequiredFlatteningParams": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "ListAggregatedShelves": {
          "timeout_millis": 60000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "CreateInventory": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "MoveBooks": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "ArchiveBooks": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "LongRunningArchiveBooks": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "SaveBook": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "PrivateListShelves": {
          "timeout_millis": 60000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        }
      }
    }
  }
}

============== file: src/V1/resources/library_service_descriptor_config.php ==============
<?php

return [
    'interfaces' => [
        'google.example.library.v1.LibraryService' => [
            'GetBigBook' => [
                'longRunning' => [
                    'operationReturnType' => '\Google\Example\Library\V1\Book',
                    'metadataReturnType' => '\Google\Example\Library\V1\GetBigBookMetadata',
                    'initialPollDelayMillis' => '3000',
                    'pollDelayMultiplier' => '1.3',
                    'maxPollDelayMillis' => '30000',
                    'totalPollTimeoutMillis' => '86400000',
                ]
            ],
            'GetBigNothing' => [
                'longRunning' => [
                    'operationReturnType' => '\Google\Protobuf\GPBEmpty',
                    'metadataReturnType' => '\Google\Example\Library\V1\GetBigBookMetadata',
                    'initialPollDelayMillis' => '3000',
                    'pollDelayMultiplier' => '1.3',
                    'maxPollDelayMillis' => '60000',
                    'totalPollTimeoutMillis' => '600000',
                ]
            ],
            'LongRunningArchiveBooks' => [
                'longRunning' => [
                    'operationReturnType' => '\Google\Example\Library\V1\ArchiveBooksResponse',
                    'metadataReturnType' => '\Google\Example\Library\V1\ArchiveBooksMetadata',
                    'initialPollDelayMillis' => '500',
                    'pollDelayMultiplier' => '1.5',
                    'maxPollDelayMillis' => '5000',
                    'totalPollTimeoutMillis' => '300000',
                ]
            ],
            'ListShelves' => [
                'pageStreaming' => [
                    'requestPageTokenGetMethod' => 'getPageToken',
                    'requestPageTokenSetMethod' => 'setPageToken',
                    'responsePageTokenGetMethod' => 'getNextPageToken',
                    'resourcesGetMethod' => 'getShelves'
                ]
            ],
            'ListBooks' => [
                'pageStreaming' => [
                    'requestPageTokenGetMethod' => 'getPageToken',
                    'requestPageTokenSetMethod' => 'setPageToken',
                    'requestPageSizeGetMethod' => 'getPageSize',
                    'requestPageSizeSetMethod' => 'setPageSize',
                    'responsePageTokenGetMethod' => 'getNextPageToken',
                    'resourcesGetMethod' => 'getBooks'
                ]
            ],
            'ListStrings' => [
                'pageStreaming' => [
                    'requestPageTokenGetMethod' => 'getPageToken',
                    'requestPageTokenSetMethod' => 'setPageToken',
                    'requestPageSizeGetMethod' => 'getPageSize',
                    'requestPageSizeSetMethod' => 'setPageSize',
                    'responsePageTokenGetMethod' => 'getNextPageToken',
                    'resourcesGetMethod' => 'getStrings'
                ]
            ],
            'FindRelatedBooks' => [
                'pageStreaming' => [
                    'requestPageTokenGetMethod' => 'getPageToken',
                    'requestPageTokenSetMethod' => 'setPageToken',
                    'requestPageSizeGetMethod' => 'getPageSize',
                    'requestPageSizeSetMethod' => 'setPageSize',
                    'responsePageTokenGetMethod' => 'getNextPageToken',
                    'resourcesGetMethod' => 'getNames'
                ]
            ],
        ]
    ]
];

============== file: src/V1/resources/library_service_rest_client_config.php ==============
<?php

return [
    'interfaces' => [
        'google.example.library.v1.LibraryService' => [
            'CreateShelf' => [
                'method' => 'post',
                'uriTemplate' => '/v1/bookShelves',
                'body' => 'shelf',
            ],
            'GetShelf' => [
                'method' => 'get',
                'uriTemplate' => '/v1/{name=bookShelves/*}',
                'placeholders' => [
                    'name' => [
                        'getters' => [
                            'getName',
                        ],
                    ],
                ]
            ],
            'ListShelves' => [
                'method' => 'get',
                'uriTemplate' => '/v1/bookShelves',
            ],
            'DeleteShelf' => [
                'method' => 'delete',
                'uriTemplate' => '/v1/bookShelves/{name}',
                'placeholders' => [
                    'name' => [
                        'getters' => [
                            'getName',
                        ],
                    ],
                ]
            ],
            'MergeShelves' => [
                'method' => 'post',
                'uriTemplate' => '/v1/{name=bookShelves/*}:merge',
                'body' => '*',
                'placeholders' => [
                    'name' => [
                        'getters' => [
                            'getName',
                        ],
                    ],
                ]
            ],
            'CreateBook' => [
                'method' => 'post',
                'uriTemplate' => '/v1/{name=bookShelves/*}/books',
                'body' => 'book',
                'additionalBindings' => [
                    [
                        'method' => 'post',
                        'uriTemplate' => '/v1/{name=bookShelves/*}/books',
                        'body' => 'book',
                    ],
                ],
                'placeholders' => [
                    'name' => [
                        'getters' => [
                            'getName',
                        ],
                    ],
                ]
            ],
            'PublishSeries' => [
                'method' => 'post',
                'uriTemplate' => '/v1:publish',
                'body' => '*',
                'additionalBindings' => [
                    [
                        'method' => 'post',
                        'uriTemplate' => '/v1/{shelf.name=shelves/*}:publish',
                        'body' => '*',
                    ],
                ],
                'placeholders' => [
                    'shelf.name' => [
                        'getters' => [
                            'getShelf',
                            'getName',
                        ],
                    ],
                ]
            ],
            'GetBook' => [
                'method' => 'get',
                'uriTemplate' => '/v1/{name=bookShelves/*/books/*}',
                'placeholders' => [
                    'name' => [
                        'getters' => [
                            'getName',
                        ],
                    ],
                ]
            ],
            'ListBooks' => [
                'method' => 'get',
                'uriTemplate' => '/v1/{name=bookShelves/*}/books',
                'placeholders' => [
                    'name' => [
                        'getters' => [
                            'getName',
                        ],
                    ],
                ]
            ],
            'DeleteBook' => [
                'method' => 'delete',
                'uriTemplate' => '/v1/{name=bookShelves/*/books/*}',
                'placeholders' => [
                    'name' => [
                        'getters' => [
                            'getName',
                        ],
                    ],
                ]
            ],
            'UpdateBook' => [
                'method' => 'put',
                'uriTemplate' => '/v1/{name=bookShelves/*/books/*}',
                'body' => 'book',
                'placeholders' => [
                    'name' => [
                        'getters' => [
                            'getName',
                        ],
                    ],
                ]
            ],
            'MoveBook' => [
                'method' => 'post',
                'uriTemplate' => '/v1/{name=bookShelves/*/books/*}:move',
                'body' => '*',
                'placeholders' => [
                    'name' => [
                        'getters' => [
                            'getName',
                        ],
                    ],
                ]
            ],
            'ListStrings' => [
                'method' => 'get',
                'uriTemplate' => '/v1/strings',
            ],
            'AddComments' => [
                'method' => 'post',
                'uriTemplate' => '/v1/{name=bookShelves/*}/comments',
                'body' => '*',
                'placeholders' => [
                    'name' => [
                        'getters' => [
                            'getName',
                        ],
                    ],
                ]
            ],
            'GetBookFromArchive' => [
                'method' => 'get',
                'uriTemplate' => '/v1/{name=archives/*/books/*}',
                'placeholders' => [
                    'name' => [
                        'getters' => [
                            'getName',
                        ],
                    ],
                ]
            ],
            'GetBookFromAnywhere' => [
                'method' => 'get',
                'uriTemplate' => '/v1/{name=archives/*/books/**}',
                'placeholders' => [
                    'name' => [
                        'getters' => [
                            'getName',
                        ],
                    ],
                ]
            ],
            'GetBookFromAbsolutelyAnywhere' => [
                'method' => 'post',
                'uriTemplate' => '/v1/{name=archives/*/books/*}',
                'additionalBindings' => [
                    [
                        'method' => 'post',
                        'uriTemplate' => '/v1/{alt_book_name=bookShelves/*/books/*}',
                    ],
                ],
                'placeholders' => [
                    'name' => [
                        'getters' => [
                            'getName',
                        ],
                    ],
                    'alt_book_name' => [
                        'getters' => [
                            'getAltBookName',
                        ],
                    ],
                ]
            ],
            'UpdateBookIndex' => [
                'method' => 'post',
                'uriTemplate' => '/v1/{name=bookShelves/*/books/*}/index',
                'body' => '*',
                'placeholders' => [
                    'name' => [
                        'getters' => [
                            'getName',
                        ],
                    ],
                ]
            ],
            'FindRelatedBooks' => [
                'method' => 'get',
                'uriTemplate' => '/v1/bookShelves',
            ],
            'GetBigBook' => [
                'method' => 'get',
                'uriTemplate' => '/v1/{name=bookShelves/*/books/*}:big',
                'placeholders' => [
                    'name' => [
                        'getters' => [
                            'getName',
                        ],
                    ],
                ]
            ],
            'GetBigNothing' => [
                'method' => 'get',
                'uriTemplate' => '/v1/{name=bookShelves/*/books/*}:bignothing',
                'placeholders' => [
                    'name' => [
                        'getters' => [
                            'getName',
                        ],
                    ],
                ]
            ],
            'TestOptionalRequiredFlatteningParams' => [
                'method' => 'post',
                'uriTemplate' => '/v1/testofp',
                'body' => '*',
            ],
            'ListAggregatedShelves' => [
                'method' => 'get',
                'uriTemplate' => '/v1/bookAggregatedShelves',
            ],
            'CreateInventory' => [
                'method' => 'post',
                'uriTemplate' => '/v1/{parent=projects/*/locations/*/publishers/*}',
                'body' => 'inventory',
                'placeholders' => [
                    'parent' => [
                        'getters' => [
                            'getParent',
                        ],
                    ],
                ]
            ],
            'MoveBooks' => [
                'method' => 'post',
                'uriTemplate' => '/v1/{source=**}:move',
                'body' => '*',
                'placeholders' => [
                    'source' => [
                        'getters' => [
                            'getSource',
                        ],
                    ],
                ]
            ],
            'ArchiveBooks' => [
                'method' => 'post',
                'uriTemplate' => '/v1/{source=**}:archive',
                'body' => '*',
                'placeholders' => [
                    'source' => [
                        'getters' => [
                            'getSource',
                        ],
                    ],
                ]
            ],
            'LongRunningArchiveBooks' => [
                'method' => 'post',
                'uriTemplate' => '/v1/{source=**}:longrunningmove',
                'body' => '*',
                'placeholders' => [
                    'source' => [
                        'getters' => [
                            'getSource',
                        ],
                    ],
                ]
            ],
            'SaveBook' => [
                'method' => 'post',
                'uriTemplate' => '/v1:saveBook',
                'body' => '*',
            ],
            'PrivateListShelves' => [
                'method' => 'get',
                'uriTemplate' => '/v1/bookShelves',
            ],
        ],
        'google.tagger.v1.Labeler' => [
            'AddLabel' => [
                'method' => 'post',
                'uriTemplate' => '/v1/{resource=bookShelves/*/books/*}:addLabel',
                'body' => '*',
                'placeholders' => [
                    'resource' => [
                        'getters' => [
                            'getResource',
                        ],
                    ],
                ]
            ],
        ],
    ]
];

============== file: src/V1/resources/my_proto_client_config.json ==============
{
  "interfaces": {
    "google.example.library.v1.MyProto": {
      "retry_codes": {
        "idempotent": [
          "DEADLINE_EXCEEDED",
          "UNAVAILABLE"
        ],
        "non_idempotent": []
      },
      "retry_params": {
        "default": {
          "initial_retry_delay_millis": 100,
          "retry_delay_multiplier": 1.3,
          "max_retry_delay_millis": 60000,
          "initial_rpc_timeout_millis": 20000,
          "rpc_timeout_multiplier": 1.0,
          "max_rpc_timeout_millis": 20000,
          "total_timeout_millis": 600000
        }
      },
      "methods": {
        "MyMethod": {
          "timeout_millis": 1000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "GetNamespace": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        }
      }
    }
  }
}

============== file: src/V1/resources/my_proto_descriptor_config.php ==============
<?php

return [
    'interfaces' => [
        'google.example.library.v1.MyProto' => [
        ]
    ]
];

============== file: src/V1/resources/my_proto_rest_client_config.php ==============
<?php

return [
    'interfaces' => [
        'google.example.library.v1.MyProto' => [
            'MyMethod' => [
                'method' => 'post',
                'uriTemplate' => '/v1/myMethod',
                'body' => '*',
            ],
            'GetNamespace' => [
                'method' => 'post',
                'uriTemplate' => '/v1/myMethod',
                'body' => '*',
            ],
        ],
    ]
];

============== file: tests/System/V1/LibraryServiceSmokeTest.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * This file was automatically generated - do not edit!
 */

namespace Google\Cloud\Example\Library\Tests\System\V1;

use Google\Cloud\Example\Library\V1\LibraryServiceClient;
use Google\ApiCore\Testing\GeneratedTest;
use Google\Example\Library\V1\Book;
use Google\Example\Library\V1\Book\Rating;
use Google\Example\Library\V1\UpdateBookRequest;
use Google\Protobuf\FieldMask;

/**
 * @group library
 * @group gapic
 */
class LibraryServiceSmokeTest extends GeneratedTest
{
    /**
     * @test
     */
    public function updateBookTest()
    {

        $libraryServiceClient = new LibraryServiceClient();
        $formattedName = $libraryServiceClient->shelfBookOneBookTwoName('testShelf-'. time(), '[BOOK_ONE]', '[BOOK_TWO]');
        $rating = Rating::GOOD;
        $book = new Book();
        $book->setRating($rating);
        $libraryServiceClient->updateBook($formattedName, $book);
    }
}
============== file: tests/Unit/V1/LibraryServiceClientTest.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * This file was automatically generated - do not edit!
 */

namespace Google\Cloud\Example\Library\Tests\Unit\V1;

use Google\Cloud\Example\Library\V1\LibraryServiceClient;
use Google\ApiCore\ApiException;
use Google\ApiCore\BidiStream;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\LongRunning\OperationsClient;
use Google\ApiCore\ServerStream;
use Google\ApiCore\Testing\GeneratedTest;
use Google\ApiCore\Testing\MockTransport;
use Google\Example\Library\V1\AddCommentsRequest;
use Google\Example\Library\V1\ArchiveBooksRequest;
use Google\Example\Library\V1\ArchiveBooksResponse;
use Google\Example\Library\V1\Book;
use Google\Example\Library\V1\BookFromAnywhere;
use Google\Example\Library\V1\BookFromArchive;
use Google\Example\Library\V1\Comment;
use Google\Example\Library\V1\Comment\Stage;
use Google\Example\Library\V1\CreateBookRequest;
use Google\Example\Library\V1\CreateInventoryRequest;
use Google\Example\Library\V1\CreateShelfRequest;
use Google\Example\Library\V1\DeleteBookRequest;
use Google\Example\Library\V1\DeleteShelfRequest;
use Google\Example\Library\V1\FindRelatedBooksRequest;
use Google\Example\Library\V1\FindRelatedBooksResponse;
use Google\Example\Library\V1\GetBookFromAbsolutelyAnywhereRequest;
use Google\Example\Library\V1\GetBookFromAnywhereRequest;
use Google\Example\Library\V1\GetBookFromArchiveRequest;
use Google\Example\Library\V1\GetBookRequest;
use Google\Example\Library\V1\GetShelfRequest;
use Google\Example\Library\V1\Inventory;
use Google\Example\Library\V1\ListAggregatedShelvesRequest;
use Google\Example\Library\V1\ListAggregatedShelvesResponse;
use Google\Example\Library\V1\ListBooksRequest;
use Google\Example\Library\V1\ListBooksResponse;
use Google\Example\Library\V1\ListShelvesRequest;
use Google\Example\Library\V1\ListShelvesResponse;
use Google\Example\Library\V1\ListStringsRequest;
use Google\Example\Library\V1\ListStringsResponse;
use Google\Example\Library\V1\MergeShelvesRequest;
use Google\Example\Library\V1\MoveBookRequest;
use Google\Example\Library\V1\MoveBooksRequest;
use Google\Example\Library\V1\MoveBooksResponse;
use Google\Example\Library\V1\PublishSeriesRequest;
use Google\Example\Library\V1\PublishSeriesResponse;
use Google\Example\Library\V1\SeriesUuid;
use Google\Example\Library\V1\Shelf;
use Google\Example\Library\V1\SomeMessage2\SomeMessage3\Alignment;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest\InnerEnum;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest\InnerMessage;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsResponse;
use Google\Example\Library\V1\UpdateBookIndexRequest;
use Google\Example\Library\V1\UpdateBookRequest;
use Google\LongRunning\GetOperationRequest;
use Google\LongRunning\Operation;
use Google\Protobuf\Any;
use Google\Protobuf\BoolValue;
use Google\Protobuf\BytesValue;
use Google\Protobuf\DoubleValue;
use Google\Protobuf\Duration;
use Google\Protobuf\FieldMask;
use Google\Protobuf\FloatValue;
use Google\Protobuf\GPBEmpty;
use Google\Protobuf\Int32Value;
use Google\Protobuf\Int64Value;
use Google\Protobuf\ListValue;
use Google\Protobuf\StringValue;
use Google\Protobuf\Struct;
use Google\Protobuf\Timestamp;
use Google\Protobuf\UInt32Value;
use Google\Protobuf\UInt64Value;
use Google\Protobuf\Value;
use Google\Rpc\Code;
use Google\Tagger\CustomNamespace\V1\AddLabelRequest;
use Google\Tagger\CustomNamespace\V1\AddLabelResponse;
use PHPUnit\Framework\TestCase;
use stdClass;

/**
 * @group library
 * @group gapic
 */
class LibraryServiceClientTest extends GeneratedTest
{
    /**
     * @return TransportInterface
     */
    private function createTransport($deserialize = null)
    {
        return new MockTransport($deserialize);
    }

    /**
     * @return CredentialsWrapper
     */
    private function createCredentials()
    {
        return $this->getMockBuilder(CredentialsWrapper::class)
            ->disableOriginalConstructor()
            ->getMock();
    }

    /**
     * @return LibraryServiceClient
     */
    private function createClient(array $options = [])
    {
        $options += [
            'credentials' => $this->createCredentials(),
        ];
        return new LibraryServiceClient($options);
    }
    /**
     * @test
     */
    public function createShelfTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $name = 'name3373707';
        $theme = 'theme110327241';
        $internalTheme = 'internalTheme792518087';
        $expectedResponse = new Shelf();
        $expectedResponse->setName($name);
        $expectedResponse->setTheme($theme);
        $expectedResponse->setInternalTheme($internalTheme);
        $transport->addResponse($expectedResponse);

        // Mock request
        $shelf = new Shelf();

        $response = $client->createShelf($shelf);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/CreateShelf', $actualFuncCall);

        $actualValue = $actualRequestObject->getShelf();

        $this->assertProtobufEquals($shelf, $actualValue);

        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function createShelfExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        // Mock request
        $shelf = new Shelf();

        try {
            $client->createShelf($shelf);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function getShelfTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $name2 = 'name2-1052831874';
        $theme = 'theme110327241';
        $internalTheme = 'internalTheme792518087';
        $expectedResponse = new Shelf();
        $expectedResponse->setName($name2);
        $expectedResponse->setTheme($theme);
        $expectedResponse->setInternalTheme($internalTheme);
        $transport->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->shelfName('[SHELF]');
        $options = 'options-1249474914';

        $response = $client->getShelf($formattedName, $options);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/GetShelf', $actualFuncCall);

        $actualValue = $actualRequestObject->getName();

        $this->assertProtobufEquals($formattedName, $actualValue);
        $actualValue = $actualRequestObject->getOptions();

        $this->assertProtobufEquals($options, $actualValue);

        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function getShelfExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        // Mock request
        $formattedName = $client->shelfName('[SHELF]');
        $options = 'options-1249474914';

        try {
            $client->getShelf($formattedName, $options);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function listShelvesTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $nextPageToken = '';
        $shelvesElement = new Shelf();
        $shelves = [$shelvesElement];
        $expectedResponse = new ListShelvesResponse();
        $expectedResponse->setNextPageToken($nextPageToken);
        $expectedResponse->setShelves($shelves);
        $transport->addResponse($expectedResponse);

        $response = $client->listShelves();
        $this->assertEquals($expectedResponse, $response->getPage()->getResponseObject());
        $resources = iterator_to_array($response->iterateAllElements());
        $this->assertSame(1, count($resources));
        $this->assertEquals($expectedResponse->getShelves()[0], $resources[0]);

        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/ListShelves', $actualFuncCall);

        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function listShelvesExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        try {
            $client->listShelves();
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function deleteShelfTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $expectedResponse = new GPBEmpty();
        $transport->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->shelfName('[SHELF]');

        $client->deleteShelf($formattedName);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/DeleteShelf', $actualFuncCall);

        $actualValue = $actualRequestObject->getName();

        $this->assertProtobufEquals($formattedName, $actualValue);

        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function deleteShelfExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        // Mock request
        $formattedName = $client->shelfName('[SHELF]');

        try {
            $client->deleteShelf($formattedName);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function mergeShelvesTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $name2 = 'name2-1052831874';
        $theme = 'theme110327241';
        $internalTheme = 'internalTheme792518087';
        $expectedResponse = new Shelf();
        $expectedResponse->setName($name2);
        $expectedResponse->setTheme($theme);
        $expectedResponse->setInternalTheme($internalTheme);
        $transport->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->shelfName('[SHELF]');
        $formattedOtherShelfName = $client->shelfName('[SHELF]');

        $response = $client->mergeShelves($formattedName, $formattedOtherShelfName);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/MergeShelves', $actualFuncCall);

        $actualValue = $actualRequestObject->getName();

        $this->assertProtobufEquals($formattedName, $actualValue);
        $actualValue = $actualRequestObject->getOtherShelfName();

        $this->assertProtobufEquals($formattedOtherShelfName, $actualValue);

        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function mergeShelvesExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        // Mock request
        $formattedName = $client->shelfName('[SHELF]');
        $formattedOtherShelfName = $client->shelfName('[SHELF]');

        try {
            $client->mergeShelves($formattedName, $formattedOtherShelfName);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function createBookTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $name2 = 'name2-1052831874';
        $author = 'author-1406328437';
        $title = 'title110371416';
        $read = true;
        $reader = 'reader-934979389';
        $expectedResponse = new Book();
        $expectedResponse->setName($name2);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        $expectedResponse->setReader($reader);
        $transport->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->shelfName('[SHELF]');
        $book = new Book();

        $response = $client->createBook($formattedName, $book);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/CreateBook', $actualFuncCall);

        $actualValue = $actualRequestObject->getName();

        $this->assertProtobufEquals($formattedName, $actualValue);
        $actualValue = $actualRequestObject->getBook();

        $this->assertProtobufEquals($book, $actualValue);

        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function createBookExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        // Mock request
        $formattedName = $client->shelfName('[SHELF]');
        $book = new Book();

        try {
            $client->createBook($formattedName, $book);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function publishSeriesTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $bookNamesElement = 'bookNamesElement1491670575';
        $bookNames = [$bookNamesElement];
        $expectedResponse = new PublishSeriesResponse();
        $expectedResponse->setBookNames($bookNames);
        $transport->addResponse($expectedResponse);

        // Mock request
        $shelf = new Shelf();
        $books = [];
        $seriesString = 'foobar';
        $seriesUuid = new SeriesUuid();
        $seriesUuid->setSeriesString($seriesString);

        $response = $client->publishSeries($shelf, $books, $seriesUuid);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/PublishSeries', $actualFuncCall);

        $actualValue = $actualRequestObject->getShelf();

        $this->assertProtobufEquals($shelf, $actualValue);
        $actualValue = $actualRequestObject->getBooks();

        $this->assertProtobufEquals($books, $actualValue);
        $actualValue = $actualRequestObject->getSeriesUuid();

        $this->assertProtobufEquals($seriesUuid, $actualValue);

        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function publishSeriesExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        // Mock request
        $shelf = new Shelf();
        $books = [];
        $seriesString = 'foobar';
        $seriesUuid = new SeriesUuid();
        $seriesUuid->setSeriesString($seriesString);

        try {
            $client->publishSeries($shelf, $books, $seriesUuid);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function getBookTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $name2 = 'name2-1052831874';
        $author = 'author-1406328437';
        $title = 'title110371416';
        $read = true;
        $reader = 'reader-934979389';
        $expectedResponse = new Book();
        $expectedResponse->setName($name2);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        $expectedResponse->setReader($reader);
        $transport->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');

        $response = $client->getBook($formattedName);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/GetBook', $actualFuncCall);

        $actualValue = $actualRequestObject->getName();

        $this->assertProtobufEquals($formattedName, $actualValue);

        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function getBookExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        // Mock request
        $formattedName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');

        try {
            $client->getBook($formattedName);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function listBooksTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $nextPageToken = '';
        $booksElement = new Book();
        $books = [$booksElement];
        $expectedResponse = new ListBooksResponse();
        $expectedResponse->setNextPageToken($nextPageToken);
        $expectedResponse->setBooks($books);
        $transport->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->shelfName('[SHELF]');
        $filter = 'book-filter-string';

        $response = $client->listBooks($formattedName, ['filter' => $filter]);
        $this->assertEquals($expectedResponse, $response->getPage()->getResponseObject());
        $resources = iterator_to_array($response->iterateAllElements());
        $this->assertSame(1, count($resources));
        $this->assertEquals($expectedResponse->getBooks()[0], $resources[0]);

        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/ListBooks', $actualFuncCall);

        $actualValue = $actualRequestObject->getName();

        $this->assertProtobufEquals($formattedName, $actualValue);
        $actualValue = $actualRequestObject->getFilter();

        $this->assertProtobufEquals($filter, $actualValue);
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function listBooksExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        // Mock request
        $formattedName = $client->shelfName('[SHELF]');
        $filter = 'book-filter-string';

        try {
            $client->listBooks($formattedName, ['filter' => $filter]);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function deleteBookTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $expectedResponse = new GPBEmpty();
        $transport->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');

        $client->deleteBook($formattedName);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/DeleteBook', $actualFuncCall);

        $actualValue = $actualRequestObject->getName();

        $this->assertProtobufEquals($formattedName, $actualValue);

        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function deleteBookExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        // Mock request
        $formattedName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');

        try {
            $client->deleteBook($formattedName);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function updateBookTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $name2 = 'name2-1052831874';
        $author = 'author-1406328437';
        $title = 'title110371416';
        $read = true;
        $reader = 'reader-934979389';
        $expectedResponse = new Book();
        $expectedResponse->setName($name2);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        $expectedResponse->setReader($reader);
        $transport->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
        $book = new Book();

        $response = $client->updateBook($formattedName, $book);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/UpdateBook', $actualFuncCall);

        $actualValue = $actualRequestObject->getName();

        $this->assertProtobufEquals($formattedName, $actualValue);
        $actualValue = $actualRequestObject->getBook();

        $this->assertProtobufEquals($book, $actualValue);

        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function updateBookExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        // Mock request
        $formattedName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
        $book = new Book();

        try {
            $client->updateBook($formattedName, $book);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function moveBookTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $name2 = 'name2-1052831874';
        $author = 'author-1406328437';
        $title = 'title110371416';
        $read = true;
        $reader = 'reader-934979389';
        $expectedResponse = new Book();
        $expectedResponse->setName($name2);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        $expectedResponse->setReader($reader);
        $transport->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
        $formattedOtherShelfName = $client->shelfName('[SHELF]');

        $response = $client->moveBook($formattedName, $formattedOtherShelfName);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/MoveBook', $actualFuncCall);

        $actualValue = $actualRequestObject->getName();

        $this->assertProtobufEquals($formattedName, $actualValue);
        $actualValue = $actualRequestObject->getOtherShelfName();

        $this->assertProtobufEquals($formattedOtherShelfName, $actualValue);

        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function moveBookExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        // Mock request
        $formattedName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
        $formattedOtherShelfName = $client->shelfName('[SHELF]');

        try {
            $client->moveBook($formattedName, $formattedOtherShelfName);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function listStringsTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $nextPageToken = '';
        $stringsElement = 'stringsElement474465855';
        $strings = [$stringsElement];
        $expectedResponse = new ListStringsResponse();
        $expectedResponse->setNextPageToken($nextPageToken);
        $expectedResponse->setStrings($strings);
        $transport->addResponse($expectedResponse);

        $response = $client->listStrings();
        $this->assertEquals($expectedResponse, $response->getPage()->getResponseObject());
        $resources = iterator_to_array($response->iterateAllElements());
        $this->assertSame(1, count($resources));
        $this->assertEquals($expectedResponse->getStrings()[0], $resources[0]);

        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/ListStrings', $actualFuncCall);

        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function listStringsExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        try {
            $client->listStrings();
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function addCommentsTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $expectedResponse = new GPBEmpty();
        $transport->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
        $comment = '95';
        $stage = Stage::UNSET;
        $alignment = Alignment::CHAR;
        $commentsElement = new Comment();
        $commentsElement->setComment($comment);
        $commentsElement->setStage($stage);
        $commentsElement->setAlignment($alignment);
        $comments = [$commentsElement];

        $client->addComments($formattedName, $comments);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/AddComments', $actualFuncCall);

        $actualValue = $actualRequestObject->getName();

        $this->assertProtobufEquals($formattedName, $actualValue);
        $actualValue = $actualRequestObject->getComments();

        $this->assertProtobufEquals($comments, $actualValue);

        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function addCommentsExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        // Mock request
        $formattedName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
        $comment = '95';
        $stage = Stage::UNSET;
        $alignment = Alignment::CHAR;
        $commentsElement = new Comment();
        $commentsElement->setComment($comment);
        $commentsElement->setStage($stage);
        $commentsElement->setAlignment($alignment);
        $comments = [$commentsElement];

        try {
            $client->addComments($formattedName, $comments);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function getBookFromArchiveTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $name2 = 'name2-1052831874';
        $author = 'author-1406328437';
        $title = 'title110371416';
        $read = true;
        $expectedResponse = new BookFromArchive();
        $expectedResponse->setName($name2);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        $transport->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->archivedBookName('[ARCHIVE]', '[BOOK]');
        $formattedParent = $client->projectName('[PROJECT]');

        $response = $client->getBookFromArchive($formattedName, $formattedParent);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/GetBookFromArchive', $actualFuncCall);

        $actualValue = $actualRequestObject->getName();

        $this->assertProtobufEquals($formattedName, $actualValue);
        $actualValue = $actualRequestObject->getParent();

        $this->assertProtobufEquals($formattedParent, $actualValue);

        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function getBookFromArchiveExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        // Mock request
        $formattedName = $client->archivedBookName('[ARCHIVE]', '[BOOK]');
        $formattedParent = $client->projectName('[PROJECT]');

        try {
            $client->getBookFromArchive($formattedName, $formattedParent);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function getBookFromAnywhereTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $name2 = 'name2-1052831874';
        $author = 'author-1406328437';
        $title = 'title110371416';
        $read = true;
        $expectedResponse = new BookFromAnywhere();
        $expectedResponse->setName($name2);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        $transport->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
        $formattedAltBookName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
        $formattedPlace = $client->locationName('[PROJECT]', '[LOCATION]');
        $formattedFolder = $client->folderName('[FOLDER]');

        $response = $client->getBookFromAnywhere($formattedName, $formattedAltBookName, $formattedPlace, $formattedFolder);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/GetBookFromAnywhere', $actualFuncCall);

        $actualValue = $actualRequestObject->getName();

        $this->assertProtobufEquals($formattedName, $actualValue);
        $actualValue = $actualRequestObject->getAltBookName();

        $this->assertProtobufEquals($formattedAltBookName, $actualValue);
        $actualValue = $actualRequestObject->getPlace();

        $this->assertProtobufEquals($formattedPlace, $actualValue);
        $actualValue = $actualRequestObject->getFolder();

        $this->assertProtobufEquals($formattedFolder, $actualValue);

        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function getBookFromAnywhereExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        // Mock request
        $formattedName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
        $formattedAltBookName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
        $formattedPlace = $client->locationName('[PROJECT]', '[LOCATION]');
        $formattedFolder = $client->folderName('[FOLDER]');

        try {
            $client->getBookFromAnywhere($formattedName, $formattedAltBookName, $formattedPlace, $formattedFolder);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function getBookFromAbsolutelyAnywhereTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $name2 = 'name2-1052831874';
        $author = 'author-1406328437';
        $title = 'title110371416';
        $read = true;
        $expectedResponse = new BookFromAnywhere();
        $expectedResponse->setName($name2);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        $transport->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');

        $response = $client->getBookFromAbsolutelyAnywhere($formattedName);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/GetBookFromAbsolutelyAnywhere', $actualFuncCall);

        $actualValue = $actualRequestObject->getName();

        $this->assertProtobufEquals($formattedName, $actualValue);

        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function getBookFromAbsolutelyAnywhereExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        // Mock request
        $formattedName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');

        try {
            $client->getBookFromAbsolutelyAnywhere($formattedName);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function updateBookIndexTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $expectedResponse = new GPBEmpty();
        $transport->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
        $indexName = 'default index';
        $indexMapItem = 'indexMapItem1918721251';
        $indexMap = ['default_key' => $indexMapItem];

        $client->updateBookIndex($formattedName, $indexName, $indexMap);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/UpdateBookIndex', $actualFuncCall);

        $actualValue = $actualRequestObject->getName();

        $this->assertProtobufEquals($formattedName, $actualValue);
        $actualValue = $actualRequestObject->getIndexName();

        $this->assertProtobufEquals($indexName, $actualValue);
        $actualValue = $actualRequestObject->getIndexMap();

        $this->assertProtobufEquals($indexMap, $actualValue);

        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function updateBookIndexExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        // Mock request
        $formattedName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
        $indexName = 'default index';
        $indexMapItem = 'indexMapItem1918721251';
        $indexMap = ['default_key' => $indexMapItem];

        try {
            $client->updateBookIndex($formattedName, $indexName, $indexMap);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function findRelatedBooksTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $nextPageToken = '';
        $namesElement2 = 'namesElement21120252792';
        $names2 = [$namesElement2];
        $expectedResponse = new FindRelatedBooksResponse();
        $expectedResponse->setNextPageToken($nextPageToken);
        $expectedResponse->setNames($names2);
        $transport->addResponse($expectedResponse);

        // Mock request
        $namesElement = 'namesElement-249113339';
        $names = [$namesElement];
        $formattedShelves = [];

        $response = $client->findRelatedBooks($formattedNames, $formattedShelves);
        $this->assertEquals($expectedResponse, $response->getPage()->getResponseObject());
        $resources = iterator_to_array($response->iterateAllElements());
        $this->assertSame(1, count($resources));
        $this->assertEquals($expectedResponse->getNames()[0], $resources[0]);

        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/FindRelatedBooks', $actualFuncCall);

        $actualValue = $actualRequestObject->getNames();

        $this->assertProtobufEquals($formattedNames, $actualValue);
        $actualValue = $actualRequestObject->getShelves();

        $this->assertProtobufEquals($formattedShelves, $actualValue);
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function findRelatedBooksExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        // Mock request
        $namesElement = 'namesElement-249113339';
        $names = [$namesElement];
        $formattedShelves = [];

        try {
            $client->findRelatedBooks($formattedNames, $formattedShelves);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function addLabelTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $expectedResponse = new AddLabelResponse();
        $transport->addResponse($expectedResponse);

        // Mock request
        $resource = 'resource-341064690';
        $label = 'label102727412';

        $response = $client->addLabel($resource, $label);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.tagger.v1.Labeler/AddLabel', $actualFuncCall);

        $actualValue = $actualRequestObject->getResource();

        $this->assertProtobufEquals($resource, $actualValue);
        $actualValue = $actualRequestObject->getLabel();

        $this->assertProtobufEquals($label, $actualValue);

        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function addLabelExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        // Mock request
        $resource = 'resource-341064690';
        $label = 'label102727412';

        try {
            $client->addLabel($resource, $label);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function getBigBookTest()
    {
        $operationsTransport = $this->createTransport();
        $operationsClient = new OperationsClient([
            'serviceAddress' => '',
            'transport' => $operationsTransport,
            'credentials' => $this->createCredentials(),
        ]);
        $transport = $this->createTransport();
        $client = $this->createClient([
            'transport' => $transport,
            'operationsClient' => $operationsClient
        ]);

        $this->assertTrue($transport->isExhausted());
        $this->assertTrue($operationsTransport->isExhausted());

        // Mock response
        $incompleteOperation = new Operation();
        $incompleteOperation->setName('operations/getBigBookTest');
        $incompleteOperation->setDone(false);
        $transport->addResponse($incompleteOperation);
        $name2 = 'name2-1052831874';
        $author = 'author-1406328437';
        $title = 'title110371416';
        $read = true;
        $reader = 'reader-934979389';
        $expectedResponse = new Book();
        $expectedResponse->setName($name2);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        $expectedResponse->setReader($reader);
        $anyResponse = new Any();
        $anyResponse->setValue($expectedResponse->serializeToString());
        $completeOperation = new Operation();
        $completeOperation->setName('operations/getBigBookTest');
        $completeOperation->setDone(true);
        $completeOperation->setResponse($anyResponse);
        $operationsTransport->addResponse($completeOperation);

        // Mock request
        $formattedName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');

        $response = $client->getBigBook($formattedName);
        $this->assertFalse($response->isDone());
        $this->assertNull($response->getResult());
        $apiRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($apiRequests));
        $operationsRequestsEmpty = $operationsTransport->popReceivedCalls();
        $this->assertSame(0, count($operationsRequestsEmpty));

        $actualApiFuncCall = $apiRequests[0]->getFuncCall();
        $actualApiRequestObject = $apiRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/GetBigBook', $actualApiFuncCall);
        $actualValue = $actualApiRequestObject->getName();

        $this->assertProtobufEquals($formattedName, $actualValue);

        $expectedOperationsRequestObject = new GetOperationRequest();
        $expectedOperationsRequestObject->setName('operations/getBigBookTest');

        $response->pollUntilComplete([
            'initialPollDelayMillis' => 1,
        ]);
        $this->assertTrue($response->isDone());
        $this->assertEquals($expectedResponse, $response->getResult());
        $apiRequestsEmpty = $transport->popReceivedCalls();
        $this->assertSame(0, count($apiRequestsEmpty));
        $operationsRequests = $operationsTransport->popReceivedCalls();
        $this->assertSame(1, count($operationsRequests));

        $actualOperationsFuncCall = $operationsRequests[0]->getFuncCall();
        $actualOperationsRequestObject = $operationsRequests[0]->getRequestObject();
        $this->assertSame('/google.longrunning.Operations/GetOperation', $actualOperationsFuncCall);
        $this->assertEquals($expectedOperationsRequestObject, $actualOperationsRequestObject);

        $this->assertTrue($transport->isExhausted());
        $this->assertTrue($operationsTransport->isExhausted());
    }

    /**
     * @test
     */
    public function getBigBookExceptionTest()
    {
        $operationsTransport = $this->createTransport();
        $operationsClient = new OperationsClient([
            'serviceAddress' => '',
            'transport' => $operationsTransport,
            'credentials' => $this->createCredentials(),
        ]);
        $transport = $this->createTransport();
        $client = $this->createClient([
            'transport' => $transport,
            'operationsClient' => $operationsClient
        ]);

        $this->assertTrue($transport->isExhausted());
        $this->assertTrue($operationsTransport->isExhausted());

        // Mock response
        $incompleteOperation = new Operation();
        $incompleteOperation->setName('operations/getBigBookTest');
        $incompleteOperation->setDone(false);
        $transport->addResponse($incompleteOperation);

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $operationsTransport->addResponse(null, $status);

        // Mock request
        $formattedName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');

        $response = $client->getBigBook($formattedName);
        $this->assertFalse($response->isDone());
        $this->assertNull($response->getResult());

        $expectedOperationsRequestObject = new GetOperationRequest();
        $expectedOperationsRequestObject->setName('operations/getBigBookTest');

        try {
            $response->pollUntilComplete([
                'initialPollDelayMillis' => 1,
            ]);
            // If the pollUntilComplete() method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stubs are exhausted
        $transport->popReceivedCalls();
        $operationsTransport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
        $this->assertTrue($operationsTransport->isExhausted());
    }

    /**
     * @test
     */
    public function getBigNothingTest()
    {
        $operationsTransport = $this->createTransport();
        $operationsClient = new OperationsClient([
            'serviceAddress' => '',
            'transport' => $operationsTransport,
            'credentials' => $this->createCredentials(),
        ]);
        $transport = $this->createTransport();
        $client = $this->createClient([
            'transport' => $transport,
            'operationsClient' => $operationsClient
        ]);

        $this->assertTrue($transport->isExhausted());
        $this->assertTrue($operationsTransport->isExhausted());

        // Mock response
        $incompleteOperation = new Operation();
        $incompleteOperation->setName('operations/getBigNothingTest');
        $incompleteOperation->setDone(false);
        $transport->addResponse($incompleteOperation);
        $expectedResponse = new GPBEmpty();
        $anyResponse = new Any();
        $anyResponse->setValue($expectedResponse->serializeToString());
        $completeOperation = new Operation();
        $completeOperation->setName('operations/getBigNothingTest');
        $completeOperation->setDone(true);
        $completeOperation->setResponse($anyResponse);
        $operationsTransport->addResponse($completeOperation);

        // Mock request
        $formattedName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');

        $response = $client->getBigNothing($formattedName);
        $this->assertFalse($response->isDone());
        $this->assertNull($response->getResult());
        $apiRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($apiRequests));
        $operationsRequestsEmpty = $operationsTransport->popReceivedCalls();
        $this->assertSame(0, count($operationsRequestsEmpty));

        $actualApiFuncCall = $apiRequests[0]->getFuncCall();
        $actualApiRequestObject = $apiRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/GetBigNothing', $actualApiFuncCall);
        $actualValue = $actualApiRequestObject->getName();

        $this->assertProtobufEquals($formattedName, $actualValue);

        $expectedOperationsRequestObject = new GetOperationRequest();
        $expectedOperationsRequestObject->setName('operations/getBigNothingTest');

        $response->pollUntilComplete([
            'initialPollDelayMillis' => 1,
        ]);
        $this->assertTrue($response->isDone());
        $this->assertEquals($expectedResponse, $response->getResult());
        $apiRequestsEmpty = $transport->popReceivedCalls();
        $this->assertSame(0, count($apiRequestsEmpty));
        $operationsRequests = $operationsTransport->popReceivedCalls();
        $this->assertSame(1, count($operationsRequests));

        $actualOperationsFuncCall = $operationsRequests[0]->getFuncCall();
        $actualOperationsRequestObject = $operationsRequests[0]->getRequestObject();
        $this->assertSame('/google.longrunning.Operations/GetOperation', $actualOperationsFuncCall);
        $this->assertEquals($expectedOperationsRequestObject, $actualOperationsRequestObject);

        $this->assertTrue($transport->isExhausted());
        $this->assertTrue($operationsTransport->isExhausted());
    }

    /**
     * @test
     */
    public function getBigNothingExceptionTest()
    {
        $operationsTransport = $this->createTransport();
        $operationsClient = new OperationsClient([
            'serviceAddress' => '',
            'transport' => $operationsTransport,
            'credentials' => $this->createCredentials(),
        ]);
        $transport = $this->createTransport();
        $client = $this->createClient([
            'transport' => $transport,
            'operationsClient' => $operationsClient
        ]);

        $this->assertTrue($transport->isExhausted());
        $this->assertTrue($operationsTransport->isExhausted());

        // Mock response
        $incompleteOperation = new Operation();
        $incompleteOperation->setName('operations/getBigNothingTest');
        $incompleteOperation->setDone(false);
        $transport->addResponse($incompleteOperation);

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $operationsTransport->addResponse(null, $status);

        // Mock request
        $formattedName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');

        $response = $client->getBigNothing($formattedName);
        $this->assertFalse($response->isDone());
        $this->assertNull($response->getResult());

        $expectedOperationsRequestObject = new GetOperationRequest();
        $expectedOperationsRequestObject->setName('operations/getBigNothingTest');

        try {
            $response->pollUntilComplete([
                'initialPollDelayMillis' => 1,
            ]);
            // If the pollUntilComplete() method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stubs are exhausted
        $transport->popReceivedCalls();
        $operationsTransport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
        $this->assertTrue($operationsTransport->isExhausted());
    }

    /**
     * @test
     */
    public function testOptionalRequiredFlatteningParamsTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $expectedResponse = new TestOptionalRequiredFlatteningParamsResponse();
        $transport->addResponse($expectedResponse);

        // Mock request
        $requiredSingularInt32 = 72313594;
        $requiredSingularInt64 = 72313499;
        $requiredSingularFloat = -7514705.0;
        $requiredSingularDouble = 1.9111005E8;
        $requiredSingularBool = true;
        $requiredSingularEnum = InnerEnum::ZERO;
        $requiredSingularString = 'requiredSingularString-1949894503';
        $requiredSingularBytes = '-29';
        $requiredSingularMessage = new InnerMessage();
        $formattedRequiredSingularResourceName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
        $formattedRequiredSingularResourceNameOneof = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
        $requiredSingularResourceNameCommon = 'requiredSingularResourceNameCommon-1126805002';
        $requiredSingularFixed32 = 720656715;
        $requiredSingularFixed64 = 720656810;
        $requiredRepeatedInt32 = [];
        $requiredRepeatedInt64 = [];
        $requiredRepeatedFloat = [];
        $requiredRepeatedDouble = [];
        $requiredRepeatedBool = [];
        $requiredRepeatedEnum = [];
        $requiredRepeatedString = [];
        $requiredRepeatedBytes = [];
        $requiredRepeatedMessage = [];
        $formattedRequiredRepeatedResourceName = [];
        $formattedRequiredRepeatedResourceNameOneof = [];
        $requiredRepeatedResourceNameCommon = [];
        $requiredRepeatedFixed32 = [];
        $requiredRepeatedFixed64 = [];
        $requiredMap = [];
        $requiredAnyValue = new Any();
        $requiredStructValue = new Struct();
        $requiredValueValue = new Value();
        $requiredListValueValue = new ListValue();
        $requiredTimeValue = new Timestamp();
        $requiredDurationValue = new Duration();
        $requiredFieldMaskValue = new FieldMask();
        $requiredInt32Value = new Int32Value();
        $requiredUint32Value = new UInt32Value();
        $requiredInt64Value = new Int64Value();
        $requiredUint64Value = new UInt64Value();
        $requiredFloatValue = new FloatValue();
        $requiredDoubleValue = new DoubleValue();
        $requiredStringValue = new StringValue();
        $requiredBoolValue = new BoolValue();
        $requiredBytesValue = new BytesValue();
        $requiredRepeatedAnyValue = [];
        $requiredRepeatedStructValue = [];
        $requiredRepeatedValueValue = [];
        $requiredRepeatedListValueValue = [];
        $requiredRepeatedTimeValue = [];
        $requiredRepeatedDurationValue = [];
        $requiredRepeatedFieldMaskValue = [];
        $requiredRepeatedInt32Value = [];
        $requiredRepeatedUint32Value = [];
        $requiredRepeatedInt64Value = [];
        $requiredRepeatedUint64Value = [];
        $requiredRepeatedFloatValue = [];
        $requiredRepeatedDoubleValue = [];
        $requiredRepeatedStringValue = [];
        $requiredRepeatedBoolValue = [];
        $requiredRepeatedBytesValue = [];

        $response = $client->testOptionalRequiredFlatteningParams($requiredSingularInt32, $requiredSingularInt64, $requiredSingularFloat, $requiredSingularDouble, $requiredSingularBool, $requiredSingularEnum, $requiredSingularString, $requiredSingularBytes, $requiredSingularMessage, $formattedRequiredSingularResourceName, $formattedRequiredSingularResourceNameOneof, $requiredSingularResourceNameCommon, $requiredSingularFixed32, $requiredSingularFixed64, $requiredRepeatedInt32, $requiredRepeatedInt64, $requiredRepeatedFloat, $requiredRepeatedDouble, $requiredRepeatedBool, $requiredRepeatedEnum, $requiredRepeatedString, $requiredRepeatedBytes, $requiredRepeatedMessage, $formattedRequiredRepeatedResourceName, $formattedRequiredRepeatedResourceNameOneof, $requiredRepeatedResourceNameCommon, $requiredRepeatedFixed32, $requiredRepeatedFixed64, $requiredMap, $requiredAnyValue, $requiredStructValue, $requiredValueValue, $requiredListValueValue, $requiredTimeValue, $requiredDurationValue, $requiredFieldMaskValue, $requiredInt32Value, $requiredUint32Value, $requiredInt64Value, $requiredUint64Value, $requiredFloatValue, $requiredDoubleValue, $requiredStringValue, $requiredBoolValue, $requiredBytesValue, $requiredRepeatedAnyValue, $requiredRepeatedStructValue, $requiredRepeatedValueValue, $requiredRepeatedListValueValue, $requiredRepeatedTimeValue, $requiredRepeatedDurationValue, $requiredRepeatedFieldMaskValue, $requiredRepeatedInt32Value, $requiredRepeatedUint32Value, $requiredRepeatedInt64Value, $requiredRepeatedUint64Value, $requiredRepeatedFloatValue, $requiredRepeatedDoubleValue, $requiredRepeatedStringValue, $requiredRepeatedBoolValue, $requiredRepeatedBytesValue);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/TestOptionalRequiredFlatteningParams', $actualFuncCall);

        $actualValue = $actualRequestObject->getRequiredSingularInt32();

        $this->assertProtobufEquals($requiredSingularInt32, $actualValue);
        $actualValue = $actualRequestObject->getRequiredSingularInt64();

        $this->assertProtobufEquals($requiredSingularInt64, $actualValue);
        $actualValue = $actualRequestObject->getRequiredSingularFloat();

        $this->assertProtobufEquals($requiredSingularFloat, $actualValue);
        $actualValue = $actualRequestObject->getRequiredSingularDouble();

        $this->assertProtobufEquals($requiredSingularDouble, $actualValue);
        $actualValue = $actualRequestObject->getRequiredSingularBool();

        $this->assertProtobufEquals($requiredSingularBool, $actualValue);
        $actualValue = $actualRequestObject->getRequiredSingularEnum();

        $this->assertProtobufEquals($requiredSingularEnum, $actualValue);
        $actualValue = $actualRequestObject->getRequiredSingularString();

        $this->assertProtobufEquals($requiredSingularString, $actualValue);
        $actualValue = $actualRequestObject->getRequiredSingularBytes();

        $this->assertProtobufEquals($requiredSingularBytes, $actualValue);
        $actualValue = $actualRequestObject->getRequiredSingularMessage();

        $this->assertProtobufEquals($requiredSingularMessage, $actualValue);
        $actualValue = $actualRequestObject->getRequiredSingularResourceName();

        $this->assertProtobufEquals($formattedRequiredSingularResourceName, $actualValue);
        $actualValue = $actualRequestObject->getRequiredSingularResourceNameOneof();

        $this->assertProtobufEquals($formattedRequiredSingularResourceNameOneof, $actualValue);
        $actualValue = $actualRequestObject->getRequiredSingularResourceNameCommon();

        $this->assertProtobufEquals($requiredSingularResourceNameCommon, $actualValue);
        $actualValue = $actualRequestObject->getRequiredSingularFixed32();

        $this->assertProtobufEquals($requiredSingularFixed32, $actualValue);
        $actualValue = $actualRequestObject->getRequiredSingularFixed64();

        $this->assertProtobufEquals($requiredSingularFixed64, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedInt32();

        $this->assertProtobufEquals($requiredRepeatedInt32, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedInt64();

        $this->assertProtobufEquals($requiredRepeatedInt64, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedFloat();

        $this->assertProtobufEquals($requiredRepeatedFloat, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedDouble();

        $this->assertProtobufEquals($requiredRepeatedDouble, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedBool();

        $this->assertProtobufEquals($requiredRepeatedBool, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedEnum();

        $this->assertProtobufEquals($requiredRepeatedEnum, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedString();

        $this->assertProtobufEquals($requiredRepeatedString, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedBytes();

        $this->assertProtobufEquals($requiredRepeatedBytes, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedMessage();

        $this->assertProtobufEquals($requiredRepeatedMessage, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedResourceName();

        $this->assertProtobufEquals($formattedRequiredRepeatedResourceName, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedResourceNameOneof();

        $this->assertProtobufEquals($formattedRequiredRepeatedResourceNameOneof, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedResourceNameCommon();

        $this->assertProtobufEquals($requiredRepeatedResourceNameCommon, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedFixed32();

        $this->assertProtobufEquals($requiredRepeatedFixed32, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedFixed64();

        $this->assertProtobufEquals($requiredRepeatedFixed64, $actualValue);
        $actualValue = $actualRequestObject->getRequiredMap();

        $this->assertProtobufEquals($requiredMap, $actualValue);
        $actualValue = $actualRequestObject->getRequiredAnyValue();

        $this->assertProtobufEquals($requiredAnyValue, $actualValue);
        $actualValue = $actualRequestObject->getRequiredStructValue();

        $this->assertProtobufEquals($requiredStructValue, $actualValue);
        $actualValue = $actualRequestObject->getRequiredValueValue();

        $this->assertProtobufEquals($requiredValueValue, $actualValue);
        $actualValue = $actualRequestObject->getRequiredListValueValue();

        $this->assertProtobufEquals($requiredListValueValue, $actualValue);
        $actualValue = $actualRequestObject->getRequiredTimeValue();

        $this->assertProtobufEquals($requiredTimeValue, $actualValue);
        $actualValue = $actualRequestObject->getRequiredDurationValue();

        $this->assertProtobufEquals($requiredDurationValue, $actualValue);
        $actualValue = $actualRequestObject->getRequiredFieldMaskValue();

        $this->assertProtobufEquals($requiredFieldMaskValue, $actualValue);
        $actualValue = $actualRequestObject->getRequiredInt32Value();

        $this->assertProtobufEquals($requiredInt32Value, $actualValue);
        $actualValue = $actualRequestObject->getRequiredUint32Value();

        $this->assertProtobufEquals($requiredUint32Value, $actualValue);
        $actualValue = $actualRequestObject->getRequiredInt64Value();

        $this->assertProtobufEquals($requiredInt64Value, $actualValue);
        $actualValue = $actualRequestObject->getRequiredUint64Value();

        $this->assertProtobufEquals($requiredUint64Value, $actualValue);
        $actualValue = $actualRequestObject->getRequiredFloatValue();

        $this->assertProtobufEquals($requiredFloatValue, $actualValue);
        $actualValue = $actualRequestObject->getRequiredDoubleValue();

        $this->assertProtobufEquals($requiredDoubleValue, $actualValue);
        $actualValue = $actualRequestObject->getRequiredStringValue();

        $this->assertProtobufEquals($requiredStringValue, $actualValue);
        $actualValue = $actualRequestObject->getRequiredBoolValue();

        $this->assertProtobufEquals($requiredBoolValue, $actualValue);
        $actualValue = $actualRequestObject->getRequiredBytesValue();

        $this->assertProtobufEquals($requiredBytesValue, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedAnyValue();

        $this->assertProtobufEquals($requiredRepeatedAnyValue, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedStructValue();

        $this->assertProtobufEquals($requiredRepeatedStructValue, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedValueValue();

        $this->assertProtobufEquals($requiredRepeatedValueValue, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedListValueValue();

        $this->assertProtobufEquals($requiredRepeatedListValueValue, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedTimeValue();

        $this->assertProtobufEquals($requiredRepeatedTimeValue, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedDurationValue();

        $this->assertProtobufEquals($requiredRepeatedDurationValue, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedFieldMaskValue();

        $this->assertProtobufEquals($requiredRepeatedFieldMaskValue, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedInt32Value();

        $this->assertProtobufEquals($requiredRepeatedInt32Value, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedUint32Value();

        $this->assertProtobufEquals($requiredRepeatedUint32Value, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedInt64Value();

        $this->assertProtobufEquals($requiredRepeatedInt64Value, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedUint64Value();

        $this->assertProtobufEquals($requiredRepeatedUint64Value, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedFloatValue();

        $this->assertProtobufEquals($requiredRepeatedFloatValue, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedDoubleValue();

        $this->assertProtobufEquals($requiredRepeatedDoubleValue, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedStringValue();

        $this->assertProtobufEquals($requiredRepeatedStringValue, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedBoolValue();

        $this->assertProtobufEquals($requiredRepeatedBoolValue, $actualValue);
        $actualValue = $actualRequestObject->getRequiredRepeatedBytesValue();

        $this->assertProtobufEquals($requiredRepeatedBytesValue, $actualValue);

        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function testOptionalRequiredFlatteningParamsExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        // Mock request
        $requiredSingularInt32 = 72313594;
        $requiredSingularInt64 = 72313499;
        $requiredSingularFloat = -7514705.0;
        $requiredSingularDouble = 1.9111005E8;
        $requiredSingularBool = true;
        $requiredSingularEnum = InnerEnum::ZERO;
        $requiredSingularString = 'requiredSingularString-1949894503';
        $requiredSingularBytes = '-29';
        $requiredSingularMessage = new InnerMessage();
        $formattedRequiredSingularResourceName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
        $formattedRequiredSingularResourceNameOneof = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');
        $requiredSingularResourceNameCommon = 'requiredSingularResourceNameCommon-1126805002';
        $requiredSingularFixed32 = 720656715;
        $requiredSingularFixed64 = 720656810;
        $requiredRepeatedInt32 = [];
        $requiredRepeatedInt64 = [];
        $requiredRepeatedFloat = [];
        $requiredRepeatedDouble = [];
        $requiredRepeatedBool = [];
        $requiredRepeatedEnum = [];
        $requiredRepeatedString = [];
        $requiredRepeatedBytes = [];
        $requiredRepeatedMessage = [];
        $formattedRequiredRepeatedResourceName = [];
        $formattedRequiredRepeatedResourceNameOneof = [];
        $requiredRepeatedResourceNameCommon = [];
        $requiredRepeatedFixed32 = [];
        $requiredRepeatedFixed64 = [];
        $requiredMap = [];
        $requiredAnyValue = new Any();
        $requiredStructValue = new Struct();
        $requiredValueValue = new Value();
        $requiredListValueValue = new ListValue();
        $requiredTimeValue = new Timestamp();
        $requiredDurationValue = new Duration();
        $requiredFieldMaskValue = new FieldMask();
        $requiredInt32Value = new Int32Value();
        $requiredUint32Value = new UInt32Value();
        $requiredInt64Value = new Int64Value();
        $requiredUint64Value = new UInt64Value();
        $requiredFloatValue = new FloatValue();
        $requiredDoubleValue = new DoubleValue();
        $requiredStringValue = new StringValue();
        $requiredBoolValue = new BoolValue();
        $requiredBytesValue = new BytesValue();
        $requiredRepeatedAnyValue = [];
        $requiredRepeatedStructValue = [];
        $requiredRepeatedValueValue = [];
        $requiredRepeatedListValueValue = [];
        $requiredRepeatedTimeValue = [];
        $requiredRepeatedDurationValue = [];
        $requiredRepeatedFieldMaskValue = [];
        $requiredRepeatedInt32Value = [];
        $requiredRepeatedUint32Value = [];
        $requiredRepeatedInt64Value = [];
        $requiredRepeatedUint64Value = [];
        $requiredRepeatedFloatValue = [];
        $requiredRepeatedDoubleValue = [];
        $requiredRepeatedStringValue = [];
        $requiredRepeatedBoolValue = [];
        $requiredRepeatedBytesValue = [];

        try {
            $client->testOptionalRequiredFlatteningParams($requiredSingularInt32, $requiredSingularInt64, $requiredSingularFloat, $requiredSingularDouble, $requiredSingularBool, $requiredSingularEnum, $requiredSingularString, $requiredSingularBytes, $requiredSingularMessage, $formattedRequiredSingularResourceName, $formattedRequiredSingularResourceNameOneof, $requiredSingularResourceNameCommon, $requiredSingularFixed32, $requiredSingularFixed64, $requiredRepeatedInt32, $requiredRepeatedInt64, $requiredRepeatedFloat, $requiredRepeatedDouble, $requiredRepeatedBool, $requiredRepeatedEnum, $requiredRepeatedString, $requiredRepeatedBytes, $requiredRepeatedMessage, $formattedRequiredRepeatedResourceName, $formattedRequiredRepeatedResourceNameOneof, $requiredRepeatedResourceNameCommon, $requiredRepeatedFixed32, $requiredRepeatedFixed64, $requiredMap, $requiredAnyValue, $requiredStructValue, $requiredValueValue, $requiredListValueValue, $requiredTimeValue, $requiredDurationValue, $requiredFieldMaskValue, $requiredInt32Value, $requiredUint32Value, $requiredInt64Value, $requiredUint64Value, $requiredFloatValue, $requiredDoubleValue, $requiredStringValue, $requiredBoolValue, $requiredBytesValue, $requiredRepeatedAnyValue, $requiredRepeatedStructValue, $requiredRepeatedValueValue, $requiredRepeatedListValueValue, $requiredRepeatedTimeValue, $requiredRepeatedDurationValue, $requiredRepeatedFieldMaskValue, $requiredRepeatedInt32Value, $requiredRepeatedUint32Value, $requiredRepeatedInt64Value, $requiredRepeatedUint64Value, $requiredRepeatedFloatValue, $requiredRepeatedDoubleValue, $requiredRepeatedStringValue, $requiredRepeatedBoolValue, $requiredRepeatedBytesValue);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function listAggregatedShelvesTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $nextPageToken = 'nextPageToken-1530815211';
        $expectedResponse = new ListAggregatedShelvesResponse();
        $expectedResponse->setNextPageToken($nextPageToken);
        $transport->addResponse($expectedResponse);

        $response = $client->listAggregatedShelves();
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/ListAggregatedShelves', $actualFuncCall);


        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function listAggregatedShelvesExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        try {
            $client->listAggregatedShelves();
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function createInventoryTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $name = 'name3373707';
        $expectedResponse = new Inventory();
        $expectedResponse->setName($name);
        $transport->addResponse($expectedResponse);

        // Mock request
        $formattedParent = $client->publisherName('[PROJECT]', '[LOCATION]', '[PUBLISHER]');
        $asset = 'asset93121264';
        $parentAsset = 'parentAsset1389473563';
        $assets = [];

        $response = $client->createInventory($formattedParent, $asset, $parentAsset, $assets);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/CreateInventory', $actualFuncCall);

        $actualValue = $actualRequestObject->getParent();

        $this->assertProtobufEquals($formattedParent, $actualValue);
        $actualValue = $actualRequestObject->getAsset();

        $this->assertProtobufEquals($asset, $actualValue);
        $actualValue = $actualRequestObject->getParentAsset();

        $this->assertProtobufEquals($parentAsset, $actualValue);
        $actualValue = $actualRequestObject->getAssets();

        $this->assertProtobufEquals($assets, $actualValue);

        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function createInventoryExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        // Mock request
        $formattedParent = $client->publisherName('[PROJECT]', '[LOCATION]', '[PUBLISHER]');
        $asset = 'asset93121264';
        $parentAsset = 'parentAsset1389473563';
        $assets = [];

        try {
            $client->createInventory($formattedParent, $asset, $parentAsset, $assets);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function moveBooksTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $success = false;
        $expectedResponse = new MoveBooksResponse();
        $expectedResponse->setSuccess($success);
        $transport->addResponse($expectedResponse);

        $response = $client->moveBooks();
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/MoveBooks', $actualFuncCall);


        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function moveBooksExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        try {
            $client->moveBooks();
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function archiveBooksTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $success = false;
        $expectedResponse = new ArchiveBooksResponse();
        $expectedResponse->setSuccess($success);
        $transport->addResponse($expectedResponse);

        $response = $client->archiveBooks();
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/ArchiveBooks', $actualFuncCall);


        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function archiveBooksExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        try {
            $client->archiveBooks();
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function longRunningArchiveBooksTest()
    {
        $operationsTransport = $this->createTransport();
        $operationsClient = new OperationsClient([
            'serviceAddress' => '',
            'transport' => $operationsTransport,
            'credentials' => $this->createCredentials(),
        ]);
        $transport = $this->createTransport();
        $client = $this->createClient([
            'transport' => $transport,
            'operationsClient' => $operationsClient
        ]);

        $this->assertTrue($transport->isExhausted());
        $this->assertTrue($operationsTransport->isExhausted());

        // Mock response
        $incompleteOperation = new Operation();
        $incompleteOperation->setName('operations/longRunningArchiveBooksTest');
        $incompleteOperation->setDone(false);
        $transport->addResponse($incompleteOperation);
        $success = false;
        $expectedResponse = new ArchiveBooksResponse();
        $expectedResponse->setSuccess($success);
        $anyResponse = new Any();
        $anyResponse->setValue($expectedResponse->serializeToString());
        $completeOperation = new Operation();
        $completeOperation->setName('operations/longRunningArchiveBooksTest');
        $completeOperation->setDone(true);
        $completeOperation->setResponse($anyResponse);
        $operationsTransport->addResponse($completeOperation);

        $response = $client->longRunningArchiveBooks();
        $this->assertFalse($response->isDone());
        $this->assertNull($response->getResult());
        $apiRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($apiRequests));
        $operationsRequestsEmpty = $operationsTransport->popReceivedCalls();
        $this->assertSame(0, count($operationsRequestsEmpty));

        $actualApiFuncCall = $apiRequests[0]->getFuncCall();
        $actualApiRequestObject = $apiRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/LongRunningArchiveBooks', $actualApiFuncCall);

        $expectedOperationsRequestObject = new GetOperationRequest();
        $expectedOperationsRequestObject->setName('operations/longRunningArchiveBooksTest');

        $response->pollUntilComplete([
            'initialPollDelayMillis' => 1,
        ]);
        $this->assertTrue($response->isDone());
        $this->assertEquals($expectedResponse, $response->getResult());
        $apiRequestsEmpty = $transport->popReceivedCalls();
        $this->assertSame(0, count($apiRequestsEmpty));
        $operationsRequests = $operationsTransport->popReceivedCalls();
        $this->assertSame(1, count($operationsRequests));

        $actualOperationsFuncCall = $operationsRequests[0]->getFuncCall();
        $actualOperationsRequestObject = $operationsRequests[0]->getRequestObject();
        $this->assertSame('/google.longrunning.Operations/GetOperation', $actualOperationsFuncCall);
        $this->assertEquals($expectedOperationsRequestObject, $actualOperationsRequestObject);

        $this->assertTrue($transport->isExhausted());
        $this->assertTrue($operationsTransport->isExhausted());
    }

    /**
     * @test
     */
    public function longRunningArchiveBooksExceptionTest()
    {
        $operationsTransport = $this->createTransport();
        $operationsClient = new OperationsClient([
            'serviceAddress' => '',
            'transport' => $operationsTransport,
            'credentials' => $this->createCredentials(),
        ]);
        $transport = $this->createTransport();
        $client = $this->createClient([
            'transport' => $transport,
            'operationsClient' => $operationsClient
        ]);

        $this->assertTrue($transport->isExhausted());
        $this->assertTrue($operationsTransport->isExhausted());

        // Mock response
        $incompleteOperation = new Operation();
        $incompleteOperation->setName('operations/longRunningArchiveBooksTest');
        $incompleteOperation->setDone(false);
        $transport->addResponse($incompleteOperation);

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $operationsTransport->addResponse(null, $status);

        $response = $client->longRunningArchiveBooks();
        $this->assertFalse($response->isDone());
        $this->assertNull($response->getResult());

        $expectedOperationsRequestObject = new GetOperationRequest();
        $expectedOperationsRequestObject->setName('operations/longRunningArchiveBooksTest');

        try {
            $response->pollUntilComplete([
                'initialPollDelayMillis' => 1,
            ]);
            // If the pollUntilComplete() method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stubs are exhausted
        $transport->popReceivedCalls();
        $operationsTransport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
        $this->assertTrue($operationsTransport->isExhausted());
    }

    /**
     * @test
     */
    public function saveBookTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $expectedResponse = new GPBEmpty();
        $transport->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');

        $client->saveBook($formattedName);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/SaveBook', $actualFuncCall);

        $actualValue = $actualRequestObject->getName();

        $this->assertProtobufEquals($formattedName, $actualValue);

        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function saveBookExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        // Mock request
        $formattedName = $client->shelfBookOneBookTwoName('[SHELF]', '[BOOK_ONE]', '[BOOK_TWO]');

        try {
            $client->saveBook($formattedName);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function privateListShelvesTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $name = 'name3373707';
        $author = 'author-1406328437';
        $title = 'title110371416';
        $read = true;
        $reader = 'reader-934979389';
        $expectedResponse = new Book();
        $expectedResponse->setName($name);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        $expectedResponse->setReader($reader);
        $transport->addResponse($expectedResponse);

        $response = $client->privateListShelves();
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/PrivateListShelves', $actualFuncCall);


        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function privateListShelvesExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        try {
            $client->privateListShelves();
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

}
============== file: tests/Unit/V1/MyProtoClientTest.php ==============
<?php
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * This file was automatically generated - do not edit!
 */

namespace Google\Cloud\Example\Library\Tests\Unit\V1;

use Google\Cloud\Example\Library\V1\MyProtoClient;
use Google\ApiCore\ApiException;
use Google\ApiCore\BidiStream;
use Google\ApiCore\CredentialsWrapper;
use Google\ApiCore\LongRunning\OperationsClient;
use Google\ApiCore\ServerStream;
use Google\ApiCore\Testing\GeneratedTest;
use Google\ApiCore\Testing\MockTransport;
use Google\Example\Library\V1\MethodRequest;
use Google\Example\Library\V1\MethodResponse;
use Google\Example\Library\V1\PBNamespace;
use Google\LongRunning\GetOperationRequest;
use Google\Protobuf\Any;
use Google\Protobuf\GPBEmpty;
use Google\Rpc\Code;
use PHPUnit\Framework\TestCase;
use stdClass;

/**
 * @group library
 * @group gapic
 */
class MyProtoClientTest extends GeneratedTest
{
    /**
     * @return TransportInterface
     */
    private function createTransport($deserialize = null)
    {
        return new MockTransport($deserialize);
    }

    /**
     * @return CredentialsWrapper
     */
    private function createCredentials()
    {
        return $this->getMockBuilder(CredentialsWrapper::class)
            ->disableOriginalConstructor()
            ->getMock();
    }

    /**
     * @return MyProtoClient
     */
    private function createClient(array $options = [])
    {
        $options += [
            'credentials' => $this->createCredentials(),
        ];
        return new MyProtoClient($options);
    }
    /**
     * @test
     */
    public function myMethodTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $myfield = 'myfield1515208398';
        $expectedResponse = new MethodResponse();
        $expectedResponse->setMyfield($myfield);
        $transport->addResponse($expectedResponse);

        $response = $client->myMethod();
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.MyProto/MyMethod', $actualFuncCall);


        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function myMethodExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        try {
            $client->myMethod();
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function getNamespaceTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        // Mock response
        $value = 'value111972721';
        $expectedResponse = new PBNamespace();
        $expectedResponse->setValue($value);
        $transport->addResponse($expectedResponse);

        $response = $client->getNamespace();
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $transport->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.MyProto/GetNamespace', $actualFuncCall);


        $this->assertTrue($transport->isExhausted());
    }

    /**
     * @test
     */
    public function getNamespaceExceptionTest()
    {
        $transport = $this->createTransport();
        $client = $this->createClient(['transport' => $transport]);

        $this->assertTrue($transport->isExhausted());

        $status = new stdClass();
        $status->code = Code::DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Code::DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $transport->addResponse(null, $status);

        try {
            $client->getNamespace();
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $transport->popReceivedCalls();
        $this->assertTrue($transport->isExhausted());
    }

}
