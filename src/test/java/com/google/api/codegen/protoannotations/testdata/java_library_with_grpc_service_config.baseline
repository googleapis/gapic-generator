============== file: ../build.gradle ==============
Static or binary file content is not shown.
============== file: ../gradle/wrapper/gradle-wrapper.jar ==============
Static or binary file content is not shown.
============== file: ../gradle/wrapper/gradle-wrapper.properties ==============
Static or binary file content is not shown.
============== file: ../gradlew ==============
Static or binary file content is not shown.
============== file: ../gradlew.bat ==============
Static or binary file content is not shown.
============== file: ../settings.gradle ==============
Static or binary file content is not shown.
============== file: build.gradle ==============
buildscript {
  repositories {
    mavenCentral()
  }
}

apply plugin: 'java'

description = 'GAPIC library for google-cloud-library-v1'
group = 'com.google.cloud'
version = '0.0.0-SNAPSHOT'
sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
  mavenCentral()
  mavenLocal()
}

compileJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

dependencies {
  compile 'com.google.api:gax:1.0.0'
  testCompile 'com.google.api:gax:1.0.0:testlib'
  compile 'com.google.api:gax-grpc:0.18.0'
  testCompile 'com.google.api:gax-grpc:0.18.0:testlib'
  testCompile 'io.grpc:grpc-netty-shaded:1.9.0'
  testCompile 'junit:junit:4.12'
  // Remove this line if you are bundling your proto-generated classes together with your client classes
  compile project(':proto-google-cloud-library-v1')
  // Remove this line if you are bundling your proto-generated classes together with your client classes
  testCompile project(':grpc-google-cloud-library-v1')
  testCompile 'com.google.api.grpc:grpc-google-some-test-package-v1:0.0.0'
}

task smokeTest(type: Test) {
  filter {
    includeTestsMatching "*SmokeTest"
    setFailOnNoMatchingTests false
  }
}

test {
  exclude "**/*SmokeTest*"
}

sourceSets {
  main {
    java {
      srcDir 'src/main/java'
    }
  }
}

clean {
  delete 'all-jars'
}

task allJars(type: Copy) {
  dependsOn test, jar
  into 'all-jars'
  // Replace with `from configurations.testRuntime, jar` to include test dependencies
  from configurations.runtime, jar
}
============== file: samples/build.gradle ==============
buildscript {
  repositories {
    mavenCentral()
  }
}

apply plugin: 'java'
apply plugin: 'application'

description = 'GAPIC samples for google-cloud-library-v1'
group = 'com.google.cloud'
version = '0.0.0-SNAPSHOT'
sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
  mavenCentral()
  mavenLocal()
}

compileJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

dependencies {
  compile 'com.google.api:api-common:0.0.2'
  compile 'commons-cli:commons-cli:1.4'
  compile project(':gapic-google-cloud-library-v1')
}

task fatJar(type: Jar) {
  baseName = 'sample-google-cloud-library-v1-all'
  from {
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  }
  with jar
}

clean {
  delete 'all-jars'
}

run {
  mainClassName = getProperty('mainClass')
}

============== file: samples/src/main/java/com/google/example/examples/library/v1/Babbage.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("CallableStreamingServer",  "prog")
// sample-metadata:
//   title: Programming Books
//   description: Testing calling forms
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.Babbage

package com.google.example.examples.library.v1;

import com.google.api.gax.rpc.ServerStream;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.LibraryClient;
import com.google.example.library.v1.StreamBooksRequest;

public class Babbage {
  // [START babbage]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.gax.rpc.ServerStream;
   * import com.google.example.library.v1.Book;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.example.library.v1.StreamBooksRequest;
   */

  /** Testing calling forms */
  public static void sampleStreamBooks() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      String name = "BASIC";
      StreamBooksRequest request = StreamBooksRequest.newBuilder()
        .setName(name)
        .build();

      ServerStream<Book> stream = libraryClient.streamBooksCallable().call(request);
      for (Book responseItem : stream) {
        System.out.println(responseItem);
      }
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END babbage]

  public static void main(String[] args) {
    sampleStreamBooks();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/BabbleAboutBookCallableCallableStreamingClientEmptyResponseTypeWithResponseHandling.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("CallableStreamingClient",  "empty_response_type_with_response_handling")
// sample-metadata:
//   title: Test response handling for methods that return empty
//   description: Test response handling for methods that return empty
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.BabbleAboutBookCallableCallableStreamingClientEmptyResponseTypeWithResponseHandling

package com.google.example.examples.library.v1;

import com.google.api.gax.rpc.ApiStreamObserver;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.DiscussBookRequest;
import com.google.example.library.v1.LibraryClient;

public class BabbleAboutBookCallableCallableStreamingClientEmptyResponseTypeWithResponseHandling {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.gax.rpc.ApiStreamObserver;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.DiscussBookRequest;
   * import com.google.example.library.v1.LibraryClient;
   */

  /** Test response handling for methods that return empty */
  public static void sampleBabbleAboutBook() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      ApiStreamObserver<Void> responseObserver =
          new ApiStreamObserver<Void>() {
            @Override
            public void onNext(Void response) {
              // No one replied
              System.out.println("No one replied.");
            }

            @Override
            public void onError(Throwable t) {
              // Add error-handling
            }

            @Override
            public void onCompleted() {
              // Do something when complete.
            }
          };
      ApiStreamObserver<DiscussBookRequest> requestObserver =
          libraryClient.babbleAboutBookCallable().clientStreamingCall(responseObserver);

      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      DiscussBookRequest request = DiscussBookRequest.newBuilder()
        .setName(name.toString())
        .build();
      requestObserver.onNext(request);
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleBabbleAboutBook();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/BabbleAboutBookCallableCallableStreamingClientEmptyResponseTypeWithoutResponseHandling.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("CallableStreamingClient",  "empty_response_type_without_response_handling")
// sample-metadata:
//   title: Test default response handling is turned off for methods that return empty
//   description: Test default response handling is turned off for methods that return empty
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.BabbleAboutBookCallableCallableStreamingClientEmptyResponseTypeWithoutResponseHandling

package com.google.example.examples.library.v1;

import com.google.api.gax.rpc.ApiStreamObserver;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.DiscussBookRequest;
import com.google.example.library.v1.LibraryClient;

public class BabbleAboutBookCallableCallableStreamingClientEmptyResponseTypeWithoutResponseHandling {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.gax.rpc.ApiStreamObserver;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.DiscussBookRequest;
   * import com.google.example.library.v1.LibraryClient;
   */

  /** Test default response handling is turned off for methods that return empty */
  public static void sampleBabbleAboutBook() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      ApiStreamObserver<Void> responseObserver =
          new ApiStreamObserver<Void>() {
            @Override
            public void onNext(Void response) {}

            @Override
            public void onError(Throwable t) {
              // Add error-handling
            }

            @Override
            public void onCompleted() {
              // Do something when complete.
            }
          };
      ApiStreamObserver<DiscussBookRequest> requestObserver =
          libraryClient.babbleAboutBookCallable().clientStreamingCall(responseObserver);

      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      DiscussBookRequest request = DiscussBookRequest.newBuilder()
        .setName(name.toString())
        .build();
      requestObserver.onNext(request);
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleBabbleAboutBook();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/DeleteShelfCallableCallableEmptyResponseTypeWithResponseHandling.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Callable",  "empty_response_type_with_response_handling")
// sample-metadata:
//   title: Test response handling for methods that return empty
//   description: Test response handling for methods that return empty
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.DeleteShelfCallableCallableEmptyResponseTypeWithResponseHandling

package com.google.example.examples.library.v1;

import com.google.api.core.ApiFuture;
import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.LibraryClient;
import com.google.example.library.v1.ShelfName;

public class DeleteShelfCallableCallableEmptyResponseTypeWithResponseHandling {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.core.ApiFuture;
   * import com.google.example.library.v1.DeleteShelfRequest;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.example.library.v1.ShelfName;
   */

  /** Test response handling for methods that return empty */
  public static void sampleDeleteShelf() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      ShelfName name = ShelfName.of("[SHELF]");
      DeleteShelfRequest request = DeleteShelfRequest.newBuilder()
        .setName(name.toString())
        .build();
      ApiFuture<Void> future = libraryClient.deleteShelfCallable().futureCall(request);

      // Do something

      future.get();
      // Shelf deleted
      System.out.println("Shelf deleted.");
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleDeleteShelf();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/DeleteShelfCallableCallableEmptyResponseTypeWithoutResponseHandling.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Callable",  "empty_response_type_without_response_handling")
// sample-metadata:
//   title: Test default response handling is turned off for methods that return empty
//   description: Test default response handling is turned off for methods that return empty
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.DeleteShelfCallableCallableEmptyResponseTypeWithoutResponseHandling

package com.google.example.examples.library.v1;

import com.google.api.core.ApiFuture;
import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.LibraryClient;
import com.google.example.library.v1.ShelfName;

public class DeleteShelfCallableCallableEmptyResponseTypeWithoutResponseHandling {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.core.ApiFuture;
   * import com.google.example.library.v1.DeleteShelfRequest;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.example.library.v1.ShelfName;
   */

  /** Test default response handling is turned off for methods that return empty */
  public static void sampleDeleteShelf() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      ShelfName name = ShelfName.of("[SHELF]");
      DeleteShelfRequest request = DeleteShelfRequest.newBuilder()
        .setName(name.toString())
        .build();
      ApiFuture<Void> future = libraryClient.deleteShelfCallable().futureCall(request);

      // Do something

      future.get();
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleDeleteShelf();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/DeleteShelfFlattenedEmptyResponseTypeWithResponseHandling.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Flattened",  "empty_response_type_with_response_handling")
// sample-metadata:
//   title: Test response handling for methods that return empty
//   description: Test response handling for methods that return empty
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.DeleteShelfFlattenedEmptyResponseTypeWithResponseHandling

package com.google.example.examples.library.v1;

import com.google.example.library.v1.LibraryClient;
import com.google.example.library.v1.ShelfName;

public class DeleteShelfFlattenedEmptyResponseTypeWithResponseHandling {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.example.library.v1.ShelfName;
   */

  /** Test response handling for methods that return empty */
  public static void sampleDeleteShelf() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      ShelfName name = ShelfName.of("[SHELF]");
      libraryClient.deleteShelf(name.toString());
      // Shelf deleted
      System.out.println("Shelf deleted.");
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleDeleteShelf();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/DeleteShelfFlattenedEmptyResponseTypeWithoutResponseHandling.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Flattened",  "empty_response_type_without_response_handling")
// sample-metadata:
//   title: Test default response handling is turned off for methods that return empty
//   description: Test default response handling is turned off for methods that return empty
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.DeleteShelfFlattenedEmptyResponseTypeWithoutResponseHandling

package com.google.example.examples.library.v1;

import com.google.example.library.v1.LibraryClient;
import com.google.example.library.v1.ShelfName;

public class DeleteShelfFlattenedEmptyResponseTypeWithoutResponseHandling {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.example.library.v1.ShelfName;
   */

  /** Test default response handling is turned off for methods that return empty */
  public static void sampleDeleteShelf() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      ShelfName name = ShelfName.of("[SHELF]");
      libraryClient.deleteShelf(name.toString());
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleDeleteShelf();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/DeleteShelfRequestEmptyResponseTypeWithResponseHandling.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Request",  "empty_response_type_with_response_handling")
// sample-metadata:
//   title: Test response handling for methods that return empty
//   description: Test response handling for methods that return empty
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.DeleteShelfRequestEmptyResponseTypeWithResponseHandling

package com.google.example.examples.library.v1;

import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.LibraryClient;
import com.google.example.library.v1.ShelfName;

public class DeleteShelfRequestEmptyResponseTypeWithResponseHandling {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.example.library.v1.DeleteShelfRequest;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.example.library.v1.ShelfName;
   */

  /** Test response handling for methods that return empty */
  public static void sampleDeleteShelf() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      ShelfName name = ShelfName.of("[SHELF]");
      DeleteShelfRequest request = DeleteShelfRequest.newBuilder()
        .setName(name.toString())
        .build();
      libraryClient.deleteShelf(request);
      // Shelf deleted
      System.out.println("Shelf deleted.");
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleDeleteShelf();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/DeleteShelfRequestEmptyResponseTypeWithoutResponseHandling.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Request",  "empty_response_type_without_response_handling")
// sample-metadata:
//   title: Test default response handling is turned off for methods that return empty
//   description: Test default response handling is turned off for methods that return empty
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.DeleteShelfRequestEmptyResponseTypeWithoutResponseHandling

package com.google.example.examples.library.v1;

import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.LibraryClient;
import com.google.example.library.v1.ShelfName;

public class DeleteShelfRequestEmptyResponseTypeWithoutResponseHandling {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.example.library.v1.DeleteShelfRequest;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.example.library.v1.ShelfName;
   */

  /** Test default response handling is turned off for methods that return empty */
  public static void sampleDeleteShelf() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      ShelfName name = ShelfName.of("[SHELF]");
      DeleteShelfRequest request = DeleteShelfRequest.newBuilder()
        .setName(name.toString())
        .build();
      libraryClient.deleteShelf(request);
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleDeleteShelf();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/FindRelatedBooksCallableCallableListOdyssey.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("CallableList",  "odyssey")
// sample-metadata:
//   title: The Odyssey
//   description: Testing calling forms
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.FindRelatedBooksCallableCallableListOdyssey

package com.google.example.examples.library.v1;

import com.google.example.library.v1.BookName;
import com.google.example.library.v1.FindRelatedBooksRequest;
import com.google.example.library.v1.FindRelatedBooksResponse;
import com.google.example.library.v1.LibraryClient;
import com.google.example.library.v1.ShelfName;
import java.util.Arrays;
import java.util.List;

public class FindRelatedBooksCallableCallableListOdyssey {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.FindRelatedBooksRequest;
   * import com.google.example.library.v1.FindRelatedBooksResponse;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.example.library.v1.ShelfName;
   * import java.util.Arrays;
   * import java.util.List;
   */

  /** Testing calling forms */
  public static void sampleFindRelatedBooks() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName namesElement = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      List<BookName> names = Arrays.asList(namesElement);
      ShelfName shelvesElement = ShelfName.of("[SHELF]");
      List<ShelfName> shelves = Arrays.asList(shelvesElement);
      FindRelatedBooksRequest request = FindRelatedBooksRequest.newBuilder()
        .addAllNames(BookName.toStringList(names))
        .addAllShelves(ShelfName.toStringList(shelves))
        .build();
      while (true) {
        FindRelatedBooksResponse response = libraryClient.findRelatedBooksCallable().call(request);
        for (BookName responseItem : BookName.parseList(response.getNamesList())) {
          BookName book = responseItem;
          System.out.printf("Here's a related book: %s\n", book);
        }
        String nextPageToken = response.getNextPageToken();
        if (!Strings.isNullOrEmpty(nextPageToken)) {
          request = request.toBuilder().setPageToken(nextPageToken).build();
        } else {
          break;
        }
      }
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleFindRelatedBooks();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/FindRelatedBooksFlattenedPagedOdyssey.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("FlattenedPaged",  "odyssey")
// sample-metadata:
//   title: The Odyssey
//   description: Testing calling forms
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.FindRelatedBooksFlattenedPagedOdyssey

package com.google.example.examples.library.v1;

import com.google.api.core.ApiFuture;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.FindRelatedBooksResponse;
import com.google.example.library.v1.LibraryClient;
import java.util.Arrays;
import java.util.List;

public class FindRelatedBooksFlattenedPagedOdyssey {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.core.ApiFuture;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.FindRelatedBooksResponse;
   * import com.google.example.library.v1.LibraryClient;
   * import java.util.Arrays;
   * import java.util.List;
   */

  /** Testing calling forms */
  public static void sampleFindRelatedBooks() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      String namesElement = "Odyssey";
      List<String> names = Arrays.asList(namesElement);
      String shelvesElement = "Classics";
      List<String> shelves = Arrays.asList(shelvesElement);
      ApiFuture<FindRelatedBooksPagedResponse> future = libraryClient.findRelatedBooks().futureCall(formattedNames, formattedShelves);

      // Do something

      for (BookName responseItem : future.get().iterateAllAsBookName()) {
        BookName book = responseItem;
        System.out.printf("Here's a related book: %s\n", book);
      }
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleFindRelatedBooks();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/FindRelatedBooksPagedCallableCallablePagedOdyssey.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("CallablePaged",  "odyssey")
// sample-metadata:
//   title: The Odyssey
//   description: Testing calling forms
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.FindRelatedBooksPagedCallableCallablePagedOdyssey

package com.google.example.examples.library.v1;

import com.google.api.core.ApiFuture;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.FindRelatedBooksRequest;
import com.google.example.library.v1.FindRelatedBooksResponse;
import com.google.example.library.v1.LibraryClient;
import com.google.example.library.v1.ShelfName;
import java.util.Arrays;
import java.util.List;

public class FindRelatedBooksPagedCallableCallablePagedOdyssey {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.core.ApiFuture;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.FindRelatedBooksRequest;
   * import com.google.example.library.v1.FindRelatedBooksResponse;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.example.library.v1.ShelfName;
   * import java.util.Arrays;
   * import java.util.List;
   */

  /** Testing calling forms */
  public static void sampleFindRelatedBooks() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName namesElement = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      List<BookName> names = Arrays.asList(namesElement);
      ShelfName shelvesElement = ShelfName.of("[SHELF]");
      List<ShelfName> shelves = Arrays.asList(shelvesElement);
      FindRelatedBooksRequest request = FindRelatedBooksRequest.newBuilder()
        .addAllNames(BookName.toStringList(names))
        .addAllShelves(ShelfName.toStringList(shelves))
        .build();
      ApiFuture<FindRelatedBooksPagedResponse> future = libraryClient.findRelatedBooksPagedCallable().futureCall(request);

      // Do something

      for (BookName responseItem : future.get().iterateAllAsBookName()) {
        BookName book = responseItem;
        System.out.printf("Here's a related book: %s\n", book);
      }
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleFindRelatedBooks();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/FindRelatedBooksRequestPagedOdyssey.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("RequestPaged",  "odyssey")
// sample-metadata:
//   title: The Odyssey
//   description: Testing calling forms
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.FindRelatedBooksRequestPagedOdyssey

package com.google.example.examples.library.v1;

import com.google.example.library.v1.BookName;
import com.google.example.library.v1.FindRelatedBooksRequest;
import com.google.example.library.v1.LibraryClient;
import com.google.example.library.v1.ShelfName;
import java.util.Arrays;
import java.util.List;

public class FindRelatedBooksRequestPagedOdyssey {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.FindRelatedBooksRequest;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.example.library.v1.ShelfName;
   * import java.util.Arrays;
   * import java.util.List;
   */

  /** Testing calling forms */
  public static void sampleFindRelatedBooks() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName namesElement = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      List<BookName> names = Arrays.asList(namesElement);
      ShelfName shelvesElement = ShelfName.of("[SHELF]");
      List<ShelfName> shelves = Arrays.asList(shelvesElement);
      FindRelatedBooksRequest request = FindRelatedBooksRequest.newBuilder()
        .addAllNames(BookName.toStringList(names))
        .addAllShelves(ShelfName.toStringList(shelves))
        .build();
      for (BookName responseItem : libraryClient.findRelatedBooks(request).iterateAllAsBookName()) {
        BookName book = responseItem;
        System.out.printf("Here's a related book: %s\n", book);
      }
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleFindRelatedBooks();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/GetBigBookAsyncLongRunningFlattenedAsyncWap.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("LongRunningFlattenedAsync",  "wap")
// sample-metadata:
//   title: GetBigBook: 'War and Peace'
//   description: Testing calling forms
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.GetBigBookAsyncLongRunningFlattenedAsyncWap [--args='[--shelf "Novel\\\"\`\b\t\n\r"]']

package com.google.example.examples.library.v1;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import com.google.api.gax.longrunning.OperationFuture;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.GetBigBookMetadata;
import com.google.example.library.v1.LibraryClient;
import com.google.protobuf.ListValue;
import java.util.Map;

public class GetBigBookAsyncLongRunningFlattenedAsyncWap {
  // [START hopper]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.gax.longrunning.OperationFuture;
   * import com.google.example.library.v1.Book;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.GetBigBookMetadata;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.protobuf.ListValue;
   * import java.util.Map;
   */

  public static void sampleGetBigBook() {
    // TODO(developer): Replace these variables before running the sample.
    String shelf = "Novel\\\"`\b\t\n\r";
    sampleGetBigBook(shelf);
  }

  /** Testing calling forms */
  public static void sampleGetBigBook(String shelf) {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName name = BookName.ofShelfBookName(shelf, "War and Peace");
      OperationFuture<Book, GetBigBookMetadata> future = libraryClient.getBigBookAsync(name.toString());

      System.out.println("Waiting for operation to complete...");
      Book response = future.get();
      // Testing iterating over map fields when both key and value are specified.
      for (Map.Entry<String, ListValue> entry : response.getMapListValueValueMap().entrySet()) {
        String myKey = entry.getKey();
        ListValue myValue = entry.getValue();
        System.out.printf("key: %s, value: %s\n", myKey, myValue);
      }

      // Testing iterating over map fields when only key is specified.
      for (String anotherKey: response.getMapListValueValueMap().keySet()) {
        System.out.printf("key: %s\n", anotherKey);
      }

      // Testing iterating over map fields when only value is specified.
      for (ListValue anotherValue: response.getMapListValueValueMap().values()) {
        System.out.printf("value: %s\n", anotherValue);
      }

      System.out.printf("name: %s\n", response.getName());
      System.out.printf("author: %s\n", response.getAuthor());
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END hopper]

  public static void main(String[] args) throws Exception {
    Options options = new Options();
    options.addOption(
        Option.builder("")
          .required(false)
          .hasArg(true)
          .longOpt("shelf")
          .build());

    CommandLine cl = (new DefaultParser()).parse(options, args);
    String shelf = cl.getOptionValue("shelf", "Novel\\\"`\b\t\n\r");

    sampleGetBigBook(shelf);
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/GetBigBookAsyncLongRunningFlattenedAsyncWap2.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("LongRunningFlattenedAsync",  "wap2")
// sample-metadata:
//   title: GetBigBook: 'War and Peace'
//   description: Testing resource name overlap
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.GetBigBookAsyncLongRunningFlattenedAsyncWap2 [--args='[--shelf Novel] [--big_book_name "War and Peace"]']

package com.google.example.examples.library.v1;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import com.google.api.gax.longrunning.OperationFuture;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.GetBigBookMetadata;
import com.google.example.library.v1.LibraryClient;

public class GetBigBookAsyncLongRunningFlattenedAsyncWap2 {
  // [START hopper]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.gax.longrunning.OperationFuture;
   * import com.google.example.library.v1.Book;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.GetBigBookMetadata;
   * import com.google.example.library.v1.LibraryClient;
   */

  public static void sampleGetBigBook() {
    // TODO(developer): Replace these variables before running the sample.
    String shelf = "Novel";
    String bigBookName = "War and Peace";
    sampleGetBigBook(shelf, bigBookName);
  }

  /**
   * Testing resource name overlap
   *
   * @param shelf Test word wrapping for long lines. This is a long comment. The name of the shelf to
   * retrieve the big book from.
   * @param bigBookName The name of the book.
   */
  public static void sampleGetBigBook(String shelf, String bigBookName) {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName name = BookName.ofShelfBookName(shelf, bigBookName);
      OperationFuture<Book, GetBigBookMetadata> future = libraryClient.getBigBookAsync(name.toString());

      System.out.println("Waiting for operation to complete...");
      Book response = future.get();
      System.out.println(response);
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END hopper]

  public static void main(String[] args) throws Exception {
    Options options = new Options();
    options.addOption(
        Option.builder("")
          .required(false)
          .hasArg(true)
          .longOpt("shelf")
          .build());
    options.addOption(
        Option.builder("")
          .required(false)
          .hasArg(true)
          .longOpt("big_book_name")
          .build());

    CommandLine cl = (new DefaultParser()).parse(options, args);
    String shelf = cl.getOptionValue("shelf", "Novel");
    String bigBookName = cl.getOptionValue("big_book_name", "War and Peace");

    sampleGetBigBook(shelf, bigBookName);
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/GetBigBookAsyncLongRunningRequestAsyncWap.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("LongRunningRequestAsync",  "wap")
// sample-metadata:
//   title: GetBigBook: 'War and Peace'
//   description: Testing calling forms
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.GetBigBookAsyncLongRunningRequestAsyncWap [--args='[--shelf "Novel\\\"\`\b\t\n\r"]']

package com.google.example.examples.library.v1;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import com.google.api.gax.longrunning.OperationFuture;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.GetBigBookMetadata;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.LibraryClient;
import com.google.protobuf.ListValue;
import java.util.Map;

public class GetBigBookAsyncLongRunningRequestAsyncWap {
  // [START hopper]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.gax.longrunning.OperationFuture;
   * import com.google.example.library.v1.Book;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.GetBigBookMetadata;
   * import com.google.example.library.v1.GetBookRequest;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.protobuf.ListValue;
   * import java.util.Map;
   */

  public static void sampleGetBigBook() {
    // TODO(developer): Replace these variables before running the sample.
    String shelf = "Novel\\\"`\b\t\n\r";
    sampleGetBigBook(shelf);
  }

  /** Testing calling forms */
  public static void sampleGetBigBook(String shelf) {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName name = BookName.ofShelfBookName(shelf, "War and Peace");
      GetBookRequest request = GetBookRequest.newBuilder()
        .setName(name.toString())
        .build();
      OperationFuture<Book, GetBigBookMetadata> future = libraryClient.getBigBookAsync(request);

      System.out.println("Waiting for operation to complete...");
      Book response = future.get();
      // Testing iterating over map fields when both key and value are specified.
      for (Map.Entry<String, ListValue> entry : response.getMapListValueValueMap().entrySet()) {
        String myKey = entry.getKey();
        ListValue myValue = entry.getValue();
        System.out.printf("key: %s, value: %s\n", myKey, myValue);
      }

      // Testing iterating over map fields when only key is specified.
      for (String anotherKey: response.getMapListValueValueMap().keySet()) {
        System.out.printf("key: %s\n", anotherKey);
      }

      // Testing iterating over map fields when only value is specified.
      for (ListValue anotherValue: response.getMapListValueValueMap().values()) {
        System.out.printf("value: %s\n", anotherValue);
      }

      System.out.printf("name: %s\n", response.getName());
      System.out.printf("author: %s\n", response.getAuthor());
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END hopper]

  public static void main(String[] args) throws Exception {
    Options options = new Options();
    options.addOption(
        Option.builder("")
          .required(false)
          .hasArg(true)
          .longOpt("shelf")
          .build());

    CommandLine cl = (new DefaultParser()).parse(options, args);
    String shelf = cl.getOptionValue("shelf", "Novel\\\"`\b\t\n\r");

    sampleGetBigBook(shelf);
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/GetBigBookAsyncLongRunningRequestAsyncWap2.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("LongRunningRequestAsync",  "wap2")
// sample-metadata:
//   title: GetBigBook: 'War and Peace'
//   description: Testing resource name overlap
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.GetBigBookAsyncLongRunningRequestAsyncWap2 [--args='[--shelf Novel] [--big_book_name "War and Peace"]']

package com.google.example.examples.library.v1;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import com.google.api.gax.longrunning.OperationFuture;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.GetBigBookMetadata;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.LibraryClient;

public class GetBigBookAsyncLongRunningRequestAsyncWap2 {
  // [START hopper]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.gax.longrunning.OperationFuture;
   * import com.google.example.library.v1.Book;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.GetBigBookMetadata;
   * import com.google.example.library.v1.GetBookRequest;
   * import com.google.example.library.v1.LibraryClient;
   */

  public static void sampleGetBigBook() {
    // TODO(developer): Replace these variables before running the sample.
    String shelf = "Novel";
    String bigBookName = "War and Peace";
    sampleGetBigBook(shelf, bigBookName);
  }

  /**
   * Testing resource name overlap
   *
   * @param shelf Test word wrapping for long lines. This is a long comment. The name of the shelf to
   * retrieve the big book from.
   * @param bigBookName The name of the book.
   */
  public static void sampleGetBigBook(String shelf, String bigBookName) {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName name = BookName.ofShelfBookName(shelf, bigBookName);
      GetBookRequest request = GetBookRequest.newBuilder()
        .setName(name.toString())
        .build();
      OperationFuture<Book, GetBigBookMetadata> future = libraryClient.getBigBookAsync(request);

      System.out.println("Waiting for operation to complete...");
      Book response = future.get();
      System.out.println(response);
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END hopper]

  public static void main(String[] args) throws Exception {
    Options options = new Options();
    options.addOption(
        Option.builder("")
          .required(false)
          .hasArg(true)
          .longOpt("shelf")
          .build());
    options.addOption(
        Option.builder("")
          .required(false)
          .hasArg(true)
          .longOpt("big_book_name")
          .build());

    CommandLine cl = (new DefaultParser()).parse(options, args);
    String shelf = cl.getOptionValue("shelf", "Novel");
    String bigBookName = cl.getOptionValue("big_book_name", "War and Peace");

    sampleGetBigBook(shelf, bigBookName);
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/GetBigBookCallableCallableWap.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Callable",  "wap")
// sample-metadata:
//   title: GetBigBook: 'War and Peace'
//   description: Testing calling forms
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.GetBigBookCallableCallableWap [--args='[--shelf "Novel\\\"\`\b\t\n\r"]']

package com.google.example.examples.library.v1;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import com.google.api.core.ApiFuture;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.LibraryClient;
import com.google.longrunning.Operation;
import com.google.protobuf.ListValue;
import java.util.Map;

public class GetBigBookCallableCallableWap {
  // [START hopper]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.core.ApiFuture;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.GetBookRequest;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.longrunning.Operation;
   * import com.google.protobuf.ListValue;
   * import java.util.Map;
   */

  public static void sampleGetBigBook() {
    // TODO(developer): Replace these variables before running the sample.
    String shelf = "Novel\\\"`\b\t\n\r";
    sampleGetBigBook(shelf);
  }

  /** Testing calling forms */
  public static void sampleGetBigBook(String shelf) {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName name = BookName.ofShelfBookName(shelf, "War and Peace");
      GetBookRequest request = GetBookRequest.newBuilder()
        .setName(name.toString())
        .build();
      ApiFuture<Operation> future = libraryClient.getBigBookCallable().futureCall(request);

      // Do something

      Operation response = future.get();
      // Testing iterating over map fields when both key and value are specified.
      for (Map.Entry<String, ListValue> entry : response.getMapListValueValueMap().entrySet()) {
        String myKey = entry.getKey();
        ListValue myValue = entry.getValue();
        System.out.printf("key: %s, value: %s\n", myKey, myValue);
      }

      // Testing iterating over map fields when only key is specified.
      for (String anotherKey: response.getMapListValueValueMap().keySet()) {
        System.out.printf("key: %s\n", anotherKey);
      }

      // Testing iterating over map fields when only value is specified.
      for (ListValue anotherValue: response.getMapListValueValueMap().values()) {
        System.out.printf("value: %s\n", anotherValue);
      }

      System.out.printf("name: %s\n", response.getName());
      System.out.printf("author: %s\n", response.getAuthor());
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END hopper]

  public static void main(String[] args) throws Exception {
    Options options = new Options();
    options.addOption(
        Option.builder("")
          .required(false)
          .hasArg(true)
          .longOpt("shelf")
          .build());

    CommandLine cl = (new DefaultParser()).parse(options, args);
    String shelf = cl.getOptionValue("shelf", "Novel\\\"`\b\t\n\r");

    sampleGetBigBook(shelf);
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/GetBigBookCallableCallableWap2.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Callable",  "wap2")
// sample-metadata:
//   title: GetBigBook: 'War and Peace'
//   description: Testing resource name overlap
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.GetBigBookCallableCallableWap2 [--args='[--shelf Novel] [--big_book_name "War and Peace"]']

package com.google.example.examples.library.v1;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import com.google.api.core.ApiFuture;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.LibraryClient;
import com.google.longrunning.Operation;

public class GetBigBookCallableCallableWap2 {
  // [START hopper]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.core.ApiFuture;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.GetBookRequest;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.longrunning.Operation;
   */

  public static void sampleGetBigBook() {
    // TODO(developer): Replace these variables before running the sample.
    String shelf = "Novel";
    String bigBookName = "War and Peace";
    sampleGetBigBook(shelf, bigBookName);
  }

  /**
   * Testing resource name overlap
   *
   * @param shelf Test word wrapping for long lines. This is a long comment. The name of the shelf to
   * retrieve the big book from.
   * @param bigBookName The name of the book.
   */
  public static void sampleGetBigBook(String shelf, String bigBookName) {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName name = BookName.ofShelfBookName(shelf, bigBookName);
      GetBookRequest request = GetBookRequest.newBuilder()
        .setName(name.toString())
        .build();
      ApiFuture<Operation> future = libraryClient.getBigBookCallable().futureCall(request);

      // Do something

      Operation response = future.get();
      System.out.println(response);
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END hopper]

  public static void main(String[] args) throws Exception {
    Options options = new Options();
    options.addOption(
        Option.builder("")
          .required(false)
          .hasArg(true)
          .longOpt("shelf")
          .build());
    options.addOption(
        Option.builder("")
          .required(false)
          .hasArg(true)
          .longOpt("big_book_name")
          .build());

    CommandLine cl = (new DefaultParser()).parse(options, args);
    String shelf = cl.getOptionValue("shelf", "Novel");
    String bigBookName = cl.getOptionValue("big_book_name", "War and Peace");

    sampleGetBigBook(shelf, bigBookName);
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/GetBigBookOperationCallableLongRunningCallableWap.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("LongRunningCallable",  "wap")
// sample-metadata:
//   title: GetBigBook: 'War and Peace'
//   description: Testing calling forms
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.GetBigBookOperationCallableLongRunningCallableWap [--args='[--shelf "Novel\\\"\`\b\t\n\r"]']

package com.google.example.examples.library.v1;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import com.google.api.gax.longrunning.OperationFuture;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.GetBigBookMetadata;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.LibraryClient;
import com.google.protobuf.ListValue;
import java.util.Map;

public class GetBigBookOperationCallableLongRunningCallableWap {
  // [START hopper]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.gax.longrunning.OperationFuture;
   * import com.google.example.library.v1.Book;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.GetBigBookMetadata;
   * import com.google.example.library.v1.GetBookRequest;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.protobuf.ListValue;
   * import java.util.Map;
   */

  public static void sampleGetBigBook() {
    // TODO(developer): Replace these variables before running the sample.
    String shelf = "Novel\\\"`\b\t\n\r";
    sampleGetBigBook(shelf);
  }

  /** Testing calling forms */
  public static void sampleGetBigBook(String shelf) {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName name = BookName.ofShelfBookName(shelf, "War and Peace");
      GetBookRequest request = GetBookRequest.newBuilder()
        .setName(name.toString())
        .build();
      OperationFuture<Book, GetBigBookMetadata> future = libraryClient.getBigBookOperationCallable().futureCall(request);

      // Do something

      Book response = future.get();
      // Testing iterating over map fields when both key and value are specified.
      for (Map.Entry<String, ListValue> entry : response.getMapListValueValueMap().entrySet()) {
        String myKey = entry.getKey();
        ListValue myValue = entry.getValue();
        System.out.printf("key: %s, value: %s\n", myKey, myValue);
      }

      // Testing iterating over map fields when only key is specified.
      for (String anotherKey: response.getMapListValueValueMap().keySet()) {
        System.out.printf("key: %s\n", anotherKey);
      }

      // Testing iterating over map fields when only value is specified.
      for (ListValue anotherValue: response.getMapListValueValueMap().values()) {
        System.out.printf("value: %s\n", anotherValue);
      }

      System.out.printf("name: %s\n", response.getName());
      System.out.printf("author: %s\n", response.getAuthor());
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END hopper]

  public static void main(String[] args) throws Exception {
    Options options = new Options();
    options.addOption(
        Option.builder("")
          .required(false)
          .hasArg(true)
          .longOpt("shelf")
          .build());

    CommandLine cl = (new DefaultParser()).parse(options, args);
    String shelf = cl.getOptionValue("shelf", "Novel\\\"`\b\t\n\r");

    sampleGetBigBook(shelf);
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/GetBigBookOperationCallableLongRunningCallableWap2.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("LongRunningCallable",  "wap2")
// sample-metadata:
//   title: GetBigBook: 'War and Peace'
//   description: Testing resource name overlap
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.GetBigBookOperationCallableLongRunningCallableWap2 [--args='[--shelf Novel] [--big_book_name "War and Peace"]']

package com.google.example.examples.library.v1;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import com.google.api.gax.longrunning.OperationFuture;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.GetBigBookMetadata;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.LibraryClient;

public class GetBigBookOperationCallableLongRunningCallableWap2 {
  // [START hopper]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.gax.longrunning.OperationFuture;
   * import com.google.example.library.v1.Book;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.GetBigBookMetadata;
   * import com.google.example.library.v1.GetBookRequest;
   * import com.google.example.library.v1.LibraryClient;
   */

  public static void sampleGetBigBook() {
    // TODO(developer): Replace these variables before running the sample.
    String shelf = "Novel";
    String bigBookName = "War and Peace";
    sampleGetBigBook(shelf, bigBookName);
  }

  /**
   * Testing resource name overlap
   *
   * @param shelf Test word wrapping for long lines. This is a long comment. The name of the shelf to
   * retrieve the big book from.
   * @param bigBookName The name of the book.
   */
  public static void sampleGetBigBook(String shelf, String bigBookName) {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName name = BookName.ofShelfBookName(shelf, bigBookName);
      GetBookRequest request = GetBookRequest.newBuilder()
        .setName(name.toString())
        .build();
      OperationFuture<Book, GetBigBookMetadata> future = libraryClient.getBigBookOperationCallable().futureCall(request);

      // Do something

      Book response = future.get();
      System.out.println(response);
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END hopper]

  public static void main(String[] args) throws Exception {
    Options options = new Options();
    options.addOption(
        Option.builder("")
          .required(false)
          .hasArg(true)
          .longOpt("shelf")
          .build());
    options.addOption(
        Option.builder("")
          .required(false)
          .hasArg(true)
          .longOpt("big_book_name")
          .build());

    CommandLine cl = (new DefaultParser()).parse(options, args);
    String shelf = cl.getOptionValue("shelf", "Novel");
    String bigBookName = cl.getOptionValue("big_book_name", "War and Peace");

    sampleGetBigBook(shelf, bigBookName);
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/GetBigNothingAsyncLongRunningFlattenedAsyncEmptyResponseTypeWithResponseHandling.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("LongRunningFlattenedAsync",  "empty_response_type_with_response_handling")
// sample-metadata:
//   title: Test response handling for methods that return empty
//   description: Test response handling for methods that return empty
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.GetBigNothingAsyncLongRunningFlattenedAsyncEmptyResponseTypeWithResponseHandling

package com.google.example.examples.library.v1;

import com.google.api.gax.longrunning.OperationFuture;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.GetBigBookMetadata;
import com.google.example.library.v1.LibraryClient;
import com.google.protobuf.Empty;

public class GetBigNothingAsyncLongRunningFlattenedAsyncEmptyResponseTypeWithResponseHandling {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.gax.longrunning.OperationFuture;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.GetBigBookMetadata;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.protobuf.Empty;
   */

  /** Test response handling for methods that return empty */
  public static void sampleGetBigNothing() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      OperationFuture<Empty, GetBigBookMetadata> future = libraryClient.getBigNothingAsync(name.toString());

      System.out.println("Waiting for operation to complete...");
      future.get();
      // Got nothing
      System.out.println("Got nothing.");
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleGetBigNothing();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/GetBigNothingAsyncLongRunningFlattenedAsyncEmptyResponseTypeWithoutResponseHandling.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("LongRunningFlattenedAsync",  "empty_response_type_without_response_handling")
// sample-metadata:
//   title: Test default response handling is turned off for methods that return empty
//   description: Test default response handling is turned off for methods that return empty
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.GetBigNothingAsyncLongRunningFlattenedAsyncEmptyResponseTypeWithoutResponseHandling

package com.google.example.examples.library.v1;

import com.google.api.gax.longrunning.OperationFuture;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.GetBigBookMetadata;
import com.google.example.library.v1.LibraryClient;
import com.google.protobuf.Empty;

public class GetBigNothingAsyncLongRunningFlattenedAsyncEmptyResponseTypeWithoutResponseHandling {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.gax.longrunning.OperationFuture;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.GetBigBookMetadata;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.protobuf.Empty;
   */

  /** Test default response handling is turned off for methods that return empty */
  public static void sampleGetBigNothing() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      OperationFuture<Empty, GetBigBookMetadata> future = libraryClient.getBigNothingAsync(name.toString());

      System.out.println("Waiting for operation to complete...");
      future.get();
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleGetBigNothing();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/GetBigNothingAsyncLongRunningRequestAsyncEmptyResponseTypeWithResponseHandling.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("LongRunningRequestAsync",  "empty_response_type_with_response_handling")
// sample-metadata:
//   title: Test response handling for methods that return empty
//   description: Test response handling for methods that return empty
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.GetBigNothingAsyncLongRunningRequestAsyncEmptyResponseTypeWithResponseHandling

package com.google.example.examples.library.v1;

import com.google.api.gax.longrunning.OperationFuture;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.GetBigBookMetadata;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.LibraryClient;
import com.google.protobuf.Empty;

public class GetBigNothingAsyncLongRunningRequestAsyncEmptyResponseTypeWithResponseHandling {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.gax.longrunning.OperationFuture;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.GetBigBookMetadata;
   * import com.google.example.library.v1.GetBookRequest;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.protobuf.Empty;
   */

  /** Test response handling for methods that return empty */
  public static void sampleGetBigNothing() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      GetBookRequest request = GetBookRequest.newBuilder()
        .setName(name.toString())
        .build();
      OperationFuture<Empty, GetBigBookMetadata> future = libraryClient.getBigNothingAsync(request);

      System.out.println("Waiting for operation to complete...");
      future.get();
      // Got nothing
      System.out.println("Got nothing.");
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleGetBigNothing();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/GetBigNothingAsyncLongRunningRequestAsyncEmptyResponseTypeWithoutResponseHandling.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("LongRunningRequestAsync",  "empty_response_type_without_response_handling")
// sample-metadata:
//   title: Test default response handling is turned off for methods that return empty
//   description: Test default response handling is turned off for methods that return empty
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.GetBigNothingAsyncLongRunningRequestAsyncEmptyResponseTypeWithoutResponseHandling

package com.google.example.examples.library.v1;

import com.google.api.gax.longrunning.OperationFuture;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.GetBigBookMetadata;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.LibraryClient;
import com.google.protobuf.Empty;

public class GetBigNothingAsyncLongRunningRequestAsyncEmptyResponseTypeWithoutResponseHandling {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.gax.longrunning.OperationFuture;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.GetBigBookMetadata;
   * import com.google.example.library.v1.GetBookRequest;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.protobuf.Empty;
   */

  /** Test default response handling is turned off for methods that return empty */
  public static void sampleGetBigNothing() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      GetBookRequest request = GetBookRequest.newBuilder()
        .setName(name.toString())
        .build();
      OperationFuture<Empty, GetBigBookMetadata> future = libraryClient.getBigNothingAsync(request);

      System.out.println("Waiting for operation to complete...");
      future.get();
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleGetBigNothing();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/GetBigNothingCallableCallableEmptyResponseTypeWithResponseHandling.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Callable",  "empty_response_type_with_response_handling")
// sample-metadata:
//   title: Test response handling for methods that return empty
//   description: Test response handling for methods that return empty
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.GetBigNothingCallableCallableEmptyResponseTypeWithResponseHandling

package com.google.example.examples.library.v1;

import com.google.api.core.ApiFuture;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.LibraryClient;
import com.google.longrunning.Operation;

public class GetBigNothingCallableCallableEmptyResponseTypeWithResponseHandling {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.core.ApiFuture;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.GetBookRequest;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.longrunning.Operation;
   */

  /** Test response handling for methods that return empty */
  public static void sampleGetBigNothing() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      GetBookRequest request = GetBookRequest.newBuilder()
        .setName(name.toString())
        .build();
      ApiFuture<Operation> future = libraryClient.getBigNothingCallable().futureCall(request);

      // Do something

      future.get();
      // Got nothing
      System.out.println("Got nothing.");
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleGetBigNothing();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/GetBigNothingCallableCallableEmptyResponseTypeWithoutResponseHandling.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Callable",  "empty_response_type_without_response_handling")
// sample-metadata:
//   title: Test default response handling is turned off for methods that return empty
//   description: Test default response handling is turned off for methods that return empty
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.GetBigNothingCallableCallableEmptyResponseTypeWithoutResponseHandling

package com.google.example.examples.library.v1;

import com.google.api.core.ApiFuture;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.LibraryClient;
import com.google.longrunning.Operation;

public class GetBigNothingCallableCallableEmptyResponseTypeWithoutResponseHandling {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.core.ApiFuture;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.GetBookRequest;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.longrunning.Operation;
   */

  /** Test default response handling is turned off for methods that return empty */
  public static void sampleGetBigNothing() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      GetBookRequest request = GetBookRequest.newBuilder()
        .setName(name.toString())
        .build();
      ApiFuture<Operation> future = libraryClient.getBigNothingCallable().futureCall(request);

      // Do something

      future.get();
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleGetBigNothing();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/GetBigNothingOperationCallableLongRunningCallableEmptyResponseTypeWithResponseHandling.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("LongRunningCallable",  "empty_response_type_with_response_handling")
// sample-metadata:
//   title: Test response handling for methods that return empty
//   description: Test response handling for methods that return empty
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.GetBigNothingOperationCallableLongRunningCallableEmptyResponseTypeWithResponseHandling

package com.google.example.examples.library.v1;

import com.google.api.gax.longrunning.OperationFuture;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.GetBigBookMetadata;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.LibraryClient;
import com.google.protobuf.Empty;

public class GetBigNothingOperationCallableLongRunningCallableEmptyResponseTypeWithResponseHandling {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.gax.longrunning.OperationFuture;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.GetBigBookMetadata;
   * import com.google.example.library.v1.GetBookRequest;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.protobuf.Empty;
   */

  /** Test response handling for methods that return empty */
  public static void sampleGetBigNothing() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      GetBookRequest request = GetBookRequest.newBuilder()
        .setName(name.toString())
        .build();
      OperationFuture<Empty, GetBigBookMetadata> future = libraryClient.getBigNothingOperationCallable().futureCall(request);

      // Do something

      future.get();
      // Got nothing
      System.out.println("Got nothing.");
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleGetBigNothing();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/GetBigNothingOperationCallableLongRunningCallableEmptyResponseTypeWithoutResponseHandling.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("LongRunningCallable",  "empty_response_type_without_response_handling")
// sample-metadata:
//   title: Test default response handling is turned off for methods that return empty
//   description: Test default response handling is turned off for methods that return empty
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.GetBigNothingOperationCallableLongRunningCallableEmptyResponseTypeWithoutResponseHandling

package com.google.example.examples.library.v1;

import com.google.api.gax.longrunning.OperationFuture;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.GetBigBookMetadata;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.LibraryClient;
import com.google.protobuf.Empty;

public class GetBigNothingOperationCallableLongRunningCallableEmptyResponseTypeWithoutResponseHandling {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.gax.longrunning.OperationFuture;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.GetBigBookMetadata;
   * import com.google.example.library.v1.GetBookRequest;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.protobuf.Empty;
   */

  /** Test default response handling is turned off for methods that return empty */
  public static void sampleGetBigNothing() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      GetBookRequest request = GetBookRequest.newBuilder()
        .setName(name.toString())
        .build();
      OperationFuture<Empty, GetBigBookMetadata> future = libraryClient.getBigNothingOperationCallable().futureCall(request);

      // Do something

      future.get();

    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleGetBigNothing();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/GetBookCallableCallableTestOnSuccessMap.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Callable",  "test_on_success_map")
// sample-metadata:
//   title: test maps in response handling
//   description: When there is a very long description for a sample file we can split
//     the description into multiple lines and the samples will be just fine
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.GetBookCallableCallableTestOnSuccessMap

package com.google.example.examples.library.v1;

import com.google.api.core.ApiFuture;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.LibraryClient;

public class GetBookCallableCallableTestOnSuccessMap {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.core.ApiFuture;
   * import com.google.example.library.v1.Book;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.GetBookRequest;
   * import com.google.example.library.v1.LibraryClient;
   */

  public static void sampleGetBook() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      GetBookRequest request = GetBookRequest.newBuilder()
        .setName(name.toString())
        .build();
      ApiFuture<Book> future = libraryClient.getBookCallable().futureCall(request);

      // Do something

      Book response = future.get();
      String intKeyVal = response.getMapStringValueMap().get(123);
      String booleanKeyVal = response.getMapBoolKeyMap().get(true);
      int mapValueField = response.getMapMessageValueMap().get("key").getField();
      System.out.printf("Test printing map fields: %s\n", response.getMapListValueValueMap().get("quoted_key"));
      System.out.printf("Test printing enum fields of a map value: %s\n", response.getMapMessageValueMap().get("key").getAlignment());
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleGetBook();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/GetBookFlattenedTestOnSuccessMap.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Flattened",  "test_on_success_map")
// sample-metadata:
//   title: test maps in response handling
//   description: When there is a very long description for a sample file we can split
//     the description into multiple lines and the samples will be just fine
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.GetBookFlattenedTestOnSuccessMap

package com.google.example.examples.library.v1;

import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.LibraryClient;

public class GetBookFlattenedTestOnSuccessMap {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.example.library.v1.Book;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.LibraryClient;
   */

  public static void sampleGetBook() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      Book response = libraryClient.getBook(name.toString());
      String intKeyVal = response.getMapStringValueMap().get(123);
      String booleanKeyVal = response.getMapBoolKeyMap().get(true);
      int mapValueField = response.getMapMessageValueMap().get("key").getField();
      System.out.printf("Test printing map fields: %s\n", response.getMapListValueValueMap().get("quoted_key"));
      System.out.printf("Test printing enum fields of a map value: %s\n", response.getMapMessageValueMap().get("key").getAlignment());
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleGetBook();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/GetBookRequestTestOnSuccessMap.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Request",  "test_on_success_map")
// sample-metadata:
//   title: test maps in response handling
//   description: When there is a very long description for a sample file we can split
//     the description into multiple lines and the samples will be just fine
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.GetBookRequestTestOnSuccessMap

package com.google.example.examples.library.v1;

import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.LibraryClient;

public class GetBookRequestTestOnSuccessMap {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.example.library.v1.Book;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.GetBookRequest;
   * import com.google.example.library.v1.LibraryClient;
   */

  public static void sampleGetBook() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      GetBookRequest request = GetBookRequest.newBuilder()
        .setName(name.toString())
        .build();
      Book response = libraryClient.getBook(request);
      String intKeyVal = response.getMapStringValueMap().get(123);
      String booleanKeyVal = response.getMapBoolKeyMap().get(true);
      int mapValueField = response.getMapMessageValueMap().get("key").getField();
      System.out.printf("Test printing map fields: %s\n", response.getMapListValueValueMap().get("quoted_key"));
      System.out.printf("Test printing enum fields of a map value: %s\n", response.getMapMessageValueMap().get("key").getAlignment());
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleGetBook();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/MonologAboutBookCallableCallableStreamingClientProg.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("CallableStreamingClient",  "prog")
// sample-metadata:
//   title: Programming Books
//   description: Testing calling forms
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.MonologAboutBookCallableCallableStreamingClientProg

package com.google.example.examples.library.v1;

import com.google.api.gax.rpc.ApiStreamObserver;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.Comment;
import com.google.example.library.v1.DiscussBookRequest;
import com.google.example.library.v1.LibraryClient;

public class MonologAboutBookCallableCallableStreamingClientProg {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.gax.rpc.ApiStreamObserver;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.Comment;
   * import com.google.example.library.v1.DiscussBookRequest;
   * import com.google.example.library.v1.LibraryClient;
   */

  /** Testing calling forms */
  public static void sampleMonologAboutBook() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      ApiStreamObserver<Comment> responseObserver =
          new ApiStreamObserver<Comment>() {
            @Override
            public void onNext(Comment response) {
              System.out.printf("The stage of the comment is: %s\n", response.getStage());
            }

            @Override
            public void onError(Throwable t) {
              // Add error-handling
            }

            @Override
            public void onCompleted() {
              // Do something when complete.
            }
          };
      ApiStreamObserver<DiscussBookRequest> requestObserver =
          libraryClient.monologAboutBookCallable().clientStreamingCall(responseObserver);

      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      DiscussBookRequest request = DiscussBookRequest.newBuilder()
        .setName(name.toString())
        .build();
      requestObserver.onNext(request);
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleMonologAboutBook();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/PublishSeriesCallableCallablePiVersion.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Callable",  "pi_version")
// sample-metadata:
//   title: Pi version
//   description: Testing <@calling forms>
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.PublishSeriesCallableCallablePiVersion [--args='[--shelf_name Math] [--edition 123]']

package com.google.example.examples.library.v1;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import com.google.api.core.ApiFuture;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.LibraryClient;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.SeriesUuid;
import com.google.example.library.v1.Shelf;
import java.util.ArrayList;
import java.util.List;

public class PublishSeriesCallableCallablePiVersion {
  // [START canonical]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.core.ApiFuture;
   * import com.google.example.library.v1.Book;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.example.library.v1.PublishSeriesRequest;
   * import com.google.example.library.v1.PublishSeriesResponse;
   * import com.google.example.library.v1.SeriesUuid;
   * import com.google.example.library.v1.Shelf;
   * import java.util.ArrayList;
   * import java.util.List;
   */

  public static void samplePublishSeries() {
    // TODO(developer): Replace these variables before running the sample.
    String shelfName = "Math";
    int edition = 123;
    samplePublishSeries(shelfName, edition);
  }

  /**
   * Testing &lt;{@literal @}calling forms&gt;
   *
   * @param shelfName The name of the shelf where books are published to.
   * @param edition The edition of the series.
   */
  public static void samplePublishSeries(String shelfName, int edition) {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      Shelf shelf = Shelf.newBuilder()
        .setName(shelfName)
        .build();
      List<Book> books = new ArrayList<>();
      String seriesString = "xyz3141592654";
      SeriesUuid seriesUuid = SeriesUuid.newBuilder()
        .setSeriesString(seriesString)
        .build();
      PublishSeriesRequest request = PublishSeriesRequest.newBuilder()
        .setShelf(shelf)
        .addAllBooks(books)
        .setSeriesUuid(seriesUuid)
        .setEdition(edition)
        .build();
      ApiFuture<PublishSeriesResponse> future = libraryClient.publishSeriesCallable().futureCall(request);

      // Do something

      PublishSeriesResponse response = future.get();
      // % % % output handling % % % %
      // fourScoreAndSevenYears ago
      //
      // our fathers brought forth upon this continent
      // a new nation
      // conceived in liberty
      //
      // and dedicated to the proposition that allMenAreCreatedEqual.
      // Do something with bookNames one by one
      List<String> bookNames = response.getBookNamesList();
      for (String title : response.getBookNamesList()) {
        // Now we deal with thisSingleBook!
        System.out.printf("\t%%`` The book's title: \"%s\", \\\nand the book costs $50.00 ``%%\n", title);
      }
      System.out.printf("The first book is: %s\n", response.getBookNamesList().get(0));
      System.out.printf("The author of the first book is: %s\n", response.getBooksList().get(0).getAuthor());
      System.out.println("That's all!");
      System.out.printf("series_uuid: %s\n", response.getSeriesUuid().getSeriesBytes());
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END canonical]

  public static void main(String[] args) throws Exception {
    Options options = new Options();
    options.addOption(
        Option.builder("")
          .required(false)
          .hasArg(true)
          .longOpt("shelf_name")
          .build());
    options.addOption(
        Option.builder("")
          .required(false)
          .hasArg(true)
          .longOpt("edition")
          .build());

    CommandLine cl = (new DefaultParser()).parse(options, args);
    String shelfName = cl.getOptionValue("shelf_name", "Math");
    int edition =
        cl.getOptionValue("edition") != null
            ? Integer.parseInt(cl.getOptionValue("edition"))
            : 123;

    samplePublishSeries(shelfName, edition);
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/PublishSeriesCallableCallableSecondEdition.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Callable",  "second_edition")
// sample-metadata:
//   title: Second edition
//   description: Testing calling forms
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.PublishSeriesCallableCallableSecondEdition

package com.google.example.examples.library.v1;

import com.google.api.core.ApiFuture;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.LibraryClient;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.SeriesUuid;
import com.google.example.library.v1.Shelf;
import java.util.ArrayList;
import java.util.List;

public class PublishSeriesCallableCallableSecondEdition {
  // [START canonical]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.core.ApiFuture;
   * import com.google.example.library.v1.Book;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.example.library.v1.PublishSeriesRequest;
   * import com.google.example.library.v1.PublishSeriesResponse;
   * import com.google.example.library.v1.SeriesUuid;
   * import com.google.example.library.v1.Shelf;
   * import java.util.ArrayList;
   * import java.util.List;
   */

  /** Testing calling forms */
  public static void samplePublishSeries() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      Shelf shelf = Shelf.newBuilder().build();
      List<Book> books = new ArrayList<>();
      SeriesUuid seriesUuid = SeriesUuid.newBuilder().build();
      int edition = 2;
      PublishSeriesRequest request = PublishSeriesRequest.newBuilder()
        .setShelf(shelf)
        .addAllBooks(books)
        .setSeriesUuid(seriesUuid)
        .setEdition(edition)
        .build();
      ApiFuture<PublishSeriesResponse> future = libraryClient.publishSeriesCallable().futureCall(request);

      // Do something

      PublishSeriesResponse response = future.get();
      System.out.println(response);
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END canonical]

  public static void main(String[] args) {
    samplePublishSeries();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/PublishSeriesFlattenedPiVersion.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Flattened",  "pi_version")
// sample-metadata:
//   title: Pi version
//   description: Testing <@calling forms>
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.PublishSeriesFlattenedPiVersion [--args='[--shelf_name Math] [--edition 123]']

package com.google.example.examples.library.v1;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.LibraryClient;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.PublisherName;
import com.google.example.library.v1.SeriesUuid;
import com.google.example.library.v1.Shelf;
import java.util.ArrayList;
import java.util.List;

public class PublishSeriesFlattenedPiVersion {
  // [START canonical]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.example.library.v1.Book;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.example.library.v1.PublishSeriesResponse;
   * import com.google.example.library.v1.PublisherName;
   * import com.google.example.library.v1.SeriesUuid;
   * import com.google.example.library.v1.Shelf;
   * import java.util.ArrayList;
   * import java.util.List;
   */

  public static void samplePublishSeries() {
    // TODO(developer): Replace these variables before running the sample.
    String shelfName = "Math";
    int edition = 123;
    samplePublishSeries(shelfName, edition);
  }

  /**
   * Testing &lt;{@literal @}calling forms&gt;
   *
   * @param shelfName The name of the shelf where books are published to.
   * @param edition The edition of the series.
   */
  public static void samplePublishSeries(String shelfName, int edition) {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      Shelf shelf = Shelf.newBuilder()
        .setName(shelfName)
        .build();
      List<Book> books = new ArrayList<>();
      String seriesString = "xyz3141592654";
      SeriesUuid seriesUuid = SeriesUuid.newBuilder()
        .setSeriesString(seriesString)
        .build();
      PublisherName publisher = PublisherName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");
      PublishSeriesResponse response = libraryClient.publishSeries(shelf, books, edition, seriesUuid, publisher.toString());
      // % % % output handling % % % %
      // fourScoreAndSevenYears ago
      //
      // our fathers brought forth upon this continent
      // a new nation
      // conceived in liberty
      //
      // and dedicated to the proposition that allMenAreCreatedEqual.
      // Do something with bookNames one by one
      List<String> bookNames = response.getBookNamesList();
      for (String title : response.getBookNamesList()) {
        // Now we deal with thisSingleBook!
        System.out.printf("\t%%`` The book's title: \"%s\", \\\nand the book costs $50.00 ``%%\n", title);
      }
      System.out.printf("The first book is: %s\n", response.getBookNamesList().get(0));
      System.out.printf("The author of the first book is: %s\n", response.getBooksList().get(0).getAuthor());
      System.out.println("That's all!");
      System.out.printf("series_uuid: %s\n", response.getSeriesUuid().getSeriesBytes());
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END canonical]

  public static void main(String[] args) throws Exception {
    Options options = new Options();
    options.addOption(
        Option.builder("")
          .required(false)
          .hasArg(true)
          .longOpt("shelf_name")
          .build());
    options.addOption(
        Option.builder("")
          .required(false)
          .hasArg(true)
          .longOpt("edition")
          .build());

    CommandLine cl = (new DefaultParser()).parse(options, args);
    String shelfName = cl.getOptionValue("shelf_name", "Math");
    int edition =
        cl.getOptionValue("edition") != null
            ? Integer.parseInt(cl.getOptionValue("edition"))
            : 123;

    samplePublishSeries(shelfName, edition);
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/PublishSeriesFlattenedSecondEdition.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Flattened",  "second_edition")
// sample-metadata:
//   title: Second edition
//   description: Testing calling forms
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.PublishSeriesFlattenedSecondEdition

package com.google.example.examples.library.v1;

import com.google.example.library.v1.Book;
import com.google.example.library.v1.LibraryClient;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.PublisherName;
import com.google.example.library.v1.SeriesUuid;
import com.google.example.library.v1.Shelf;
import java.util.ArrayList;
import java.util.List;

public class PublishSeriesFlattenedSecondEdition {
  // [START canonical]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.example.library.v1.Book;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.example.library.v1.PublishSeriesResponse;
   * import com.google.example.library.v1.PublisherName;
   * import com.google.example.library.v1.SeriesUuid;
   * import com.google.example.library.v1.Shelf;
   * import java.util.ArrayList;
   * import java.util.List;
   */

  /** Testing calling forms */
  public static void samplePublishSeries() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      Shelf shelf = Shelf.newBuilder().build();
      List<Book> books = new ArrayList<>();
      int edition = 2;
      SeriesUuid seriesUuid = SeriesUuid.newBuilder().build();
      PublisherName publisher = PublisherName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");
      PublishSeriesResponse response = libraryClient.publishSeries(shelf, books, edition, seriesUuid, publisher.toString());
      System.out.println(response);
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END canonical]

  public static void main(String[] args) {
    samplePublishSeries();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/PublishSeriesRequestPiVersion.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Request",  "pi_version")
// sample-metadata:
//   title: Pi version
//   description: Testing <@calling forms>
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.PublishSeriesRequestPiVersion [--args='[--shelf_name Math] [--edition 123]']

package com.google.example.examples.library.v1;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.LibraryClient;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.SeriesUuid;
import com.google.example.library.v1.Shelf;
import java.util.ArrayList;
import java.util.List;

public class PublishSeriesRequestPiVersion {
  // [START canonical]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.example.library.v1.Book;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.example.library.v1.PublishSeriesRequest;
   * import com.google.example.library.v1.PublishSeriesResponse;
   * import com.google.example.library.v1.SeriesUuid;
   * import com.google.example.library.v1.Shelf;
   * import java.util.ArrayList;
   * import java.util.List;
   */

  public static void samplePublishSeries() {
    // TODO(developer): Replace these variables before running the sample.
    String shelfName = "Math";
    int edition = 123;
    samplePublishSeries(shelfName, edition);
  }

  /**
   * Testing &lt;{@literal @}calling forms&gt;
   *
   * @param shelfName The name of the shelf where books are published to.
   * @param edition The edition of the series.
   */
  public static void samplePublishSeries(String shelfName, int edition) {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      Shelf shelf = Shelf.newBuilder()
        .setName(shelfName)
        .build();
      List<Book> books = new ArrayList<>();
      String seriesString = "xyz3141592654";
      SeriesUuid seriesUuid = SeriesUuid.newBuilder()
        .setSeriesString(seriesString)
        .build();
      PublishSeriesRequest request = PublishSeriesRequest.newBuilder()
        .setShelf(shelf)
        .addAllBooks(books)
        .setSeriesUuid(seriesUuid)
        .setEdition(edition)
        .build();
      PublishSeriesResponse response = libraryClient.publishSeries(request);
      // % % % output handling % % % %
      // fourScoreAndSevenYears ago
      //
      // our fathers brought forth upon this continent
      // a new nation
      // conceived in liberty
      //
      // and dedicated to the proposition that allMenAreCreatedEqual.
      // Do something with bookNames one by one
      List<String> bookNames = response.getBookNamesList();
      for (String title : response.getBookNamesList()) {
        // Now we deal with thisSingleBook!
        System.out.printf("\t%%`` The book's title: \"%s\", \\\nand the book costs $50.00 ``%%\n", title);
      }
      System.out.printf("The first book is: %s\n", response.getBookNamesList().get(0));
      System.out.printf("The author of the first book is: %s\n", response.getBooksList().get(0).getAuthor());
      System.out.println("That's all!");
      System.out.printf("series_uuid: %s\n", response.getSeriesUuid().getSeriesBytes());
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END canonical]

  public static void main(String[] args) throws Exception {
    Options options = new Options();
    options.addOption(
        Option.builder("")
          .required(false)
          .hasArg(true)
          .longOpt("shelf_name")
          .build());
    options.addOption(
        Option.builder("")
          .required(false)
          .hasArg(true)
          .longOpt("edition")
          .build());

    CommandLine cl = (new DefaultParser()).parse(options, args);
    String shelfName = cl.getOptionValue("shelf_name", "Math");
    int edition =
        cl.getOptionValue("edition") != null
            ? Integer.parseInt(cl.getOptionValue("edition"))
            : 123;

    samplePublishSeries(shelfName, edition);
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/PublishSeriesRequestSecondEdition.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Request",  "second_edition")
// sample-metadata:
//   title: Second edition
//   description: Testing calling forms
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.PublishSeriesRequestSecondEdition

package com.google.example.examples.library.v1;

import com.google.example.library.v1.Book;
import com.google.example.library.v1.LibraryClient;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.SeriesUuid;
import com.google.example.library.v1.Shelf;
import java.util.ArrayList;
import java.util.List;

public class PublishSeriesRequestSecondEdition {
  // [START canonical]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.example.library.v1.Book;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.example.library.v1.PublishSeriesRequest;
   * import com.google.example.library.v1.PublishSeriesResponse;
   * import com.google.example.library.v1.SeriesUuid;
   * import com.google.example.library.v1.Shelf;
   * import java.util.ArrayList;
   * import java.util.List;
   */

  /** Testing calling forms */
  public static void samplePublishSeries() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      Shelf shelf = Shelf.newBuilder().build();
      List<Book> books = new ArrayList<>();
      SeriesUuid seriesUuid = SeriesUuid.newBuilder().build();
      int edition = 2;
      PublishSeriesRequest request = PublishSeriesRequest.newBuilder()
        .setShelf(shelf)
        .addAllBooks(books)
        .setSeriesUuid(seriesUuid)
        .setEdition(edition)
        .build();
      PublishSeriesResponse response = libraryClient.publishSeries(request);
      System.out.println(response);
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END canonical]

  public static void main(String[] args) {
    samplePublishSeries();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/PublishSeriesRequestTestRequestObjectFieldComments.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Request",  "test_request_object_field_comments")
// sample-metadata:
//   title: request object field comments
//   description: Test request object field comments
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.PublishSeriesRequestTestRequestObjectFieldComments

package com.google.example.examples.library.v1;

import com.google.example.library.v1.Book;
import com.google.example.library.v1.LibraryClient;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.SeriesUuid;
import com.google.example.library.v1.Shelf;
import com.google.protobuf.ByteString;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

public class PublishSeriesRequestTestRequestObjectFieldComments {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.example.library.v1.Book;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.example.library.v1.PublishSeriesRequest;
   * import com.google.example.library.v1.PublishSeriesResponse;
   * import com.google.example.library.v1.SeriesUuid;
   * import com.google.example.library.v1.Shelf;
   * import com.google.protobuf.ByteString;
   * import java.nio.file.Files;
   * import java.nio.file.Path;
   * import java.nio.file.Paths;
   * import java.util.ArrayList;
   * import java.util.List;
   */

  /** Test request object field comments */
  public static void samplePublishSeries() {
    try (LibraryClient libraryClient = LibraryClient.create()) {

      // Comment on a resource name
      String formattedName = LibraryClient.formatShelfName("math");

      // A super long comment
      // wraps words at newline characters
      // as well
      String theme = "Math";

      // Comment on a primitive field
      String internalTheme = "Statistics";
      Shelf shelf = Shelf.newBuilder()
        .setName(formattedName)
        .setTheme(theme)
        .setInternalTheme(internalTheme)
        .build();
      List<Book> books = new ArrayList<>();

      // Comment on a file input field
      Path path = Paths.get("xyz3141592654");
      byte[] data = Files.readAllBytes(path);
      ByteString seriesBytes = ByteString.copyFrom(data);

      // Comment on a message
      SeriesUuid seriesUuid = SeriesUuid.newBuilder()
        .setSeriesBytes(seriesBytes)
        .build();

      // A super long long long long long long long long long long long long long long comment that tests
      // word wrapping
      int edition = 123;
      PublishSeriesRequest request = PublishSeriesRequest.newBuilder()
        .setShelf(shelf)
        .addAllBooks(books)
        .setSeriesUuid(seriesUuid)
        .setEdition(edition)
        .build();
      PublishSeriesResponse response = libraryClient.publishSeries(request);
      System.out.println(response);
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    samplePublishSeries();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/PublishSeriesRequestTestWriteToFile.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Request",  "test_write_to_file")
// sample-metadata:
//   title: test writing fields to files
//   description: Testing write fields to files.
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.PublishSeriesRequestTestWriteToFile

package com.google.example.examples.library.v1;

import com.google.example.library.v1.Book;
import com.google.example.library.v1.LibraryClient;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.SeriesUuid;
import com.google.example.library.v1.Shelf;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

public class PublishSeriesRequestTestWriteToFile {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.example.library.v1.Book;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.example.library.v1.PublishSeriesRequest;
   * import com.google.example.library.v1.PublishSeriesResponse;
   * import com.google.example.library.v1.SeriesUuid;
   * import com.google.example.library.v1.Shelf;
   * import java.io.FileOutputStream;
   * import java.io.FileWriter;
   * import java.io.OutputStream;
   * import java.util.ArrayList;
   * import java.util.List;
   */

  /** Testing write fields to files. */
  public static void samplePublishSeries() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      Shelf shelf = Shelf.newBuilder().build();
      List<Book> books = new ArrayList<>();
      SeriesUuid seriesUuid = SeriesUuid.newBuilder().build();
      PublishSeriesRequest request = PublishSeriesRequest.newBuilder()
        .setShelf(shelf)
        .addAllBooks(books)
        .setSeriesUuid(seriesUuid)
        .build();
      PublishSeriesResponse response = libraryClient.publishSeries(request);
      // testing writing bytes field.
      try (OutputStream out = new FileOutputStream(String.format("uuid_of_series_with_book_%s.raw", response.getBookNamesList().get(0)))) {
        out.write(response.getSeriesUuid().getSeriesBytes().toByteArray());
      }
      // testing writing string field.
      try (FileWriter writer = new FileWriter("series_uuid_in_plain_text.txt")) {
        writer.write(response.getSeriesUuid().getSeriesString());
      }
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    samplePublishSeries();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/SampleGetShelf.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Request",  "test_default_calling_form_unary")
// sample-metadata:
//   title: test_default_calling_form_unary
//   description: Test default calling forms for unary methods.
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.SampleGetShelf

package com.google.example.examples.library.v1;

import com.google.example.library.v1.GetShelfRequest;
import com.google.example.library.v1.LibraryClient;
import com.google.example.library.v1.Shelf;
import com.google.example.library.v1.ShelfName;

public class SampleGetShelf {
  // [START sample_get_shelf]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.example.library.v1.GetShelfRequest;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.example.library.v1.Shelf;
   * import com.google.example.library.v1.ShelfName;
   */

  /** Test default calling forms for unary methods. */
  public static void sampleGetShelf() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      ShelfName name = ShelfName.of("my-shelf");
      String options = "";
      GetShelfRequest request = GetShelfRequest.newBuilder()
        .setName(name.toString())
        .setOptions(options)
        .build();
      Shelf response = libraryClient.getShelf(request);
      System.out.printf("The theme of the shelf is: %s\n", response.getTheme());
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample_get_shelf]

  public static void main(String[] args) {
    sampleGetShelf();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/StreamShelvesCallableCallableStreamingServerEmpty.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("CallableStreamingServer",  "empty")
// sample-metadata:
//   title: Server streaming
//   description: Testing calling forms
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.StreamShelvesCallableCallableStreamingServerEmpty

package com.google.example.examples.library.v1;

import com.google.api.gax.rpc.ServerStream;
import com.google.example.library.v1.LibraryClient;
import com.google.example.library.v1.ShelfName;
import com.google.example.library.v1.StreamShelvesRequest;
import com.google.example.library.v1.StreamShelvesResponse;

public class StreamShelvesCallableCallableStreamingServerEmpty {
  // [START sample]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.gax.rpc.ServerStream;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.example.library.v1.ShelfName;
   * import com.google.example.library.v1.StreamShelvesRequest;
   * import com.google.example.library.v1.StreamShelvesResponse;
   */

  /** Testing calling forms */
  public static void sampleStreamShelves() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      ShelfName name = ShelfName.of("[SHELF]");
      StreamShelvesRequest request = StreamShelvesRequest.newBuilder()
        .setName(name.toString())
        .build();

      ServerStream<StreamShelvesResponse> stream = libraryClient.streamShelvesCallable().call(request);
      for (StreamShelvesResponse responseItem : stream) {
        System.out.println(responseItem);
      }
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END sample]

  public static void main(String[] args) {
    sampleStreamShelves();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/TestDefaultCallingFormForPaging.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("RequestPaged",  "test_default_calling_form_paging")
// sample-metadata:
//   title: test default calling form for paging
//   description: Test default calling form for paging methods.
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.TestDefaultCallingFormForPaging

package com.google.example.examples.library.v1;

import com.google.example.library.v1.LibraryClient;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.Shelf;

public class TestDefaultCallingFormForPaging {
  // [START test_default_calling_form_for_paging]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.example.library.v1.ListShelvesRequest;
   * import com.google.example.library.v1.Shelf;
   */

  /** Test default calling form for paging methods. */
  public static void sampleListShelves() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      ListShelvesRequest request = ListShelvesRequest.newBuilder().build();
      for (Shelf responseItem : libraryClient.listShelves(request).iterateAll()) {
        System.out.printf("shelf name: %s\n", responseItem);
      }
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END test_default_calling_form_for_paging]

  public static void main(String[] args) {
    sampleListShelves();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/TestFloatAndInt64.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Request",  "test_float_and_int64")
// sample-metadata:
//   title:
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.TestFloatAndInt64 [--args='[--param_float 1.2345] [--param_long 67890]']

package com.google.example.examples.library.v1;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.LibraryClient;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest.InnerMessage;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsResponse;
import com.google.protobuf.Any;
import com.google.protobuf.BoolValue;
import com.google.protobuf.ByteString;
import com.google.protobuf.BytesValue;
import com.google.protobuf.DoubleValue;
import com.google.protobuf.Duration;
import com.google.protobuf.FieldMask;
import com.google.protobuf.FloatValue;
import com.google.protobuf.Int32Value;
import com.google.protobuf.Int64Value;
import com.google.protobuf.ListValue;
import com.google.protobuf.StringValue;
import com.google.protobuf.Struct;
import com.google.protobuf.Timestamp;
import com.google.protobuf.UInt32Value;
import com.google.protobuf.UInt64Value;
import com.google.protobuf.Value;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestFloatAndInt64 {
  // [START test_float_and_int64]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest;
   * import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest.InnerMessage;
   * import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsResponse;
   * import com.google.protobuf.Any;
   * import com.google.protobuf.BoolValue;
   * import com.google.protobuf.ByteString;
   * import com.google.protobuf.BytesValue;
   * import com.google.protobuf.DoubleValue;
   * import com.google.protobuf.Duration;
   * import com.google.protobuf.FieldMask;
   * import com.google.protobuf.FloatValue;
   * import com.google.protobuf.Int32Value;
   * import com.google.protobuf.Int64Value;
   * import com.google.protobuf.ListValue;
   * import com.google.protobuf.StringValue;
   * import com.google.protobuf.Struct;
   * import com.google.protobuf.Timestamp;
   * import com.google.protobuf.UInt32Value;
   * import com.google.protobuf.UInt64Value;
   * import com.google.protobuf.Value;
   * import java.util.ArrayList;
   * import java.util.HashMap;
   * import java.util.List;
   * import java.util.Map;
   */

  public static void sampleTestOptionalRequiredFlatteningParams() {
    // TODO(developer): Replace these variables before running the sample.
    float paramFloat = 1.2345F;
    long paramLong = 67890L;
    sampleTestOptionalRequiredFlatteningParams(paramFloat, paramLong);
  }

  public static void sampleTestOptionalRequiredFlatteningParams(float paramFloat, long paramLong) {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      int requiredSingularInt32 = 0;
      double requiredSingularDouble = 0.0;
      boolean requiredSingularBool = false;
      TestOptionalRequiredFlatteningParamsRequest.InnerEnum requiredSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
      String requiredSingularString = "";
      ByteString requiredSingularBytes = ByteString.copyFromUtf8("");
      TestOptionalRequiredFlatteningParamsRequest.InnerMessage requiredSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
      BookName requiredSingularResourceName = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      BookName requiredSingularResourceNameOneof = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      String requiredSingularResourceNameCommon = "";
      int requiredSingularFixed32 = 0;
      long requiredSingularFixed64 = 0L;
      List<Integer> requiredRepeatedInt32 = new ArrayList<>();
      List<Long> requiredRepeatedInt64 = new ArrayList<>();
      List<Float> requiredRepeatedFloat = new ArrayList<>();
      List<Double> requiredRepeatedDouble = new ArrayList<>();
      List<Boolean> requiredRepeatedBool = new ArrayList<>();
      List<TestOptionalRequiredFlatteningParamsRequest.InnerEnum> requiredRepeatedEnum = new ArrayList<>();
      List<String> requiredRepeatedString = new ArrayList<>();
      List<ByteString> requiredRepeatedBytes = new ArrayList<>();
      List<TestOptionalRequiredFlatteningParamsRequest.InnerMessage> requiredRepeatedMessage = new ArrayList<>();
      List<BookName> requiredRepeatedResourceName = new ArrayList<>();
      List<BookName> requiredRepeatedResourceNameOneof = new ArrayList<>();
      List<String> requiredRepeatedResourceNameCommon = new ArrayList<>();
      List<Integer> requiredRepeatedFixed32 = new ArrayList<>();
      List<Long> requiredRepeatedFixed64 = new ArrayList<>();
      Map<Integer, String> requiredMap = new HashMap<>();
      Any requiredAnyValue = Any.newBuilder().build();
      Struct requiredStructValue = Struct.newBuilder().build();
      Value requiredValueValue = Value.newBuilder().build();
      ListValue requiredListValueValue = ListValue.newBuilder().build();
      Timestamp requiredTimeValue = Timestamp.newBuilder().build();
      Duration requiredDurationValue = Duration.newBuilder().build();
      FieldMask requiredFieldMaskValue = FieldMask.newBuilder().build();
      Int32Value requiredInt32Value = Int32Value.newBuilder().build();
      UInt32Value requiredUint32Value = UInt32Value.newBuilder().build();
      Int64Value requiredInt64Value = Int64Value.newBuilder().build();
      UInt64Value requiredUint64Value = UInt64Value.newBuilder().build();
      FloatValue requiredFloatValue = FloatValue.newBuilder().build();
      DoubleValue requiredDoubleValue = DoubleValue.newBuilder().build();
      StringValue requiredStringValue = StringValue.newBuilder().build();
      BoolValue requiredBoolValue = BoolValue.newBuilder().build();
      BytesValue requiredBytesValue = BytesValue.newBuilder().build();
      List<Any> requiredRepeatedAnyValue = new ArrayList<>();
      List<Struct> requiredRepeatedStructValue = new ArrayList<>();
      List<Value> requiredRepeatedValueValue = new ArrayList<>();
      List<ListValue> requiredRepeatedListValueValue = new ArrayList<>();
      List<Timestamp> requiredRepeatedTimeValue = new ArrayList<>();
      List<Duration> requiredRepeatedDurationValue = new ArrayList<>();
      List<FieldMask> requiredRepeatedFieldMaskValue = new ArrayList<>();
      List<Int32Value> requiredRepeatedInt32Value = new ArrayList<>();
      List<UInt32Value> requiredRepeatedUint32Value = new ArrayList<>();
      List<Int64Value> requiredRepeatedInt64Value = new ArrayList<>();
      List<UInt64Value> requiredRepeatedUint64Value = new ArrayList<>();
      List<FloatValue> requiredRepeatedFloatValue = new ArrayList<>();
      List<DoubleValue> requiredRepeatedDoubleValue = new ArrayList<>();
      List<StringValue> requiredRepeatedStringValue = new ArrayList<>();
      List<BoolValue> requiredRepeatedBoolValue = new ArrayList<>();
      List<BytesValue> requiredRepeatedBytesValue = new ArrayList<>();
      TestOptionalRequiredFlatteningParamsRequest request = TestOptionalRequiredFlatteningParamsRequest.newBuilder()
        .setRequiredSingularInt32(requiredSingularInt32)
        .setRequiredSingularInt64(paramLong)
        .setRequiredSingularFloat(paramFloat)
        .setRequiredSingularDouble(requiredSingularDouble)
        .setRequiredSingularBool(requiredSingularBool)
        .setRequiredSingularEnum(requiredSingularEnum)
        .setRequiredSingularString(requiredSingularString)
        .setRequiredSingularBytes(requiredSingularBytes)
        .setRequiredSingularMessage(requiredSingularMessage)
        .setRequiredSingularResourceName(requiredSingularResourceName.toString())
        .setRequiredSingularResourceNameOneof(requiredSingularResourceNameOneof.toString())
        .setRequiredSingularResourceNameCommon(requiredSingularResourceNameCommon)
        .setRequiredSingularFixed32(requiredSingularFixed32)
        .setRequiredSingularFixed64(requiredSingularFixed64)
        .addAllRequiredRepeatedInt32(requiredRepeatedInt32)
        .addAllRequiredRepeatedInt64(requiredRepeatedInt64)
        .addAllRequiredRepeatedFloat(requiredRepeatedFloat)
        .addAllRequiredRepeatedDouble(requiredRepeatedDouble)
        .addAllRequiredRepeatedBool(requiredRepeatedBool)
        .addAllRequiredRepeatedEnum(requiredRepeatedEnum)
        .addAllRequiredRepeatedString(requiredRepeatedString)
        .addAllRequiredRepeatedBytes(requiredRepeatedBytes)
        .addAllRequiredRepeatedMessage(requiredRepeatedMessage)
        .addAllRequiredRepeatedResourceName(BookName.toStringList(requiredRepeatedResourceName))
        .addAllRequiredRepeatedResourceNameOneof(BookName.toStringList(requiredRepeatedResourceNameOneof))
        .addAllRequiredRepeatedResourceNameCommon(requiredRepeatedResourceNameCommon)
        .addAllRequiredRepeatedFixed32(requiredRepeatedFixed32)
        .addAllRequiredRepeatedFixed64(requiredRepeatedFixed64)
        .putAllRequiredMap(requiredMap)
        .setRequiredAnyValue(requiredAnyValue)
        .setRequiredStructValue(requiredStructValue)
        .setRequiredValueValue(requiredValueValue)
        .setRequiredListValueValue(requiredListValueValue)
        .setRequiredTimeValue(requiredTimeValue)
        .setRequiredDurationValue(requiredDurationValue)
        .setRequiredFieldMaskValue(requiredFieldMaskValue)
        .setRequiredInt32Value(requiredInt32Value)
        .setRequiredUint32Value(requiredUint32Value)
        .setRequiredInt64Value(requiredInt64Value)
        .setRequiredUint64Value(requiredUint64Value)
        .setRequiredFloatValue(requiredFloatValue)
        .setRequiredDoubleValue(requiredDoubleValue)
        .setRequiredStringValue(requiredStringValue)
        .setRequiredBoolValue(requiredBoolValue)
        .setRequiredBytesValue(requiredBytesValue)
        .addAllRequiredRepeatedAnyValue(requiredRepeatedAnyValue)
        .addAllRequiredRepeatedStructValue(requiredRepeatedStructValue)
        .addAllRequiredRepeatedValueValue(requiredRepeatedValueValue)
        .addAllRequiredRepeatedListValueValue(requiredRepeatedListValueValue)
        .addAllRequiredRepeatedTimeValue(requiredRepeatedTimeValue)
        .addAllRequiredRepeatedDurationValue(requiredRepeatedDurationValue)
        .addAllRequiredRepeatedFieldMaskValue(requiredRepeatedFieldMaskValue)
        .addAllRequiredRepeatedInt32Value(requiredRepeatedInt32Value)
        .addAllRequiredRepeatedUint32Value(requiredRepeatedUint32Value)
        .addAllRequiredRepeatedInt64Value(requiredRepeatedInt64Value)
        .addAllRequiredRepeatedUint64Value(requiredRepeatedUint64Value)
        .addAllRequiredRepeatedFloatValue(requiredRepeatedFloatValue)
        .addAllRequiredRepeatedDoubleValue(requiredRepeatedDoubleValue)
        .addAllRequiredRepeatedStringValue(requiredRepeatedStringValue)
        .addAllRequiredRepeatedBoolValue(requiredRepeatedBoolValue)
        .addAllRequiredRepeatedBytesValue(requiredRepeatedBytesValue)
        .build();
      TestOptionalRequiredFlatteningParamsResponse response = libraryClient.testOptionalRequiredFlatteningParams(request);
      System.out.println(response);
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END test_float_and_int64]

  public static void main(String[] args) throws Exception {
    Options options = new Options();
    options.addOption(
        Option.builder("")
          .required(false)
          .hasArg(true)
          .longOpt("param_float")
          .build());
    options.addOption(
        Option.builder("")
          .required(false)
          .hasArg(true)
          .longOpt("param_long")
          .build());

    CommandLine cl = (new DefaultParser()).parse(options, args);
    float paramFloat =
        cl.getOptionValue("param_float") != null
            ? Float.parseFloat(cl.getOptionValue("param_float"))
            : 1.2345F;
    long paramLong =
        cl.getOptionValue("param_long") != null
            ? Long.parseLong(cl.getOptionValue("param_long"))
            : 67890L;

    sampleTestOptionalRequiredFlatteningParams(paramFloat, paramLong);
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/TestResourceNameOneof.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Request",  "test_resource_name_oneof")
// sample-metadata:
//   title:
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.TestResourceNameOneof

package com.google.example.examples.library.v1;

import com.google.example.library.v1.BookFromAnywhere;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.GetBookFromAbsolutelyAnywhereRequest;
import com.google.example.library.v1.LibraryClient;

public class TestResourceNameOneof {
  // [START test_resource_name_oneof]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.example.library.v1.BookFromAnywhere;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.GetBookFromAbsolutelyAnywhereRequest;
   * import com.google.example.library.v1.LibraryClient;
   */

  public static void sampleGetBookFromAbsolutelyAnywhere() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName name = BookName.ofShelfBookName("[SHELF]", "The ID of the book");
      GetBookFromAbsolutelyAnywhereRequest request = GetBookFromAbsolutelyAnywhereRequest.newBuilder()
        .setName(name.toString())
        .build();
      BookFromAnywhere response = libraryClient.getBookFromAbsolutelyAnywhere(request);
      System.out.println("Archived book found.");
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END test_resource_name_oneof]

  public static void main(String[] args) {
    sampleGetBookFromAbsolutelyAnywhere();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/TestResourceNameOneof2.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Request",  "test_resource_name_oneof_2")
// sample-metadata:
//   title:
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.TestResourceNameOneof2

package com.google.example.examples.library.v1;

import com.google.example.library.v1.BookFromAnywhere;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.GetBookFromAbsolutelyAnywhereRequest;
import com.google.example.library.v1.LibraryClient;

public class TestResourceNameOneof2 {
  // [START test_resource_name_oneof_2]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.example.library.v1.BookFromAnywhere;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.GetBookFromAbsolutelyAnywhereRequest;
   * import com.google.example.library.v1.LibraryClient;
   */

  public static void sampleGetBookFromAbsolutelyAnywhere() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName name = BookName.ofShelfBookName("The Shelf to search for the book", "The ID of the book");
      GetBookFromAbsolutelyAnywhereRequest request = GetBookFromAbsolutelyAnywhereRequest.newBuilder()
        .setName(name.toString())
        .build();
      BookFromAnywhere response = libraryClient.getBookFromAbsolutelyAnywhere(request);
      System.out.println("Book on shelf found.");
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END test_resource_name_oneof_2]

  public static void main(String[] args) {
    sampleGetBookFromAbsolutelyAnywhere();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/TestSettingUpEmptyObjectsInRequest.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("Request",  "test_setting_up_empty_objects_in_request")
// sample-metadata:
//   title: test_setting_up_empty_objects_in_request
//   description: Test setting up empty objects in the request objects.
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.TestSettingUpEmptyObjectsInRequest

package com.google.example.examples.library.v1;

import com.google.example.library.v1.GetShelfRequest;
import com.google.example.library.v1.LibraryClient;
import com.google.example.library.v1.Shelf;
import com.google.example.library.v1.ShelfName;
import com.google.example.library.v1.SomeMessage;

public class TestSettingUpEmptyObjectsInRequest {
  // [START test_setting_up_empty_objects_in_request]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.example.library.v1.GetShelfRequest;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.example.library.v1.Shelf;
   * import com.google.example.library.v1.ShelfName;
   * import com.google.example.library.v1.SomeMessage;
   */

  /** Test setting up empty objects in the request objects. */
  public static void sampleGetShelf() {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      ShelfName name = ShelfName.of("my-shelf");
      String options = "";

      // we can set up this empty nested object now
      SomeMessage message = SomeMessage.newBuilder().build();
      com.google.example.library.v1.StringBuilder stringBuilder = com.google.example.library.v1.StringBuilder.newBuilder().build();
      GetShelfRequest request = GetShelfRequest.newBuilder()
        .setName(name.toString())
        .setOptions(options)
        .setMessage(message)
        .setStringBuilder(stringBuilder)
        .build();
      Shelf response = libraryClient.getShelf(request);
      System.out.println("Shelf found.");
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END test_setting_up_empty_objects_in_request]

  public static void main(String[] args) {
    sampleGetShelf();
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/ThisTagShouldBeTheNameOfTheFile.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("LongRunningRequestAsync",  "wap")
// sample-metadata:
//   title: GetBigBook: 'War and Peace'
//   description: Testing calling forms
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.ThisTagShouldBeTheNameOfTheFile [--args='[--shelf "Novel\\\"\`\b\t\n\r"]']

package com.google.example.examples.library.v1;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import com.google.api.gax.longrunning.OperationFuture;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.GetBigBookMetadata;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.LibraryClient;
import com.google.protobuf.ListValue;
import java.util.Map;

public class ThisTagShouldBeTheNameOfTheFile {
  // [START this_tag_should_be_the_name_of_the_file]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.gax.longrunning.OperationFuture;
   * import com.google.example.library.v1.Book;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.GetBigBookMetadata;
   * import com.google.example.library.v1.GetBookRequest;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.protobuf.ListValue;
   * import java.util.Map;
   */

  public static void sampleGetBigBook() {
    // TODO(developer): Replace these variables before running the sample.
    String shelf = "Novel\\\"`\b\t\n\r";
    sampleGetBigBook(shelf);
  }

  /** Testing calling forms */
  public static void sampleGetBigBook(String shelf) {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BookName name = BookName.ofShelfBookName(shelf, "War and Peace");
      GetBookRequest request = GetBookRequest.newBuilder()
        .setName(name.toString())
        .build();
      OperationFuture<Book, GetBigBookMetadata> future = libraryClient.getBigBookAsync(request);

      System.out.println("Waiting for operation to complete...");
      Book response = future.get();
      // Testing iterating over map fields when both key and value are specified.
      for (Map.Entry<String, ListValue> entry : response.getMapListValueValueMap().entrySet()) {
        String myKey = entry.getKey();
        ListValue myValue = entry.getValue();
        System.out.printf("key: %s, value: %s\n", myKey, myValue);
      }

      // Testing iterating over map fields when only key is specified.
      for (String anotherKey: response.getMapListValueValueMap().keySet()) {
        System.out.printf("key: %s\n", anotherKey);
      }

      // Testing iterating over map fields when only value is specified.
      for (ListValue anotherValue: response.getMapListValueValueMap().values()) {
        System.out.printf("value: %s\n", anotherValue);
      }

      System.out.printf("name: %s\n", response.getName());
      System.out.printf("author: %s\n", response.getAuthor());
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END this_tag_should_be_the_name_of_the_file]

  public static void main(String[] args) throws Exception {
    Options options = new Options();
    options.addOption(
        Option.builder("")
          .required(false)
          .hasArg(true)
          .longOpt("shelf")
          .build());

    CommandLine cl = (new DefaultParser()).parse(options, args);
    String shelf = cl.getOptionValue("shelf", "Novel\\\"`\b\t\n\r");

    sampleGetBigBook(shelf);
  }
}
============== file: samples/src/main/java/com/google/example/examples/library/v1/TuringProgCallableStreamingBidi.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// DO NOT EDIT! This is a generated sample ("CallableStreamingBidi",  "prog")
// sample-metadata:
//   title: Programming Books
//   description: Testing calling forms
//   usage: gradle run -PmainClass=com.google.example.examples.library.v1.TuringProgCallableStreamingBidi [--args='[--image_file_name "image_file.jpg"] [--stage DRAFT]']

package com.google.example.examples.library.v1;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import com.google.api.gax.rpc.BidiStream;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.Comment;
import com.google.example.library.v1.DiscussBookRequest;
import com.google.example.library.v1.LibraryClient;
import com.google.protobuf.ByteString;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class TuringProgCallableStreamingBidi {
  // [START turing_prog_callable_streaming_bidi]
  /*
   * Please include the following imports to run this sample.
   *
   * import com.google.api.gax.rpc.BidiStream;
   * import com.google.example.library.v1.BookName;
   * import com.google.example.library.v1.Comment;
   * import com.google.example.library.v1.DiscussBookRequest;
   * import com.google.example.library.v1.LibraryClient;
   * import com.google.protobuf.ByteString;
   * import java.nio.file.Files;
   * import java.nio.file.Path;
   * import java.nio.file.Paths;
   */

  public static void sampleDiscussBook() {
    // TODO(developer): Replace these variables before running the sample.
    String imageFileName = "image_file.jpg";
    Comment.Stage stage = Comment.Stage.DRAFT;
    sampleDiscussBook(imageFileName, stage);
  }

  /** Testing calling forms */
  public static void sampleDiscussBook(String imageFileName, Comment.Stage stage) {
    try (LibraryClient libraryClient = LibraryClient.create()) {
      BidiStream<DiscussBookRequest, Comment> bidiStream =
          libraryClient.discussBookCallable().call();

      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      Path path = Paths.get("comment_file");
      byte[] data = Files.readAllBytes(path);
      ByteString comment = ByteString.copyFrom(data);
      Comment comment2 = Comment.newBuilder()
        .setComment(comment)
        .setStage(stage)
        .build();
      path = Paths.get(imageFileName);
      data = Files.readAllBytes(path);
      ByteString image = ByteString.copyFrom(data);
      DiscussBookRequest request = DiscussBookRequest.newBuilder()
        .setName(name.toString())
        .setComment(comment2)
        .setImage(image)
        .build();
      bidiStream.send(request);
      for (Comment responseItem : bidiStream) {
        System.out.println(responseItem);
      }
    } catch (Exception exception) {
      System.err.println("Failed to create the client due to: " + exception);
    }
  }
  // [END turing_prog_callable_streaming_bidi]

  public static void main(String[] args) throws Exception {
    Options options = new Options();
    options.addOption(
        Option.builder("")
          .required(false)
          .hasArg(true)
          .longOpt("image_file_name")
          .build());
    options.addOption(
        Option.builder("")
          .required(false)
          .hasArg(true)
          .longOpt("stage")
          .build());

    CommandLine cl = (new DefaultParser()).parse(options, args);
    String imageFileName = cl.getOptionValue("image_file_name", "image_file.jpg");
    Comment.Stage stage =
      cl.getOptionValue("stage") != null
          ? Comment.Stage.valueOf(cl.getOptionValue("stage"))
          : Comment.Stage.DRAFT;

    sampleDiscussBook(imageFileName, stage);
  }
}
============== file: src/main/java/com/google/example/library/v1/LibraryClient.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1;

import com.google.api.core.ApiFunction;
import com.google.api.core.ApiFuture;
import com.google.api.core.ApiFutures;
import com.google.api.core.BetaApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.longrunning.OperationFuture;
import com.google.api.gax.paging.AbstractFixedSizeCollection;
import com.google.api.gax.paging.AbstractPage;
import com.google.api.gax.paging.AbstractPagedListResponse;
import com.google.api.gax.paging.FixedSizeCollection;
import com.google.api.gax.paging.Page;
import com.google.api.gax.rpc.ApiExceptions;
import com.google.api.gax.rpc.BidiStreamingCallable;
import com.google.api.gax.rpc.ClientStreamingCallable;
import com.google.api.gax.rpc.OperationCallable;
import com.google.api.gax.rpc.PageContext;
import com.google.api.gax.rpc.ServerStreamingCallable;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.api.pathtemplate.PathTemplate;
import com.google.api.resourcenames.ResourceName;
import com.google.common.base.Function;
import com.google.common.collect.Iterables;
import com.google.common.util.concurrent.MoreExecutors;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest.InnerMessage;
import com.google.example.library.v1.stub.LibraryServiceStub;
import com.google.example.library.v1.stub.LibraryServiceStubSettings;
import com.google.longrunning.Operation;
import com.google.longrunning.OperationsClient;
import com.google.protobuf.Any;
import com.google.protobuf.BoolValue;
import com.google.protobuf.ByteString;
import com.google.protobuf.BytesValue;
import com.google.protobuf.DoubleValue;
import com.google.protobuf.Duration;
import com.google.protobuf.Empty;
import com.google.protobuf.FieldMask;
import com.google.protobuf.FloatValue;
import com.google.protobuf.Int32Value;
import com.google.protobuf.Int64Value;
import com.google.protobuf.ListValue;
import com.google.protobuf.StringValue;
import com.google.protobuf.Struct;
import com.google.protobuf.Timestamp;
import com.google.protobuf.UInt32Value;
import com.google.protobuf.UInt64Value;
import com.google.protobuf.Value;
import com.google.tagger.v1.TaggerProto.AddLabelRequest;
import com.google.tagger.v1.TaggerProto.AddLabelResponse;
import java.io.Closeable;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND SERVICE
/**
 * Service Description: This API represents a simple digital library.  It lets you manage Shelf
 * resources and Book resources in the library. It defines the following
 * resource model:
 *
 * - The API has a collection of [Shelf][google.example.library.v1.Shelf]
 *   resources, named ``bookShelves/&#42;``
 *
 * - Each Shelf has a collection of [Book][google.example.library.v1.Book]
 *   resources, named `bookShelves/&#42;/books/&#42;`
 *
 * Check out [cloud docs!](/library/example/link).
 * This is [not a cloud link](http://www.google.com).
 *
 * Service comment may include special characters: &lt;&gt;&amp;"`'{@literal @}.
 *
 * Also see this awesome doc there! and there! and everywhere!
 *
 * <p>This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * <pre>
 * <code>
 * try (LibraryClient libraryClient = LibraryClient.create()) {
 *   Shelf shelf = Shelf.newBuilder().build();
 *   Shelf response = libraryClient.createShelf(shelf);
 * }
 * </code>
 * </pre>
 *
 * <p>Note: close() needs to be called on the libraryClient object to clean up resources such
 * as threads. In the example above, try-with-resources is used, which automatically calls
 * close().
 *
 * <p>The surface of this class includes several types of Java methods for each of the API's methods:
 *
 * <ol>
 * <li> A "flattened" method. With this type of method, the fields of the request type have been
 * converted into function parameters. It may be the case that not all fields are available
 * as parameters, and not every API method will have a flattened method entry point.
 * <li> A "request object" method. This type of method only takes one parameter, a request
 * object, which must be constructed before the call. Not every API method will have a request
 * object method.
 * <li> A "callable" method. This type of method takes no parameters and returns an immutable
 * API callable object, which can be used to initiate calls to the service.
 * </ol>
 *
 * <p>See the individual methods for example code.
 *
 * <p>Many parameters require resource names to be formatted in a particular way. To assist
 * with these names, this class includes a format method for each type of name, and additionally
 * a parse method to extract the individual identifiers contained within names that are
 * returned.
 *
 * <p>This class can be customized by passing in a custom instance of LibrarySettings to
 * create(). For example:
 *
 * To customize credentials:
 *
 * <pre>
 * <code>
 * LibrarySettings librarySettings =
 *     LibrarySettings.newBuilder()
 *         .setCredentialsProvider(FixedCredentialsProvider.create(myCredentials))
 *         .build();
 * LibraryClient libraryClient =
 *     LibraryClient.create(librarySettings);
 * </code>
 * </pre>
 *
 * To customize the endpoint:
 *
 * <pre>
 * <code>
 * LibrarySettings librarySettings =
 *     LibrarySettings.newBuilder().setEndpoint(myEndpoint).build();
 * LibraryClient libraryClient =
 *     LibraryClient.create(librarySettings);
 * </code>
 * </pre>
 */
@Generated("by gapic-generator")
public class LibraryClient implements BackgroundResource {
  private final LibrarySettings settings;
  private final LibraryServiceStub stub;
  private final OperationsClient operationsClient;

  private static final PathTemplate ARCHIVE_PATH_TEMPLATE =
      PathTemplate.createWithoutUrlEncoding("archives/{archive}");

  private static final PathTemplate ARCHIVED_BOOK_PATH_TEMPLATE =
      PathTemplate.createWithoutUrlEncoding("archives/{archive}/books/{book}");

  private static final PathTemplate SHELF_BOOK_PATH_TEMPLATE =
      PathTemplate.createWithoutUrlEncoding("shelves/{shelf}/books/{book}");

  private static final PathTemplate BOOK_FROM_ARCHIVE_PATH_TEMPLATE =
      PathTemplate.createWithoutUrlEncoding("archives/{archive}/books/{book}");

  private static final PathTemplate FOLDER_PATH_TEMPLATE =
      PathTemplate.createWithoutUrlEncoding("folders/{folder}");

  private static final PathTemplate LOCATION_PATH_TEMPLATE =
      PathTemplate.createWithoutUrlEncoding("projects/{project}/locations/{location}");

  private static final PathTemplate PROJECT_PATH_TEMPLATE =
      PathTemplate.createWithoutUrlEncoding("projects/{project}");

  private static final PathTemplate PROJECT_BOOK_PATH_TEMPLATE =
      PathTemplate.createWithoutUrlEncoding("projects/{project}/books/{book}");

  private static final PathTemplate PUBLISHER_PATH_TEMPLATE =
      PathTemplate.createWithoutUrlEncoding("projects/{project}/locations/{location}/publishers/{publisher}");

  private static final PathTemplate SHELF_PATH_TEMPLATE =
      PathTemplate.createWithoutUrlEncoding("shelves/{shelf}");

  /**
   * Formats a string containing the fully-qualified path to represent
   * a archive resource.
   *
   * @deprecated Use the {@link ArchiveName} class instead.
   */
  @Deprecated
  public static final String formatArchiveName(String archive) {
    return ARCHIVE_PATH_TEMPLATE.instantiate(
        "archive", archive);
  }

  /**
   * Formats a string containing the fully-qualified path to represent
   * a archived_book resource.
   *
   * @deprecated Use the {@link ArchivedBookName} class instead.
   */
  @Deprecated
  public static final String formatArchivedBookName(String archive, String book) {
    return ARCHIVED_BOOK_PATH_TEMPLATE.instantiate(
        "archive", archive,
        "book", book);
  }

  /**
   * Formats a string containing the fully-qualified path to represent
   * a shelf_book resource.
   *
   * @deprecated Use the {@link ShelfBookName} class instead.
   */
  @Deprecated
  public static final String formatShelfBookName(String shelf, String book) {
    return SHELF_BOOK_PATH_TEMPLATE.instantiate(
        "shelf", shelf,
        "book", book);
  }

  /**
   * Formats a string containing the fully-qualified path to represent
   * a book_from_archive resource.
   *
   * @deprecated Use the {@link BookFromArchiveName} class instead.
   */
  @Deprecated
  public static final String formatBookFromArchiveName(String archive, String book) {
    return BOOK_FROM_ARCHIVE_PATH_TEMPLATE.instantiate(
        "archive", archive,
        "book", book);
  }

  /**
   * Formats a string containing the fully-qualified path to represent
   * a folder resource.
   *
   * @deprecated Use the {@link FolderName} class instead.
   */
  @Deprecated
  public static final String formatFolderName(String folder) {
    return FOLDER_PATH_TEMPLATE.instantiate(
        "folder", folder);
  }

  /**
   * Formats a string containing the fully-qualified path to represent
   * a location resource.
   *
   * @deprecated Use the {@link LocationName} class instead.
   */
  @Deprecated
  public static final String formatLocationName(String project, String location) {
    return LOCATION_PATH_TEMPLATE.instantiate(
        "project", project,
        "location", location);
  }

  /**
   * Formats a string containing the fully-qualified path to represent
   * a project resource.
   *
   * @deprecated Use the {@link ProjectName} class instead.
   */
  @Deprecated
  public static final String formatProjectName(String project) {
    return PROJECT_PATH_TEMPLATE.instantiate(
        "project", project);
  }

  /**
   * Formats a string containing the fully-qualified path to represent
   * a project_book resource.
   *
   * @deprecated Use the {@link ProjectBookName} class instead.
   */
  @Deprecated
  public static final String formatProjectBookName(String project, String book) {
    return PROJECT_BOOK_PATH_TEMPLATE.instantiate(
        "project", project,
        "book", book);
  }

  /**
   * Formats a string containing the fully-qualified path to represent
   * a publisher resource.
   *
   * @deprecated Use the {@link PublisherName} class instead.
   */
  @Deprecated
  public static final String formatPublisherName(String project, String location, String publisher) {
    return PUBLISHER_PATH_TEMPLATE.instantiate(
        "project", project,
        "location", location,
        "publisher", publisher);
  }

  /**
   * Formats a string containing the fully-qualified path to represent
   * a shelf resource.
   *
   * @deprecated Use the {@link ShelfName} class instead.
   */
  @Deprecated
  public static final String formatShelfName(String shelf) {
    return SHELF_PATH_TEMPLATE.instantiate(
        "shelf", shelf);
  }

  /**
   * Parses the archive from the given fully-qualified path which
   * represents a archive resource.
   *
   * @deprecated Use the {@link ArchiveName} class instead.
   */
  @Deprecated
  public static final String parseArchiveFromArchiveName(String archiveName) {
    return ARCHIVE_PATH_TEMPLATE.parse(archiveName).get("archive");
  }

  /**
   * Parses the archive from the given fully-qualified path which
   * represents a archived_book resource.
   *
   * @deprecated Use the {@link ArchivedBookName} class instead.
   */
  @Deprecated
  public static final String parseArchiveFromArchivedBookName(String archivedBookName) {
    return ARCHIVED_BOOK_PATH_TEMPLATE.parse(archivedBookName).get("archive");
  }

  /**
   * Parses the book from the given fully-qualified path which
   * represents a archived_book resource.
   *
   * @deprecated Use the {@link ArchivedBookName} class instead.
   */
  @Deprecated
  public static final String parseBookFromArchivedBookName(String archivedBookName) {
    return ARCHIVED_BOOK_PATH_TEMPLATE.parse(archivedBookName).get("book");
  }

  /**
   * Parses the shelf from the given fully-qualified path which
   * represents a shelf_book resource.
   *
   * @deprecated Use the {@link ShelfBookName} class instead.
   */
  @Deprecated
  public static final String parseShelfFromShelfBookName(String shelfBookName) {
    return SHELF_BOOK_PATH_TEMPLATE.parse(shelfBookName).get("shelf");
  }

  /**
   * Parses the book from the given fully-qualified path which
   * represents a shelf_book resource.
   *
   * @deprecated Use the {@link ShelfBookName} class instead.
   */
  @Deprecated
  public static final String parseBookFromShelfBookName(String shelfBookName) {
    return SHELF_BOOK_PATH_TEMPLATE.parse(shelfBookName).get("book");
  }

  /**
   * Parses the archive from the given fully-qualified path which
   * represents a book_from_archive resource.
   *
   * @deprecated Use the {@link BookFromArchiveName} class instead.
   */
  @Deprecated
  public static final String parseArchiveFromBookFromArchiveName(String bookFromArchiveName) {
    return BOOK_FROM_ARCHIVE_PATH_TEMPLATE.parse(bookFromArchiveName).get("archive");
  }

  /**
   * Parses the book from the given fully-qualified path which
   * represents a book_from_archive resource.
   *
   * @deprecated Use the {@link BookFromArchiveName} class instead.
   */
  @Deprecated
  public static final String parseBookFromBookFromArchiveName(String bookFromArchiveName) {
    return BOOK_FROM_ARCHIVE_PATH_TEMPLATE.parse(bookFromArchiveName).get("book");
  }

  /**
   * Parses the folder from the given fully-qualified path which
   * represents a folder resource.
   *
   * @deprecated Use the {@link FolderName} class instead.
   */
  @Deprecated
  public static final String parseFolderFromFolderName(String folderName) {
    return FOLDER_PATH_TEMPLATE.parse(folderName).get("folder");
  }

  /**
   * Parses the project from the given fully-qualified path which
   * represents a location resource.
   *
   * @deprecated Use the {@link LocationName} class instead.
   */
  @Deprecated
  public static final String parseProjectFromLocationName(String locationName) {
    return LOCATION_PATH_TEMPLATE.parse(locationName).get("project");
  }

  /**
   * Parses the location from the given fully-qualified path which
   * represents a location resource.
   *
   * @deprecated Use the {@link LocationName} class instead.
   */
  @Deprecated
  public static final String parseLocationFromLocationName(String locationName) {
    return LOCATION_PATH_TEMPLATE.parse(locationName).get("location");
  }

  /**
   * Parses the project from the given fully-qualified path which
   * represents a project resource.
   *
   * @deprecated Use the {@link ProjectName} class instead.
   */
  @Deprecated
  public static final String parseProjectFromProjectName(String projectName) {
    return PROJECT_PATH_TEMPLATE.parse(projectName).get("project");
  }

  /**
   * Parses the project from the given fully-qualified path which
   * represents a project_book resource.
   *
   * @deprecated Use the {@link ProjectBookName} class instead.
   */
  @Deprecated
  public static final String parseProjectFromProjectBookName(String projectBookName) {
    return PROJECT_BOOK_PATH_TEMPLATE.parse(projectBookName).get("project");
  }

  /**
   * Parses the book from the given fully-qualified path which
   * represents a project_book resource.
   *
   * @deprecated Use the {@link ProjectBookName} class instead.
   */
  @Deprecated
  public static final String parseBookFromProjectBookName(String projectBookName) {
    return PROJECT_BOOK_PATH_TEMPLATE.parse(projectBookName).get("book");
  }

  /**
   * Parses the project from the given fully-qualified path which
   * represents a publisher resource.
   *
   * @deprecated Use the {@link PublisherName} class instead.
   */
  @Deprecated
  public static final String parseProjectFromPublisherName(String publisherName) {
    return PUBLISHER_PATH_TEMPLATE.parse(publisherName).get("project");
  }

  /**
   * Parses the location from the given fully-qualified path which
   * represents a publisher resource.
   *
   * @deprecated Use the {@link PublisherName} class instead.
   */
  @Deprecated
  public static final String parseLocationFromPublisherName(String publisherName) {
    return PUBLISHER_PATH_TEMPLATE.parse(publisherName).get("location");
  }

  /**
   * Parses the publisher from the given fully-qualified path which
   * represents a publisher resource.
   *
   * @deprecated Use the {@link PublisherName} class instead.
   */
  @Deprecated
  public static final String parsePublisherFromPublisherName(String publisherName) {
    return PUBLISHER_PATH_TEMPLATE.parse(publisherName).get("publisher");
  }

  /**
   * Parses the shelf from the given fully-qualified path which
   * represents a shelf resource.
   *
   * @deprecated Use the {@link ShelfName} class instead.
   */
  @Deprecated
  public static final String parseShelfFromShelfName(String shelfName) {
    return SHELF_PATH_TEMPLATE.parse(shelfName).get("shelf");
  }

  /**
   * Constructs an instance of LibraryClient with default settings.
   */
  public static final LibraryClient create() throws IOException {
    return create(LibrarySettings.newBuilder().build());
  }

  /**
   * Constructs an instance of LibraryClient, using the given settings.
   * The channels are created based on the settings passed in, or defaults for any
   * settings that are not set.
   */
  public static final LibraryClient create(LibrarySettings settings) throws IOException {
    return new LibraryClient(settings);
  }

  /**
   * Constructs an instance of LibraryClient, using the given stub for making calls. This is for
   * advanced usage - prefer to use LibrarySettings}.
   */
  @BetaApi("A restructuring of stub classes is planned, so this may break in the future")
  public static final LibraryClient create(LibraryServiceStub stub) {
    return new LibraryClient(stub);
  }

  /**
   * Constructs an instance of LibraryClient, using the given settings.
   * This is protected so that it is easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected LibraryClient(LibrarySettings settings) throws IOException {
    this.settings = settings;
    this.stub = ((LibraryServiceStubSettings) settings.getStubSettings()).createStub();
    this.operationsClient = OperationsClient.create(this.stub.getOperationsStub());
  }

  @BetaApi("A restructuring of stub classes is planned, so this may break in the future")
  protected LibraryClient(LibraryServiceStub stub) {
    this.settings = null;
    this.stub = stub;
    this.operationsClient = OperationsClient.create(this.stub.getOperationsStub());
  }

  public final LibrarySettings getSettings() {
    return settings;
  }

  @BetaApi("A restructuring of stub classes is planned, so this may break in the future")
  public LibraryServiceStub getStub() {
    return stub;
  }

  /**
   * Returns the OperationsClient that can be used to query the status of a long-running
   * operation returned by another API method call.
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationsClient getOperationsClient() {
    return operationsClient;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a shelf, and returns the new Shelf.
   * RPC method comment may include special characters: &lt;&gt;&amp;"`'{@literal @}.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   Shelf shelf = Shelf.newBuilder().build();
   *   Shelf response = libraryClient.createShelf(shelf);
   * }
   * </code></pre>
   *
   * @param shelf The shelf to create.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Shelf createShelf(Shelf shelf) {
    CreateShelfRequest request =
        CreateShelfRequest.newBuilder()
            .setShelf(shelf)
            .build();
    return createShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a shelf, and returns the new Shelf.
   * RPC method comment may include special characters: &lt;&gt;&amp;"`'{@literal @}.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   Shelf shelf = Shelf.newBuilder().build();
   *   CreateShelfRequest request = CreateShelfRequest.newBuilder()
   *     .setShelf(shelf)
   *     .build();
   *   Shelf response = libraryClient.createShelf(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Shelf createShelf(CreateShelfRequest request) {
    return createShelfCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a shelf, and returns the new Shelf.
   * RPC method comment may include special characters: &lt;&gt;&amp;"`'{@literal @}.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   Shelf shelf = Shelf.newBuilder().build();
   *   CreateShelfRequest request = CreateShelfRequest.newBuilder()
   *     .setShelf(shelf)
   *     .build();
   *   ApiFuture&lt;Shelf&gt; future = libraryClient.createShelfCallable().futureCall(request);
   *   // Do something
   *   Shelf response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<CreateShelfRequest, Shelf> createShelfCallable() {
    return stub.createShelfCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   Shelf response = libraryClient.getShelf(name);
   * }
   * </code></pre>
   *
   * @param name The name of the shelf to retrieve.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Shelf getShelf(ShelfName name) {
    GetShelfRequest request =
        GetShelfRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .build();
    return getShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   Shelf response = libraryClient.getShelf(name.toString());
   * }
   * </code></pre>
   *
   * @param name The name of the shelf to retrieve.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Shelf getShelf(String name) {
    GetShelfRequest request =
        GetShelfRequest.newBuilder()
            .setName(name)
            .build();
    return getShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   SomeMessage message = SomeMessage.newBuilder().build();
   *   Shelf response = libraryClient.getShelf(name, message);
   * }
   * </code></pre>
   *
   * @param name The name of the shelf to retrieve.
   * @param message Field to verify that message-type query parameter gets flattened.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Shelf getShelf(ShelfName name, SomeMessage message) {
    GetShelfRequest request =
        GetShelfRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .setMessage(message)
            .build();
    return getShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   SomeMessage message = SomeMessage.newBuilder().build();
   *   Shelf response = libraryClient.getShelf(name.toString(), message);
   * }
   * </code></pre>
   *
   * @param name The name of the shelf to retrieve.
   * @param message Field to verify that message-type query parameter gets flattened.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Shelf getShelf(String name, SomeMessage message) {
    GetShelfRequest request =
        GetShelfRequest.newBuilder()
            .setName(name)
            .setMessage(message)
            .build();
    return getShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   SomeMessage message = SomeMessage.newBuilder().build();
   *   com.google.example.library.v1.StringBuilder stringBuilder = com.google.example.library.v1.StringBuilder.newBuilder().build();
   *   Shelf response = libraryClient.getShelf(name, message, stringBuilder);
   * }
   * </code></pre>
   *
   * @param name The name of the shelf to retrieve.
   * @param message Field to verify that message-type query parameter gets flattened.
   * @param stringBuilder
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Shelf getShelf(ShelfName name, SomeMessage message, com.google.example.library.v1.StringBuilder stringBuilder) {
    GetShelfRequest request =
        GetShelfRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .setMessage(message)
            .setStringBuilder(stringBuilder)
            .build();
    return getShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   SomeMessage message = SomeMessage.newBuilder().build();
   *   com.google.example.library.v1.StringBuilder stringBuilder = com.google.example.library.v1.StringBuilder.newBuilder().build();
   *   Shelf response = libraryClient.getShelf(name.toString(), message, stringBuilder);
   * }
   * </code></pre>
   *
   * @param name The name of the shelf to retrieve.
   * @param message Field to verify that message-type query parameter gets flattened.
   * @param stringBuilder
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Shelf getShelf(String name, SomeMessage message, com.google.example.library.v1.StringBuilder stringBuilder) {
    GetShelfRequest request =
        GetShelfRequest.newBuilder()
            .setName(name)
            .setMessage(message)
            .setStringBuilder(stringBuilder)
            .build();
    return getShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   String options = "";
   *   GetShelfRequest request = GetShelfRequest.newBuilder()
   *     .setName(name.toString())
   *     .setOptions(options)
   *     .build();
   *   Shelf response = libraryClient.getShelf(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Shelf getShelf(GetShelfRequest request) {
    return getShelfCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   String options = "";
   *   GetShelfRequest request = GetShelfRequest.newBuilder()
   *     .setName(name.toString())
   *     .setOptions(options)
   *     .build();
   *   ApiFuture&lt;Shelf&gt; future = libraryClient.getShelfCallable().futureCall(request);
   *   // Do something
   *   Shelf response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<GetShelfRequest, Shelf> getShelfCallable() {
    return stub.getShelfCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists shelves.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *
   *   for (Shelf element : libraryClient.listShelves().iterateAll()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ListShelvesPagedResponse listShelves() {
    ListShelvesRequest request =
        ListShelvesRequest.newBuilder().build();
    return listShelves(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists shelves.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ListShelvesRequest request = ListShelvesRequest.newBuilder().build();
   *   for (Shelf element : libraryClient.listShelves(request).iterateAll()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ListShelvesPagedResponse listShelves(ListShelvesRequest request) {
    return listShelvesPagedCallable()
        .call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists shelves.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ListShelvesRequest request = ListShelvesRequest.newBuilder().build();
   *   ApiFuture&lt;ListShelvesPagedResponse&gt; future = libraryClient.listShelvesPagedCallable().futureCall(request);
   *   // Do something
   *   for (Shelf element : future.get().iterateAll()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   */
  public final UnaryCallable<ListShelvesRequest, ListShelvesPagedResponse> listShelvesPagedCallable() {
    return stub.listShelvesPagedCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists shelves.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ListShelvesRequest request = ListShelvesRequest.newBuilder().build();
   *   while (true) {
   *     ListShelvesResponse response = libraryClient.listShelvesCallable().call(request);
   *     for (Shelf element : response.getShelvesList()) {
   *       // doThingsWith(element);
   *     }
   *     String nextPageToken = response.getNextPageToken();
   *     if (!Strings.isNullOrEmpty(nextPageToken)) {
   *       request = request.toBuilder().setPageToken(nextPageToken).build();
   *     } else {
   *       break;
   *     }
   *   }
   * }
   * </code></pre>
   */
  public final UnaryCallable<ListShelvesRequest, ListShelvesResponse> listShelvesCallable() {
    return stub.listShelvesCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Deletes a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   libraryClient.deleteShelf(name);
   * }
   * </code></pre>
   *
   * @param name The name of the shelf to delete.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void deleteShelf(ShelfName name) {
    DeleteShelfRequest request =
        DeleteShelfRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .build();
    deleteShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Deletes a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   libraryClient.deleteShelf(name.toString());
   * }
   * </code></pre>
   *
   * @param name The name of the shelf to delete.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void deleteShelf(String name) {
    DeleteShelfRequest request =
        DeleteShelfRequest.newBuilder()
            .setName(name)
            .build();
    deleteShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Deletes a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   DeleteShelfRequest request = DeleteShelfRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   libraryClient.deleteShelf(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void deleteShelf(DeleteShelfRequest request) {
    deleteShelfCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Deletes a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   DeleteShelfRequest request = DeleteShelfRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   ApiFuture&lt;Void&gt; future = libraryClient.deleteShelfCallable().futureCall(request);
   *   // Do something
   *   future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<DeleteShelfRequest, Empty> deleteShelfCallable() {
    return stub.deleteShelfCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Merges two shelves by adding all books from the shelf named
   * `other_shelf_name` to shelf `name`, and deletes
   * `other_shelf_name`. Returns the updated shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   ShelfName otherShelfName = ShelfName.of("[SHELF]");
   *   Shelf response = libraryClient.mergeShelves(name, otherShelfName);
   * }
   * </code></pre>
   *
   * @param name The name of the shelf we're adding books to.
   * @param otherShelfName The name of the shelf we're removing books from and deleting.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Shelf mergeShelves(ShelfName name, ShelfName otherShelfName) {
    MergeShelvesRequest request =
        MergeShelvesRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .setOtherShelfName(otherShelfName == null ? null : otherShelfName.toString())
            .build();
    return mergeShelves(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Merges two shelves by adding all books from the shelf named
   * `other_shelf_name` to shelf `name`, and deletes
   * `other_shelf_name`. Returns the updated shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   ShelfName otherShelfName = ShelfName.of("[SHELF]");
   *   Shelf response = libraryClient.mergeShelves(name.toString(), otherShelfName.toString());
   * }
   * </code></pre>
   *
   * @param name The name of the shelf we're adding books to.
   * @param otherShelfName The name of the shelf we're removing books from and deleting.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Shelf mergeShelves(String name, String otherShelfName) {
    MergeShelvesRequest request =
        MergeShelvesRequest.newBuilder()
            .setName(name)
            .setOtherShelfName(otherShelfName)
            .build();
    return mergeShelves(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Merges two shelves by adding all books from the shelf named
   * `other_shelf_name` to shelf `name`, and deletes
   * `other_shelf_name`. Returns the updated shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   ShelfName otherShelfName = ShelfName.of("[SHELF]");
   *   MergeShelvesRequest request = MergeShelvesRequest.newBuilder()
   *     .setName(name.toString())
   *     .setOtherShelfName(otherShelfName.toString())
   *     .build();
   *   Shelf response = libraryClient.mergeShelves(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Shelf mergeShelves(MergeShelvesRequest request) {
    return mergeShelvesCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Merges two shelves by adding all books from the shelf named
   * `other_shelf_name` to shelf `name`, and deletes
   * `other_shelf_name`. Returns the updated shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   ShelfName otherShelfName = ShelfName.of("[SHELF]");
   *   MergeShelvesRequest request = MergeShelvesRequest.newBuilder()
   *     .setName(name.toString())
   *     .setOtherShelfName(otherShelfName.toString())
   *     .build();
   *   ApiFuture&lt;Shelf&gt; future = libraryClient.mergeShelvesCallable().futureCall(request);
   *   // Do something
   *   Shelf response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<MergeShelvesRequest, Shelf> mergeShelvesCallable() {
    return stub.mergeShelvesCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   Book book = Book.newBuilder().build();
   *   Book response = libraryClient.createBook(name, book);
   * }
   * </code></pre>
   *
   * @param name The name of the shelf in which the book is created.
   * @param book The book to create.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book createBook(ShelfName name, Book book) {
    CreateBookRequest request =
        CreateBookRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .setBook(book)
            .build();
    return createBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   Book book = Book.newBuilder().build();
   *   Book response = libraryClient.createBook(name.toString(), book);
   * }
   * </code></pre>
   *
   * @param name The name of the shelf in which the book is created.
   * @param book The book to create.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book createBook(String name, Book book) {
    CreateBookRequest request =
        CreateBookRequest.newBuilder()
            .setName(name)
            .setBook(book)
            .build();
    return createBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   Book book = Book.newBuilder().build();
   *   CreateBookRequest request = CreateBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .setBook(book)
   *     .build();
   *   Book response = libraryClient.createBook(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book createBook(CreateBookRequest request) {
    return createBookCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   Book book = Book.newBuilder().build();
   *   CreateBookRequest request = CreateBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .setBook(book)
   *     .build();
   *   ApiFuture&lt;Book&gt; future = libraryClient.createBookCallable().futureCall(request);
   *   // Do something
   *   Book response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<CreateBookRequest, Book> createBookCallable() {
    return stub.createBookCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a series of books.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   Shelf shelf = Shelf.newBuilder().build();
   *   List&lt;Book&gt; books = new ArrayList&lt;&gt;();
   *   int edition = 0;
   *   String seriesString = "foobar";
   *   SeriesUuid seriesUuid = SeriesUuid.newBuilder()
   *     .setSeriesString(seriesString)
   *     .build();
   *   PublisherName publisher = PublisherName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");
   *   PublishSeriesResponse response = libraryClient.publishSeries(shelf, books, edition, seriesUuid, publisher);
   * }
   * </code></pre>
   *
   * @param shelf The shelf in which the series is created.
   * @param books The books to publish in the series.
   * @param edition The edition of the series
   * @param seriesUuid Uniquely identifies the series to the publishing house.
   * @param publisher The publisher of the series.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final PublishSeriesResponse publishSeries(Shelf shelf, List<Book> books, int edition, SeriesUuid seriesUuid, PublisherName publisher) {
    PublishSeriesRequest request =
        PublishSeriesRequest.newBuilder()
            .setShelf(shelf)
            .addAllBooks(books)
            .setEdition(edition)
            .setSeriesUuid(seriesUuid)
            .setPublisher(publisher == null ? null : publisher.toString())
            .build();
    return publishSeries(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a series of books.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   Shelf shelf = Shelf.newBuilder().build();
   *   List&lt;Book&gt; books = new ArrayList&lt;&gt;();
   *   int edition = 0;
   *   String seriesString = "foobar";
   *   SeriesUuid seriesUuid = SeriesUuid.newBuilder()
   *     .setSeriesString(seriesString)
   *     .build();
   *   PublisherName publisher = PublisherName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");
   *   PublishSeriesResponse response = libraryClient.publishSeries(shelf, books, edition, seriesUuid, publisher.toString());
   * }
   * </code></pre>
   *
   * @param shelf The shelf in which the series is created.
   * @param books The books to publish in the series.
   * @param edition The edition of the series
   * @param seriesUuid Uniquely identifies the series to the publishing house.
   * @param publisher The publisher of the series.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final PublishSeriesResponse publishSeries(Shelf shelf, List<Book> books, int edition, SeriesUuid seriesUuid, String publisher) {
    PublishSeriesRequest request =
        PublishSeriesRequest.newBuilder()
            .setShelf(shelf)
            .addAllBooks(books)
            .setEdition(edition)
            .setSeriesUuid(seriesUuid)
            .setPublisher(publisher)
            .build();
    return publishSeries(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a series of books.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   Shelf shelf = Shelf.newBuilder().build();
   *   List&lt;Book&gt; books = new ArrayList&lt;&gt;();
   *   String seriesString = "foobar";
   *   SeriesUuid seriesUuid = SeriesUuid.newBuilder()
   *     .setSeriesString(seriesString)
   *     .build();
   *   PublishSeriesRequest request = PublishSeriesRequest.newBuilder()
   *     .setShelf(shelf)
   *     .addAllBooks(books)
   *     .setSeriesUuid(seriesUuid)
   *     .build();
   *   PublishSeriesResponse response = libraryClient.publishSeries(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final PublishSeriesResponse publishSeries(PublishSeriesRequest request) {
    return publishSeriesCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a series of books.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   Shelf shelf = Shelf.newBuilder().build();
   *   List&lt;Book&gt; books = new ArrayList&lt;&gt;();
   *   String seriesString = "foobar";
   *   SeriesUuid seriesUuid = SeriesUuid.newBuilder()
   *     .setSeriesString(seriesString)
   *     .build();
   *   PublishSeriesRequest request = PublishSeriesRequest.newBuilder()
   *     .setShelf(shelf)
   *     .addAllBooks(books)
   *     .setSeriesUuid(seriesUuid)
   *     .build();
   *   ApiFuture&lt;PublishSeriesResponse&gt; future = libraryClient.publishSeriesCallable().futureCall(request);
   *   // Do something
   *   PublishSeriesResponse response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<PublishSeriesRequest, PublishSeriesResponse> publishSeriesCallable() {
    return stub.publishSeriesCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   Book response = libraryClient.getBook(name);
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book getBook(BookName name) {
    GetBookRequest request =
        GetBookRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .build();
    return getBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   Book response = libraryClient.getBook(name.toString());
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book getBook(String name) {
    GetBookRequest request =
        GetBookRequest.newBuilder()
            .setName(name)
            .build();
    return getBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   GetBookRequest request = GetBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   Book response = libraryClient.getBook(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book getBook(GetBookRequest request) {
    return getBookCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   GetBookRequest request = GetBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   ApiFuture&lt;Book&gt; future = libraryClient.getBookCallable().futureCall(request);
   *   // Do something
   *   Book response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<GetBookRequest, Book> getBookCallable() {
    return stub.getBookCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists books in a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   String filter = "book-filter-string";
   *   for (Book element : libraryClient.listBooks(name, filter).iterateAll()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param name The name of the shelf whose books we'd like to list.
   * @param filter To test python built-in wrapping.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ListBooksPagedResponse listBooks(ShelfName name, String filter) {
    ListBooksRequest request =
        ListBooksRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .setFilter(filter)
            .build();
    return listBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists books in a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   String filter = "book-filter-string";
   *   for (Book element : libraryClient.listBooks(name.toString(), filter).iterateAll()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param name The name of the shelf whose books we'd like to list.
   * @param filter To test python built-in wrapping.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ListBooksPagedResponse listBooks(String name, String filter) {
    ListBooksRequest request =
        ListBooksRequest.newBuilder()
            .setName(name)
            .setFilter(filter)
            .build();
    return listBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists books in a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   String filter = "book-filter-string";
   *   ListBooksRequest request = ListBooksRequest.newBuilder()
   *     .setName(name.toString())
   *     .setFilter(filter)
   *     .build();
   *   for (Book element : libraryClient.listBooks(request).iterateAll()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ListBooksPagedResponse listBooks(ListBooksRequest request) {
    return listBooksPagedCallable()
        .call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists books in a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   String filter = "book-filter-string";
   *   ListBooksRequest request = ListBooksRequest.newBuilder()
   *     .setName(name.toString())
   *     .setFilter(filter)
   *     .build();
   *   ApiFuture&lt;ListBooksPagedResponse&gt; future = libraryClient.listBooksPagedCallable().futureCall(request);
   *   // Do something
   *   for (Book element : future.get().iterateAll()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   */
  public final UnaryCallable<ListBooksRequest, ListBooksPagedResponse> listBooksPagedCallable() {
    return stub.listBooksPagedCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists books in a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   String filter = "book-filter-string";
   *   ListBooksRequest request = ListBooksRequest.newBuilder()
   *     .setName(name.toString())
   *     .setFilter(filter)
   *     .build();
   *   while (true) {
   *     ListBooksResponse response = libraryClient.listBooksCallable().call(request);
   *     for (Book element : response.getBooksList()) {
   *       // doThingsWith(element);
   *     }
   *     String nextPageToken = response.getNextPageToken();
   *     if (!Strings.isNullOrEmpty(nextPageToken)) {
   *       request = request.toBuilder().setPageToken(nextPageToken).build();
   *     } else {
   *       break;
   *     }
   *   }
   * }
   * </code></pre>
   */
  public final UnaryCallable<ListBooksRequest, ListBooksResponse> listBooksCallable() {
    return stub.listBooksCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Deletes a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   libraryClient.deleteBook(name);
   * }
   * </code></pre>
   *
   * @param name The name of the book to delete.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void deleteBook(BookName name) {
    DeleteBookRequest request =
        DeleteBookRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .build();
    deleteBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Deletes a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   libraryClient.deleteBook(name.toString());
   * }
   * </code></pre>
   *
   * @param name The name of the book to delete.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void deleteBook(String name) {
    DeleteBookRequest request =
        DeleteBookRequest.newBuilder()
            .setName(name)
            .build();
    deleteBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Deletes a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   DeleteBookRequest request = DeleteBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   libraryClient.deleteBook(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void deleteBook(DeleteBookRequest request) {
    deleteBookCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Deletes a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   DeleteBookRequest request = DeleteBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   ApiFuture&lt;Void&gt; future = libraryClient.deleteBookCallable().futureCall(request);
   *   // Do something
   *   future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<DeleteBookRequest, Empty> deleteBookCallable() {
    return stub.deleteBookCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   Book book = Book.newBuilder().build();
   *   Book response = libraryClient.updateBook(name, book);
   * }
   * </code></pre>
   *
   * @param name The name of the book to update.
   * @param book The book to update with.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book updateBook(BookName name, Book book) {
    UpdateBookRequest request =
        UpdateBookRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .setBook(book)
            .build();
    return updateBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   Book book = Book.newBuilder().build();
   *   Book response = libraryClient.updateBook(name.toString(), book);
   * }
   * </code></pre>
   *
   * @param name The name of the book to update.
   * @param book The book to update with.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book updateBook(String name, Book book) {
    UpdateBookRequest request =
        UpdateBookRequest.newBuilder()
            .setName(name)
            .setBook(book)
            .build();
    return updateBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   String optionalFoo = "";
   *   Book book = Book.newBuilder().build();
   *   FieldMask updateMask = FieldMask.newBuilder().build();
   *   com.google.example.library.v1.FieldMask physicalMask = com.google.example.library.v1.FieldMask.newBuilder().build();
   *   Book response = libraryClient.updateBook(name, optionalFoo, book, updateMask, physicalMask);
   * }
   * </code></pre>
   *
   * @param name The name of the book to update.
   * @param optionalFoo An optional foo.
   * @param book The book to update with.
   * @param updateMask A field mask to apply, rendered as an HTTP parameter.
   * @param physicalMask To test Python import clash resolution.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book updateBook(BookName name, String optionalFoo, Book book, FieldMask updateMask, com.google.example.library.v1.FieldMask physicalMask) {
    UpdateBookRequest request =
        UpdateBookRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .setOptionalFoo(optionalFoo)
            .setBook(book)
            .setUpdateMask(updateMask)
            .setPhysicalMask(physicalMask)
            .build();
    return updateBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   String optionalFoo = "";
   *   Book book = Book.newBuilder().build();
   *   FieldMask updateMask = FieldMask.newBuilder().build();
   *   com.google.example.library.v1.FieldMask physicalMask = com.google.example.library.v1.FieldMask.newBuilder().build();
   *   Book response = libraryClient.updateBook(name.toString(), optionalFoo, book, updateMask, physicalMask);
   * }
   * </code></pre>
   *
   * @param name The name of the book to update.
   * @param optionalFoo An optional foo.
   * @param book The book to update with.
   * @param updateMask A field mask to apply, rendered as an HTTP parameter.
   * @param physicalMask To test Python import clash resolution.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book updateBook(String name, String optionalFoo, Book book, FieldMask updateMask, com.google.example.library.v1.FieldMask physicalMask) {
    UpdateBookRequest request =
        UpdateBookRequest.newBuilder()
            .setName(name)
            .setOptionalFoo(optionalFoo)
            .setBook(book)
            .setUpdateMask(updateMask)
            .setPhysicalMask(physicalMask)
            .build();
    return updateBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   Book book = Book.newBuilder().build();
   *   UpdateBookRequest request = UpdateBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .setBook(book)
   *     .build();
   *   Book response = libraryClient.updateBook(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book updateBook(UpdateBookRequest request) {
    return updateBookCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   Book book = Book.newBuilder().build();
   *   UpdateBookRequest request = UpdateBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .setBook(book)
   *     .build();
   *   ApiFuture&lt;Book&gt; future = libraryClient.updateBookCallable().futureCall(request);
   *   // Do something
   *   Book response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<UpdateBookRequest, Book> updateBookCallable() {
    return stub.updateBookCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Moves a book to another shelf, and returns the new book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   ShelfName otherShelfName = ShelfName.of("[SHELF]");
   *   Book response = libraryClient.moveBook(name, otherShelfName);
   * }
   * </code></pre>
   *
   * @param name The name of the book to move.
   * @param otherShelfName The name of the destination shelf.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book moveBook(BookName name, ShelfName otherShelfName) {
    MoveBookRequest request =
        MoveBookRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .setOtherShelfName(otherShelfName == null ? null : otherShelfName.toString())
            .build();
    return moveBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Moves a book to another shelf, and returns the new book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   ShelfName otherShelfName = ShelfName.of("[SHELF]");
   *   Book response = libraryClient.moveBook(name.toString(), otherShelfName.toString());
   * }
   * </code></pre>
   *
   * @param name The name of the book to move.
   * @param otherShelfName The name of the destination shelf.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book moveBook(String name, String otherShelfName) {
    MoveBookRequest request =
        MoveBookRequest.newBuilder()
            .setName(name)
            .setOtherShelfName(otherShelfName)
            .build();
    return moveBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Moves a book to another shelf, and returns the new book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   ShelfName otherShelfName = ShelfName.of("[SHELF]");
   *   MoveBookRequest request = MoveBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .setOtherShelfName(otherShelfName.toString())
   *     .build();
   *   Book response = libraryClient.moveBook(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book moveBook(MoveBookRequest request) {
    return moveBookCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Moves a book to another shelf, and returns the new book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   ShelfName otherShelfName = ShelfName.of("[SHELF]");
   *   MoveBookRequest request = MoveBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .setOtherShelfName(otherShelfName.toString())
   *     .build();
   *   ApiFuture&lt;Book&gt; future = libraryClient.moveBookCallable().futureCall(request);
   *   // Do something
   *   Book response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<MoveBookRequest, Book> moveBookCallable() {
    return stub.moveBookCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists a primitive resource. To test go page streaming.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *
   *   for (ResourceName element : libraryClient.listStrings().iterateAllAsResourceName()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ListStringsPagedResponse listStrings() {
    ListStringsRequest request =
        ListStringsRequest.newBuilder().build();
    return listStrings(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists a primitive resource. To test go page streaming.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ResourceName name = ArchiveName.of("[ARCHIVE]");
   *   for (ResourceName element : libraryClient.listStrings(name).iterateAllAsResourceName()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param name
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ListStringsPagedResponse listStrings(ResourceName name) {
    ListStringsRequest request =
        ListStringsRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .build();
    return listStrings(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists a primitive resource. To test go page streaming.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ResourceName name = ArchiveName.of("[ARCHIVE]");
   *   for (ResourceName element : libraryClient.listStrings(name.toString()).iterateAllAsResourceName()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param name
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ListStringsPagedResponse listStrings(String name) {
    ListStringsRequest request =
        ListStringsRequest.newBuilder()
            .setName(name)
            .build();
    return listStrings(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists a primitive resource. To test go page streaming.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ListStringsRequest request = ListStringsRequest.newBuilder().build();
   *   for (ResourceName element : libraryClient.listStrings(request).iterateAllAsResourceName()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ListStringsPagedResponse listStrings(ListStringsRequest request) {
    return listStringsPagedCallable()
        .call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists a primitive resource. To test go page streaming.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ListStringsRequest request = ListStringsRequest.newBuilder().build();
   *   ApiFuture&lt;ListStringsPagedResponse&gt; future = libraryClient.listStringsPagedCallable().futureCall(request);
   *   // Do something
   *   for (ResourceName element : future.get().iterateAllAsResourceName()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   */
  public final UnaryCallable<ListStringsRequest, ListStringsPagedResponse> listStringsPagedCallable() {
    return stub.listStringsPagedCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists a primitive resource. To test go page streaming.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ListStringsRequest request = ListStringsRequest.newBuilder().build();
   *   while (true) {
   *     ListStringsResponse response = libraryClient.listStringsCallable().call(request);
   *     for (ResourceName element : UntypedResourceName.parseList(response.getStringsList())) {
   *       // doThingsWith(element);
   *     }
   *     String nextPageToken = response.getNextPageToken();
   *     if (!Strings.isNullOrEmpty(nextPageToken)) {
   *       request = request.toBuilder().setPageToken(nextPageToken).build();
   *     } else {
   *       break;
   *     }
   *   }
   * }
   * </code></pre>
   */
  public final UnaryCallable<ListStringsRequest, ListStringsResponse> listStringsCallable() {
    return stub.listStringsCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Adds comments to a book
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   ByteString comment = ByteString.copyFromUtf8("");
   *   Comment.Stage stage = Comment.Stage.UNSET;
   *   SomeMessage2.SomeMessage3.Alignment alignment = SomeMessage2.SomeMessage3.Alignment.CHAR;
   *   Comment commentsElement = Comment.newBuilder()
   *     .setComment(comment)
   *     .setStage(stage)
   *     .setAlignment(alignment)
   *     .build();
   *   List&lt;Comment&gt; comments = Arrays.asList(commentsElement);
   *   libraryClient.addComments(name, comments);
   * }
   * </code></pre>
   *
   * @param name
   * @param comments
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void addComments(BookName name, List<Comment> comments) {
    AddCommentsRequest request =
        AddCommentsRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .addAllComments(comments)
            .build();
    addComments(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Adds comments to a book
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   ByteString comment = ByteString.copyFromUtf8("");
   *   Comment.Stage stage = Comment.Stage.UNSET;
   *   SomeMessage2.SomeMessage3.Alignment alignment = SomeMessage2.SomeMessage3.Alignment.CHAR;
   *   Comment commentsElement = Comment.newBuilder()
   *     .setComment(comment)
   *     .setStage(stage)
   *     .setAlignment(alignment)
   *     .build();
   *   List&lt;Comment&gt; comments = Arrays.asList(commentsElement);
   *   libraryClient.addComments(name.toString(), comments);
   * }
   * </code></pre>
   *
   * @param name
   * @param comments
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void addComments(String name, List<Comment> comments) {
    AddCommentsRequest request =
        AddCommentsRequest.newBuilder()
            .setName(name)
            .addAllComments(comments)
            .build();
    addComments(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Adds comments to a book
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   ByteString comment = ByteString.copyFromUtf8("");
   *   Comment.Stage stage = Comment.Stage.UNSET;
   *   SomeMessage2.SomeMessage3.Alignment alignment = SomeMessage2.SomeMessage3.Alignment.CHAR;
   *   Comment commentsElement = Comment.newBuilder()
   *     .setComment(comment)
   *     .setStage(stage)
   *     .setAlignment(alignment)
   *     .build();
   *   List&lt;Comment&gt; comments = Arrays.asList(commentsElement);
   *   AddCommentsRequest request = AddCommentsRequest.newBuilder()
   *     .setName(name.toString())
   *     .addAllComments(comments)
   *     .build();
   *   libraryClient.addComments(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void addComments(AddCommentsRequest request) {
    addCommentsCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Adds comments to a book
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   ByteString comment = ByteString.copyFromUtf8("");
   *   Comment.Stage stage = Comment.Stage.UNSET;
   *   SomeMessage2.SomeMessage3.Alignment alignment = SomeMessage2.SomeMessage3.Alignment.CHAR;
   *   Comment commentsElement = Comment.newBuilder()
   *     .setComment(comment)
   *     .setStage(stage)
   *     .setAlignment(alignment)
   *     .build();
   *   List&lt;Comment&gt; comments = Arrays.asList(commentsElement);
   *   AddCommentsRequest request = AddCommentsRequest.newBuilder()
   *     .setName(name.toString())
   *     .addAllComments(comments)
   *     .build();
   *   ApiFuture&lt;Void&gt; future = libraryClient.addCommentsCallable().futureCall(request);
   *   // Do something
   *   future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<AddCommentsRequest, Empty> addCommentsCallable() {
    return stub.addCommentsCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book from an archive.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ArchivedBookName name = ArchivedBookName.of("[ARCHIVE]", "[BOOK]");
   *   ProjectName parent = ProjectName.of("[PROJECT]");
   *   BookFromArchive response = libraryClient.getBookFromArchive(name, parent);
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @param parent
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final BookFromArchive getBookFromArchive(ArchivedBookName name, ProjectName parent) {
    GetBookFromArchiveRequest request =
        GetBookFromArchiveRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .setParent(parent == null ? null : parent.toString())
            .build();
    return getBookFromArchive(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book from an archive.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ArchivedBookName name = ArchivedBookName.of("[ARCHIVE]", "[BOOK]");
   *   ProjectName parent = ProjectName.of("[PROJECT]");
   *   BookFromArchive response = libraryClient.getBookFromArchive(name.toString(), parent.toString());
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @param parent
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final BookFromArchive getBookFromArchive(String name, String parent) {
    GetBookFromArchiveRequest request =
        GetBookFromArchiveRequest.newBuilder()
            .setName(name)
            .setParent(parent)
            .build();
    return getBookFromArchive(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book from an archive.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ArchivedBookName name = ArchivedBookName.of("[ARCHIVE]", "[BOOK]");
   *   ProjectName parent = ProjectName.of("[PROJECT]");
   *   GetBookFromArchiveRequest request = GetBookFromArchiveRequest.newBuilder()
   *     .setName(name.toString())
   *     .setParent(parent.toString())
   *     .build();
   *   BookFromArchive response = libraryClient.getBookFromArchive(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final BookFromArchive getBookFromArchive(GetBookFromArchiveRequest request) {
    return getBookFromArchiveCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book from an archive.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ArchivedBookName name = ArchivedBookName.of("[ARCHIVE]", "[BOOK]");
   *   ProjectName parent = ProjectName.of("[PROJECT]");
   *   GetBookFromArchiveRequest request = GetBookFromArchiveRequest.newBuilder()
   *     .setName(name.toString())
   *     .setParent(parent.toString())
   *     .build();
   *   ApiFuture&lt;BookFromArchive&gt; future = libraryClient.getBookFromArchiveCallable().futureCall(request);
   *   // Do something
   *   BookFromArchive response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveCallable() {
    return stub.getBookFromArchiveCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book from a shelf or archive.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   BookName altBookName = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   LocationName place = LocationName.of("[PROJECT]", "[LOCATION]");
   *   FolderName folder = FolderName.of("[FOLDER]");
   *   BookFromAnywhere response = libraryClient.getBookFromAnywhere(name, altBookName, place, folder);
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @param altBookName An alternate book name, used to test restricting flattened field to a
   * single resource name type in a oneof.
   * @param place
   * @param folder
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final BookFromAnywhere getBookFromAnywhere(BookName name, BookName altBookName, LocationName place, FolderName folder) {
    GetBookFromAnywhereRequest request =
        GetBookFromAnywhereRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .setAltBookName(altBookName == null ? null : altBookName.toString())
            .setPlace(place == null ? null : place.toString())
            .setFolder(folder == null ? null : folder.toString())
            .build();
    return getBookFromAnywhere(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book from a shelf or archive.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   BookName altBookName = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   LocationName place = LocationName.of("[PROJECT]", "[LOCATION]");
   *   FolderName folder = FolderName.of("[FOLDER]");
   *   BookFromAnywhere response = libraryClient.getBookFromAnywhere(name.toString(), altBookName.toString(), place.toString(), folder.toString());
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @param altBookName An alternate book name, used to test restricting flattened field to a
   * single resource name type in a oneof.
   * @param place
   * @param folder
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final BookFromAnywhere getBookFromAnywhere(String name, String altBookName, String place, String folder) {
    GetBookFromAnywhereRequest request =
        GetBookFromAnywhereRequest.newBuilder()
            .setName(name)
            .setAltBookName(altBookName)
            .setPlace(place)
            .setFolder(folder)
            .build();
    return getBookFromAnywhere(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book from a shelf or archive.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   BookName altBookName = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   LocationName place = LocationName.of("[PROJECT]", "[LOCATION]");
   *   FolderName folder = FolderName.of("[FOLDER]");
   *   GetBookFromAnywhereRequest request = GetBookFromAnywhereRequest.newBuilder()
   *     .setName(name.toString())
   *     .setAltBookName(altBookName.toString())
   *     .setPlace(place.toString())
   *     .setFolder(folder.toString())
   *     .build();
   *   BookFromAnywhere response = libraryClient.getBookFromAnywhere(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final BookFromAnywhere getBookFromAnywhere(GetBookFromAnywhereRequest request) {
    return getBookFromAnywhereCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book from a shelf or archive.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   BookName altBookName = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   LocationName place = LocationName.of("[PROJECT]", "[LOCATION]");
   *   FolderName folder = FolderName.of("[FOLDER]");
   *   GetBookFromAnywhereRequest request = GetBookFromAnywhereRequest.newBuilder()
   *     .setName(name.toString())
   *     .setAltBookName(altBookName.toString())
   *     .setPlace(place.toString())
   *     .setFolder(folder.toString())
   *     .build();
   *   ApiFuture&lt;BookFromAnywhere&gt; future = libraryClient.getBookFromAnywhereCallable().futureCall(request);
   *   // Do something
   *   BookFromAnywhere response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereCallable() {
    return stub.getBookFromAnywhereCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test proper OneOf-Any resource name mapping
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   BookFromAnywhere response = libraryClient.getBookFromAbsolutelyAnywhere(name);
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final BookFromAnywhere getBookFromAbsolutelyAnywhere(BookName name) {
    GetBookFromAbsolutelyAnywhereRequest request =
        GetBookFromAbsolutelyAnywhereRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .build();
    return getBookFromAbsolutelyAnywhere(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test proper OneOf-Any resource name mapping
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   BookFromAnywhere response = libraryClient.getBookFromAbsolutelyAnywhere(name.toString());
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final BookFromAnywhere getBookFromAbsolutelyAnywhere(String name) {
    GetBookFromAbsolutelyAnywhereRequest request =
        GetBookFromAbsolutelyAnywhereRequest.newBuilder()
            .setName(name)
            .build();
    return getBookFromAbsolutelyAnywhere(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test proper OneOf-Any resource name mapping
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   GetBookFromAbsolutelyAnywhereRequest request = GetBookFromAbsolutelyAnywhereRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   BookFromAnywhere response = libraryClient.getBookFromAbsolutelyAnywhere(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final BookFromAnywhere getBookFromAbsolutelyAnywhere(GetBookFromAbsolutelyAnywhereRequest request) {
    return getBookFromAbsolutelyAnywhereCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test proper OneOf-Any resource name mapping
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   GetBookFromAbsolutelyAnywhereRequest request = GetBookFromAbsolutelyAnywhereRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   ApiFuture&lt;BookFromAnywhere&gt; future = libraryClient.getBookFromAbsolutelyAnywhereCallable().futureCall(request);
   *   // Do something
   *   BookFromAnywhere response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere> getBookFromAbsolutelyAnywhereCallable() {
    return stub.getBookFromAbsolutelyAnywhereCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates the index of a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   String indexName = "default index";
   *   String indexMapItem = "";
   *   Map&lt;String, String&gt; indexMap = new HashMap&lt;&gt;();
   *   indexMap.put("default_key", indexMapItem);
   *   libraryClient.updateBookIndex(name, indexName, indexMap);
   * }
   * </code></pre>
   *
   * @param name The name of the book to update.
   * @param indexName The name of the index for the book
   * @param indexMap The index to update the book with
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void updateBookIndex(BookName name, String indexName, Map<String, String> indexMap) {
    UpdateBookIndexRequest request =
        UpdateBookIndexRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .setIndexName(indexName)
            .putAllIndexMap(indexMap)
            .build();
    updateBookIndex(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates the index of a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   String indexName = "default index";
   *   String indexMapItem = "";
   *   Map&lt;String, String&gt; indexMap = new HashMap&lt;&gt;();
   *   indexMap.put("default_key", indexMapItem);
   *   libraryClient.updateBookIndex(name.toString(), indexName, indexMap);
   * }
   * </code></pre>
   *
   * @param name The name of the book to update.
   * @param indexName The name of the index for the book
   * @param indexMap The index to update the book with
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void updateBookIndex(String name, String indexName, Map<String, String> indexMap) {
    UpdateBookIndexRequest request =
        UpdateBookIndexRequest.newBuilder()
            .setName(name)
            .setIndexName(indexName)
            .putAllIndexMap(indexMap)
            .build();
    updateBookIndex(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates the index of a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   String indexName = "default index";
   *   String indexMapItem = "";
   *   Map&lt;String, String&gt; indexMap = new HashMap&lt;&gt;();
   *   indexMap.put("default_key", indexMapItem);
   *   UpdateBookIndexRequest request = UpdateBookIndexRequest.newBuilder()
   *     .setName(name.toString())
   *     .setIndexName(indexName)
   *     .putAllIndexMap(indexMap)
   *     .build();
   *   libraryClient.updateBookIndex(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void updateBookIndex(UpdateBookIndexRequest request) {
    updateBookIndexCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates the index of a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   String indexName = "default index";
   *   String indexMapItem = "";
   *   Map&lt;String, String&gt; indexMap = new HashMap&lt;&gt;();
   *   indexMap.put("default_key", indexMapItem);
   *   UpdateBookIndexRequest request = UpdateBookIndexRequest.newBuilder()
   *     .setName(name.toString())
   *     .setIndexName(indexName)
   *     .putAllIndexMap(indexMap)
   *     .build();
   *   ApiFuture&lt;Void&gt; future = libraryClient.updateBookIndexCallable().futureCall(request);
   *   // Do something
   *   future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<UpdateBookIndexRequest, Empty> updateBookIndexCallable() {
    return stub.updateBookIndexCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test server streaming
   * gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.of("[SHELF]");
   *   StreamShelvesRequest request = StreamShelvesRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *
   *   ServerStream&lt;StreamShelvesResponse&gt; stream = libraryClient.streamShelvesCallable().call(request);
   *   for (StreamShelvesResponse response : stream) {
   *     // Do something when receive a response
   *   }
   * }
   * </code></pre>
   */
  public final ServerStreamingCallable<StreamShelvesRequest, StreamShelvesResponse> streamShelvesCallable() {
    return stub.streamShelvesCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test server streaming, non-paged responses.
   * gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   String name = "";
   *   StreamBooksRequest request = StreamBooksRequest.newBuilder()
   *     .setName(name)
   *     .build();
   *
   *   ServerStream&lt;Book&gt; stream = libraryClient.streamBooksCallable().call(request);
   *   for (Book response : stream) {
   *     // Do something when receive a response
   *   }
   * }
   * </code></pre>
   */
  public final ServerStreamingCallable<StreamBooksRequest, Book> streamBooksCallable() {
    return stub.streamBooksCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test bidi-streaming.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BidiStream&lt;DiscussBookRequest, Comment&gt; bidiStream =
   *       libraryClient.discussBookCallable().call();
   *
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   DiscussBookRequest request = DiscussBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   bidiStream.send(request);
   *   for (Comment response : bidiStream) {
   *     // Do something when receive a response
   *   }
   * }
   * </code></pre>
   */
  public final BidiStreamingCallable<DiscussBookRequest, Comment> discussBookCallable() {
    return stub.discussBookCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test client streaming.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ApiStreamObserver&lt;Comment&gt; responseObserver =
   *       new ApiStreamObserver&lt;Comment&gt;() {
   *         {@literal @}Override
   *         public void onNext(Comment response) {
   *           // Do something when receive a response
   *         }
   *
   *         {@literal @}Override
   *         public void onError(Throwable t) {
   *           // Add error-handling
   *         }
   *
   *         {@literal @}Override
   *         public void onCompleted() {
   *           // Do something when complete.
   *         }
   *       };
   *   ApiStreamObserver&lt;DiscussBookRequest&gt; requestObserver =
   *       libraryClient.monologAboutBookCallable().clientStreamingCall(responseObserver);
   *
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   DiscussBookRequest request = DiscussBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   requestObserver.onNext(request);
   * }
   * </code></pre>
   */
  public final ClientStreamingCallable<DiscussBookRequest, Comment> monologAboutBookCallable() {
    return stub.monologAboutBookCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test samplegen response handling when a client streaming method returns Empty.
   * gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ApiStreamObserver&lt;Void&gt; responseObserver =
   *       new ApiStreamObserver&lt;Void&gt;() {
   *         {@literal @}Override
   *         public void onNext(Void response) {
   *           // Do something when receive a response
   *         }
   *
   *         {@literal @}Override
   *         public void onError(Throwable t) {
   *           // Add error-handling
   *         }
   *
   *         {@literal @}Override
   *         public void onCompleted() {
   *           // Do something when complete.
   *         }
   *       };
   *   ApiStreamObserver&lt;DiscussBookRequest&gt; requestObserver =
   *       libraryClient.babbleAboutBookCallable().clientStreamingCall(responseObserver);
   *
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   DiscussBookRequest request = DiscussBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   requestObserver.onNext(request);
   * }
   * </code></pre>
   */
  public final ClientStreamingCallable<DiscussBookRequest, Empty> babbleAboutBookCallable() {
    return stub.babbleAboutBookCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   String namesElement = "";
   *   List&lt;String&gt; names = Arrays.asList(namesElement);
   *   List&lt;String&gt; formattedShelves = new ArrayList&lt;&gt;();
   *   for (BookName element : libraryClient.findRelatedBooks(formattedNames, formattedShelves).iterateAllAsBookName()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param names
   * @param shelves
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final FindRelatedBooksPagedResponse findRelatedBooks(List<String> names, List<String> shelves) {
    FindRelatedBooksRequest request =
        FindRelatedBooksRequest.newBuilder()
            .addAllNames(names)
            .addAllShelves(shelves)
            .build();
    return findRelatedBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName namesElement = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   List&lt;BookName&gt; names = Arrays.asList(namesElement);
   *   List&lt;ShelfName&gt; shelves = new ArrayList&lt;&gt;();
   *   FindRelatedBooksRequest request = FindRelatedBooksRequest.newBuilder()
   *     .addAllNames(BookName.toStringList(names))
   *     .addAllShelves(ShelfName.toStringList(shelves))
   *     .build();
   *   for (BookName element : libraryClient.findRelatedBooks(request).iterateAllAsBookName()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final FindRelatedBooksPagedResponse findRelatedBooks(FindRelatedBooksRequest request) {
    return findRelatedBooksPagedCallable()
        .call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName namesElement = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   List&lt;BookName&gt; names = Arrays.asList(namesElement);
   *   List&lt;ShelfName&gt; shelves = new ArrayList&lt;&gt;();
   *   FindRelatedBooksRequest request = FindRelatedBooksRequest.newBuilder()
   *     .addAllNames(BookName.toStringList(names))
   *     .addAllShelves(ShelfName.toStringList(shelves))
   *     .build();
   *   ApiFuture&lt;FindRelatedBooksPagedResponse&gt; future = libraryClient.findRelatedBooksPagedCallable().futureCall(request);
   *   // Do something
   *   for (BookName element : future.get().iterateAllAsBookName()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   */
  public final UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksPagedResponse> findRelatedBooksPagedCallable() {
    return stub.findRelatedBooksPagedCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName namesElement = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   List&lt;BookName&gt; names = Arrays.asList(namesElement);
   *   List&lt;ShelfName&gt; shelves = new ArrayList&lt;&gt;();
   *   FindRelatedBooksRequest request = FindRelatedBooksRequest.newBuilder()
   *     .addAllNames(BookName.toStringList(names))
   *     .addAllShelves(ShelfName.toStringList(shelves))
   *     .build();
   *   while (true) {
   *     FindRelatedBooksResponse response = libraryClient.findRelatedBooksCallable().call(request);
   *     for (BookName element : BookName.parseList(response.getNamesList())) {
   *       // doThingsWith(element);
   *     }
   *     String nextPageToken = response.getNextPageToken();
   *     if (!Strings.isNullOrEmpty(nextPageToken)) {
   *       request = request.toBuilder().setPageToken(nextPageToken).build();
   *     } else {
   *       break;
   *     }
   *   }
   * }
   * </code></pre>
   */
  public final UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksResponse> findRelatedBooksCallable() {
    return stub.findRelatedBooksCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Adds a label to the entity.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName resource = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   String label = "";
   *   AddLabelRequest request = AddLabelRequest.newBuilder()
   *     .setResource(resource.toString())
   *     .setLabel(label)
   *     .build();
   *   AddLabelResponse response = libraryClient.addLabel(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @Deprecated
  /* package-private */ final AddLabelResponse addLabel(AddLabelRequest request) {
    return addLabelCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Adds a label to the entity.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName resource = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   String label = "";
   *   AddLabelRequest request = AddLabelRequest.newBuilder()
   *     .setResource(resource.toString())
   *     .setLabel(label)
   *     .build();
   *   ApiFuture&lt;AddLabelResponse&gt; future = libraryClient.addLabelCallable().futureCall(request);
   *   // Do something
   *   AddLabelResponse response = future.get();
   * }
   * </code></pre>
   */
  @Deprecated
  /* package-private */ final UnaryCallable<AddLabelRequest, AddLabelResponse> addLabelCallable() {
    return stub.addLabelCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   Book response = libraryClient.getBigBookAsync(name).get();
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationFuture<Book, GetBigBookMetadata> getBigBookAsync(BookName name) {
    GetBookRequest request =
        GetBookRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .build();
    return getBigBookAsync(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   Book response = libraryClient.getBigBookAsync(name.toString()).get();
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationFuture<Book, GetBigBookMetadata> getBigBookAsync(String name) {
    GetBookRequest request =
        GetBookRequest.newBuilder()
            .setName(name)
            .build();
    return getBigBookAsync(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   GetBookRequest request = GetBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   Book response = libraryClient.getBigBookAsync(request).get();
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationFuture<Book, GetBigBookMetadata> getBigBookAsync(GetBookRequest request) {
    return getBigBookOperationCallable().futureCall(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   GetBookRequest request = GetBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   OperationFuture&lt;Book, GetBigBookMetadata&gt; future = libraryClient.getBigBookOperationCallable().futureCall(request);
   *   // Do something
   *   Book response = future.get();
   * }
   * </code></pre>
   */
  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public final OperationCallable<GetBookRequest, Book, GetBigBookMetadata> getBigBookOperationCallable() {
    return stub.getBigBookOperationCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   GetBookRequest request = GetBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   ApiFuture&lt;Operation&gt; future = libraryClient.getBigBookCallable().futureCall(request);
   *   // Do something
   *   Operation response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<GetBookRequest, Operation> getBigBookCallable() {
    return stub.getBigBookCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations with empty return type.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   libraryClient.getBigNothingAsync(name).get();
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationFuture<Empty, GetBigBookMetadata> getBigNothingAsync(BookName name) {
    GetBookRequest request =
        GetBookRequest.newBuilder()
            .setName(name == null ? null : name.toString())
            .build();
    return getBigNothingAsync(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations with empty return type.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   libraryClient.getBigNothingAsync(name.toString()).get();
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationFuture<Empty, GetBigBookMetadata> getBigNothingAsync(String name) {
    GetBookRequest request =
        GetBookRequest.newBuilder()
            .setName(name)
            .build();
    return getBigNothingAsync(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations with empty return type.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   GetBookRequest request = GetBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   libraryClient.getBigNothingAsync(request).get();
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationFuture<Empty, GetBigBookMetadata> getBigNothingAsync(GetBookRequest request) {
    return getBigNothingOperationCallable().futureCall(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations with empty return type.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   GetBookRequest request = GetBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   OperationFuture&lt;Empty, GetBigBookMetadata&gt; future = libraryClient.getBigNothingOperationCallable().futureCall(request);
   *   // Do something
   *   future.get();
   * }
   * </code></pre>
   */
  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public final OperationCallable<GetBookRequest, Empty, GetBigBookMetadata> getBigNothingOperationCallable() {
    return stub.getBigNothingOperationCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations with empty return type.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   GetBookRequest request = GetBookRequest.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   ApiFuture&lt;Operation&gt; future = libraryClient.getBigNothingCallable().futureCall(request);
   *   // Do something
   *   future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<GetBookRequest, Operation> getBigNothingCallable() {
    return stub.getBigNothingCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test optional flattening parameters of all types
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *
   *   TestOptionalRequiredFlatteningParamsResponse response = libraryClient.testOptionalRequiredFlatteningParams();
   * }
   * </code></pre>
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final TestOptionalRequiredFlatteningParamsResponse testOptionalRequiredFlatteningParams() {
    TestOptionalRequiredFlatteningParamsRequest request =
        TestOptionalRequiredFlatteningParamsRequest.newBuilder().build();
    return testOptionalRequiredFlatteningParams(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test optional flattening parameters of all types
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   int requiredSingularInt32 = 0;
   *   long requiredSingularInt64 = 0L;
   *   float requiredSingularFloat = 0.0F;
   *   double requiredSingularDouble = 0.0;
   *   boolean requiredSingularBool = false;
   *   TestOptionalRequiredFlatteningParamsRequest.InnerEnum requiredSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
   *   String requiredSingularString = "";
   *   ByteString requiredSingularBytes = ByteString.copyFromUtf8("");
   *   TestOptionalRequiredFlatteningParamsRequest.InnerMessage requiredSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
   *   BookName requiredSingularResourceName = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   BookName requiredSingularResourceNameOneof = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   String requiredSingularResourceNameCommon = "";
   *   int requiredSingularFixed32 = 0;
   *   long requiredSingularFixed64 = 0L;
   *   List&lt;Integer&gt; requiredRepeatedInt32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; requiredRepeatedInt64 = new ArrayList&lt;&gt;();
   *   List&lt;Float&gt; requiredRepeatedFloat = new ArrayList&lt;&gt;();
   *   List&lt;Double&gt; requiredRepeatedDouble = new ArrayList&lt;&gt;();
   *   List&lt;Boolean&gt; requiredRepeatedBool = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerEnum&gt; requiredRepeatedEnum = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; requiredRepeatedString = new ArrayList&lt;&gt;();
   *   List&lt;ByteString&gt; requiredRepeatedBytes = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerMessage&gt; requiredRepeatedMessage = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; formattedRequiredRepeatedResourceName = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; formattedRequiredRepeatedResourceNameOneof = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; requiredRepeatedResourceNameCommon = new ArrayList&lt;&gt;();
   *   List&lt;Integer&gt; requiredRepeatedFixed32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; requiredRepeatedFixed64 = new ArrayList&lt;&gt;();
   *   Map&lt;Integer, String&gt; requiredMap = new HashMap&lt;&gt;();
   *   Any requiredAnyValue = Any.newBuilder().build();
   *   Struct requiredStructValue = Struct.newBuilder().build();
   *   Value requiredValueValue = Value.newBuilder().build();
   *   ListValue requiredListValueValue = ListValue.newBuilder().build();
   *   Timestamp requiredTimeValue = Timestamp.newBuilder().build();
   *   Duration requiredDurationValue = Duration.newBuilder().build();
   *   FieldMask requiredFieldMaskValue = FieldMask.newBuilder().build();
   *   Int32Value requiredInt32Value = Int32Value.newBuilder().build();
   *   UInt32Value requiredUint32Value = UInt32Value.newBuilder().build();
   *   Int64Value requiredInt64Value = Int64Value.newBuilder().build();
   *   UInt64Value requiredUint64Value = UInt64Value.newBuilder().build();
   *   FloatValue requiredFloatValue = FloatValue.newBuilder().build();
   *   DoubleValue requiredDoubleValue = DoubleValue.newBuilder().build();
   *   StringValue requiredStringValue = StringValue.newBuilder().build();
   *   BoolValue requiredBoolValue = BoolValue.newBuilder().build();
   *   BytesValue requiredBytesValue = BytesValue.newBuilder().build();
   *   List&lt;Any&gt; requiredRepeatedAnyValue = new ArrayList&lt;&gt;();
   *   List&lt;Struct&gt; requiredRepeatedStructValue = new ArrayList&lt;&gt;();
   *   List&lt;Value&gt; requiredRepeatedValueValue = new ArrayList&lt;&gt;();
   *   List&lt;ListValue&gt; requiredRepeatedListValueValue = new ArrayList&lt;&gt;();
   *   List&lt;Timestamp&gt; requiredRepeatedTimeValue = new ArrayList&lt;&gt;();
   *   List&lt;Duration&gt; requiredRepeatedDurationValue = new ArrayList&lt;&gt;();
   *   List&lt;FieldMask&gt; requiredRepeatedFieldMaskValue = new ArrayList&lt;&gt;();
   *   List&lt;Int32Value&gt; requiredRepeatedInt32Value = new ArrayList&lt;&gt;();
   *   List&lt;UInt32Value&gt; requiredRepeatedUint32Value = new ArrayList&lt;&gt;();
   *   List&lt;Int64Value&gt; requiredRepeatedInt64Value = new ArrayList&lt;&gt;();
   *   List&lt;UInt64Value&gt; requiredRepeatedUint64Value = new ArrayList&lt;&gt;();
   *   List&lt;FloatValue&gt; requiredRepeatedFloatValue = new ArrayList&lt;&gt;();
   *   List&lt;DoubleValue&gt; requiredRepeatedDoubleValue = new ArrayList&lt;&gt;();
   *   List&lt;StringValue&gt; requiredRepeatedStringValue = new ArrayList&lt;&gt;();
   *   List&lt;BoolValue&gt; requiredRepeatedBoolValue = new ArrayList&lt;&gt;();
   *   List&lt;BytesValue&gt; requiredRepeatedBytesValue = new ArrayList&lt;&gt;();
   *   int optionalSingularInt32 = 0;
   *   long optionalSingularInt64 = 0L;
   *   float optionalSingularFloat = 0.0F;
   *   double optionalSingularDouble = 0.0;
   *   boolean optionalSingularBool = false;
   *   TestOptionalRequiredFlatteningParamsRequest.InnerEnum optionalSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
   *   String optionalSingularString = "";
   *   ByteString optionalSingularBytes = ByteString.copyFromUtf8("");
   *   TestOptionalRequiredFlatteningParamsRequest.InnerMessage optionalSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
   *   BookName optionalSingularResourceName = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   BookName optionalSingularResourceNameOneof = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   String optionalSingularResourceNameCommon = "";
   *   int optionalSingularFixed32 = 0;
   *   long optionalSingularFixed64 = 0L;
   *   List&lt;Integer&gt; optionalRepeatedInt32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; optionalRepeatedInt64 = new ArrayList&lt;&gt;();
   *   List&lt;Float&gt; optionalRepeatedFloat = new ArrayList&lt;&gt;();
   *   List&lt;Double&gt; optionalRepeatedDouble = new ArrayList&lt;&gt;();
   *   List&lt;Boolean&gt; optionalRepeatedBool = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerEnum&gt; optionalRepeatedEnum = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; optionalRepeatedString = new ArrayList&lt;&gt;();
   *   List&lt;ByteString&gt; optionalRepeatedBytes = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerMessage&gt; optionalRepeatedMessage = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; formattedOptionalRepeatedResourceName = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; formattedOptionalRepeatedResourceNameOneof = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; optionalRepeatedResourceNameCommon = new ArrayList&lt;&gt;();
   *   List&lt;Integer&gt; optionalRepeatedFixed32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; optionalRepeatedFixed64 = new ArrayList&lt;&gt;();
   *   Map&lt;Integer, String&gt; optionalMap = new HashMap&lt;&gt;();
   *   Any anyValue = Any.newBuilder().build();
   *   Struct structValue = Struct.newBuilder().build();
   *   Value valueValue = Value.newBuilder().build();
   *   ListValue listValueValue = ListValue.newBuilder().build();
   *   Timestamp timeValue = Timestamp.newBuilder().build();
   *   Duration durationValue = Duration.newBuilder().build();
   *   FieldMask fieldMaskValue = FieldMask.newBuilder().build();
   *   Int32Value int32Value = Int32Value.newBuilder().build();
   *   UInt32Value uint32Value = UInt32Value.newBuilder().build();
   *   Int64Value int64Value = Int64Value.newBuilder().build();
   *   UInt64Value uint64Value = UInt64Value.newBuilder().build();
   *   FloatValue floatValue = FloatValue.newBuilder().build();
   *   DoubleValue doubleValue = DoubleValue.newBuilder().build();
   *   StringValue stringValue = StringValue.newBuilder().build();
   *   BoolValue boolValue = BoolValue.newBuilder().build();
   *   BytesValue bytesValue = BytesValue.newBuilder().build();
   *   List&lt;Any&gt; repeatedAnyValue = new ArrayList&lt;&gt;();
   *   List&lt;Struct&gt; repeatedStructValue = new ArrayList&lt;&gt;();
   *   List&lt;Value&gt; repeatedValueValue = new ArrayList&lt;&gt;();
   *   List&lt;ListValue&gt; repeatedListValueValue = new ArrayList&lt;&gt;();
   *   List&lt;Timestamp&gt; repeatedTimeValue = new ArrayList&lt;&gt;();
   *   List&lt;Duration&gt; repeatedDurationValue = new ArrayList&lt;&gt;();
   *   List&lt;FieldMask&gt; repeatedFieldMaskValue = new ArrayList&lt;&gt;();
   *   List&lt;Int32Value&gt; repeatedInt32Value = new ArrayList&lt;&gt;();
   *   List&lt;UInt32Value&gt; repeatedUint32Value = new ArrayList&lt;&gt;();
   *   List&lt;Int64Value&gt; repeatedInt64Value = new ArrayList&lt;&gt;();
   *   List&lt;UInt64Value&gt; repeatedUint64Value = new ArrayList&lt;&gt;();
   *   List&lt;FloatValue&gt; repeatedFloatValue = new ArrayList&lt;&gt;();
   *   List&lt;DoubleValue&gt; repeatedDoubleValue = new ArrayList&lt;&gt;();
   *   List&lt;StringValue&gt; repeatedStringValue = new ArrayList&lt;&gt;();
   *   List&lt;BoolValue&gt; repeatedBoolValue = new ArrayList&lt;&gt;();
   *   List&lt;BytesValue&gt; repeatedBytesValue = new ArrayList&lt;&gt;();
   *   TestOptionalRequiredFlatteningParamsResponse response = libraryClient.testOptionalRequiredFlatteningParams(requiredSingularInt32, requiredSingularInt64, requiredSingularFloat, requiredSingularDouble, requiredSingularBool, requiredSingularEnum, requiredSingularString, requiredSingularBytes, requiredSingularMessage, requiredSingularResourceName, requiredSingularResourceNameOneof, requiredSingularResourceNameCommon, requiredSingularFixed32, requiredSingularFixed64, requiredRepeatedInt32, requiredRepeatedInt64, requiredRepeatedFloat, requiredRepeatedDouble, requiredRepeatedBool, requiredRepeatedEnum, requiredRepeatedString, requiredRepeatedBytes, requiredRepeatedMessage, formattedRequiredRepeatedResourceName, formattedRequiredRepeatedResourceNameOneof, requiredRepeatedResourceNameCommon, requiredRepeatedFixed32, requiredRepeatedFixed64, requiredMap, requiredAnyValue, requiredStructValue, requiredValueValue, requiredListValueValue, requiredTimeValue, requiredDurationValue, requiredFieldMaskValue, requiredInt32Value, requiredUint32Value, requiredInt64Value, requiredUint64Value, requiredFloatValue, requiredDoubleValue, requiredStringValue, requiredBoolValue, requiredBytesValue, requiredRepeatedAnyValue, requiredRepeatedStructValue, requiredRepeatedValueValue, requiredRepeatedListValueValue, requiredRepeatedTimeValue, requiredRepeatedDurationValue, requiredRepeatedFieldMaskValue, requiredRepeatedInt32Value, requiredRepeatedUint32Value, requiredRepeatedInt64Value, requiredRepeatedUint64Value, requiredRepeatedFloatValue, requiredRepeatedDoubleValue, requiredRepeatedStringValue, requiredRepeatedBoolValue, requiredRepeatedBytesValue, optionalSingularInt32, optionalSingularInt64, optionalSingularFloat, optionalSingularDouble, optionalSingularBool, optionalSingularEnum, optionalSingularString, optionalSingularBytes, optionalSingularMessage, optionalSingularResourceName, optionalSingularResourceNameOneof, optionalSingularResourceNameCommon, optionalSingularFixed32, optionalSingularFixed64, optionalRepeatedInt32, optionalRepeatedInt64, optionalRepeatedFloat, optionalRepeatedDouble, optionalRepeatedBool, optionalRepeatedEnum, optionalRepeatedString, optionalRepeatedBytes, optionalRepeatedMessage, formattedOptionalRepeatedResourceName, formattedOptionalRepeatedResourceNameOneof, optionalRepeatedResourceNameCommon, optionalRepeatedFixed32, optionalRepeatedFixed64, optionalMap, anyValue, structValue, valueValue, listValueValue, timeValue, durationValue, fieldMaskValue, int32Value, uint32Value, int64Value, uint64Value, floatValue, doubleValue, stringValue, boolValue, bytesValue, repeatedAnyValue, repeatedStructValue, repeatedValueValue, repeatedListValueValue, repeatedTimeValue, repeatedDurationValue, repeatedFieldMaskValue, repeatedInt32Value, repeatedUint32Value, repeatedInt64Value, repeatedUint64Value, repeatedFloatValue, repeatedDoubleValue, repeatedStringValue, repeatedBoolValue, repeatedBytesValue);
   * }
   * </code></pre>
   *
   * @param requiredSingularInt32
   * @param requiredSingularInt64
   * @param requiredSingularFloat
   * @param requiredSingularDouble
   * @param requiredSingularBool
   * @param requiredSingularEnum
   * @param requiredSingularString
   * @param requiredSingularBytes
   * @param requiredSingularMessage
   * @param requiredSingularResourceName
   * @param requiredSingularResourceNameOneof
   * @param requiredSingularResourceNameCommon
   * @param requiredSingularFixed32
   * @param requiredSingularFixed64
   * @param requiredRepeatedInt32
   * @param requiredRepeatedInt64
   * @param requiredRepeatedFloat
   * @param requiredRepeatedDouble
   * @param requiredRepeatedBool
   * @param requiredRepeatedEnum
   * @param requiredRepeatedString
   * @param requiredRepeatedBytes
   * @param requiredRepeatedMessage
   * @param requiredRepeatedResourceName
   * @param requiredRepeatedResourceNameOneof
   * @param requiredRepeatedResourceNameCommon
   * @param requiredRepeatedFixed32
   * @param requiredRepeatedFixed64
   * @param requiredMap
   * @param requiredAnyValue
   * @param requiredStructValue
   * @param requiredValueValue
   * @param requiredListValueValue
   * @param requiredTimeValue
   * @param requiredDurationValue
   * @param requiredFieldMaskValue
   * @param requiredInt32Value
   * @param requiredUint32Value
   * @param requiredInt64Value
   * @param requiredUint64Value
   * @param requiredFloatValue
   * @param requiredDoubleValue
   * @param requiredStringValue
   * @param requiredBoolValue
   * @param requiredBytesValue
   * @param requiredRepeatedAnyValue
   * @param requiredRepeatedStructValue
   * @param requiredRepeatedValueValue
   * @param requiredRepeatedListValueValue
   * @param requiredRepeatedTimeValue
   * @param requiredRepeatedDurationValue
   * @param requiredRepeatedFieldMaskValue
   * @param requiredRepeatedInt32Value
   * @param requiredRepeatedUint32Value
   * @param requiredRepeatedInt64Value
   * @param requiredRepeatedUint64Value
   * @param requiredRepeatedFloatValue
   * @param requiredRepeatedDoubleValue
   * @param requiredRepeatedStringValue
   * @param requiredRepeatedBoolValue
   * @param requiredRepeatedBytesValue
   * @param optionalSingularInt32
   * @param optionalSingularInt64
   * @param optionalSingularFloat
   * @param optionalSingularDouble
   * @param optionalSingularBool
   * @param optionalSingularEnum
   * @param optionalSingularString
   * @param optionalSingularBytes
   * @param optionalSingularMessage
   * @param optionalSingularResourceName
   * @param optionalSingularResourceNameOneof
   * @param optionalSingularResourceNameCommon
   * @param optionalSingularFixed32
   * @param optionalSingularFixed64
   * @param optionalRepeatedInt32
   * @param optionalRepeatedInt64
   * @param optionalRepeatedFloat
   * @param optionalRepeatedDouble
   * @param optionalRepeatedBool
   * @param optionalRepeatedEnum
   * @param optionalRepeatedString
   * @param optionalRepeatedBytes
   * @param optionalRepeatedMessage
   * @param optionalRepeatedResourceName
   * @param optionalRepeatedResourceNameOneof
   * @param optionalRepeatedResourceNameCommon
   * @param optionalRepeatedFixed32
   * @param optionalRepeatedFixed64
   * @param optionalMap
   * @param anyValue
   * @param structValue
   * @param valueValue
   * @param listValueValue
   * @param timeValue
   * @param durationValue
   * @param fieldMaskValue
   * @param int32Value
   * @param uint32Value
   * @param int64Value
   * @param uint64Value
   * @param floatValue
   * @param doubleValue
   * @param stringValue
   * @param boolValue
   * @param bytesValue
   * @param repeatedAnyValue
   * @param repeatedStructValue
   * @param repeatedValueValue
   * @param repeatedListValueValue
   * @param repeatedTimeValue
   * @param repeatedDurationValue
   * @param repeatedFieldMaskValue
   * @param repeatedInt32Value
   * @param repeatedUint32Value
   * @param repeatedInt64Value
   * @param repeatedUint64Value
   * @param repeatedFloatValue
   * @param repeatedDoubleValue
   * @param repeatedStringValue
   * @param repeatedBoolValue
   * @param repeatedBytesValue
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final TestOptionalRequiredFlatteningParamsResponse testOptionalRequiredFlatteningParams(int requiredSingularInt32, long requiredSingularInt64, float requiredSingularFloat, double requiredSingularDouble, boolean requiredSingularBool, TestOptionalRequiredFlatteningParamsRequest.InnerEnum requiredSingularEnum, String requiredSingularString, ByteString requiredSingularBytes, TestOptionalRequiredFlatteningParamsRequest.InnerMessage requiredSingularMessage, BookName requiredSingularResourceName, BookName requiredSingularResourceNameOneof, String requiredSingularResourceNameCommon, int requiredSingularFixed32, long requiredSingularFixed64, List<Integer> requiredRepeatedInt32, List<Long> requiredRepeatedInt64, List<Float> requiredRepeatedFloat, List<Double> requiredRepeatedDouble, List<Boolean> requiredRepeatedBool, List<TestOptionalRequiredFlatteningParamsRequest.InnerEnum> requiredRepeatedEnum, List<String> requiredRepeatedString, List<ByteString> requiredRepeatedBytes, List<TestOptionalRequiredFlatteningParamsRequest.InnerMessage> requiredRepeatedMessage, List<String> requiredRepeatedResourceName, List<String> requiredRepeatedResourceNameOneof, List<String> requiredRepeatedResourceNameCommon, List<Integer> requiredRepeatedFixed32, List<Long> requiredRepeatedFixed64, Map<Integer, String> requiredMap, Any requiredAnyValue, Struct requiredStructValue, Value requiredValueValue, ListValue requiredListValueValue, Timestamp requiredTimeValue, Duration requiredDurationValue, FieldMask requiredFieldMaskValue, Int32Value requiredInt32Value, UInt32Value requiredUint32Value, Int64Value requiredInt64Value, UInt64Value requiredUint64Value, FloatValue requiredFloatValue, DoubleValue requiredDoubleValue, StringValue requiredStringValue, BoolValue requiredBoolValue, BytesValue requiredBytesValue, List<Any> requiredRepeatedAnyValue, List<Struct> requiredRepeatedStructValue, List<Value> requiredRepeatedValueValue, List<ListValue> requiredRepeatedListValueValue, List<Timestamp> requiredRepeatedTimeValue, List<Duration> requiredRepeatedDurationValue, List<FieldMask> requiredRepeatedFieldMaskValue, List<Int32Value> requiredRepeatedInt32Value, List<UInt32Value> requiredRepeatedUint32Value, List<Int64Value> requiredRepeatedInt64Value, List<UInt64Value> requiredRepeatedUint64Value, List<FloatValue> requiredRepeatedFloatValue, List<DoubleValue> requiredRepeatedDoubleValue, List<StringValue> requiredRepeatedStringValue, List<BoolValue> requiredRepeatedBoolValue, List<BytesValue> requiredRepeatedBytesValue, int optionalSingularInt32, long optionalSingularInt64, float optionalSingularFloat, double optionalSingularDouble, boolean optionalSingularBool, TestOptionalRequiredFlatteningParamsRequest.InnerEnum optionalSingularEnum, String optionalSingularString, ByteString optionalSingularBytes, TestOptionalRequiredFlatteningParamsRequest.InnerMessage optionalSingularMessage, BookName optionalSingularResourceName, BookName optionalSingularResourceNameOneof, String optionalSingularResourceNameCommon, int optionalSingularFixed32, long optionalSingularFixed64, List<Integer> optionalRepeatedInt32, List<Long> optionalRepeatedInt64, List<Float> optionalRepeatedFloat, List<Double> optionalRepeatedDouble, List<Boolean> optionalRepeatedBool, List<TestOptionalRequiredFlatteningParamsRequest.InnerEnum> optionalRepeatedEnum, List<String> optionalRepeatedString, List<ByteString> optionalRepeatedBytes, List<TestOptionalRequiredFlatteningParamsRequest.InnerMessage> optionalRepeatedMessage, List<String> optionalRepeatedResourceName, List<String> optionalRepeatedResourceNameOneof, List<String> optionalRepeatedResourceNameCommon, List<Integer> optionalRepeatedFixed32, List<Long> optionalRepeatedFixed64, Map<Integer, String> optionalMap, Any anyValue, Struct structValue, Value valueValue, ListValue listValueValue, Timestamp timeValue, Duration durationValue, FieldMask fieldMaskValue, Int32Value int32Value, UInt32Value uint32Value, Int64Value int64Value, UInt64Value uint64Value, FloatValue floatValue, DoubleValue doubleValue, StringValue stringValue, BoolValue boolValue, BytesValue bytesValue, List<Any> repeatedAnyValue, List<Struct> repeatedStructValue, List<Value> repeatedValueValue, List<ListValue> repeatedListValueValue, List<Timestamp> repeatedTimeValue, List<Duration> repeatedDurationValue, List<FieldMask> repeatedFieldMaskValue, List<Int32Value> repeatedInt32Value, List<UInt32Value> repeatedUint32Value, List<Int64Value> repeatedInt64Value, List<UInt64Value> repeatedUint64Value, List<FloatValue> repeatedFloatValue, List<DoubleValue> repeatedDoubleValue, List<StringValue> repeatedStringValue, List<BoolValue> repeatedBoolValue, List<BytesValue> repeatedBytesValue) {
    TestOptionalRequiredFlatteningParamsRequest request =
        TestOptionalRequiredFlatteningParamsRequest.newBuilder()
            .setRequiredSingularInt32(requiredSingularInt32)
            .setRequiredSingularInt64(requiredSingularInt64)
            .setRequiredSingularFloat(requiredSingularFloat)
            .setRequiredSingularDouble(requiredSingularDouble)
            .setRequiredSingularBool(requiredSingularBool)
            .setRequiredSingularEnum(requiredSingularEnum)
            .setRequiredSingularString(requiredSingularString)
            .setRequiredSingularBytes(requiredSingularBytes)
            .setRequiredSingularMessage(requiredSingularMessage)
            .setRequiredSingularResourceName(requiredSingularResourceName == null ? null : requiredSingularResourceName.toString())
            .setRequiredSingularResourceNameOneof(requiredSingularResourceNameOneof == null ? null : requiredSingularResourceNameOneof.toString())
            .setRequiredSingularResourceNameCommon(requiredSingularResourceNameCommon)
            .setRequiredSingularFixed32(requiredSingularFixed32)
            .setRequiredSingularFixed64(requiredSingularFixed64)
            .addAllRequiredRepeatedInt32(requiredRepeatedInt32)
            .addAllRequiredRepeatedInt64(requiredRepeatedInt64)
            .addAllRequiredRepeatedFloat(requiredRepeatedFloat)
            .addAllRequiredRepeatedDouble(requiredRepeatedDouble)
            .addAllRequiredRepeatedBool(requiredRepeatedBool)
            .addAllRequiredRepeatedEnum(requiredRepeatedEnum)
            .addAllRequiredRepeatedString(requiredRepeatedString)
            .addAllRequiredRepeatedBytes(requiredRepeatedBytes)
            .addAllRequiredRepeatedMessage(requiredRepeatedMessage)
            .addAllRequiredRepeatedResourceName(requiredRepeatedResourceName)
            .addAllRequiredRepeatedResourceNameOneof(requiredRepeatedResourceNameOneof)
            .addAllRequiredRepeatedResourceNameCommon(requiredRepeatedResourceNameCommon)
            .addAllRequiredRepeatedFixed32(requiredRepeatedFixed32)
            .addAllRequiredRepeatedFixed64(requiredRepeatedFixed64)
            .putAllRequiredMap(requiredMap)
            .setRequiredAnyValue(requiredAnyValue)
            .setRequiredStructValue(requiredStructValue)
            .setRequiredValueValue(requiredValueValue)
            .setRequiredListValueValue(requiredListValueValue)
            .setRequiredTimeValue(requiredTimeValue)
            .setRequiredDurationValue(requiredDurationValue)
            .setRequiredFieldMaskValue(requiredFieldMaskValue)
            .setRequiredInt32Value(requiredInt32Value)
            .setRequiredUint32Value(requiredUint32Value)
            .setRequiredInt64Value(requiredInt64Value)
            .setRequiredUint64Value(requiredUint64Value)
            .setRequiredFloatValue(requiredFloatValue)
            .setRequiredDoubleValue(requiredDoubleValue)
            .setRequiredStringValue(requiredStringValue)
            .setRequiredBoolValue(requiredBoolValue)
            .setRequiredBytesValue(requiredBytesValue)
            .addAllRequiredRepeatedAnyValue(requiredRepeatedAnyValue)
            .addAllRequiredRepeatedStructValue(requiredRepeatedStructValue)
            .addAllRequiredRepeatedValueValue(requiredRepeatedValueValue)
            .addAllRequiredRepeatedListValueValue(requiredRepeatedListValueValue)
            .addAllRequiredRepeatedTimeValue(requiredRepeatedTimeValue)
            .addAllRequiredRepeatedDurationValue(requiredRepeatedDurationValue)
            .addAllRequiredRepeatedFieldMaskValue(requiredRepeatedFieldMaskValue)
            .addAllRequiredRepeatedInt32Value(requiredRepeatedInt32Value)
            .addAllRequiredRepeatedUint32Value(requiredRepeatedUint32Value)
            .addAllRequiredRepeatedInt64Value(requiredRepeatedInt64Value)
            .addAllRequiredRepeatedUint64Value(requiredRepeatedUint64Value)
            .addAllRequiredRepeatedFloatValue(requiredRepeatedFloatValue)
            .addAllRequiredRepeatedDoubleValue(requiredRepeatedDoubleValue)
            .addAllRequiredRepeatedStringValue(requiredRepeatedStringValue)
            .addAllRequiredRepeatedBoolValue(requiredRepeatedBoolValue)
            .addAllRequiredRepeatedBytesValue(requiredRepeatedBytesValue)
            .setOptionalSingularInt32(optionalSingularInt32)
            .setOptionalSingularInt64(optionalSingularInt64)
            .setOptionalSingularFloat(optionalSingularFloat)
            .setOptionalSingularDouble(optionalSingularDouble)
            .setOptionalSingularBool(optionalSingularBool)
            .setOptionalSingularEnum(optionalSingularEnum)
            .setOptionalSingularString(optionalSingularString)
            .setOptionalSingularBytes(optionalSingularBytes)
            .setOptionalSingularMessage(optionalSingularMessage)
            .setOptionalSingularResourceName(optionalSingularResourceName == null ? null : optionalSingularResourceName.toString())
            .setOptionalSingularResourceNameOneof(optionalSingularResourceNameOneof == null ? null : optionalSingularResourceNameOneof.toString())
            .setOptionalSingularResourceNameCommon(optionalSingularResourceNameCommon)
            .setOptionalSingularFixed32(optionalSingularFixed32)
            .setOptionalSingularFixed64(optionalSingularFixed64)
            .addAllOptionalRepeatedInt32(optionalRepeatedInt32)
            .addAllOptionalRepeatedInt64(optionalRepeatedInt64)
            .addAllOptionalRepeatedFloat(optionalRepeatedFloat)
            .addAllOptionalRepeatedDouble(optionalRepeatedDouble)
            .addAllOptionalRepeatedBool(optionalRepeatedBool)
            .addAllOptionalRepeatedEnum(optionalRepeatedEnum)
            .addAllOptionalRepeatedString(optionalRepeatedString)
            .addAllOptionalRepeatedBytes(optionalRepeatedBytes)
            .addAllOptionalRepeatedMessage(optionalRepeatedMessage)
            .addAllOptionalRepeatedResourceName(optionalRepeatedResourceName)
            .addAllOptionalRepeatedResourceNameOneof(optionalRepeatedResourceNameOneof)
            .addAllOptionalRepeatedResourceNameCommon(optionalRepeatedResourceNameCommon)
            .addAllOptionalRepeatedFixed32(optionalRepeatedFixed32)
            .addAllOptionalRepeatedFixed64(optionalRepeatedFixed64)
            .putAllOptionalMap(optionalMap)
            .setAnyValue(anyValue)
            .setStructValue(structValue)
            .setValueValue(valueValue)
            .setListValueValue(listValueValue)
            .setTimeValue(timeValue)
            .setDurationValue(durationValue)
            .setFieldMaskValue(fieldMaskValue)
            .setInt32Value(int32Value)
            .setUint32Value(uint32Value)
            .setInt64Value(int64Value)
            .setUint64Value(uint64Value)
            .setFloatValue(floatValue)
            .setDoubleValue(doubleValue)
            .setStringValue(stringValue)
            .setBoolValue(boolValue)
            .setBytesValue(bytesValue)
            .addAllRepeatedAnyValue(repeatedAnyValue)
            .addAllRepeatedStructValue(repeatedStructValue)
            .addAllRepeatedValueValue(repeatedValueValue)
            .addAllRepeatedListValueValue(repeatedListValueValue)
            .addAllRepeatedTimeValue(repeatedTimeValue)
            .addAllRepeatedDurationValue(repeatedDurationValue)
            .addAllRepeatedFieldMaskValue(repeatedFieldMaskValue)
            .addAllRepeatedInt32Value(repeatedInt32Value)
            .addAllRepeatedUint32Value(repeatedUint32Value)
            .addAllRepeatedInt64Value(repeatedInt64Value)
            .addAllRepeatedUint64Value(repeatedUint64Value)
            .addAllRepeatedFloatValue(repeatedFloatValue)
            .addAllRepeatedDoubleValue(repeatedDoubleValue)
            .addAllRepeatedStringValue(repeatedStringValue)
            .addAllRepeatedBoolValue(repeatedBoolValue)
            .addAllRepeatedBytesValue(repeatedBytesValue)
            .build();
    return testOptionalRequiredFlatteningParams(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test optional flattening parameters of all types
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   int requiredSingularInt32 = 0;
   *   long requiredSingularInt64 = 0L;
   *   float requiredSingularFloat = 0.0F;
   *   double requiredSingularDouble = 0.0;
   *   boolean requiredSingularBool = false;
   *   TestOptionalRequiredFlatteningParamsRequest.InnerEnum requiredSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
   *   String requiredSingularString = "";
   *   ByteString requiredSingularBytes = ByteString.copyFromUtf8("");
   *   TestOptionalRequiredFlatteningParamsRequest.InnerMessage requiredSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
   *   BookName requiredSingularResourceName = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   BookName requiredSingularResourceNameOneof = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   String requiredSingularResourceNameCommon = "";
   *   int requiredSingularFixed32 = 0;
   *   long requiredSingularFixed64 = 0L;
   *   List&lt;Integer&gt; requiredRepeatedInt32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; requiredRepeatedInt64 = new ArrayList&lt;&gt;();
   *   List&lt;Float&gt; requiredRepeatedFloat = new ArrayList&lt;&gt;();
   *   List&lt;Double&gt; requiredRepeatedDouble = new ArrayList&lt;&gt;();
   *   List&lt;Boolean&gt; requiredRepeatedBool = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerEnum&gt; requiredRepeatedEnum = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; requiredRepeatedString = new ArrayList&lt;&gt;();
   *   List&lt;ByteString&gt; requiredRepeatedBytes = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerMessage&gt; requiredRepeatedMessage = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; formattedRequiredRepeatedResourceName = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; formattedRequiredRepeatedResourceNameOneof = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; requiredRepeatedResourceNameCommon = new ArrayList&lt;&gt;();
   *   List&lt;Integer&gt; requiredRepeatedFixed32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; requiredRepeatedFixed64 = new ArrayList&lt;&gt;();
   *   Map&lt;Integer, String&gt; requiredMap = new HashMap&lt;&gt;();
   *   Any requiredAnyValue = Any.newBuilder().build();
   *   Struct requiredStructValue = Struct.newBuilder().build();
   *   Value requiredValueValue = Value.newBuilder().build();
   *   ListValue requiredListValueValue = ListValue.newBuilder().build();
   *   Timestamp requiredTimeValue = Timestamp.newBuilder().build();
   *   Duration requiredDurationValue = Duration.newBuilder().build();
   *   FieldMask requiredFieldMaskValue = FieldMask.newBuilder().build();
   *   Int32Value requiredInt32Value = Int32Value.newBuilder().build();
   *   UInt32Value requiredUint32Value = UInt32Value.newBuilder().build();
   *   Int64Value requiredInt64Value = Int64Value.newBuilder().build();
   *   UInt64Value requiredUint64Value = UInt64Value.newBuilder().build();
   *   FloatValue requiredFloatValue = FloatValue.newBuilder().build();
   *   DoubleValue requiredDoubleValue = DoubleValue.newBuilder().build();
   *   StringValue requiredStringValue = StringValue.newBuilder().build();
   *   BoolValue requiredBoolValue = BoolValue.newBuilder().build();
   *   BytesValue requiredBytesValue = BytesValue.newBuilder().build();
   *   List&lt;Any&gt; requiredRepeatedAnyValue = new ArrayList&lt;&gt;();
   *   List&lt;Struct&gt; requiredRepeatedStructValue = new ArrayList&lt;&gt;();
   *   List&lt;Value&gt; requiredRepeatedValueValue = new ArrayList&lt;&gt;();
   *   List&lt;ListValue&gt; requiredRepeatedListValueValue = new ArrayList&lt;&gt;();
   *   List&lt;Timestamp&gt; requiredRepeatedTimeValue = new ArrayList&lt;&gt;();
   *   List&lt;Duration&gt; requiredRepeatedDurationValue = new ArrayList&lt;&gt;();
   *   List&lt;FieldMask&gt; requiredRepeatedFieldMaskValue = new ArrayList&lt;&gt;();
   *   List&lt;Int32Value&gt; requiredRepeatedInt32Value = new ArrayList&lt;&gt;();
   *   List&lt;UInt32Value&gt; requiredRepeatedUint32Value = new ArrayList&lt;&gt;();
   *   List&lt;Int64Value&gt; requiredRepeatedInt64Value = new ArrayList&lt;&gt;();
   *   List&lt;UInt64Value&gt; requiredRepeatedUint64Value = new ArrayList&lt;&gt;();
   *   List&lt;FloatValue&gt; requiredRepeatedFloatValue = new ArrayList&lt;&gt;();
   *   List&lt;DoubleValue&gt; requiredRepeatedDoubleValue = new ArrayList&lt;&gt;();
   *   List&lt;StringValue&gt; requiredRepeatedStringValue = new ArrayList&lt;&gt;();
   *   List&lt;BoolValue&gt; requiredRepeatedBoolValue = new ArrayList&lt;&gt;();
   *   List&lt;BytesValue&gt; requiredRepeatedBytesValue = new ArrayList&lt;&gt;();
   *   int optionalSingularInt32 = 0;
   *   long optionalSingularInt64 = 0L;
   *   float optionalSingularFloat = 0.0F;
   *   double optionalSingularDouble = 0.0;
   *   boolean optionalSingularBool = false;
   *   TestOptionalRequiredFlatteningParamsRequest.InnerEnum optionalSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
   *   String optionalSingularString = "";
   *   ByteString optionalSingularBytes = ByteString.copyFromUtf8("");
   *   TestOptionalRequiredFlatteningParamsRequest.InnerMessage optionalSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
   *   BookName optionalSingularResourceName = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   BookName optionalSingularResourceNameOneof = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   String optionalSingularResourceNameCommon = "";
   *   int optionalSingularFixed32 = 0;
   *   long optionalSingularFixed64 = 0L;
   *   List&lt;Integer&gt; optionalRepeatedInt32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; optionalRepeatedInt64 = new ArrayList&lt;&gt;();
   *   List&lt;Float&gt; optionalRepeatedFloat = new ArrayList&lt;&gt;();
   *   List&lt;Double&gt; optionalRepeatedDouble = new ArrayList&lt;&gt;();
   *   List&lt;Boolean&gt; optionalRepeatedBool = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerEnum&gt; optionalRepeatedEnum = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; optionalRepeatedString = new ArrayList&lt;&gt;();
   *   List&lt;ByteString&gt; optionalRepeatedBytes = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerMessage&gt; optionalRepeatedMessage = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; formattedOptionalRepeatedResourceName = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; formattedOptionalRepeatedResourceNameOneof = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; optionalRepeatedResourceNameCommon = new ArrayList&lt;&gt;();
   *   List&lt;Integer&gt; optionalRepeatedFixed32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; optionalRepeatedFixed64 = new ArrayList&lt;&gt;();
   *   Map&lt;Integer, String&gt; optionalMap = new HashMap&lt;&gt;();
   *   Any anyValue = Any.newBuilder().build();
   *   Struct structValue = Struct.newBuilder().build();
   *   Value valueValue = Value.newBuilder().build();
   *   ListValue listValueValue = ListValue.newBuilder().build();
   *   Timestamp timeValue = Timestamp.newBuilder().build();
   *   Duration durationValue = Duration.newBuilder().build();
   *   FieldMask fieldMaskValue = FieldMask.newBuilder().build();
   *   Int32Value int32Value = Int32Value.newBuilder().build();
   *   UInt32Value uint32Value = UInt32Value.newBuilder().build();
   *   Int64Value int64Value = Int64Value.newBuilder().build();
   *   UInt64Value uint64Value = UInt64Value.newBuilder().build();
   *   FloatValue floatValue = FloatValue.newBuilder().build();
   *   DoubleValue doubleValue = DoubleValue.newBuilder().build();
   *   StringValue stringValue = StringValue.newBuilder().build();
   *   BoolValue boolValue = BoolValue.newBuilder().build();
   *   BytesValue bytesValue = BytesValue.newBuilder().build();
   *   List&lt;Any&gt; repeatedAnyValue = new ArrayList&lt;&gt;();
   *   List&lt;Struct&gt; repeatedStructValue = new ArrayList&lt;&gt;();
   *   List&lt;Value&gt; repeatedValueValue = new ArrayList&lt;&gt;();
   *   List&lt;ListValue&gt; repeatedListValueValue = new ArrayList&lt;&gt;();
   *   List&lt;Timestamp&gt; repeatedTimeValue = new ArrayList&lt;&gt;();
   *   List&lt;Duration&gt; repeatedDurationValue = new ArrayList&lt;&gt;();
   *   List&lt;FieldMask&gt; repeatedFieldMaskValue = new ArrayList&lt;&gt;();
   *   List&lt;Int32Value&gt; repeatedInt32Value = new ArrayList&lt;&gt;();
   *   List&lt;UInt32Value&gt; repeatedUint32Value = new ArrayList&lt;&gt;();
   *   List&lt;Int64Value&gt; repeatedInt64Value = new ArrayList&lt;&gt;();
   *   List&lt;UInt64Value&gt; repeatedUint64Value = new ArrayList&lt;&gt;();
   *   List&lt;FloatValue&gt; repeatedFloatValue = new ArrayList&lt;&gt;();
   *   List&lt;DoubleValue&gt; repeatedDoubleValue = new ArrayList&lt;&gt;();
   *   List&lt;StringValue&gt; repeatedStringValue = new ArrayList&lt;&gt;();
   *   List&lt;BoolValue&gt; repeatedBoolValue = new ArrayList&lt;&gt;();
   *   List&lt;BytesValue&gt; repeatedBytesValue = new ArrayList&lt;&gt;();
   *   TestOptionalRequiredFlatteningParamsResponse response = libraryClient.testOptionalRequiredFlatteningParams(requiredSingularInt32, requiredSingularInt64, requiredSingularFloat, requiredSingularDouble, requiredSingularBool, requiredSingularEnum, requiredSingularString, requiredSingularBytes, requiredSingularMessage, requiredSingularResourceName.toString(), requiredSingularResourceNameOneof.toString(), requiredSingularResourceNameCommon, requiredSingularFixed32, requiredSingularFixed64, requiredRepeatedInt32, requiredRepeatedInt64, requiredRepeatedFloat, requiredRepeatedDouble, requiredRepeatedBool, requiredRepeatedEnum, requiredRepeatedString, requiredRepeatedBytes, requiredRepeatedMessage, formattedRequiredRepeatedResourceName, formattedRequiredRepeatedResourceNameOneof, requiredRepeatedResourceNameCommon, requiredRepeatedFixed32, requiredRepeatedFixed64, requiredMap, requiredAnyValue, requiredStructValue, requiredValueValue, requiredListValueValue, requiredTimeValue, requiredDurationValue, requiredFieldMaskValue, requiredInt32Value, requiredUint32Value, requiredInt64Value, requiredUint64Value, requiredFloatValue, requiredDoubleValue, requiredStringValue, requiredBoolValue, requiredBytesValue, requiredRepeatedAnyValue, requiredRepeatedStructValue, requiredRepeatedValueValue, requiredRepeatedListValueValue, requiredRepeatedTimeValue, requiredRepeatedDurationValue, requiredRepeatedFieldMaskValue, requiredRepeatedInt32Value, requiredRepeatedUint32Value, requiredRepeatedInt64Value, requiredRepeatedUint64Value, requiredRepeatedFloatValue, requiredRepeatedDoubleValue, requiredRepeatedStringValue, requiredRepeatedBoolValue, requiredRepeatedBytesValue, optionalSingularInt32, optionalSingularInt64, optionalSingularFloat, optionalSingularDouble, optionalSingularBool, optionalSingularEnum, optionalSingularString, optionalSingularBytes, optionalSingularMessage, optionalSingularResourceName.toString(), optionalSingularResourceNameOneof.toString(), optionalSingularResourceNameCommon, optionalSingularFixed32, optionalSingularFixed64, optionalRepeatedInt32, optionalRepeatedInt64, optionalRepeatedFloat, optionalRepeatedDouble, optionalRepeatedBool, optionalRepeatedEnum, optionalRepeatedString, optionalRepeatedBytes, optionalRepeatedMessage, formattedOptionalRepeatedResourceName, formattedOptionalRepeatedResourceNameOneof, optionalRepeatedResourceNameCommon, optionalRepeatedFixed32, optionalRepeatedFixed64, optionalMap, anyValue, structValue, valueValue, listValueValue, timeValue, durationValue, fieldMaskValue, int32Value, uint32Value, int64Value, uint64Value, floatValue, doubleValue, stringValue, boolValue, bytesValue, repeatedAnyValue, repeatedStructValue, repeatedValueValue, repeatedListValueValue, repeatedTimeValue, repeatedDurationValue, repeatedFieldMaskValue, repeatedInt32Value, repeatedUint32Value, repeatedInt64Value, repeatedUint64Value, repeatedFloatValue, repeatedDoubleValue, repeatedStringValue, repeatedBoolValue, repeatedBytesValue);
   * }
   * </code></pre>
   *
   * @param requiredSingularInt32
   * @param requiredSingularInt64
   * @param requiredSingularFloat
   * @param requiredSingularDouble
   * @param requiredSingularBool
   * @param requiredSingularEnum
   * @param requiredSingularString
   * @param requiredSingularBytes
   * @param requiredSingularMessage
   * @param requiredSingularResourceName
   * @param requiredSingularResourceNameOneof
   * @param requiredSingularResourceNameCommon
   * @param requiredSingularFixed32
   * @param requiredSingularFixed64
   * @param requiredRepeatedInt32
   * @param requiredRepeatedInt64
   * @param requiredRepeatedFloat
   * @param requiredRepeatedDouble
   * @param requiredRepeatedBool
   * @param requiredRepeatedEnum
   * @param requiredRepeatedString
   * @param requiredRepeatedBytes
   * @param requiredRepeatedMessage
   * @param requiredRepeatedResourceName
   * @param requiredRepeatedResourceNameOneof
   * @param requiredRepeatedResourceNameCommon
   * @param requiredRepeatedFixed32
   * @param requiredRepeatedFixed64
   * @param requiredMap
   * @param requiredAnyValue
   * @param requiredStructValue
   * @param requiredValueValue
   * @param requiredListValueValue
   * @param requiredTimeValue
   * @param requiredDurationValue
   * @param requiredFieldMaskValue
   * @param requiredInt32Value
   * @param requiredUint32Value
   * @param requiredInt64Value
   * @param requiredUint64Value
   * @param requiredFloatValue
   * @param requiredDoubleValue
   * @param requiredStringValue
   * @param requiredBoolValue
   * @param requiredBytesValue
   * @param requiredRepeatedAnyValue
   * @param requiredRepeatedStructValue
   * @param requiredRepeatedValueValue
   * @param requiredRepeatedListValueValue
   * @param requiredRepeatedTimeValue
   * @param requiredRepeatedDurationValue
   * @param requiredRepeatedFieldMaskValue
   * @param requiredRepeatedInt32Value
   * @param requiredRepeatedUint32Value
   * @param requiredRepeatedInt64Value
   * @param requiredRepeatedUint64Value
   * @param requiredRepeatedFloatValue
   * @param requiredRepeatedDoubleValue
   * @param requiredRepeatedStringValue
   * @param requiredRepeatedBoolValue
   * @param requiredRepeatedBytesValue
   * @param optionalSingularInt32
   * @param optionalSingularInt64
   * @param optionalSingularFloat
   * @param optionalSingularDouble
   * @param optionalSingularBool
   * @param optionalSingularEnum
   * @param optionalSingularString
   * @param optionalSingularBytes
   * @param optionalSingularMessage
   * @param optionalSingularResourceName
   * @param optionalSingularResourceNameOneof
   * @param optionalSingularResourceNameCommon
   * @param optionalSingularFixed32
   * @param optionalSingularFixed64
   * @param optionalRepeatedInt32
   * @param optionalRepeatedInt64
   * @param optionalRepeatedFloat
   * @param optionalRepeatedDouble
   * @param optionalRepeatedBool
   * @param optionalRepeatedEnum
   * @param optionalRepeatedString
   * @param optionalRepeatedBytes
   * @param optionalRepeatedMessage
   * @param optionalRepeatedResourceName
   * @param optionalRepeatedResourceNameOneof
   * @param optionalRepeatedResourceNameCommon
   * @param optionalRepeatedFixed32
   * @param optionalRepeatedFixed64
   * @param optionalMap
   * @param anyValue
   * @param structValue
   * @param valueValue
   * @param listValueValue
   * @param timeValue
   * @param durationValue
   * @param fieldMaskValue
   * @param int32Value
   * @param uint32Value
   * @param int64Value
   * @param uint64Value
   * @param floatValue
   * @param doubleValue
   * @param stringValue
   * @param boolValue
   * @param bytesValue
   * @param repeatedAnyValue
   * @param repeatedStructValue
   * @param repeatedValueValue
   * @param repeatedListValueValue
   * @param repeatedTimeValue
   * @param repeatedDurationValue
   * @param repeatedFieldMaskValue
   * @param repeatedInt32Value
   * @param repeatedUint32Value
   * @param repeatedInt64Value
   * @param repeatedUint64Value
   * @param repeatedFloatValue
   * @param repeatedDoubleValue
   * @param repeatedStringValue
   * @param repeatedBoolValue
   * @param repeatedBytesValue
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final TestOptionalRequiredFlatteningParamsResponse testOptionalRequiredFlatteningParams(int requiredSingularInt32, long requiredSingularInt64, float requiredSingularFloat, double requiredSingularDouble, boolean requiredSingularBool, TestOptionalRequiredFlatteningParamsRequest.InnerEnum requiredSingularEnum, String requiredSingularString, ByteString requiredSingularBytes, TestOptionalRequiredFlatteningParamsRequest.InnerMessage requiredSingularMessage, String requiredSingularResourceName, String requiredSingularResourceNameOneof, String requiredSingularResourceNameCommon, int requiredSingularFixed32, long requiredSingularFixed64, List<Integer> requiredRepeatedInt32, List<Long> requiredRepeatedInt64, List<Float> requiredRepeatedFloat, List<Double> requiredRepeatedDouble, List<Boolean> requiredRepeatedBool, List<TestOptionalRequiredFlatteningParamsRequest.InnerEnum> requiredRepeatedEnum, List<String> requiredRepeatedString, List<ByteString> requiredRepeatedBytes, List<TestOptionalRequiredFlatteningParamsRequest.InnerMessage> requiredRepeatedMessage, List<String> requiredRepeatedResourceName, List<String> requiredRepeatedResourceNameOneof, List<String> requiredRepeatedResourceNameCommon, List<Integer> requiredRepeatedFixed32, List<Long> requiredRepeatedFixed64, Map<Integer, String> requiredMap, Any requiredAnyValue, Struct requiredStructValue, Value requiredValueValue, ListValue requiredListValueValue, Timestamp requiredTimeValue, Duration requiredDurationValue, FieldMask requiredFieldMaskValue, Int32Value requiredInt32Value, UInt32Value requiredUint32Value, Int64Value requiredInt64Value, UInt64Value requiredUint64Value, FloatValue requiredFloatValue, DoubleValue requiredDoubleValue, StringValue requiredStringValue, BoolValue requiredBoolValue, BytesValue requiredBytesValue, List<Any> requiredRepeatedAnyValue, List<Struct> requiredRepeatedStructValue, List<Value> requiredRepeatedValueValue, List<ListValue> requiredRepeatedListValueValue, List<Timestamp> requiredRepeatedTimeValue, List<Duration> requiredRepeatedDurationValue, List<FieldMask> requiredRepeatedFieldMaskValue, List<Int32Value> requiredRepeatedInt32Value, List<UInt32Value> requiredRepeatedUint32Value, List<Int64Value> requiredRepeatedInt64Value, List<UInt64Value> requiredRepeatedUint64Value, List<FloatValue> requiredRepeatedFloatValue, List<DoubleValue> requiredRepeatedDoubleValue, List<StringValue> requiredRepeatedStringValue, List<BoolValue> requiredRepeatedBoolValue, List<BytesValue> requiredRepeatedBytesValue, int optionalSingularInt32, long optionalSingularInt64, float optionalSingularFloat, double optionalSingularDouble, boolean optionalSingularBool, TestOptionalRequiredFlatteningParamsRequest.InnerEnum optionalSingularEnum, String optionalSingularString, ByteString optionalSingularBytes, TestOptionalRequiredFlatteningParamsRequest.InnerMessage optionalSingularMessage, String optionalSingularResourceName, String optionalSingularResourceNameOneof, String optionalSingularResourceNameCommon, int optionalSingularFixed32, long optionalSingularFixed64, List<Integer> optionalRepeatedInt32, List<Long> optionalRepeatedInt64, List<Float> optionalRepeatedFloat, List<Double> optionalRepeatedDouble, List<Boolean> optionalRepeatedBool, List<TestOptionalRequiredFlatteningParamsRequest.InnerEnum> optionalRepeatedEnum, List<String> optionalRepeatedString, List<ByteString> optionalRepeatedBytes, List<TestOptionalRequiredFlatteningParamsRequest.InnerMessage> optionalRepeatedMessage, List<String> optionalRepeatedResourceName, List<String> optionalRepeatedResourceNameOneof, List<String> optionalRepeatedResourceNameCommon, List<Integer> optionalRepeatedFixed32, List<Long> optionalRepeatedFixed64, Map<Integer, String> optionalMap, Any anyValue, Struct structValue, Value valueValue, ListValue listValueValue, Timestamp timeValue, Duration durationValue, FieldMask fieldMaskValue, Int32Value int32Value, UInt32Value uint32Value, Int64Value int64Value, UInt64Value uint64Value, FloatValue floatValue, DoubleValue doubleValue, StringValue stringValue, BoolValue boolValue, BytesValue bytesValue, List<Any> repeatedAnyValue, List<Struct> repeatedStructValue, List<Value> repeatedValueValue, List<ListValue> repeatedListValueValue, List<Timestamp> repeatedTimeValue, List<Duration> repeatedDurationValue, List<FieldMask> repeatedFieldMaskValue, List<Int32Value> repeatedInt32Value, List<UInt32Value> repeatedUint32Value, List<Int64Value> repeatedInt64Value, List<UInt64Value> repeatedUint64Value, List<FloatValue> repeatedFloatValue, List<DoubleValue> repeatedDoubleValue, List<StringValue> repeatedStringValue, List<BoolValue> repeatedBoolValue, List<BytesValue> repeatedBytesValue) {
    TestOptionalRequiredFlatteningParamsRequest request =
        TestOptionalRequiredFlatteningParamsRequest.newBuilder()
            .setRequiredSingularInt32(requiredSingularInt32)
            .setRequiredSingularInt64(requiredSingularInt64)
            .setRequiredSingularFloat(requiredSingularFloat)
            .setRequiredSingularDouble(requiredSingularDouble)
            .setRequiredSingularBool(requiredSingularBool)
            .setRequiredSingularEnum(requiredSingularEnum)
            .setRequiredSingularString(requiredSingularString)
            .setRequiredSingularBytes(requiredSingularBytes)
            .setRequiredSingularMessage(requiredSingularMessage)
            .setRequiredSingularResourceName(requiredSingularResourceName)
            .setRequiredSingularResourceNameOneof(requiredSingularResourceNameOneof)
            .setRequiredSingularResourceNameCommon(requiredSingularResourceNameCommon)
            .setRequiredSingularFixed32(requiredSingularFixed32)
            .setRequiredSingularFixed64(requiredSingularFixed64)
            .addAllRequiredRepeatedInt32(requiredRepeatedInt32)
            .addAllRequiredRepeatedInt64(requiredRepeatedInt64)
            .addAllRequiredRepeatedFloat(requiredRepeatedFloat)
            .addAllRequiredRepeatedDouble(requiredRepeatedDouble)
            .addAllRequiredRepeatedBool(requiredRepeatedBool)
            .addAllRequiredRepeatedEnum(requiredRepeatedEnum)
            .addAllRequiredRepeatedString(requiredRepeatedString)
            .addAllRequiredRepeatedBytes(requiredRepeatedBytes)
            .addAllRequiredRepeatedMessage(requiredRepeatedMessage)
            .addAllRequiredRepeatedResourceName(requiredRepeatedResourceName)
            .addAllRequiredRepeatedResourceNameOneof(requiredRepeatedResourceNameOneof)
            .addAllRequiredRepeatedResourceNameCommon(requiredRepeatedResourceNameCommon)
            .addAllRequiredRepeatedFixed32(requiredRepeatedFixed32)
            .addAllRequiredRepeatedFixed64(requiredRepeatedFixed64)
            .putAllRequiredMap(requiredMap)
            .setRequiredAnyValue(requiredAnyValue)
            .setRequiredStructValue(requiredStructValue)
            .setRequiredValueValue(requiredValueValue)
            .setRequiredListValueValue(requiredListValueValue)
            .setRequiredTimeValue(requiredTimeValue)
            .setRequiredDurationValue(requiredDurationValue)
            .setRequiredFieldMaskValue(requiredFieldMaskValue)
            .setRequiredInt32Value(requiredInt32Value)
            .setRequiredUint32Value(requiredUint32Value)
            .setRequiredInt64Value(requiredInt64Value)
            .setRequiredUint64Value(requiredUint64Value)
            .setRequiredFloatValue(requiredFloatValue)
            .setRequiredDoubleValue(requiredDoubleValue)
            .setRequiredStringValue(requiredStringValue)
            .setRequiredBoolValue(requiredBoolValue)
            .setRequiredBytesValue(requiredBytesValue)
            .addAllRequiredRepeatedAnyValue(requiredRepeatedAnyValue)
            .addAllRequiredRepeatedStructValue(requiredRepeatedStructValue)
            .addAllRequiredRepeatedValueValue(requiredRepeatedValueValue)
            .addAllRequiredRepeatedListValueValue(requiredRepeatedListValueValue)
            .addAllRequiredRepeatedTimeValue(requiredRepeatedTimeValue)
            .addAllRequiredRepeatedDurationValue(requiredRepeatedDurationValue)
            .addAllRequiredRepeatedFieldMaskValue(requiredRepeatedFieldMaskValue)
            .addAllRequiredRepeatedInt32Value(requiredRepeatedInt32Value)
            .addAllRequiredRepeatedUint32Value(requiredRepeatedUint32Value)
            .addAllRequiredRepeatedInt64Value(requiredRepeatedInt64Value)
            .addAllRequiredRepeatedUint64Value(requiredRepeatedUint64Value)
            .addAllRequiredRepeatedFloatValue(requiredRepeatedFloatValue)
            .addAllRequiredRepeatedDoubleValue(requiredRepeatedDoubleValue)
            .addAllRequiredRepeatedStringValue(requiredRepeatedStringValue)
            .addAllRequiredRepeatedBoolValue(requiredRepeatedBoolValue)
            .addAllRequiredRepeatedBytesValue(requiredRepeatedBytesValue)
            .setOptionalSingularInt32(optionalSingularInt32)
            .setOptionalSingularInt64(optionalSingularInt64)
            .setOptionalSingularFloat(optionalSingularFloat)
            .setOptionalSingularDouble(optionalSingularDouble)
            .setOptionalSingularBool(optionalSingularBool)
            .setOptionalSingularEnum(optionalSingularEnum)
            .setOptionalSingularString(optionalSingularString)
            .setOptionalSingularBytes(optionalSingularBytes)
            .setOptionalSingularMessage(optionalSingularMessage)
            .setOptionalSingularResourceName(optionalSingularResourceName)
            .setOptionalSingularResourceNameOneof(optionalSingularResourceNameOneof)
            .setOptionalSingularResourceNameCommon(optionalSingularResourceNameCommon)
            .setOptionalSingularFixed32(optionalSingularFixed32)
            .setOptionalSingularFixed64(optionalSingularFixed64)
            .addAllOptionalRepeatedInt32(optionalRepeatedInt32)
            .addAllOptionalRepeatedInt64(optionalRepeatedInt64)
            .addAllOptionalRepeatedFloat(optionalRepeatedFloat)
            .addAllOptionalRepeatedDouble(optionalRepeatedDouble)
            .addAllOptionalRepeatedBool(optionalRepeatedBool)
            .addAllOptionalRepeatedEnum(optionalRepeatedEnum)
            .addAllOptionalRepeatedString(optionalRepeatedString)
            .addAllOptionalRepeatedBytes(optionalRepeatedBytes)
            .addAllOptionalRepeatedMessage(optionalRepeatedMessage)
            .addAllOptionalRepeatedResourceName(optionalRepeatedResourceName)
            .addAllOptionalRepeatedResourceNameOneof(optionalRepeatedResourceNameOneof)
            .addAllOptionalRepeatedResourceNameCommon(optionalRepeatedResourceNameCommon)
            .addAllOptionalRepeatedFixed32(optionalRepeatedFixed32)
            .addAllOptionalRepeatedFixed64(optionalRepeatedFixed64)
            .putAllOptionalMap(optionalMap)
            .setAnyValue(anyValue)
            .setStructValue(structValue)
            .setValueValue(valueValue)
            .setListValueValue(listValueValue)
            .setTimeValue(timeValue)
            .setDurationValue(durationValue)
            .setFieldMaskValue(fieldMaskValue)
            .setInt32Value(int32Value)
            .setUint32Value(uint32Value)
            .setInt64Value(int64Value)
            .setUint64Value(uint64Value)
            .setFloatValue(floatValue)
            .setDoubleValue(doubleValue)
            .setStringValue(stringValue)
            .setBoolValue(boolValue)
            .setBytesValue(bytesValue)
            .addAllRepeatedAnyValue(repeatedAnyValue)
            .addAllRepeatedStructValue(repeatedStructValue)
            .addAllRepeatedValueValue(repeatedValueValue)
            .addAllRepeatedListValueValue(repeatedListValueValue)
            .addAllRepeatedTimeValue(repeatedTimeValue)
            .addAllRepeatedDurationValue(repeatedDurationValue)
            .addAllRepeatedFieldMaskValue(repeatedFieldMaskValue)
            .addAllRepeatedInt32Value(repeatedInt32Value)
            .addAllRepeatedUint32Value(repeatedUint32Value)
            .addAllRepeatedInt64Value(repeatedInt64Value)
            .addAllRepeatedUint64Value(repeatedUint64Value)
            .addAllRepeatedFloatValue(repeatedFloatValue)
            .addAllRepeatedDoubleValue(repeatedDoubleValue)
            .addAllRepeatedStringValue(repeatedStringValue)
            .addAllRepeatedBoolValue(repeatedBoolValue)
            .addAllRepeatedBytesValue(repeatedBytesValue)
            .build();
    return testOptionalRequiredFlatteningParams(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test optional flattening parameters of all types
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   int requiredSingularInt32 = 0;
   *   long requiredSingularInt64 = 0L;
   *   float requiredSingularFloat = 0.0F;
   *   double requiredSingularDouble = 0.0;
   *   boolean requiredSingularBool = false;
   *   TestOptionalRequiredFlatteningParamsRequest.InnerEnum requiredSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
   *   String requiredSingularString = "";
   *   ByteString requiredSingularBytes = ByteString.copyFromUtf8("");
   *   TestOptionalRequiredFlatteningParamsRequest.InnerMessage requiredSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
   *   BookName requiredSingularResourceName = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   BookName requiredSingularResourceNameOneof = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   String requiredSingularResourceNameCommon = "";
   *   int requiredSingularFixed32 = 0;
   *   long requiredSingularFixed64 = 0L;
   *   List&lt;Integer&gt; requiredRepeatedInt32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; requiredRepeatedInt64 = new ArrayList&lt;&gt;();
   *   List&lt;Float&gt; requiredRepeatedFloat = new ArrayList&lt;&gt;();
   *   List&lt;Double&gt; requiredRepeatedDouble = new ArrayList&lt;&gt;();
   *   List&lt;Boolean&gt; requiredRepeatedBool = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerEnum&gt; requiredRepeatedEnum = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; requiredRepeatedString = new ArrayList&lt;&gt;();
   *   List&lt;ByteString&gt; requiredRepeatedBytes = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerMessage&gt; requiredRepeatedMessage = new ArrayList&lt;&gt;();
   *   List&lt;BookName&gt; requiredRepeatedResourceName = new ArrayList&lt;&gt;();
   *   List&lt;BookName&gt; requiredRepeatedResourceNameOneof = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; requiredRepeatedResourceNameCommon = new ArrayList&lt;&gt;();
   *   List&lt;Integer&gt; requiredRepeatedFixed32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; requiredRepeatedFixed64 = new ArrayList&lt;&gt;();
   *   Map&lt;Integer, String&gt; requiredMap = new HashMap&lt;&gt;();
   *   Any requiredAnyValue = Any.newBuilder().build();
   *   Struct requiredStructValue = Struct.newBuilder().build();
   *   Value requiredValueValue = Value.newBuilder().build();
   *   ListValue requiredListValueValue = ListValue.newBuilder().build();
   *   Timestamp requiredTimeValue = Timestamp.newBuilder().build();
   *   Duration requiredDurationValue = Duration.newBuilder().build();
   *   FieldMask requiredFieldMaskValue = FieldMask.newBuilder().build();
   *   Int32Value requiredInt32Value = Int32Value.newBuilder().build();
   *   UInt32Value requiredUint32Value = UInt32Value.newBuilder().build();
   *   Int64Value requiredInt64Value = Int64Value.newBuilder().build();
   *   UInt64Value requiredUint64Value = UInt64Value.newBuilder().build();
   *   FloatValue requiredFloatValue = FloatValue.newBuilder().build();
   *   DoubleValue requiredDoubleValue = DoubleValue.newBuilder().build();
   *   StringValue requiredStringValue = StringValue.newBuilder().build();
   *   BoolValue requiredBoolValue = BoolValue.newBuilder().build();
   *   BytesValue requiredBytesValue = BytesValue.newBuilder().build();
   *   List&lt;Any&gt; requiredRepeatedAnyValue = new ArrayList&lt;&gt;();
   *   List&lt;Struct&gt; requiredRepeatedStructValue = new ArrayList&lt;&gt;();
   *   List&lt;Value&gt; requiredRepeatedValueValue = new ArrayList&lt;&gt;();
   *   List&lt;ListValue&gt; requiredRepeatedListValueValue = new ArrayList&lt;&gt;();
   *   List&lt;Timestamp&gt; requiredRepeatedTimeValue = new ArrayList&lt;&gt;();
   *   List&lt;Duration&gt; requiredRepeatedDurationValue = new ArrayList&lt;&gt;();
   *   List&lt;FieldMask&gt; requiredRepeatedFieldMaskValue = new ArrayList&lt;&gt;();
   *   List&lt;Int32Value&gt; requiredRepeatedInt32Value = new ArrayList&lt;&gt;();
   *   List&lt;UInt32Value&gt; requiredRepeatedUint32Value = new ArrayList&lt;&gt;();
   *   List&lt;Int64Value&gt; requiredRepeatedInt64Value = new ArrayList&lt;&gt;();
   *   List&lt;UInt64Value&gt; requiredRepeatedUint64Value = new ArrayList&lt;&gt;();
   *   List&lt;FloatValue&gt; requiredRepeatedFloatValue = new ArrayList&lt;&gt;();
   *   List&lt;DoubleValue&gt; requiredRepeatedDoubleValue = new ArrayList&lt;&gt;();
   *   List&lt;StringValue&gt; requiredRepeatedStringValue = new ArrayList&lt;&gt;();
   *   List&lt;BoolValue&gt; requiredRepeatedBoolValue = new ArrayList&lt;&gt;();
   *   List&lt;BytesValue&gt; requiredRepeatedBytesValue = new ArrayList&lt;&gt;();
   *   TestOptionalRequiredFlatteningParamsRequest request = TestOptionalRequiredFlatteningParamsRequest.newBuilder()
   *     .setRequiredSingularInt32(requiredSingularInt32)
   *     .setRequiredSingularInt64(requiredSingularInt64)
   *     .setRequiredSingularFloat(requiredSingularFloat)
   *     .setRequiredSingularDouble(requiredSingularDouble)
   *     .setRequiredSingularBool(requiredSingularBool)
   *     .setRequiredSingularEnum(requiredSingularEnum)
   *     .setRequiredSingularString(requiredSingularString)
   *     .setRequiredSingularBytes(requiredSingularBytes)
   *     .setRequiredSingularMessage(requiredSingularMessage)
   *     .setRequiredSingularResourceName(requiredSingularResourceName.toString())
   *     .setRequiredSingularResourceNameOneof(requiredSingularResourceNameOneof.toString())
   *     .setRequiredSingularResourceNameCommon(requiredSingularResourceNameCommon)
   *     .setRequiredSingularFixed32(requiredSingularFixed32)
   *     .setRequiredSingularFixed64(requiredSingularFixed64)
   *     .addAllRequiredRepeatedInt32(requiredRepeatedInt32)
   *     .addAllRequiredRepeatedInt64(requiredRepeatedInt64)
   *     .addAllRequiredRepeatedFloat(requiredRepeatedFloat)
   *     .addAllRequiredRepeatedDouble(requiredRepeatedDouble)
   *     .addAllRequiredRepeatedBool(requiredRepeatedBool)
   *     .addAllRequiredRepeatedEnum(requiredRepeatedEnum)
   *     .addAllRequiredRepeatedString(requiredRepeatedString)
   *     .addAllRequiredRepeatedBytes(requiredRepeatedBytes)
   *     .addAllRequiredRepeatedMessage(requiredRepeatedMessage)
   *     .addAllRequiredRepeatedResourceName(BookName.toStringList(requiredRepeatedResourceName))
   *     .addAllRequiredRepeatedResourceNameOneof(BookName.toStringList(requiredRepeatedResourceNameOneof))
   *     .addAllRequiredRepeatedResourceNameCommon(requiredRepeatedResourceNameCommon)
   *     .addAllRequiredRepeatedFixed32(requiredRepeatedFixed32)
   *     .addAllRequiredRepeatedFixed64(requiredRepeatedFixed64)
   *     .putAllRequiredMap(requiredMap)
   *     .setRequiredAnyValue(requiredAnyValue)
   *     .setRequiredStructValue(requiredStructValue)
   *     .setRequiredValueValue(requiredValueValue)
   *     .setRequiredListValueValue(requiredListValueValue)
   *     .setRequiredTimeValue(requiredTimeValue)
   *     .setRequiredDurationValue(requiredDurationValue)
   *     .setRequiredFieldMaskValue(requiredFieldMaskValue)
   *     .setRequiredInt32Value(requiredInt32Value)
   *     .setRequiredUint32Value(requiredUint32Value)
   *     .setRequiredInt64Value(requiredInt64Value)
   *     .setRequiredUint64Value(requiredUint64Value)
   *     .setRequiredFloatValue(requiredFloatValue)
   *     .setRequiredDoubleValue(requiredDoubleValue)
   *     .setRequiredStringValue(requiredStringValue)
   *     .setRequiredBoolValue(requiredBoolValue)
   *     .setRequiredBytesValue(requiredBytesValue)
   *     .addAllRequiredRepeatedAnyValue(requiredRepeatedAnyValue)
   *     .addAllRequiredRepeatedStructValue(requiredRepeatedStructValue)
   *     .addAllRequiredRepeatedValueValue(requiredRepeatedValueValue)
   *     .addAllRequiredRepeatedListValueValue(requiredRepeatedListValueValue)
   *     .addAllRequiredRepeatedTimeValue(requiredRepeatedTimeValue)
   *     .addAllRequiredRepeatedDurationValue(requiredRepeatedDurationValue)
   *     .addAllRequiredRepeatedFieldMaskValue(requiredRepeatedFieldMaskValue)
   *     .addAllRequiredRepeatedInt32Value(requiredRepeatedInt32Value)
   *     .addAllRequiredRepeatedUint32Value(requiredRepeatedUint32Value)
   *     .addAllRequiredRepeatedInt64Value(requiredRepeatedInt64Value)
   *     .addAllRequiredRepeatedUint64Value(requiredRepeatedUint64Value)
   *     .addAllRequiredRepeatedFloatValue(requiredRepeatedFloatValue)
   *     .addAllRequiredRepeatedDoubleValue(requiredRepeatedDoubleValue)
   *     .addAllRequiredRepeatedStringValue(requiredRepeatedStringValue)
   *     .addAllRequiredRepeatedBoolValue(requiredRepeatedBoolValue)
   *     .addAllRequiredRepeatedBytesValue(requiredRepeatedBytesValue)
   *     .build();
   *   TestOptionalRequiredFlatteningParamsResponse response = libraryClient.testOptionalRequiredFlatteningParams(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final TestOptionalRequiredFlatteningParamsResponse testOptionalRequiredFlatteningParams(TestOptionalRequiredFlatteningParamsRequest request) {
    return testOptionalRequiredFlatteningParamsCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test optional flattening parameters of all types
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   int requiredSingularInt32 = 0;
   *   long requiredSingularInt64 = 0L;
   *   float requiredSingularFloat = 0.0F;
   *   double requiredSingularDouble = 0.0;
   *   boolean requiredSingularBool = false;
   *   TestOptionalRequiredFlatteningParamsRequest.InnerEnum requiredSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
   *   String requiredSingularString = "";
   *   ByteString requiredSingularBytes = ByteString.copyFromUtf8("");
   *   TestOptionalRequiredFlatteningParamsRequest.InnerMessage requiredSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
   *   BookName requiredSingularResourceName = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   BookName requiredSingularResourceNameOneof = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   String requiredSingularResourceNameCommon = "";
   *   int requiredSingularFixed32 = 0;
   *   long requiredSingularFixed64 = 0L;
   *   List&lt;Integer&gt; requiredRepeatedInt32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; requiredRepeatedInt64 = new ArrayList&lt;&gt;();
   *   List&lt;Float&gt; requiredRepeatedFloat = new ArrayList&lt;&gt;();
   *   List&lt;Double&gt; requiredRepeatedDouble = new ArrayList&lt;&gt;();
   *   List&lt;Boolean&gt; requiredRepeatedBool = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerEnum&gt; requiredRepeatedEnum = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; requiredRepeatedString = new ArrayList&lt;&gt;();
   *   List&lt;ByteString&gt; requiredRepeatedBytes = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerMessage&gt; requiredRepeatedMessage = new ArrayList&lt;&gt;();
   *   List&lt;BookName&gt; requiredRepeatedResourceName = new ArrayList&lt;&gt;();
   *   List&lt;BookName&gt; requiredRepeatedResourceNameOneof = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; requiredRepeatedResourceNameCommon = new ArrayList&lt;&gt;();
   *   List&lt;Integer&gt; requiredRepeatedFixed32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; requiredRepeatedFixed64 = new ArrayList&lt;&gt;();
   *   Map&lt;Integer, String&gt; requiredMap = new HashMap&lt;&gt;();
   *   Any requiredAnyValue = Any.newBuilder().build();
   *   Struct requiredStructValue = Struct.newBuilder().build();
   *   Value requiredValueValue = Value.newBuilder().build();
   *   ListValue requiredListValueValue = ListValue.newBuilder().build();
   *   Timestamp requiredTimeValue = Timestamp.newBuilder().build();
   *   Duration requiredDurationValue = Duration.newBuilder().build();
   *   FieldMask requiredFieldMaskValue = FieldMask.newBuilder().build();
   *   Int32Value requiredInt32Value = Int32Value.newBuilder().build();
   *   UInt32Value requiredUint32Value = UInt32Value.newBuilder().build();
   *   Int64Value requiredInt64Value = Int64Value.newBuilder().build();
   *   UInt64Value requiredUint64Value = UInt64Value.newBuilder().build();
   *   FloatValue requiredFloatValue = FloatValue.newBuilder().build();
   *   DoubleValue requiredDoubleValue = DoubleValue.newBuilder().build();
   *   StringValue requiredStringValue = StringValue.newBuilder().build();
   *   BoolValue requiredBoolValue = BoolValue.newBuilder().build();
   *   BytesValue requiredBytesValue = BytesValue.newBuilder().build();
   *   List&lt;Any&gt; requiredRepeatedAnyValue = new ArrayList&lt;&gt;();
   *   List&lt;Struct&gt; requiredRepeatedStructValue = new ArrayList&lt;&gt;();
   *   List&lt;Value&gt; requiredRepeatedValueValue = new ArrayList&lt;&gt;();
   *   List&lt;ListValue&gt; requiredRepeatedListValueValue = new ArrayList&lt;&gt;();
   *   List&lt;Timestamp&gt; requiredRepeatedTimeValue = new ArrayList&lt;&gt;();
   *   List&lt;Duration&gt; requiredRepeatedDurationValue = new ArrayList&lt;&gt;();
   *   List&lt;FieldMask&gt; requiredRepeatedFieldMaskValue = new ArrayList&lt;&gt;();
   *   List&lt;Int32Value&gt; requiredRepeatedInt32Value = new ArrayList&lt;&gt;();
   *   List&lt;UInt32Value&gt; requiredRepeatedUint32Value = new ArrayList&lt;&gt;();
   *   List&lt;Int64Value&gt; requiredRepeatedInt64Value = new ArrayList&lt;&gt;();
   *   List&lt;UInt64Value&gt; requiredRepeatedUint64Value = new ArrayList&lt;&gt;();
   *   List&lt;FloatValue&gt; requiredRepeatedFloatValue = new ArrayList&lt;&gt;();
   *   List&lt;DoubleValue&gt; requiredRepeatedDoubleValue = new ArrayList&lt;&gt;();
   *   List&lt;StringValue&gt; requiredRepeatedStringValue = new ArrayList&lt;&gt;();
   *   List&lt;BoolValue&gt; requiredRepeatedBoolValue = new ArrayList&lt;&gt;();
   *   List&lt;BytesValue&gt; requiredRepeatedBytesValue = new ArrayList&lt;&gt;();
   *   TestOptionalRequiredFlatteningParamsRequest request = TestOptionalRequiredFlatteningParamsRequest.newBuilder()
   *     .setRequiredSingularInt32(requiredSingularInt32)
   *     .setRequiredSingularInt64(requiredSingularInt64)
   *     .setRequiredSingularFloat(requiredSingularFloat)
   *     .setRequiredSingularDouble(requiredSingularDouble)
   *     .setRequiredSingularBool(requiredSingularBool)
   *     .setRequiredSingularEnum(requiredSingularEnum)
   *     .setRequiredSingularString(requiredSingularString)
   *     .setRequiredSingularBytes(requiredSingularBytes)
   *     .setRequiredSingularMessage(requiredSingularMessage)
   *     .setRequiredSingularResourceName(requiredSingularResourceName.toString())
   *     .setRequiredSingularResourceNameOneof(requiredSingularResourceNameOneof.toString())
   *     .setRequiredSingularResourceNameCommon(requiredSingularResourceNameCommon)
   *     .setRequiredSingularFixed32(requiredSingularFixed32)
   *     .setRequiredSingularFixed64(requiredSingularFixed64)
   *     .addAllRequiredRepeatedInt32(requiredRepeatedInt32)
   *     .addAllRequiredRepeatedInt64(requiredRepeatedInt64)
   *     .addAllRequiredRepeatedFloat(requiredRepeatedFloat)
   *     .addAllRequiredRepeatedDouble(requiredRepeatedDouble)
   *     .addAllRequiredRepeatedBool(requiredRepeatedBool)
   *     .addAllRequiredRepeatedEnum(requiredRepeatedEnum)
   *     .addAllRequiredRepeatedString(requiredRepeatedString)
   *     .addAllRequiredRepeatedBytes(requiredRepeatedBytes)
   *     .addAllRequiredRepeatedMessage(requiredRepeatedMessage)
   *     .addAllRequiredRepeatedResourceName(BookName.toStringList(requiredRepeatedResourceName))
   *     .addAllRequiredRepeatedResourceNameOneof(BookName.toStringList(requiredRepeatedResourceNameOneof))
   *     .addAllRequiredRepeatedResourceNameCommon(requiredRepeatedResourceNameCommon)
   *     .addAllRequiredRepeatedFixed32(requiredRepeatedFixed32)
   *     .addAllRequiredRepeatedFixed64(requiredRepeatedFixed64)
   *     .putAllRequiredMap(requiredMap)
   *     .setRequiredAnyValue(requiredAnyValue)
   *     .setRequiredStructValue(requiredStructValue)
   *     .setRequiredValueValue(requiredValueValue)
   *     .setRequiredListValueValue(requiredListValueValue)
   *     .setRequiredTimeValue(requiredTimeValue)
   *     .setRequiredDurationValue(requiredDurationValue)
   *     .setRequiredFieldMaskValue(requiredFieldMaskValue)
   *     .setRequiredInt32Value(requiredInt32Value)
   *     .setRequiredUint32Value(requiredUint32Value)
   *     .setRequiredInt64Value(requiredInt64Value)
   *     .setRequiredUint64Value(requiredUint64Value)
   *     .setRequiredFloatValue(requiredFloatValue)
   *     .setRequiredDoubleValue(requiredDoubleValue)
   *     .setRequiredStringValue(requiredStringValue)
   *     .setRequiredBoolValue(requiredBoolValue)
   *     .setRequiredBytesValue(requiredBytesValue)
   *     .addAllRequiredRepeatedAnyValue(requiredRepeatedAnyValue)
   *     .addAllRequiredRepeatedStructValue(requiredRepeatedStructValue)
   *     .addAllRequiredRepeatedValueValue(requiredRepeatedValueValue)
   *     .addAllRequiredRepeatedListValueValue(requiredRepeatedListValueValue)
   *     .addAllRequiredRepeatedTimeValue(requiredRepeatedTimeValue)
   *     .addAllRequiredRepeatedDurationValue(requiredRepeatedDurationValue)
   *     .addAllRequiredRepeatedFieldMaskValue(requiredRepeatedFieldMaskValue)
   *     .addAllRequiredRepeatedInt32Value(requiredRepeatedInt32Value)
   *     .addAllRequiredRepeatedUint32Value(requiredRepeatedUint32Value)
   *     .addAllRequiredRepeatedInt64Value(requiredRepeatedInt64Value)
   *     .addAllRequiredRepeatedUint64Value(requiredRepeatedUint64Value)
   *     .addAllRequiredRepeatedFloatValue(requiredRepeatedFloatValue)
   *     .addAllRequiredRepeatedDoubleValue(requiredRepeatedDoubleValue)
   *     .addAllRequiredRepeatedStringValue(requiredRepeatedStringValue)
   *     .addAllRequiredRepeatedBoolValue(requiredRepeatedBoolValue)
   *     .addAllRequiredRepeatedBytesValue(requiredRepeatedBytesValue)
   *     .build();
   *   ApiFuture&lt;TestOptionalRequiredFlatteningParamsResponse&gt; future = libraryClient.testOptionalRequiredFlatteningParamsCallable().futureCall(request);
   *   // Do something
   *   TestOptionalRequiredFlatteningParamsResponse response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsCallable() {
    return stub.testOptionalRequiredFlatteningParamsCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ArchiveName source = ArchiveName.of("[ARCHIVE]");
   *   ArchiveName destination = ArchiveName.of("[ARCHIVE]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(ArchiveName source, ArchiveName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ArchiveName source = ArchiveName.of("[ARCHIVE]");
   *   ShelfName destination = ShelfName.of("[SHELF]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(ArchiveName source, ShelfName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ArchiveName source = ArchiveName.of("[ARCHIVE]");
   *   ProjectName destination = ProjectName.of("[PROJECT]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(ArchiveName source, ProjectName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName source = ShelfName.of("[SHELF]");
   *   ArchiveName destination = ArchiveName.of("[ARCHIVE]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(ShelfName source, ArchiveName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName source = ShelfName.of("[SHELF]");
   *   ShelfName destination = ShelfName.of("[SHELF]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(ShelfName source, ShelfName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName source = ShelfName.of("[SHELF]");
   *   ProjectName destination = ProjectName.of("[PROJECT]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(ShelfName source, ProjectName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ProjectName source = ProjectName.of("[PROJECT]");
   *   ArchiveName destination = ArchiveName.of("[ARCHIVE]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(ProjectName source, ArchiveName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ProjectName source = ProjectName.of("[PROJECT]");
   *   ShelfName destination = ShelfName.of("[SHELF]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(ProjectName source, ShelfName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ProjectName source = ProjectName.of("[PROJECT]");
   *   ProjectName destination = ProjectName.of("[PROJECT]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryClient.moveBooks(source, destination, formattedPublishers, project);
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(ProjectName source, ProjectName destination, List<String> publishers, ProjectName project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setDestination(destination == null ? null : destination.toString())
            .addAllPublishers(publishers)
            .setProject(project == null ? null : project.toString())
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ArchiveName source = ArchiveName.of("[ARCHIVE]");
   *   ArchiveName destination = ArchiveName.of("[ARCHIVE]");
   *   List&lt;String&gt; formattedPublishers = new ArrayList&lt;&gt;();
   *   ProjectName project = ProjectName.of("[PROJECT]");
   *   MoveBooksResponse response = libraryClient.moveBooks(source.toString(), destination.toString(), formattedPublishers, project.toString());
   * }
   * </code></pre>
   *
   * @param source
   * @param destination
   * @param publishers
   * @param project
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(String source, String destination, List<String> publishers, String project) {
    MoveBooksRequest request =
        MoveBooksRequest.newBuilder()
            .setSource(source)
            .setDestination(destination)
            .addAllPublishers(publishers)
            .setProject(project)
            .build();
    return moveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   MoveBooksRequest request = MoveBooksRequest.newBuilder().build();
   *   MoveBooksResponse response = libraryClient.moveBooks(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MoveBooksResponse moveBooks(MoveBooksRequest request) {
    return moveBooksCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   MoveBooksRequest request = MoveBooksRequest.newBuilder().build();
   *   ApiFuture&lt;MoveBooksResponse&gt; future = libraryClient.moveBooksCallable().futureCall(request);
   *   // Do something
   *   MoveBooksResponse response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<MoveBooksRequest, MoveBooksResponse> moveBooksCallable() {
    return stub.moveBooksCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ArchiveName source = ArchiveName.of("[ARCHIVE]");
   *   ArchiveName archive = ArchiveName.of("[ARCHIVE]");
   *   ArchiveBooksResponse response = libraryClient.archiveBooks(source, archive);
   * }
   * </code></pre>
   *
   * @param source
   * @param archive
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ArchiveBooksResponse archiveBooks(ArchiveName source, ArchiveName archive) {
    ArchiveBooksRequest request =
        ArchiveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setArchive(archive == null ? null : archive.toString())
            .build();
    return archiveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName source = ShelfName.of("[SHELF]");
   *   ArchiveName archive = ArchiveName.of("[ARCHIVE]");
   *   ArchiveBooksResponse response = libraryClient.archiveBooks(source, archive);
   * }
   * </code></pre>
   *
   * @param source
   * @param archive
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ArchiveBooksResponse archiveBooks(ShelfName source, ArchiveName archive) {
    ArchiveBooksRequest request =
        ArchiveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setArchive(archive == null ? null : archive.toString())
            .build();
    return archiveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ProjectName source = ProjectName.of("[PROJECT]");
   *   ArchiveName archive = ArchiveName.of("[ARCHIVE]");
   *   ArchiveBooksResponse response = libraryClient.archiveBooks(source, archive);
   * }
   * </code></pre>
   *
   * @param source
   * @param archive
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ArchiveBooksResponse archiveBooks(ProjectName source, ArchiveName archive) {
    ArchiveBooksRequest request =
        ArchiveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setArchive(archive == null ? null : archive.toString())
            .build();
    return archiveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ArchiveName source = ArchiveName.of("[ARCHIVE]");
   *   ArchiveName archive = ArchiveName.of("[ARCHIVE]");
   *   ArchiveBooksResponse response = libraryClient.archiveBooks(source.toString(), archive.toString());
   * }
   * </code></pre>
   *
   * @param source
   * @param archive
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ArchiveBooksResponse archiveBooks(String source, String archive) {
    ArchiveBooksRequest request =
        ArchiveBooksRequest.newBuilder()
            .setSource(source)
            .setArchive(archive)
            .build();
    return archiveBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ArchiveBooksRequest request = ArchiveBooksRequest.newBuilder().build();
   *   ArchiveBooksResponse response = libraryClient.archiveBooks(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final ArchiveBooksResponse archiveBooks(ArchiveBooksRequest request) {
    return archiveBooksCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ArchiveBooksRequest request = ArchiveBooksRequest.newBuilder().build();
   *   ApiFuture&lt;ArchiveBooksResponse&gt; future = libraryClient.archiveBooksCallable().futureCall(request);
   *   // Do something
   *   ArchiveBooksResponse response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<ArchiveBooksRequest, ArchiveBooksResponse> archiveBooksCallable() {
    return stub.archiveBooksCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ArchiveName source = ArchiveName.of("[ARCHIVE]");
   *   ArchiveName archive = ArchiveName.of("[ARCHIVE]");
   *   ArchiveBooksResponse response = libraryClient.longRunningArchiveBooksAsync(source, archive).get();
   * }
   * </code></pre>
   *
   * @param source
   * @param archive
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationFuture<ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksAsync(ArchiveName source, ArchiveName archive) {
    ArchiveBooksRequest request =
        ArchiveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setArchive(archive == null ? null : archive.toString())
            .build();
    return longRunningArchiveBooksAsync(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName source = ShelfName.of("[SHELF]");
   *   ArchiveName archive = ArchiveName.of("[ARCHIVE]");
   *   ArchiveBooksResponse response = libraryClient.longRunningArchiveBooksAsync(source, archive).get();
   * }
   * </code></pre>
   *
   * @param source
   * @param archive
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationFuture<ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksAsync(ShelfName source, ArchiveName archive) {
    ArchiveBooksRequest request =
        ArchiveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setArchive(archive == null ? null : archive.toString())
            .build();
    return longRunningArchiveBooksAsync(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ProjectName source = ProjectName.of("[PROJECT]");
   *   ArchiveName archive = ArchiveName.of("[ARCHIVE]");
   *   ArchiveBooksResponse response = libraryClient.longRunningArchiveBooksAsync(source, archive).get();
   * }
   * </code></pre>
   *
   * @param source
   * @param archive
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationFuture<ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksAsync(ProjectName source, ArchiveName archive) {
    ArchiveBooksRequest request =
        ArchiveBooksRequest.newBuilder()
            .setSource(source == null ? null : source.toString())
            .setArchive(archive == null ? null : archive.toString())
            .build();
    return longRunningArchiveBooksAsync(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ArchiveName source = ArchiveName.of("[ARCHIVE]");
   *   ArchiveName archive = ArchiveName.of("[ARCHIVE]");
   *   ArchiveBooksResponse response = libraryClient.longRunningArchiveBooksAsync(source.toString(), archive.toString()).get();
   * }
   * </code></pre>
   *
   * @param source
   * @param archive
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationFuture<ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksAsync(String source, String archive) {
    ArchiveBooksRequest request =
        ArchiveBooksRequest.newBuilder()
            .setSource(source)
            .setArchive(archive)
            .build();
    return longRunningArchiveBooksAsync(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ArchiveBooksRequest request = ArchiveBooksRequest.newBuilder().build();
   *   ArchiveBooksResponse response = libraryClient.longRunningArchiveBooksAsync(request).get();
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public final OperationFuture<ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksAsync(ArchiveBooksRequest request) {
    return longRunningArchiveBooksOperationCallable().futureCall(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ArchiveBooksRequest request = ArchiveBooksRequest.newBuilder().build();
   *   OperationFuture&lt;ArchiveBooksResponse, ArchiveBooksMetadata&gt; future = libraryClient.longRunningArchiveBooksOperationCallable().futureCall(request);
   *   // Do something
   *   ArchiveBooksResponse response = future.get();
   * }
   * </code></pre>
   */
  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public final OperationCallable<ArchiveBooksRequest, ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksOperationCallable() {
    return stub.longRunningArchiveBooksOperationCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ArchiveBooksRequest request = ArchiveBooksRequest.newBuilder().build();
   *   ApiFuture&lt;Operation&gt; future = libraryClient.longRunningArchiveBooksCallable().futureCall(request);
   *   // Do something
   *   Operation response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<ArchiveBooksRequest, Operation> longRunningArchiveBooksCallable() {
    return stub.longRunningArchiveBooksCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BidiStream&lt;ArchiveBooksRequest, ArchiveBooksResponse&gt; bidiStream =
   *       libraryClient.streamingArchiveBooksCallable().call();
   *
   *   ArchiveBooksRequest request = ArchiveBooksRequest.newBuilder().build();
   *   bidiStream.send(request);
   *   for (ArchiveBooksResponse response : bidiStream) {
   *     // Do something when receive a response
   *   }
   * }
   * </code></pre>
   */
  public final BidiStreamingCallable<ArchiveBooksRequest, ArchiveBooksResponse> streamingArchiveBooksCallable() {
    return stub.streamingArchiveBooksCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test using resource messages as request objects. Only used by PubSub (CreateSubscription) for historical reasons.
   * New APIs should always create a separate message for a request.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   String author = "";
   *   String title = "";
   *   Book.Rating rating = Book.Rating.GOOD;
   *   libraryClient.saveBook(name, author, title, rating);
   * }
   * </code></pre>
   *
   * @param name The resource name of the book.
   * Book names have the form `bookShelves/{shelf_id}/books/{book_id}`.
   * Message field comment may include special characters: &lt;&gt;&amp;"`'{@literal @}.
   * @param author The name of the book author.
   * @param title The title of the book.
   * @param rating For testing enums.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void saveBook(BookName name, String author, String title, Book.Rating rating) {
    Book request =
        Book.newBuilder()
            .setName(name == null ? null : name.toString())
            .setAuthor(author)
            .setTitle(title)
            .setRating(rating)
            .build();
    saveBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test using resource messages as request objects. Only used by PubSub (CreateSubscription) for historical reasons.
   * New APIs should always create a separate message for a request.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   String author = "";
   *   String title = "";
   *   Book.Rating rating = Book.Rating.GOOD;
   *   libraryClient.saveBook(name.toString(), author, title, rating);
   * }
   * </code></pre>
   *
   * @param name The resource name of the book.
   * Book names have the form `bookShelves/{shelf_id}/books/{book_id}`.
   * Message field comment may include special characters: &lt;&gt;&amp;"`'{@literal @}.
   * @param author The name of the book author.
   * @param title The title of the book.
   * @param rating For testing enums.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void saveBook(String name, String author, String title, Book.Rating rating) {
    Book request =
        Book.newBuilder()
            .setName(name)
            .setAuthor(author)
            .setTitle(title)
            .setRating(rating)
            .build();
    saveBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test using resource messages as request objects. Only used by PubSub (CreateSubscription) for historical reasons.
   * New APIs should always create a separate message for a request.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   Book request = Book.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   libraryClient.saveBook(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final void saveBook(Book request) {
    saveBookCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test using resource messages as request objects. Only used by PubSub (CreateSubscription) for historical reasons.
   * New APIs should always create a separate message for a request.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
   *   Book request = Book.newBuilder()
   *     .setName(name.toString())
   *     .build();
   *   ApiFuture&lt;Void&gt; future = libraryClient.saveBookCallable().futureCall(request);
   *   // Do something
   *   future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<Book, Empty> saveBookCallable() {
    return stub.saveBookCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * This method is not exposed in the GAPIC config. It should be generated.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *
   *   Book response = libraryClient.privateListShelves();
   * }
   * </code></pre>
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book privateListShelves() {
    ListShelvesRequest request =
        ListShelvesRequest.newBuilder().build();
    return privateListShelves(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * This method is not exposed in the GAPIC config. It should be generated.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ListShelvesRequest request = ListShelvesRequest.newBuilder().build();
   *   Book response = libraryClient.privateListShelves(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Book privateListShelves(ListShelvesRequest request) {
    return privateListShelvesCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * This method is not exposed in the GAPIC config. It should be generated.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ListShelvesRequest request = ListShelvesRequest.newBuilder().build();
   *   ApiFuture&lt;Book&gt; future = libraryClient.privateListShelvesCallable().futureCall(request);
   *   // Do something
   *   Book response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<ListShelvesRequest, Book> privateListShelvesCallable() {
    return stub.privateListShelvesCallable();
  }

  @Override
  public final void close() {
    stub.close();
  }

  @Override
  public void shutdown() {
    stub.shutdown();
  }

  @Override
  public boolean isShutdown() {
    return stub.isShutdown();
  }

  @Override
  public boolean isTerminated() {
    return stub.isTerminated();
  }

  @Override
  public void shutdownNow() {
    stub.shutdownNow();
  }

  @Override
  public boolean awaitTermination(long duration, TimeUnit unit) throws InterruptedException {
    return stub.awaitTermination(duration, unit);
  }

  public static class ListShelvesPagedResponse extends AbstractPagedListResponse<
      ListShelvesRequest,
      ListShelvesResponse,
      Shelf,
      ListShelvesPage,
      ListShelvesFixedSizeCollection> {

    public static ApiFuture<ListShelvesPagedResponse> createAsync(
        PageContext<ListShelvesRequest, ListShelvesResponse, Shelf> context,
        ApiFuture<ListShelvesResponse> futureResponse) {
      ApiFuture<ListShelvesPage> futurePage =
          ListShelvesPage.createEmptyPage().createPageAsync(context, futureResponse);
      return ApiFutures.transform(
          futurePage,
          new ApiFunction<ListShelvesPage, ListShelvesPagedResponse>() {
            @Override
            public ListShelvesPagedResponse apply(ListShelvesPage input) {
              return new ListShelvesPagedResponse(input);
            }
          },
          MoreExecutors.directExecutor());
    }

    private ListShelvesPagedResponse(ListShelvesPage page) {
      super(page, ListShelvesFixedSizeCollection.createEmptyCollection());
    }


  }

  public static class ListShelvesPage extends AbstractPage<
      ListShelvesRequest,
      ListShelvesResponse,
      Shelf,
      ListShelvesPage> {

    private ListShelvesPage(
        PageContext<ListShelvesRequest, ListShelvesResponse, Shelf> context,
        ListShelvesResponse response) {
      super(context, response);
    }

    private static ListShelvesPage createEmptyPage() {
      return new ListShelvesPage(null, null);
    }

    @Override
    protected ListShelvesPage createPage(
        PageContext<ListShelvesRequest, ListShelvesResponse, Shelf> context,
        ListShelvesResponse response) {
      return new ListShelvesPage(context, response);
    }

    @Override
    public ApiFuture<ListShelvesPage> createPageAsync(
        PageContext<ListShelvesRequest, ListShelvesResponse, Shelf> context,
        ApiFuture<ListShelvesResponse> futureResponse) {
      return super.createPageAsync(context, futureResponse);
    }




  }

  public static class ListShelvesFixedSizeCollection extends AbstractFixedSizeCollection<
      ListShelvesRequest,
      ListShelvesResponse,
      Shelf,
      ListShelvesPage,
      ListShelvesFixedSizeCollection> {

    private ListShelvesFixedSizeCollection(List<ListShelvesPage> pages, int collectionSize) {
      super(pages, collectionSize);
    }

    private static ListShelvesFixedSizeCollection createEmptyCollection() {
      return new ListShelvesFixedSizeCollection(null, 0);
    }

    @Override
    protected ListShelvesFixedSizeCollection createCollection(
        List<ListShelvesPage> pages, int collectionSize) {
      return new ListShelvesFixedSizeCollection(pages, collectionSize);
    }


  }
  public static class ListBooksPagedResponse extends AbstractPagedListResponse<
      ListBooksRequest,
      ListBooksResponse,
      Book,
      ListBooksPage,
      ListBooksFixedSizeCollection> {

    public static ApiFuture<ListBooksPagedResponse> createAsync(
        PageContext<ListBooksRequest, ListBooksResponse, Book> context,
        ApiFuture<ListBooksResponse> futureResponse) {
      ApiFuture<ListBooksPage> futurePage =
          ListBooksPage.createEmptyPage().createPageAsync(context, futureResponse);
      return ApiFutures.transform(
          futurePage,
          new ApiFunction<ListBooksPage, ListBooksPagedResponse>() {
            @Override
            public ListBooksPagedResponse apply(ListBooksPage input) {
              return new ListBooksPagedResponse(input);
            }
          },
          MoreExecutors.directExecutor());
    }

    private ListBooksPagedResponse(ListBooksPage page) {
      super(page, ListBooksFixedSizeCollection.createEmptyCollection());
    }


  }

  public static class ListBooksPage extends AbstractPage<
      ListBooksRequest,
      ListBooksResponse,
      Book,
      ListBooksPage> {

    private ListBooksPage(
        PageContext<ListBooksRequest, ListBooksResponse, Book> context,
        ListBooksResponse response) {
      super(context, response);
    }

    private static ListBooksPage createEmptyPage() {
      return new ListBooksPage(null, null);
    }

    @Override
    protected ListBooksPage createPage(
        PageContext<ListBooksRequest, ListBooksResponse, Book> context,
        ListBooksResponse response) {
      return new ListBooksPage(context, response);
    }

    @Override
    public ApiFuture<ListBooksPage> createPageAsync(
        PageContext<ListBooksRequest, ListBooksResponse, Book> context,
        ApiFuture<ListBooksResponse> futureResponse) {
      return super.createPageAsync(context, futureResponse);
    }




  }

  public static class ListBooksFixedSizeCollection extends AbstractFixedSizeCollection<
      ListBooksRequest,
      ListBooksResponse,
      Book,
      ListBooksPage,
      ListBooksFixedSizeCollection> {

    private ListBooksFixedSizeCollection(List<ListBooksPage> pages, int collectionSize) {
      super(pages, collectionSize);
    }

    private static ListBooksFixedSizeCollection createEmptyCollection() {
      return new ListBooksFixedSizeCollection(null, 0);
    }

    @Override
    protected ListBooksFixedSizeCollection createCollection(
        List<ListBooksPage> pages, int collectionSize) {
      return new ListBooksFixedSizeCollection(pages, collectionSize);
    }


  }
  public static class ListStringsPagedResponse extends AbstractPagedListResponse<
      ListStringsRequest,
      ListStringsResponse,
      String,
      ListStringsPage,
      ListStringsFixedSizeCollection> {

    public static ApiFuture<ListStringsPagedResponse> createAsync(
        PageContext<ListStringsRequest, ListStringsResponse, String> context,
        ApiFuture<ListStringsResponse> futureResponse) {
      ApiFuture<ListStringsPage> futurePage =
          ListStringsPage.createEmptyPage().createPageAsync(context, futureResponse);
      return ApiFutures.transform(
          futurePage,
          new ApiFunction<ListStringsPage, ListStringsPagedResponse>() {
            @Override
            public ListStringsPagedResponse apply(ListStringsPage input) {
              return new ListStringsPagedResponse(input);
            }
          },
          MoreExecutors.directExecutor());
    }

    private ListStringsPagedResponse(ListStringsPage page) {
      super(page, ListStringsFixedSizeCollection.createEmptyCollection());
    }
    public Iterable<ResourceName> iterateAllAsResourceName() {
      return Iterables.transform(iterateAll(), new Function<String, ResourceName>() {
          @Override
          public ResourceName apply(String arg0) {
            return UntypedResourceName.parse(arg0);
          }
        }
      );
    }

  }

  public static class ListStringsPage extends AbstractPage<
      ListStringsRequest,
      ListStringsResponse,
      String,
      ListStringsPage> {

    private ListStringsPage(
        PageContext<ListStringsRequest, ListStringsResponse, String> context,
        ListStringsResponse response) {
      super(context, response);
    }

    private static ListStringsPage createEmptyPage() {
      return new ListStringsPage(null, null);
    }

    @Override
    protected ListStringsPage createPage(
        PageContext<ListStringsRequest, ListStringsResponse, String> context,
        ListStringsResponse response) {
      return new ListStringsPage(context, response);
    }

    @Override
    public ApiFuture<ListStringsPage> createPageAsync(
        PageContext<ListStringsRequest, ListStringsResponse, String> context,
        ApiFuture<ListStringsResponse> futureResponse) {
      return super.createPageAsync(context, futureResponse);
    }
    public Iterable<ResourceName> iterateAllAsResourceName() {
      return Iterables.transform(iterateAll(), new Function<String, ResourceName>() {
          @Override
          public ResourceName apply(String arg0) {
            return UntypedResourceName.parse(arg0);
          }
        }
      );
    }

    public Iterable<ResourceName> getValuesAsResourceName() {
      return Iterables.transform(getValues(), new Function<String, ResourceName>() {
          @Override
          public ResourceName apply(String arg0) {
            return UntypedResourceName.parse(arg0);
          }
        }
      );
    }

  }

  public static class ListStringsFixedSizeCollection extends AbstractFixedSizeCollection<
      ListStringsRequest,
      ListStringsResponse,
      String,
      ListStringsPage,
      ListStringsFixedSizeCollection> {

    private ListStringsFixedSizeCollection(List<ListStringsPage> pages, int collectionSize) {
      super(pages, collectionSize);
    }

    private static ListStringsFixedSizeCollection createEmptyCollection() {
      return new ListStringsFixedSizeCollection(null, 0);
    }

    @Override
    protected ListStringsFixedSizeCollection createCollection(
        List<ListStringsPage> pages, int collectionSize) {
      return new ListStringsFixedSizeCollection(pages, collectionSize);
    }
    public Iterable<ResourceName> getValuesAsResourceName() {
      return Iterables.transform(getValues(), new Function<String, ResourceName>() {
          @Override
          public ResourceName apply(String arg0) {
            return UntypedResourceName.parse(arg0);
          }
        }
      );
    }

  }
  public static class FindRelatedBooksPagedResponse extends AbstractPagedListResponse<
      FindRelatedBooksRequest,
      FindRelatedBooksResponse,
      String,
      FindRelatedBooksPage,
      FindRelatedBooksFixedSizeCollection> {

    public static ApiFuture<FindRelatedBooksPagedResponse> createAsync(
        PageContext<FindRelatedBooksRequest, FindRelatedBooksResponse, String> context,
        ApiFuture<FindRelatedBooksResponse> futureResponse) {
      ApiFuture<FindRelatedBooksPage> futurePage =
          FindRelatedBooksPage.createEmptyPage().createPageAsync(context, futureResponse);
      return ApiFutures.transform(
          futurePage,
          new ApiFunction<FindRelatedBooksPage, FindRelatedBooksPagedResponse>() {
            @Override
            public FindRelatedBooksPagedResponse apply(FindRelatedBooksPage input) {
              return new FindRelatedBooksPagedResponse(input);
            }
          },
          MoreExecutors.directExecutor());
    }

    private FindRelatedBooksPagedResponse(FindRelatedBooksPage page) {
      super(page, FindRelatedBooksFixedSizeCollection.createEmptyCollection());
    }
    public Iterable<BookName> iterateAllAsBookName() {
      return Iterables.transform(iterateAll(), new Function<String, BookName>() {
          @Override
          public BookName apply(String arg0) {
            return BookName.parse(arg0);
          }
        }
      );
    }

  }

  public static class FindRelatedBooksPage extends AbstractPage<
      FindRelatedBooksRequest,
      FindRelatedBooksResponse,
      String,
      FindRelatedBooksPage> {

    private FindRelatedBooksPage(
        PageContext<FindRelatedBooksRequest, FindRelatedBooksResponse, String> context,
        FindRelatedBooksResponse response) {
      super(context, response);
    }

    private static FindRelatedBooksPage createEmptyPage() {
      return new FindRelatedBooksPage(null, null);
    }

    @Override
    protected FindRelatedBooksPage createPage(
        PageContext<FindRelatedBooksRequest, FindRelatedBooksResponse, String> context,
        FindRelatedBooksResponse response) {
      return new FindRelatedBooksPage(context, response);
    }

    @Override
    public ApiFuture<FindRelatedBooksPage> createPageAsync(
        PageContext<FindRelatedBooksRequest, FindRelatedBooksResponse, String> context,
        ApiFuture<FindRelatedBooksResponse> futureResponse) {
      return super.createPageAsync(context, futureResponse);
    }
    public Iterable<BookName> iterateAllAsBookName() {
      return Iterables.transform(iterateAll(), new Function<String, BookName>() {
          @Override
          public BookName apply(String arg0) {
            return BookName.parse(arg0);
          }
        }
      );
    }

    public Iterable<BookName> getValuesAsBookName() {
      return Iterables.transform(getValues(), new Function<String, BookName>() {
          @Override
          public BookName apply(String arg0) {
            return BookName.parse(arg0);
          }
        }
      );
    }

  }

  public static class FindRelatedBooksFixedSizeCollection extends AbstractFixedSizeCollection<
      FindRelatedBooksRequest,
      FindRelatedBooksResponse,
      String,
      FindRelatedBooksPage,
      FindRelatedBooksFixedSizeCollection> {

    private FindRelatedBooksFixedSizeCollection(List<FindRelatedBooksPage> pages, int collectionSize) {
      super(pages, collectionSize);
    }

    private static FindRelatedBooksFixedSizeCollection createEmptyCollection() {
      return new FindRelatedBooksFixedSizeCollection(null, 0);
    }

    @Override
    protected FindRelatedBooksFixedSizeCollection createCollection(
        List<FindRelatedBooksPage> pages, int collectionSize) {
      return new FindRelatedBooksFixedSizeCollection(pages, collectionSize);
    }
    public Iterable<BookName> getValuesAsBookName() {
      return Iterables.transform(getValues(), new Function<String, BookName>() {
          @Override
          public BookName apply(String arg0) {
            return BookName.parse(arg0);
          }
        }
      );
    }

  }
}
============== file: src/main/java/com/google/example/library/v1/LibrarySettings.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1;

import com.google.api.core.ApiFunction;
import com.google.api.core.ApiFuture;
import com.google.api.core.BetaApi;
import com.google.api.gax.batching.BatchingSettings;
import com.google.api.gax.batching.FlowControlSettings;
import com.google.api.gax.batching.FlowController;
import com.google.api.gax.batching.FlowController.LimitExceededBehavior;
import com.google.api.gax.batching.PartitionKey;
import com.google.api.gax.batching.RequestBuilder;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.core.GaxProperties;
import com.google.api.gax.core.GoogleCredentialsProvider;
import com.google.api.gax.core.InstantiatingExecutorProvider;
import com.google.api.gax.grpc.GaxGrpcProperties;
import com.google.api.gax.grpc.GrpcTransportChannel;
import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;
import com.google.api.gax.grpc.ProtoOperationTransformers;
import com.google.api.gax.longrunning.OperationFuture;
import com.google.api.gax.longrunning.OperationSnapshot;
import com.google.api.gax.longrunning.OperationTimedPollAlgorithm;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.ApiCallContext;
import com.google.api.gax.rpc.ApiClientHeaderProvider;
import com.google.api.gax.rpc.BatchedRequestIssuer;
import com.google.api.gax.rpc.BatchingCallSettings;
import com.google.api.gax.rpc.BatchingDescriptor;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.ClientSettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.OperationCallSettings;
import com.google.api.gax.rpc.PageContext;
import com.google.api.gax.rpc.PagedCallSettings;
import com.google.api.gax.rpc.PagedListDescriptor;
import com.google.api.gax.rpc.PagedListResponseFactory;
import com.google.api.gax.rpc.ServerStreamingCallSettings;
import com.google.api.gax.rpc.StatusCode;
import com.google.api.gax.rpc.StreamingCallSettings;
import com.google.api.gax.rpc.StubSettings;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.api.gax.rpc.UnaryCallSettings;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.auth.Credentials;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import static com.google.example.library.v1.LibraryClient.FindRelatedBooksPagedResponse;
import static com.google.example.library.v1.LibraryClient.ListBooksPagedResponse;
import static com.google.example.library.v1.LibraryClient.ListShelvesPagedResponse;
import static com.google.example.library.v1.LibraryClient.ListStringsPagedResponse;
import com.google.example.library.v1.stub.LibraryServiceStubSettings;
import com.google.longrunning.Operation;
import com.google.protobuf.Empty;
import com.google.tagger.v1.LabelerGrpc;
import com.google.tagger.v1.TaggerProto.AddLabelRequest;
import com.google.tagger.v1.TaggerProto.AddLabelResponse;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.ScheduledExecutorService;
import javax.annotation.Generated;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * Settings class to configure an instance of {@link LibraryClient}.
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 * <li>The default service address (library-example.googleapis.com) and default port (1234)
 * are used.
 * <li>Credentials are acquired automatically through Application Default Credentials.
 * <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 *
 * <p>The builder of this class is recursive, so contained classes are themselves builders.
 * When build() is called, the tree of builders is called to create the complete settings
 * object.
 *
 * For example, to set the total timeout of createShelf to 30 seconds:
 *
 * <pre>
 * <code>
 * LibrarySettings.Builder librarySettingsBuilder =
 *     LibrarySettings.newBuilder();
 * librarySettingsBuilder
 *     .createShelfSettings()
 *     .setRetrySettings(
 *         librarySettingsBuilder.createShelfSettings().getRetrySettings().toBuilder()
 *             .setTotalTimeout(Duration.ofSeconds(30))
 *             .build());
 * LibrarySettings librarySettings = librarySettingsBuilder.build();
 * </code>
 * </pre>
 */
@Generated("by gapic-generator")
public class LibrarySettings extends ClientSettings<LibrarySettings> {
  /**
   * Returns the object with the settings used for calls to createShelf.
   */
  public UnaryCallSettings<CreateShelfRequest, Shelf> createShelfSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).createShelfSettings();
  }

  /**
   * Returns the object with the settings used for calls to getShelf.
   */
  public UnaryCallSettings<GetShelfRequest, Shelf> getShelfSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).getShelfSettings();
  }

  /**
   * Returns the object with the settings used for calls to listShelves.
   */
  public PagedCallSettings<ListShelvesRequest, ListShelvesResponse, ListShelvesPagedResponse> listShelvesSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).listShelvesSettings();
  }

  /**
   * Returns the object with the settings used for calls to deleteShelf.
   */
  public UnaryCallSettings<DeleteShelfRequest, Empty> deleteShelfSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).deleteShelfSettings();
  }

  /**
   * Returns the object with the settings used for calls to mergeShelves.
   */
  public UnaryCallSettings<MergeShelvesRequest, Shelf> mergeShelvesSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).mergeShelvesSettings();
  }

  /**
   * Returns the object with the settings used for calls to createBook.
   */
  public UnaryCallSettings<CreateBookRequest, Book> createBookSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).createBookSettings();
  }

  /**
   * Returns the object with the settings used for calls to publishSeries.
   */
  public BatchingCallSettings<PublishSeriesRequest, PublishSeriesResponse> publishSeriesSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).publishSeriesSettings();
  }

  /**
   * Returns the object with the settings used for calls to getBook.
   */
  public UnaryCallSettings<GetBookRequest, Book> getBookSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).getBookSettings();
  }

  /**
   * Returns the object with the settings used for calls to listBooks.
   */
  public PagedCallSettings<ListBooksRequest, ListBooksResponse, ListBooksPagedResponse> listBooksSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).listBooksSettings();
  }

  /**
   * Returns the object with the settings used for calls to deleteBook.
   */
  public UnaryCallSettings<DeleteBookRequest, Empty> deleteBookSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).deleteBookSettings();
  }

  /**
   * Returns the object with the settings used for calls to updateBook.
   */
  public UnaryCallSettings<UpdateBookRequest, Book> updateBookSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).updateBookSettings();
  }

  /**
   * Returns the object with the settings used for calls to moveBook.
   */
  public UnaryCallSettings<MoveBookRequest, Book> moveBookSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).moveBookSettings();
  }

  /**
   * Returns the object with the settings used for calls to listStrings.
   */
  public PagedCallSettings<ListStringsRequest, ListStringsResponse, ListStringsPagedResponse> listStringsSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).listStringsSettings();
  }

  /**
   * Returns the object with the settings used for calls to addComments.
   */
  public BatchingCallSettings<AddCommentsRequest, Empty> addCommentsSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).addCommentsSettings();
  }

  /**
   * Returns the object with the settings used for calls to getBookFromArchive.
   */
  public UnaryCallSettings<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).getBookFromArchiveSettings();
  }

  /**
   * Returns the object with the settings used for calls to getBookFromAnywhere.
   */
  public UnaryCallSettings<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).getBookFromAnywhereSettings();
  }

  /**
   * Returns the object with the settings used for calls to getBookFromAbsolutelyAnywhere.
   */
  public UnaryCallSettings<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere> getBookFromAbsolutelyAnywhereSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).getBookFromAbsolutelyAnywhereSettings();
  }

  /**
   * Returns the object with the settings used for calls to updateBookIndex.
   */
  public UnaryCallSettings<UpdateBookIndexRequest, Empty> updateBookIndexSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).updateBookIndexSettings();
  }

  /**
   * Returns the object with the settings used for calls to streamShelves.
   */
  public ServerStreamingCallSettings<StreamShelvesRequest, StreamShelvesResponse> streamShelvesSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).streamShelvesSettings();
  }

  /**
   * Returns the object with the settings used for calls to streamBooks.
   */
  public ServerStreamingCallSettings<StreamBooksRequest, Book> streamBooksSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).streamBooksSettings();
  }

  /**
   * Returns the object with the settings used for calls to discussBook.
   */
  public StreamingCallSettings<DiscussBookRequest, Comment> discussBookSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).discussBookSettings();
  }

  /**
   * Returns the object with the settings used for calls to monologAboutBook.
   */
  public StreamingCallSettings<DiscussBookRequest, Comment> monologAboutBookSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).monologAboutBookSettings();
  }

  /**
   * Returns the object with the settings used for calls to babbleAboutBook.
   */
  public StreamingCallSettings<DiscussBookRequest, Empty> babbleAboutBookSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).babbleAboutBookSettings();
  }

  /**
   * Returns the object with the settings used for calls to findRelatedBooks.
   */
  public PagedCallSettings<FindRelatedBooksRequest, FindRelatedBooksResponse, FindRelatedBooksPagedResponse> findRelatedBooksSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).findRelatedBooksSettings();
  }

  /**
   * Returns the object with the settings used for calls to addLabel.
   */
  /* package-private */ UnaryCallSettings<AddLabelRequest, AddLabelResponse> addLabelSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).addLabelSettings();
  }

  /**
   * Returns the object with the settings used for calls to getBigBook.
   */
  public UnaryCallSettings<GetBookRequest, Operation> getBigBookSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).getBigBookSettings();
  }

  /**
   * Returns the object with the settings used for calls to getBigBook.
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public OperationCallSettings<GetBookRequest, Book, GetBigBookMetadata> getBigBookOperationSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).getBigBookOperationSettings();
  }

  /**
   * Returns the object with the settings used for calls to getBigNothing.
   */
  public UnaryCallSettings<GetBookRequest, Operation> getBigNothingSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).getBigNothingSettings();
  }

  /**
   * Returns the object with the settings used for calls to getBigNothing.
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public OperationCallSettings<GetBookRequest, Empty, GetBigBookMetadata> getBigNothingOperationSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).getBigNothingOperationSettings();
  }

  /**
   * Returns the object with the settings used for calls to testOptionalRequiredFlatteningParams.
   */
  public UnaryCallSettings<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).testOptionalRequiredFlatteningParamsSettings();
  }

  /**
   * Returns the object with the settings used for calls to moveBooks.
   */
  public UnaryCallSettings<MoveBooksRequest, MoveBooksResponse> moveBooksSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).moveBooksSettings();
  }

  /**
   * Returns the object with the settings used for calls to archiveBooks.
   */
  public UnaryCallSettings<ArchiveBooksRequest, ArchiveBooksResponse> archiveBooksSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).archiveBooksSettings();
  }

  /**
   * Returns the object with the settings used for calls to longRunningArchiveBooks.
   */
  public UnaryCallSettings<ArchiveBooksRequest, Operation> longRunningArchiveBooksSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).longRunningArchiveBooksSettings();
  }

  /**
   * Returns the object with the settings used for calls to longRunningArchiveBooks.
   */
  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  public OperationCallSettings<ArchiveBooksRequest, ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksOperationSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).longRunningArchiveBooksOperationSettings();
  }

  /**
   * Returns the object with the settings used for calls to streamingArchiveBooks.
   */
  public StreamingCallSettings<ArchiveBooksRequest, ArchiveBooksResponse> streamingArchiveBooksSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).streamingArchiveBooksSettings();
  }

  /**
   * Returns the object with the settings used for calls to saveBook.
   */
  public UnaryCallSettings<Book, Empty> saveBookSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).saveBookSettings();
  }

  /**
   * Returns the object with the settings used for calls to privateListShelves.
   */
  public UnaryCallSettings<ListShelvesRequest, Book> privateListShelvesSettings() {
    return ((LibraryServiceStubSettings) getStubSettings()).privateListShelvesSettings();
  }


  public static final LibrarySettings create(LibraryServiceStubSettings stub) throws IOException {
    return new LibrarySettings.Builder(stub.toBuilder()).build();
  }

  /**
   * Returns a builder for the default ExecutorProvider for this service.
   */
  public static InstantiatingExecutorProvider.Builder defaultExecutorProviderBuilder() {
    return LibraryServiceStubSettings.defaultExecutorProviderBuilder();
  }

  /**
   * Returns the default service endpoint.
   */
   public static String getDefaultEndpoint() {
     return LibraryServiceStubSettings.getDefaultEndpoint();
   }


  /**
   * Returns the default service scopes.
   */
  public static List<String> getDefaultServiceScopes() {
    return LibraryServiceStubSettings.getDefaultServiceScopes();
  }


  /**
   * Returns a builder for the default credentials for this service.
   */
  public static GoogleCredentialsProvider.Builder defaultCredentialsProviderBuilder() {
    return LibraryServiceStubSettings.defaultCredentialsProviderBuilder();
  }

  /** Returns a builder for the default ChannelProvider for this service. */
  public static InstantiatingGrpcChannelProvider.Builder defaultGrpcTransportProviderBuilder() {
    return LibraryServiceStubSettings.defaultGrpcTransportProviderBuilder();
  }

  public static TransportChannelProvider defaultTransportChannelProvider() {
    return LibraryServiceStubSettings.defaultTransportChannelProvider();
  }

  @BetaApi("The surface for customizing headers is not stable yet and may change in the future.")
  public static ApiClientHeaderProvider.Builder defaultApiClientHeaderProviderBuilder() {
    return LibraryServiceStubSettings.defaultApiClientHeaderProviderBuilder();
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder() {
    return Builder.createDefault();
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder(ClientContext clientContext) {
    return new Builder(clientContext);
  }

  /**
   * Returns a builder containing all the values of this settings class.
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  protected LibrarySettings(Builder settingsBuilder) throws IOException {
    super(settingsBuilder);
  }

  /**
   * Builder for LibrarySettings.
   */
  public static class Builder extends ClientSettings.Builder<LibrarySettings, Builder> {
    protected Builder() throws IOException {
      this((ClientContext) null);
    }

    protected Builder(ClientContext clientContext) {
      super(LibraryServiceStubSettings.newBuilder(clientContext));
    }

    private static Builder createDefault() {
      return new Builder(LibraryServiceStubSettings.newBuilder());
    }

    protected Builder(LibrarySettings settings) {
      super(settings.getStubSettings().toBuilder());
    }

    protected Builder(LibraryServiceStubSettings.Builder stubSettings) {
      super(stubSettings);
    }


    public LibraryServiceStubSettings.Builder getStubSettingsBuilder() {
      return ((LibraryServiceStubSettings.Builder) getStubSettings());
    }

    // NEXT_MAJOR_VER: remove 'throws Exception'
    /**
     * Applies the given settings updater function to all of the unary API methods in this service.
     *
     * Note: This method does not support applying settings to streaming methods.
     */
    public Builder applyToAllUnaryMethods(ApiFunction<UnaryCallSettings.Builder<?, ?>, Void> settingsUpdater) throws Exception {
      super.applyToAllUnaryMethods(getStubSettingsBuilder().unaryMethodSettingsBuilders(), settingsUpdater);
      return this;
    }

    /**
     * Returns the builder for the settings used for calls to createShelf.
     */
    public UnaryCallSettings.Builder<CreateShelfRequest, Shelf> createShelfSettings() {
      return getStubSettingsBuilder().createShelfSettings();
    }

    /**
     * Returns the builder for the settings used for calls to getShelf.
     */
    public UnaryCallSettings.Builder<GetShelfRequest, Shelf> getShelfSettings() {
      return getStubSettingsBuilder().getShelfSettings();
    }

    /**
     * Returns the builder for the settings used for calls to listShelves.
     */
    public PagedCallSettings.Builder<ListShelvesRequest, ListShelvesResponse, ListShelvesPagedResponse> listShelvesSettings() {
      return getStubSettingsBuilder().listShelvesSettings();
    }

    /**
     * Returns the builder for the settings used for calls to deleteShelf.
     */
    public UnaryCallSettings.Builder<DeleteShelfRequest, Empty> deleteShelfSettings() {
      return getStubSettingsBuilder().deleteShelfSettings();
    }

    /**
     * Returns the builder for the settings used for calls to mergeShelves.
     */
    public UnaryCallSettings.Builder<MergeShelvesRequest, Shelf> mergeShelvesSettings() {
      return getStubSettingsBuilder().mergeShelvesSettings();
    }

    /**
     * Returns the builder for the settings used for calls to createBook.
     */
    public UnaryCallSettings.Builder<CreateBookRequest, Book> createBookSettings() {
      return getStubSettingsBuilder().createBookSettings();
    }

    /**
     * Returns the builder for the settings used for calls to publishSeries.
     */
    public BatchingCallSettings.Builder<PublishSeriesRequest, PublishSeriesResponse> publishSeriesSettings() {
      return getStubSettingsBuilder().publishSeriesSettings();
    }

    /**
     * Returns the builder for the settings used for calls to getBook.
     */
    public UnaryCallSettings.Builder<GetBookRequest, Book> getBookSettings() {
      return getStubSettingsBuilder().getBookSettings();
    }

    /**
     * Returns the builder for the settings used for calls to listBooks.
     */
    public PagedCallSettings.Builder<ListBooksRequest, ListBooksResponse, ListBooksPagedResponse> listBooksSettings() {
      return getStubSettingsBuilder().listBooksSettings();
    }

    /**
     * Returns the builder for the settings used for calls to deleteBook.
     */
    public UnaryCallSettings.Builder<DeleteBookRequest, Empty> deleteBookSettings() {
      return getStubSettingsBuilder().deleteBookSettings();
    }

    /**
     * Returns the builder for the settings used for calls to updateBook.
     */
    public UnaryCallSettings.Builder<UpdateBookRequest, Book> updateBookSettings() {
      return getStubSettingsBuilder().updateBookSettings();
    }

    /**
     * Returns the builder for the settings used for calls to moveBook.
     */
    public UnaryCallSettings.Builder<MoveBookRequest, Book> moveBookSettings() {
      return getStubSettingsBuilder().moveBookSettings();
    }

    /**
     * Returns the builder for the settings used for calls to listStrings.
     */
    public PagedCallSettings.Builder<ListStringsRequest, ListStringsResponse, ListStringsPagedResponse> listStringsSettings() {
      return getStubSettingsBuilder().listStringsSettings();
    }

    /**
     * Returns the builder for the settings used for calls to addComments.
     */
    public BatchingCallSettings.Builder<AddCommentsRequest, Empty> addCommentsSettings() {
      return getStubSettingsBuilder().addCommentsSettings();
    }

    /**
     * Returns the builder for the settings used for calls to getBookFromArchive.
     */
    public UnaryCallSettings.Builder<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveSettings() {
      return getStubSettingsBuilder().getBookFromArchiveSettings();
    }

    /**
     * Returns the builder for the settings used for calls to getBookFromAnywhere.
     */
    public UnaryCallSettings.Builder<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereSettings() {
      return getStubSettingsBuilder().getBookFromAnywhereSettings();
    }

    /**
     * Returns the builder for the settings used for calls to getBookFromAbsolutelyAnywhere.
     */
    public UnaryCallSettings.Builder<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere> getBookFromAbsolutelyAnywhereSettings() {
      return getStubSettingsBuilder().getBookFromAbsolutelyAnywhereSettings();
    }

    /**
     * Returns the builder for the settings used for calls to updateBookIndex.
     */
    public UnaryCallSettings.Builder<UpdateBookIndexRequest, Empty> updateBookIndexSettings() {
      return getStubSettingsBuilder().updateBookIndexSettings();
    }

    /**
     * Returns the builder for the settings used for calls to streamShelves.
     */
    public ServerStreamingCallSettings.Builder<StreamShelvesRequest, StreamShelvesResponse> streamShelvesSettings() {
      return getStubSettingsBuilder().streamShelvesSettings();
    }

    /**
     * Returns the builder for the settings used for calls to streamBooks.
     */
    public ServerStreamingCallSettings.Builder<StreamBooksRequest, Book> streamBooksSettings() {
      return getStubSettingsBuilder().streamBooksSettings();
    }

    /**
     * Returns the builder for the settings used for calls to discussBook.
     */
    public StreamingCallSettings.Builder<DiscussBookRequest, Comment> discussBookSettings() {
      return getStubSettingsBuilder().discussBookSettings();
    }

    /**
     * Returns the builder for the settings used for calls to monologAboutBook.
     */
    public StreamingCallSettings.Builder<DiscussBookRequest, Comment> monologAboutBookSettings() {
      return getStubSettingsBuilder().monologAboutBookSettings();
    }

    /**
     * Returns the builder for the settings used for calls to babbleAboutBook.
     */
    public StreamingCallSettings.Builder<DiscussBookRequest, Empty> babbleAboutBookSettings() {
      return getStubSettingsBuilder().babbleAboutBookSettings();
    }

    /**
     * Returns the builder for the settings used for calls to findRelatedBooks.
     */
    public PagedCallSettings.Builder<FindRelatedBooksRequest, FindRelatedBooksResponse, FindRelatedBooksPagedResponse> findRelatedBooksSettings() {
      return getStubSettingsBuilder().findRelatedBooksSettings();
    }

    /**
     * Returns the builder for the settings used for calls to addLabel.
     */
    /* package-private */ UnaryCallSettings.Builder<AddLabelRequest, AddLabelResponse> addLabelSettings() {
      return getStubSettingsBuilder().addLabelSettings();
    }

    /**
     * Returns the builder for the settings used for calls to getBigBook.
     */
    public UnaryCallSettings.Builder<GetBookRequest, Operation> getBigBookSettings() {
      return getStubSettingsBuilder().getBigBookSettings();
    }

    /**
     * Returns the builder for the settings used for calls to getBigBook.
     */
    @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
    public OperationCallSettings.Builder<GetBookRequest, Book, GetBigBookMetadata> getBigBookOperationSettings() {
      return getStubSettingsBuilder().getBigBookOperationSettings();
    }

    /**
     * Returns the builder for the settings used for calls to getBigNothing.
     */
    public UnaryCallSettings.Builder<GetBookRequest, Operation> getBigNothingSettings() {
      return getStubSettingsBuilder().getBigNothingSettings();
    }

    /**
     * Returns the builder for the settings used for calls to getBigNothing.
     */
    @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
    public OperationCallSettings.Builder<GetBookRequest, Empty, GetBigBookMetadata> getBigNothingOperationSettings() {
      return getStubSettingsBuilder().getBigNothingOperationSettings();
    }

    /**
     * Returns the builder for the settings used for calls to testOptionalRequiredFlatteningParams.
     */
    public UnaryCallSettings.Builder<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsSettings() {
      return getStubSettingsBuilder().testOptionalRequiredFlatteningParamsSettings();
    }

    /**
     * Returns the builder for the settings used for calls to moveBooks.
     */
    public UnaryCallSettings.Builder<MoveBooksRequest, MoveBooksResponse> moveBooksSettings() {
      return getStubSettingsBuilder().moveBooksSettings();
    }

    /**
     * Returns the builder for the settings used for calls to archiveBooks.
     */
    public UnaryCallSettings.Builder<ArchiveBooksRequest, ArchiveBooksResponse> archiveBooksSettings() {
      return getStubSettingsBuilder().archiveBooksSettings();
    }

    /**
     * Returns the builder for the settings used for calls to longRunningArchiveBooks.
     */
    public UnaryCallSettings.Builder<ArchiveBooksRequest, Operation> longRunningArchiveBooksSettings() {
      return getStubSettingsBuilder().longRunningArchiveBooksSettings();
    }

    /**
     * Returns the builder for the settings used for calls to longRunningArchiveBooks.
     */
    @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
    public OperationCallSettings.Builder<ArchiveBooksRequest, ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksOperationSettings() {
      return getStubSettingsBuilder().longRunningArchiveBooksOperationSettings();
    }

    /**
     * Returns the builder for the settings used for calls to streamingArchiveBooks.
     */
    public StreamingCallSettings.Builder<ArchiveBooksRequest, ArchiveBooksResponse> streamingArchiveBooksSettings() {
      return getStubSettingsBuilder().streamingArchiveBooksSettings();
    }

    /**
     * Returns the builder for the settings used for calls to saveBook.
     */
    public UnaryCallSettings.Builder<Book, Empty> saveBookSettings() {
      return getStubSettingsBuilder().saveBookSettings();
    }

    /**
     * Returns the builder for the settings used for calls to privateListShelves.
     */
    public UnaryCallSettings.Builder<ListShelvesRequest, Book> privateListShelvesSettings() {
      return getStubSettingsBuilder().privateListShelvesSettings();
    }

    @Override
    public LibrarySettings build() throws IOException {
      return new LibrarySettings(this);
    }
  }
}
============== file: src/main/java/com/google/example/library/v1/MyProtoClient.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1;

import com.google.api.core.ApiFunction;
import com.google.api.core.ApiFuture;
import com.google.api.core.ApiFutures;
import com.google.api.core.BetaApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.paging.AbstractFixedSizeCollection;
import com.google.api.gax.paging.AbstractPage;
import com.google.api.gax.paging.AbstractPagedListResponse;
import com.google.api.gax.paging.FixedSizeCollection;
import com.google.api.gax.paging.Page;
import com.google.api.gax.rpc.ApiExceptions;
import com.google.api.gax.rpc.PageContext;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.api.pathtemplate.PathTemplate;
import com.google.common.base.Function;
import com.google.common.collect.Iterables;
import com.google.common.util.concurrent.MoreExecutors;
import com.google.example.library.v1.stub.MyProtoStub;
import com.google.example.library.v1.stub.MyProtoStubSettings;
import com.google.protos.google.example.library.v1.AnotherService.MethodRequest;
import com.google.protos.google.example.library.v1.AnotherService.MethodResponse;
import com.google.protos.google.example.library.v1.AnotherService.Namespace;
import java.io.Closeable;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND SERVICE
/**
 * Service Description:
 *
 * <p>This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * <pre>
 * <code>
 * try (MyProtoClient myProtoClient = MyProtoClient.create()) {
 *   MethodRequest request = MethodRequest.newBuilder().build();
 *   MethodResponse response = myProtoClient.myMethod(request);
 * }
 * </code>
 * </pre>
 *
 * <p>Note: close() needs to be called on the myProtoClient object to clean up resources such
 * as threads. In the example above, try-with-resources is used, which automatically calls
 * close().
 *
 * <p>The surface of this class includes several types of Java methods for each of the API's methods:
 *
 * <ol>
 * <li> A "flattened" method. With this type of method, the fields of the request type have been
 * converted into function parameters. It may be the case that not all fields are available
 * as parameters, and not every API method will have a flattened method entry point.
 * <li> A "request object" method. This type of method only takes one parameter, a request
 * object, which must be constructed before the call. Not every API method will have a request
 * object method.
 * <li> A "callable" method. This type of method takes no parameters and returns an immutable
 * API callable object, which can be used to initiate calls to the service.
 * </ol>
 *
 * <p>See the individual methods for example code.
 *
 * <p>Many parameters require resource names to be formatted in a particular way. To assist
 * with these names, this class includes a format method for each type of name, and additionally
 * a parse method to extract the individual identifiers contained within names that are
 * returned.
 *
 * <p>This class can be customized by passing in a custom instance of MyProtoSettings to
 * create(). For example:
 *
 * To customize credentials:
 *
 * <pre>
 * <code>
 * MyProtoSettings myProtoSettings =
 *     MyProtoSettings.newBuilder()
 *         .setCredentialsProvider(FixedCredentialsProvider.create(myCredentials))
 *         .build();
 * MyProtoClient myProtoClient =
 *     MyProtoClient.create(myProtoSettings);
 * </code>
 * </pre>
 *
 * To customize the endpoint:
 *
 * <pre>
 * <code>
 * MyProtoSettings myProtoSettings =
 *     MyProtoSettings.newBuilder().setEndpoint(myEndpoint).build();
 * MyProtoClient myProtoClient =
 *     MyProtoClient.create(myProtoSettings);
 * </code>
 * </pre>
 */
@Generated("by gapic-generator")
public class MyProtoClient implements BackgroundResource {
  private final MyProtoSettings settings;
  private final MyProtoStub stub;



  /**
   * Constructs an instance of MyProtoClient with default settings.
   */
  public static final MyProtoClient create() throws IOException {
    return create(MyProtoSettings.newBuilder().build());
  }

  /**
   * Constructs an instance of MyProtoClient, using the given settings.
   * The channels are created based on the settings passed in, or defaults for any
   * settings that are not set.
   */
  public static final MyProtoClient create(MyProtoSettings settings) throws IOException {
    return new MyProtoClient(settings);
  }

  /**
   * Constructs an instance of MyProtoClient, using the given stub for making calls. This is for
   * advanced usage - prefer to use MyProtoSettings}.
   */
  @BetaApi("A restructuring of stub classes is planned, so this may break in the future")
  public static final MyProtoClient create(MyProtoStub stub) {
    return new MyProtoClient(stub);
  }

  /**
   * Constructs an instance of MyProtoClient, using the given settings.
   * This is protected so that it is easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected MyProtoClient(MyProtoSettings settings) throws IOException {
    this.settings = settings;
    this.stub = ((MyProtoStubSettings) settings.getStubSettings()).createStub();
  }

  @BetaApi("A restructuring of stub classes is planned, so this may break in the future")
  protected MyProtoClient(MyProtoStub stub) {
    this.settings = null;
    this.stub = stub;
  }

  public final MyProtoSettings getSettings() {
    return settings;
  }

  @BetaApi("A restructuring of stub classes is planned, so this may break in the future")
  public MyProtoStub getStub() {
    return stub;
  }


  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (MyProtoClient myProtoClient = MyProtoClient.create()) {
   *   MethodRequest request = MethodRequest.newBuilder().build();
   *   MethodResponse response = myProtoClient.myMethod(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final MethodResponse myMethod(MethodRequest request) {
    return myMethodCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (MyProtoClient myProtoClient = MyProtoClient.create()) {
   *   MethodRequest request = MethodRequest.newBuilder().build();
   *   ApiFuture&lt;MethodResponse&gt; future = myProtoClient.myMethodCallable().futureCall(request);
   *   // Do something
   *   MethodResponse response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<MethodRequest, MethodResponse> myMethodCallable() {
    return stub.myMethodCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Define a service with a reserved name
   *
   * Sample code:
   * <pre><code>
   * try (MyProtoClient myProtoClient = MyProtoClient.create()) {
   *   MethodRequest request = MethodRequest.newBuilder().build();
   *   Namespace response = myProtoClient.getNamespace(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  public final Namespace getNamespace(MethodRequest request) {
    return getNamespaceCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Define a service with a reserved name
   *
   * Sample code:
   * <pre><code>
   * try (MyProtoClient myProtoClient = MyProtoClient.create()) {
   *   MethodRequest request = MethodRequest.newBuilder().build();
   *   ApiFuture&lt;Namespace&gt; future = myProtoClient.getNamespaceCallable().futureCall(request);
   *   // Do something
   *   Namespace response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<MethodRequest, Namespace> getNamespaceCallable() {
    return stub.getNamespaceCallable();
  }

  @Override
  public final void close() {
    stub.close();
  }

  @Override
  public void shutdown() {
    stub.shutdown();
  }

  @Override
  public boolean isShutdown() {
    return stub.isShutdown();
  }

  @Override
  public boolean isTerminated() {
    return stub.isTerminated();
  }

  @Override
  public void shutdownNow() {
    stub.shutdownNow();
  }

  @Override
  public boolean awaitTermination(long duration, TimeUnit unit) throws InterruptedException {
    return stub.awaitTermination(duration, unit);
  }


}
============== file: src/main/java/com/google/example/library/v1/MyProtoSettings.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1;

import com.google.api.core.ApiFunction;
import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.core.GaxProperties;
import com.google.api.gax.core.GoogleCredentialsProvider;
import com.google.api.gax.core.InstantiatingExecutorProvider;
import com.google.api.gax.grpc.GaxGrpcProperties;
import com.google.api.gax.grpc.GrpcTransportChannel;
import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.ApiClientHeaderProvider;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.ClientSettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.StatusCode;
import com.google.api.gax.rpc.StubSettings;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.api.gax.rpc.UnaryCallSettings;
import com.google.auth.Credentials;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.google.example.library.v1.stub.MyProtoStubSettings;
import com.google.protos.google.example.library.v1.AnotherService.MethodRequest;
import com.google.protos.google.example.library.v1.AnotherService.MethodResponse;
import com.google.protos.google.example.library.v1.AnotherService.Namespace;
import com.google.protos.google.example.library.v1.MyProtoGrpc;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.ScheduledExecutorService;
import javax.annotation.Generated;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * Settings class to configure an instance of {@link MyProtoClient}.
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 * <li>The default service address (library-example.googleapis.com) and default port (1234)
 * are used.
 * <li>Credentials are acquired automatically through Application Default Credentials.
 * <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 *
 * <p>The builder of this class is recursive, so contained classes are themselves builders.
 * When build() is called, the tree of builders is called to create the complete settings
 * object.
 *
 * For example, to set the total timeout of myMethod to 30 seconds:
 *
 * <pre>
 * <code>
 * MyProtoSettings.Builder myProtoSettingsBuilder =
 *     MyProtoSettings.newBuilder();
 * myProtoSettingsBuilder
 *     .myMethodSettings()
 *     .setRetrySettings(
 *         myProtoSettingsBuilder.myMethodSettings().getRetrySettings().toBuilder()
 *             .setTotalTimeout(Duration.ofSeconds(30))
 *             .build());
 * MyProtoSettings myProtoSettings = myProtoSettingsBuilder.build();
 * </code>
 * </pre>
 */
@Generated("by gapic-generator")
public class MyProtoSettings extends ClientSettings<MyProtoSettings> {
  /**
   * Returns the object with the settings used for calls to myMethod.
   */
  public UnaryCallSettings<MethodRequest, MethodResponse> myMethodSettings() {
    return ((MyProtoStubSettings) getStubSettings()).myMethodSettings();
  }

  /**
   * Returns the object with the settings used for calls to getNamespace.
   */
  public UnaryCallSettings<MethodRequest, Namespace> getNamespaceSettings() {
    return ((MyProtoStubSettings) getStubSettings()).getNamespaceSettings();
  }


  public static final MyProtoSettings create(MyProtoStubSettings stub) throws IOException {
    return new MyProtoSettings.Builder(stub.toBuilder()).build();
  }

  /**
   * Returns a builder for the default ExecutorProvider for this service.
   */
  public static InstantiatingExecutorProvider.Builder defaultExecutorProviderBuilder() {
    return MyProtoStubSettings.defaultExecutorProviderBuilder();
  }

  /**
   * Returns the default service endpoint.
   */
   public static String getDefaultEndpoint() {
     return MyProtoStubSettings.getDefaultEndpoint();
   }


  /**
   * Returns the default service scopes.
   */
  public static List<String> getDefaultServiceScopes() {
    return MyProtoStubSettings.getDefaultServiceScopes();
  }


  /**
   * Returns a builder for the default credentials for this service.
   */
  public static GoogleCredentialsProvider.Builder defaultCredentialsProviderBuilder() {
    return MyProtoStubSettings.defaultCredentialsProviderBuilder();
  }

  /** Returns a builder for the default ChannelProvider for this service. */
  public static InstantiatingGrpcChannelProvider.Builder defaultGrpcTransportProviderBuilder() {
    return MyProtoStubSettings.defaultGrpcTransportProviderBuilder();
  }

  public static TransportChannelProvider defaultTransportChannelProvider() {
    return MyProtoStubSettings.defaultTransportChannelProvider();
  }

  @BetaApi("The surface for customizing headers is not stable yet and may change in the future.")
  public static ApiClientHeaderProvider.Builder defaultApiClientHeaderProviderBuilder() {
    return MyProtoStubSettings.defaultApiClientHeaderProviderBuilder();
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder() {
    return Builder.createDefault();
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder(ClientContext clientContext) {
    return new Builder(clientContext);
  }

  /**
   * Returns a builder containing all the values of this settings class.
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  protected MyProtoSettings(Builder settingsBuilder) throws IOException {
    super(settingsBuilder);
  }

  /**
   * Builder for MyProtoSettings.
   */
  public static class Builder extends ClientSettings.Builder<MyProtoSettings, Builder> {
    protected Builder() throws IOException {
      this((ClientContext) null);
    }

    protected Builder(ClientContext clientContext) {
      super(MyProtoStubSettings.newBuilder(clientContext));
    }

    private static Builder createDefault() {
      return new Builder(MyProtoStubSettings.newBuilder());
    }

    protected Builder(MyProtoSettings settings) {
      super(settings.getStubSettings().toBuilder());
    }

    protected Builder(MyProtoStubSettings.Builder stubSettings) {
      super(stubSettings);
    }


    public MyProtoStubSettings.Builder getStubSettingsBuilder() {
      return ((MyProtoStubSettings.Builder) getStubSettings());
    }

    // NEXT_MAJOR_VER: remove 'throws Exception'
    /**
     * Applies the given settings updater function to all of the unary API methods in this service.
     *
     * Note: This method does not support applying settings to streaming methods.
     */
    public Builder applyToAllUnaryMethods(ApiFunction<UnaryCallSettings.Builder<?, ?>, Void> settingsUpdater) throws Exception {
      super.applyToAllUnaryMethods(getStubSettingsBuilder().unaryMethodSettingsBuilders(), settingsUpdater);
      return this;
    }

    /**
     * Returns the builder for the settings used for calls to myMethod.
     */
    public UnaryCallSettings.Builder<MethodRequest, MethodResponse> myMethodSettings() {
      return getStubSettingsBuilder().myMethodSettings();
    }

    /**
     * Returns the builder for the settings used for calls to getNamespace.
     */
    public UnaryCallSettings.Builder<MethodRequest, Namespace> getNamespaceSettings() {
      return getStubSettingsBuilder().getNamespaceSettings();
    }

    @Override
    public MyProtoSettings build() throws IOException {
      return new MyProtoSettings(this);
    }
  }
}
============== file: src/main/java/com/google/example/library/v1/package-info.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A client to Google Example Library API.
 *
 * The interfaces provided are listed below, along with usage samples.
 *
 * =============
 * LibraryClient
 * =============
 *
 * Service Description: This API represents a simple digital library.  It lets you manage Shelf
 * resources and Book resources in the library. It defines the following
 * resource model:
 *
 * - The API has a collection of [Shelf][google.example.library.v1.Shelf]
 *   resources, named ``bookShelves/&#42;``
 *
 * - Each Shelf has a collection of [Book][google.example.library.v1.Book]
 *   resources, named `bookShelves/&#42;/books/&#42;`
 *
 * Check out [cloud docs!](/library/example/link).
 * This is [not a cloud link](http://www.google.com).
 *
 * Service comment may include special characters: &lt;&gt;&amp;"`'{@literal @}.
 *
 * Also see this awesome doc there! and there! and everywhere!
 *
 * Sample for LibraryClient:
 * <pre>
 * <code>
 * try (LibraryClient libraryClient = LibraryClient.create()) {
 *   Shelf shelf = Shelf.newBuilder().build();
 *   Shelf response = libraryClient.createShelf(shelf);
 * }
 * </code>
 * </pre>
 *
 * =============
 * MyProtoClient
 * =============
 *
 * Service Description:
 *
 * Sample for MyProtoClient:
 * <pre>
 * <code>
 * try (MyProtoClient myProtoClient = MyProtoClient.create()) {
 *   MethodRequest request = MethodRequest.newBuilder().build();
 *   MethodResponse response = myProtoClient.myMethod(request);
 * }
 * </code>
 * </pre>
 *
 */
@Generated("by gapic-generator")
package com.google.example.library.v1;

import  javax.annotation.Generated;
============== file: src/main/java/com/google/example/library/v1/stub/GrpcLibraryServiceCallableFactory.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1.stub;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.core.BackgroundResourceAggregation;
import com.google.api.gax.grpc.GrpcCallSettings;
import com.google.api.gax.grpc.GrpcCallableFactory;
import com.google.api.gax.grpc.GrpcStubCallableFactory;
import com.google.api.gax.longrunning.OperationFuture;
import com.google.api.gax.longrunning.OperationSnapshot;
import com.google.api.gax.rpc.BatchingCallSettings;
import com.google.api.gax.rpc.BidiStreamingCallable;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.ClientStreamingCallable;
import com.google.api.gax.rpc.OperationCallSettings;
import com.google.api.gax.rpc.OperationCallable;
import com.google.api.gax.rpc.PagedCallSettings;
import com.google.api.gax.rpc.RequestParamsExtractor;
import com.google.api.gax.rpc.ServerStreamingCallSettings;
import com.google.api.gax.rpc.ServerStreamingCallable;
import com.google.api.gax.rpc.StreamingCallSettings;
import com.google.api.gax.rpc.UnaryCallSettings;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.api.resourcenames.ResourceName;
import com.google.common.collect.ImmutableMap;
import com.google.example.library.v1.AddCommentsRequest;
import com.google.example.library.v1.ArchiveBooksMetadata;
import com.google.example.library.v1.ArchiveBooksRequest;
import com.google.example.library.v1.ArchiveBooksResponse;
import com.google.example.library.v1.ArchiveName;
import com.google.example.library.v1.ArchivedBookName;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookFromAnywhere;
import com.google.example.library.v1.BookFromArchive;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.Comment;
import com.google.example.library.v1.CreateBookRequest;
import com.google.example.library.v1.CreateShelfRequest;
import com.google.example.library.v1.DeleteBookRequest;
import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.DiscussBookRequest;
import com.google.example.library.v1.FindRelatedBooksRequest;
import com.google.example.library.v1.FindRelatedBooksResponse;
import com.google.example.library.v1.FolderName;
import com.google.example.library.v1.GetBigBookMetadata;
import com.google.example.library.v1.GetBookFromAbsolutelyAnywhereRequest;
import com.google.example.library.v1.GetBookFromAnywhereRequest;
import com.google.example.library.v1.GetBookFromArchiveRequest;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.GetShelfRequest;
import static com.google.example.library.v1.LibraryClient.FindRelatedBooksPagedResponse;
import static com.google.example.library.v1.LibraryClient.ListBooksPagedResponse;
import static com.google.example.library.v1.LibraryClient.ListShelvesPagedResponse;
import static com.google.example.library.v1.LibraryClient.ListStringsPagedResponse;
import com.google.example.library.v1.LibrarySettings;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.ListStringsRequest;
import com.google.example.library.v1.ListStringsResponse;
import com.google.example.library.v1.LocationName;
import com.google.example.library.v1.MergeShelvesRequest;
import com.google.example.library.v1.MoveBookRequest;
import com.google.example.library.v1.MoveBooksRequest;
import com.google.example.library.v1.MoveBooksResponse;
import com.google.example.library.v1.ProjectName;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.PublisherName;
import com.google.example.library.v1.SeriesUuid;
import com.google.example.library.v1.Shelf;
import com.google.example.library.v1.ShelfName;
import com.google.example.library.v1.SomeMessage;
import com.google.example.library.v1.StreamBooksRequest;
import com.google.example.library.v1.StreamShelvesRequest;
import com.google.example.library.v1.StreamShelvesResponse;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest.InnerMessage;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsResponse;
import com.google.example.library.v1.UpdateBookIndexRequest;
import com.google.example.library.v1.UpdateBookRequest;
import com.google.longrunning.Operation;
import com.google.longrunning.stub.GrpcOperationsStub;
import com.google.longrunning.stub.OperationsStub;
import com.google.protobuf.Any;
import com.google.protobuf.BoolValue;
import com.google.protobuf.ByteString;
import com.google.protobuf.BytesValue;
import com.google.protobuf.DoubleValue;
import com.google.protobuf.Duration;
import com.google.protobuf.Empty;
import com.google.protobuf.FieldMask;
import com.google.protobuf.FloatValue;
import com.google.protobuf.Int32Value;
import com.google.protobuf.Int64Value;
import com.google.protobuf.ListValue;
import com.google.protobuf.StringValue;
import com.google.protobuf.Struct;
import com.google.protobuf.Timestamp;
import com.google.protobuf.UInt32Value;
import com.google.protobuf.UInt64Value;
import com.google.protobuf.Value;
import com.google.tagger.v1.TaggerProto.AddLabelRequest;
import com.google.tagger.v1.TaggerProto.AddLabelResponse;
import io.grpc.MethodDescriptor;
import io.grpc.protobuf.ProtoUtils;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * gRPC callable factory implementation for Google Example Library API.
 *
 * <p>This class is for advanced usage.
 */
@Generated("by gapic-generator")
@BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
public class GrpcLibraryServiceCallableFactory implements GrpcStubCallableFactory {
  @Override
  public <RequestT, ResponseT> UnaryCallable<RequestT, ResponseT> createUnaryCallable(
      GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,
      UnaryCallSettings<RequestT, ResponseT> callSettings, ClientContext clientContext) {
    return GrpcCallableFactory.createUnaryCallable(grpcCallSettings, callSettings, clientContext);
  }

  @Override
  public <RequestT, ResponseT, PagedListResponseT> UnaryCallable<RequestT, PagedListResponseT> createPagedCallable(
      GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,
      PagedCallSettings<RequestT, ResponseT, PagedListResponseT> pagedCallSettings,
      ClientContext clientContext) {
    return GrpcCallableFactory.createPagedCallable(grpcCallSettings, pagedCallSettings, clientContext);
  }

  @Override
  public <RequestT, ResponseT> UnaryCallable<RequestT, ResponseT> createBatchingCallable(
      GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,
      BatchingCallSettings<RequestT, ResponseT> batchingCallSettings, ClientContext clientContext) {
    return GrpcCallableFactory.createBatchingCallable(grpcCallSettings, batchingCallSettings, clientContext);
  }

  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  @Override
  public <RequestT, ResponseT, MetadataT> OperationCallable<RequestT, ResponseT, MetadataT> createOperationCallable(
      GrpcCallSettings<RequestT, com.google.longrunning.Operation> grpcCallSettings,
      OperationCallSettings<RequestT, ResponseT, MetadataT> operationCallSettings,
      ClientContext clientContext, OperationsStub operationsStub) {
    return GrpcCallableFactory.createOperationCallable(grpcCallSettings, operationCallSettings, clientContext, operationsStub);
  }

  @Override
  public <RequestT, ResponseT> BidiStreamingCallable<RequestT, ResponseT> createBidiStreamingCallable(
      GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,
      StreamingCallSettings<RequestT, ResponseT> streamingCallSettings,
      ClientContext clientContext) {
    return GrpcCallableFactory.createBidiStreamingCallable(grpcCallSettings, streamingCallSettings, clientContext);
  }

  @Override
  public <RequestT, ResponseT> ServerStreamingCallable<RequestT, ResponseT> createServerStreamingCallable(
      GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,
      ServerStreamingCallSettings<RequestT, ResponseT> streamingCallSettings,
      ClientContext clientContext) {
    return GrpcCallableFactory.createServerStreamingCallable(grpcCallSettings, streamingCallSettings, clientContext);
  }

  @Override
  public <RequestT, ResponseT> ClientStreamingCallable<RequestT, ResponseT> createClientStreamingCallable(
      GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,
      StreamingCallSettings<RequestT, ResponseT> streamingCallSettings,
      ClientContext clientContext) {
    return GrpcCallableFactory.createClientStreamingCallable(grpcCallSettings, streamingCallSettings, clientContext);
  }
}
============== file: src/main/java/com/google/example/library/v1/stub/GrpcLibraryServiceStub.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1.stub;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.core.BackgroundResourceAggregation;
import com.google.api.gax.grpc.GrpcCallSettings;
import com.google.api.gax.grpc.GrpcCallableFactory;
import com.google.api.gax.grpc.GrpcStubCallableFactory;
import com.google.api.gax.longrunning.OperationFuture;
import com.google.api.gax.longrunning.OperationSnapshot;
import com.google.api.gax.rpc.BidiStreamingCallable;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.ClientStreamingCallable;
import com.google.api.gax.rpc.OperationCallable;
import com.google.api.gax.rpc.RequestParamsExtractor;
import com.google.api.gax.rpc.ServerStreamingCallable;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.api.resourcenames.ResourceName;
import com.google.common.collect.ImmutableMap;
import com.google.example.library.v1.AddCommentsRequest;
import com.google.example.library.v1.ArchiveBooksMetadata;
import com.google.example.library.v1.ArchiveBooksRequest;
import com.google.example.library.v1.ArchiveBooksResponse;
import com.google.example.library.v1.ArchiveName;
import com.google.example.library.v1.ArchivedBookName;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookFromAnywhere;
import com.google.example.library.v1.BookFromArchive;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.Comment;
import com.google.example.library.v1.CreateBookRequest;
import com.google.example.library.v1.CreateShelfRequest;
import com.google.example.library.v1.DeleteBookRequest;
import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.DiscussBookRequest;
import com.google.example.library.v1.FindRelatedBooksRequest;
import com.google.example.library.v1.FindRelatedBooksResponse;
import com.google.example.library.v1.FolderName;
import com.google.example.library.v1.GetBigBookMetadata;
import com.google.example.library.v1.GetBookFromAbsolutelyAnywhereRequest;
import com.google.example.library.v1.GetBookFromAnywhereRequest;
import com.google.example.library.v1.GetBookFromArchiveRequest;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.GetShelfRequest;
import static com.google.example.library.v1.LibraryClient.FindRelatedBooksPagedResponse;
import static com.google.example.library.v1.LibraryClient.ListBooksPagedResponse;
import static com.google.example.library.v1.LibraryClient.ListShelvesPagedResponse;
import static com.google.example.library.v1.LibraryClient.ListStringsPagedResponse;
import com.google.example.library.v1.LibrarySettings;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.ListStringsRequest;
import com.google.example.library.v1.ListStringsResponse;
import com.google.example.library.v1.LocationName;
import com.google.example.library.v1.MergeShelvesRequest;
import com.google.example.library.v1.MoveBookRequest;
import com.google.example.library.v1.MoveBooksRequest;
import com.google.example.library.v1.MoveBooksResponse;
import com.google.example.library.v1.ProjectName;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.PublisherName;
import com.google.example.library.v1.SeriesUuid;
import com.google.example.library.v1.Shelf;
import com.google.example.library.v1.ShelfName;
import com.google.example.library.v1.SomeMessage;
import com.google.example.library.v1.StreamBooksRequest;
import com.google.example.library.v1.StreamShelvesRequest;
import com.google.example.library.v1.StreamShelvesResponse;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest.InnerMessage;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsResponse;
import com.google.example.library.v1.UpdateBookIndexRequest;
import com.google.example.library.v1.UpdateBookRequest;
import com.google.longrunning.Operation;
import com.google.longrunning.stub.GrpcOperationsStub;
import com.google.protobuf.Any;
import com.google.protobuf.BoolValue;
import com.google.protobuf.ByteString;
import com.google.protobuf.BytesValue;
import com.google.protobuf.DoubleValue;
import com.google.protobuf.Duration;
import com.google.protobuf.Empty;
import com.google.protobuf.FieldMask;
import com.google.protobuf.FloatValue;
import com.google.protobuf.Int32Value;
import com.google.protobuf.Int64Value;
import com.google.protobuf.ListValue;
import com.google.protobuf.StringValue;
import com.google.protobuf.Struct;
import com.google.protobuf.Timestamp;
import com.google.protobuf.UInt32Value;
import com.google.protobuf.UInt64Value;
import com.google.protobuf.Value;
import com.google.tagger.v1.TaggerProto.AddLabelRequest;
import com.google.tagger.v1.TaggerProto.AddLabelResponse;
import io.grpc.MethodDescriptor;
import io.grpc.protobuf.ProtoUtils;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * gRPC stub implementation for Google Example Library API.
 *
 * <p>This class is for advanced usage and reflects the underlying API directly.
 */
@Generated("by gapic-generator")
@BetaApi("A restructuring of stub classes is planned, so this may break in the future")
public class GrpcLibraryServiceStub extends LibraryServiceStub {

  private static final MethodDescriptor<CreateShelfRequest, Shelf> createShelfMethodDescriptor =
      MethodDescriptor.<CreateShelfRequest, Shelf>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/CreateShelf")
          .setRequestMarshaller(ProtoUtils.marshaller(CreateShelfRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(Shelf.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<GetShelfRequest, Shelf> getShelfMethodDescriptor =
      MethodDescriptor.<GetShelfRequest, Shelf>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/GetShelf")
          .setRequestMarshaller(ProtoUtils.marshaller(GetShelfRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(Shelf.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<ListShelvesRequest, ListShelvesResponse> listShelvesMethodDescriptor =
      MethodDescriptor.<ListShelvesRequest, ListShelvesResponse>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/ListShelves")
          .setRequestMarshaller(ProtoUtils.marshaller(ListShelvesRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(ListShelvesResponse.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<DeleteShelfRequest, Empty> deleteShelfMethodDescriptor =
      MethodDescriptor.<DeleteShelfRequest, Empty>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/DeleteShelf")
          .setRequestMarshaller(ProtoUtils.marshaller(DeleteShelfRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(Empty.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<MergeShelvesRequest, Shelf> mergeShelvesMethodDescriptor =
      MethodDescriptor.<MergeShelvesRequest, Shelf>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/MergeShelves")
          .setRequestMarshaller(ProtoUtils.marshaller(MergeShelvesRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(Shelf.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<CreateBookRequest, Book> createBookMethodDescriptor =
      MethodDescriptor.<CreateBookRequest, Book>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/CreateBook")
          .setRequestMarshaller(ProtoUtils.marshaller(CreateBookRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(Book.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<PublishSeriesRequest, PublishSeriesResponse> publishSeriesMethodDescriptor =
      MethodDescriptor.<PublishSeriesRequest, PublishSeriesResponse>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/PublishSeries")
          .setRequestMarshaller(ProtoUtils.marshaller(PublishSeriesRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(PublishSeriesResponse.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<GetBookRequest, Book> getBookMethodDescriptor =
      MethodDescriptor.<GetBookRequest, Book>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/GetBook")
          .setRequestMarshaller(ProtoUtils.marshaller(GetBookRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(Book.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<ListBooksRequest, ListBooksResponse> listBooksMethodDescriptor =
      MethodDescriptor.<ListBooksRequest, ListBooksResponse>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/ListBooks")
          .setRequestMarshaller(ProtoUtils.marshaller(ListBooksRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(ListBooksResponse.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<DeleteBookRequest, Empty> deleteBookMethodDescriptor =
      MethodDescriptor.<DeleteBookRequest, Empty>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/DeleteBook")
          .setRequestMarshaller(ProtoUtils.marshaller(DeleteBookRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(Empty.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<UpdateBookRequest, Book> updateBookMethodDescriptor =
      MethodDescriptor.<UpdateBookRequest, Book>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/UpdateBook")
          .setRequestMarshaller(ProtoUtils.marshaller(UpdateBookRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(Book.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<MoveBookRequest, Book> moveBookMethodDescriptor =
      MethodDescriptor.<MoveBookRequest, Book>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/MoveBook")
          .setRequestMarshaller(ProtoUtils.marshaller(MoveBookRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(Book.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<ListStringsRequest, ListStringsResponse> listStringsMethodDescriptor =
      MethodDescriptor.<ListStringsRequest, ListStringsResponse>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/ListStrings")
          .setRequestMarshaller(ProtoUtils.marshaller(ListStringsRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(ListStringsResponse.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<AddCommentsRequest, Empty> addCommentsMethodDescriptor =
      MethodDescriptor.<AddCommentsRequest, Empty>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/AddComments")
          .setRequestMarshaller(ProtoUtils.marshaller(AddCommentsRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(Empty.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveMethodDescriptor =
      MethodDescriptor.<GetBookFromArchiveRequest, BookFromArchive>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/GetBookFromArchive")
          .setRequestMarshaller(ProtoUtils.marshaller(GetBookFromArchiveRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(BookFromArchive.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereMethodDescriptor =
      MethodDescriptor.<GetBookFromAnywhereRequest, BookFromAnywhere>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/GetBookFromAnywhere")
          .setRequestMarshaller(ProtoUtils.marshaller(GetBookFromAnywhereRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(BookFromAnywhere.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere> getBookFromAbsolutelyAnywhereMethodDescriptor =
      MethodDescriptor.<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/GetBookFromAbsolutelyAnywhere")
          .setRequestMarshaller(ProtoUtils.marshaller(GetBookFromAbsolutelyAnywhereRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(BookFromAnywhere.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<UpdateBookIndexRequest, Empty> updateBookIndexMethodDescriptor =
      MethodDescriptor.<UpdateBookIndexRequest, Empty>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/UpdateBookIndex")
          .setRequestMarshaller(ProtoUtils.marshaller(UpdateBookIndexRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(Empty.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<StreamShelvesRequest, StreamShelvesResponse> streamShelvesMethodDescriptor =
      MethodDescriptor.<StreamShelvesRequest, StreamShelvesResponse>newBuilder()
          .setType(MethodDescriptor.MethodType.SERVER_STREAMING)
          .setFullMethodName("google.example.library.v1.LibraryService/StreamShelves")
          .setRequestMarshaller(ProtoUtils.marshaller(StreamShelvesRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(StreamShelvesResponse.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<StreamBooksRequest, Book> streamBooksMethodDescriptor =
      MethodDescriptor.<StreamBooksRequest, Book>newBuilder()
          .setType(MethodDescriptor.MethodType.SERVER_STREAMING)
          .setFullMethodName("google.example.library.v1.LibraryService/StreamBooks")
          .setRequestMarshaller(ProtoUtils.marshaller(StreamBooksRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(Book.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<DiscussBookRequest, Comment> discussBookMethodDescriptor =
      MethodDescriptor.<DiscussBookRequest, Comment>newBuilder()
          .setType(MethodDescriptor.MethodType.BIDI_STREAMING)
          .setFullMethodName("google.example.library.v1.LibraryService/DiscussBook")
          .setRequestMarshaller(ProtoUtils.marshaller(DiscussBookRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(Comment.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<DiscussBookRequest, Comment> monologAboutBookMethodDescriptor =
      MethodDescriptor.<DiscussBookRequest, Comment>newBuilder()
          .setType(MethodDescriptor.MethodType.CLIENT_STREAMING)
          .setFullMethodName("google.example.library.v1.LibraryService/MonologAboutBook")
          .setRequestMarshaller(ProtoUtils.marshaller(DiscussBookRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(Comment.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<DiscussBookRequest, Empty> babbleAboutBookMethodDescriptor =
      MethodDescriptor.<DiscussBookRequest, Empty>newBuilder()
          .setType(MethodDescriptor.MethodType.CLIENT_STREAMING)
          .setFullMethodName("google.example.library.v1.LibraryService/BabbleAboutBook")
          .setRequestMarshaller(ProtoUtils.marshaller(DiscussBookRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(Empty.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<FindRelatedBooksRequest, FindRelatedBooksResponse> findRelatedBooksMethodDescriptor =
      MethodDescriptor.<FindRelatedBooksRequest, FindRelatedBooksResponse>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/FindRelatedBooks")
          .setRequestMarshaller(ProtoUtils.marshaller(FindRelatedBooksRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(FindRelatedBooksResponse.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<AddLabelRequest, AddLabelResponse> addLabelMethodDescriptor =
      MethodDescriptor.<AddLabelRequest, AddLabelResponse>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.tagger.v1.Labeler/AddLabel")
          .setRequestMarshaller(ProtoUtils.marshaller(AddLabelRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(AddLabelResponse.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<GetBookRequest, Operation> getBigBookMethodDescriptor =
      MethodDescriptor.<GetBookRequest, Operation>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/GetBigBook")
          .setRequestMarshaller(ProtoUtils.marshaller(GetBookRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(Operation.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<GetBookRequest, Operation> getBigNothingMethodDescriptor =
      MethodDescriptor.<GetBookRequest, Operation>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/GetBigNothing")
          .setRequestMarshaller(ProtoUtils.marshaller(GetBookRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(Operation.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsMethodDescriptor =
      MethodDescriptor.<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/TestOptionalRequiredFlatteningParams")
          .setRequestMarshaller(ProtoUtils.marshaller(TestOptionalRequiredFlatteningParamsRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(TestOptionalRequiredFlatteningParamsResponse.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<MoveBooksRequest, MoveBooksResponse> moveBooksMethodDescriptor =
      MethodDescriptor.<MoveBooksRequest, MoveBooksResponse>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/MoveBooks")
          .setRequestMarshaller(ProtoUtils.marshaller(MoveBooksRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(MoveBooksResponse.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<ArchiveBooksRequest, ArchiveBooksResponse> archiveBooksMethodDescriptor =
      MethodDescriptor.<ArchiveBooksRequest, ArchiveBooksResponse>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/ArchiveBooks")
          .setRequestMarshaller(ProtoUtils.marshaller(ArchiveBooksRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(ArchiveBooksResponse.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<ArchiveBooksRequest, Operation> longRunningArchiveBooksMethodDescriptor =
      MethodDescriptor.<ArchiveBooksRequest, Operation>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/LongRunningArchiveBooks")
          .setRequestMarshaller(ProtoUtils.marshaller(ArchiveBooksRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(Operation.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<ArchiveBooksRequest, ArchiveBooksResponse> streamingArchiveBooksMethodDescriptor =
      MethodDescriptor.<ArchiveBooksRequest, ArchiveBooksResponse>newBuilder()
          .setType(MethodDescriptor.MethodType.BIDI_STREAMING)
          .setFullMethodName("google.example.library.v1.LibraryService/StreamingArchiveBooks")
          .setRequestMarshaller(ProtoUtils.marshaller(ArchiveBooksRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(ArchiveBooksResponse.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<Book, Empty> saveBookMethodDescriptor =
      MethodDescriptor.<Book, Empty>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/SaveBook")
          .setRequestMarshaller(ProtoUtils.marshaller(Book.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(Empty.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<ListShelvesRequest, Book> privateListShelvesMethodDescriptor =
      MethodDescriptor.<ListShelvesRequest, Book>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.LibraryService/PrivateListShelves")
          .setRequestMarshaller(ProtoUtils.marshaller(ListShelvesRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(Book.getDefaultInstance()))
          .build();


  private final BackgroundResource backgroundResources;
  private final GrpcOperationsStub operationsStub;

  private final UnaryCallable<CreateShelfRequest, Shelf> createShelfCallable;
  private final UnaryCallable<GetShelfRequest, Shelf> getShelfCallable;
  private final UnaryCallable<ListShelvesRequest, ListShelvesResponse> listShelvesCallable;
  private final UnaryCallable<ListShelvesRequest, ListShelvesPagedResponse> listShelvesPagedCallable;
  private final UnaryCallable<DeleteShelfRequest, Empty> deleteShelfCallable;
  private final UnaryCallable<MergeShelvesRequest, Shelf> mergeShelvesCallable;
  private final UnaryCallable<CreateBookRequest, Book> createBookCallable;
  private final UnaryCallable<PublishSeriesRequest, PublishSeriesResponse> publishSeriesCallable;
  private final UnaryCallable<GetBookRequest, Book> getBookCallable;
  private final UnaryCallable<ListBooksRequest, ListBooksResponse> listBooksCallable;
  private final UnaryCallable<ListBooksRequest, ListBooksPagedResponse> listBooksPagedCallable;
  private final UnaryCallable<DeleteBookRequest, Empty> deleteBookCallable;
  private final UnaryCallable<UpdateBookRequest, Book> updateBookCallable;
  private final UnaryCallable<MoveBookRequest, Book> moveBookCallable;
  private final UnaryCallable<ListStringsRequest, ListStringsResponse> listStringsCallable;
  private final UnaryCallable<ListStringsRequest, ListStringsPagedResponse> listStringsPagedCallable;
  private final UnaryCallable<AddCommentsRequest, Empty> addCommentsCallable;
  private final UnaryCallable<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveCallable;
  private final UnaryCallable<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereCallable;
  private final UnaryCallable<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere> getBookFromAbsolutelyAnywhereCallable;
  private final UnaryCallable<UpdateBookIndexRequest, Empty> updateBookIndexCallable;
  private final ServerStreamingCallable<StreamShelvesRequest, StreamShelvesResponse> streamShelvesCallable;
  private final ServerStreamingCallable<StreamBooksRequest, Book> streamBooksCallable;
  private final BidiStreamingCallable<DiscussBookRequest, Comment> discussBookCallable;
  private final ClientStreamingCallable<DiscussBookRequest, Comment> monologAboutBookCallable;
  private final ClientStreamingCallable<DiscussBookRequest, Empty> babbleAboutBookCallable;
  private final UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksResponse> findRelatedBooksCallable;
  private final UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksPagedResponse> findRelatedBooksPagedCallable;
  private final UnaryCallable<AddLabelRequest, AddLabelResponse> addLabelCallable;
  private final UnaryCallable<GetBookRequest, Operation> getBigBookCallable;
  private final OperationCallable<GetBookRequest, Book, GetBigBookMetadata> getBigBookOperationCallable;
  private final UnaryCallable<GetBookRequest, Operation> getBigNothingCallable;
  private final OperationCallable<GetBookRequest, Empty, GetBigBookMetadata> getBigNothingOperationCallable;
  private final UnaryCallable<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsCallable;
  private final UnaryCallable<MoveBooksRequest, MoveBooksResponse> moveBooksCallable;
  private final UnaryCallable<ArchiveBooksRequest, ArchiveBooksResponse> archiveBooksCallable;
  private final UnaryCallable<ArchiveBooksRequest, Operation> longRunningArchiveBooksCallable;
  private final OperationCallable<ArchiveBooksRequest, ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksOperationCallable;
  private final BidiStreamingCallable<ArchiveBooksRequest, ArchiveBooksResponse> streamingArchiveBooksCallable;
  private final UnaryCallable<Book, Empty> saveBookCallable;
  private final UnaryCallable<ListShelvesRequest, Book> privateListShelvesCallable;

  private final GrpcStubCallableFactory callableFactory;

  public static final GrpcLibraryServiceStub create(LibraryServiceStubSettings settings) throws IOException {
    return new GrpcLibraryServiceStub(settings, ClientContext.create(settings));
  }

  public static final GrpcLibraryServiceStub create(ClientContext clientContext) throws IOException {
    return new GrpcLibraryServiceStub(LibraryServiceStubSettings.newBuilder().build(), clientContext);
  }

  public static final GrpcLibraryServiceStub create(ClientContext clientContext, GrpcStubCallableFactory callableFactory) throws IOException {
    return new GrpcLibraryServiceStub(LibraryServiceStubSettings.newBuilder().build(), clientContext, callableFactory);
  }

  /**
   * Constructs an instance of GrpcLibraryServiceStub, using the given settings.
   * This is protected so that it is easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected GrpcLibraryServiceStub(LibraryServiceStubSettings settings, ClientContext clientContext) throws IOException {
    this(settings, clientContext, new GrpcLibraryServiceCallableFactory());
  }

  /**
   * Constructs an instance of GrpcLibraryServiceStub, using the given settings.
   * This is protected so that it is easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected GrpcLibraryServiceStub(LibraryServiceStubSettings settings, ClientContext clientContext, GrpcStubCallableFactory callableFactory) throws IOException {
    this.callableFactory = callableFactory;
    this.operationsStub = GrpcOperationsStub.create(clientContext, callableFactory);

    GrpcCallSettings<CreateShelfRequest, Shelf> createShelfTransportSettings =
        GrpcCallSettings.<CreateShelfRequest, Shelf>newBuilder()
            .setMethodDescriptor(createShelfMethodDescriptor)
            .build();
    GrpcCallSettings<GetShelfRequest, Shelf> getShelfTransportSettings =
        GrpcCallSettings.<GetShelfRequest, Shelf>newBuilder()
            .setMethodDescriptor(getShelfMethodDescriptor)
            .setParamsExtractor(
                new RequestParamsExtractor<GetShelfRequest>() {
                  @Override
                  public Map<String, String> extract(GetShelfRequest request) {
                    ImmutableMap.Builder<String, String> params = ImmutableMap.builder();
                    params.put("name", String.valueOf(request.getName()));
                    return params.build();
                  }
                })
            .build();
    GrpcCallSettings<ListShelvesRequest, ListShelvesResponse> listShelvesTransportSettings =
        GrpcCallSettings.<ListShelvesRequest, ListShelvesResponse>newBuilder()
            .setMethodDescriptor(listShelvesMethodDescriptor)
            .build();
    GrpcCallSettings<DeleteShelfRequest, Empty> deleteShelfTransportSettings =
        GrpcCallSettings.<DeleteShelfRequest, Empty>newBuilder()
            .setMethodDescriptor(deleteShelfMethodDescriptor)
            .setParamsExtractor(
                new RequestParamsExtractor<DeleteShelfRequest>() {
                  @Override
                  public Map<String, String> extract(DeleteShelfRequest request) {
                    ImmutableMap.Builder<String, String> params = ImmutableMap.builder();
                    params.put("name", String.valueOf(request.getName()));
                    return params.build();
                  }
                })
            .build();
    GrpcCallSettings<MergeShelvesRequest, Shelf> mergeShelvesTransportSettings =
        GrpcCallSettings.<MergeShelvesRequest, Shelf>newBuilder()
            .setMethodDescriptor(mergeShelvesMethodDescriptor)
            .setParamsExtractor(
                new RequestParamsExtractor<MergeShelvesRequest>() {
                  @Override
                  public Map<String, String> extract(MergeShelvesRequest request) {
                    ImmutableMap.Builder<String, String> params = ImmutableMap.builder();
                    params.put("name", String.valueOf(request.getName()));
                    return params.build();
                  }
                })
            .build();
    GrpcCallSettings<CreateBookRequest, Book> createBookTransportSettings =
        GrpcCallSettings.<CreateBookRequest, Book>newBuilder()
            .setMethodDescriptor(createBookMethodDescriptor)
            .setParamsExtractor(
                new RequestParamsExtractor<CreateBookRequest>() {
                  @Override
                  public Map<String, String> extract(CreateBookRequest request) {
                    ImmutableMap.Builder<String, String> params = ImmutableMap.builder();
                    params.put("name", String.valueOf(request.getName()));
                    return params.build();
                  }
                })
            .build();
    GrpcCallSettings<PublishSeriesRequest, PublishSeriesResponse> publishSeriesTransportSettings =
        GrpcCallSettings.<PublishSeriesRequest, PublishSeriesResponse>newBuilder()
            .setMethodDescriptor(publishSeriesMethodDescriptor)
            .setParamsExtractor(
                new RequestParamsExtractor<PublishSeriesRequest>() {
                  @Override
                  public Map<String, String> extract(PublishSeriesRequest request) {
                    ImmutableMap.Builder<String, String> params = ImmutableMap.builder();
                    params.put("shelf.name", String.valueOf(request.getShelf().getName()));
                    return params.build();
                  }
                })
            .build();
    GrpcCallSettings<GetBookRequest, Book> getBookTransportSettings =
        GrpcCallSettings.<GetBookRequest, Book>newBuilder()
            .setMethodDescriptor(getBookMethodDescriptor)
            .setParamsExtractor(
                new RequestParamsExtractor<GetBookRequest>() {
                  @Override
                  public Map<String, String> extract(GetBookRequest request) {
                    ImmutableMap.Builder<String, String> params = ImmutableMap.builder();
                    params.put("name", String.valueOf(request.getName()));
                    return params.build();
                  }
                })
            .build();
    GrpcCallSettings<ListBooksRequest, ListBooksResponse> listBooksTransportSettings =
        GrpcCallSettings.<ListBooksRequest, ListBooksResponse>newBuilder()
            .setMethodDescriptor(listBooksMethodDescriptor)
            .setParamsExtractor(
                new RequestParamsExtractor<ListBooksRequest>() {
                  @Override
                  public Map<String, String> extract(ListBooksRequest request) {
                    ImmutableMap.Builder<String, String> params = ImmutableMap.builder();
                    params.put("name", String.valueOf(request.getName()));
                    return params.build();
                  }
                })
            .build();
    GrpcCallSettings<DeleteBookRequest, Empty> deleteBookTransportSettings =
        GrpcCallSettings.<DeleteBookRequest, Empty>newBuilder()
            .setMethodDescriptor(deleteBookMethodDescriptor)
            .setParamsExtractor(
                new RequestParamsExtractor<DeleteBookRequest>() {
                  @Override
                  public Map<String, String> extract(DeleteBookRequest request) {
                    ImmutableMap.Builder<String, String> params = ImmutableMap.builder();
                    params.put("name", String.valueOf(request.getName()));
                    return params.build();
                  }
                })
            .build();
    GrpcCallSettings<UpdateBookRequest, Book> updateBookTransportSettings =
        GrpcCallSettings.<UpdateBookRequest, Book>newBuilder()
            .setMethodDescriptor(updateBookMethodDescriptor)
            .setParamsExtractor(
                new RequestParamsExtractor<UpdateBookRequest>() {
                  @Override
                  public Map<String, String> extract(UpdateBookRequest request) {
                    ImmutableMap.Builder<String, String> params = ImmutableMap.builder();
                    params.put("name", String.valueOf(request.getName()));
                    return params.build();
                  }
                })
            .build();
    GrpcCallSettings<MoveBookRequest, Book> moveBookTransportSettings =
        GrpcCallSettings.<MoveBookRequest, Book>newBuilder()
            .setMethodDescriptor(moveBookMethodDescriptor)
            .setParamsExtractor(
                new RequestParamsExtractor<MoveBookRequest>() {
                  @Override
                  public Map<String, String> extract(MoveBookRequest request) {
                    ImmutableMap.Builder<String, String> params = ImmutableMap.builder();
                    params.put("name", String.valueOf(request.getName()));
                    return params.build();
                  }
                })
            .build();
    GrpcCallSettings<ListStringsRequest, ListStringsResponse> listStringsTransportSettings =
        GrpcCallSettings.<ListStringsRequest, ListStringsResponse>newBuilder()
            .setMethodDescriptor(listStringsMethodDescriptor)
            .build();
    GrpcCallSettings<AddCommentsRequest, Empty> addCommentsTransportSettings =
        GrpcCallSettings.<AddCommentsRequest, Empty>newBuilder()
            .setMethodDescriptor(addCommentsMethodDescriptor)
            .setParamsExtractor(
                new RequestParamsExtractor<AddCommentsRequest>() {
                  @Override
                  public Map<String, String> extract(AddCommentsRequest request) {
                    ImmutableMap.Builder<String, String> params = ImmutableMap.builder();
                    params.put("name", String.valueOf(request.getName()));
                    return params.build();
                  }
                })
            .build();
    GrpcCallSettings<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveTransportSettings =
        GrpcCallSettings.<GetBookFromArchiveRequest, BookFromArchive>newBuilder()
            .setMethodDescriptor(getBookFromArchiveMethodDescriptor)
            .setParamsExtractor(
                new RequestParamsExtractor<GetBookFromArchiveRequest>() {
                  @Override
                  public Map<String, String> extract(GetBookFromArchiveRequest request) {
                    ImmutableMap.Builder<String, String> params = ImmutableMap.builder();
                    params.put("name", String.valueOf(request.getName()));
                    return params.build();
                  }
                })
            .build();
    GrpcCallSettings<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereTransportSettings =
        GrpcCallSettings.<GetBookFromAnywhereRequest, BookFromAnywhere>newBuilder()
            .setMethodDescriptor(getBookFromAnywhereMethodDescriptor)
            .setParamsExtractor(
                new RequestParamsExtractor<GetBookFromAnywhereRequest>() {
                  @Override
                  public Map<String, String> extract(GetBookFromAnywhereRequest request) {
                    ImmutableMap.Builder<String, String> params = ImmutableMap.builder();
                    params.put("name", String.valueOf(request.getName()));
                    return params.build();
                  }
                })
            .build();
    GrpcCallSettings<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere> getBookFromAbsolutelyAnywhereTransportSettings =
        GrpcCallSettings.<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere>newBuilder()
            .setMethodDescriptor(getBookFromAbsolutelyAnywhereMethodDescriptor)
            .setParamsExtractor(
                new RequestParamsExtractor<GetBookFromAbsolutelyAnywhereRequest>() {
                  @Override
                  public Map<String, String> extract(GetBookFromAbsolutelyAnywhereRequest request) {
                    ImmutableMap.Builder<String, String> params = ImmutableMap.builder();
                    params.put("name", String.valueOf(request.getName()));
                    params.put("alt_book_name", String.valueOf(request.getAltBookName()));
                    return params.build();
                  }
                })
            .build();
    GrpcCallSettings<UpdateBookIndexRequest, Empty> updateBookIndexTransportSettings =
        GrpcCallSettings.<UpdateBookIndexRequest, Empty>newBuilder()
            .setMethodDescriptor(updateBookIndexMethodDescriptor)
            .setParamsExtractor(
                new RequestParamsExtractor<UpdateBookIndexRequest>() {
                  @Override
                  public Map<String, String> extract(UpdateBookIndexRequest request) {
                    ImmutableMap.Builder<String, String> params = ImmutableMap.builder();
                    params.put("name", String.valueOf(request.getName()));
                    return params.build();
                  }
                })
            .build();
    GrpcCallSettings<StreamShelvesRequest, StreamShelvesResponse> streamShelvesTransportSettings =
        GrpcCallSettings.<StreamShelvesRequest, StreamShelvesResponse>newBuilder()
            .setMethodDescriptor(streamShelvesMethodDescriptor)
            .build();
    GrpcCallSettings<StreamBooksRequest, Book> streamBooksTransportSettings =
        GrpcCallSettings.<StreamBooksRequest, Book>newBuilder()
            .setMethodDescriptor(streamBooksMethodDescriptor)
            .build();
    GrpcCallSettings<DiscussBookRequest, Comment> discussBookTransportSettings =
        GrpcCallSettings.<DiscussBookRequest, Comment>newBuilder()
            .setMethodDescriptor(discussBookMethodDescriptor)
            .build();
    GrpcCallSettings<DiscussBookRequest, Comment> monologAboutBookTransportSettings =
        GrpcCallSettings.<DiscussBookRequest, Comment>newBuilder()
            .setMethodDescriptor(monologAboutBookMethodDescriptor)
            .build();
    GrpcCallSettings<DiscussBookRequest, Empty> babbleAboutBookTransportSettings =
        GrpcCallSettings.<DiscussBookRequest, Empty>newBuilder()
            .setMethodDescriptor(babbleAboutBookMethodDescriptor)
            .build();
    GrpcCallSettings<FindRelatedBooksRequest, FindRelatedBooksResponse> findRelatedBooksTransportSettings =
        GrpcCallSettings.<FindRelatedBooksRequest, FindRelatedBooksResponse>newBuilder()
            .setMethodDescriptor(findRelatedBooksMethodDescriptor)
            .build();
    GrpcCallSettings<AddLabelRequest, AddLabelResponse> addLabelTransportSettings =
        GrpcCallSettings.<AddLabelRequest, AddLabelResponse>newBuilder()
            .setMethodDescriptor(addLabelMethodDescriptor)
            .setParamsExtractor(
                new RequestParamsExtractor<AddLabelRequest>() {
                  @Override
                  public Map<String, String> extract(AddLabelRequest request) {
                    ImmutableMap.Builder<String, String> params = ImmutableMap.builder();
                    params.put("resource", String.valueOf(request.getResource()));
                    return params.build();
                  }
                })
            .build();
    GrpcCallSettings<GetBookRequest, Operation> getBigBookTransportSettings =
        GrpcCallSettings.<GetBookRequest, Operation>newBuilder()
            .setMethodDescriptor(getBigBookMethodDescriptor)
            .setParamsExtractor(
                new RequestParamsExtractor<GetBookRequest>() {
                  @Override
                  public Map<String, String> extract(GetBookRequest request) {
                    ImmutableMap.Builder<String, String> params = ImmutableMap.builder();
                    params.put("name", String.valueOf(request.getName()));
                    return params.build();
                  }
                })
            .build();
    GrpcCallSettings<GetBookRequest, Operation> getBigNothingTransportSettings =
        GrpcCallSettings.<GetBookRequest, Operation>newBuilder()
            .setMethodDescriptor(getBigNothingMethodDescriptor)
            .setParamsExtractor(
                new RequestParamsExtractor<GetBookRequest>() {
                  @Override
                  public Map<String, String> extract(GetBookRequest request) {
                    ImmutableMap.Builder<String, String> params = ImmutableMap.builder();
                    params.put("name", String.valueOf(request.getName()));
                    return params.build();
                  }
                })
            .build();
    GrpcCallSettings<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsTransportSettings =
        GrpcCallSettings.<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse>newBuilder()
            .setMethodDescriptor(testOptionalRequiredFlatteningParamsMethodDescriptor)
            .build();
    GrpcCallSettings<MoveBooksRequest, MoveBooksResponse> moveBooksTransportSettings =
        GrpcCallSettings.<MoveBooksRequest, MoveBooksResponse>newBuilder()
            .setMethodDescriptor(moveBooksMethodDescriptor)
            .setParamsExtractor(
                new RequestParamsExtractor<MoveBooksRequest>() {
                  @Override
                  public Map<String, String> extract(MoveBooksRequest request) {
                    ImmutableMap.Builder<String, String> params = ImmutableMap.builder();
                    params.put("source", String.valueOf(request.getSource()));
                    return params.build();
                  }
                })
            .build();
    GrpcCallSettings<ArchiveBooksRequest, ArchiveBooksResponse> archiveBooksTransportSettings =
        GrpcCallSettings.<ArchiveBooksRequest, ArchiveBooksResponse>newBuilder()
            .setMethodDescriptor(archiveBooksMethodDescriptor)
            .setParamsExtractor(
                new RequestParamsExtractor<ArchiveBooksRequest>() {
                  @Override
                  public Map<String, String> extract(ArchiveBooksRequest request) {
                    ImmutableMap.Builder<String, String> params = ImmutableMap.builder();
                    params.put("source", String.valueOf(request.getSource()));
                    return params.build();
                  }
                })
            .build();
    GrpcCallSettings<ArchiveBooksRequest, Operation> longRunningArchiveBooksTransportSettings =
        GrpcCallSettings.<ArchiveBooksRequest, Operation>newBuilder()
            .setMethodDescriptor(longRunningArchiveBooksMethodDescriptor)
            .setParamsExtractor(
                new RequestParamsExtractor<ArchiveBooksRequest>() {
                  @Override
                  public Map<String, String> extract(ArchiveBooksRequest request) {
                    ImmutableMap.Builder<String, String> params = ImmutableMap.builder();
                    params.put("source", String.valueOf(request.getSource()));
                    return params.build();
                  }
                })
            .build();
    GrpcCallSettings<ArchiveBooksRequest, ArchiveBooksResponse> streamingArchiveBooksTransportSettings =
        GrpcCallSettings.<ArchiveBooksRequest, ArchiveBooksResponse>newBuilder()
            .setMethodDescriptor(streamingArchiveBooksMethodDescriptor)
            .build();
    GrpcCallSettings<Book, Empty> saveBookTransportSettings =
        GrpcCallSettings.<Book, Empty>newBuilder()
            .setMethodDescriptor(saveBookMethodDescriptor)
            .build();
    GrpcCallSettings<ListShelvesRequest, Book> privateListShelvesTransportSettings =
        GrpcCallSettings.<ListShelvesRequest, Book>newBuilder()
            .setMethodDescriptor(privateListShelvesMethodDescriptor)
            .build();

    this.createShelfCallable = callableFactory.createUnaryCallable(createShelfTransportSettings,settings.createShelfSettings(), clientContext);
    this.getShelfCallable = callableFactory.createUnaryCallable(getShelfTransportSettings,settings.getShelfSettings(), clientContext);
    this.listShelvesCallable = callableFactory.createUnaryCallable(listShelvesTransportSettings,settings.listShelvesSettings(), clientContext);
    this.listShelvesPagedCallable = callableFactory.createPagedCallable(listShelvesTransportSettings,settings.listShelvesSettings(), clientContext);
    this.deleteShelfCallable = callableFactory.createUnaryCallable(deleteShelfTransportSettings,settings.deleteShelfSettings(), clientContext);
    this.mergeShelvesCallable = callableFactory.createUnaryCallable(mergeShelvesTransportSettings,settings.mergeShelvesSettings(), clientContext);
    this.createBookCallable = callableFactory.createUnaryCallable(createBookTransportSettings,settings.createBookSettings(), clientContext);
    this.publishSeriesCallable = callableFactory.createBatchingCallable(publishSeriesTransportSettings,settings.publishSeriesSettings(), clientContext);
    this.getBookCallable = callableFactory.createUnaryCallable(getBookTransportSettings,settings.getBookSettings(), clientContext);
    this.listBooksCallable = callableFactory.createUnaryCallable(listBooksTransportSettings,settings.listBooksSettings(), clientContext);
    this.listBooksPagedCallable = callableFactory.createPagedCallable(listBooksTransportSettings,settings.listBooksSettings(), clientContext);
    this.deleteBookCallable = callableFactory.createUnaryCallable(deleteBookTransportSettings,settings.deleteBookSettings(), clientContext);
    this.updateBookCallable = callableFactory.createUnaryCallable(updateBookTransportSettings,settings.updateBookSettings(), clientContext);
    this.moveBookCallable = callableFactory.createUnaryCallable(moveBookTransportSettings,settings.moveBookSettings(), clientContext);
    this.listStringsCallable = callableFactory.createUnaryCallable(listStringsTransportSettings,settings.listStringsSettings(), clientContext);
    this.listStringsPagedCallable = callableFactory.createPagedCallable(listStringsTransportSettings,settings.listStringsSettings(), clientContext);
    this.addCommentsCallable = callableFactory.createBatchingCallable(addCommentsTransportSettings,settings.addCommentsSettings(), clientContext);
    this.getBookFromArchiveCallable = callableFactory.createUnaryCallable(getBookFromArchiveTransportSettings,settings.getBookFromArchiveSettings(), clientContext);
    this.getBookFromAnywhereCallable = callableFactory.createUnaryCallable(getBookFromAnywhereTransportSettings,settings.getBookFromAnywhereSettings(), clientContext);
    this.getBookFromAbsolutelyAnywhereCallable = callableFactory.createUnaryCallable(getBookFromAbsolutelyAnywhereTransportSettings,settings.getBookFromAbsolutelyAnywhereSettings(), clientContext);
    this.updateBookIndexCallable = callableFactory.createUnaryCallable(updateBookIndexTransportSettings,settings.updateBookIndexSettings(), clientContext);
    this.streamShelvesCallable = callableFactory.createServerStreamingCallable(streamShelvesTransportSettings,settings.streamShelvesSettings(), clientContext);
    this.streamBooksCallable = callableFactory.createServerStreamingCallable(streamBooksTransportSettings,settings.streamBooksSettings(), clientContext);
    this.discussBookCallable = callableFactory.createBidiStreamingCallable(discussBookTransportSettings,settings.discussBookSettings(), clientContext);
    this.monologAboutBookCallable = callableFactory.createClientStreamingCallable(monologAboutBookTransportSettings,settings.monologAboutBookSettings(), clientContext);
    this.babbleAboutBookCallable = callableFactory.createClientStreamingCallable(babbleAboutBookTransportSettings,settings.babbleAboutBookSettings(), clientContext);
    this.findRelatedBooksCallable = callableFactory.createUnaryCallable(findRelatedBooksTransportSettings,settings.findRelatedBooksSettings(), clientContext);
    this.findRelatedBooksPagedCallable = callableFactory.createPagedCallable(findRelatedBooksTransportSettings,settings.findRelatedBooksSettings(), clientContext);
    this.addLabelCallable = callableFactory.createUnaryCallable(addLabelTransportSettings,settings.addLabelSettings(), clientContext);
    this.getBigBookCallable = callableFactory.createUnaryCallable(getBigBookTransportSettings,settings.getBigBookSettings(), clientContext);
    this.getBigBookOperationCallable = callableFactory.createOperationCallable(
        getBigBookTransportSettings,settings.getBigBookOperationSettings(), clientContext, this.operationsStub);
    this.getBigNothingCallable = callableFactory.createUnaryCallable(getBigNothingTransportSettings,settings.getBigNothingSettings(), clientContext);
    this.getBigNothingOperationCallable = callableFactory.createOperationCallable(
        getBigNothingTransportSettings,settings.getBigNothingOperationSettings(), clientContext, this.operationsStub);
    this.testOptionalRequiredFlatteningParamsCallable = callableFactory.createUnaryCallable(testOptionalRequiredFlatteningParamsTransportSettings,settings.testOptionalRequiredFlatteningParamsSettings(), clientContext);
    this.moveBooksCallable = callableFactory.createUnaryCallable(moveBooksTransportSettings,settings.moveBooksSettings(), clientContext);
    this.archiveBooksCallable = callableFactory.createUnaryCallable(archiveBooksTransportSettings,settings.archiveBooksSettings(), clientContext);
    this.longRunningArchiveBooksCallable = callableFactory.createUnaryCallable(longRunningArchiveBooksTransportSettings,settings.longRunningArchiveBooksSettings(), clientContext);
    this.longRunningArchiveBooksOperationCallable = callableFactory.createOperationCallable(
        longRunningArchiveBooksTransportSettings,settings.longRunningArchiveBooksOperationSettings(), clientContext, this.operationsStub);
    this.streamingArchiveBooksCallable = callableFactory.createBidiStreamingCallable(streamingArchiveBooksTransportSettings,settings.streamingArchiveBooksSettings(), clientContext);
    this.saveBookCallable = callableFactory.createUnaryCallable(saveBookTransportSettings,settings.saveBookSettings(), clientContext);
    this.privateListShelvesCallable = callableFactory.createUnaryCallable(privateListShelvesTransportSettings,settings.privateListShelvesSettings(), clientContext);

    backgroundResources = new BackgroundResourceAggregation(clientContext.getBackgroundResources());
  }

  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public GrpcOperationsStub getOperationsStub() {
    return operationsStub;
  }
  public UnaryCallable<CreateShelfRequest, Shelf> createShelfCallable() {
    return createShelfCallable;
  }

  public UnaryCallable<GetShelfRequest, Shelf> getShelfCallable() {
    return getShelfCallable;
  }

  public UnaryCallable<ListShelvesRequest, ListShelvesPagedResponse> listShelvesPagedCallable() {
    return listShelvesPagedCallable;
  }

  public UnaryCallable<ListShelvesRequest, ListShelvesResponse> listShelvesCallable() {
    return listShelvesCallable;
  }

  public UnaryCallable<DeleteShelfRequest, Empty> deleteShelfCallable() {
    return deleteShelfCallable;
  }

  public UnaryCallable<MergeShelvesRequest, Shelf> mergeShelvesCallable() {
    return mergeShelvesCallable;
  }

  public UnaryCallable<CreateBookRequest, Book> createBookCallable() {
    return createBookCallable;
  }

  public UnaryCallable<PublishSeriesRequest, PublishSeriesResponse> publishSeriesCallable() {
    return publishSeriesCallable;
  }

  public UnaryCallable<GetBookRequest, Book> getBookCallable() {
    return getBookCallable;
  }

  public UnaryCallable<ListBooksRequest, ListBooksPagedResponse> listBooksPagedCallable() {
    return listBooksPagedCallable;
  }

  public UnaryCallable<ListBooksRequest, ListBooksResponse> listBooksCallable() {
    return listBooksCallable;
  }

  public UnaryCallable<DeleteBookRequest, Empty> deleteBookCallable() {
    return deleteBookCallable;
  }

  public UnaryCallable<UpdateBookRequest, Book> updateBookCallable() {
    return updateBookCallable;
  }

  public UnaryCallable<MoveBookRequest, Book> moveBookCallable() {
    return moveBookCallable;
  }

  public UnaryCallable<ListStringsRequest, ListStringsPagedResponse> listStringsPagedCallable() {
    return listStringsPagedCallable;
  }

  public UnaryCallable<ListStringsRequest, ListStringsResponse> listStringsCallable() {
    return listStringsCallable;
  }

  public UnaryCallable<AddCommentsRequest, Empty> addCommentsCallable() {
    return addCommentsCallable;
  }

  public UnaryCallable<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveCallable() {
    return getBookFromArchiveCallable;
  }

  public UnaryCallable<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereCallable() {
    return getBookFromAnywhereCallable;
  }

  public UnaryCallable<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere> getBookFromAbsolutelyAnywhereCallable() {
    return getBookFromAbsolutelyAnywhereCallable;
  }

  public UnaryCallable<UpdateBookIndexRequest, Empty> updateBookIndexCallable() {
    return updateBookIndexCallable;
  }

  public ServerStreamingCallable<StreamShelvesRequest, StreamShelvesResponse> streamShelvesCallable() {
    return streamShelvesCallable;
  }

  public ServerStreamingCallable<StreamBooksRequest, Book> streamBooksCallable() {
    return streamBooksCallable;
  }

  public BidiStreamingCallable<DiscussBookRequest, Comment> discussBookCallable() {
    return discussBookCallable;
  }

  public ClientStreamingCallable<DiscussBookRequest, Comment> monologAboutBookCallable() {
    return monologAboutBookCallable;
  }

  public ClientStreamingCallable<DiscussBookRequest, Empty> babbleAboutBookCallable() {
    return babbleAboutBookCallable;
  }

  public UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksPagedResponse> findRelatedBooksPagedCallable() {
    return findRelatedBooksPagedCallable;
  }

  public UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksResponse> findRelatedBooksCallable() {
    return findRelatedBooksCallable;
  }

  @Deprecated
  public UnaryCallable<AddLabelRequest, AddLabelResponse> addLabelCallable() {
    return addLabelCallable;
  }

  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public OperationCallable<GetBookRequest, Book, GetBigBookMetadata> getBigBookOperationCallable() {
    return getBigBookOperationCallable;
  }

  public UnaryCallable<GetBookRequest, Operation> getBigBookCallable() {
    return getBigBookCallable;
  }

  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public OperationCallable<GetBookRequest, Empty, GetBigBookMetadata> getBigNothingOperationCallable() {
    return getBigNothingOperationCallable;
  }

  public UnaryCallable<GetBookRequest, Operation> getBigNothingCallable() {
    return getBigNothingCallable;
  }

  public UnaryCallable<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsCallable() {
    return testOptionalRequiredFlatteningParamsCallable;
  }

  public UnaryCallable<MoveBooksRequest, MoveBooksResponse> moveBooksCallable() {
    return moveBooksCallable;
  }

  public UnaryCallable<ArchiveBooksRequest, ArchiveBooksResponse> archiveBooksCallable() {
    return archiveBooksCallable;
  }

  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public OperationCallable<ArchiveBooksRequest, ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksOperationCallable() {
    return longRunningArchiveBooksOperationCallable;
  }

  public UnaryCallable<ArchiveBooksRequest, Operation> longRunningArchiveBooksCallable() {
    return longRunningArchiveBooksCallable;
  }

  public BidiStreamingCallable<ArchiveBooksRequest, ArchiveBooksResponse> streamingArchiveBooksCallable() {
    return streamingArchiveBooksCallable;
  }

  public UnaryCallable<Book, Empty> saveBookCallable() {
    return saveBookCallable;
  }

  public UnaryCallable<ListShelvesRequest, Book> privateListShelvesCallable() {
    return privateListShelvesCallable;
  }

  @Override
  public final void close() {
    shutdown();
  }

  @Override
  public void shutdown() {
    backgroundResources.shutdown();
  }

  @Override
  public boolean isShutdown() {
    return backgroundResources.isShutdown();
  }

  @Override
  public boolean isTerminated() {
    return backgroundResources.isTerminated();
  }

  @Override
  public void shutdownNow() {
    backgroundResources.shutdownNow();
  }

  @Override
  public boolean awaitTermination(long duration, TimeUnit unit) throws InterruptedException {
    return backgroundResources.awaitTermination(duration, unit);
  }

}
============== file: src/main/java/com/google/example/library/v1/stub/GrpcMyProtoCallableFactory.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1.stub;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.core.BackgroundResourceAggregation;
import com.google.api.gax.grpc.GrpcCallSettings;
import com.google.api.gax.grpc.GrpcCallableFactory;
import com.google.api.gax.grpc.GrpcStubCallableFactory;
import com.google.api.gax.rpc.BatchingCallSettings;
import com.google.api.gax.rpc.BidiStreamingCallable;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.ClientStreamingCallable;
import com.google.api.gax.rpc.OperationCallSettings;
import com.google.api.gax.rpc.OperationCallable;
import com.google.api.gax.rpc.PagedCallSettings;
import com.google.api.gax.rpc.RequestParamsExtractor;
import com.google.api.gax.rpc.ServerStreamingCallSettings;
import com.google.api.gax.rpc.ServerStreamingCallable;
import com.google.api.gax.rpc.StreamingCallSettings;
import com.google.api.gax.rpc.UnaryCallSettings;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.common.collect.ImmutableMap;
import com.google.example.library.v1.MyProtoSettings;
import com.google.longrunning.Operation;
import com.google.longrunning.stub.OperationsStub;
import com.google.protos.google.example.library.v1.AnotherService.MethodRequest;
import com.google.protos.google.example.library.v1.AnotherService.MethodResponse;
import com.google.protos.google.example.library.v1.AnotherService.Namespace;
import io.grpc.MethodDescriptor;
import io.grpc.protobuf.ProtoUtils;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * gRPC callable factory implementation for Google Example Library API.
 *
 * <p>This class is for advanced usage.
 */
@Generated("by gapic-generator")
@BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
public class GrpcMyProtoCallableFactory implements GrpcStubCallableFactory {
  @Override
  public <RequestT, ResponseT> UnaryCallable<RequestT, ResponseT> createUnaryCallable(
      GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,
      UnaryCallSettings<RequestT, ResponseT> callSettings, ClientContext clientContext) {
    return GrpcCallableFactory.createUnaryCallable(grpcCallSettings, callSettings, clientContext);
  }

  @Override
  public <RequestT, ResponseT, PagedListResponseT> UnaryCallable<RequestT, PagedListResponseT> createPagedCallable(
      GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,
      PagedCallSettings<RequestT, ResponseT, PagedListResponseT> pagedCallSettings,
      ClientContext clientContext) {
    return GrpcCallableFactory.createPagedCallable(grpcCallSettings, pagedCallSettings, clientContext);
  }

  @Override
  public <RequestT, ResponseT> UnaryCallable<RequestT, ResponseT> createBatchingCallable(
      GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,
      BatchingCallSettings<RequestT, ResponseT> batchingCallSettings, ClientContext clientContext) {
    return GrpcCallableFactory.createBatchingCallable(grpcCallSettings, batchingCallSettings, clientContext);
  }

  @BetaApi("The surface for long-running operations is not stable yet and may change in the future.")
  @Override
  public <RequestT, ResponseT, MetadataT> OperationCallable<RequestT, ResponseT, MetadataT> createOperationCallable(
      GrpcCallSettings<RequestT, com.google.longrunning.Operation> grpcCallSettings,
      OperationCallSettings<RequestT, ResponseT, MetadataT> operationCallSettings,
      ClientContext clientContext, OperationsStub operationsStub) {
    return GrpcCallableFactory.createOperationCallable(grpcCallSettings, operationCallSettings, clientContext, operationsStub);
  }

  @Override
  public <RequestT, ResponseT> BidiStreamingCallable<RequestT, ResponseT> createBidiStreamingCallable(
      GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,
      StreamingCallSettings<RequestT, ResponseT> streamingCallSettings,
      ClientContext clientContext) {
    return GrpcCallableFactory.createBidiStreamingCallable(grpcCallSettings, streamingCallSettings, clientContext);
  }

  @Override
  public <RequestT, ResponseT> ServerStreamingCallable<RequestT, ResponseT> createServerStreamingCallable(
      GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,
      ServerStreamingCallSettings<RequestT, ResponseT> streamingCallSettings,
      ClientContext clientContext) {
    return GrpcCallableFactory.createServerStreamingCallable(grpcCallSettings, streamingCallSettings, clientContext);
  }

  @Override
  public <RequestT, ResponseT> ClientStreamingCallable<RequestT, ResponseT> createClientStreamingCallable(
      GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,
      StreamingCallSettings<RequestT, ResponseT> streamingCallSettings,
      ClientContext clientContext) {
    return GrpcCallableFactory.createClientStreamingCallable(grpcCallSettings, streamingCallSettings, clientContext);
  }
}
============== file: src/main/java/com/google/example/library/v1/stub/GrpcMyProtoStub.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1.stub;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.core.BackgroundResourceAggregation;
import com.google.api.gax.grpc.GrpcCallSettings;
import com.google.api.gax.grpc.GrpcCallableFactory;
import com.google.api.gax.grpc.GrpcStubCallableFactory;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.RequestParamsExtractor;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.common.collect.ImmutableMap;
import com.google.example.library.v1.MyProtoSettings;
import com.google.protos.google.example.library.v1.AnotherService.MethodRequest;
import com.google.protos.google.example.library.v1.AnotherService.MethodResponse;
import com.google.protos.google.example.library.v1.AnotherService.Namespace;
import io.grpc.MethodDescriptor;
import io.grpc.protobuf.ProtoUtils;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * gRPC stub implementation for Google Example Library API.
 *
 * <p>This class is for advanced usage and reflects the underlying API directly.
 */
@Generated("by gapic-generator")
@BetaApi("A restructuring of stub classes is planned, so this may break in the future")
public class GrpcMyProtoStub extends MyProtoStub {

  private static final MethodDescriptor<MethodRequest, MethodResponse> myMethodMethodDescriptor =
      MethodDescriptor.<MethodRequest, MethodResponse>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.MyProto/MyMethod")
          .setRequestMarshaller(ProtoUtils.marshaller(MethodRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(MethodResponse.getDefaultInstance()))
          .build();
  private static final MethodDescriptor<MethodRequest, Namespace> getNamespaceMethodDescriptor =
      MethodDescriptor.<MethodRequest, Namespace>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.example.library.v1.MyProto/GetNamespace")
          .setRequestMarshaller(ProtoUtils.marshaller(MethodRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(Namespace.getDefaultInstance()))
          .build();


  private final BackgroundResource backgroundResources;

  private final UnaryCallable<MethodRequest, MethodResponse> myMethodCallable;
  private final UnaryCallable<MethodRequest, Namespace> getNamespaceCallable;

  private final GrpcStubCallableFactory callableFactory;

  public static final GrpcMyProtoStub create(MyProtoStubSettings settings) throws IOException {
    return new GrpcMyProtoStub(settings, ClientContext.create(settings));
  }

  public static final GrpcMyProtoStub create(ClientContext clientContext) throws IOException {
    return new GrpcMyProtoStub(MyProtoStubSettings.newBuilder().build(), clientContext);
  }

  public static final GrpcMyProtoStub create(ClientContext clientContext, GrpcStubCallableFactory callableFactory) throws IOException {
    return new GrpcMyProtoStub(MyProtoStubSettings.newBuilder().build(), clientContext, callableFactory);
  }

  /**
   * Constructs an instance of GrpcMyProtoStub, using the given settings.
   * This is protected so that it is easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected GrpcMyProtoStub(MyProtoStubSettings settings, ClientContext clientContext) throws IOException {
    this(settings, clientContext, new GrpcMyProtoCallableFactory());
  }

  /**
   * Constructs an instance of GrpcMyProtoStub, using the given settings.
   * This is protected so that it is easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected GrpcMyProtoStub(MyProtoStubSettings settings, ClientContext clientContext, GrpcStubCallableFactory callableFactory) throws IOException {
    this.callableFactory = callableFactory;

    GrpcCallSettings<MethodRequest, MethodResponse> myMethodTransportSettings =
        GrpcCallSettings.<MethodRequest, MethodResponse>newBuilder()
            .setMethodDescriptor(myMethodMethodDescriptor)
            .build();
    GrpcCallSettings<MethodRequest, Namespace> getNamespaceTransportSettings =
        GrpcCallSettings.<MethodRequest, Namespace>newBuilder()
            .setMethodDescriptor(getNamespaceMethodDescriptor)
            .build();

    this.myMethodCallable = callableFactory.createUnaryCallable(myMethodTransportSettings,settings.myMethodSettings(), clientContext);
    this.getNamespaceCallable = callableFactory.createUnaryCallable(getNamespaceTransportSettings,settings.getNamespaceSettings(), clientContext);

    backgroundResources = new BackgroundResourceAggregation(clientContext.getBackgroundResources());
  }


  public UnaryCallable<MethodRequest, MethodResponse> myMethodCallable() {
    return myMethodCallable;
  }

  public UnaryCallable<MethodRequest, Namespace> getNamespaceCallable() {
    return getNamespaceCallable;
  }

  @Override
  public final void close() {
    shutdown();
  }

  @Override
  public void shutdown() {
    backgroundResources.shutdown();
  }

  @Override
  public boolean isShutdown() {
    return backgroundResources.isShutdown();
  }

  @Override
  public boolean isTerminated() {
    return backgroundResources.isTerminated();
  }

  @Override
  public void shutdownNow() {
    backgroundResources.shutdownNow();
  }

  @Override
  public boolean awaitTermination(long duration, TimeUnit unit) throws InterruptedException {
    return backgroundResources.awaitTermination(duration, unit);
  }

}
============== file: src/main/java/com/google/example/library/v1/stub/LibraryServiceStub.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1.stub;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.longrunning.OperationFuture;
import com.google.api.gax.rpc.BidiStreamingCallable;
import com.google.api.gax.rpc.ClientStreamingCallable;
import com.google.api.gax.rpc.OperationCallable;
import com.google.api.gax.rpc.ServerStreamingCallable;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.api.resourcenames.ResourceName;
import com.google.example.library.v1.AddCommentsRequest;
import com.google.example.library.v1.ArchiveBooksMetadata;
import com.google.example.library.v1.ArchiveBooksRequest;
import com.google.example.library.v1.ArchiveBooksResponse;
import com.google.example.library.v1.ArchiveName;
import com.google.example.library.v1.ArchivedBookName;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookFromAnywhere;
import com.google.example.library.v1.BookFromArchive;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.Comment;
import com.google.example.library.v1.CreateBookRequest;
import com.google.example.library.v1.CreateShelfRequest;
import com.google.example.library.v1.DeleteBookRequest;
import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.DiscussBookRequest;
import com.google.example.library.v1.FindRelatedBooksRequest;
import com.google.example.library.v1.FindRelatedBooksResponse;
import com.google.example.library.v1.FolderName;
import com.google.example.library.v1.GetBigBookMetadata;
import com.google.example.library.v1.GetBookFromAbsolutelyAnywhereRequest;
import com.google.example.library.v1.GetBookFromAnywhereRequest;
import com.google.example.library.v1.GetBookFromArchiveRequest;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.GetShelfRequest;
import static com.google.example.library.v1.LibraryClient.FindRelatedBooksPagedResponse;
import static com.google.example.library.v1.LibraryClient.ListBooksPagedResponse;
import static com.google.example.library.v1.LibraryClient.ListShelvesPagedResponse;
import static com.google.example.library.v1.LibraryClient.ListStringsPagedResponse;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.ListStringsRequest;
import com.google.example.library.v1.ListStringsResponse;
import com.google.example.library.v1.LocationName;
import com.google.example.library.v1.MergeShelvesRequest;
import com.google.example.library.v1.MoveBookRequest;
import com.google.example.library.v1.MoveBooksRequest;
import com.google.example.library.v1.MoveBooksResponse;
import com.google.example.library.v1.ProjectName;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.PublisherName;
import com.google.example.library.v1.SeriesUuid;
import com.google.example.library.v1.Shelf;
import com.google.example.library.v1.ShelfName;
import com.google.example.library.v1.SomeMessage;
import com.google.example.library.v1.StreamBooksRequest;
import com.google.example.library.v1.StreamShelvesRequest;
import com.google.example.library.v1.StreamShelvesResponse;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest.InnerMessage;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsResponse;
import com.google.example.library.v1.UpdateBookIndexRequest;
import com.google.example.library.v1.UpdateBookRequest;
import com.google.longrunning.Operation;
import com.google.longrunning.stub.OperationsStub;
import com.google.protobuf.Any;
import com.google.protobuf.BoolValue;
import com.google.protobuf.ByteString;
import com.google.protobuf.BytesValue;
import com.google.protobuf.DoubleValue;
import com.google.protobuf.Duration;
import com.google.protobuf.Empty;
import com.google.protobuf.FieldMask;
import com.google.protobuf.FloatValue;
import com.google.protobuf.Int32Value;
import com.google.protobuf.Int64Value;
import com.google.protobuf.ListValue;
import com.google.protobuf.StringValue;
import com.google.protobuf.Struct;
import com.google.protobuf.Timestamp;
import com.google.protobuf.UInt32Value;
import com.google.protobuf.UInt64Value;
import com.google.protobuf.Value;
import com.google.tagger.v1.TaggerProto.AddLabelRequest;
import com.google.tagger.v1.TaggerProto.AddLabelResponse;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * Base stub class for Google Example Library API.
 *
 * <p>This class is for advanced usage and reflects the underlying API directly.
 */
@Generated("by gapic-generator")
@BetaApi("A restructuring of stub classes is planned, so this may break in the future")
public abstract class LibraryServiceStub implements BackgroundResource {

  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public OperationsStub getOperationsStub() {
    throw new UnsupportedOperationException("Not implemented: getOperationsStub()");
  }

  public UnaryCallable<CreateShelfRequest, Shelf> createShelfCallable() {
    throw new UnsupportedOperationException("Not implemented: createShelfCallable()");
  }

  public UnaryCallable<GetShelfRequest, Shelf> getShelfCallable() {
    throw new UnsupportedOperationException("Not implemented: getShelfCallable()");
  }

  public UnaryCallable<ListShelvesRequest, ListShelvesPagedResponse> listShelvesPagedCallable() {
    throw new UnsupportedOperationException("Not implemented: listShelvesPagedCallable()");
  }

  public UnaryCallable<ListShelvesRequest, ListShelvesResponse> listShelvesCallable() {
    throw new UnsupportedOperationException("Not implemented: listShelvesCallable()");
  }

  public UnaryCallable<DeleteShelfRequest, Empty> deleteShelfCallable() {
    throw new UnsupportedOperationException("Not implemented: deleteShelfCallable()");
  }

  public UnaryCallable<MergeShelvesRequest, Shelf> mergeShelvesCallable() {
    throw new UnsupportedOperationException("Not implemented: mergeShelvesCallable()");
  }

  public UnaryCallable<CreateBookRequest, Book> createBookCallable() {
    throw new UnsupportedOperationException("Not implemented: createBookCallable()");
  }

  public UnaryCallable<PublishSeriesRequest, PublishSeriesResponse> publishSeriesCallable() {
    throw new UnsupportedOperationException("Not implemented: publishSeriesCallable()");
  }

  public UnaryCallable<GetBookRequest, Book> getBookCallable() {
    throw new UnsupportedOperationException("Not implemented: getBookCallable()");
  }

  public UnaryCallable<ListBooksRequest, ListBooksPagedResponse> listBooksPagedCallable() {
    throw new UnsupportedOperationException("Not implemented: listBooksPagedCallable()");
  }

  public UnaryCallable<ListBooksRequest, ListBooksResponse> listBooksCallable() {
    throw new UnsupportedOperationException("Not implemented: listBooksCallable()");
  }

  public UnaryCallable<DeleteBookRequest, Empty> deleteBookCallable() {
    throw new UnsupportedOperationException("Not implemented: deleteBookCallable()");
  }

  public UnaryCallable<UpdateBookRequest, Book> updateBookCallable() {
    throw new UnsupportedOperationException("Not implemented: updateBookCallable()");
  }

  public UnaryCallable<MoveBookRequest, Book> moveBookCallable() {
    throw new UnsupportedOperationException("Not implemented: moveBookCallable()");
  }

  public UnaryCallable<ListStringsRequest, ListStringsPagedResponse> listStringsPagedCallable() {
    throw new UnsupportedOperationException("Not implemented: listStringsPagedCallable()");
  }

  public UnaryCallable<ListStringsRequest, ListStringsResponse> listStringsCallable() {
    throw new UnsupportedOperationException("Not implemented: listStringsCallable()");
  }

  public UnaryCallable<AddCommentsRequest, Empty> addCommentsCallable() {
    throw new UnsupportedOperationException("Not implemented: addCommentsCallable()");
  }

  public UnaryCallable<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveCallable() {
    throw new UnsupportedOperationException("Not implemented: getBookFromArchiveCallable()");
  }

  public UnaryCallable<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereCallable() {
    throw new UnsupportedOperationException("Not implemented: getBookFromAnywhereCallable()");
  }

  public UnaryCallable<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere> getBookFromAbsolutelyAnywhereCallable() {
    throw new UnsupportedOperationException("Not implemented: getBookFromAbsolutelyAnywhereCallable()");
  }

  public UnaryCallable<UpdateBookIndexRequest, Empty> updateBookIndexCallable() {
    throw new UnsupportedOperationException("Not implemented: updateBookIndexCallable()");
  }

  public ServerStreamingCallable<StreamShelvesRequest, StreamShelvesResponse> streamShelvesCallable() {
    throw new UnsupportedOperationException("Not implemented: streamShelvesCallable()");
  }

  public ServerStreamingCallable<StreamBooksRequest, Book> streamBooksCallable() {
    throw new UnsupportedOperationException("Not implemented: streamBooksCallable()");
  }

  public BidiStreamingCallable<DiscussBookRequest, Comment> discussBookCallable() {
    throw new UnsupportedOperationException("Not implemented: discussBookCallable()");
  }

  public ClientStreamingCallable<DiscussBookRequest, Comment> monologAboutBookCallable() {
    throw new UnsupportedOperationException("Not implemented: monologAboutBookCallable()");
  }

  public ClientStreamingCallable<DiscussBookRequest, Empty> babbleAboutBookCallable() {
    throw new UnsupportedOperationException("Not implemented: babbleAboutBookCallable()");
  }

  public UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksPagedResponse> findRelatedBooksPagedCallable() {
    throw new UnsupportedOperationException("Not implemented: findRelatedBooksPagedCallable()");
  }

  public UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksResponse> findRelatedBooksCallable() {
    throw new UnsupportedOperationException("Not implemented: findRelatedBooksCallable()");
  }

  @Deprecated
  public UnaryCallable<AddLabelRequest, AddLabelResponse> addLabelCallable() {
    throw new UnsupportedOperationException("Not implemented: addLabelCallable()");
  }

  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public OperationCallable<GetBookRequest, Book, GetBigBookMetadata> getBigBookOperationCallable() {
    throw new UnsupportedOperationException("Not implemented: getBigBookOperationCallable()");
  }

  public UnaryCallable<GetBookRequest, Operation> getBigBookCallable() {
    throw new UnsupportedOperationException("Not implemented: getBigBookCallable()");
  }

  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public OperationCallable<GetBookRequest, Empty, GetBigBookMetadata> getBigNothingOperationCallable() {
    throw new UnsupportedOperationException("Not implemented: getBigNothingOperationCallable()");
  }

  public UnaryCallable<GetBookRequest, Operation> getBigNothingCallable() {
    throw new UnsupportedOperationException("Not implemented: getBigNothingCallable()");
  }

  public UnaryCallable<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsCallable() {
    throw new UnsupportedOperationException("Not implemented: testOptionalRequiredFlatteningParamsCallable()");
  }

  public UnaryCallable<MoveBooksRequest, MoveBooksResponse> moveBooksCallable() {
    throw new UnsupportedOperationException("Not implemented: moveBooksCallable()");
  }

  public UnaryCallable<ArchiveBooksRequest, ArchiveBooksResponse> archiveBooksCallable() {
    throw new UnsupportedOperationException("Not implemented: archiveBooksCallable()");
  }

  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public OperationCallable<ArchiveBooksRequest, ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksOperationCallable() {
    throw new UnsupportedOperationException("Not implemented: longRunningArchiveBooksOperationCallable()");
  }

  public UnaryCallable<ArchiveBooksRequest, Operation> longRunningArchiveBooksCallable() {
    throw new UnsupportedOperationException("Not implemented: longRunningArchiveBooksCallable()");
  }

  public BidiStreamingCallable<ArchiveBooksRequest, ArchiveBooksResponse> streamingArchiveBooksCallable() {
    throw new UnsupportedOperationException("Not implemented: streamingArchiveBooksCallable()");
  }

  public UnaryCallable<Book, Empty> saveBookCallable() {
    throw new UnsupportedOperationException("Not implemented: saveBookCallable()");
  }

  public UnaryCallable<ListShelvesRequest, Book> privateListShelvesCallable() {
    throw new UnsupportedOperationException("Not implemented: privateListShelvesCallable()");
  }

  @Override
  public abstract void close();
}
============== file: src/main/java/com/google/example/library/v1/stub/LibraryServiceStubSettings.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1.stub;

import com.google.api.core.ApiFunction;
import com.google.api.core.ApiFuture;
import com.google.api.core.BetaApi;
import com.google.api.gax.batching.BatchingSettings;
import com.google.api.gax.batching.FlowControlSettings;
import com.google.api.gax.batching.FlowController;
import com.google.api.gax.batching.FlowController.LimitExceededBehavior;
import com.google.api.gax.batching.PartitionKey;
import com.google.api.gax.batching.RequestBuilder;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.core.GaxProperties;
import com.google.api.gax.core.GoogleCredentialsProvider;
import com.google.api.gax.core.InstantiatingExecutorProvider;
import com.google.api.gax.grpc.GaxGrpcProperties;
import com.google.api.gax.grpc.GrpcTransportChannel;
import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;
import com.google.api.gax.grpc.ProtoOperationTransformers;
import com.google.api.gax.longrunning.OperationFuture;
import com.google.api.gax.longrunning.OperationSnapshot;
import com.google.api.gax.longrunning.OperationTimedPollAlgorithm;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.ApiCallContext;
import com.google.api.gax.rpc.ApiClientHeaderProvider;
import com.google.api.gax.rpc.BatchedRequestIssuer;
import com.google.api.gax.rpc.BatchingCallSettings;
import com.google.api.gax.rpc.BatchingDescriptor;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.ClientSettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.OperationCallSettings;
import com.google.api.gax.rpc.PageContext;
import com.google.api.gax.rpc.PagedCallSettings;
import com.google.api.gax.rpc.PagedListDescriptor;
import com.google.api.gax.rpc.PagedListResponseFactory;
import com.google.api.gax.rpc.ServerStreamingCallSettings;
import com.google.api.gax.rpc.StatusCode;
import com.google.api.gax.rpc.StreamingCallSettings;
import com.google.api.gax.rpc.StubSettings;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.api.gax.rpc.UnaryCallSettings;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.auth.Credentials;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.google.example.library.v1.AddCommentsRequest;
import com.google.example.library.v1.ArchiveBooksMetadata;
import com.google.example.library.v1.ArchiveBooksRequest;
import com.google.example.library.v1.ArchiveBooksResponse;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookFromAnywhere;
import com.google.example.library.v1.BookFromArchive;
import com.google.example.library.v1.Comment;
import com.google.example.library.v1.CreateBookRequest;
import com.google.example.library.v1.CreateShelfRequest;
import com.google.example.library.v1.DeleteBookRequest;
import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.DiscussBookRequest;
import com.google.example.library.v1.FindRelatedBooksRequest;
import com.google.example.library.v1.FindRelatedBooksResponse;
import com.google.example.library.v1.GetBigBookMetadata;
import com.google.example.library.v1.GetBookFromAbsolutelyAnywhereRequest;
import com.google.example.library.v1.GetBookFromAnywhereRequest;
import com.google.example.library.v1.GetBookFromArchiveRequest;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.GetShelfRequest;
import static com.google.example.library.v1.LibraryClient.FindRelatedBooksPagedResponse;
import static com.google.example.library.v1.LibraryClient.ListBooksPagedResponse;
import static com.google.example.library.v1.LibraryClient.ListShelvesPagedResponse;
import static com.google.example.library.v1.LibraryClient.ListStringsPagedResponse;
import com.google.example.library.v1.LibraryServiceGrpc;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.ListStringsRequest;
import com.google.example.library.v1.ListStringsResponse;
import com.google.example.library.v1.MergeShelvesRequest;
import com.google.example.library.v1.MoveBookRequest;
import com.google.example.library.v1.MoveBooksRequest;
import com.google.example.library.v1.MoveBooksResponse;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.Shelf;
import com.google.example.library.v1.StreamBooksRequest;
import com.google.example.library.v1.StreamShelvesRequest;
import com.google.example.library.v1.StreamShelvesResponse;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsResponse;
import com.google.example.library.v1.UpdateBookIndexRequest;
import com.google.example.library.v1.UpdateBookRequest;
import com.google.longrunning.Operation;
import com.google.protobuf.Empty;
import com.google.tagger.v1.LabelerGrpc;
import com.google.tagger.v1.TaggerProto.AddLabelRequest;
import com.google.tagger.v1.TaggerProto.AddLabelResponse;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.ScheduledExecutorService;
import javax.annotation.Generated;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * Settings class to configure an instance of {@link LibraryServiceStub}.
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 * <li>The default service address (library-example.googleapis.com) and default port (1234)
 * are used.
 * <li>Credentials are acquired automatically through Application Default Credentials.
 * <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 *
 * <p>The builder of this class is recursive, so contained classes are themselves builders.
 * When build() is called, the tree of builders is called to create the complete settings
 * object.
 *
 * For example, to set the total timeout of createShelf to 30 seconds:
 *
 * <pre>
 * <code>
 * LibraryServiceStubSettings.Builder librarySettingsBuilder =
 *     LibraryServiceStubSettings.newBuilder();
 * librarySettingsBuilder
 *     .createShelfSettings()
 *     .setRetrySettings(
 *         librarySettingsBuilder.createShelfSettings().getRetrySettings().toBuilder()
 *             .setTotalTimeout(Duration.ofSeconds(30))
 *             .build());
 * LibraryServiceStubSettings librarySettings = librarySettingsBuilder.build();
 * </code>
 * </pre>
 */
@Generated("by gapic-generator")
public class LibraryServiceStubSettings extends StubSettings<LibraryServiceStubSettings> {
  /**
   * The default scopes of the service.
   */
  private static final ImmutableList<String> DEFAULT_SERVICE_SCOPES = ImmutableList.<String>builder()
      .add("https://www.googleapis.com/auth/cloud-platform")
      .add("https://www.googleapis.com/auth/library")
      .build();

  private final UnaryCallSettings<CreateShelfRequest, Shelf> createShelfSettings;
  private final UnaryCallSettings<GetShelfRequest, Shelf> getShelfSettings;
  private final PagedCallSettings<ListShelvesRequest, ListShelvesResponse, ListShelvesPagedResponse> listShelvesSettings;
  private final UnaryCallSettings<DeleteShelfRequest, Empty> deleteShelfSettings;
  private final UnaryCallSettings<MergeShelvesRequest, Shelf> mergeShelvesSettings;
  private final UnaryCallSettings<CreateBookRequest, Book> createBookSettings;
  private final BatchingCallSettings<PublishSeriesRequest, PublishSeriesResponse> publishSeriesSettings;
  private final UnaryCallSettings<GetBookRequest, Book> getBookSettings;
  private final PagedCallSettings<ListBooksRequest, ListBooksResponse, ListBooksPagedResponse> listBooksSettings;
  private final UnaryCallSettings<DeleteBookRequest, Empty> deleteBookSettings;
  private final UnaryCallSettings<UpdateBookRequest, Book> updateBookSettings;
  private final UnaryCallSettings<MoveBookRequest, Book> moveBookSettings;
  private final PagedCallSettings<ListStringsRequest, ListStringsResponse, ListStringsPagedResponse> listStringsSettings;
  private final BatchingCallSettings<AddCommentsRequest, Empty> addCommentsSettings;
  private final UnaryCallSettings<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveSettings;
  private final UnaryCallSettings<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereSettings;
  private final UnaryCallSettings<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere> getBookFromAbsolutelyAnywhereSettings;
  private final UnaryCallSettings<UpdateBookIndexRequest, Empty> updateBookIndexSettings;
  private final ServerStreamingCallSettings<StreamShelvesRequest, StreamShelvesResponse> streamShelvesSettings;
  private final ServerStreamingCallSettings<StreamBooksRequest, Book> streamBooksSettings;
  private final StreamingCallSettings<DiscussBookRequest, Comment> discussBookSettings;
  private final StreamingCallSettings<DiscussBookRequest, Comment> monologAboutBookSettings;
  private final StreamingCallSettings<DiscussBookRequest, Empty> babbleAboutBookSettings;
  private final PagedCallSettings<FindRelatedBooksRequest, FindRelatedBooksResponse, FindRelatedBooksPagedResponse> findRelatedBooksSettings;
  private final UnaryCallSettings<AddLabelRequest, AddLabelResponse> addLabelSettings;
  private final UnaryCallSettings<GetBookRequest, Operation> getBigBookSettings;
  private final OperationCallSettings<GetBookRequest, Book, GetBigBookMetadata> getBigBookOperationSettings;
  private final UnaryCallSettings<GetBookRequest, Operation> getBigNothingSettings;
  private final OperationCallSettings<GetBookRequest, Empty, GetBigBookMetadata> getBigNothingOperationSettings;
  private final UnaryCallSettings<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsSettings;
  private final UnaryCallSettings<MoveBooksRequest, MoveBooksResponse> moveBooksSettings;
  private final UnaryCallSettings<ArchiveBooksRequest, ArchiveBooksResponse> archiveBooksSettings;
  private final UnaryCallSettings<ArchiveBooksRequest, Operation> longRunningArchiveBooksSettings;
  private final OperationCallSettings<ArchiveBooksRequest, ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksOperationSettings;
  private final StreamingCallSettings<ArchiveBooksRequest, ArchiveBooksResponse> streamingArchiveBooksSettings;
  private final UnaryCallSettings<Book, Empty> saveBookSettings;
  private final UnaryCallSettings<ListShelvesRequest, Book> privateListShelvesSettings;

  /**
   * Returns the object with the settings used for calls to createShelf.
   */
  public UnaryCallSettings<CreateShelfRequest, Shelf> createShelfSettings() {
    return createShelfSettings;
  }

  /**
   * Returns the object with the settings used for calls to getShelf.
   */
  public UnaryCallSettings<GetShelfRequest, Shelf> getShelfSettings() {
    return getShelfSettings;
  }

  /**
   * Returns the object with the settings used for calls to listShelves.
   */
  public PagedCallSettings<ListShelvesRequest, ListShelvesResponse, ListShelvesPagedResponse> listShelvesSettings() {
    return listShelvesSettings;
  }

  /**
   * Returns the object with the settings used for calls to deleteShelf.
   */
  public UnaryCallSettings<DeleteShelfRequest, Empty> deleteShelfSettings() {
    return deleteShelfSettings;
  }

  /**
   * Returns the object with the settings used for calls to mergeShelves.
   */
  public UnaryCallSettings<MergeShelvesRequest, Shelf> mergeShelvesSettings() {
    return mergeShelvesSettings;
  }

  /**
   * Returns the object with the settings used for calls to createBook.
   */
  public UnaryCallSettings<CreateBookRequest, Book> createBookSettings() {
    return createBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to publishSeries.
   */
  public BatchingCallSettings<PublishSeriesRequest, PublishSeriesResponse> publishSeriesSettings() {
    return publishSeriesSettings;
  }

  /**
   * Returns the object with the settings used for calls to getBook.
   */
  public UnaryCallSettings<GetBookRequest, Book> getBookSettings() {
    return getBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to listBooks.
   */
  public PagedCallSettings<ListBooksRequest, ListBooksResponse, ListBooksPagedResponse> listBooksSettings() {
    return listBooksSettings;
  }

  /**
   * Returns the object with the settings used for calls to deleteBook.
   */
  public UnaryCallSettings<DeleteBookRequest, Empty> deleteBookSettings() {
    return deleteBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to updateBook.
   */
  public UnaryCallSettings<UpdateBookRequest, Book> updateBookSettings() {
    return updateBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to moveBook.
   */
  public UnaryCallSettings<MoveBookRequest, Book> moveBookSettings() {
    return moveBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to listStrings.
   */
  public PagedCallSettings<ListStringsRequest, ListStringsResponse, ListStringsPagedResponse> listStringsSettings() {
    return listStringsSettings;
  }

  /**
   * Returns the object with the settings used for calls to addComments.
   */
  public BatchingCallSettings<AddCommentsRequest, Empty> addCommentsSettings() {
    return addCommentsSettings;
  }

  /**
   * Returns the object with the settings used for calls to getBookFromArchive.
   */
  public UnaryCallSettings<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveSettings() {
    return getBookFromArchiveSettings;
  }

  /**
   * Returns the object with the settings used for calls to getBookFromAnywhere.
   */
  public UnaryCallSettings<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereSettings() {
    return getBookFromAnywhereSettings;
  }

  /**
   * Returns the object with the settings used for calls to getBookFromAbsolutelyAnywhere.
   */
  public UnaryCallSettings<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere> getBookFromAbsolutelyAnywhereSettings() {
    return getBookFromAbsolutelyAnywhereSettings;
  }

  /**
   * Returns the object with the settings used for calls to updateBookIndex.
   */
  public UnaryCallSettings<UpdateBookIndexRequest, Empty> updateBookIndexSettings() {
    return updateBookIndexSettings;
  }

  /**
   * Returns the object with the settings used for calls to streamShelves.
   */
  public ServerStreamingCallSettings<StreamShelvesRequest, StreamShelvesResponse> streamShelvesSettings() {
    return streamShelvesSettings;
  }

  /**
   * Returns the object with the settings used for calls to streamBooks.
   */
  public ServerStreamingCallSettings<StreamBooksRequest, Book> streamBooksSettings() {
    return streamBooksSettings;
  }

  /**
   * Returns the object with the settings used for calls to discussBook.
   */
  public StreamingCallSettings<DiscussBookRequest, Comment> discussBookSettings() {
    return discussBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to monologAboutBook.
   */
  public StreamingCallSettings<DiscussBookRequest, Comment> monologAboutBookSettings() {
    return monologAboutBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to babbleAboutBook.
   */
  public StreamingCallSettings<DiscussBookRequest, Empty> babbleAboutBookSettings() {
    return babbleAboutBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to findRelatedBooks.
   */
  public PagedCallSettings<FindRelatedBooksRequest, FindRelatedBooksResponse, FindRelatedBooksPagedResponse> findRelatedBooksSettings() {
    return findRelatedBooksSettings;
  }

  /**
   * Returns the object with the settings used for calls to addLabel.
   */
  public UnaryCallSettings<AddLabelRequest, AddLabelResponse> addLabelSettings() {
    return addLabelSettings;
  }

  /**
   * Returns the object with the settings used for calls to getBigBook.
   */
  public UnaryCallSettings<GetBookRequest, Operation> getBigBookSettings() {
    return getBigBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to getBigBook.
   */
  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public OperationCallSettings<GetBookRequest, Book, GetBigBookMetadata> getBigBookOperationSettings() {
    return getBigBookOperationSettings;
  }

  /**
   * Returns the object with the settings used for calls to getBigNothing.
   */
  public UnaryCallSettings<GetBookRequest, Operation> getBigNothingSettings() {
    return getBigNothingSettings;
  }

  /**
   * Returns the object with the settings used for calls to getBigNothing.
   */
  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public OperationCallSettings<GetBookRequest, Empty, GetBigBookMetadata> getBigNothingOperationSettings() {
    return getBigNothingOperationSettings;
  }

  /**
   * Returns the object with the settings used for calls to testOptionalRequiredFlatteningParams.
   */
  public UnaryCallSettings<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsSettings() {
    return testOptionalRequiredFlatteningParamsSettings;
  }

  /**
   * Returns the object with the settings used for calls to moveBooks.
   */
  public UnaryCallSettings<MoveBooksRequest, MoveBooksResponse> moveBooksSettings() {
    return moveBooksSettings;
  }

  /**
   * Returns the object with the settings used for calls to archiveBooks.
   */
  public UnaryCallSettings<ArchiveBooksRequest, ArchiveBooksResponse> archiveBooksSettings() {
    return archiveBooksSettings;
  }

  /**
   * Returns the object with the settings used for calls to longRunningArchiveBooks.
   */
  public UnaryCallSettings<ArchiveBooksRequest, Operation> longRunningArchiveBooksSettings() {
    return longRunningArchiveBooksSettings;
  }

  /**
   * Returns the object with the settings used for calls to longRunningArchiveBooks.
   */
  @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
  public OperationCallSettings<ArchiveBooksRequest, ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksOperationSettings() {
    return longRunningArchiveBooksOperationSettings;
  }

  /**
   * Returns the object with the settings used for calls to streamingArchiveBooks.
   */
  public StreamingCallSettings<ArchiveBooksRequest, ArchiveBooksResponse> streamingArchiveBooksSettings() {
    return streamingArchiveBooksSettings;
  }

  /**
   * Returns the object with the settings used for calls to saveBook.
   */
  public UnaryCallSettings<Book, Empty> saveBookSettings() {
    return saveBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to privateListShelves.
   */
  public UnaryCallSettings<ListShelvesRequest, Book> privateListShelvesSettings() {
    return privateListShelvesSettings;
  }


  @BetaApi("A restructuring of stub classes is planned, so this may break in the future")
  public LibraryServiceStub createStub() throws IOException {
    if (getTransportChannelProvider()
        .getTransportName()
        .equals(GrpcTransportChannel.getGrpcTransportName())) {
      return GrpcLibraryServiceStub.create(this);
    } else {
      throw new UnsupportedOperationException(
          "Transport not supported: " + getTransportChannelProvider().getTransportName());
    }
  }

  /**
   * Returns a builder for the default ExecutorProvider for this service.
   */
  public static InstantiatingExecutorProvider.Builder defaultExecutorProviderBuilder() {
    return InstantiatingExecutorProvider.newBuilder();
  }

  /**
   * Returns the default service endpoint.
   */
  public static String getDefaultEndpoint() {
    return "library-example.googleapis.com:1234";
  }


  /**
   * Returns the default service scopes.
   */
  public static List<String> getDefaultServiceScopes() {
    return DEFAULT_SERVICE_SCOPES;
  }


  /**
   * Returns a builder for the default credentials for this service.
   */
  public static GoogleCredentialsProvider.Builder defaultCredentialsProviderBuilder() {
    return GoogleCredentialsProvider.newBuilder()
        .setScopesToApply(DEFAULT_SERVICE_SCOPES)
        ;
  }

  /** Returns a builder for the default ChannelProvider for this service. */
  public static InstantiatingGrpcChannelProvider.Builder defaultGrpcTransportProviderBuilder() {
    return InstantiatingGrpcChannelProvider.newBuilder()
        .setMaxInboundMessageSize(Integer.MAX_VALUE);
  }

  public static TransportChannelProvider defaultTransportChannelProvider() {
    return defaultGrpcTransportProviderBuilder().build();
  }

  @BetaApi("The surface for customizing headers is not stable yet and may change in the future.")
  public static ApiClientHeaderProvider.Builder defaultApiClientHeaderProviderBuilder() {
    return ApiClientHeaderProvider.newBuilder()
        .setGeneratedLibToken("gapic", GaxProperties.getLibraryVersion(LibraryServiceStubSettings.class))
        .setTransportToken(GaxGrpcProperties.getGrpcTokenName(), GaxGrpcProperties.getGrpcVersion());
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder() {
    return Builder.createDefault();
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder(ClientContext clientContext) {
    return new Builder(clientContext);
  }

  /**
   * Returns a builder containing all the values of this settings class.
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  protected LibraryServiceStubSettings(Builder settingsBuilder) throws IOException {
    super(settingsBuilder);

    createShelfSettings = settingsBuilder.createShelfSettings().build();
    getShelfSettings = settingsBuilder.getShelfSettings().build();
    listShelvesSettings = settingsBuilder.listShelvesSettings().build();
    deleteShelfSettings = settingsBuilder.deleteShelfSettings().build();
    mergeShelvesSettings = settingsBuilder.mergeShelvesSettings().build();
    createBookSettings = settingsBuilder.createBookSettings().build();
    publishSeriesSettings = settingsBuilder.publishSeriesSettings().build();
    getBookSettings = settingsBuilder.getBookSettings().build();
    listBooksSettings = settingsBuilder.listBooksSettings().build();
    deleteBookSettings = settingsBuilder.deleteBookSettings().build();
    updateBookSettings = settingsBuilder.updateBookSettings().build();
    moveBookSettings = settingsBuilder.moveBookSettings().build();
    listStringsSettings = settingsBuilder.listStringsSettings().build();
    addCommentsSettings = settingsBuilder.addCommentsSettings().build();
    getBookFromArchiveSettings = settingsBuilder.getBookFromArchiveSettings().build();
    getBookFromAnywhereSettings = settingsBuilder.getBookFromAnywhereSettings().build();
    getBookFromAbsolutelyAnywhereSettings = settingsBuilder.getBookFromAbsolutelyAnywhereSettings().build();
    updateBookIndexSettings = settingsBuilder.updateBookIndexSettings().build();
    streamShelvesSettings = settingsBuilder.streamShelvesSettings().build();
    streamBooksSettings = settingsBuilder.streamBooksSettings().build();
    discussBookSettings = settingsBuilder.discussBookSettings().build();
    monologAboutBookSettings = settingsBuilder.monologAboutBookSettings().build();
    babbleAboutBookSettings = settingsBuilder.babbleAboutBookSettings().build();
    findRelatedBooksSettings = settingsBuilder.findRelatedBooksSettings().build();
    addLabelSettings = settingsBuilder.addLabelSettings().build();
    getBigBookSettings = settingsBuilder.getBigBookSettings().build();
    getBigBookOperationSettings = settingsBuilder.getBigBookOperationSettings().build();
    getBigNothingSettings = settingsBuilder.getBigNothingSettings().build();
    getBigNothingOperationSettings = settingsBuilder.getBigNothingOperationSettings().build();
    testOptionalRequiredFlatteningParamsSettings = settingsBuilder.testOptionalRequiredFlatteningParamsSettings().build();
    moveBooksSettings = settingsBuilder.moveBooksSettings().build();
    archiveBooksSettings = settingsBuilder.archiveBooksSettings().build();
    longRunningArchiveBooksSettings = settingsBuilder.longRunningArchiveBooksSettings().build();
    longRunningArchiveBooksOperationSettings = settingsBuilder.longRunningArchiveBooksOperationSettings().build();
    streamingArchiveBooksSettings = settingsBuilder.streamingArchiveBooksSettings().build();
    saveBookSettings = settingsBuilder.saveBookSettings().build();
    privateListShelvesSettings = settingsBuilder.privateListShelvesSettings().build();
  }

  private static final PagedListDescriptor<ListShelvesRequest, ListShelvesResponse, Shelf> LIST_SHELVES_PAGE_STR_DESC =
      new PagedListDescriptor<ListShelvesRequest, ListShelvesResponse, Shelf>() {
        @Override
        public String emptyToken() {
          return "";
        }
        @Override
        public ListShelvesRequest injectToken(ListShelvesRequest payload, String token) {
          return ListShelvesRequest
            .newBuilder(payload)
            .setPageToken(token)
            .build();
        }
        @Override
        public ListShelvesRequest injectPageSize(ListShelvesRequest payload, int pageSize) {
          throw new UnsupportedOperationException("page size is not supported by this API method");
        }
        @Override
        public Integer extractPageSize(ListShelvesRequest payload) {
          throw new UnsupportedOperationException("page size is not supported by this API method");
        }
        @Override
        public String extractNextToken(ListShelvesResponse payload) {
          return payload.getNextPageToken();
        }
        @Override
        public Iterable<Shelf> extractResources(ListShelvesResponse payload) {
          return payload.getShelvesList() != null ? payload.getShelvesList() :
            ImmutableList.<Shelf>of();
        }
      };

  private static final PagedListDescriptor<ListBooksRequest, ListBooksResponse, Book> LIST_BOOKS_PAGE_STR_DESC =
      new PagedListDescriptor<ListBooksRequest, ListBooksResponse, Book>() {
        @Override
        public String emptyToken() {
          return "";
        }
        @Override
        public ListBooksRequest injectToken(ListBooksRequest payload, String token) {
          return ListBooksRequest
            .newBuilder(payload)
            .setPageToken(token)
            .build();
        }
        @Override
        public ListBooksRequest injectPageSize(ListBooksRequest payload, int pageSize) {
          return ListBooksRequest
            .newBuilder(payload)
            .setPageSize(pageSize)
            .build();
        }
        @Override
        public Integer extractPageSize(ListBooksRequest payload) {
          return payload.getPageSize();
        }
        @Override
        public String extractNextToken(ListBooksResponse payload) {
          return payload.getNextPageToken();
        }
        @Override
        public Iterable<Book> extractResources(ListBooksResponse payload) {
          return payload.getBooksList() != null ? payload.getBooksList() :
            ImmutableList.<Book>of();
        }
      };

  private static final PagedListDescriptor<ListStringsRequest, ListStringsResponse, String> LIST_STRINGS_PAGE_STR_DESC =
      new PagedListDescriptor<ListStringsRequest, ListStringsResponse, String>() {
        @Override
        public String emptyToken() {
          return "";
        }
        @Override
        public ListStringsRequest injectToken(ListStringsRequest payload, String token) {
          return ListStringsRequest
            .newBuilder(payload)
            .setPageToken(token)
            .build();
        }
        @Override
        public ListStringsRequest injectPageSize(ListStringsRequest payload, int pageSize) {
          return ListStringsRequest
            .newBuilder(payload)
            .setPageSize(pageSize)
            .build();
        }
        @Override
        public Integer extractPageSize(ListStringsRequest payload) {
          return payload.getPageSize();
        }
        @Override
        public String extractNextToken(ListStringsResponse payload) {
          return payload.getNextPageToken();
        }
        @Override
        public Iterable<String> extractResources(ListStringsResponse payload) {
          return payload.getStringsList() != null ? payload.getStringsList() :
            ImmutableList.<String>of();
        }
      };

  private static final PagedListDescriptor<FindRelatedBooksRequest, FindRelatedBooksResponse, String> FIND_RELATED_BOOKS_PAGE_STR_DESC =
      new PagedListDescriptor<FindRelatedBooksRequest, FindRelatedBooksResponse, String>() {
        @Override
        public String emptyToken() {
          return "";
        }
        @Override
        public FindRelatedBooksRequest injectToken(FindRelatedBooksRequest payload, String token) {
          return FindRelatedBooksRequest
            .newBuilder(payload)
            .setPageToken(token)
            .build();
        }
        @Override
        public FindRelatedBooksRequest injectPageSize(FindRelatedBooksRequest payload, int pageSize) {
          return FindRelatedBooksRequest
            .newBuilder(payload)
            .setPageSize(pageSize)
            .build();
        }
        @Override
        public Integer extractPageSize(FindRelatedBooksRequest payload) {
          return payload.getPageSize();
        }
        @Override
        public String extractNextToken(FindRelatedBooksResponse payload) {
          return payload.getNextPageToken();
        }
        @Override
        public Iterable<String> extractResources(FindRelatedBooksResponse payload) {
          return payload.getNamesList() != null ? payload.getNamesList() :
            ImmutableList.<String>of();
        }
      };

  private static final PagedListResponseFactory<ListShelvesRequest, ListShelvesResponse, ListShelvesPagedResponse> LIST_SHELVES_PAGE_STR_FACT =
      new PagedListResponseFactory<ListShelvesRequest, ListShelvesResponse, ListShelvesPagedResponse>() {
        @Override
        public ApiFuture<ListShelvesPagedResponse> getFuturePagedResponse(
            UnaryCallable<ListShelvesRequest, ListShelvesResponse> callable,
            ListShelvesRequest request,
            ApiCallContext context,
            ApiFuture<ListShelvesResponse> futureResponse) {
          PageContext<ListShelvesRequest, ListShelvesResponse, Shelf> pageContext =
              PageContext.create(callable, LIST_SHELVES_PAGE_STR_DESC, request, context);
          return ListShelvesPagedResponse.createAsync(pageContext, futureResponse);
        }
      };

  private static final PagedListResponseFactory<ListBooksRequest, ListBooksResponse, ListBooksPagedResponse> LIST_BOOKS_PAGE_STR_FACT =
      new PagedListResponseFactory<ListBooksRequest, ListBooksResponse, ListBooksPagedResponse>() {
        @Override
        public ApiFuture<ListBooksPagedResponse> getFuturePagedResponse(
            UnaryCallable<ListBooksRequest, ListBooksResponse> callable,
            ListBooksRequest request,
            ApiCallContext context,
            ApiFuture<ListBooksResponse> futureResponse) {
          PageContext<ListBooksRequest, ListBooksResponse, Book> pageContext =
              PageContext.create(callable, LIST_BOOKS_PAGE_STR_DESC, request, context);
          return ListBooksPagedResponse.createAsync(pageContext, futureResponse);
        }
      };

  private static final PagedListResponseFactory<ListStringsRequest, ListStringsResponse, ListStringsPagedResponse> LIST_STRINGS_PAGE_STR_FACT =
      new PagedListResponseFactory<ListStringsRequest, ListStringsResponse, ListStringsPagedResponse>() {
        @Override
        public ApiFuture<ListStringsPagedResponse> getFuturePagedResponse(
            UnaryCallable<ListStringsRequest, ListStringsResponse> callable,
            ListStringsRequest request,
            ApiCallContext context,
            ApiFuture<ListStringsResponse> futureResponse) {
          PageContext<ListStringsRequest, ListStringsResponse, String> pageContext =
              PageContext.create(callable, LIST_STRINGS_PAGE_STR_DESC, request, context);
          return ListStringsPagedResponse.createAsync(pageContext, futureResponse);
        }
      };

  private static final PagedListResponseFactory<FindRelatedBooksRequest, FindRelatedBooksResponse, FindRelatedBooksPagedResponse> FIND_RELATED_BOOKS_PAGE_STR_FACT =
      new PagedListResponseFactory<FindRelatedBooksRequest, FindRelatedBooksResponse, FindRelatedBooksPagedResponse>() {
        @Override
        public ApiFuture<FindRelatedBooksPagedResponse> getFuturePagedResponse(
            UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksResponse> callable,
            FindRelatedBooksRequest request,
            ApiCallContext context,
            ApiFuture<FindRelatedBooksResponse> futureResponse) {
          PageContext<FindRelatedBooksRequest, FindRelatedBooksResponse, String> pageContext =
              PageContext.create(callable, FIND_RELATED_BOOKS_PAGE_STR_DESC, request, context);
          return FindRelatedBooksPagedResponse.createAsync(pageContext, futureResponse);
        }
      };

  private static final BatchingDescriptor<PublishSeriesRequest, PublishSeriesResponse> PUBLISH_SERIES_BATCHING_DESC =
      new BatchingDescriptor<PublishSeriesRequest, PublishSeriesResponse>() {
        @Override
        public PartitionKey getBatchPartitionKey(PublishSeriesRequest request) {
          return new PartitionKey(request.getEdition(), request.getName());
        }

        @Override
        public RequestBuilder<PublishSeriesRequest> getRequestBuilder() {
          return new RequestBuilder<PublishSeriesRequest>() {
            private PublishSeriesRequest.Builder builder;
            @Override
            public void appendRequest(PublishSeriesRequest request) {
              if (builder == null) {
                builder = request.toBuilder();
              } else {
                builder.addAllBooks(request.getBooksList());
              }
            }
            @Override
            public PublishSeriesRequest build() {
              return builder.build();
            }
          };
        }

        @Override
        public void splitResponse(
            PublishSeriesResponse batchResponse,
            Collection<? extends BatchedRequestIssuer<PublishSeriesResponse>> batch) {
          int batchMessageIndex = 0;
          for (BatchedRequestIssuer<PublishSeriesResponse> responder : batch) {
            List<String> subresponseElements = new ArrayList<>();
            long subresponseCount = responder.getMessageCount();
            for (int i = 0; i < subresponseCount; i++) {
              subresponseElements.add(batchResponse.getBookNames(batchMessageIndex));
              batchMessageIndex += 1;
            }
            PublishSeriesResponse response =
                PublishSeriesResponse.newBuilder().addAllBookNames(subresponseElements).build();
            responder.setResponse(response);
          }
        }

        @Override
        public void splitException(
            Throwable throwable,
            Collection<? extends BatchedRequestIssuer<PublishSeriesResponse>> batch) {
          for (BatchedRequestIssuer<PublishSeriesResponse> responder : batch) {
            responder.setException(throwable);
          }
        }

        @Override
        public long countElements(PublishSeriesRequest request) {
          return request.getBooksCount();
        }

        @Override
        public long countBytes(PublishSeriesRequest request) {
          return request.getSerializedSize();
        }
      };

  private static final BatchingDescriptor<AddCommentsRequest, Empty> ADD_COMMENTS_BATCHING_DESC =
      new BatchingDescriptor<AddCommentsRequest, Empty>() {
        @Override
        public PartitionKey getBatchPartitionKey(AddCommentsRequest request) {
          return new PartitionKey(request.getName());
        }

        @Override
        public RequestBuilder<AddCommentsRequest> getRequestBuilder() {
          return new RequestBuilder<AddCommentsRequest>() {
            private AddCommentsRequest.Builder builder;
            @Override
            public void appendRequest(AddCommentsRequest request) {
              if (builder == null) {
                builder = request.toBuilder();
              } else {
                builder.addAllComments(request.getCommentsList());
              }
            }
            @Override
            public AddCommentsRequest build() {
              return builder.build();
            }
          };
        }

        @Override
        public void splitResponse(
            Empty batchResponse,
            Collection<? extends BatchedRequestIssuer<Empty>> batch) {
          int batchMessageIndex = 0;
          for (BatchedRequestIssuer<Empty> responder : batch) {
            Empty response =
                Empty.newBuilder().build();
            responder.setResponse(response);
          }
        }

        @Override
        public void splitException(
            Throwable throwable,
            Collection<? extends BatchedRequestIssuer<Empty>> batch) {
          for (BatchedRequestIssuer<Empty> responder : batch) {
            responder.setException(throwable);
          }
        }

        @Override
        public long countElements(AddCommentsRequest request) {
          return request.getCommentsCount();
        }

        @Override
        public long countBytes(AddCommentsRequest request) {
          return request.getSerializedSize();
        }
      };

  /**
   * Builder for LibraryServiceStubSettings.
   */
  public static class Builder extends StubSettings.Builder<LibraryServiceStubSettings, Builder> {
    private final ImmutableList<UnaryCallSettings.Builder<?, ?>> unaryMethodSettingsBuilders;

    private final UnaryCallSettings.Builder<CreateShelfRequest, Shelf> createShelfSettings;
    private final UnaryCallSettings.Builder<GetShelfRequest, Shelf> getShelfSettings;
    private final PagedCallSettings.Builder<ListShelvesRequest, ListShelvesResponse, ListShelvesPagedResponse> listShelvesSettings;
    private final UnaryCallSettings.Builder<DeleteShelfRequest, Empty> deleteShelfSettings;
    private final UnaryCallSettings.Builder<MergeShelvesRequest, Shelf> mergeShelvesSettings;
    private final UnaryCallSettings.Builder<CreateBookRequest, Book> createBookSettings;
    private final BatchingCallSettings.Builder<PublishSeriesRequest, PublishSeriesResponse> publishSeriesSettings;
    private final UnaryCallSettings.Builder<GetBookRequest, Book> getBookSettings;
    private final PagedCallSettings.Builder<ListBooksRequest, ListBooksResponse, ListBooksPagedResponse> listBooksSettings;
    private final UnaryCallSettings.Builder<DeleteBookRequest, Empty> deleteBookSettings;
    private final UnaryCallSettings.Builder<UpdateBookRequest, Book> updateBookSettings;
    private final UnaryCallSettings.Builder<MoveBookRequest, Book> moveBookSettings;
    private final PagedCallSettings.Builder<ListStringsRequest, ListStringsResponse, ListStringsPagedResponse> listStringsSettings;
    private final BatchingCallSettings.Builder<AddCommentsRequest, Empty> addCommentsSettings;
    private final UnaryCallSettings.Builder<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveSettings;
    private final UnaryCallSettings.Builder<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereSettings;
    private final UnaryCallSettings.Builder<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere> getBookFromAbsolutelyAnywhereSettings;
    private final UnaryCallSettings.Builder<UpdateBookIndexRequest, Empty> updateBookIndexSettings;
    private final ServerStreamingCallSettings.Builder<StreamShelvesRequest, StreamShelvesResponse> streamShelvesSettings;
    private final ServerStreamingCallSettings.Builder<StreamBooksRequest, Book> streamBooksSettings;
    private final StreamingCallSettings.Builder<DiscussBookRequest, Comment> discussBookSettings;
    private final StreamingCallSettings.Builder<DiscussBookRequest, Comment> monologAboutBookSettings;
    private final StreamingCallSettings.Builder<DiscussBookRequest, Empty> babbleAboutBookSettings;
    private final PagedCallSettings.Builder<FindRelatedBooksRequest, FindRelatedBooksResponse, FindRelatedBooksPagedResponse> findRelatedBooksSettings;
    private final UnaryCallSettings.Builder<AddLabelRequest, AddLabelResponse> addLabelSettings;
    private final UnaryCallSettings.Builder<GetBookRequest, Operation> getBigBookSettings;
    private final OperationCallSettings.Builder<GetBookRequest, Book, GetBigBookMetadata> getBigBookOperationSettings;
    private final UnaryCallSettings.Builder<GetBookRequest, Operation> getBigNothingSettings;
    private final OperationCallSettings.Builder<GetBookRequest, Empty, GetBigBookMetadata> getBigNothingOperationSettings;
    private final UnaryCallSettings.Builder<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsSettings;
    private final UnaryCallSettings.Builder<MoveBooksRequest, MoveBooksResponse> moveBooksSettings;
    private final UnaryCallSettings.Builder<ArchiveBooksRequest, ArchiveBooksResponse> archiveBooksSettings;
    private final UnaryCallSettings.Builder<ArchiveBooksRequest, Operation> longRunningArchiveBooksSettings;
    private final OperationCallSettings.Builder<ArchiveBooksRequest, ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksOperationSettings;
    private final StreamingCallSettings.Builder<ArchiveBooksRequest, ArchiveBooksResponse> streamingArchiveBooksSettings;
    private final UnaryCallSettings.Builder<Book, Empty> saveBookSettings;
    private final UnaryCallSettings.Builder<ListShelvesRequest, Book> privateListShelvesSettings;

    private static final ImmutableMap<String, ImmutableSet<StatusCode.Code>> RETRYABLE_CODE_DEFINITIONS;

    static {
      ImmutableMap.Builder<String, ImmutableSet<StatusCode.Code>> definitions = ImmutableMap.builder();
      definitions.put(
          "retry_policy_1_codes",
          ImmutableSet.copyOf(Lists.<StatusCode.Code>newArrayList(StatusCode.Code.UNAVAILABLE, StatusCode.Code.UNKNOWN)));
      definitions.put(
          "no_retry_codes",
          ImmutableSet.copyOf(Lists.<StatusCode.Code>newArrayList()));
      definitions.put(
          "no_retry_1_codes",
          ImmutableSet.copyOf(Lists.<StatusCode.Code>newArrayList()));
      RETRYABLE_CODE_DEFINITIONS = definitions.build();
    }

    private static final ImmutableMap<String, RetrySettings> RETRY_PARAM_DEFINITIONS;

    static {
      ImmutableMap.Builder<String, RetrySettings> definitions = ImmutableMap.builder();
      RetrySettings settings = null;
      settings = RetrySettings.newBuilder()
          .setInitialRetryDelay(Duration.ofMillis(200L))
          .setRetryDelayMultiplier(1.3)
          .setMaxRetryDelay(Duration.ofMillis(35000L))
          .setTotalTimeout(Duration.ofMillis(60000L))
          .build();
      definitions.put("retry_policy_1_params", settings);
      settings = RetrySettings.newBuilder()
          .build();
      definitions.put("no_retry_params", settings);
      settings = RetrySettings.newBuilder()
          .setTotalTimeout(Duration.ofMillis(60000L))
          .build();
      definitions.put("no_retry_1_params", settings);
      RETRY_PARAM_DEFINITIONS = definitions.build();
    }

    protected Builder() {
      this((ClientContext) null);
    }

    protected Builder(ClientContext clientContext) {
      super(clientContext);

      createShelfSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      getShelfSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      listShelvesSettings = PagedCallSettings.newBuilder(
          LIST_SHELVES_PAGE_STR_FACT);

      deleteShelfSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      mergeShelvesSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      createBookSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      publishSeriesSettings = BatchingCallSettings.newBuilder(
          PUBLISH_SERIES_BATCHING_DESC)
              .setBatchingSettings(BatchingSettings.newBuilder().build());

      getBookSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      listBooksSettings = PagedCallSettings.newBuilder(
          LIST_BOOKS_PAGE_STR_FACT);

      deleteBookSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      updateBookSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      moveBookSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      listStringsSettings = PagedCallSettings.newBuilder(
          LIST_STRINGS_PAGE_STR_FACT);

      addCommentsSettings = BatchingCallSettings.newBuilder(
          ADD_COMMENTS_BATCHING_DESC)
              .setBatchingSettings(BatchingSettings.newBuilder().build());

      getBookFromArchiveSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      getBookFromAnywhereSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      getBookFromAbsolutelyAnywhereSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      updateBookIndexSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      streamShelvesSettings = ServerStreamingCallSettings.newBuilder();

      streamBooksSettings = ServerStreamingCallSettings.newBuilder();

      discussBookSettings = StreamingCallSettings.newBuilder();

      monologAboutBookSettings = StreamingCallSettings.newBuilder();

      babbleAboutBookSettings = StreamingCallSettings.newBuilder();

      findRelatedBooksSettings = PagedCallSettings.newBuilder(
          FIND_RELATED_BOOKS_PAGE_STR_FACT);

      addLabelSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      getBigBookSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      getBigBookOperationSettings = OperationCallSettings.newBuilder();

      getBigNothingSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      getBigNothingOperationSettings = OperationCallSettings.newBuilder();

      testOptionalRequiredFlatteningParamsSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      moveBooksSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      archiveBooksSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      longRunningArchiveBooksSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      longRunningArchiveBooksOperationSettings = OperationCallSettings.newBuilder();

      streamingArchiveBooksSettings = StreamingCallSettings.newBuilder();

      saveBookSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      privateListShelvesSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      unaryMethodSettingsBuilders = ImmutableList.<UnaryCallSettings.Builder<?, ?>>of(
          createShelfSettings,
          getShelfSettings,
          listShelvesSettings,
          deleteShelfSettings,
          mergeShelvesSettings,
          createBookSettings,
          publishSeriesSettings,
          getBookSettings,
          listBooksSettings,
          deleteBookSettings,
          updateBookSettings,
          moveBookSettings,
          listStringsSettings,
          addCommentsSettings,
          getBookFromArchiveSettings,
          getBookFromAnywhereSettings,
          getBookFromAbsolutelyAnywhereSettings,
          updateBookIndexSettings,
          findRelatedBooksSettings,
          addLabelSettings,
          getBigBookSettings,
          getBigNothingSettings,
          testOptionalRequiredFlatteningParamsSettings,
          moveBooksSettings,
          archiveBooksSettings,
          longRunningArchiveBooksSettings,
          saveBookSettings,
          privateListShelvesSettings
      );

      initDefaults(this);
    }

    private static Builder createDefault() {
      Builder builder = new Builder((ClientContext) null);
      builder.setTransportChannelProvider(defaultTransportChannelProvider());
      builder.setCredentialsProvider(defaultCredentialsProviderBuilder().build());
      builder.setInternalHeaderProvider(defaultApiClientHeaderProviderBuilder().build());
      builder.setEndpoint(getDefaultEndpoint());
      return initDefaults(builder);
    }

    private static Builder initDefaults(Builder builder) {

      builder.createShelfSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("no_retry_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("no_retry_1_params"));

      builder.getShelfSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("retry_policy_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("retry_policy_1_params"));

      builder.listShelvesSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("retry_policy_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("retry_policy_1_params"));

      builder.deleteShelfSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("retry_policy_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("retry_policy_1_params"));

      builder.mergeShelvesSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("no_retry_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("no_retry_1_params"));

      builder.createBookSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("no_retry_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("no_retry_1_params"));

      builder.publishSeriesSettings().setBatchingSettings(
          BatchingSettings.newBuilder()
          .setElementCountThreshold(6L)
          .setRequestByteThreshold(100000L)
          .setDelayThreshold(Duration.ofMillis(500))
          .setFlowControlSettings(
            FlowControlSettings.newBuilder()
              .setLimitExceededBehavior(LimitExceededBehavior.Ignore)
              .build())
          .build());
      builder.publishSeriesSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("no_retry_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("no_retry_1_params"));

      builder.getBookSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("retry_policy_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("retry_policy_1_params"));

      builder.listBooksSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("retry_policy_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("retry_policy_1_params"));

      builder.deleteBookSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("retry_policy_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("retry_policy_1_params"));

      builder.updateBookSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("retry_policy_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("retry_policy_1_params"));

      builder.moveBookSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("no_retry_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("no_retry_1_params"));

      builder.listStringsSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("retry_policy_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("retry_policy_1_params"));

      builder.addCommentsSettings().setBatchingSettings(
          BatchingSettings.newBuilder()
          .setElementCountThreshold(6L)
          .setRequestByteThreshold(100000L)
          .setDelayThreshold(Duration.ofMillis(500))
          .setFlowControlSettings(
            FlowControlSettings.newBuilder()
              .setLimitExceededBehavior(LimitExceededBehavior.Ignore)
              .build())
          .build());
      builder.addCommentsSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("no_retry_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("no_retry_1_params"));

      builder.getBookFromArchiveSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("retry_policy_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("retry_policy_1_params"));

      builder.getBookFromAnywhereSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("retry_policy_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("retry_policy_1_params"));

      builder.getBookFromAbsolutelyAnywhereSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("retry_policy_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("retry_policy_1_params"));

      builder.updateBookIndexSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("retry_policy_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("retry_policy_1_params"));

      builder.streamShelvesSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("no_retry_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("no_retry_1_params"));

      builder.streamBooksSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("retry_policy_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("retry_policy_1_params"));

      builder.findRelatedBooksSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("retry_policy_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("retry_policy_1_params"));

      builder.addLabelSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("no_retry_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("no_retry_params"));

      builder.getBigBookSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("no_retry_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("no_retry_1_params"));

      builder.getBigNothingSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("no_retry_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("no_retry_1_params"));

      builder.testOptionalRequiredFlatteningParamsSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("no_retry_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("no_retry_1_params"));

      builder.moveBooksSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("retry_policy_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("retry_policy_1_params"));

      builder.archiveBooksSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("retry_policy_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("retry_policy_1_params"));

      builder.longRunningArchiveBooksSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("retry_policy_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("retry_policy_1_params"));

      builder.saveBookSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("retry_policy_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("retry_policy_1_params"));

      builder.privateListShelvesSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("retry_policy_1_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("retry_policy_1_params"));
      builder
          .getBigBookOperationSettings()
          .setInitialCallSettings(
              UnaryCallSettings.<GetBookRequest, OperationSnapshot>newUnaryCallSettingsBuilder()
                  .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("no_retry_1_codes"))
                  .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("no_retry_1_params"))
                  .build())
          .setResponseTransformer(ProtoOperationTransformers.ResponseTransformer.create(Book.class))
          .setMetadataTransformer(ProtoOperationTransformers.MetadataTransformer.create(GetBigBookMetadata.class))
          .setPollingAlgorithm(
              OperationTimedPollAlgorithm.create(
                  RetrySettings.newBuilder()
                     .setInitialRetryDelay(Duration.ofMillis(3000L))
                     .setRetryDelayMultiplier(1.3)
                     .setMaxRetryDelay(Duration.ofMillis(30000L))
                     .setInitialRpcTimeout(Duration.ZERO) // ignored
                     .setRpcTimeoutMultiplier(1.0) // ignored
                     .setMaxRpcTimeout(Duration.ZERO) // ignored
                     .setTotalTimeout(Duration.ofMillis(86400000L))
                     .build()));
      builder
          .getBigNothingOperationSettings()
          .setInitialCallSettings(
              UnaryCallSettings.<GetBookRequest, OperationSnapshot>newUnaryCallSettingsBuilder()
                  .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("no_retry_1_codes"))
                  .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("no_retry_1_params"))
                  .build())
          .setResponseTransformer(ProtoOperationTransformers.ResponseTransformer.create(Empty.class))
          .setMetadataTransformer(ProtoOperationTransformers.MetadataTransformer.create(GetBigBookMetadata.class))
          .setPollingAlgorithm(
              OperationTimedPollAlgorithm.create(
                  RetrySettings.newBuilder()
                     .setInitialRetryDelay(Duration.ofMillis(3000L))
                     .setRetryDelayMultiplier(1.3)
                     .setMaxRetryDelay(Duration.ofMillis(60000L))
                     .setInitialRpcTimeout(Duration.ZERO) // ignored
                     .setRpcTimeoutMultiplier(1.0) // ignored
                     .setMaxRpcTimeout(Duration.ZERO) // ignored
                     .setTotalTimeout(Duration.ofMillis(600000L))
                     .build()));
      builder
          .longRunningArchiveBooksOperationSettings()
          .setInitialCallSettings(
              UnaryCallSettings.<ArchiveBooksRequest, OperationSnapshot>newUnaryCallSettingsBuilder()
                  .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("retry_policy_1_codes"))
                  .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("retry_policy_1_params"))
                  .build())
          .setResponseTransformer(ProtoOperationTransformers.ResponseTransformer.create(ArchiveBooksResponse.class))
          .setMetadataTransformer(ProtoOperationTransformers.MetadataTransformer.create(ArchiveBooksMetadata.class))
          .setPollingAlgorithm(
              OperationTimedPollAlgorithm.create(
                  RetrySettings.newBuilder()
                     .setInitialRetryDelay(Duration.ofMillis(500L))
                     .setRetryDelayMultiplier(1.5)
                     .setMaxRetryDelay(Duration.ofMillis(5000L))
                     .setInitialRpcTimeout(Duration.ZERO) // ignored
                     .setRpcTimeoutMultiplier(1.0) // ignored
                     .setMaxRpcTimeout(Duration.ZERO) // ignored
                     .setTotalTimeout(Duration.ofMillis(300000L))
                     .build()));

      return builder;
    }

    protected Builder(LibraryServiceStubSettings settings) {
      super(settings);

      createShelfSettings = settings.createShelfSettings.toBuilder();
      getShelfSettings = settings.getShelfSettings.toBuilder();
      listShelvesSettings = settings.listShelvesSettings.toBuilder();
      deleteShelfSettings = settings.deleteShelfSettings.toBuilder();
      mergeShelvesSettings = settings.mergeShelvesSettings.toBuilder();
      createBookSettings = settings.createBookSettings.toBuilder();
      publishSeriesSettings = settings.publishSeriesSettings.toBuilder();
      getBookSettings = settings.getBookSettings.toBuilder();
      listBooksSettings = settings.listBooksSettings.toBuilder();
      deleteBookSettings = settings.deleteBookSettings.toBuilder();
      updateBookSettings = settings.updateBookSettings.toBuilder();
      moveBookSettings = settings.moveBookSettings.toBuilder();
      listStringsSettings = settings.listStringsSettings.toBuilder();
      addCommentsSettings = settings.addCommentsSettings.toBuilder();
      getBookFromArchiveSettings = settings.getBookFromArchiveSettings.toBuilder();
      getBookFromAnywhereSettings = settings.getBookFromAnywhereSettings.toBuilder();
      getBookFromAbsolutelyAnywhereSettings = settings.getBookFromAbsolutelyAnywhereSettings.toBuilder();
      updateBookIndexSettings = settings.updateBookIndexSettings.toBuilder();
      streamShelvesSettings = settings.streamShelvesSettings.toBuilder();
      streamBooksSettings = settings.streamBooksSettings.toBuilder();
      discussBookSettings = settings.discussBookSettings.toBuilder();
      monologAboutBookSettings = settings.monologAboutBookSettings.toBuilder();
      babbleAboutBookSettings = settings.babbleAboutBookSettings.toBuilder();
      findRelatedBooksSettings = settings.findRelatedBooksSettings.toBuilder();
      addLabelSettings = settings.addLabelSettings.toBuilder();
      getBigBookSettings = settings.getBigBookSettings.toBuilder();
      getBigBookOperationSettings = settings.getBigBookOperationSettings.toBuilder();
      getBigNothingSettings = settings.getBigNothingSettings.toBuilder();
      getBigNothingOperationSettings = settings.getBigNothingOperationSettings.toBuilder();
      testOptionalRequiredFlatteningParamsSettings = settings.testOptionalRequiredFlatteningParamsSettings.toBuilder();
      moveBooksSettings = settings.moveBooksSettings.toBuilder();
      archiveBooksSettings = settings.archiveBooksSettings.toBuilder();
      longRunningArchiveBooksSettings = settings.longRunningArchiveBooksSettings.toBuilder();
      longRunningArchiveBooksOperationSettings = settings.longRunningArchiveBooksOperationSettings.toBuilder();
      streamingArchiveBooksSettings = settings.streamingArchiveBooksSettings.toBuilder();
      saveBookSettings = settings.saveBookSettings.toBuilder();
      privateListShelvesSettings = settings.privateListShelvesSettings.toBuilder();

      unaryMethodSettingsBuilders = ImmutableList.<UnaryCallSettings.Builder<?, ?>>of(
          createShelfSettings,
          getShelfSettings,
          listShelvesSettings,
          deleteShelfSettings,
          mergeShelvesSettings,
          createBookSettings,
          publishSeriesSettings,
          getBookSettings,
          listBooksSettings,
          deleteBookSettings,
          updateBookSettings,
          moveBookSettings,
          listStringsSettings,
          addCommentsSettings,
          getBookFromArchiveSettings,
          getBookFromAnywhereSettings,
          getBookFromAbsolutelyAnywhereSettings,
          updateBookIndexSettings,
          findRelatedBooksSettings,
          addLabelSettings,
          getBigBookSettings,
          getBigNothingSettings,
          testOptionalRequiredFlatteningParamsSettings,
          moveBooksSettings,
          archiveBooksSettings,
          longRunningArchiveBooksSettings,
          saveBookSettings,
          privateListShelvesSettings
      );
    }

    // NEXT_MAJOR_VER: remove 'throws Exception'
    /**
     * Applies the given settings updater function to all of the unary API methods in this service.
     *
     * Note: This method does not support applying settings to streaming methods.
     */
    public Builder applyToAllUnaryMethods(ApiFunction<UnaryCallSettings.Builder<?, ?>, Void> settingsUpdater) throws Exception {
      super.applyToAllUnaryMethods(unaryMethodSettingsBuilders, settingsUpdater);
      return this;
    }

    public ImmutableList<UnaryCallSettings.Builder<?, ?>> unaryMethodSettingsBuilders() {
      return unaryMethodSettingsBuilders;
    }

    /**
     * Returns the builder for the settings used for calls to createShelf.
     */
    public UnaryCallSettings.Builder<CreateShelfRequest, Shelf> createShelfSettings() {
      return createShelfSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getShelf.
     */
    public UnaryCallSettings.Builder<GetShelfRequest, Shelf> getShelfSettings() {
      return getShelfSettings;
    }

    /**
     * Returns the builder for the settings used for calls to listShelves.
     */
    public PagedCallSettings.Builder<ListShelvesRequest, ListShelvesResponse, ListShelvesPagedResponse> listShelvesSettings() {
      return listShelvesSettings;
    }

    /**
     * Returns the builder for the settings used for calls to deleteShelf.
     */
    public UnaryCallSettings.Builder<DeleteShelfRequest, Empty> deleteShelfSettings() {
      return deleteShelfSettings;
    }

    /**
     * Returns the builder for the settings used for calls to mergeShelves.
     */
    public UnaryCallSettings.Builder<MergeShelvesRequest, Shelf> mergeShelvesSettings() {
      return mergeShelvesSettings;
    }

    /**
     * Returns the builder for the settings used for calls to createBook.
     */
    public UnaryCallSettings.Builder<CreateBookRequest, Book> createBookSettings() {
      return createBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to publishSeries.
     */
    public BatchingCallSettings.Builder<PublishSeriesRequest, PublishSeriesResponse> publishSeriesSettings() {
      return publishSeriesSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getBook.
     */
    public UnaryCallSettings.Builder<GetBookRequest, Book> getBookSettings() {
      return getBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to listBooks.
     */
    public PagedCallSettings.Builder<ListBooksRequest, ListBooksResponse, ListBooksPagedResponse> listBooksSettings() {
      return listBooksSettings;
    }

    /**
     * Returns the builder for the settings used for calls to deleteBook.
     */
    public UnaryCallSettings.Builder<DeleteBookRequest, Empty> deleteBookSettings() {
      return deleteBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to updateBook.
     */
    public UnaryCallSettings.Builder<UpdateBookRequest, Book> updateBookSettings() {
      return updateBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to moveBook.
     */
    public UnaryCallSettings.Builder<MoveBookRequest, Book> moveBookSettings() {
      return moveBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to listStrings.
     */
    public PagedCallSettings.Builder<ListStringsRequest, ListStringsResponse, ListStringsPagedResponse> listStringsSettings() {
      return listStringsSettings;
    }

    /**
     * Returns the builder for the settings used for calls to addComments.
     */
    public BatchingCallSettings.Builder<AddCommentsRequest, Empty> addCommentsSettings() {
      return addCommentsSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getBookFromArchive.
     */
    public UnaryCallSettings.Builder<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveSettings() {
      return getBookFromArchiveSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getBookFromAnywhere.
     */
    public UnaryCallSettings.Builder<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereSettings() {
      return getBookFromAnywhereSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getBookFromAbsolutelyAnywhere.
     */
    public UnaryCallSettings.Builder<GetBookFromAbsolutelyAnywhereRequest, BookFromAnywhere> getBookFromAbsolutelyAnywhereSettings() {
      return getBookFromAbsolutelyAnywhereSettings;
    }

    /**
     * Returns the builder for the settings used for calls to updateBookIndex.
     */
    public UnaryCallSettings.Builder<UpdateBookIndexRequest, Empty> updateBookIndexSettings() {
      return updateBookIndexSettings;
    }

    /**
     * Returns the builder for the settings used for calls to streamShelves.
     */
    public ServerStreamingCallSettings.Builder<StreamShelvesRequest, StreamShelvesResponse> streamShelvesSettings() {
      return streamShelvesSettings;
    }

    /**
     * Returns the builder for the settings used for calls to streamBooks.
     */
    public ServerStreamingCallSettings.Builder<StreamBooksRequest, Book> streamBooksSettings() {
      return streamBooksSettings;
    }

    /**
     * Returns the builder for the settings used for calls to discussBook.
     */
    public StreamingCallSettings.Builder<DiscussBookRequest, Comment> discussBookSettings() {
      return discussBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to monologAboutBook.
     */
    public StreamingCallSettings.Builder<DiscussBookRequest, Comment> monologAboutBookSettings() {
      return monologAboutBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to babbleAboutBook.
     */
    public StreamingCallSettings.Builder<DiscussBookRequest, Empty> babbleAboutBookSettings() {
      return babbleAboutBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to findRelatedBooks.
     */
    public PagedCallSettings.Builder<FindRelatedBooksRequest, FindRelatedBooksResponse, FindRelatedBooksPagedResponse> findRelatedBooksSettings() {
      return findRelatedBooksSettings;
    }

    /**
     * Returns the builder for the settings used for calls to addLabel.
     */
    public UnaryCallSettings.Builder<AddLabelRequest, AddLabelResponse> addLabelSettings() {
      return addLabelSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getBigBook.
     */
    public UnaryCallSettings.Builder<GetBookRequest, Operation> getBigBookSettings() {
      return getBigBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getBigBook.
     */
    @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
    public OperationCallSettings.Builder<GetBookRequest, Book, GetBigBookMetadata> getBigBookOperationSettings() {
      return getBigBookOperationSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getBigNothing.
     */
    public UnaryCallSettings.Builder<GetBookRequest, Operation> getBigNothingSettings() {
      return getBigNothingSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getBigNothing.
     */
    @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
    public OperationCallSettings.Builder<GetBookRequest, Empty, GetBigBookMetadata> getBigNothingOperationSettings() {
      return getBigNothingOperationSettings;
    }

    /**
     * Returns the builder for the settings used for calls to testOptionalRequiredFlatteningParams.
     */
    public UnaryCallSettings.Builder<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsSettings() {
      return testOptionalRequiredFlatteningParamsSettings;
    }

    /**
     * Returns the builder for the settings used for calls to moveBooks.
     */
    public UnaryCallSettings.Builder<MoveBooksRequest, MoveBooksResponse> moveBooksSettings() {
      return moveBooksSettings;
    }

    /**
     * Returns the builder for the settings used for calls to archiveBooks.
     */
    public UnaryCallSettings.Builder<ArchiveBooksRequest, ArchiveBooksResponse> archiveBooksSettings() {
      return archiveBooksSettings;
    }

    /**
     * Returns the builder for the settings used for calls to longRunningArchiveBooks.
     */
    public UnaryCallSettings.Builder<ArchiveBooksRequest, Operation> longRunningArchiveBooksSettings() {
      return longRunningArchiveBooksSettings;
    }

    /**
     * Returns the builder for the settings used for calls to longRunningArchiveBooks.
     */
    @BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
    public OperationCallSettings.Builder<ArchiveBooksRequest, ArchiveBooksResponse, ArchiveBooksMetadata> longRunningArchiveBooksOperationSettings() {
      return longRunningArchiveBooksOperationSettings;
    }

    /**
     * Returns the builder for the settings used for calls to streamingArchiveBooks.
     */
    public StreamingCallSettings.Builder<ArchiveBooksRequest, ArchiveBooksResponse> streamingArchiveBooksSettings() {
      return streamingArchiveBooksSettings;
    }

    /**
     * Returns the builder for the settings used for calls to saveBook.
     */
    public UnaryCallSettings.Builder<Book, Empty> saveBookSettings() {
      return saveBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to privateListShelves.
     */
    public UnaryCallSettings.Builder<ListShelvesRequest, Book> privateListShelvesSettings() {
      return privateListShelvesSettings;
    }

    @Override
    public LibraryServiceStubSettings build() throws IOException {
      return new LibraryServiceStubSettings(this);
    }
  }
}
============== file: src/main/java/com/google/example/library/v1/stub/MyProtoStub.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1.stub;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.protos.google.example.library.v1.AnotherService.MethodRequest;
import com.google.protos.google.example.library.v1.AnotherService.MethodResponse;
import com.google.protos.google.example.library.v1.AnotherService.Namespace;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * Base stub class for Google Example Library API.
 *
 * <p>This class is for advanced usage and reflects the underlying API directly.
 */
@Generated("by gapic-generator")
@BetaApi("A restructuring of stub classes is planned, so this may break in the future")
public abstract class MyProtoStub implements BackgroundResource {


  public UnaryCallable<MethodRequest, MethodResponse> myMethodCallable() {
    throw new UnsupportedOperationException("Not implemented: myMethodCallable()");
  }

  public UnaryCallable<MethodRequest, Namespace> getNamespaceCallable() {
    throw new UnsupportedOperationException("Not implemented: getNamespaceCallable()");
  }

  @Override
  public abstract void close();
}
============== file: src/main/java/com/google/example/library/v1/stub/MyProtoStubSettings.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1.stub;

import com.google.api.core.ApiFunction;
import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.core.GaxProperties;
import com.google.api.gax.core.GoogleCredentialsProvider;
import com.google.api.gax.core.InstantiatingExecutorProvider;
import com.google.api.gax.grpc.GaxGrpcProperties;
import com.google.api.gax.grpc.GrpcTransportChannel;
import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.ApiClientHeaderProvider;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.ClientSettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.StatusCode;
import com.google.api.gax.rpc.StubSettings;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.api.gax.rpc.UnaryCallSettings;
import com.google.auth.Credentials;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.google.protos.google.example.library.v1.AnotherService.MethodRequest;
import com.google.protos.google.example.library.v1.AnotherService.MethodResponse;
import com.google.protos.google.example.library.v1.AnotherService.Namespace;
import com.google.protos.google.example.library.v1.MyProtoGrpc;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.ScheduledExecutorService;
import javax.annotation.Generated;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * Settings class to configure an instance of {@link MyProtoStub}.
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 * <li>The default service address (library-example.googleapis.com) and default port (1234)
 * are used.
 * <li>Credentials are acquired automatically through Application Default Credentials.
 * <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 *
 * <p>The builder of this class is recursive, so contained classes are themselves builders.
 * When build() is called, the tree of builders is called to create the complete settings
 * object.
 *
 * For example, to set the total timeout of myMethod to 30 seconds:
 *
 * <pre>
 * <code>
 * MyProtoStubSettings.Builder myProtoSettingsBuilder =
 *     MyProtoStubSettings.newBuilder();
 * myProtoSettingsBuilder
 *     .myMethodSettings()
 *     .setRetrySettings(
 *         myProtoSettingsBuilder.myMethodSettings().getRetrySettings().toBuilder()
 *             .setTotalTimeout(Duration.ofSeconds(30))
 *             .build());
 * MyProtoStubSettings myProtoSettings = myProtoSettingsBuilder.build();
 * </code>
 * </pre>
 */
@Generated("by gapic-generator")
public class MyProtoStubSettings extends StubSettings<MyProtoStubSettings> {
  /**
   * The default scopes of the service.
   */
  private static final ImmutableList<String> DEFAULT_SERVICE_SCOPES = ImmutableList.<String>builder()
      .add("https://www.googleapis.com/auth/cloud-platform")
      .add("https://www.googleapis.com/auth/library")
      .build();

  private final UnaryCallSettings<MethodRequest, MethodResponse> myMethodSettings;
  private final UnaryCallSettings<MethodRequest, Namespace> getNamespaceSettings;

  /**
   * Returns the object with the settings used for calls to myMethod.
   */
  public UnaryCallSettings<MethodRequest, MethodResponse> myMethodSettings() {
    return myMethodSettings;
  }

  /**
   * Returns the object with the settings used for calls to getNamespace.
   */
  public UnaryCallSettings<MethodRequest, Namespace> getNamespaceSettings() {
    return getNamespaceSettings;
  }


  @BetaApi("A restructuring of stub classes is planned, so this may break in the future")
  public MyProtoStub createStub() throws IOException {
    if (getTransportChannelProvider()
        .getTransportName()
        .equals(GrpcTransportChannel.getGrpcTransportName())) {
      return GrpcMyProtoStub.create(this);
    } else {
      throw new UnsupportedOperationException(
          "Transport not supported: " + getTransportChannelProvider().getTransportName());
    }
  }

  /**
   * Returns a builder for the default ExecutorProvider for this service.
   */
  public static InstantiatingExecutorProvider.Builder defaultExecutorProviderBuilder() {
    return InstantiatingExecutorProvider.newBuilder();
  }

  /**
   * Returns the default service endpoint.
   */
  public static String getDefaultEndpoint() {
    return "library-example.googleapis.com:1234";
  }


  /**
   * Returns the default service scopes.
   */
  public static List<String> getDefaultServiceScopes() {
    return DEFAULT_SERVICE_SCOPES;
  }


  /**
   * Returns a builder for the default credentials for this service.
   */
  public static GoogleCredentialsProvider.Builder defaultCredentialsProviderBuilder() {
    return GoogleCredentialsProvider.newBuilder()
        .setScopesToApply(DEFAULT_SERVICE_SCOPES)
        ;
  }

  /** Returns a builder for the default ChannelProvider for this service. */
  public static InstantiatingGrpcChannelProvider.Builder defaultGrpcTransportProviderBuilder() {
    return InstantiatingGrpcChannelProvider.newBuilder()
        .setMaxInboundMessageSize(Integer.MAX_VALUE);
  }

  public static TransportChannelProvider defaultTransportChannelProvider() {
    return defaultGrpcTransportProviderBuilder().build();
  }

  @BetaApi("The surface for customizing headers is not stable yet and may change in the future.")
  public static ApiClientHeaderProvider.Builder defaultApiClientHeaderProviderBuilder() {
    return ApiClientHeaderProvider.newBuilder()
        .setGeneratedLibToken("gapic", GaxProperties.getLibraryVersion(MyProtoStubSettings.class))
        .setTransportToken(GaxGrpcProperties.getGrpcTokenName(), GaxGrpcProperties.getGrpcVersion());
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder() {
    return Builder.createDefault();
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder(ClientContext clientContext) {
    return new Builder(clientContext);
  }

  /**
   * Returns a builder containing all the values of this settings class.
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  protected MyProtoStubSettings(Builder settingsBuilder) throws IOException {
    super(settingsBuilder);

    myMethodSettings = settingsBuilder.myMethodSettings().build();
    getNamespaceSettings = settingsBuilder.getNamespaceSettings().build();
  }




  /**
   * Builder for MyProtoStubSettings.
   */
  public static class Builder extends StubSettings.Builder<MyProtoStubSettings, Builder> {
    private final ImmutableList<UnaryCallSettings.Builder<?, ?>> unaryMethodSettingsBuilders;

    private final UnaryCallSettings.Builder<MethodRequest, MethodResponse> myMethodSettings;
    private final UnaryCallSettings.Builder<MethodRequest, Namespace> getNamespaceSettings;

    private static final ImmutableMap<String, ImmutableSet<StatusCode.Code>> RETRYABLE_CODE_DEFINITIONS;

    static {
      ImmutableMap.Builder<String, ImmutableSet<StatusCode.Code>> definitions = ImmutableMap.builder();
      definitions.put(
          "no_retry_2_codes",
          ImmutableSet.copyOf(Lists.<StatusCode.Code>newArrayList()));
      definitions.put(
          "no_retry_codes",
          ImmutableSet.copyOf(Lists.<StatusCode.Code>newArrayList()));
      RETRYABLE_CODE_DEFINITIONS = definitions.build();
    }

    private static final ImmutableMap<String, RetrySettings> RETRY_PARAM_DEFINITIONS;

    static {
      ImmutableMap.Builder<String, RetrySettings> definitions = ImmutableMap.builder();
      RetrySettings settings = null;
      settings = RetrySettings.newBuilder()
          .build();
      definitions.put("no_retry_params", settings);
      settings = RetrySettings.newBuilder()
          .setTotalTimeout(Duration.ofMillis(60000L))
          .build();
      definitions.put("no_retry_2_params", settings);
      RETRY_PARAM_DEFINITIONS = definitions.build();
    }

    protected Builder() {
      this((ClientContext) null);
    }

    protected Builder(ClientContext clientContext) {
      super(clientContext);

      myMethodSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      getNamespaceSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      unaryMethodSettingsBuilders = ImmutableList.<UnaryCallSettings.Builder<?, ?>>of(
          myMethodSettings,
          getNamespaceSettings
      );

      initDefaults(this);
    }

    private static Builder createDefault() {
      Builder builder = new Builder((ClientContext) null);
      builder.setTransportChannelProvider(defaultTransportChannelProvider());
      builder.setCredentialsProvider(defaultCredentialsProviderBuilder().build());
      builder.setInternalHeaderProvider(defaultApiClientHeaderProviderBuilder().build());
      builder.setEndpoint(getDefaultEndpoint());
      return initDefaults(builder);
    }

    private static Builder initDefaults(Builder builder) {

      builder.myMethodSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("no_retry_2_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("no_retry_2_params"));

      builder.getNamespaceSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("no_retry_codes"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("no_retry_params"));

      return builder;
    }

    protected Builder(MyProtoStubSettings settings) {
      super(settings);

      myMethodSettings = settings.myMethodSettings.toBuilder();
      getNamespaceSettings = settings.getNamespaceSettings.toBuilder();

      unaryMethodSettingsBuilders = ImmutableList.<UnaryCallSettings.Builder<?, ?>>of(
          myMethodSettings,
          getNamespaceSettings
      );
    }

    // NEXT_MAJOR_VER: remove 'throws Exception'
    /**
     * Applies the given settings updater function to all of the unary API methods in this service.
     *
     * Note: This method does not support applying settings to streaming methods.
     */
    public Builder applyToAllUnaryMethods(ApiFunction<UnaryCallSettings.Builder<?, ?>, Void> settingsUpdater) throws Exception {
      super.applyToAllUnaryMethods(unaryMethodSettingsBuilders, settingsUpdater);
      return this;
    }

    public ImmutableList<UnaryCallSettings.Builder<?, ?>> unaryMethodSettingsBuilders() {
      return unaryMethodSettingsBuilders;
    }

    /**
     * Returns the builder for the settings used for calls to myMethod.
     */
    public UnaryCallSettings.Builder<MethodRequest, MethodResponse> myMethodSettings() {
      return myMethodSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getNamespace.
     */
    public UnaryCallSettings.Builder<MethodRequest, Namespace> getNamespaceSettings() {
      return getNamespaceSettings;
    }

    @Override
    public MyProtoStubSettings build() throws IOException {
      return new MyProtoStubSettings(this);
    }
  }
}
============== file: src/test/java/com/google/example/library/v1/LibraryClientTest.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1;

import com.google.api.gax.core.NoCredentialsProvider;
import com.google.api.gax.grpc.GaxGrpcProperties;
import com.google.api.gax.grpc.GrpcStatusCode;
import com.google.api.gax.grpc.testing.LocalChannelProvider;
import com.google.api.gax.grpc.testing.MockGrpcService;
import com.google.api.gax.grpc.testing.MockServiceHelper;
import com.google.api.gax.grpc.testing.MockStreamObserver;
import com.google.api.gax.rpc.ApiClientHeaderProvider;
import com.google.api.gax.rpc.ApiStreamObserver;
import com.google.api.gax.rpc.BidiStreamingCallable;
import com.google.api.gax.rpc.InvalidArgumentException;
import com.google.api.gax.rpc.ServerStreamingCallable;
import com.google.api.gax.rpc.StatusCode;
import com.google.api.resourcenames.ResourceName;
import com.google.common.collect.Lists;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.Comment;
import static com.google.example.library.v1.LibraryClient.FindRelatedBooksPagedResponse;
import static com.google.example.library.v1.LibraryClient.ListBooksPagedResponse;
import static com.google.example.library.v1.LibraryClient.ListShelvesPagedResponse;
import static com.google.example.library.v1.LibraryClient.ListStringsPagedResponse;
import com.google.example.library.v1.SomeMessage2;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest.InnerMessage;
import com.google.longrunning.Operation;
import com.google.protobuf.AbstractMessage;
import com.google.protobuf.Any;
import com.google.protobuf.BoolValue;
import com.google.protobuf.ByteString;
import com.google.protobuf.BytesValue;
import com.google.protobuf.DoubleValue;
import com.google.protobuf.Duration;
import com.google.protobuf.Empty;
import com.google.protobuf.FieldMask;
import com.google.protobuf.FloatValue;
import com.google.protobuf.Int32Value;
import com.google.protobuf.Int64Value;
import com.google.protobuf.ListValue;
import com.google.protobuf.StringValue;
import com.google.protobuf.Struct;
import com.google.protobuf.Timestamp;
import com.google.protobuf.UInt32Value;
import com.google.protobuf.UInt64Value;
import com.google.protobuf.Value;
import com.google.tagger.v1.TaggerProto.AddLabelRequest;
import com.google.tagger.v1.TaggerProto.AddLabelResponse;
import io.grpc.Status;
import io.grpc.StatusRuntimeException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.UUID;
import java.util.concurrent.ExecutionException;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

@javax.annotation.Generated("by GAPIC")
public class LibraryClientTest {
  private static MockLibraryService mockLibraryService;
  private static MockLabeler mockLabeler;
  private static MockMyProto mockMyProto;
  private static MockServiceHelper serviceHelper;
  private LibraryClient client;
  private LocalChannelProvider channelProvider;

  @BeforeClass
  public static void startStaticServer() {
    mockLibraryService = new MockLibraryService();
    mockLabeler = new MockLabeler();
    mockMyProto = new MockMyProto();
    serviceHelper = new MockServiceHelper(UUID.randomUUID().toString(), Arrays.<MockGrpcService>asList(mockLibraryService, mockLabeler, mockMyProto));
    serviceHelper.start();
  }

  @AfterClass
  public static void stopServer() {
    serviceHelper.stop();
  }

  @Before
  public void setUp() throws IOException {
    serviceHelper.reset();
    channelProvider = serviceHelper.createChannelProvider();
    LibrarySettings settings = LibrarySettings.newBuilder()
        .setTransportChannelProvider(channelProvider)
        .setCredentialsProvider(NoCredentialsProvider.create())
        .build();
    client = LibraryClient.create(settings);
  }

  @After
  public void tearDown() throws Exception {
    client.close();
  }

  @Test
  @SuppressWarnings("all")
  public void createShelfTest() {
    ShelfName name = ShelfName.of("[SHELF]");
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setName(name.toString())
      .setTheme(theme)
      .setInternalTheme(internalTheme)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    Shelf shelf = Shelf.newBuilder().build();

    Shelf actualResponse =
        client.createShelf(shelf);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    CreateShelfRequest actualRequest = (CreateShelfRequest)actualRequests.get(0);

    Assert.assertEquals(shelf, actualRequest.getShelf());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void createShelfExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      Shelf shelf = Shelf.newBuilder().build();

      client.createShelf(shelf);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfTest() {
    ShelfName name2 = ShelfName.of("[SHELF]");
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setName(name2.toString())
      .setTheme(theme)
      .setInternalTheme(internalTheme)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    ShelfName name = ShelfName.of("[SHELF]");

    Shelf actualResponse =
        client.getShelf(name);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetShelfRequest actualRequest = (GetShelfRequest)actualRequests.get(0);

    Assert.assertEquals(name, ShelfName.parse(actualRequest.getName()));
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      ShelfName name = ShelfName.of("[SHELF]");

      client.getShelf(name);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfTest2() {
    ShelfName name2 = ShelfName.of("[SHELF]");
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setName(name2.toString())
      .setTheme(theme)
      .setInternalTheme(internalTheme)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    ShelfName name = ShelfName.of("[SHELF]");
    SomeMessage message = SomeMessage.newBuilder().build();

    Shelf actualResponse =
        client.getShelf(name, message);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetShelfRequest actualRequest = (GetShelfRequest)actualRequests.get(0);

    Assert.assertEquals(name, ShelfName.parse(actualRequest.getName()));
    Assert.assertEquals(message, actualRequest.getMessage());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfExceptionTest2() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      ShelfName name = ShelfName.of("[SHELF]");
      SomeMessage message = SomeMessage.newBuilder().build();

      client.getShelf(name, message);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfTest3() {
    ShelfName name2 = ShelfName.of("[SHELF]");
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setName(name2.toString())
      .setTheme(theme)
      .setInternalTheme(internalTheme)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    ShelfName name = ShelfName.of("[SHELF]");
    SomeMessage message = SomeMessage.newBuilder().build();
    com.google.example.library.v1.StringBuilder stringBuilder = com.google.example.library.v1.StringBuilder.newBuilder().build();

    Shelf actualResponse =
        client.getShelf(name, message, stringBuilder);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetShelfRequest actualRequest = (GetShelfRequest)actualRequests.get(0);

    Assert.assertEquals(name, ShelfName.parse(actualRequest.getName()));
    Assert.assertEquals(message, actualRequest.getMessage());
    Assert.assertEquals(stringBuilder, actualRequest.getStringBuilder());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfExceptionTest3() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      ShelfName name = ShelfName.of("[SHELF]");
      SomeMessage message = SomeMessage.newBuilder().build();
      com.google.example.library.v1.StringBuilder stringBuilder = com.google.example.library.v1.StringBuilder.newBuilder().build();

      client.getShelf(name, message, stringBuilder);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void listShelvesTest() {
    String nextPageToken = "";
    Shelf shelvesElement = Shelf.newBuilder().build();
    List<Shelf> shelves = Arrays.asList(shelvesElement);
    ListShelvesResponse expectedResponse = ListShelvesResponse.newBuilder()
      .setNextPageToken(nextPageToken)
      .addAllShelves(shelves)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    ListShelvesPagedResponse pagedListResponse = client.listShelves();

    List<Shelf> resources = Lists.newArrayList(pagedListResponse.iterateAll());
    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getShelvesList().get(0), resources.get(0));

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    ListShelvesRequest actualRequest = (ListShelvesRequest)actualRequests.get(0);

    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void listShelvesExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      client.listShelves();
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void deleteShelfTest() {
    Empty expectedResponse = Empty.newBuilder().build();
    mockLibraryService.addResponse(expectedResponse);

    ShelfName name = ShelfName.of("[SHELF]");

    client.deleteShelf(name);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    DeleteShelfRequest actualRequest = (DeleteShelfRequest)actualRequests.get(0);

    Assert.assertEquals(name, ShelfName.parse(actualRequest.getName()));
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void deleteShelfExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      ShelfName name = ShelfName.of("[SHELF]");

      client.deleteShelf(name);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void mergeShelvesTest() {
    ShelfName name2 = ShelfName.of("[SHELF]");
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setName(name2.toString())
      .setTheme(theme)
      .setInternalTheme(internalTheme)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    ShelfName name = ShelfName.of("[SHELF]");
    ShelfName otherShelfName = ShelfName.of("[SHELF]");

    Shelf actualResponse =
        client.mergeShelves(name, otherShelfName);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    MergeShelvesRequest actualRequest = (MergeShelvesRequest)actualRequests.get(0);

    Assert.assertEquals(name, ShelfName.parse(actualRequest.getName()));
    Assert.assertEquals(otherShelfName, ShelfName.parse(actualRequest.getOtherShelfName()));
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void mergeShelvesExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      ShelfName name = ShelfName.of("[SHELF]");
      ShelfName otherShelfName = ShelfName.of("[SHELF]");

      client.mergeShelves(name, otherShelfName);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void createBookTest() {
    BookName name2 = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setName(name2.toString())
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    ShelfName name = ShelfName.of("[SHELF]");
    Book book = Book.newBuilder().build();

    Book actualResponse =
        client.createBook(name, book);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    CreateBookRequest actualRequest = (CreateBookRequest)actualRequests.get(0);

    Assert.assertEquals(name, ShelfName.parse(actualRequest.getName()));
    Assert.assertEquals(book, actualRequest.getBook());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void createBookExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      ShelfName name = ShelfName.of("[SHELF]");
      Book book = Book.newBuilder().build();

      client.createBook(name, book);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void publishSeriesTest() {
    String bookNamesElement = "bookNamesElement1491670575";
    List<String> bookNames = Arrays.asList(bookNamesElement);
    PublishSeriesResponse expectedResponse = PublishSeriesResponse.newBuilder()
      .addAllBookNames(bookNames)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    Shelf shelf = Shelf.newBuilder().build();
    List<Book> books = new ArrayList<>();
    int edition = 1887963714;
    String seriesString = "foobar";
    SeriesUuid seriesUuid = SeriesUuid.newBuilder()
      .setSeriesString(seriesString)
      .build();
    PublisherName publisher = PublisherName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");

    PublishSeriesResponse actualResponse =
        client.publishSeries(shelf, books, edition, seriesUuid, publisher);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    PublishSeriesRequest actualRequest = (PublishSeriesRequest)actualRequests.get(0);

    Assert.assertEquals(shelf, actualRequest.getShelf());
    Assert.assertEquals(books, actualRequest.getBooksList());
    Assert.assertEquals(edition, actualRequest.getEdition());
    Assert.assertEquals(seriesUuid, actualRequest.getSeriesUuid());
    Assert.assertEquals(publisher, PublisherName.parse(actualRequest.getPublisher()));
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void publishSeriesExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      Shelf shelf = Shelf.newBuilder().build();
      List<Book> books = new ArrayList<>();
      int edition = 1887963714;
      String seriesString = "foobar";
      SeriesUuid seriesUuid = SeriesUuid.newBuilder()
        .setSeriesString(seriesString)
        .build();
      PublisherName publisher = PublisherName.of("[PROJECT]", "[LOCATION]", "[PUBLISHER]");

      client.publishSeries(shelf, books, edition, seriesUuid, publisher);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getBookTest() {
    BookName name2 = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setName(name2.toString())
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");

    Book actualResponse =
        client.getBook(name);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetBookRequest actualRequest = (GetBookRequest)actualRequests.get(0);

    Assert.assertEquals(name, BookName.parse(actualRequest.getName()));
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void getBookExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");

      client.getBook(name);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void listBooksTest() {
    String nextPageToken = "";
    Book booksElement = Book.newBuilder().build();
    List<Book> books = Arrays.asList(booksElement);
    ListBooksResponse expectedResponse = ListBooksResponse.newBuilder()
      .setNextPageToken(nextPageToken)
      .addAllBooks(books)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    ShelfName name = ShelfName.of("[SHELF]");
    String filter = "book-filter-string";

    ListBooksPagedResponse pagedListResponse = client.listBooks(name, filter);

    List<Book> resources = Lists.newArrayList(pagedListResponse.iterateAll());
    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getBooksList().get(0), resources.get(0));

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    ListBooksRequest actualRequest = (ListBooksRequest)actualRequests.get(0);

    Assert.assertEquals(name, ShelfName.parse(actualRequest.getName()));
    Assert.assertEquals(filter, actualRequest.getFilter());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void listBooksExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      ShelfName name = ShelfName.of("[SHELF]");
      String filter = "book-filter-string";

      client.listBooks(name, filter);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void deleteBookTest() {
    Empty expectedResponse = Empty.newBuilder().build();
    mockLibraryService.addResponse(expectedResponse);

    BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");

    client.deleteBook(name);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    DeleteBookRequest actualRequest = (DeleteBookRequest)actualRequests.get(0);

    Assert.assertEquals(name, BookName.parse(actualRequest.getName()));
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void deleteBookExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");

      client.deleteBook(name);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookTest() {
    BookName name2 = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setName(name2.toString())
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    Book book = Book.newBuilder().build();

    Book actualResponse =
        client.updateBook(name, book);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    UpdateBookRequest actualRequest = (UpdateBookRequest)actualRequests.get(0);

    Assert.assertEquals(name, BookName.parse(actualRequest.getName()));
    Assert.assertEquals(book, actualRequest.getBook());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      Book book = Book.newBuilder().build();

      client.updateBook(name, book);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookTest2() {
    BookName name2 = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setName(name2.toString())
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    String optionalFoo = "optionalFoo1822578535";
    Book book = Book.newBuilder().build();
    FieldMask updateMask = FieldMask.newBuilder().build();
    com.google.example.library.v1.FieldMask physicalMask = com.google.example.library.v1.FieldMask.newBuilder().build();

    Book actualResponse =
        client.updateBook(name, optionalFoo, book, updateMask, physicalMask);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    UpdateBookRequest actualRequest = (UpdateBookRequest)actualRequests.get(0);

    Assert.assertEquals(name, BookName.parse(actualRequest.getName()));
    Assert.assertEquals(optionalFoo, actualRequest.getOptionalFoo());
    Assert.assertEquals(book, actualRequest.getBook());
    Assert.assertEquals(updateMask, actualRequest.getUpdateMask());
    Assert.assertEquals(physicalMask, actualRequest.getPhysicalMask());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookExceptionTest2() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      String optionalFoo = "optionalFoo1822578535";
      Book book = Book.newBuilder().build();
      FieldMask updateMask = FieldMask.newBuilder().build();
      com.google.example.library.v1.FieldMask physicalMask = com.google.example.library.v1.FieldMask.newBuilder().build();

      client.updateBook(name, optionalFoo, book, updateMask, physicalMask);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void moveBookTest() {
    BookName name2 = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setName(name2.toString())
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    ShelfName otherShelfName = ShelfName.of("[SHELF]");

    Book actualResponse =
        client.moveBook(name, otherShelfName);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    MoveBookRequest actualRequest = (MoveBookRequest)actualRequests.get(0);

    Assert.assertEquals(name, BookName.parse(actualRequest.getName()));
    Assert.assertEquals(otherShelfName, ShelfName.parse(actualRequest.getOtherShelfName()));
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void moveBookExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      ShelfName otherShelfName = ShelfName.of("[SHELF]");

      client.moveBook(name, otherShelfName);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void listStringsTest() {
    String nextPageToken = "";
    ResourceName stringsElement = ArchiveName.of("[ARCHIVE]");
    List<ResourceName> strings = Arrays.asList(stringsElement);
    ListStringsResponse expectedResponse = ListStringsResponse.newBuilder()
      .setNextPageToken(nextPageToken)
      .addAllStrings(UntypedResourceName.toStringList(strings))
      .build();
    mockLibraryService.addResponse(expectedResponse);

    ListStringsPagedResponse pagedListResponse = client.listStrings();

    List<String> resources = Lists.newArrayList(pagedListResponse.iterateAll());
    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getStringsList().get(0), resources.get(0));
    List<ResourceName> resourceNames = Lists.newArrayList(pagedListResponse.iterateAllAsResourceName());
    Assert.assertEquals(1, resourceNames.size());
    Assert.assertEquals(UntypedResourceName.parse(expectedResponse.getStringsList().get(0)),
        resourceNames.get(0));

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    ListStringsRequest actualRequest = (ListStringsRequest)actualRequests.get(0);

    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void listStringsExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      client.listStrings();
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void listStringsTest2() {
    String nextPageToken = "";
    ResourceName stringsElement = ArchiveName.of("[ARCHIVE]");
    List<ResourceName> strings = Arrays.asList(stringsElement);
    ListStringsResponse expectedResponse = ListStringsResponse.newBuilder()
      .setNextPageToken(nextPageToken)
      .addAllStrings(UntypedResourceName.toStringList(strings))
      .build();
    mockLibraryService.addResponse(expectedResponse);

    ResourceName name = ArchiveName.of("[ARCHIVE]");

    ListStringsPagedResponse pagedListResponse = client.listStrings(name);

    List<String> resources = Lists.newArrayList(pagedListResponse.iterateAll());
    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getStringsList().get(0), resources.get(0));
    List<ResourceName> resourceNames = Lists.newArrayList(pagedListResponse.iterateAllAsResourceName());
    Assert.assertEquals(1, resourceNames.size());
    Assert.assertEquals(UntypedResourceName.parse(expectedResponse.getStringsList().get(0)),
        resourceNames.get(0));

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    ListStringsRequest actualRequest = (ListStringsRequest)actualRequests.get(0);

    Assert.assertEquals(Objects.toString(name), Objects.toString(actualRequest.getName()));
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void listStringsExceptionTest2() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      ResourceName name = ArchiveName.of("[ARCHIVE]");

      client.listStrings(name);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void addCommentsTest() {
    Empty expectedResponse = Empty.newBuilder().build();
    mockLibraryService.addResponse(expectedResponse);

    BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    ByteString comment = ByteString.copyFromUtf8("95");
    Comment.Stage stage = Comment.Stage.UNSET;
    SomeMessage2.SomeMessage3.Alignment alignment = SomeMessage2.SomeMessage3.Alignment.CHAR;
    Comment commentsElement = Comment.newBuilder()
      .setComment(comment)
      .setStage(stage)
      .setAlignment(alignment)
      .build();
    List<Comment> comments = Arrays.asList(commentsElement);

    client.addComments(name, comments);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    AddCommentsRequest actualRequest = (AddCommentsRequest)actualRequests.get(0);

    Assert.assertEquals(name, BookName.parse(actualRequest.getName()));
    Assert.assertEquals(comments, actualRequest.getCommentsList());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void addCommentsExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      ByteString comment = ByteString.copyFromUtf8("95");
      Comment.Stage stage = Comment.Stage.UNSET;
      SomeMessage2.SomeMessage3.Alignment alignment = SomeMessage2.SomeMessage3.Alignment.CHAR;
      Comment commentsElement = Comment.newBuilder()
        .setComment(comment)
        .setStage(stage)
        .setAlignment(alignment)
        .build();
      List<Comment> comments = Arrays.asList(commentsElement);

      client.addComments(name, comments);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getBookFromArchiveTest() {
    ArchivedBookName name2 = ArchivedBookName.of("[ARCHIVE]", "[BOOK]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    BookFromArchive expectedResponse = BookFromArchive.newBuilder()
      .setName(name2.toString())
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    ArchivedBookName name = ArchivedBookName.of("[ARCHIVE]", "[BOOK]");
    ProjectName parent = ProjectName.of("[PROJECT]");

    BookFromArchive actualResponse =
        client.getBookFromArchive(name, parent);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetBookFromArchiveRequest actualRequest = (GetBookFromArchiveRequest)actualRequests.get(0);

    Assert.assertEquals(name, ArchivedBookName.parse(actualRequest.getName()));
    Assert.assertEquals(parent, ProjectName.parse(actualRequest.getParent()));
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void getBookFromArchiveExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      ArchivedBookName name = ArchivedBookName.of("[ARCHIVE]", "[BOOK]");
      ProjectName parent = ProjectName.of("[PROJECT]");

      client.getBookFromArchive(name, parent);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getBookFromAnywhereTest() {
    BookName name2 = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    BookFromAnywhere expectedResponse = BookFromAnywhere.newBuilder()
      .setName(name2.toString())
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    BookName altBookName = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    LocationName place = LocationName.of("[PROJECT]", "[LOCATION]");
    FolderName folder = FolderName.of("[FOLDER]");

    BookFromAnywhere actualResponse =
        client.getBookFromAnywhere(name, altBookName, place, folder);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetBookFromAnywhereRequest actualRequest = (GetBookFromAnywhereRequest)actualRequests.get(0);

    Assert.assertEquals(name, BookName.parse(actualRequest.getName()));
    Assert.assertEquals(altBookName, BookName.parse(actualRequest.getAltBookName()));
    Assert.assertEquals(place, LocationName.parse(actualRequest.getPlace()));
    Assert.assertEquals(folder, FolderName.parse(actualRequest.getFolder()));
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void getBookFromAnywhereExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      BookName altBookName = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      LocationName place = LocationName.of("[PROJECT]", "[LOCATION]");
      FolderName folder = FolderName.of("[FOLDER]");

      client.getBookFromAnywhere(name, altBookName, place, folder);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getBookFromAbsolutelyAnywhereTest() {
    BookName name2 = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    BookFromAnywhere expectedResponse = BookFromAnywhere.newBuilder()
      .setName(name2.toString())
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");

    BookFromAnywhere actualResponse =
        client.getBookFromAbsolutelyAnywhere(name);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetBookFromAbsolutelyAnywhereRequest actualRequest = (GetBookFromAbsolutelyAnywhereRequest)actualRequests.get(0);

    Assert.assertEquals(name, BookName.parse(actualRequest.getName()));
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void getBookFromAbsolutelyAnywhereExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");

      client.getBookFromAbsolutelyAnywhere(name);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookIndexTest() {
    Empty expectedResponse = Empty.newBuilder().build();
    mockLibraryService.addResponse(expectedResponse);

    BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    String indexName = "default index";
    String indexMapItem = "indexMapItem1918721251";
    Map<String, String> indexMap = new HashMap<>();
    indexMap.put("default_key", indexMapItem);

    client.updateBookIndex(name, indexName, indexMap);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    UpdateBookIndexRequest actualRequest = (UpdateBookIndexRequest)actualRequests.get(0);

    Assert.assertEquals(name, BookName.parse(actualRequest.getName()));
    Assert.assertEquals(indexName, actualRequest.getIndexName());
    Assert.assertEquals(indexMap, actualRequest.getIndexMapMap());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookIndexExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      String indexName = "default index";
      String indexMapItem = "indexMapItem1918721251";
      Map<String, String> indexMap = new HashMap<>();
      indexMap.put("default_key", indexMapItem);

      client.updateBookIndex(name, indexName, indexMap);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void streamShelvesTest() throws Exception {
    Shelf shelvesElement = Shelf.newBuilder().build();
    List<Shelf> shelves = Arrays.asList(shelvesElement);
    StreamShelvesResponse expectedResponse = StreamShelvesResponse.newBuilder()
      .addAllShelves(shelves)
      .build();
    mockLibraryService.addResponse(expectedResponse);
    ShelfName name = ShelfName.of("[SHELF]");
    StreamShelvesRequest request = StreamShelvesRequest.newBuilder()
      .setName(name.toString())
      .build();

    MockStreamObserver<StreamShelvesResponse> responseObserver = new MockStreamObserver<>();

    ServerStreamingCallable<StreamShelvesRequest, StreamShelvesResponse> callable =
        client.streamShelvesCallable();
    callable.serverStreamingCall(request, responseObserver);

    List<StreamShelvesResponse> actualResponses = responseObserver.future().get();
    Assert.assertEquals(1, actualResponses.size());
    Assert.assertEquals(expectedResponse, actualResponses.get(0));
  }

  @Test
  @SuppressWarnings("all")
  public void streamShelvesExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);
    ShelfName name = ShelfName.of("[SHELF]");
    StreamShelvesRequest request = StreamShelvesRequest.newBuilder()
      .setName(name.toString())
      .build();

    MockStreamObserver<StreamShelvesResponse> responseObserver = new MockStreamObserver<>();

    ServerStreamingCallable<StreamShelvesRequest, StreamShelvesResponse> callable =
        client.streamShelvesCallable();
    callable.serverStreamingCall(request, responseObserver);

    try {
      List<StreamShelvesResponse> actualResponses = responseObserver.future().get();
      Assert.fail("No exception thrown");
    } catch (ExecutionException e) {
      Assert.assertTrue(e.getCause() instanceof InvalidArgumentException);
      InvalidArgumentException apiException = (InvalidArgumentException) e.getCause();
      Assert.assertEquals(StatusCode.Code.INVALID_ARGUMENT, apiException.getStatusCode().getCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void streamBooksTest() throws Exception {
    BookName name2 = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setName(name2.toString())
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    mockLibraryService.addResponse(expectedResponse);
    String name = "name3373707";
    StreamBooksRequest request = StreamBooksRequest.newBuilder()
      .setName(name)
      .build();

    MockStreamObserver<Book> responseObserver = new MockStreamObserver<>();

    ServerStreamingCallable<StreamBooksRequest, Book> callable =
        client.streamBooksCallable();
    callable.serverStreamingCall(request, responseObserver);

    List<Book> actualResponses = responseObserver.future().get();
    Assert.assertEquals(1, actualResponses.size());
    Assert.assertEquals(expectedResponse, actualResponses.get(0));
  }

  @Test
  @SuppressWarnings("all")
  public void streamBooksExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);
    String name = "name3373707";
    StreamBooksRequest request = StreamBooksRequest.newBuilder()
      .setName(name)
      .build();

    MockStreamObserver<Book> responseObserver = new MockStreamObserver<>();

    ServerStreamingCallable<StreamBooksRequest, Book> callable =
        client.streamBooksCallable();
    callable.serverStreamingCall(request, responseObserver);

    try {
      List<Book> actualResponses = responseObserver.future().get();
      Assert.fail("No exception thrown");
    } catch (ExecutionException e) {
      Assert.assertTrue(e.getCause() instanceof InvalidArgumentException);
      InvalidArgumentException apiException = (InvalidArgumentException) e.getCause();
      Assert.assertEquals(StatusCode.Code.INVALID_ARGUMENT, apiException.getStatusCode().getCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void discussBookTest() throws Exception {
    String userName = "userName339340927";
    ByteString comment = ByteString.copyFromUtf8("95");
    Comment expectedResponse = Comment.newBuilder()
      .setUserName(userName)
      .setComment(comment)
      .build();
    mockLibraryService.addResponse(expectedResponse);
    BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    DiscussBookRequest request = DiscussBookRequest.newBuilder()
      .setName(name.toString())
      .build();

    MockStreamObserver<Comment> responseObserver = new MockStreamObserver<>();

    BidiStreamingCallable<DiscussBookRequest, Comment> callable =
        client.discussBookCallable();
    ApiStreamObserver<DiscussBookRequest> requestObserver =
        callable.bidiStreamingCall(responseObserver);

    requestObserver.onNext(request);
    requestObserver.onCompleted();

    List<Comment> actualResponses = responseObserver.future().get();
    Assert.assertEquals(1, actualResponses.size());
    Assert.assertEquals(expectedResponse, actualResponses.get(0));
  }

  @Test
  @SuppressWarnings("all")
  public void discussBookExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);
    BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    DiscussBookRequest request = DiscussBookRequest.newBuilder()
      .setName(name.toString())
      .build();

    MockStreamObserver<Comment> responseObserver = new MockStreamObserver<>();

    BidiStreamingCallable<DiscussBookRequest, Comment> callable =
        client.discussBookCallable();
    ApiStreamObserver<DiscussBookRequest> requestObserver =
        callable.bidiStreamingCall(responseObserver);

    requestObserver.onNext(request);

    try {
      List<Comment> actualResponses = responseObserver.future().get();
      Assert.fail("No exception thrown");
    } catch (ExecutionException e) {
      Assert.assertTrue(e.getCause() instanceof InvalidArgumentException);
      InvalidArgumentException apiException = (InvalidArgumentException) e.getCause();
      Assert.assertEquals(StatusCode.Code.INVALID_ARGUMENT, apiException.getStatusCode().getCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void findRelatedBooksTest() {
    String nextPageToken = "";
    BookName namesElement2 = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    List<BookName> names2 = Arrays.asList(namesElement2);
    FindRelatedBooksResponse expectedResponse = FindRelatedBooksResponse.newBuilder()
      .setNextPageToken(nextPageToken)
      .addAllNames(BookName.toStringList(names2))
      .build();
    mockLibraryService.addResponse(expectedResponse);

    String namesElement = "namesElement-249113339";
    List<String> names = Arrays.asList(namesElement);
    List<String> formattedShelves = new ArrayList<>();

    FindRelatedBooksPagedResponse pagedListResponse = client.findRelatedBooks(formattedNames, formattedShelves);

    List<String> resources = Lists.newArrayList(pagedListResponse.iterateAll());
    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getNamesList().get(0), resources.get(0));
    List<BookName> resourceNames = Lists.newArrayList(pagedListResponse.iterateAllAsBookName());
    Assert.assertEquals(1, resourceNames.size());
    Assert.assertEquals(BookName.parse(expectedResponse.getNamesList().get(0)),
        resourceNames.get(0));

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    FindRelatedBooksRequest actualRequest = (FindRelatedBooksRequest)actualRequests.get(0);

    Assert.assertEquals(formattedNames, actualRequest.getNamesList());
    Assert.assertEquals(formattedShelves, actualRequest.getShelvesList());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void findRelatedBooksExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      String namesElement = "namesElement-249113339";
      List<String> names = Arrays.asList(namesElement);
      List<String> formattedShelves = new ArrayList<>();

      client.findRelatedBooks(formattedNames, formattedShelves);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void addLabelTest() {
    AddLabelResponse expectedResponse = AddLabelResponse.newBuilder().build();
    mockLabeler.addResponse(expectedResponse);

    BookName resource = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    String label = "label102727412";
    AddLabelRequest request = AddLabelRequest.newBuilder()
      .setResource(resource.toString())
      .setLabel(label)
      .build();

    AddLabelResponse actualResponse =
        client.addLabel(request);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockLabeler.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    AddLabelRequest actualRequest = (AddLabelRequest)actualRequests.get(0);

    Assert.assertEquals(resource, BookName.parse(actualRequest.getResource()));
    Assert.assertEquals(label, actualRequest.getLabel());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void addLabelExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLabeler.addException(exception);

    try {
      BookName resource = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      String label = "label102727412";
      AddLabelRequest request = AddLabelRequest.newBuilder()
        .setResource(resource.toString())
        .setLabel(label)
        .build();

      client.addLabel(request);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getBigBookTest() throws Exception {
    BookName name2 = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setName(name2.toString())
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    Operation resultOperation =
        Operation.newBuilder()
            .setName("getBigBookTest")
            .setDone(true)
            .setResponse(Any.pack(expectedResponse))
            .build();
    mockLibraryService.addResponse(resultOperation);

    BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");

    Book actualResponse =
        client.getBigBookAsync(name).get();
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetBookRequest actualRequest = (GetBookRequest)actualRequests.get(0);

    Assert.assertEquals(name, BookName.parse(actualRequest.getName()));
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void getBigBookExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");

      client.getBigBookAsync(name).get();
      Assert.fail("No exception raised");
    } catch (ExecutionException e) {
      Assert.assertEquals(InvalidArgumentException.class, e.getCause().getClass());
      InvalidArgumentException apiException = (InvalidArgumentException) e.getCause();
      Assert.assertEquals(StatusCode.Code.INVALID_ARGUMENT, apiException.getStatusCode().getCode());
    }
  }


  @Test
  @SuppressWarnings("all")
  public void getBigNothingTest() throws Exception {
    Empty expectedResponse = Empty.newBuilder().build();
    Operation resultOperation =
        Operation.newBuilder()
            .setName("getBigNothingTest")
            .setDone(true)
            .setResponse(Any.pack(expectedResponse))
            .build();
    mockLibraryService.addResponse(resultOperation);

    BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");

    Empty actualResponse =
        client.getBigNothingAsync(name).get();
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetBookRequest actualRequest = (GetBookRequest)actualRequests.get(0);

    Assert.assertEquals(name, BookName.parse(actualRequest.getName()));
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void getBigNothingExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");

      client.getBigNothingAsync(name).get();
      Assert.fail("No exception raised");
    } catch (ExecutionException e) {
      Assert.assertEquals(InvalidArgumentException.class, e.getCause().getClass());
      InvalidArgumentException apiException = (InvalidArgumentException) e.getCause();
      Assert.assertEquals(StatusCode.Code.INVALID_ARGUMENT, apiException.getStatusCode().getCode());
    }
  }


  @Test
  @SuppressWarnings("all")
  public void testOptionalRequiredFlatteningParamsTest() {
    TestOptionalRequiredFlatteningParamsResponse expectedResponse = TestOptionalRequiredFlatteningParamsResponse.newBuilder().build();
    mockLibraryService.addResponse(expectedResponse);

    TestOptionalRequiredFlatteningParamsResponse actualResponse =
        client.testOptionalRequiredFlatteningParams();
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    TestOptionalRequiredFlatteningParamsRequest actualRequest = (TestOptionalRequiredFlatteningParamsRequest)actualRequests.get(0);

    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void testOptionalRequiredFlatteningParamsExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      client.testOptionalRequiredFlatteningParams();
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void testOptionalRequiredFlatteningParamsTest2() {
    TestOptionalRequiredFlatteningParamsResponse expectedResponse = TestOptionalRequiredFlatteningParamsResponse.newBuilder().build();
    mockLibraryService.addResponse(expectedResponse);

    int requiredSingularInt32 = 72313594;
    long requiredSingularInt64 = 72313499L;
    float requiredSingularFloat = -7514705.0F;
    double requiredSingularDouble = 1.9111005E8;
    boolean requiredSingularBool = true;
    TestOptionalRequiredFlatteningParamsRequest.InnerEnum requiredSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
    String requiredSingularString = "requiredSingularString-1949894503";
    ByteString requiredSingularBytes = ByteString.copyFromUtf8("-29");
    TestOptionalRequiredFlatteningParamsRequest.InnerMessage requiredSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
    BookName requiredSingularResourceName = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    BookName requiredSingularResourceNameOneof = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    String requiredSingularResourceNameCommon = "requiredSingularResourceNameCommon-1126805002";
    int requiredSingularFixed32 = 720656715;
    long requiredSingularFixed64 = 720656810;
    List<Integer> requiredRepeatedInt32 = new ArrayList<>();
    List<Long> requiredRepeatedInt64 = new ArrayList<>();
    List<Float> requiredRepeatedFloat = new ArrayList<>();
    List<Double> requiredRepeatedDouble = new ArrayList<>();
    List<Boolean> requiredRepeatedBool = new ArrayList<>();
    List<TestOptionalRequiredFlatteningParamsRequest.InnerEnum> requiredRepeatedEnum = new ArrayList<>();
    List<String> requiredRepeatedString = new ArrayList<>();
    List<ByteString> requiredRepeatedBytes = new ArrayList<>();
    List<TestOptionalRequiredFlatteningParamsRequest.InnerMessage> requiredRepeatedMessage = new ArrayList<>();
    List<String> formattedRequiredRepeatedResourceName = new ArrayList<>();
    List<String> formattedRequiredRepeatedResourceNameOneof = new ArrayList<>();
    List<String> requiredRepeatedResourceNameCommon = new ArrayList<>();
    List<Integer> requiredRepeatedFixed32 = new ArrayList<>();
    List<Long> requiredRepeatedFixed64 = new ArrayList<>();
    Map<Integer, String> requiredMap = new HashMap<>();
    Any requiredAnyValue = Any.newBuilder().build();
    Struct requiredStructValue = Struct.newBuilder().build();
    Value requiredValueValue = Value.newBuilder().build();
    ListValue requiredListValueValue = ListValue.newBuilder().build();
    Timestamp requiredTimeValue = Timestamp.newBuilder().build();
    Duration requiredDurationValue = Duration.newBuilder().build();
    FieldMask requiredFieldMaskValue = FieldMask.newBuilder().build();
    Int32Value requiredInt32Value = Int32Value.newBuilder().build();
    UInt32Value requiredUint32Value = UInt32Value.newBuilder().build();
    Int64Value requiredInt64Value = Int64Value.newBuilder().build();
    UInt64Value requiredUint64Value = UInt64Value.newBuilder().build();
    FloatValue requiredFloatValue = FloatValue.newBuilder().build();
    DoubleValue requiredDoubleValue = DoubleValue.newBuilder().build();
    StringValue requiredStringValue = StringValue.newBuilder().build();
    BoolValue requiredBoolValue = BoolValue.newBuilder().build();
    BytesValue requiredBytesValue = BytesValue.newBuilder().build();
    List<Any> requiredRepeatedAnyValue = new ArrayList<>();
    List<Struct> requiredRepeatedStructValue = new ArrayList<>();
    List<Value> requiredRepeatedValueValue = new ArrayList<>();
    List<ListValue> requiredRepeatedListValueValue = new ArrayList<>();
    List<Timestamp> requiredRepeatedTimeValue = new ArrayList<>();
    List<Duration> requiredRepeatedDurationValue = new ArrayList<>();
    List<FieldMask> requiredRepeatedFieldMaskValue = new ArrayList<>();
    List<Int32Value> requiredRepeatedInt32Value = new ArrayList<>();
    List<UInt32Value> requiredRepeatedUint32Value = new ArrayList<>();
    List<Int64Value> requiredRepeatedInt64Value = new ArrayList<>();
    List<UInt64Value> requiredRepeatedUint64Value = new ArrayList<>();
    List<FloatValue> requiredRepeatedFloatValue = new ArrayList<>();
    List<DoubleValue> requiredRepeatedDoubleValue = new ArrayList<>();
    List<StringValue> requiredRepeatedStringValue = new ArrayList<>();
    List<BoolValue> requiredRepeatedBoolValue = new ArrayList<>();
    List<BytesValue> requiredRepeatedBytesValue = new ArrayList<>();
    int optionalSingularInt32 = 1196565723;
    long optionalSingularInt64 = 1196565628L;
    float optionalSingularFloat = -1.19939918E8F;
    double optionalSingularDouble = 1.41902287E8;
    boolean optionalSingularBool = false;
    TestOptionalRequiredFlatteningParamsRequest.InnerEnum optionalSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
    String optionalSingularString = "optionalSingularString1852995162";
    ByteString optionalSingularBytes = ByteString.copyFromUtf8("2");
    TestOptionalRequiredFlatteningParamsRequest.InnerMessage optionalSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
    BookName optionalSingularResourceName = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    BookName optionalSingularResourceNameOneof = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    String optionalSingularResourceNameCommon = "optionalSingularResourceNameCommon-108123657";
    int optionalSingularFixed32 = 1648847958;
    long optionalSingularFixed64 = 1648847863;
    List<Integer> optionalRepeatedInt32 = new ArrayList<>();
    List<Long> optionalRepeatedInt64 = new ArrayList<>();
    List<Float> optionalRepeatedFloat = new ArrayList<>();
    List<Double> optionalRepeatedDouble = new ArrayList<>();
    List<Boolean> optionalRepeatedBool = new ArrayList<>();
    List<TestOptionalRequiredFlatteningParamsRequest.InnerEnum> optionalRepeatedEnum = new ArrayList<>();
    List<String> optionalRepeatedString = new ArrayList<>();
    List<ByteString> optionalRepeatedBytes = new ArrayList<>();
    List<TestOptionalRequiredFlatteningParamsRequest.InnerMessage> optionalRepeatedMessage = new ArrayList<>();
    List<String> formattedOptionalRepeatedResourceName = new ArrayList<>();
    List<String> formattedOptionalRepeatedResourceNameOneof = new ArrayList<>();
    List<String> optionalRepeatedResourceNameCommon = new ArrayList<>();
    List<Integer> optionalRepeatedFixed32 = new ArrayList<>();
    List<Long> optionalRepeatedFixed64 = new ArrayList<>();
    Map<Integer, String> optionalMap = new HashMap<>();
    Any anyValue = Any.newBuilder().build();
    Struct structValue = Struct.newBuilder().build();
    Value valueValue = Value.newBuilder().build();
    ListValue listValueValue = ListValue.newBuilder().build();
    Timestamp timeValue = Timestamp.newBuilder().build();
    Duration durationValue = Duration.newBuilder().build();
    FieldMask fieldMaskValue = FieldMask.newBuilder().build();
    Int32Value int32Value = Int32Value.newBuilder().build();
    UInt32Value uint32Value = UInt32Value.newBuilder().build();
    Int64Value int64Value = Int64Value.newBuilder().build();
    UInt64Value uint64Value = UInt64Value.newBuilder().build();
    FloatValue floatValue = FloatValue.newBuilder().build();
    DoubleValue doubleValue = DoubleValue.newBuilder().build();
    StringValue stringValue = StringValue.newBuilder().build();
    BoolValue boolValue = BoolValue.newBuilder().build();
    BytesValue bytesValue = BytesValue.newBuilder().build();
    List<Any> repeatedAnyValue = new ArrayList<>();
    List<Struct> repeatedStructValue = new ArrayList<>();
    List<Value> repeatedValueValue = new ArrayList<>();
    List<ListValue> repeatedListValueValue = new ArrayList<>();
    List<Timestamp> repeatedTimeValue = new ArrayList<>();
    List<Duration> repeatedDurationValue = new ArrayList<>();
    List<FieldMask> repeatedFieldMaskValue = new ArrayList<>();
    List<Int32Value> repeatedInt32Value = new ArrayList<>();
    List<UInt32Value> repeatedUint32Value = new ArrayList<>();
    List<Int64Value> repeatedInt64Value = new ArrayList<>();
    List<UInt64Value> repeatedUint64Value = new ArrayList<>();
    List<FloatValue> repeatedFloatValue = new ArrayList<>();
    List<DoubleValue> repeatedDoubleValue = new ArrayList<>();
    List<StringValue> repeatedStringValue = new ArrayList<>();
    List<BoolValue> repeatedBoolValue = new ArrayList<>();
    List<BytesValue> repeatedBytesValue = new ArrayList<>();

    TestOptionalRequiredFlatteningParamsResponse actualResponse =
        client.testOptionalRequiredFlatteningParams(requiredSingularInt32, requiredSingularInt64, requiredSingularFloat, requiredSingularDouble, requiredSingularBool, requiredSingularEnum, requiredSingularString, requiredSingularBytes, requiredSingularMessage, requiredSingularResourceName, requiredSingularResourceNameOneof, requiredSingularResourceNameCommon, requiredSingularFixed32, requiredSingularFixed64, requiredRepeatedInt32, requiredRepeatedInt64, requiredRepeatedFloat, requiredRepeatedDouble, requiredRepeatedBool, requiredRepeatedEnum, requiredRepeatedString, requiredRepeatedBytes, requiredRepeatedMessage, formattedRequiredRepeatedResourceName, formattedRequiredRepeatedResourceNameOneof, requiredRepeatedResourceNameCommon, requiredRepeatedFixed32, requiredRepeatedFixed64, requiredMap, requiredAnyValue, requiredStructValue, requiredValueValue, requiredListValueValue, requiredTimeValue, requiredDurationValue, requiredFieldMaskValue, requiredInt32Value, requiredUint32Value, requiredInt64Value, requiredUint64Value, requiredFloatValue, requiredDoubleValue, requiredStringValue, requiredBoolValue, requiredBytesValue, requiredRepeatedAnyValue, requiredRepeatedStructValue, requiredRepeatedValueValue, requiredRepeatedListValueValue, requiredRepeatedTimeValue, requiredRepeatedDurationValue, requiredRepeatedFieldMaskValue, requiredRepeatedInt32Value, requiredRepeatedUint32Value, requiredRepeatedInt64Value, requiredRepeatedUint64Value, requiredRepeatedFloatValue, requiredRepeatedDoubleValue, requiredRepeatedStringValue, requiredRepeatedBoolValue, requiredRepeatedBytesValue, optionalSingularInt32, optionalSingularInt64, optionalSingularFloat, optionalSingularDouble, optionalSingularBool, optionalSingularEnum, optionalSingularString, optionalSingularBytes, optionalSingularMessage, optionalSingularResourceName, optionalSingularResourceNameOneof, optionalSingularResourceNameCommon, optionalSingularFixed32, optionalSingularFixed64, optionalRepeatedInt32, optionalRepeatedInt64, optionalRepeatedFloat, optionalRepeatedDouble, optionalRepeatedBool, optionalRepeatedEnum, optionalRepeatedString, optionalRepeatedBytes, optionalRepeatedMessage, formattedOptionalRepeatedResourceName, formattedOptionalRepeatedResourceNameOneof, optionalRepeatedResourceNameCommon, optionalRepeatedFixed32, optionalRepeatedFixed64, optionalMap, anyValue, structValue, valueValue, listValueValue, timeValue, durationValue, fieldMaskValue, int32Value, uint32Value, int64Value, uint64Value, floatValue, doubleValue, stringValue, boolValue, bytesValue, repeatedAnyValue, repeatedStructValue, repeatedValueValue, repeatedListValueValue, repeatedTimeValue, repeatedDurationValue, repeatedFieldMaskValue, repeatedInt32Value, repeatedUint32Value, repeatedInt64Value, repeatedUint64Value, repeatedFloatValue, repeatedDoubleValue, repeatedStringValue, repeatedBoolValue, repeatedBytesValue);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    TestOptionalRequiredFlatteningParamsRequest actualRequest = (TestOptionalRequiredFlatteningParamsRequest)actualRequests.get(0);

    Assert.assertEquals(requiredSingularInt32, actualRequest.getRequiredSingularInt32());
    Assert.assertEquals(requiredSingularInt64, actualRequest.getRequiredSingularInt64());
    Assert.assertEquals(requiredSingularFloat, actualRequest.getRequiredSingularFloat(), 0.001);
    Assert.assertEquals(requiredSingularDouble, actualRequest.getRequiredSingularDouble(), 0.001);
    Assert.assertEquals(requiredSingularBool, actualRequest.getRequiredSingularBool());
    Assert.assertEquals(requiredSingularEnum, actualRequest.getRequiredSingularEnum());
    Assert.assertEquals(requiredSingularString, actualRequest.getRequiredSingularString());
    Assert.assertEquals(requiredSingularBytes, actualRequest.getRequiredSingularBytes());
    Assert.assertEquals(requiredSingularMessage, actualRequest.getRequiredSingularMessage());
    Assert.assertEquals(requiredSingularResourceName, BookName.parse(actualRequest.getRequiredSingularResourceName()));
    Assert.assertEquals(requiredSingularResourceNameOneof, BookName.parse(actualRequest.getRequiredSingularResourceNameOneof()));
    Assert.assertEquals(requiredSingularResourceNameCommon, actualRequest.getRequiredSingularResourceNameCommon());
    Assert.assertEquals(requiredSingularFixed32, actualRequest.getRequiredSingularFixed32());
    Assert.assertEquals(requiredSingularFixed64, actualRequest.getRequiredSingularFixed64());
    Assert.assertEquals(requiredRepeatedInt32, actualRequest.getRequiredRepeatedInt32List());
    Assert.assertEquals(requiredRepeatedInt64, actualRequest.getRequiredRepeatedInt64List());
    Assert.assertEquals(requiredRepeatedFloat, actualRequest.getRequiredRepeatedFloatList());
    Assert.assertEquals(requiredRepeatedDouble, actualRequest.getRequiredRepeatedDoubleList());
    Assert.assertEquals(requiredRepeatedBool, actualRequest.getRequiredRepeatedBoolList());
    Assert.assertEquals(requiredRepeatedEnum, actualRequest.getRequiredRepeatedEnumList());
    Assert.assertEquals(requiredRepeatedString, actualRequest.getRequiredRepeatedStringList());
    Assert.assertEquals(requiredRepeatedBytes, actualRequest.getRequiredRepeatedBytesList());
    Assert.assertEquals(requiredRepeatedMessage, actualRequest.getRequiredRepeatedMessageList());
    Assert.assertEquals(formattedRequiredRepeatedResourceName, actualRequest.getRequiredRepeatedResourceNameList());
    Assert.assertEquals(formattedRequiredRepeatedResourceNameOneof, actualRequest.getRequiredRepeatedResourceNameOneofList());
    Assert.assertEquals(requiredRepeatedResourceNameCommon, actualRequest.getRequiredRepeatedResourceNameCommonList());
    Assert.assertEquals(requiredRepeatedFixed32, actualRequest.getRequiredRepeatedFixed32List());
    Assert.assertEquals(requiredRepeatedFixed64, actualRequest.getRequiredRepeatedFixed64List());
    Assert.assertEquals(requiredMap, actualRequest.getRequiredMapMap());
    Assert.assertEquals(requiredAnyValue, actualRequest.getRequiredAnyValue());
    Assert.assertEquals(requiredStructValue, actualRequest.getRequiredStructValue());
    Assert.assertEquals(requiredValueValue, actualRequest.getRequiredValueValue());
    Assert.assertEquals(requiredListValueValue, actualRequest.getRequiredListValueValue());
    Assert.assertEquals(requiredTimeValue, actualRequest.getRequiredTimeValue());
    Assert.assertEquals(requiredDurationValue, actualRequest.getRequiredDurationValue());
    Assert.assertEquals(requiredFieldMaskValue, actualRequest.getRequiredFieldMaskValue());
    Assert.assertEquals(requiredInt32Value, actualRequest.getRequiredInt32Value());
    Assert.assertEquals(requiredUint32Value, actualRequest.getRequiredUint32Value());
    Assert.assertEquals(requiredInt64Value, actualRequest.getRequiredInt64Value());
    Assert.assertEquals(requiredUint64Value, actualRequest.getRequiredUint64Value());
    Assert.assertEquals(requiredFloatValue, actualRequest.getRequiredFloatValue());
    Assert.assertEquals(requiredDoubleValue, actualRequest.getRequiredDoubleValue());
    Assert.assertEquals(requiredStringValue, actualRequest.getRequiredStringValue());
    Assert.assertEquals(requiredBoolValue, actualRequest.getRequiredBoolValue());
    Assert.assertEquals(requiredBytesValue, actualRequest.getRequiredBytesValue());
    Assert.assertEquals(requiredRepeatedAnyValue, actualRequest.getRequiredRepeatedAnyValueList());
    Assert.assertEquals(requiredRepeatedStructValue, actualRequest.getRequiredRepeatedStructValueList());
    Assert.assertEquals(requiredRepeatedValueValue, actualRequest.getRequiredRepeatedValueValueList());
    Assert.assertEquals(requiredRepeatedListValueValue, actualRequest.getRequiredRepeatedListValueValueList());
    Assert.assertEquals(requiredRepeatedTimeValue, actualRequest.getRequiredRepeatedTimeValueList());
    Assert.assertEquals(requiredRepeatedDurationValue, actualRequest.getRequiredRepeatedDurationValueList());
    Assert.assertEquals(requiredRepeatedFieldMaskValue, actualRequest.getRequiredRepeatedFieldMaskValueList());
    Assert.assertEquals(requiredRepeatedInt32Value, actualRequest.getRequiredRepeatedInt32ValueList());
    Assert.assertEquals(requiredRepeatedUint32Value, actualRequest.getRequiredRepeatedUint32ValueList());
    Assert.assertEquals(requiredRepeatedInt64Value, actualRequest.getRequiredRepeatedInt64ValueList());
    Assert.assertEquals(requiredRepeatedUint64Value, actualRequest.getRequiredRepeatedUint64ValueList());
    Assert.assertEquals(requiredRepeatedFloatValue, actualRequest.getRequiredRepeatedFloatValueList());
    Assert.assertEquals(requiredRepeatedDoubleValue, actualRequest.getRequiredRepeatedDoubleValueList());
    Assert.assertEquals(requiredRepeatedStringValue, actualRequest.getRequiredRepeatedStringValueList());
    Assert.assertEquals(requiredRepeatedBoolValue, actualRequest.getRequiredRepeatedBoolValueList());
    Assert.assertEquals(requiredRepeatedBytesValue, actualRequest.getRequiredRepeatedBytesValueList());
    Assert.assertEquals(optionalSingularInt32, actualRequest.getOptionalSingularInt32());
    Assert.assertEquals(optionalSingularInt64, actualRequest.getOptionalSingularInt64());
    Assert.assertEquals(optionalSingularFloat, actualRequest.getOptionalSingularFloat(), 0.001);
    Assert.assertEquals(optionalSingularDouble, actualRequest.getOptionalSingularDouble(), 0.001);
    Assert.assertEquals(optionalSingularBool, actualRequest.getOptionalSingularBool());
    Assert.assertEquals(optionalSingularEnum, actualRequest.getOptionalSingularEnum());
    Assert.assertEquals(optionalSingularString, actualRequest.getOptionalSingularString());
    Assert.assertEquals(optionalSingularBytes, actualRequest.getOptionalSingularBytes());
    Assert.assertEquals(optionalSingularMessage, actualRequest.getOptionalSingularMessage());
    Assert.assertEquals(optionalSingularResourceName, BookName.parse(actualRequest.getOptionalSingularResourceName()));
    Assert.assertEquals(optionalSingularResourceNameOneof, BookName.parse(actualRequest.getOptionalSingularResourceNameOneof()));
    Assert.assertEquals(optionalSingularResourceNameCommon, actualRequest.getOptionalSingularResourceNameCommon());
    Assert.assertEquals(optionalSingularFixed32, actualRequest.getOptionalSingularFixed32());
    Assert.assertEquals(optionalSingularFixed64, actualRequest.getOptionalSingularFixed64());
    Assert.assertEquals(optionalRepeatedInt32, actualRequest.getOptionalRepeatedInt32List());
    Assert.assertEquals(optionalRepeatedInt64, actualRequest.getOptionalRepeatedInt64List());
    Assert.assertEquals(optionalRepeatedFloat, actualRequest.getOptionalRepeatedFloatList());
    Assert.assertEquals(optionalRepeatedDouble, actualRequest.getOptionalRepeatedDoubleList());
    Assert.assertEquals(optionalRepeatedBool, actualRequest.getOptionalRepeatedBoolList());
    Assert.assertEquals(optionalRepeatedEnum, actualRequest.getOptionalRepeatedEnumList());
    Assert.assertEquals(optionalRepeatedString, actualRequest.getOptionalRepeatedStringList());
    Assert.assertEquals(optionalRepeatedBytes, actualRequest.getOptionalRepeatedBytesList());
    Assert.assertEquals(optionalRepeatedMessage, actualRequest.getOptionalRepeatedMessageList());
    Assert.assertEquals(formattedOptionalRepeatedResourceName, actualRequest.getOptionalRepeatedResourceNameList());
    Assert.assertEquals(formattedOptionalRepeatedResourceNameOneof, actualRequest.getOptionalRepeatedResourceNameOneofList());
    Assert.assertEquals(optionalRepeatedResourceNameCommon, actualRequest.getOptionalRepeatedResourceNameCommonList());
    Assert.assertEquals(optionalRepeatedFixed32, actualRequest.getOptionalRepeatedFixed32List());
    Assert.assertEquals(optionalRepeatedFixed64, actualRequest.getOptionalRepeatedFixed64List());
    Assert.assertEquals(optionalMap, actualRequest.getOptionalMapMap());
    Assert.assertEquals(anyValue, actualRequest.getAnyValue());
    Assert.assertEquals(structValue, actualRequest.getStructValue());
    Assert.assertEquals(valueValue, actualRequest.getValueValue());
    Assert.assertEquals(listValueValue, actualRequest.getListValueValue());
    Assert.assertEquals(timeValue, actualRequest.getTimeValue());
    Assert.assertEquals(durationValue, actualRequest.getDurationValue());
    Assert.assertEquals(fieldMaskValue, actualRequest.getFieldMaskValue());
    Assert.assertEquals(int32Value, actualRequest.getInt32Value());
    Assert.assertEquals(uint32Value, actualRequest.getUint32Value());
    Assert.assertEquals(int64Value, actualRequest.getInt64Value());
    Assert.assertEquals(uint64Value, actualRequest.getUint64Value());
    Assert.assertEquals(floatValue, actualRequest.getFloatValue());
    Assert.assertEquals(doubleValue, actualRequest.getDoubleValue());
    Assert.assertEquals(stringValue, actualRequest.getStringValue());
    Assert.assertEquals(boolValue, actualRequest.getBoolValue());
    Assert.assertEquals(bytesValue, actualRequest.getBytesValue());
    Assert.assertEquals(repeatedAnyValue, actualRequest.getRepeatedAnyValueList());
    Assert.assertEquals(repeatedStructValue, actualRequest.getRepeatedStructValueList());
    Assert.assertEquals(repeatedValueValue, actualRequest.getRepeatedValueValueList());
    Assert.assertEquals(repeatedListValueValue, actualRequest.getRepeatedListValueValueList());
    Assert.assertEquals(repeatedTimeValue, actualRequest.getRepeatedTimeValueList());
    Assert.assertEquals(repeatedDurationValue, actualRequest.getRepeatedDurationValueList());
    Assert.assertEquals(repeatedFieldMaskValue, actualRequest.getRepeatedFieldMaskValueList());
    Assert.assertEquals(repeatedInt32Value, actualRequest.getRepeatedInt32ValueList());
    Assert.assertEquals(repeatedUint32Value, actualRequest.getRepeatedUint32ValueList());
    Assert.assertEquals(repeatedInt64Value, actualRequest.getRepeatedInt64ValueList());
    Assert.assertEquals(repeatedUint64Value, actualRequest.getRepeatedUint64ValueList());
    Assert.assertEquals(repeatedFloatValue, actualRequest.getRepeatedFloatValueList());
    Assert.assertEquals(repeatedDoubleValue, actualRequest.getRepeatedDoubleValueList());
    Assert.assertEquals(repeatedStringValue, actualRequest.getRepeatedStringValueList());
    Assert.assertEquals(repeatedBoolValue, actualRequest.getRepeatedBoolValueList());
    Assert.assertEquals(repeatedBytesValue, actualRequest.getRepeatedBytesValueList());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void testOptionalRequiredFlatteningParamsExceptionTest2() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      int requiredSingularInt32 = 72313594;
      long requiredSingularInt64 = 72313499L;
      float requiredSingularFloat = -7514705.0F;
      double requiredSingularDouble = 1.9111005E8;
      boolean requiredSingularBool = true;
      TestOptionalRequiredFlatteningParamsRequest.InnerEnum requiredSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
      String requiredSingularString = "requiredSingularString-1949894503";
      ByteString requiredSingularBytes = ByteString.copyFromUtf8("-29");
      TestOptionalRequiredFlatteningParamsRequest.InnerMessage requiredSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
      BookName requiredSingularResourceName = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      BookName requiredSingularResourceNameOneof = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      String requiredSingularResourceNameCommon = "requiredSingularResourceNameCommon-1126805002";
      int requiredSingularFixed32 = 720656715;
      long requiredSingularFixed64 = 720656810;
      List<Integer> requiredRepeatedInt32 = new ArrayList<>();
      List<Long> requiredRepeatedInt64 = new ArrayList<>();
      List<Float> requiredRepeatedFloat = new ArrayList<>();
      List<Double> requiredRepeatedDouble = new ArrayList<>();
      List<Boolean> requiredRepeatedBool = new ArrayList<>();
      List<TestOptionalRequiredFlatteningParamsRequest.InnerEnum> requiredRepeatedEnum = new ArrayList<>();
      List<String> requiredRepeatedString = new ArrayList<>();
      List<ByteString> requiredRepeatedBytes = new ArrayList<>();
      List<TestOptionalRequiredFlatteningParamsRequest.InnerMessage> requiredRepeatedMessage = new ArrayList<>();
      List<String> formattedRequiredRepeatedResourceName = new ArrayList<>();
      List<String> formattedRequiredRepeatedResourceNameOneof = new ArrayList<>();
      List<String> requiredRepeatedResourceNameCommon = new ArrayList<>();
      List<Integer> requiredRepeatedFixed32 = new ArrayList<>();
      List<Long> requiredRepeatedFixed64 = new ArrayList<>();
      Map<Integer, String> requiredMap = new HashMap<>();
      Any requiredAnyValue = Any.newBuilder().build();
      Struct requiredStructValue = Struct.newBuilder().build();
      Value requiredValueValue = Value.newBuilder().build();
      ListValue requiredListValueValue = ListValue.newBuilder().build();
      Timestamp requiredTimeValue = Timestamp.newBuilder().build();
      Duration requiredDurationValue = Duration.newBuilder().build();
      FieldMask requiredFieldMaskValue = FieldMask.newBuilder().build();
      Int32Value requiredInt32Value = Int32Value.newBuilder().build();
      UInt32Value requiredUint32Value = UInt32Value.newBuilder().build();
      Int64Value requiredInt64Value = Int64Value.newBuilder().build();
      UInt64Value requiredUint64Value = UInt64Value.newBuilder().build();
      FloatValue requiredFloatValue = FloatValue.newBuilder().build();
      DoubleValue requiredDoubleValue = DoubleValue.newBuilder().build();
      StringValue requiredStringValue = StringValue.newBuilder().build();
      BoolValue requiredBoolValue = BoolValue.newBuilder().build();
      BytesValue requiredBytesValue = BytesValue.newBuilder().build();
      List<Any> requiredRepeatedAnyValue = new ArrayList<>();
      List<Struct> requiredRepeatedStructValue = new ArrayList<>();
      List<Value> requiredRepeatedValueValue = new ArrayList<>();
      List<ListValue> requiredRepeatedListValueValue = new ArrayList<>();
      List<Timestamp> requiredRepeatedTimeValue = new ArrayList<>();
      List<Duration> requiredRepeatedDurationValue = new ArrayList<>();
      List<FieldMask> requiredRepeatedFieldMaskValue = new ArrayList<>();
      List<Int32Value> requiredRepeatedInt32Value = new ArrayList<>();
      List<UInt32Value> requiredRepeatedUint32Value = new ArrayList<>();
      List<Int64Value> requiredRepeatedInt64Value = new ArrayList<>();
      List<UInt64Value> requiredRepeatedUint64Value = new ArrayList<>();
      List<FloatValue> requiredRepeatedFloatValue = new ArrayList<>();
      List<DoubleValue> requiredRepeatedDoubleValue = new ArrayList<>();
      List<StringValue> requiredRepeatedStringValue = new ArrayList<>();
      List<BoolValue> requiredRepeatedBoolValue = new ArrayList<>();
      List<BytesValue> requiredRepeatedBytesValue = new ArrayList<>();
      int optionalSingularInt32 = 1196565723;
      long optionalSingularInt64 = 1196565628L;
      float optionalSingularFloat = -1.19939918E8F;
      double optionalSingularDouble = 1.41902287E8;
      boolean optionalSingularBool = false;
      TestOptionalRequiredFlatteningParamsRequest.InnerEnum optionalSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
      String optionalSingularString = "optionalSingularString1852995162";
      ByteString optionalSingularBytes = ByteString.copyFromUtf8("2");
      TestOptionalRequiredFlatteningParamsRequest.InnerMessage optionalSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
      BookName optionalSingularResourceName = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      BookName optionalSingularResourceNameOneof = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      String optionalSingularResourceNameCommon = "optionalSingularResourceNameCommon-108123657";
      int optionalSingularFixed32 = 1648847958;
      long optionalSingularFixed64 = 1648847863;
      List<Integer> optionalRepeatedInt32 = new ArrayList<>();
      List<Long> optionalRepeatedInt64 = new ArrayList<>();
      List<Float> optionalRepeatedFloat = new ArrayList<>();
      List<Double> optionalRepeatedDouble = new ArrayList<>();
      List<Boolean> optionalRepeatedBool = new ArrayList<>();
      List<TestOptionalRequiredFlatteningParamsRequest.InnerEnum> optionalRepeatedEnum = new ArrayList<>();
      List<String> optionalRepeatedString = new ArrayList<>();
      List<ByteString> optionalRepeatedBytes = new ArrayList<>();
      List<TestOptionalRequiredFlatteningParamsRequest.InnerMessage> optionalRepeatedMessage = new ArrayList<>();
      List<String> formattedOptionalRepeatedResourceName = new ArrayList<>();
      List<String> formattedOptionalRepeatedResourceNameOneof = new ArrayList<>();
      List<String> optionalRepeatedResourceNameCommon = new ArrayList<>();
      List<Integer> optionalRepeatedFixed32 = new ArrayList<>();
      List<Long> optionalRepeatedFixed64 = new ArrayList<>();
      Map<Integer, String> optionalMap = new HashMap<>();
      Any anyValue = Any.newBuilder().build();
      Struct structValue = Struct.newBuilder().build();
      Value valueValue = Value.newBuilder().build();
      ListValue listValueValue = ListValue.newBuilder().build();
      Timestamp timeValue = Timestamp.newBuilder().build();
      Duration durationValue = Duration.newBuilder().build();
      FieldMask fieldMaskValue = FieldMask.newBuilder().build();
      Int32Value int32Value = Int32Value.newBuilder().build();
      UInt32Value uint32Value = UInt32Value.newBuilder().build();
      Int64Value int64Value = Int64Value.newBuilder().build();
      UInt64Value uint64Value = UInt64Value.newBuilder().build();
      FloatValue floatValue = FloatValue.newBuilder().build();
      DoubleValue doubleValue = DoubleValue.newBuilder().build();
      StringValue stringValue = StringValue.newBuilder().build();
      BoolValue boolValue = BoolValue.newBuilder().build();
      BytesValue bytesValue = BytesValue.newBuilder().build();
      List<Any> repeatedAnyValue = new ArrayList<>();
      List<Struct> repeatedStructValue = new ArrayList<>();
      List<Value> repeatedValueValue = new ArrayList<>();
      List<ListValue> repeatedListValueValue = new ArrayList<>();
      List<Timestamp> repeatedTimeValue = new ArrayList<>();
      List<Duration> repeatedDurationValue = new ArrayList<>();
      List<FieldMask> repeatedFieldMaskValue = new ArrayList<>();
      List<Int32Value> repeatedInt32Value = new ArrayList<>();
      List<UInt32Value> repeatedUint32Value = new ArrayList<>();
      List<Int64Value> repeatedInt64Value = new ArrayList<>();
      List<UInt64Value> repeatedUint64Value = new ArrayList<>();
      List<FloatValue> repeatedFloatValue = new ArrayList<>();
      List<DoubleValue> repeatedDoubleValue = new ArrayList<>();
      List<StringValue> repeatedStringValue = new ArrayList<>();
      List<BoolValue> repeatedBoolValue = new ArrayList<>();
      List<BytesValue> repeatedBytesValue = new ArrayList<>();

      client.testOptionalRequiredFlatteningParams(requiredSingularInt32, requiredSingularInt64, requiredSingularFloat, requiredSingularDouble, requiredSingularBool, requiredSingularEnum, requiredSingularString, requiredSingularBytes, requiredSingularMessage, requiredSingularResourceName, requiredSingularResourceNameOneof, requiredSingularResourceNameCommon, requiredSingularFixed32, requiredSingularFixed64, requiredRepeatedInt32, requiredRepeatedInt64, requiredRepeatedFloat, requiredRepeatedDouble, requiredRepeatedBool, requiredRepeatedEnum, requiredRepeatedString, requiredRepeatedBytes, requiredRepeatedMessage, formattedRequiredRepeatedResourceName, formattedRequiredRepeatedResourceNameOneof, requiredRepeatedResourceNameCommon, requiredRepeatedFixed32, requiredRepeatedFixed64, requiredMap, requiredAnyValue, requiredStructValue, requiredValueValue, requiredListValueValue, requiredTimeValue, requiredDurationValue, requiredFieldMaskValue, requiredInt32Value, requiredUint32Value, requiredInt64Value, requiredUint64Value, requiredFloatValue, requiredDoubleValue, requiredStringValue, requiredBoolValue, requiredBytesValue, requiredRepeatedAnyValue, requiredRepeatedStructValue, requiredRepeatedValueValue, requiredRepeatedListValueValue, requiredRepeatedTimeValue, requiredRepeatedDurationValue, requiredRepeatedFieldMaskValue, requiredRepeatedInt32Value, requiredRepeatedUint32Value, requiredRepeatedInt64Value, requiredRepeatedUint64Value, requiredRepeatedFloatValue, requiredRepeatedDoubleValue, requiredRepeatedStringValue, requiredRepeatedBoolValue, requiredRepeatedBytesValue, optionalSingularInt32, optionalSingularInt64, optionalSingularFloat, optionalSingularDouble, optionalSingularBool, optionalSingularEnum, optionalSingularString, optionalSingularBytes, optionalSingularMessage, optionalSingularResourceName, optionalSingularResourceNameOneof, optionalSingularResourceNameCommon, optionalSingularFixed32, optionalSingularFixed64, optionalRepeatedInt32, optionalRepeatedInt64, optionalRepeatedFloat, optionalRepeatedDouble, optionalRepeatedBool, optionalRepeatedEnum, optionalRepeatedString, optionalRepeatedBytes, optionalRepeatedMessage, formattedOptionalRepeatedResourceName, formattedOptionalRepeatedResourceNameOneof, optionalRepeatedResourceNameCommon, optionalRepeatedFixed32, optionalRepeatedFixed64, optionalMap, anyValue, structValue, valueValue, listValueValue, timeValue, durationValue, fieldMaskValue, int32Value, uint32Value, int64Value, uint64Value, floatValue, doubleValue, stringValue, boolValue, bytesValue, repeatedAnyValue, repeatedStructValue, repeatedValueValue, repeatedListValueValue, repeatedTimeValue, repeatedDurationValue, repeatedFieldMaskValue, repeatedInt32Value, repeatedUint32Value, repeatedInt64Value, repeatedUint64Value, repeatedFloatValue, repeatedDoubleValue, repeatedStringValue, repeatedBoolValue, repeatedBytesValue);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void moveBooksTest() {
    boolean success = false;
    MoveBooksResponse expectedResponse = MoveBooksResponse.newBuilder()
      .setSuccess(success)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    ArchiveName source = ArchiveName.of("[ARCHIVE]");
    ArchiveName destination = ArchiveName.of("[ARCHIVE]");
    List<String> formattedPublishers = new ArrayList<>();
    ProjectName project = ProjectName.of("[PROJECT]");

    MoveBooksResponse actualResponse =
        client.moveBooks(source, destination, formattedPublishers, project);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    MoveBooksRequest actualRequest = (MoveBooksRequest)actualRequests.get(0);

    Assert.assertEquals(source, ArchiveName.parse(actualRequest.getSource()));
    Assert.assertEquals(destination, ArchiveName.parse(actualRequest.getDestination()));
    Assert.assertEquals(formattedPublishers, actualRequest.getPublishersList());
    Assert.assertEquals(project, ProjectName.parse(actualRequest.getProject()));
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void moveBooksExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      ArchiveName source = ArchiveName.of("[ARCHIVE]");
      ArchiveName destination = ArchiveName.of("[ARCHIVE]");
      List<String> formattedPublishers = new ArrayList<>();
      ProjectName project = ProjectName.of("[PROJECT]");

      client.moveBooks(source, destination, formattedPublishers, project);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void archiveBooksTest() {
    boolean success = false;
    ArchiveBooksResponse expectedResponse = ArchiveBooksResponse.newBuilder()
      .setSuccess(success)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    ArchiveName source = ArchiveName.of("[ARCHIVE]");
    ArchiveName archive = ArchiveName.of("[ARCHIVE]");

    ArchiveBooksResponse actualResponse =
        client.archiveBooks(source, archive);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    ArchiveBooksRequest actualRequest = (ArchiveBooksRequest)actualRequests.get(0);

    Assert.assertEquals(source, ArchiveName.parse(actualRequest.getSource()));
    Assert.assertEquals(archive, ArchiveName.parse(actualRequest.getArchive()));
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void archiveBooksExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      ArchiveName source = ArchiveName.of("[ARCHIVE]");
      ArchiveName archive = ArchiveName.of("[ARCHIVE]");

      client.archiveBooks(source, archive);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void longRunningArchiveBooksTest() throws Exception {
    boolean success = false;
    ArchiveBooksResponse expectedResponse = ArchiveBooksResponse.newBuilder()
      .setSuccess(success)
      .build();
    Operation resultOperation =
        Operation.newBuilder()
            .setName("longRunningArchiveBooksTest")
            .setDone(true)
            .setResponse(Any.pack(expectedResponse))
            .build();
    mockLibraryService.addResponse(resultOperation);

    ArchiveName source = ArchiveName.of("[ARCHIVE]");
    ArchiveName archive = ArchiveName.of("[ARCHIVE]");

    ArchiveBooksResponse actualResponse =
        client.longRunningArchiveBooksAsync(source, archive).get();
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    ArchiveBooksRequest actualRequest = (ArchiveBooksRequest)actualRequests.get(0);

    Assert.assertEquals(source, ArchiveName.parse(actualRequest.getSource()));
    Assert.assertEquals(archive, ArchiveName.parse(actualRequest.getArchive()));
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void longRunningArchiveBooksExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      ArchiveName source = ArchiveName.of("[ARCHIVE]");
      ArchiveName archive = ArchiveName.of("[ARCHIVE]");

      client.longRunningArchiveBooksAsync(source, archive).get();
      Assert.fail("No exception raised");
    } catch (ExecutionException e) {
      Assert.assertEquals(InvalidArgumentException.class, e.getCause().getClass());
      InvalidArgumentException apiException = (InvalidArgumentException) e.getCause();
      Assert.assertEquals(StatusCode.Code.INVALID_ARGUMENT, apiException.getStatusCode().getCode());
    }
  }


  @Test
  @SuppressWarnings("all")
  public void streamingArchiveBooksTest() throws Exception {
    boolean success = false;
    ArchiveBooksResponse expectedResponse = ArchiveBooksResponse.newBuilder()
      .setSuccess(success)
      .build();
    mockLibraryService.addResponse(expectedResponse);
    ArchiveBooksRequest request = ArchiveBooksRequest.newBuilder().build();

    MockStreamObserver<ArchiveBooksResponse> responseObserver = new MockStreamObserver<>();

    BidiStreamingCallable<ArchiveBooksRequest, ArchiveBooksResponse> callable =
        client.streamingArchiveBooksCallable();
    ApiStreamObserver<ArchiveBooksRequest> requestObserver =
        callable.bidiStreamingCall(responseObserver);

    requestObserver.onNext(request);
    requestObserver.onCompleted();

    List<ArchiveBooksResponse> actualResponses = responseObserver.future().get();
    Assert.assertEquals(1, actualResponses.size());
    Assert.assertEquals(expectedResponse, actualResponses.get(0));
  }

  @Test
  @SuppressWarnings("all")
  public void streamingArchiveBooksExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);
    ArchiveBooksRequest request = ArchiveBooksRequest.newBuilder().build();

    MockStreamObserver<ArchiveBooksResponse> responseObserver = new MockStreamObserver<>();

    BidiStreamingCallable<ArchiveBooksRequest, ArchiveBooksResponse> callable =
        client.streamingArchiveBooksCallable();
    ApiStreamObserver<ArchiveBooksRequest> requestObserver =
        callable.bidiStreamingCall(responseObserver);

    requestObserver.onNext(request);

    try {
      List<ArchiveBooksResponse> actualResponses = responseObserver.future().get();
      Assert.fail("No exception thrown");
    } catch (ExecutionException e) {
      Assert.assertTrue(e.getCause() instanceof InvalidArgumentException);
      InvalidArgumentException apiException = (InvalidArgumentException) e.getCause();
      Assert.assertEquals(StatusCode.Code.INVALID_ARGUMENT, apiException.getStatusCode().getCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void saveBookTest() {
    Empty expectedResponse = Empty.newBuilder().build();
    mockLibraryService.addResponse(expectedResponse);

    BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    String author = "author-1406328437";
    String title = "title110371416";
    Book.Rating rating = Book.Rating.GOOD;

    client.saveBook(name, author, title, rating);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    Book actualRequest = (Book)actualRequests.get(0);

    Assert.assertEquals(name, BookName.parse(actualRequest.getName()));
    Assert.assertEquals(author, actualRequest.getAuthor());
    Assert.assertEquals(title, actualRequest.getTitle());
    Assert.assertEquals(rating, actualRequest.getRating());
    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void saveBookExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
      String author = "author-1406328437";
      String title = "title110371416";
      Book.Rating rating = Book.Rating.GOOD;

      client.saveBook(name, author, title, rating);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void privateListShelvesTest() {
    BookName name = BookName.ofShelfBookName("[SHELF]", "[BOOK]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setName(name.toString())
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    Book actualResponse =
        client.privateListShelves();
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    ListShelvesRequest actualRequest = (ListShelvesRequest)actualRequests.get(0);

    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void privateListShelvesExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      client.privateListShelves();
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

}
============== file: src/test/java/com/google/example/library/v1/LibrarySmokeTest.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1;

import com.google.common.base.Preconditions;
import com.google.common.collect.Lists;
import com.google.example.library.v1.Book;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.Test;

@javax.annotation.Generated("by GAPIC")
public class LibrarySmokeTest {
  private static final String PROJECT_ENV_NAME = "GOOGLE_CLOUD_PROJECT";
  private static final String LEGACY_PROJECT_ENV_NAME = "GCLOUD_PROJECT";

  @Test
  public void run() {
    main(null);
  }

  public static void main(String args[]) {
    Logger.getLogger("").setLevel(Level.WARNING);
    try {
      executeNoCatch(getProjectId());
      System.out.println("OK");
    } catch (Exception e) {
      System.err.println("Failed with exception:");
      e.printStackTrace(System.err);
      System.exit(1);
    }
  }

  public static void executeNoCatch(String projectId) throws Exception {
    try (LibraryClient client = LibraryClient.create()) {
      BookName name = BookName.ofShelfBookName("testShelf-" + System.currentTimeMillis(), projectId);
      Book.Rating rating = Book.Rating.GOOD;
      Book book = Book.newBuilder()
        .setRating(rating)
        .build();

      Book response = client.updateBook(name, book);
    }
  }

  private static String getProjectId() {
    String projectId = System.getProperty(PROJECT_ENV_NAME, System.getenv(PROJECT_ENV_NAME));
    if (projectId == null) {
      projectId = System.getProperty(LEGACY_PROJECT_ENV_NAME, System.getenv(LEGACY_PROJECT_ENV_NAME));
    }
    Preconditions.checkArgument(projectId != null, "A project ID is required.");
    return projectId;
  }
}
============== file: src/test/java/com/google/example/library/v1/MockLabeler.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.grpc.testing.MockGrpcService;
import com.google.protobuf.AbstractMessage;
import io.grpc.ServerServiceDefinition;
import java.util.List;

@javax.annotation.Generated("by GAPIC")
@BetaApi
public class MockLabeler implements MockGrpcService  {
  private final MockLabelerImpl serviceImpl;

  public MockLabeler() {
    serviceImpl = new MockLabelerImpl();
  }

  @Override
  public List<AbstractMessage> getRequests() {
    return serviceImpl.getRequests();
  }

  @Override
  public void addResponse(AbstractMessage response) {
    serviceImpl.addResponse(response);
  }

  @Override
  public void addException(Exception exception) {
    serviceImpl.addException(exception);
  }

  @Override
  public ServerServiceDefinition getServiceDefinition() {
    return serviceImpl.bindService();
  }

  @Override
  public void reset() {
    serviceImpl.reset();
  }
}
============== file: src/test/java/com/google/example/library/v1/MockLabelerImpl.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1;

import com.google.api.core.BetaApi;
import com.google.common.collect.Lists;
import com.google.protobuf.AbstractMessage;
import com.google.tagger.v1.LabelerGrpc.LabelerImplBase;
import com.google.tagger.v1.TaggerProto.AddLabelRequest;
import com.google.tagger.v1.TaggerProto.AddLabelResponse;
import io.grpc.stub.StreamObserver;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

@javax.annotation.Generated("by GAPIC")
@BetaApi
public class MockLabelerImpl extends LabelerImplBase {
  private List<AbstractMessage> requests;
  private Queue<Object> responses;

  public MockLabelerImpl() {
    requests = new ArrayList<>();
    responses = new LinkedList<>();
  }

  public List<AbstractMessage> getRequests() {
    return requests;
  }

  public void addResponse(AbstractMessage response) {
    responses.add(response);
  }

  public void setResponses(List<AbstractMessage> responses) {
    this.responses = new LinkedList<Object>(responses);
  }

  public void addException(Exception exception) {
    responses.add(exception);
  }

  public void reset() {
    requests = new ArrayList<>();
    responses = new LinkedList<>();
  }

  @Override
  public void addLabel(AddLabelRequest request,
    StreamObserver<AddLabelResponse> responseObserver) {
    Object response = responses.remove();
    if (response instanceof AddLabelResponse) {
      requests.add(request);
      responseObserver.onNext((AddLabelResponse) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

}
============== file: src/test/java/com/google/example/library/v1/MockLibraryService.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.grpc.testing.MockGrpcService;
import com.google.protobuf.AbstractMessage;
import io.grpc.ServerServiceDefinition;
import java.util.List;

@javax.annotation.Generated("by GAPIC")
@BetaApi
public class MockLibraryService implements MockGrpcService  {
  private final MockLibraryServiceImpl serviceImpl;

  public MockLibraryService() {
    serviceImpl = new MockLibraryServiceImpl();
  }

  @Override
  public List<AbstractMessage> getRequests() {
    return serviceImpl.getRequests();
  }

  @Override
  public void addResponse(AbstractMessage response) {
    serviceImpl.addResponse(response);
  }

  @Override
  public void addException(Exception exception) {
    serviceImpl.addException(exception);
  }

  @Override
  public ServerServiceDefinition getServiceDefinition() {
    return serviceImpl.bindService();
  }

  @Override
  public void reset() {
    serviceImpl.reset();
  }
}
============== file: src/test/java/com/google/example/library/v1/MockLibraryServiceImpl.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1;

import com.google.api.core.BetaApi;
import com.google.common.collect.Lists;
import com.google.example.library.v1.LibraryServiceGrpc.LibraryServiceImplBase;
import com.google.longrunning.Operation;
import com.google.protobuf.AbstractMessage;
import com.google.protobuf.Empty;
import io.grpc.stub.StreamObserver;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

@javax.annotation.Generated("by GAPIC")
@BetaApi
public class MockLibraryServiceImpl extends LibraryServiceImplBase {
  private List<AbstractMessage> requests;
  private Queue<Object> responses;

  public MockLibraryServiceImpl() {
    requests = new ArrayList<>();
    responses = new LinkedList<>();
  }

  public List<AbstractMessage> getRequests() {
    return requests;
  }

  public void addResponse(AbstractMessage response) {
    responses.add(response);
  }

  public void setResponses(List<AbstractMessage> responses) {
    this.responses = new LinkedList<Object>(responses);
  }

  public void addException(Exception exception) {
    responses.add(exception);
  }

  public void reset() {
    requests = new ArrayList<>();
    responses = new LinkedList<>();
  }

  @Override
  public void createShelf(CreateShelfRequest request,
    StreamObserver<Shelf> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Shelf) {
      requests.add(request);
      responseObserver.onNext((Shelf) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void getShelf(GetShelfRequest request,
    StreamObserver<Shelf> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Shelf) {
      requests.add(request);
      responseObserver.onNext((Shelf) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void listShelves(ListShelvesRequest request,
    StreamObserver<ListShelvesResponse> responseObserver) {
    Object response = responses.remove();
    if (response instanceof ListShelvesResponse) {
      requests.add(request);
      responseObserver.onNext((ListShelvesResponse) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void deleteShelf(DeleteShelfRequest request,
    StreamObserver<Empty> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Empty) {
      requests.add(request);
      responseObserver.onNext((Empty) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void mergeShelves(MergeShelvesRequest request,
    StreamObserver<Shelf> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Shelf) {
      requests.add(request);
      responseObserver.onNext((Shelf) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void createBook(CreateBookRequest request,
    StreamObserver<Book> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Book) {
      requests.add(request);
      responseObserver.onNext((Book) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void publishSeries(PublishSeriesRequest request,
    StreamObserver<PublishSeriesResponse> responseObserver) {
    Object response = responses.remove();
    if (response instanceof PublishSeriesResponse) {
      requests.add(request);
      responseObserver.onNext((PublishSeriesResponse) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void getBook(GetBookRequest request,
    StreamObserver<Book> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Book) {
      requests.add(request);
      responseObserver.onNext((Book) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void listBooks(ListBooksRequest request,
    StreamObserver<ListBooksResponse> responseObserver) {
    Object response = responses.remove();
    if (response instanceof ListBooksResponse) {
      requests.add(request);
      responseObserver.onNext((ListBooksResponse) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void deleteBook(DeleteBookRequest request,
    StreamObserver<Empty> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Empty) {
      requests.add(request);
      responseObserver.onNext((Empty) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void updateBook(UpdateBookRequest request,
    StreamObserver<Book> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Book) {
      requests.add(request);
      responseObserver.onNext((Book) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void moveBook(MoveBookRequest request,
    StreamObserver<Book> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Book) {
      requests.add(request);
      responseObserver.onNext((Book) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void listStrings(ListStringsRequest request,
    StreamObserver<ListStringsResponse> responseObserver) {
    Object response = responses.remove();
    if (response instanceof ListStringsResponse) {
      requests.add(request);
      responseObserver.onNext((ListStringsResponse) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void addComments(AddCommentsRequest request,
    StreamObserver<Empty> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Empty) {
      requests.add(request);
      responseObserver.onNext((Empty) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void getBookFromArchive(GetBookFromArchiveRequest request,
    StreamObserver<BookFromArchive> responseObserver) {
    Object response = responses.remove();
    if (response instanceof BookFromArchive) {
      requests.add(request);
      responseObserver.onNext((BookFromArchive) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void getBookFromAnywhere(GetBookFromAnywhereRequest request,
    StreamObserver<BookFromAnywhere> responseObserver) {
    Object response = responses.remove();
    if (response instanceof BookFromAnywhere) {
      requests.add(request);
      responseObserver.onNext((BookFromAnywhere) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void getBookFromAbsolutelyAnywhere(GetBookFromAbsolutelyAnywhereRequest request,
    StreamObserver<BookFromAnywhere> responseObserver) {
    Object response = responses.remove();
    if (response instanceof BookFromAnywhere) {
      requests.add(request);
      responseObserver.onNext((BookFromAnywhere) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void updateBookIndex(UpdateBookIndexRequest request,
    StreamObserver<Empty> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Empty) {
      requests.add(request);
      responseObserver.onNext((Empty) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void streamShelves(StreamShelvesRequest request,
    StreamObserver<StreamShelvesResponse> responseObserver) {
    Object response = responses.remove();
    if (response instanceof StreamShelvesResponse) {
      requests.add(request);
      responseObserver.onNext((StreamShelvesResponse) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void streamBooks(StreamBooksRequest request,
    StreamObserver<Book> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Book) {
      requests.add(request);
      responseObserver.onNext((Book) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public StreamObserver<DiscussBookRequest> discussBook(
      final StreamObserver<Comment> responseObserver) {
    final Object response = responses.remove();
    StreamObserver<DiscussBookRequest> requestObserver =
        new StreamObserver<DiscussBookRequest>() {
      @Override
      public void onNext(DiscussBookRequest value) {
        if (response instanceof Comment) {
          responseObserver.onNext((Comment) response);
        } else if (response instanceof Exception) {
          responseObserver.onError((Exception) response);
        } else {
          responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
        }
      }

      @Override
      public void onError(Throwable t) {
        responseObserver.onError(t);
      }

      @Override
      public void onCompleted() {
        responseObserver.onCompleted();
      }
    };
    return requestObserver;
  }

  @Override
  public StreamObserver<DiscussBookRequest> monologAboutBook(
      final StreamObserver<Comment> responseObserver) {
    final Object response = responses.remove();
    StreamObserver<DiscussBookRequest> requestObserver =
        new StreamObserver<DiscussBookRequest>() {
      @Override
      public void onNext(DiscussBookRequest value) {
        if (response instanceof Comment) {
          responseObserver.onNext((Comment) response);
        } else if (response instanceof Exception) {
          responseObserver.onError((Exception) response);
        } else {
          responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
        }
      }

      @Override
      public void onError(Throwable t) {
        responseObserver.onError(t);
      }

      @Override
      public void onCompleted() {
        responseObserver.onCompleted();
      }
    };
    return requestObserver;
  }

  @Override
  public StreamObserver<DiscussBookRequest> babbleAboutBook(
      final StreamObserver<Empty> responseObserver) {
    final Object response = responses.remove();
    StreamObserver<DiscussBookRequest> requestObserver =
        new StreamObserver<DiscussBookRequest>() {
      @Override
      public void onNext(DiscussBookRequest value) {
        if (response instanceof Empty) {
          responseObserver.onNext((Empty) response);
        } else if (response instanceof Exception) {
          responseObserver.onError((Exception) response);
        } else {
          responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
        }
      }

      @Override
      public void onError(Throwable t) {
        responseObserver.onError(t);
      }

      @Override
      public void onCompleted() {
        responseObserver.onCompleted();
      }
    };
    return requestObserver;
  }

  @Override
  public void findRelatedBooks(FindRelatedBooksRequest request,
    StreamObserver<FindRelatedBooksResponse> responseObserver) {
    Object response = responses.remove();
    if (response instanceof FindRelatedBooksResponse) {
      requests.add(request);
      responseObserver.onNext((FindRelatedBooksResponse) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void getBigBook(GetBookRequest request,
    StreamObserver<Operation> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Operation) {
      requests.add(request);
      responseObserver.onNext((Operation) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void getBigNothing(GetBookRequest request,
    StreamObserver<Operation> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Operation) {
      requests.add(request);
      responseObserver.onNext((Operation) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void moveBooks(MoveBooksRequest request,
    StreamObserver<MoveBooksResponse> responseObserver) {
    Object response = responses.remove();
    if (response instanceof MoveBooksResponse) {
      requests.add(request);
      responseObserver.onNext((MoveBooksResponse) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void archiveBooks(ArchiveBooksRequest request,
    StreamObserver<ArchiveBooksResponse> responseObserver) {
    Object response = responses.remove();
    if (response instanceof ArchiveBooksResponse) {
      requests.add(request);
      responseObserver.onNext((ArchiveBooksResponse) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void longRunningArchiveBooks(ArchiveBooksRequest request,
    StreamObserver<Operation> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Operation) {
      requests.add(request);
      responseObserver.onNext((Operation) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public StreamObserver<ArchiveBooksRequest> streamingArchiveBooks(
      final StreamObserver<ArchiveBooksResponse> responseObserver) {
    final Object response = responses.remove();
    StreamObserver<ArchiveBooksRequest> requestObserver =
        new StreamObserver<ArchiveBooksRequest>() {
      @Override
      public void onNext(ArchiveBooksRequest value) {
        if (response instanceof ArchiveBooksResponse) {
          responseObserver.onNext((ArchiveBooksResponse) response);
        } else if (response instanceof Exception) {
          responseObserver.onError((Exception) response);
        } else {
          responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
        }
      }

      @Override
      public void onError(Throwable t) {
        responseObserver.onError(t);
      }

      @Override
      public void onCompleted() {
        responseObserver.onCompleted();
      }
    };
    return requestObserver;
  }

  @Override
  public void saveBook(Book request,
    StreamObserver<Empty> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Empty) {
      requests.add(request);
      responseObserver.onNext((Empty) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void testOptionalRequiredFlatteningParams(TestOptionalRequiredFlatteningParamsRequest request,
    StreamObserver<TestOptionalRequiredFlatteningParamsResponse> responseObserver) {
    Object response = responses.remove();
    if (response instanceof TestOptionalRequiredFlatteningParamsResponse) {
      requests.add(request);
      responseObserver.onNext((TestOptionalRequiredFlatteningParamsResponse) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void privateListShelves(ListShelvesRequest request,
    StreamObserver<Book> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Book) {
      requests.add(request);
      responseObserver.onNext((Book) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

}
============== file: src/test/java/com/google/example/library/v1/MockMyProto.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.grpc.testing.MockGrpcService;
import com.google.protobuf.AbstractMessage;
import io.grpc.ServerServiceDefinition;
import java.util.List;

@javax.annotation.Generated("by GAPIC")
@BetaApi
public class MockMyProto implements MockGrpcService  {
  private final MockMyProtoImpl serviceImpl;

  public MockMyProto() {
    serviceImpl = new MockMyProtoImpl();
  }

  @Override
  public List<AbstractMessage> getRequests() {
    return serviceImpl.getRequests();
  }

  @Override
  public void addResponse(AbstractMessage response) {
    serviceImpl.addResponse(response);
  }

  @Override
  public void addException(Exception exception) {
    serviceImpl.addException(exception);
  }

  @Override
  public ServerServiceDefinition getServiceDefinition() {
    return serviceImpl.bindService();
  }

  @Override
  public void reset() {
    serviceImpl.reset();
  }
}
============== file: src/test/java/com/google/example/library/v1/MockMyProtoImpl.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1;

import com.google.api.core.BetaApi;
import com.google.common.collect.Lists;
import com.google.protobuf.AbstractMessage;
import com.google.protos.google.example.library.v1.AnotherService.MethodRequest;
import com.google.protos.google.example.library.v1.AnotherService.MethodResponse;
import com.google.protos.google.example.library.v1.AnotherService.Namespace;
import com.google.protos.google.example.library.v1.MyProtoGrpc.MyProtoImplBase;
import io.grpc.stub.StreamObserver;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

@javax.annotation.Generated("by GAPIC")
@BetaApi
public class MockMyProtoImpl extends MyProtoImplBase {
  private List<AbstractMessage> requests;
  private Queue<Object> responses;

  public MockMyProtoImpl() {
    requests = new ArrayList<>();
    responses = new LinkedList<>();
  }

  public List<AbstractMessage> getRequests() {
    return requests;
  }

  public void addResponse(AbstractMessage response) {
    responses.add(response);
  }

  public void setResponses(List<AbstractMessage> responses) {
    this.responses = new LinkedList<Object>(responses);
  }

  public void addException(Exception exception) {
    responses.add(exception);
  }

  public void reset() {
    requests = new ArrayList<>();
    responses = new LinkedList<>();
  }

  @Override
  public void myMethod(MethodRequest request,
    StreamObserver<MethodResponse> responseObserver) {
    Object response = responses.remove();
    if (response instanceof MethodResponse) {
      requests.add(request);
      responseObserver.onNext((MethodResponse) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void getNamespace(MethodRequest request,
    StreamObserver<Namespace> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Namespace) {
      requests.add(request);
      responseObserver.onNext((Namespace) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

}
============== file: src/test/java/com/google/example/library/v1/MyProtoClientTest.java ==============
/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.example.library.v1;

import com.google.api.gax.core.NoCredentialsProvider;
import com.google.api.gax.grpc.GaxGrpcProperties;
import com.google.api.gax.grpc.GrpcStatusCode;
import com.google.api.gax.grpc.testing.LocalChannelProvider;
import com.google.api.gax.grpc.testing.MockGrpcService;
import com.google.api.gax.grpc.testing.MockServiceHelper;
import com.google.api.gax.rpc.ApiClientHeaderProvider;
import com.google.api.gax.rpc.InvalidArgumentException;
import com.google.api.gax.rpc.StatusCode;
import com.google.common.collect.Lists;
import com.google.protobuf.AbstractMessage;
import com.google.protos.google.example.library.v1.AnotherService.MethodRequest;
import com.google.protos.google.example.library.v1.AnotherService.MethodResponse;
import com.google.protos.google.example.library.v1.AnotherService.Namespace;
import io.grpc.Status;
import io.grpc.StatusRuntimeException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.UUID;
import java.util.concurrent.ExecutionException;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

@javax.annotation.Generated("by GAPIC")
public class MyProtoClientTest {
  private static MockLibraryService mockLibraryService;
  private static MockLabeler mockLabeler;
  private static MockMyProto mockMyProto;
  private static MockServiceHelper serviceHelper;
  private MyProtoClient client;
  private LocalChannelProvider channelProvider;

  @BeforeClass
  public static void startStaticServer() {
    mockLibraryService = new MockLibraryService();
    mockLabeler = new MockLabeler();
    mockMyProto = new MockMyProto();
    serviceHelper = new MockServiceHelper(UUID.randomUUID().toString(), Arrays.<MockGrpcService>asList(mockLibraryService, mockLabeler, mockMyProto));
    serviceHelper.start();
  }

  @AfterClass
  public static void stopServer() {
    serviceHelper.stop();
  }

  @Before
  public void setUp() throws IOException {
    serviceHelper.reset();
    channelProvider = serviceHelper.createChannelProvider();
    MyProtoSettings settings = MyProtoSettings.newBuilder()
        .setTransportChannelProvider(channelProvider)
        .setCredentialsProvider(NoCredentialsProvider.create())
        .build();
    client = MyProtoClient.create(settings);
  }

  @After
  public void tearDown() throws Exception {
    client.close();
  }

  @Test
  @SuppressWarnings("all")
  public void myMethodTest() {
    String myfield = "myfield1515208398";
    MethodResponse expectedResponse = MethodResponse.newBuilder()
      .setMyfield(myfield)
      .build();
    mockMyProto.addResponse(expectedResponse);

    MethodRequest request = MethodRequest.newBuilder().build();

    MethodResponse actualResponse =
        client.myMethod(request);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockMyProto.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    MethodRequest actualRequest = (MethodRequest)actualRequests.get(0);

    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void myMethodExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockMyProto.addException(exception);

    try {
      MethodRequest request = MethodRequest.newBuilder().build();

      client.myMethod(request);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getNamespaceTest() {
    String value = "value111972721";
    Namespace expectedResponse = Namespace.newBuilder()
      .setValue(value)
      .build();
    mockMyProto.addResponse(expectedResponse);

    MethodRequest request = MethodRequest.newBuilder().build();

    Namespace actualResponse =
        client.getNamespace(request);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<AbstractMessage> actualRequests = mockMyProto.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    MethodRequest actualRequest = (MethodRequest)actualRequests.get(0);

    Assert.assertTrue(
        channelProvider.isHeaderSent(
            ApiClientHeaderProvider.getDefaultApiClientHeaderKey(),
            GaxGrpcProperties.getDefaultApiClientHeaderPattern()));
  }

  @Test
  @SuppressWarnings("all")
  public void getNamespaceExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockMyProto.addException(exception);

    try {
      MethodRequest request = MethodRequest.newBuilder().build();

      client.getNamespace(request);
      Assert.fail("No exception raised");
    } catch (InvalidArgumentException e) {
      // Expected exception
    }
  }

}
