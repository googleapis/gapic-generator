
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.AccountActiveAdSummary;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Account ID.
    long summaryAccountId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.AccountActiveAdSummaries.Get request = dfareportingService.accountActiveAdSummaries().get(profileId, summaryAccountId);

    AccountActiveAdSummary response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.AccountPermissionGroup;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Account permission group ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.AccountPermissionGroups.Get request = dfareportingService.accountPermissionGroups().get(profileId, id);

    AccountPermissionGroup response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.AccountPermissionGroupsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.AccountPermissionGroups.List request = dfareportingService.accountPermissionGroups().list(profileId);

    AccountPermissionGroupsListResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.AccountPermission;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Account permission ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.AccountPermissions.Get request = dfareportingService.accountPermissions().get(profileId, id);

    AccountPermission response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.AccountPermissionsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.AccountPermissions.List request = dfareportingService.accountPermissions().list(profileId);

    AccountPermissionsListResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.AccountUserProfile;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // User profile ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.AccountUserProfiles.Get request = dfareportingService.accountUserProfiles().get(profileId, id);

    AccountUserProfile response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.AccountUserProfile;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    AccountUserProfile requestBody = new AccountUserProfile();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.AccountUserProfiles.Insert request = dfareportingService.accountUserProfiles().insert(profileId, requestBody);

    AccountUserProfile response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.AccountUserProfile;
import com.google.api.services.dfareporting.model.AccountUserProfilesListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.AccountUserProfiles.List request = dfareportingService.accountUserProfiles().list(profileId);

    AccountUserProfilesListResponse response;
    do {
      response = request.execute();
      if (response.getAccountUserProfiles() == null) {
        continue;
      }
      for (AccountUserProfile accountUserProfile : response.getAccountUserProfiles()) {
        // TODO: Change code below to process each `accountUserProfile` resource:
        System.out.println(accountUserProfile);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.AccountUserProfile;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // User profile ID.
    long id = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    AccountUserProfile requestBody = new AccountUserProfile();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.AccountUserProfiles.Patch request = dfareportingService.accountUserProfiles().patch(profileId, id, requestBody);

    AccountUserProfile response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.AccountUserProfile;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    AccountUserProfile requestBody = new AccountUserProfile();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.AccountUserProfiles.Update request = dfareportingService.accountUserProfiles().update(profileId, requestBody);

    AccountUserProfile response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Account;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Account ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Accounts.Get request = dfareportingService.accounts().get(profileId, id);

    Account response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Account;
import com.google.api.services.dfareporting.model.AccountsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Accounts.List request = dfareportingService.accounts().list(profileId);

    AccountsListResponse response;
    do {
      response = request.execute();
      if (response.getAccounts() == null) {
        continue;
      }
      for (Account account : response.getAccounts()) {
        // TODO: Change code below to process each `account` resource:
        System.out.println(account);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Account;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Account ID.
    long id = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    Account requestBody = new Account();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Accounts.Patch request = dfareportingService.accounts().patch(profileId, id, requestBody);

    Account response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Account;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Account requestBody = new Account();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Accounts.Update request = dfareportingService.accounts().update(profileId, requestBody);

    Account response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Ad;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Ad ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Ads.Get request = dfareportingService.ads().get(profileId, id);

    Ad response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Ad;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Ad requestBody = new Ad();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Ads.Insert request = dfareportingService.ads().insert(profileId, requestBody);

    Ad response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Ad;
import com.google.api.services.dfareporting.model.AdsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Ads.List request = dfareportingService.ads().list(profileId);

    AdsListResponse response;
    do {
      response = request.execute();
      if (response.getAds() == null) {
        continue;
      }
      for (Ad ad : response.getAds()) {
        // TODO: Change code below to process each `ad` resource:
        System.out.println(ad);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Ad;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Ad ID.
    long id = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    Ad requestBody = new Ad();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Ads.Patch request = dfareportingService.ads().patch(profileId, id, requestBody);

    Ad response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Ad;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Ad requestBody = new Ad();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Ads.Update request = dfareportingService.ads().update(profileId, requestBody);

    Ad response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Advertiser group ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.AdvertiserGroups.Delete request = dfareportingService.advertiserGroups().delete(profileId, id);

    request.execute();
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.AdvertiserGroup;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Advertiser group ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.AdvertiserGroups.Get request = dfareportingService.advertiserGroups().get(profileId, id);

    AdvertiserGroup response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.AdvertiserGroup;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    AdvertiserGroup requestBody = new AdvertiserGroup();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.AdvertiserGroups.Insert request = dfareportingService.advertiserGroups().insert(profileId, requestBody);

    AdvertiserGroup response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.AdvertiserGroup;
import com.google.api.services.dfareporting.model.AdvertiserGroupsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.AdvertiserGroups.List request = dfareportingService.advertiserGroups().list(profileId);

    AdvertiserGroupsListResponse response;
    do {
      response = request.execute();
      if (response.getAdvertiserGroups() == null) {
        continue;
      }
      for (AdvertiserGroup advertiserGroup : response.getAdvertiserGroups()) {
        // TODO: Change code below to process each `advertiserGroup` resource:
        System.out.println(advertiserGroup);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.AdvertiserGroup;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Advertiser group ID.
    long id = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    AdvertiserGroup requestBody = new AdvertiserGroup();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.AdvertiserGroups.Patch request = dfareportingService.advertiserGroups().patch(profileId, id, requestBody);

    AdvertiserGroup response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.AdvertiserGroup;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    AdvertiserGroup requestBody = new AdvertiserGroup();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.AdvertiserGroups.Update request = dfareportingService.advertiserGroups().update(profileId, requestBody);

    AdvertiserGroup response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Advertiser;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Advertiser ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Advertisers.Get request = dfareportingService.advertisers().get(profileId, id);

    Advertiser response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Advertiser;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Advertiser requestBody = new Advertiser();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Advertisers.Insert request = dfareportingService.advertisers().insert(profileId, requestBody);

    Advertiser response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Advertiser;
import com.google.api.services.dfareporting.model.AdvertisersListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Advertisers.List request = dfareportingService.advertisers().list(profileId);

    AdvertisersListResponse response;
    do {
      response = request.execute();
      if (response.getAdvertisers() == null) {
        continue;
      }
      for (Advertiser advertiser : response.getAdvertisers()) {
        // TODO: Change code below to process each `advertiser` resource:
        System.out.println(advertiser);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Advertiser;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Advertiser ID.
    long id = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    Advertiser requestBody = new Advertiser();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Advertisers.Patch request = dfareportingService.advertisers().patch(profileId, id, requestBody);

    Advertiser response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Advertiser;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Advertiser requestBody = new Advertiser();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Advertisers.Update request = dfareportingService.advertisers().update(profileId, requestBody);

    Advertiser response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.BrowsersListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Browsers.List request = dfareportingService.browsers().list(profileId);

    BrowsersListResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.CampaignCreativeAssociation;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Campaign ID in this association.
    long campaignId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    CampaignCreativeAssociation requestBody = new CampaignCreativeAssociation();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.CampaignCreativeAssociations.Insert request = dfareportingService.campaignCreativeAssociations().insert(profileId, campaignId, requestBody);

    CampaignCreativeAssociation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.CampaignCreativeAssociation;
import com.google.api.services.dfareporting.model.CampaignCreativeAssociationsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Campaign ID in this association.
    long campaignId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.CampaignCreativeAssociations.List request = dfareportingService.campaignCreativeAssociations().list(profileId, campaignId);

    CampaignCreativeAssociationsListResponse response;
    do {
      response = request.execute();
      if (response.getCampaignCreativeAssociations() == null) {
        continue;
      }
      for (CampaignCreativeAssociation campaignCreativeAssociation : response.getCampaignCreativeAssociations()) {
        // TODO: Change code below to process each `campaignCreativeAssociation` resource:
        System.out.println(campaignCreativeAssociation);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Campaign;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Campaign ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Campaigns.Get request = dfareportingService.campaigns().get(profileId, id);

    Campaign response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Campaign;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Default landing page name for this new campaign. Must be less than 256 characters long.
    String defaultLandingPageName = "";  // TODO: Update placeholder value.

    // Default landing page URL for this new campaign.
    String defaultLandingPageUrl = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Campaign requestBody = new Campaign();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Campaigns.Insert request = dfareportingService.campaigns().insert(profileId, defaultLandingPageName, defaultLandingPageUrl, requestBody);

    Campaign response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Campaign;
import com.google.api.services.dfareporting.model.CampaignsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Campaigns.List request = dfareportingService.campaigns().list(profileId);

    CampaignsListResponse response;
    do {
      response = request.execute();
      if (response.getCampaigns() == null) {
        continue;
      }
      for (Campaign campaign : response.getCampaigns()) {
        // TODO: Change code below to process each `campaign` resource:
        System.out.println(campaign);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Campaign;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Campaign ID.
    long id = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    Campaign requestBody = new Campaign();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Campaigns.Patch request = dfareportingService.campaigns().patch(profileId, id, requestBody);

    Campaign response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Campaign;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Campaign requestBody = new Campaign();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Campaigns.Update request = dfareportingService.campaigns().update(profileId, requestBody);

    Campaign response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.ChangeLog;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Change log ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.ChangeLogs.Get request = dfareportingService.changeLogs().get(profileId, id);

    ChangeLog response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.ChangeLog;
import com.google.api.services.dfareporting.model.ChangeLogsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.ChangeLogs.List request = dfareportingService.changeLogs().list(profileId);

    ChangeLogsListResponse response;
    do {
      response = request.execute();
      if (response.getChangeLogs() == null) {
        continue;
      }
      for (ChangeLog changeLog : response.getChangeLogs()) {
        // TODO: Change code below to process each `changeLog` resource:
        System.out.println(changeLog);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.CitiesListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Cities.List request = dfareportingService.cities().list(profileId);

    CitiesListResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.ConnectionType;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Connection type ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.ConnectionTypes.Get request = dfareportingService.connectionTypes().get(profileId, id);

    ConnectionType response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.ConnectionTypesListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.ConnectionTypes.List request = dfareportingService.connectionTypes().list(profileId);

    ConnectionTypesListResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Content category ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.ContentCategories.Delete request = dfareportingService.contentCategories().delete(profileId, id);

    request.execute();
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.ContentCategory;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Content category ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.ContentCategories.Get request = dfareportingService.contentCategories().get(profileId, id);

    ContentCategory response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.ContentCategory;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    ContentCategory requestBody = new ContentCategory();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.ContentCategories.Insert request = dfareportingService.contentCategories().insert(profileId, requestBody);

    ContentCategory response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.ContentCategoriesListResponse;
import com.google.api.services.dfareporting.model.ContentCategory;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.ContentCategories.List request = dfareportingService.contentCategories().list(profileId);

    ContentCategoriesListResponse response;
    do {
      response = request.execute();
      if (response.getContentCategories() == null) {
        continue;
      }
      for (ContentCategory contentCategory : response.getContentCategories()) {
        // TODO: Change code below to process each `contentCategory` resource:
        System.out.println(contentCategory);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.ContentCategory;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Content category ID.
    long id = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    ContentCategory requestBody = new ContentCategory();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.ContentCategories.Patch request = dfareportingService.contentCategories().patch(profileId, id, requestBody);

    ContentCategory response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.ContentCategory;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    ContentCategory requestBody = new ContentCategory();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.ContentCategories.Update request = dfareportingService.contentCategories().update(profileId, requestBody);

    ContentCategory response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.ConversionsBatchInsertRequest;
import com.google.api.services.dfareporting.model.ConversionsBatchInsertResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    ConversionsBatchInsertRequest requestBody = new ConversionsBatchInsertRequest();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Conversions.Batchinsert request = dfareportingService.conversions().batchinsert(profileId, requestBody);

    ConversionsBatchInsertResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/ddmconversions
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Country;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Country DART ID.
    long dartId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Countries.Get request = dfareportingService.countries().get(profileId, dartId);

    Country response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.CountriesListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Countries.List request = dfareportingService.countries().list(profileId);

    CountriesListResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.CreativeAssetMetadata;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Advertiser ID of this creative. This is a required field.
    long advertiserId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    CreativeAssetMetadata requestBody = new CreativeAssetMetadata();

    // TODO: Add desired media content for upload. See:
    // https://developers.google.com/api-client-library/java/google-api-java-client/media-upload

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.CreativeAssets.Insert request = dfareportingService.creativeAssets().insert(profileId, advertiserId, requestBody);

    CreativeAssetMetadata response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Creative field ID for this creative field value.
    long creativeFieldId = 0L;  // TODO: Update placeholder value.

    // Creative Field Value ID
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.CreativeFieldValues.Delete request = dfareportingService.creativeFieldValues().delete(profileId, creativeFieldId, id);

    request.execute();
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.CreativeFieldValue;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Creative field ID for this creative field value.
    long creativeFieldId = 0L;  // TODO: Update placeholder value.

    // Creative Field Value ID
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.CreativeFieldValues.Get request = dfareportingService.creativeFieldValues().get(profileId, creativeFieldId, id);

    CreativeFieldValue response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.CreativeFieldValue;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Creative field ID for this creative field value.
    long creativeFieldId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    CreativeFieldValue requestBody = new CreativeFieldValue();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.CreativeFieldValues.Insert request = dfareportingService.creativeFieldValues().insert(profileId, creativeFieldId, requestBody);

    CreativeFieldValue response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.CreativeFieldValue;
import com.google.api.services.dfareporting.model.CreativeFieldValuesListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Creative field ID for this creative field value.
    long creativeFieldId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.CreativeFieldValues.List request = dfareportingService.creativeFieldValues().list(profileId, creativeFieldId);

    CreativeFieldValuesListResponse response;
    do {
      response = request.execute();
      if (response.getCreativeFieldValues() == null) {
        continue;
      }
      for (CreativeFieldValue creativeFieldValue : response.getCreativeFieldValues()) {
        // TODO: Change code below to process each `creativeFieldValue` resource:
        System.out.println(creativeFieldValue);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.CreativeFieldValue;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Creative field ID for this creative field value.
    long creativeFieldId = 0L;  // TODO: Update placeholder value.

    // Creative Field Value ID
    long id = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    CreativeFieldValue requestBody = new CreativeFieldValue();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.CreativeFieldValues.Patch request = dfareportingService.creativeFieldValues().patch(profileId, creativeFieldId, id, requestBody);

    CreativeFieldValue response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.CreativeFieldValue;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Creative field ID for this creative field value.
    long creativeFieldId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    CreativeFieldValue requestBody = new CreativeFieldValue();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.CreativeFieldValues.Update request = dfareportingService.creativeFieldValues().update(profileId, creativeFieldId, requestBody);

    CreativeFieldValue response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Creative Field ID
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.CreativeFields.Delete request = dfareportingService.creativeFields().delete(profileId, id);

    request.execute();
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.CreativeField;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Creative Field ID
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.CreativeFields.Get request = dfareportingService.creativeFields().get(profileId, id);

    CreativeField response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.CreativeField;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    CreativeField requestBody = new CreativeField();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.CreativeFields.Insert request = dfareportingService.creativeFields().insert(profileId, requestBody);

    CreativeField response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.CreativeField;
import com.google.api.services.dfareporting.model.CreativeFieldsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.CreativeFields.List request = dfareportingService.creativeFields().list(profileId);

    CreativeFieldsListResponse response;
    do {
      response = request.execute();
      if (response.getCreativeFields() == null) {
        continue;
      }
      for (CreativeField creativeField : response.getCreativeFields()) {
        // TODO: Change code below to process each `creativeField` resource:
        System.out.println(creativeField);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.CreativeField;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Creative Field ID
    long id = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    CreativeField requestBody = new CreativeField();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.CreativeFields.Patch request = dfareportingService.creativeFields().patch(profileId, id, requestBody);

    CreativeField response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.CreativeField;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    CreativeField requestBody = new CreativeField();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.CreativeFields.Update request = dfareportingService.creativeFields().update(profileId, requestBody);

    CreativeField response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.CreativeGroup;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Creative group ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.CreativeGroups.Get request = dfareportingService.creativeGroups().get(profileId, id);

    CreativeGroup response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.CreativeGroup;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    CreativeGroup requestBody = new CreativeGroup();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.CreativeGroups.Insert request = dfareportingService.creativeGroups().insert(profileId, requestBody);

    CreativeGroup response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.CreativeGroup;
import com.google.api.services.dfareporting.model.CreativeGroupsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.CreativeGroups.List request = dfareportingService.creativeGroups().list(profileId);

    CreativeGroupsListResponse response;
    do {
      response = request.execute();
      if (response.getCreativeGroups() == null) {
        continue;
      }
      for (CreativeGroup creativeGroup : response.getCreativeGroups()) {
        // TODO: Change code below to process each `creativeGroup` resource:
        System.out.println(creativeGroup);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.CreativeGroup;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Creative group ID.
    long id = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    CreativeGroup requestBody = new CreativeGroup();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.CreativeGroups.Patch request = dfareportingService.creativeGroups().patch(profileId, id, requestBody);

    CreativeGroup response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.CreativeGroup;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    CreativeGroup requestBody = new CreativeGroup();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.CreativeGroups.Update request = dfareportingService.creativeGroups().update(profileId, requestBody);

    CreativeGroup response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Creative;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Creative ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Creatives.Get request = dfareportingService.creatives().get(profileId, id);

    Creative response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Creative;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Creative requestBody = new Creative();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Creatives.Insert request = dfareportingService.creatives().insert(profileId, requestBody);

    Creative response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Creative;
import com.google.api.services.dfareporting.model.CreativesListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Creatives.List request = dfareportingService.creatives().list(profileId);

    CreativesListResponse response;
    do {
      response = request.execute();
      if (response.getCreatives() == null) {
        continue;
      }
      for (Creative creative : response.getCreatives()) {
        // TODO: Change code below to process each `creative` resource:
        System.out.println(creative);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Creative;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Creative ID.
    long id = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    Creative requestBody = new Creative();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Creatives.Patch request = dfareportingService.creatives().patch(profileId, id, requestBody);

    Creative response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Creative;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Creative requestBody = new Creative();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Creatives.Update request = dfareportingService.creatives().update(profileId, requestBody);

    Creative response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.DimensionValue;
import com.google.api.services.dfareporting.model.DimensionValueList;
import com.google.api.services.dfareporting.model.DimensionValueRequest;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The DFA user profile ID.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    DimensionValueRequest requestBody = new DimensionValueRequest();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.DimensionValues.Query request = dfareportingService.dimensionValues().query(profileId, requestBody);

    DimensionValueList response;
    do {
      response = request.execute();
      if (response.getItems() == null) {
        continue;
      }
      for (DimensionValue dimensionValue : response.getItems()) {
        // TODO: Change code below to process each `dimensionValue` resource:
        System.out.println(dimensionValue);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfareporting
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.DirectorySiteContact;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Directory site contact ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.DirectorySiteContacts.Get request = dfareportingService.directorySiteContacts().get(profileId, id);

    DirectorySiteContact response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.DirectorySiteContact;
import com.google.api.services.dfareporting.model.DirectorySiteContactsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.DirectorySiteContacts.List request = dfareportingService.directorySiteContacts().list(profileId);

    DirectorySiteContactsListResponse response;
    do {
      response = request.execute();
      if (response.getDirectorySiteContacts() == null) {
        continue;
      }
      for (DirectorySiteContact directorySiteContact : response.getDirectorySiteContacts()) {
        // TODO: Change code below to process each `directorySiteContact` resource:
        System.out.println(directorySiteContact);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.DirectorySite;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Directory site ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.DirectorySites.Get request = dfareportingService.directorySites().get(profileId, id);

    DirectorySite response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.DirectorySite;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    DirectorySite requestBody = new DirectorySite();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.DirectorySites.Insert request = dfareportingService.directorySites().insert(profileId, requestBody);

    DirectorySite response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.DirectorySite;
import com.google.api.services.dfareporting.model.DirectorySitesListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.DirectorySites.List request = dfareportingService.directorySites().list(profileId);

    DirectorySitesListResponse response;
    do {
      response = request.execute();
      if (response.getDirectorySites() == null) {
        continue;
      }
      for (DirectorySite directorySite : response.getDirectorySites()) {
        // TODO: Change code below to process each `directorySite` resource:
        System.out.println(directorySite);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // ID of the object of this dynamic targeting key. This is a required field.
    long objectId = 0L;  // TODO: Update placeholder value.

    // Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long
    // and cannot contain commas. All characters are converted to lowercase.
    String name = "";  // TODO: Update placeholder value.

    // Type of the object of this dynamic targeting key. This is a required field.
    String objectType = "";  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.DynamicTargetingKeys.Delete request = dfareportingService.dynamicTargetingKeys().delete(profileId, objectId, name, objectType);

    request.execute();
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.DynamicTargetingKey;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    DynamicTargetingKey requestBody = new DynamicTargetingKey();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.DynamicTargetingKeys.Insert request = dfareportingService.dynamicTargetingKeys().insert(profileId, requestBody);

    DynamicTargetingKey response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.DynamicTargetingKeysListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.DynamicTargetingKeys.List request = dfareportingService.dynamicTargetingKeys().list(profileId);

    DynamicTargetingKeysListResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Event tag ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.EventTags.Delete request = dfareportingService.eventTags().delete(profileId, id);

    request.execute();
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.EventTag;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Event tag ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.EventTags.Get request = dfareportingService.eventTags().get(profileId, id);

    EventTag response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.EventTag;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    EventTag requestBody = new EventTag();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.EventTags.Insert request = dfareportingService.eventTags().insert(profileId, requestBody);

    EventTag response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.EventTagsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.EventTags.List request = dfareportingService.eventTags().list(profileId);

    EventTagsListResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.EventTag;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Event tag ID.
    long id = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    EventTag requestBody = new EventTag();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.EventTags.Patch request = dfareportingService.eventTags().patch(profileId, id, requestBody);

    EventTag response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.EventTag;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    EventTag requestBody = new EventTag();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.EventTags.Update request = dfareportingService.eventTags().update(profileId, requestBody);

    EventTag response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.File;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The ID of the report.
    long reportId = 0L;  // TODO: Update placeholder value.

    // The ID of the report file.
    long fileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Files.Get request = dfareportingService.files().get(reportId, fileId);

    // TODO: Download media content if desired. See:
    // https://developers.google.com/api-client-library/java/google-api-java-client/media-download

    File response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfareporting
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.File;
import com.google.api.services.dfareporting.model.FileList;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The DFA profile ID.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Files.List request = dfareportingService.files().list(profileId);

    FileList response;
    do {
      response = request.execute();
      if (response.getItems() == null) {
        continue;
      }
      for (File file : response.getItems()) {
        // TODO: Change code below to process each `file` resource:
        System.out.println(file);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfareporting
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Floodlight activity ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.FloodlightActivities.Delete request = dfareportingService.floodlightActivities().delete(profileId, id);

    request.execute();
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.FloodlightActivitiesGenerateTagResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.FloodlightActivities.Generatetag request = dfareportingService.floodlightActivities().generatetag(profileId);

    FloodlightActivitiesGenerateTagResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.FloodlightActivity;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Floodlight activity ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.FloodlightActivities.Get request = dfareportingService.floodlightActivities().get(profileId, id);

    FloodlightActivity response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.FloodlightActivity;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    FloodlightActivity requestBody = new FloodlightActivity();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.FloodlightActivities.Insert request = dfareportingService.floodlightActivities().insert(profileId, requestBody);

    FloodlightActivity response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.FloodlightActivitiesListResponse;
import com.google.api.services.dfareporting.model.FloodlightActivity;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.FloodlightActivities.List request = dfareportingService.floodlightActivities().list(profileId);

    FloodlightActivitiesListResponse response;
    do {
      response = request.execute();
      if (response.getFloodlightActivities() == null) {
        continue;
      }
      for (FloodlightActivity floodlightActivity : response.getFloodlightActivities()) {
        // TODO: Change code below to process each `floodlightActivity` resource:
        System.out.println(floodlightActivity);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.FloodlightActivity;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Floodlight activity ID.
    long id = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    FloodlightActivity requestBody = new FloodlightActivity();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.FloodlightActivities.Patch request = dfareportingService.floodlightActivities().patch(profileId, id, requestBody);

    FloodlightActivity response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.FloodlightActivity;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    FloodlightActivity requestBody = new FloodlightActivity();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.FloodlightActivities.Update request = dfareportingService.floodlightActivities().update(profileId, requestBody);

    FloodlightActivity response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.FloodlightActivityGroup;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Floodlight activity Group ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.FloodlightActivityGroups.Get request = dfareportingService.floodlightActivityGroups().get(profileId, id);

    FloodlightActivityGroup response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.FloodlightActivityGroup;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    FloodlightActivityGroup requestBody = new FloodlightActivityGroup();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.FloodlightActivityGroups.Insert request = dfareportingService.floodlightActivityGroups().insert(profileId, requestBody);

    FloodlightActivityGroup response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.FloodlightActivityGroup;
import com.google.api.services.dfareporting.model.FloodlightActivityGroupsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.FloodlightActivityGroups.List request = dfareportingService.floodlightActivityGroups().list(profileId);

    FloodlightActivityGroupsListResponse response;
    do {
      response = request.execute();
      if (response.getFloodlightActivityGroups() == null) {
        continue;
      }
      for (FloodlightActivityGroup floodlightActivityGroup : response.getFloodlightActivityGroups()) {
        // TODO: Change code below to process each `floodlightActivityGroup` resource:
        System.out.println(floodlightActivityGroup);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.FloodlightActivityGroup;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Floodlight activity Group ID.
    long id = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    FloodlightActivityGroup requestBody = new FloodlightActivityGroup();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.FloodlightActivityGroups.Patch request = dfareportingService.floodlightActivityGroups().patch(profileId, id, requestBody);

    FloodlightActivityGroup response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.FloodlightActivityGroup;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    FloodlightActivityGroup requestBody = new FloodlightActivityGroup();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.FloodlightActivityGroups.Update request = dfareportingService.floodlightActivityGroups().update(profileId, requestBody);

    FloodlightActivityGroup response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.FloodlightConfiguration;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Floodlight configuration ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.FloodlightConfigurations.Get request = dfareportingService.floodlightConfigurations().get(profileId, id);

    FloodlightConfiguration response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.FloodlightConfigurationsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.FloodlightConfigurations.List request = dfareportingService.floodlightConfigurations().list(profileId);

    FloodlightConfigurationsListResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.FloodlightConfiguration;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Floodlight configuration ID.
    long id = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    FloodlightConfiguration requestBody = new FloodlightConfiguration();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.FloodlightConfigurations.Patch request = dfareportingService.floodlightConfigurations().patch(profileId, id, requestBody);

    FloodlightConfiguration response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.FloodlightConfiguration;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    FloodlightConfiguration requestBody = new FloodlightConfiguration();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.FloodlightConfigurations.Update request = dfareportingService.floodlightConfigurations().update(profileId, requestBody);

    FloodlightConfiguration response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.InventoryItem;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Project ID for order documents.
    long projectId = 0L;  // TODO: Update placeholder value.

    // Inventory item ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.InventoryItems.Get request = dfareportingService.inventoryItems().get(profileId, projectId, id);

    InventoryItem response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.InventoryItem;
import com.google.api.services.dfareporting.model.InventoryItemsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Project ID for order documents.
    long projectId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.InventoryItems.List request = dfareportingService.inventoryItems().list(profileId, projectId);

    InventoryItemsListResponse response;
    do {
      response = request.execute();
      if (response.getInventoryItems() == null) {
        continue;
      }
      for (InventoryItem inventoryItem : response.getInventoryItems()) {
        // TODO: Change code below to process each `inventoryItem` resource:
        System.out.println(inventoryItem);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Landing page campaign ID.
    long campaignId = 0L;  // TODO: Update placeholder value.

    // Landing page ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.LandingPages.Delete request = dfareportingService.landingPages().delete(profileId, campaignId, id);

    request.execute();
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.LandingPage;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Landing page campaign ID.
    long campaignId = 0L;  // TODO: Update placeholder value.

    // Landing page ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.LandingPages.Get request = dfareportingService.landingPages().get(profileId, campaignId, id);

    LandingPage response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.LandingPage;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Landing page campaign ID.
    long campaignId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    LandingPage requestBody = new LandingPage();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.LandingPages.Insert request = dfareportingService.landingPages().insert(profileId, campaignId, requestBody);

    LandingPage response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.LandingPagesListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Landing page campaign ID.
    long campaignId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.LandingPages.List request = dfareportingService.landingPages().list(profileId, campaignId);

    LandingPagesListResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.LandingPage;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Landing page campaign ID.
    long campaignId = 0L;  // TODO: Update placeholder value.

    // Landing page ID.
    long id = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    LandingPage requestBody = new LandingPage();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.LandingPages.Patch request = dfareportingService.landingPages().patch(profileId, campaignId, id, requestBody);

    LandingPage response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.LandingPage;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Landing page campaign ID.
    long campaignId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    LandingPage requestBody = new LandingPage();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.LandingPages.Update request = dfareportingService.landingPages().update(profileId, campaignId, requestBody);

    LandingPage response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.LanguagesListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Languages.List request = dfareportingService.languages().list(profileId);

    LanguagesListResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.MetrosListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Metros.List request = dfareportingService.metros().list(profileId);

    MetrosListResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.MobileCarrier;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Mobile carrier ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.MobileCarriers.Get request = dfareportingService.mobileCarriers().get(profileId, id);

    MobileCarrier response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.MobileCarriersListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.MobileCarriers.List request = dfareportingService.mobileCarriers().list(profileId);

    MobileCarriersListResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.OperatingSystemVersion;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Operating system version ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.OperatingSystemVersions.Get request = dfareportingService.operatingSystemVersions().get(profileId, id);

    OperatingSystemVersion response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.OperatingSystemVersionsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.OperatingSystemVersions.List request = dfareportingService.operatingSystemVersions().list(profileId);

    OperatingSystemVersionsListResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.OperatingSystem;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Operating system DART ID.
    long dartId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.OperatingSystems.Get request = dfareportingService.operatingSystems().get(profileId, dartId);

    OperatingSystem response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.OperatingSystemsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.OperatingSystems.List request = dfareportingService.operatingSystems().list(profileId);

    OperatingSystemsListResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.OrderDocument;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Project ID for order documents.
    long projectId = 0L;  // TODO: Update placeholder value.

    // Order document ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.OrderDocuments.Get request = dfareportingService.orderDocuments().get(profileId, projectId, id);

    OrderDocument response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.OrderDocument;
import com.google.api.services.dfareporting.model.OrderDocumentsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Project ID for order documents.
    long projectId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.OrderDocuments.List request = dfareportingService.orderDocuments().list(profileId, projectId);

    OrderDocumentsListResponse response;
    do {
      response = request.execute();
      if (response.getOrderDocuments() == null) {
        continue;
      }
      for (OrderDocument orderDocument : response.getOrderDocuments()) {
        // TODO: Change code below to process each `orderDocument` resource:
        System.out.println(orderDocument);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Order;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Project ID for orders.
    long projectId = 0L;  // TODO: Update placeholder value.

    // Order ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Orders.Get request = dfareportingService.orders().get(profileId, projectId, id);

    Order response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Order;
import com.google.api.services.dfareporting.model.OrdersListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Project ID for orders.
    long projectId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Orders.List request = dfareportingService.orders().list(profileId, projectId);

    OrdersListResponse response;
    do {
      response = request.execute();
      if (response.getOrders() == null) {
        continue;
      }
      for (Order order : response.getOrders()) {
        // TODO: Change code below to process each `order` resource:
        System.out.println(order);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.PlacementGroup;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Placement group ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.PlacementGroups.Get request = dfareportingService.placementGroups().get(profileId, id);

    PlacementGroup response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.PlacementGroup;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    PlacementGroup requestBody = new PlacementGroup();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.PlacementGroups.Insert request = dfareportingService.placementGroups().insert(profileId, requestBody);

    PlacementGroup response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.PlacementGroup;
import com.google.api.services.dfareporting.model.PlacementGroupsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.PlacementGroups.List request = dfareportingService.placementGroups().list(profileId);

    PlacementGroupsListResponse response;
    do {
      response = request.execute();
      if (response.getPlacementGroups() == null) {
        continue;
      }
      for (PlacementGroup placementGroup : response.getPlacementGroups()) {
        // TODO: Change code below to process each `placementGroup` resource:
        System.out.println(placementGroup);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.PlacementGroup;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Placement group ID.
    long id = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    PlacementGroup requestBody = new PlacementGroup();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.PlacementGroups.Patch request = dfareportingService.placementGroups().patch(profileId, id, requestBody);

    PlacementGroup response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.PlacementGroup;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    PlacementGroup requestBody = new PlacementGroup();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.PlacementGroups.Update request = dfareportingService.placementGroups().update(profileId, requestBody);

    PlacementGroup response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Placement strategy ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.PlacementStrategies.Delete request = dfareportingService.placementStrategies().delete(profileId, id);

    request.execute();
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.PlacementStrategy;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Placement strategy ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.PlacementStrategies.Get request = dfareportingService.placementStrategies().get(profileId, id);

    PlacementStrategy response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.PlacementStrategy;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    PlacementStrategy requestBody = new PlacementStrategy();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.PlacementStrategies.Insert request = dfareportingService.placementStrategies().insert(profileId, requestBody);

    PlacementStrategy response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.PlacementStrategiesListResponse;
import com.google.api.services.dfareporting.model.PlacementStrategy;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.PlacementStrategies.List request = dfareportingService.placementStrategies().list(profileId);

    PlacementStrategiesListResponse response;
    do {
      response = request.execute();
      if (response.getPlacementStrategies() == null) {
        continue;
      }
      for (PlacementStrategy placementStrategy : response.getPlacementStrategies()) {
        // TODO: Change code below to process each `placementStrategy` resource:
        System.out.println(placementStrategy);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.PlacementStrategy;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Placement strategy ID.
    long id = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    PlacementStrategy requestBody = new PlacementStrategy();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.PlacementStrategies.Patch request = dfareportingService.placementStrategies().patch(profileId, id, requestBody);

    PlacementStrategy response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.PlacementStrategy;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    PlacementStrategy requestBody = new PlacementStrategy();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.PlacementStrategies.Update request = dfareportingService.placementStrategies().update(profileId, requestBody);

    PlacementStrategy response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.PlacementsGenerateTagsResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Placements.Generatetags request = dfareportingService.placements().generatetags(profileId);

    PlacementsGenerateTagsResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Placement;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Placement ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Placements.Get request = dfareportingService.placements().get(profileId, id);

    Placement response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Placement;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Placement requestBody = new Placement();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Placements.Insert request = dfareportingService.placements().insert(profileId, requestBody);

    Placement response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Placement;
import com.google.api.services.dfareporting.model.PlacementsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Placements.List request = dfareportingService.placements().list(profileId);

    PlacementsListResponse response;
    do {
      response = request.execute();
      if (response.getPlacements() == null) {
        continue;
      }
      for (Placement placement : response.getPlacements()) {
        // TODO: Change code below to process each `placement` resource:
        System.out.println(placement);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Placement;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Placement ID.
    long id = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    Placement requestBody = new Placement();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Placements.Patch request = dfareportingService.placements().patch(profileId, id, requestBody);

    Placement response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Placement;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Placement requestBody = new Placement();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Placements.Update request = dfareportingService.placements().update(profileId, requestBody);

    Placement response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.PlatformType;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Platform type ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.PlatformTypes.Get request = dfareportingService.platformTypes().get(profileId, id);

    PlatformType response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.PlatformTypesListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.PlatformTypes.List request = dfareportingService.platformTypes().list(profileId);

    PlatformTypesListResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.PostalCode;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Postal code ID.
    String code = "";  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.PostalCodes.Get request = dfareportingService.postalCodes().get(profileId, code);

    PostalCode response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.PostalCodesListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.PostalCodes.List request = dfareportingService.postalCodes().list(profileId);

    PostalCodesListResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Project;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Project ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Projects.Get request = dfareportingService.projects().get(profileId, id);

    Project response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Project;
import com.google.api.services.dfareporting.model.ProjectsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Projects.List request = dfareportingService.projects().list(profileId);

    ProjectsListResponse response;
    do {
      response = request.execute();
      if (response.getProjects() == null) {
        continue;
      }
      for (Project project : response.getProjects()) {
        // TODO: Change code below to process each `project` resource:
        System.out.println(project);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.RegionsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Regions.List request = dfareportingService.regions().list(profileId);

    RegionsListResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.RemarketingListShare;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Remarketing list ID.
    long remarketingListId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.RemarketingListShares.Get request = dfareportingService.remarketingListShares().get(profileId, remarketingListId);

    RemarketingListShare response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.RemarketingListShare;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Remarketing list ID.
    long remarketingListId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    RemarketingListShare requestBody = new RemarketingListShare();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.RemarketingListShares.Patch request = dfareportingService.remarketingListShares().patch(profileId, remarketingListId, requestBody);

    RemarketingListShare response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.RemarketingListShare;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    RemarketingListShare requestBody = new RemarketingListShare();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.RemarketingListShares.Update request = dfareportingService.remarketingListShares().update(profileId, requestBody);

    RemarketingListShare response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.RemarketingList;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Remarketing list ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.RemarketingLists.Get request = dfareportingService.remarketingLists().get(profileId, id);

    RemarketingList response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.RemarketingList;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    RemarketingList requestBody = new RemarketingList();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.RemarketingLists.Insert request = dfareportingService.remarketingLists().insert(profileId, requestBody);

    RemarketingList response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.RemarketingList;
import com.google.api.services.dfareporting.model.RemarketingListsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Select only remarketing lists owned by this advertiser.
    long advertiserId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.RemarketingLists.List request = dfareportingService.remarketingLists().list(profileId, advertiserId);

    RemarketingListsListResponse response;
    do {
      response = request.execute();
      if (response.getRemarketingLists() == null) {
        continue;
      }
      for (RemarketingList remarketingList : response.getRemarketingLists()) {
        // TODO: Change code below to process each `remarketingList` resource:
        System.out.println(remarketingList);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.RemarketingList;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Remarketing list ID.
    long id = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    RemarketingList requestBody = new RemarketingList();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.RemarketingLists.Patch request = dfareportingService.remarketingLists().patch(profileId, id, requestBody);

    RemarketingList response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.RemarketingList;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    RemarketingList requestBody = new RemarketingList();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.RemarketingLists.Update request = dfareportingService.remarketingLists().update(profileId, requestBody);

    RemarketingList response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.CompatibleFields;
import com.google.api.services.dfareporting.model.Report;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The DFA user profile ID.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Report requestBody = new Report();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Reports.CompatibleFields.Query request = dfareportingService.reports().compatibleFields().query(profileId, requestBody);

    CompatibleFields response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfareporting
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The DFA user profile ID.
    long profileId = 0L;  // TODO: Update placeholder value.

    // The ID of the report.
    long reportId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Reports.Delete request = dfareportingService.reports().delete(profileId, reportId);

    request.execute();
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfareporting
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.File;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The DFA profile ID.
    long profileId = 0L;  // TODO: Update placeholder value.

    // The ID of the report.
    long reportId = 0L;  // TODO: Update placeholder value.

    // The ID of the report file.
    long fileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Reports.Files.Get request = dfareportingService.reports().files().get(profileId, reportId, fileId);

    // TODO: Download media content if desired. See:
    // https://developers.google.com/api-client-library/java/google-api-java-client/media-download

    File response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfareporting
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.File;
import com.google.api.services.dfareporting.model.FileList;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The DFA profile ID.
    long profileId = 0L;  // TODO: Update placeholder value.

    // The ID of the parent report.
    long reportId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Reports.Files.List request = dfareportingService.reports().files().list(profileId, reportId);

    FileList response;
    do {
      response = request.execute();
      if (response.getItems() == null) {
        continue;
      }
      for (File file : response.getItems()) {
        // TODO: Change code below to process each `file` resource:
        System.out.println(file);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfareporting
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Report;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The DFA user profile ID.
    long profileId = 0L;  // TODO: Update placeholder value.

    // The ID of the report.
    long reportId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Reports.Get request = dfareportingService.reports().get(profileId, reportId);

    Report response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfareporting
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Report;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The DFA user profile ID.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Report requestBody = new Report();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Reports.Insert request = dfareportingService.reports().insert(profileId, requestBody);

    Report response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfareporting
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Report;
import com.google.api.services.dfareporting.model.ReportList;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The DFA user profile ID.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Reports.List request = dfareportingService.reports().list(profileId);

    ReportList response;
    do {
      response = request.execute();
      if (response.getItems() == null) {
        continue;
      }
      for (Report report : response.getItems()) {
        // TODO: Change code below to process each `report` resource:
        System.out.println(report);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfareporting
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Report;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The DFA user profile ID.
    long profileId = 0L;  // TODO: Update placeholder value.

    // The ID of the report.
    long reportId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    Report requestBody = new Report();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Reports.Patch request = dfareportingService.reports().patch(profileId, reportId, requestBody);

    Report response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfareporting
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.File;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The DFA profile ID.
    long profileId = 0L;  // TODO: Update placeholder value.

    // The ID of the report.
    long reportId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Reports.Run request = dfareportingService.reports().run(profileId, reportId);

    File response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfareporting
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Report;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The DFA user profile ID.
    long profileId = 0L;  // TODO: Update placeholder value.

    // The ID of the report.
    long reportId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Report requestBody = new Report();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Reports.Update request = dfareportingService.reports().update(profileId, reportId, requestBody);

    Report response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfareporting
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Site;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Site ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Sites.Get request = dfareportingService.sites().get(profileId, id);

    Site response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Site;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Site requestBody = new Site();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Sites.Insert request = dfareportingService.sites().insert(profileId, requestBody);

    Site response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Site;
import com.google.api.services.dfareporting.model.SitesListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Sites.List request = dfareportingService.sites().list(profileId);

    SitesListResponse response;
    do {
      response = request.execute();
      if (response.getSites() == null) {
        continue;
      }
      for (Site site : response.getSites()) {
        // TODO: Change code below to process each `site` resource:
        System.out.println(site);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Site;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Site ID.
    long id = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    Site requestBody = new Site();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Sites.Patch request = dfareportingService.sites().patch(profileId, id, requestBody);

    Site response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Site;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Site requestBody = new Site();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Sites.Update request = dfareportingService.sites().update(profileId, requestBody);

    Site response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Size;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Size ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Sizes.Get request = dfareportingService.sizes().get(profileId, id);

    Size response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Size;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Size requestBody = new Size();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Sizes.Insert request = dfareportingService.sizes().insert(profileId, requestBody);

    Size response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.SizesListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Sizes.List request = dfareportingService.sizes().list(profileId);

    SizesListResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Subaccount;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Subaccount ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Subaccounts.Get request = dfareportingService.subaccounts().get(profileId, id);

    Subaccount response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Subaccount;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Subaccount requestBody = new Subaccount();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Subaccounts.Insert request = dfareportingService.subaccounts().insert(profileId, requestBody);

    Subaccount response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Subaccount;
import com.google.api.services.dfareporting.model.SubaccountsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Subaccounts.List request = dfareportingService.subaccounts().list(profileId);

    SubaccountsListResponse response;
    do {
      response = request.execute();
      if (response.getSubaccounts() == null) {
        continue;
      }
      for (Subaccount subaccount : response.getSubaccounts()) {
        // TODO: Change code below to process each `subaccount` resource:
        System.out.println(subaccount);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Subaccount;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Subaccount ID.
    long id = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    Subaccount requestBody = new Subaccount();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Subaccounts.Patch request = dfareportingService.subaccounts().patch(profileId, id, requestBody);

    Subaccount response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.Subaccount;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Subaccount requestBody = new Subaccount();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.Subaccounts.Update request = dfareportingService.subaccounts().update(profileId, requestBody);

    Subaccount response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.TargetableRemarketingList;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Remarketing list ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.TargetableRemarketingLists.Get request = dfareportingService.targetableRemarketingLists().get(profileId, id);

    TargetableRemarketingList response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.TargetableRemarketingList;
import com.google.api.services.dfareporting.model.TargetableRemarketingListsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Select only targetable remarketing lists targetable by these advertisers.
    long advertiserId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.TargetableRemarketingLists.List request = dfareportingService.targetableRemarketingLists().list(profileId, advertiserId);

    TargetableRemarketingListsListResponse response;
    do {
      response = request.execute();
      if (response.getTargetableRemarketingLists() == null) {
        continue;
      }
      for (TargetableRemarketingList targetableRemarketingList : response.getTargetableRemarketingLists()) {
        // TODO: Change code below to process each `targetableRemarketingList` resource:
        System.out.println(targetableRemarketingList);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.TargetingTemplate;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Targeting template ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.TargetingTemplates.Get request = dfareportingService.targetingTemplates().get(profileId, id);

    TargetingTemplate response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.TargetingTemplate;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    TargetingTemplate requestBody = new TargetingTemplate();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.TargetingTemplates.Insert request = dfareportingService.targetingTemplates().insert(profileId, requestBody);

    TargetingTemplate response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.TargetingTemplate;
import com.google.api.services.dfareporting.model.TargetingTemplatesListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.TargetingTemplates.List request = dfareportingService.targetingTemplates().list(profileId);

    TargetingTemplatesListResponse response;
    do {
      response = request.execute();
      if (response.getTargetingTemplates() == null) {
        continue;
      }
      for (TargetingTemplate targetingTemplate : response.getTargetingTemplates()) {
        // TODO: Change code below to process each `targetingTemplate` resource:
        System.out.println(targetingTemplate);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.TargetingTemplate;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // Targeting template ID.
    long id = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    TargetingTemplate requestBody = new TargetingTemplate();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.TargetingTemplates.Patch request = dfareportingService.targetingTemplates().patch(profileId, id, requestBody);

    TargetingTemplate response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.TargetingTemplate;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    TargetingTemplate requestBody = new TargetingTemplate();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.TargetingTemplates.Update request = dfareportingService.targetingTemplates().update(profileId, requestBody);

    TargetingTemplate response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.UserProfile;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The user profile ID.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.UserProfiles.Get request = dfareportingService.userProfiles().get(profileId);

    UserProfile response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using one of the following scopes:
    //    https://www.googleapis.com/auth/dfareporting
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.UserProfileList;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.UserProfiles.List request = dfareportingService.userProfiles().list();

    UserProfileList response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using one of the following scopes:
    //    https://www.googleapis.com/auth/dfareporting
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.UserRolePermissionGroup;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // User role permission group ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.UserRolePermissionGroups.Get request = dfareportingService.userRolePermissionGroups().get(profileId, id);

    UserRolePermissionGroup response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.UserRolePermissionGroupsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.UserRolePermissionGroups.List request = dfareportingService.userRolePermissionGroups().list(profileId);

    UserRolePermissionGroupsListResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.UserRolePermission;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // User role permission ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.UserRolePermissions.Get request = dfareportingService.userRolePermissions().get(profileId, id);

    UserRolePermission response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.UserRolePermissionsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.UserRolePermissions.List request = dfareportingService.userRolePermissions().list(profileId);

    UserRolePermissionsListResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // User role ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.UserRoles.Delete request = dfareportingService.userRoles().delete(profileId, id);

    request.execute();
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.UserRole;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // User role ID.
    long id = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.UserRoles.Get request = dfareportingService.userRoles().get(profileId, id);

    UserRole response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.UserRole;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    UserRole requestBody = new UserRole();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.UserRoles.Insert request = dfareportingService.userRoles().insert(profileId, requestBody);

    UserRole response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.UserRole;
import com.google.api.services.dfareporting.model.UserRolesListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.UserRoles.List request = dfareportingService.userRoles().list(profileId);

    UserRolesListResponse response;
    do {
      response = request.execute();
      if (response.getUserRoles() == null) {
        continue;
      }
      for (UserRole userRole : response.getUserRoles()) {
        // TODO: Change code below to process each `userRole` resource:
        System.out.println(userRole);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.UserRole;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // User role ID.
    long id = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    UserRole requestBody = new UserRole();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.UserRoles.Patch request = dfareportingService.userRoles().patch(profileId, id, requestBody);

    UserRole response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dfareporting
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/dfareporting/v2.6/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.dfareporting.Dfareporting;
import com.google.api.services.dfareporting.model.UserRole;
import java.io.IOException;
import java.security.GeneralSecurityException;

public class DfareportingExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // User profile ID associated with this request.
    long profileId = 0L;  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    UserRole requestBody = new UserRole();

    Dfareporting dfareportingService = createDfareportingService();
    Dfareporting.UserRoles.Update request = dfareportingService.userRoles().update(profileId, requestBody);

    UserRole response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Dfareporting createDfareportingService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // TODO: Change placeholder below to generate authentication credentials. See:
    // https://foo.com/bar
    //
    // Authorize using the following scope:
    //    https://www.googleapis.com/auth/dfatrafficking
    GoogleCredential credential = null;

    return new Dfareporting.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DfareportingSample/0.1")
        .build();
  }
}
