============== file: library/library_service_api.py ==============
# Copyright 2016 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# EDITING INSTRUCTIONS
# This file was generated from the file
# https://github.com/google/googleapis/blob/master/library.proto,
# and updates to that file get reflected here through a refresh process.
# For the short term, the refresh process will only be runnable by Google engineers.
#
# The only allowed edits are to method and file documentation. A 3-way
# merge preserves those additions if the generated source changes.

"""Accesses the google.example.library.v1 LibraryService API."""

import json
import os
import pkg_resources
import platform

from google.gax import api_callable
from google.gax import config
from google.gax import path_template
import google.gax

from google.example.library.v1 import field_mask_pb2 as v1_field_mask_pb2
from google.example.library.v1 import library_pb2
from google.protobuf import field_mask_pb2 as protobuf_field_mask_pb2


_BundleDesc = google.gax.BundleDescriptor


_PageDesc = google.gax.PageDescriptor


class LibraryServiceApi(object):
    """
    This API represents a simple digital library.  It lets you manage Shelf
    resources and Book resources in the library. It defines the following
    resource model:

    - The API has a collection of ``Shelf``
      resources, named ``shelves/*``

    - Each Shelf has a collection of ``Book``
      resources, named ``shelves/*/books/*``

    Check out `cloud docs! <https://cloud.google.com/library/example/link>`_.
    This is `not a cloud link <http://www.google.com>`_.
    """

    SERVICE_ADDRESS = 'library-example.googleapis.com'
    """The default address of the service."""

    DEFAULT_SERVICE_PORT = 443
    """The default port of the service."""

    _CODE_GEN_NAME_VERSION = 'gapic/0.1.0'

    _GAX_VERSION = pkg_resources.get_distribution('google-gax').version

    _DEFAULT_TIMEOUT = 30

    _PAGE_DESCRIPTORS = {
        'list_shelves': _PageDesc(
            'page_token',
            'next_page_token',
            'shelves'
        ),
        'list_books': _PageDesc(
            'page_token',
            'next_page_token',
            'books'
        ),
        'list_strings': _PageDesc(
            'page_token',
            'next_page_token',
            'strings'
        )
    }

    _BUNDLE_DESCRIPTORS = {
        'publish_series': _BundleDesc(
            'books',
            [
                'edition',
                'shelf.name'
            ],
            subresponse_field='book_names',
        )
    }

    # The scopes needed to make gRPC calls to all of the methods defined in
    # this service
    _ALL_SCOPES = (
        'https://www.googleapis.com/auth/library',
        'https://www.googleapis.com/auth/cloud-platform',
    )

    _SHELF_PATH_TEMPLATE = path_template.PathTemplate(
        'shelves/{shelf}')
    _BOOK_PATH_TEMPLATE = path_template.PathTemplate(
        'shelves/{shelf}/books/{book}')

    @classmethod
    def shelf_path(cls, shelf):
        """Returns a fully-qualified shelf resource name string."""
        return cls._SHELF_PATH_TEMPLATE.render({
            'shelf': shelf,
        })

    @classmethod
    def book_path(cls, shelf, book):
        """Returns a fully-qualified book resource name string."""
        return cls._BOOK_PATH_TEMPLATE.render({
            'shelf': shelf,
            'book': book,
        })

    @classmethod
    def match_shelf_from_shelf_name(cls, shelf_name):
        """Parses the shelf from a shelf resource.

        Args:
          shelf_name (string): A fully-qualified path representing a shelf
            resource.

        Returns:
          A string representing the shelf.
        """
        return cls._SHELF_PATH_TEMPLATE.match(shelf_name).get('shelf')

    @classmethod
    def match_shelf_from_book_name(cls, book_name):
        """Parses the shelf from a book resource.

        Args:
          book_name (string): A fully-qualified path representing a book
            resource.

        Returns:
          A string representing the shelf.
        """
        return cls._BOOK_PATH_TEMPLATE.match(book_name).get('shelf')

    @classmethod
    def match_book_from_book_name(cls, book_name):
        """Parses the book from a book resource.

        Args:
          book_name (string): A fully-qualified path representing a book
            resource.

        Returns:
          A string representing the book.
        """
        return cls._BOOK_PATH_TEMPLATE.match(book_name).get('book')

    def __init__(
            self,
            service_path=SERVICE_ADDRESS,
            port=DEFAULT_SERVICE_PORT,
            channel=None,
            metadata_transformer=None,
            ssl_creds=None,
            scopes=None,
            client_config=None,
            timeout=_DEFAULT_TIMEOUT,
            app_name='gax',
            app_version=_GAX_VERSION):
        """Constructor.

        Args:
          service_path (string): The domain name of the API remote host.
          port (int): The port on which to connect to the remote host.
          channel (:class:`grpc.beta.implementations.Channel`): A ``Channel``
            object through which to make calls.
          ssl_creds (:class:`grpc.beta.implementations.ClientCredentials`):
            A `ClientCredentials` for use with an SSL-enabled channel.
          client_config (dict):
            A dictionary for call options for each method. See
            :func:`google.gax.construct_settings` for the structure of
            this data. Falls back to the default config if not specified
            or the specified config is missing data points.
          metadata_transformer (Callable[[], list]): A function that creates
             the metadata for requests.
          timeout (int): The default timeout, in seconds, for calls made
            through this client
          app_name (string): The codename of the calling service.
          app_version (string): The version of the calling service.

        Returns:
          A LibraryServiceApi object.
        """
        if scopes is None:
            scopes = self._ALL_SCOPES
        if client_config is None:
            client_config = {}
        default_client_config = json.loads(pkg_resources.resource_string(
            __name__, 'library_service_client_config.json'))
        self._defaults = api_callable.construct_settings(
            'google.example.library.v1.LibraryService',
            default_client_config,
            client_config,
            config.STATUS_CODE_NAMES,
            timeout,
            bundle_descriptors=self._BUNDLE_DESCRIPTORS,
            page_descriptors=self._PAGE_DESCRIPTORS)
        goog_api_client = '{}/{} {} gax/{} python/{}'.format(
            app_name,
            app_version,
            self._CODE_GEN_NAME_VERSION,
            self._GAX_VERSION,
            platform.python_version()
        )
        self._headers = [('x-goog-api-client', goog_api_client)]
        self.stub = config.create_stub(
            library_pb2.beta_create_LibraryService_stub,
            service_path,
            port,
            ssl_creds=ssl_creds,
            channel=channel,
            metadata_transformer=metadata_transformer,
            scopes=scopes)

    # Service calls
    def create_shelf(
            self,
            shelf,
            options=None):
        """
        Creates a shelf, and returns the new Shelf.

        Args:
          shelf (:class:`google.example.library.v1.library_pb2.Shelf`): The shelf to create.
          options (:class:`google.gax.CallOptions`): Overrides the default
            settings for this call, e.g, timeout, retries etc.

        Returns:
          A :class:`google.example.library.v1.library_pb2.Shelf` instance.

        Raises:
          :exc:`google.gax.errors.GaxError` if the RPC is aborted.
        """
        req = library_pb2.CreateShelfRequest(
            shelf=shelf)
        settings = self._defaults['create_shelf'].merge(options)
        api_call = api_callable.create_api_call(
            self.stub.CreateShelf, settings=settings)
        return api_call(req, metadata=self._headers)

    def get_shelf(
            self,
            name,
            message=None,
            string_builder=None,
            options=None):
        """
        Gets a shelf.

        Args:
          name (string): The name of the shelf to retrieve.
          message (:class:`google.example.library.v1.library_pb2.SomeMessage`): Field to verify that message-type query parameter gets flattened.
          string_builder (:class:`google.example.library.v1.library_pb2.StringBuilder`)
          options (:class:`google.gax.CallOptions`): Overrides the default
            settings for this call, e.g, timeout, retries etc.

        Returns:
          A :class:`google.example.library.v1.library_pb2.Shelf` instance.

        Raises:
          :exc:`google.gax.errors.GaxError` if the RPC is aborted.
        """
        if message is None:
            message = library_pb2.SomeMessage()
        if string_builder is None:
            string_builder = library_pb2.StringBuilder()
        req = library_pb2.GetShelfRequest(
            name=name,
            message=message,
            string_builder=string_builder)
        settings = self._defaults['get_shelf'].merge(options)
        api_call = api_callable.create_api_call(
            self.stub.GetShelf, settings=settings)
        return api_call(req, metadata=self._headers)

    def list_shelves(
            self,
            options=None):
        """
        Lists shelves.

        Args:
          options (:class:`google.gax.CallOptions`): Overrides the default
            settings for this call, e.g, timeout, retries etc.

        Returns:
          A :class:`google.gax.PageIterator` instance. By default, this
          is an iterable of :class:`google.example.library.v1.library_pb2.Shelf` instances.
          This object can also be configured to iterate over the pages
          of the response through the `CallOptions` parameter.

        Raises:
          :exc:`google.gax.errors.GaxError` if the RPC is aborted.
        """
        req = library_pb2.ListShelvesRequest()
        settings = self._defaults['list_shelves'].merge(options)
        api_call = api_callable.create_api_call(
            self.stub.ListShelves, settings=settings)
        return api_call(req, metadata=self._headers)

    def delete_shelf(
            self,
            name,
            options=None):
        """
        Deletes a shelf.

        Args:
          name (string): The name of the shelf to delete.
          options (:class:`google.gax.CallOptions`): Overrides the default
            settings for this call, e.g, timeout, retries etc.

        Raises:
          :exc:`google.gax.errors.GaxError` if the RPC is aborted.
        """
        req = library_pb2.DeleteShelfRequest(
            name=name)
        settings = self._defaults['delete_shelf'].merge(options)
        api_call = api_callable.create_api_call(
            self.stub.DeleteShelf, settings=settings)
        api_call(req, metadata=self._headers)

    def merge_shelves(
            self,
            name,
            other_shelf_name,
            options=None):
        """
        Merges two shelves by adding all books from the shelf named
        ``other_shelf_name`` to shelf ``name``, and deletes
        ``other_shelf_name``. Returns the updated shelf.

        Args:
          name (string): The name of the shelf we're adding books to.
          other_shelf_name (string): The name of the shelf we're removing books from and deleting.
          options (:class:`google.gax.CallOptions`): Overrides the default
            settings for this call, e.g, timeout, retries etc.

        Returns:
          A :class:`google.example.library.v1.library_pb2.Shelf` instance.

        Raises:
          :exc:`google.gax.errors.GaxError` if the RPC is aborted.
        """
        req = library_pb2.MergeShelvesRequest(
            name=name,
            other_shelf_name=other_shelf_name)
        settings = self._defaults['merge_shelves'].merge(options)
        api_call = api_callable.create_api_call(
            self.stub.MergeShelves, settings=settings)
        return api_call(req, metadata=self._headers)

    def create_book(
            self,
            name,
            book,
            options=None):
        """
        Creates a book.

        Args:
          name (string): The name of the shelf in which the book is created.
          book (:class:`google.example.library.v1.library_pb2.Book`): The book to create.
          options (:class:`google.gax.CallOptions`): Overrides the default
            settings for this call, e.g, timeout, retries etc.

        Returns:
          A :class:`google.example.library.v1.library_pb2.Book` instance.

        Raises:
          :exc:`google.gax.errors.GaxError` if the RPC is aborted.
        """
        req = library_pb2.CreateBookRequest(
            name=name,
            book=book)
        settings = self._defaults['create_book'].merge(options)
        api_call = api_callable.create_api_call(
            self.stub.CreateBook, settings=settings)
        return api_call(req, metadata=self._headers)

    def publish_series(
            self,
            shelf,
            books,
            edition=0,
            options=None):
        """
        Creates a series of books.

        Args:
          shelf (:class:`google.example.library.v1.library_pb2.Shelf`): The shelf in which the series is created.
          books (list[:class:`google.example.library.v1.library_pb2.Book`]): The books to publish in the series.
          edition (int): The edition of the series
          options (:class:`google.gax.CallOptions`): Overrides the default
            settings for this call, e.g, timeout, retries etc.

        Returns:
          A :class:`google.example.library.v1.library_pb2.PublishSeriesResponse` instance.

        Raises:
          :exc:`google.gax.errors.GaxError` if the RPC is aborted.
        """
        req = library_pb2.PublishSeriesRequest(
            shelf=shelf,
            books=books,
            edition=edition)
        settings = self._defaults['publish_series'].merge(options)
        api_call = api_callable.create_api_call(
            self.stub.PublishSeries, settings=settings)
        return api_call(req, metadata=self._headers)

    def get_book(
            self,
            name,
            options=None):
        """
        Gets a book.

        Args:
          name (string): The name of the book to retrieve.
          options (:class:`google.gax.CallOptions`): Overrides the default
            settings for this call, e.g, timeout, retries etc.

        Returns:
          A :class:`google.example.library.v1.library_pb2.Book` instance.

        Raises:
          :exc:`google.gax.errors.GaxError` if the RPC is aborted.
        """
        req = library_pb2.GetBookRequest(
            name=name)
        settings = self._defaults['get_book'].merge(options)
        api_call = api_callable.create_api_call(
            self.stub.GetBook, settings=settings)
        return api_call(req, metadata=self._headers)

    def list_books(
            self,
            name,
            page_size=0,
            filter_='',
            options=None):
        """
        Lists books in a shelf.

        Args:
          name (string): The name of the shelf whose books we'd like to list.
          page_size (int): The maximum number of resources contained in the
            underlying API response. If page streaming is performed per-
            resource, this parameter does not affect the return value. If page
            streaming is performed per-page, this determines the maximum number
            of resources in a page.
          filter (string): To test python built-in wrapping.
          options (:class:`google.gax.CallOptions`): Overrides the default
            settings for this call, e.g, timeout, retries etc.

        Returns:
          A :class:`google.gax.PageIterator` instance. By default, this
          is an iterable of :class:`google.example.library.v1.library_pb2.Book` instances.
          This object can also be configured to iterate over the pages
          of the response through the `CallOptions` parameter.

        Raises:
          :exc:`google.gax.errors.GaxError` if the RPC is aborted.
        """
        req = library_pb2.ListBooksRequest(
            name=name,
            page_size=page_size,
            filter=filter_)
        settings = self._defaults['list_books'].merge(options)
        api_call = api_callable.create_api_call(
            self.stub.ListBooks, settings=settings)
        return api_call(req, metadata=self._headers)

    def delete_book(
            self,
            name,
            options=None):
        """
        Deletes a book.

        Args:
          name (string): The name of the book to delete.
          options (:class:`google.gax.CallOptions`): Overrides the default
            settings for this call, e.g, timeout, retries etc.

        Raises:
          :exc:`google.gax.errors.GaxError` if the RPC is aborted.
        """
        req = library_pb2.DeleteBookRequest(
            name=name)
        settings = self._defaults['delete_book'].merge(options)
        api_call = api_callable.create_api_call(
            self.stub.DeleteBook, settings=settings)
        api_call(req, metadata=self._headers)

    def update_book(
            self,
            name,
            book,
            update_mask=None,
            physical_mask=None,
            options=None):
        """
        Updates a book.

        Args:
          name (string): The name of the book to update.
          book (:class:`google.example.library.v1.library_pb2.Book`): The book to update with.
          update_mask (:class:`google.protobuf.field_mask_pb2.FieldMask`): A field mask to apply, rendered as an HTTP parameter.
          physical_mask (:class:`google.example.library.v1.field_mask_pb2.FieldMask`): To test Python import clash resolution.
          options (:class:`google.gax.CallOptions`): Overrides the default
            settings for this call, e.g, timeout, retries etc.

        Returns:
          A :class:`google.example.library.v1.library_pb2.Book` instance.

        Raises:
          :exc:`google.gax.errors.GaxError` if the RPC is aborted.
        """
        if update_mask is None:
            update_mask = protobuf_field_mask_pb2.FieldMask()
        if physical_mask is None:
            physical_mask = v1_field_mask_pb2.FieldMask()
        req = library_pb2.UpdateBookRequest(
            name=name,
            book=book,
            update_mask=update_mask,
            physical_mask=physical_mask)
        settings = self._defaults['update_book'].merge(options)
        api_call = api_callable.create_api_call(
            self.stub.UpdateBook, settings=settings)
        return api_call(req, metadata=self._headers)

    def move_book(
            self,
            name,
            other_shelf_name,
            options=None):
        """
        Moves a book to another shelf, and returns the new book.

        Args:
          name (string): The name of the book to move.
          other_shelf_name (string): The name of the destination shelf.
          options (:class:`google.gax.CallOptions`): Overrides the default
            settings for this call, e.g, timeout, retries etc.

        Returns:
          A :class:`google.example.library.v1.library_pb2.Book` instance.

        Raises:
          :exc:`google.gax.errors.GaxError` if the RPC is aborted.
        """
        req = library_pb2.MoveBookRequest(
            name=name,
            other_shelf_name=other_shelf_name)
        settings = self._defaults['move_book'].merge(options)
        api_call = api_callable.create_api_call(
            self.stub.MoveBook, settings=settings)
        return api_call(req, metadata=self._headers)

    def list_strings(
            self,
            name='',
            page_size=0,
            options=None):
        """
        Lists a primitive resource. To test go page streaming.

        Args:
          name (string)
          page_size (int): The maximum number of resources contained in the
            underlying API response. If page streaming is performed per-
            resource, this parameter does not affect the return value. If page
            streaming is performed per-page, this determines the maximum number
            of resources in a page.
          options (:class:`google.gax.CallOptions`): Overrides the default
            settings for this call, e.g, timeout, retries etc.

        Returns:
          A :class:`google.gax.PageIterator` instance. By default, this
          is an iterable of string instances.
          This object can also be configured to iterate over the pages
          of the response through the `CallOptions` parameter.

        Raises:
          :exc:`google.gax.errors.GaxError` if the RPC is aborted.
        """
        req = library_pb2.ListStringsRequest(
            name=name,
            page_size=page_size)
        settings = self._defaults['list_strings'].merge(options)
        api_call = api_callable.create_api_call(
            self.stub.ListStrings, settings=settings)
        return api_call(req, metadata=self._headers)

    def add_comments(
            self,
            name,
            comments,
            options=None):
        """
        Adds comments to a book

        Args:
          name (string)
          comments (list[:class:`google.example.library.v1.library_pb2.Comment`])
          options (:class:`google.gax.CallOptions`): Overrides the default
            settings for this call, e.g, timeout, retries etc.

        Raises:
          :exc:`google.gax.errors.GaxError` if the RPC is aborted.
        """
        req = library_pb2.AddCommentsRequest(
            name=name,
            comments=comments)
        settings = self._defaults['add_comments'].merge(options)
        api_call = api_callable.create_api_call(
            self.stub.AddComments, settings=settings)
        api_call(req, metadata=self._headers)

