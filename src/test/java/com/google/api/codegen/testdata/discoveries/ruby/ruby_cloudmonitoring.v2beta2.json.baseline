
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud Monitoring API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudmonitoring
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudmonitoring_v2beta2'
require 'json'

# Construct the cloudmonitoring service object (version v2beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/ruby/apis/
service = Google::Apis::CloudmonitoringV2beta2::CloudMonitoringService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `create_metric_descriptor` method:

# * The project id. The value can be the numeric project ID or string-based project name.
project = ''


metric_descriptor_body = Google::Apis::CloudmonitoringV2beta2::MetricDescriptor.new
# TODO: Assign values to desired members of the `metric_descriptor_body` object.


# Perform the call
response = service.create_metric_descriptor(project, metric_descriptor_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud Monitoring API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudmonitoring
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudmonitoring_v2beta2'
require 'json'

# Construct the cloudmonitoring service object (version v2beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/ruby/apis/
service = Google::Apis::CloudmonitoringV2beta2::CloudMonitoringService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `delete_metric_descriptor` method:

# * The project ID to which the metric belongs.
project = ''

# * Name of the metric.
metric = ''


# Perform the call
response = service.delete_metric_descriptor(project, metric)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud Monitoring API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudmonitoring
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudmonitoring_v2beta2'
require 'json'

# Construct the cloudmonitoring service object (version v2beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/ruby/apis/
service = Google::Apis::CloudmonitoringV2beta2::CloudMonitoringService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_metric_descriptors` method:

# * The project id. The value can be the numeric project ID or string-based project name.
project = ''


list_metric_descriptors_request_body = Google::Apis::CloudmonitoringV2beta2::ListMetricDescriptorsRequest.new
# TODO: Assign values to desired members of the `list_metric_descriptors_request_body` object.


# Perform the call
metrics = service.fetch_all(items: :metrics) do |token|
  service.list_metric_descriptors(project, list_metric_descriptors_request_body, page_token: token)
end

metrics.each do |metric_descriptor|
  # TODO: Change code below to process each `metric_descriptor` resource:
  puts JSON.pretty_generate(metric_descriptor)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud Monitoring API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudmonitoring
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudmonitoring_v2beta2'
require 'json'

# Construct the cloudmonitoring service object (version v2beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/ruby/apis/
service = Google::Apis::CloudmonitoringV2beta2::CloudMonitoringService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_timeseries` method:

# * The project ID to which this time series belongs. The value can be the numeric project ID or
#   string-based project name.
project = ''

# * Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
#   compute.googleapis.com/instance/disk/read_ops_count.
metric = ''

# * End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
youngest = ''


list_timeseries_request_body = Google::Apis::CloudmonitoringV2beta2::ListTimeseriesRequest.new
# TODO: Assign values to desired members of the `list_timeseries_request_body` object.


# Perform the call
timeseries = service.fetch_all(items: :timeseries) do |token|
  service.list_timeseries(project, metric, youngest, list_timeseries_request_body, page_token: token)
end

timeseries.each do |timeseries|
  # TODO: Change code below to process each `timeseries` resource:
  puts JSON.pretty_generate(timeseries)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud Monitoring API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudmonitoring
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudmonitoring_v2beta2'
require 'json'

# Construct the cloudmonitoring service object (version v2beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/ruby/apis/
service = Google::Apis::CloudmonitoringV2beta2::CloudMonitoringService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `write_timeseries` method:

# * The project ID. The value can be the numeric project ID or string-based project name.
project = ''


write_timeseries_request_body = Google::Apis::CloudmonitoringV2beta2::WriteTimeseriesRequest.new
# TODO: Assign values to desired members of the `write_timeseries_request_body` object.


# Perform the call
response = service.write_timeseries(project, write_timeseries_request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Cloud Monitoring API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudmonitoring
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudmonitoring_v2beta2'
require 'json'

# Construct the cloudmonitoring service object (version v2beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/ruby/apis/
service = Google::Apis::CloudmonitoringV2beta2::CloudMonitoringService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholders below to desired parameter values for the `list_timeseries_descriptors` method:

# * The project ID to which this time series belongs. The value can be the numeric project ID or
#   string-based project name.
project = ''

# * Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
#   compute.googleapis.com/instance/disk/read_ops_count.
metric = ''

# * End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
youngest = ''


list_timeseries_descriptors_request_body = Google::Apis::CloudmonitoringV2beta2::ListTimeseriesDescriptorsRequest.new
# TODO: Assign values to desired members of the `list_timeseries_descriptors_request_body` object.


# Perform the call
timeseries = service.fetch_all(items: :timeseries) do |token|
  service.list_timeseries_descriptors(project, metric, youngest, list_timeseries_descriptors_request_body, page_token: token)
end

timeseries.each do |timeseries_descriptor|
  # TODO: Change code below to process each `timeseries_descriptor` resource:
  puts JSON.pretty_generate(timeseries_descriptor)
end
