
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Trace API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudtrace
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the cloudtrace service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var cloudtrace = google.cloudtrace('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `patchTraces` method:

    // * ID of the Cloud project where the trace data is stored.
    projectId: "",


    resource: {
      // TODO: Add desired properties of the `resource` request body object to be changed.
    },

    auth: authClient
  };

  cloudtrace.projects.patchTraces(request, function(err) {
    if (err) {
      console.log(err);
      return;
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Trace API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudtrace
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the cloudtrace service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var cloudtrace = google.cloudtrace('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // * ID of the Cloud project where the trace data is stored.
    projectId: "",

    // * ID of the trace to return.
    traceId: "",


    auth: authClient
  };

  cloudtrace.projects.traces.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Trace API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudtrace
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the cloudtrace service object (version v1) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var cloudtrace = google.cloudtrace('v1');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // * ID of the Cloud project where the trace data is stored.
    projectId: "",


    auth: authClient
  };

  var recur = function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var tracesPage = response['traces'];
    for (var i = 0; i < tracesPage.length; i++) {
      // TODO: Change code below to process each resource in `tracesPage`:
      console.log(JSON.stringify(tracesPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      cloudtrace.projects.traces.list(request, recur);
    }
  };

  cloudtrace.projects.traces.list(request, recur);
});
