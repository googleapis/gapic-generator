
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storagetransfer($client);


$response = $service->v1->getGoogleServiceAccount();

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storagetransfer($client);

// The ID of the Google Developers Console project that the Google service account is associated with.
// Required.
$projectId = '{MY-PROJECT-ID}'; // TODO: Update placeholder value(s).

$response = $service->googleServiceAccounts->get($projectId);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storagetransfer($client);


// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Storagetransfer_TransferJob($client);

$response = $service->transferJobs->create($postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storagetransfer($client);

// The job to get. Required.
$jobName = '{MY-JOB-NAME}'; // TODO: Update placeholder value(s).

$response = $service->transferJobs->get($jobName);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storagetransfer($client);


$optParams = array();
do {
  $response = $service->transferJobs->listTransferJobs($optParams);

  foreach ($response['transferJobs'] as $transfer_job) {
    // TODO: Use transfer_job
    echo '<pre>', var_export($transfer_job, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storagetransfer($client);

// The name of job to update. Required.
$jobName = '{MY-JOB-NAME}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties to be changed.
$postBody = new Google_Service_Storagetransfer_UpdateTransferJobRequest($client);

$response = $service->transferJobs->patch($jobName, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storagetransfer($client);

// The name of the operation resource to be cancelled.
$name = '{MY-NAME}'; // TODO: Update placeholder value(s).

$service->transferOperations->cancel($name);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storagetransfer($client);

// The name of the operation resource to be deleted.
$name = '{MY-NAME}'; // TODO: Update placeholder value(s).

$service->transferOperations->delete($name);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storagetransfer($client);

// The name of the operation resource.
$name = '{MY-NAME}'; // TODO: Update placeholder value(s).

$response = $service->transferOperations->get($name);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storagetransfer($client);

// The value `transferOperations`.
$name = '{MY-NAME}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->transferOperations->listTransferOperations($name, $optParams);

  foreach ($response['operations'] as $operation) {
    // TODO: Use operation
    echo '<pre>', var_export($operation, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storagetransfer($client);

// The name of the transfer operation. Required.
$name = '{MY-NAME}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Storagetransfer_PauseTransferOperationRequest($client);

$service->transferOperations->pause($name, $postBody);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Storagetransfer($client);

// The name of the transfer operation. Required.
$name = '{MY-NAME}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Storagetransfer_ResumeTransferOperationRequest($client);

$service->transferOperations->resume($name, $postBody);
