
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudresourcemanager/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager.Organizations.Get;
import com.google.api.services.cloudresourcemanager.v1beta1.model.Organization;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudresourcemanagerExample {
  public void run() throws IOException, GeneralSecurityException {
    // The id of the Organization resource to fetch.
    String organizationId = ""; // TODO: Update field(s).

    Cloudresourcemanager service = createService();
    Get request = service.organizations().get(organizationId);
    Organization response = request.execute();
    System.out.println(response);
  }

  public Cloudresourcemanager createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Cloudresourcemanager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new CloudresourcemanagerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudresourcemanager/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager.Organizations.GetIamPolicy;
import com.google.api.services.cloudresourcemanager.v1beta1.model.GetIamPolicyRequest;
import com.google.api.services.cloudresourcemanager.v1beta1.model.Policy;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudresourcemanagerExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    GetIamPolicyRequest requestBody = new GetIamPolicyRequest();

    // REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as
    // a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified
    // in this value is resource specific and is specified in the `getIamPolicy` documentation.
    String resource = ""; // TODO: Update field(s).

    Cloudresourcemanager service = createService();
    GetIamPolicy request = service.organizations().getIamPolicy(resource, requestBody);
    Policy response = request.execute();
    System.out.println(response);
  }

  public Cloudresourcemanager createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Cloudresourcemanager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new CloudresourcemanagerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudresourcemanager/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager.Organizations.List;
import com.google.api.services.cloudresourcemanager.v1beta1.model.ListOrganizationsResponse;
import com.google.api.services.cloudresourcemanager.v1beta1.model.Organization;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudresourcemanagerExample {
  public void run() throws IOException, GeneralSecurityException {
    Cloudresourcemanager service = createService();
    List request = service.organizations().list();
    ListOrganizationsResponse response;
    do {
      response = request.execute();
      if (response.getOrganizations() == null) {
        continue;
      }
      for (Organization item : response.getOrganizations()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Cloudresourcemanager createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Cloudresourcemanager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new CloudresourcemanagerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudresourcemanager/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager.Organizations.SetIamPolicy;
import com.google.api.services.cloudresourcemanager.v1beta1.model.Policy;
import com.google.api.services.cloudresourcemanager.v1beta1.model.SetIamPolicyRequest;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudresourcemanagerExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    SetIamPolicyRequest requestBody = new SetIamPolicyRequest();

    // REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as
    // a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified
    // in this value is resource specific and is specified in the `setIamPolicy` documentation.
    String resource = ""; // TODO: Update field(s).

    Cloudresourcemanager service = createService();
    SetIamPolicy request = service.organizations().setIamPolicy(resource, requestBody);
    Policy response = request.execute();
    System.out.println(response);
  }

  public Cloudresourcemanager createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Cloudresourcemanager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new CloudresourcemanagerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudresourcemanager/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager.Organizations.TestIamPermissions;
import com.google.api.services.cloudresourcemanager.v1beta1.model.TestIamPermissionsRequest;
import com.google.api.services.cloudresourcemanager.v1beta1.model.TestIamPermissionsResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudresourcemanagerExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    TestIamPermissionsRequest requestBody = new TestIamPermissionsRequest();

    // REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
    // specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the
    // path specified in this value is resource specific and is specified in the `testIamPermissions`
    // documentation.
    String resource = ""; // TODO: Update field(s).

    Cloudresourcemanager service = createService();
    TestIamPermissions request = service.organizations().testIamPermissions(resource, requestBody);
    TestIamPermissionsResponse response = request.execute();
    System.out.println(response);
  }

  public Cloudresourcemanager createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Cloudresourcemanager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new CloudresourcemanagerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudresourcemanager/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager.Organizations.Update;
import com.google.api.services.cloudresourcemanager.v1beta1.model.Organization;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudresourcemanagerExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Organization requestBody = new Organization();

    // An immutable id for the Organization that is assigned on creation. This should be omitted when
    // creating a new Organization. This field is read-only.
    String organizationId = ""; // TODO: Update field(s).

    Cloudresourcemanager service = createService();
    Update request = service.organizations().update(organizationId, requestBody);
    Organization response = request.execute();
    System.out.println(response);
  }

  public Cloudresourcemanager createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Cloudresourcemanager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new CloudresourcemanagerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudresourcemanager/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager.Projects.Create;
import com.google.api.services.cloudresourcemanager.v1beta1.model.Project;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudresourcemanagerExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Project requestBody = new Project();

    Cloudresourcemanager service = createService();
    Create request = service.projects().create(requestBody);
    Project response = request.execute();
    System.out.println(response);
  }

  public Cloudresourcemanager createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Cloudresourcemanager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new CloudresourcemanagerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudresourcemanager/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager.Projects.Delete;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudresourcemanagerExample {
  public void run() throws IOException, GeneralSecurityException {
    // The Project ID (for example, `foo-bar-123`). Required.
    String projectId = ""; // TODO: Update field(s).

    Cloudresourcemanager service = createService();
    Delete request = service.projects().delete(projectId);
    request.execute();
  }

  public Cloudresourcemanager createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Cloudresourcemanager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new CloudresourcemanagerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudresourcemanager/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager.Projects.Get;
import com.google.api.services.cloudresourcemanager.v1beta1.model.Project;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudresourcemanagerExample {
  public void run() throws IOException, GeneralSecurityException {
    // The Project ID (for example, `my-project-123`). Required.
    String projectId = ""; // TODO: Update field(s).

    Cloudresourcemanager service = createService();
    Get request = service.projects().get(projectId);
    Project response = request.execute();
    System.out.println(response);
  }

  public Cloudresourcemanager createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Cloudresourcemanager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new CloudresourcemanagerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudresourcemanager/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager.Projects.GetIamPolicy;
import com.google.api.services.cloudresourcemanager.v1beta1.model.GetIamPolicyRequest;
import com.google.api.services.cloudresourcemanager.v1beta1.model.Policy;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudresourcemanagerExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    GetIamPolicyRequest requestBody = new GetIamPolicyRequest();

    // REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as
    // a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified
    // in this value is resource specific and is specified in the `getIamPolicy` documentation.
    String resource = ""; // TODO: Update field(s).

    Cloudresourcemanager service = createService();
    GetIamPolicy request = service.projects().getIamPolicy(resource, requestBody);
    Policy response = request.execute();
    System.out.println(response);
  }

  public Cloudresourcemanager createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Cloudresourcemanager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new CloudresourcemanagerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudresourcemanager/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager.Projects.List;
import com.google.api.services.cloudresourcemanager.v1beta1.model.ListProjectsResponse;
import com.google.api.services.cloudresourcemanager.v1beta1.model.Project;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudresourcemanagerExample {
  public void run() throws IOException, GeneralSecurityException {
    Cloudresourcemanager service = createService();
    List request = service.projects().list();
    ListProjectsResponse response;
    do {
      response = request.execute();
      if (response.getProjects() == null) {
        continue;
      }
      for (Project item : response.getProjects()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Cloudresourcemanager createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Cloudresourcemanager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new CloudresourcemanagerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudresourcemanager/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager.Projects.SetIamPolicy;
import com.google.api.services.cloudresourcemanager.v1beta1.model.Policy;
import com.google.api.services.cloudresourcemanager.v1beta1.model.SetIamPolicyRequest;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudresourcemanagerExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    SetIamPolicyRequest requestBody = new SetIamPolicyRequest();

    // REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as
    // a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified
    // in this value is resource specific and is specified in the `setIamPolicy` documentation.
    String resource = ""; // TODO: Update field(s).

    Cloudresourcemanager service = createService();
    SetIamPolicy request = service.projects().setIamPolicy(resource, requestBody);
    Policy response = request.execute();
    System.out.println(response);
  }

  public Cloudresourcemanager createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Cloudresourcemanager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new CloudresourcemanagerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudresourcemanager/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager.Projects.TestIamPermissions;
import com.google.api.services.cloudresourcemanager.v1beta1.model.TestIamPermissionsRequest;
import com.google.api.services.cloudresourcemanager.v1beta1.model.TestIamPermissionsResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudresourcemanagerExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    TestIamPermissionsRequest requestBody = new TestIamPermissionsRequest();

    // REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
    // specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the
    // path specified in this value is resource specific and is specified in the `testIamPermissions`
    // documentation.
    String resource = ""; // TODO: Update field(s).

    Cloudresourcemanager service = createService();
    TestIamPermissions request = service.projects().testIamPermissions(resource, requestBody);
    TestIamPermissionsResponse response = request.execute();
    System.out.println(response);
  }

  public Cloudresourcemanager createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Cloudresourcemanager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new CloudresourcemanagerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudresourcemanager/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager.Projects.Undelete;
import com.google.api.services.cloudresourcemanager.v1beta1.model.UndeleteProjectRequest;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudresourcemanagerExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    UndeleteProjectRequest requestBody = new UndeleteProjectRequest();

    // The project ID (for example, `foo-bar-123`). Required.
    String projectId = ""; // TODO: Update field(s).

    Cloudresourcemanager service = createService();
    Undelete request = service.projects().undelete(projectId, requestBody);
    request.execute();
  }

  public Cloudresourcemanager createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Cloudresourcemanager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new CloudresourcemanagerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Resource Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudresourcemanager
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudresourcemanager/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager;
import com.google.api.services.cloudresourcemanager.v1beta1.Cloudresourcemanager.Projects.Update;
import com.google.api.services.cloudresourcemanager.v1beta1.model.Project;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudresourcemanagerExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Project requestBody = new Project();

    // The project ID (for example, `my-project-123`). Required.
    String projectId = ""; // TODO: Update field(s).

    Cloudresourcemanager service = createService();
    Update request = service.projects().update(projectId, requestBody);
    Project response = request.execute();
    System.out.println(response);
  }

  public Cloudresourcemanager createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Cloudresourcemanager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new CloudresourcemanagerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
