
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataflow.v1b3;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Dataflow.v1b3.Data;


namespace DataflowSample
{
    public class DataflowServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the dataflow service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            DataflowService dataflowService = new DataflowService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Create` method:

            // * The project which owns the job.
            string projectId = "";


            Data.Job requestBody = new Data.Job();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.JobsResource.CreateRequest request = dataflowService.Projects.Jobs.Create(requestBody, projectId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Job response = request.Execute();
            // Data.Job response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataflow.v1b3;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Dataflow.v1b3.Data;


namespace DataflowSample
{
    public class DataflowServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the dataflow service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            DataflowService dataflowService = new DataflowService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // * The project which owns the job.
            string projectId = "";

            // * Identifies a single job.
            string jobId = "";


            ProjectsResource.JobsResource.GetRequest request = dataflowService.Projects.Jobs.Get(projectId, jobId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Job response = request.Execute();
            // Data.Job response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataflow.v1b3;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Dataflow.v1b3.Data;


namespace DataflowSample
{
    public class DataflowServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the dataflow service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            DataflowService dataflowService = new DataflowService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `GetMetrics` method:

            // * A project id.
            string projectId = "";

            // * The job to get messages for.
            string jobId = "";


            ProjectsResource.JobsResource.GetMetricsRequest request = dataflowService.Projects.Jobs.GetMetrics(projectId, jobId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.JobMetrics response = request.Execute();
            // Data.JobMetrics response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataflow.v1b3;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Dataflow.v1b3.Data;


namespace DataflowSample
{
    public class DataflowServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the dataflow service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            DataflowService dataflowService = new DataflowService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // * The project which owns the jobs.
            string projectId = "";


            ProjectsResource.JobsResource.ListRequest request = dataflowService.Projects.Jobs.List(projectId);

            Data.ListJobsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Jobs == null)
                {
                    continue;
                }
                foreach (Data.Job job in response.Jobs)
                {
                    // TODO: Change code below to process each `job` resource:
                    Console.WriteLine(new JavaScriptSerializer().Serialize(job));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataflow.v1b3;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Dataflow.v1b3.Data;


namespace DataflowSample
{
    public class DataflowServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the dataflow service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            DataflowService dataflowService = new DataflowService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // * A project id.
            string projectId = "";

            // * The job to get messages about.
            string jobId = "";


            ProjectsResource.JobsResource.MessagesResource.ListRequest request = dataflowService.Projects.Jobs.Messages.List(projectId, jobId);

            Data.ListJobMessagesResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.JobMessages == null)
                {
                    continue;
                }
                foreach (Data.JobMessage jobMessage in response.JobMessages)
                {
                    // TODO: Change code below to process each `jobMessage` resource:
                    Console.WriteLine(new JavaScriptSerializer().Serialize(jobMessage));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataflow.v1b3;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Dataflow.v1b3.Data;


namespace DataflowSample
{
    public class DataflowServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the dataflow service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            DataflowService dataflowService = new DataflowService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Update` method:

            // * The project which owns the job.
            string projectId = "";

            // * Identifies a single job.
            string jobId = "";


            Data.Job requestBody = new Data.Job();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.JobsResource.UpdateRequest request = dataflowService.Projects.Jobs.Update(requestBody, projectId, jobId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Job response = request.Execute();
            // Data.Job response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataflow.v1b3;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Dataflow.v1b3.Data;


namespace DataflowSample
{
    public class DataflowServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the dataflow service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            DataflowService dataflowService = new DataflowService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Lease` method:

            // * Identifies the project this worker belongs to.
            string projectId = "";

            // * Identifies the workflow job this worker belongs to.
            string jobId = "";


            Data.LeaseWorkItemRequest requestBody = new Data.LeaseWorkItemRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.JobsResource.WorkItemsResource.LeaseRequest request = dataflowService.Projects.Jobs.WorkItems.Lease(requestBody, projectId, jobId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.LeaseWorkItemResponse response = request.Execute();
            // Data.LeaseWorkItemResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataflow.v1b3;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Dataflow.v1b3.Data;


namespace DataflowSample
{
    public class DataflowServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the dataflow service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            DataflowService dataflowService = new DataflowService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `ReportStatus` method:

            // * The project which owns the WorkItem's job.
            string projectId = "";

            // * The job which the WorkItem is part of.
            string jobId = "";


            Data.ReportWorkItemStatusRequest requestBody = new Data.ReportWorkItemStatusRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.JobsResource.WorkItemsResource.ReportStatusRequest request = dataflowService.Projects.Jobs.WorkItems.ReportStatus(requestBody, projectId, jobId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.ReportWorkItemStatusResponse response = request.Execute();
            // Data.ReportWorkItemStatusResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataflow.v1b3;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Dataflow.v1b3.Data;


namespace DataflowSample
{
    public class DataflowServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the dataflow service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            DataflowService dataflowService = new DataflowService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `WorkerMessages` method:

            // * The project to send the WorkerMessages to.
            string projectId = "";


            Data.SendWorkerMessagesRequest requestBody = new Data.SendWorkerMessagesRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.WorkerMessagesRequest request = dataflowService.Projects.WorkerMessages(requestBody, projectId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.SendWorkerMessagesResponse response = request.Execute();
            // Data.SendWorkerMessagesResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
