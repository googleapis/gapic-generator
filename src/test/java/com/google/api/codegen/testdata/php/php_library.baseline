============== file: composer.json ==============
{
  "name": "library/library",
  "version": "0.1.0",
  "author": "Google LLC",
  "url": "https://github.com/googleapis/googleapis",
  "description": "Google Example Library API client for PHP",
  "require": {
    "google/gax": "^0.6.*",
    "google/protobuf": "^0.7.*",
    "php" : "^5.5 || ^7.0"
  },
  "require-dev": {
    "phpunit/phpunit": "^5.7"
  },
  "license": "Apache-2.0",
  "autoload": {
    "psr-4": {
      "Google\\Cloud\\": "src",
      "Google\\Cloud\\Tests\\": "tests",
      "Google\\Cloud\\Tests\\System\\": "tests/system",
      "Google\\Cloud\\Tests\\Unit\\": "tests/unit",
      "": "proto/src"
    }
  },
  "scripts": {
    "test": [
      "phpunit tests"
    ]
  }
}
============== file: src/Example/Library/V1/Gapic/LibraryServiceGapicClient.php ==============
<?php
/*
 * Copyright 2017, Google LLC All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * This file was generated from the file
 * https://github.com/google/googleapis/blob/master/library.proto
 * and updates to that file get reflected here through a refresh process.
 *
 * EXPERIMENTAL: this client library class has not yet been declared beta. This class may change
 * more frequently than those which have been declared beta or 1.0, including changes which break
 * backwards compatibility.
 *
 * @experimental
 */

namespace Google\Example\Library\V1\Gapic;

use Google\Cloud\Version;
use Google\Example\Library\V1\AddCommentsRequest;
use Google\Example\Library\V1\Book;
use Google\Example\Library\V1\Comment;
use Google\Example\Library\V1\CreateBookRequest;
use Google\Example\Library\V1\CreateShelfRequest;
use Google\Example\Library\V1\DeleteBookRequest;
use Google\Example\Library\V1\DeleteShelfRequest;
use Google\Example\Library\V1\DiscussBookRequest;
use Google\Example\Library\V1\FindRelatedBooksRequest;
use Google\Example\Library\V1\GetBigBookMetadata;
use Google\Example\Library\V1\GetBookFromAbsolutelyAnywhereRequest;
use Google\Example\Library\V1\GetBookFromAnywhereRequest;
use Google\Example\Library\V1\GetBookFromArchiveRequest;
use Google\Example\Library\V1\GetBookRequest;
use Google\Example\Library\V1\GetShelfRequest;
use Google\Example\Library\V1\LibraryServiceGrpcClient;
use Google\Example\Library\V1\ListBooksRequest;
use Google\Example\Library\V1\ListShelvesRequest;
use Google\Example\Library\V1\ListStringsRequest;
use Google\Example\Library\V1\MergeShelvesRequest;
use Google\Example\Library\V1\MoveBookRequest;
use Google\Example\Library\V1\PublishSeriesRequest;
use Google\Example\Library\V1\SeriesUuid;
use Google\Example\Library\V1\Shelf;
use Google\Example\Library\V1\SomeMessage;
use Google\Example\Library\V1\StreamBooksRequest;
use Google\Example\Library\V1\StreamShelvesRequest;
use Google\Example\Library\V1\StringBuilder;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest_InnerEnum as InnerEnum;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest_InnerMessage as InnerMessage;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest_OptionalMapEntry as OptionalMapEntry;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest_RequiredMapEntry as RequiredMapEntry;
use Google\Example\Library\V1\UpdateBookIndexRequest;
use Google\Example\Library\V1\UpdateBookIndexRequest_IndexMapEntry as IndexMapEntry;
use Google\Example\Library\V1\UpdateBookRequest;
use Google\GAX\AgentHeaderDescriptor;
use Google\GAX\ApiCallable;
use Google\GAX\CallSettings;
use Google\GAX\GrpcConstants;
use Google\GAX\GrpcCredentialsHelper;
use Google\GAX\LongRunning\OperationsClient;
use Google\GAX\OperationResponse;
use Google\GAX\PageStreamingDescriptor;
use Google\GAX\PathTemplate;
use Google\GAX\ValidationException;
use Google\Protobuf\FieldMask;
use Google\Protobuf\GPBEmpty;
use Google\Tagger\CustomNamespace\V1\AddLabelRequest;
use Google\Tagger\CustomNamespace\V1\AddTagRequest;
use Google\Tagger\CustomNamespace\V1\LabelerGrpcClient;

/**
 * Service Description: This API represents a simple digital library.  It lets you manage Shelf
 * resources and Book resources in the library. It defines the following
 * resource model:
 *
 * - The API has a collection of [Shelf][google.example.library.v1.Shelf]
 *   resources, named ``bookShelves/*``
 *
 * - Each Shelf has a collection of [Book][google.example.library.v1.Book]
 *   resources, named `bookShelves/&#42;/books/*`
 *
 * Check out [cloud docs!](https://cloud.google.com/library/example/link).
 * This is [not a cloud link](http://www.google.com).
 *
 * Service comment may include special characters: <>&"`'&#64;.
 *
 * EXPERIMENTAL: this client library class has not yet been declared beta. This class may change
 * more frequently than those which have been declared beta or 1.0, including changes which break
 * backwards compatibility.
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * ```
 * try {
 *     $libraryServiceClient = new LibraryServiceClient();
 *     $shelf = new Shelf();
 *     $response = $libraryServiceClient->createShelf($shelf);
 * } finally {
 *     $libraryServiceClient->close();
 * }
 * ```
 *
 * Many parameters require resource names to be formatted in a particular way. To assist
 * with these names, this class includes a format method for each type of name, and additionally
 * a parseName method to extract the individual identifiers contained within formatted names
 * that are returned by the API.
 * @experimental
 */
class LibraryServiceGapicClient
{
    /**
     * The default address of the service.
     */
    const SERVICE_ADDRESS = 'library-example.googleapis.com';

    /**
     * The default port of the service.
     */
    const DEFAULT_SERVICE_PORT = 443;

    /**
     * The name of the code generator, to be included in the agent header.
     */
    const CODEGEN_NAME = 'gapic';

    /**
     * The code generator version, to be included in the agent header.
     */
    const CODEGEN_VERSION = '0.0.5';

    private static $shelfNameTemplate;
    private static $bookNameTemplate;
    private static $returnNameTemplate;
    private static $pathTemplateMap;
    private static $gapicVersion;
    private static $gapicVersionLoaded = false;

    protected $grpcCredentialsHelper;
    protected $libraryServiceStub;
    protected $labelerStub;
    private $scopes;
    private $defaultCallSettings;
    private $descriptors;
    private $operationsClient;

    private static function getShelfNameTemplate()
    {
        if (self::$shelfNameTemplate == null) {
            self::$shelfNameTemplate = new PathTemplate('shelves/{shelf_id}');
        }

        return self::$shelfNameTemplate;
    }

    private static function getBookNameTemplate()
    {
        if (self::$bookNameTemplate == null) {
            self::$bookNameTemplate = new PathTemplate('shelves/{shelf_id}/books/{book_id}');
        }

        return self::$bookNameTemplate;
    }

    private static function getReturnNameTemplate()
    {
        if (self::$returnNameTemplate == null) {
            self::$returnNameTemplate = new PathTemplate('shelves/{shelf}/books/{book}/returns/{return}');
        }

        return self::$returnNameTemplate;
    }

    private static function getPathTemplateMap()
    {
        if (self::$pathTemplateMap == null) {
            self::$pathTemplateMap = [
                'shelf' => self::getShelfNameTemplate(),
                'book' => self::getBookNameTemplate(),
                'return' => self::getReturnNameTemplate(),
            ];
        }
        return self::$pathTemplateMap;
    }
    private static function getPageStreamingDescriptors()
    {
        $listShelvesPageStreamingDescriptor =
                new PageStreamingDescriptor([
                    'requestPageTokenGetMethod' => 'getPageToken',
                    'requestPageTokenSetMethod' => 'setPageToken',
                    'responsePageTokenGetMethod' => 'getNextPageToken',
                    'resourcesGetMethod' => 'getShelves',
                ]);
        $listBooksPageStreamingDescriptor =
                new PageStreamingDescriptor([
                    'requestPageTokenGetMethod' => 'getPageToken',
                    'requestPageTokenSetMethod' => 'setPageToken',
                    'requestPageSizeGetMethod' => 'getPageSize',
                    'requestPageSizeSetMethod' => 'setPageSize',
                    'responsePageTokenGetMethod' => 'getNextPageToken',
                    'resourcesGetMethod' => 'getBooks',
                ]);
        $listStringsPageStreamingDescriptor =
                new PageStreamingDescriptor([
                    'requestPageTokenGetMethod' => 'getPageToken',
                    'requestPageTokenSetMethod' => 'setPageToken',
                    'requestPageSizeGetMethod' => 'getPageSize',
                    'requestPageSizeSetMethod' => 'setPageSize',
                    'responsePageTokenGetMethod' => 'getNextPageToken',
                    'resourcesGetMethod' => 'getStrings',
                ]);
        $findRelatedBooksPageStreamingDescriptor =
                new PageStreamingDescriptor([
                    'requestPageTokenGetMethod' => 'getPageToken',
                    'requestPageTokenSetMethod' => 'setPageToken',
                    'requestPageSizeGetMethod' => 'getPageSize',
                    'requestPageSizeSetMethod' => 'setPageSize',
                    'responsePageTokenGetMethod' => 'getNextPageToken',
                    'resourcesGetMethod' => 'getNames',
                ]);

        $pageStreamingDescriptors = [
            'listShelves' => $listShelvesPageStreamingDescriptor,
            'listBooks' => $listBooksPageStreamingDescriptor,
            'listStrings' => $listStringsPageStreamingDescriptor,
            'findRelatedBooks' => $findRelatedBooksPageStreamingDescriptor,
        ];

        return $pageStreamingDescriptors;
    }

    private static function getLongRunningDescriptors()
    {
        return [
            'getBigBook' => [
                'operationReturnType' => '\Google\Example\Library\V1\Book',
                'metadataReturnType' => '\Google\Example\Library\V1\GetBigBookMetadata',
            ],
            'getBigNothing' => [
                'operationReturnType' => '\Google\Protobuf\GPBEmpty',
                'metadataReturnType' => '\Google\Example\Library\V1\GetBigBookMetadata',
            ],
        ];
    }

    private static function getGrpcStreamingDescriptors()
    {
        return [
            'streamShelves' => [
                'grpcStreamingType' => 'ServerStreaming',
                'resourcesGetMethod' => 'getShelves',
            ],
            'streamBooks' => [
                'grpcStreamingType' => 'ServerStreaming',
            ],
            'discussBook' => [
                'grpcStreamingType' => 'BidiStreaming',
            ],
            'monologAboutBook' => [
                'grpcStreamingType' => 'ClientStreaming',
            ],
        ];
    }

    private static function getGapicVersion()
    {
        if (!self::$gapicVersionLoaded) {
            if (file_exists(__DIR__ . '/../VERSION')) {
              self::$gapicVersion = trim(file_get_contents(__DIR__ . '/../VERSION'));
            } elseif (class_exists(Version::class)) {
              self::$gapicVersion = Version::VERSION;
            }
            self::$gapicVersionLoaded = true;
        }
        return self::$gapicVersion;
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a shelf resource.
     *
     * @param string $shelfId
     * @return string The formatted shelf resource.
     * @experimental
     */
    public static function shelfName($shelfId)
    {
        return self::getShelfNameTemplate()->render([
            'shelf_id' => $shelfId,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a book resource.
     *
     * @param string $shelfId
     * @param string $bookId
     * @return string The formatted book resource.
     * @experimental
     */
    public static function bookName($shelfId, $bookId)
    {
        return self::getBookNameTemplate()->render([
            'shelf_id' => $shelfId,
            'book_id' => $bookId,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a return resource.
     *
     * @param string $shelf
     * @param string $book
     * @param string $return
     * @return string The formatted return resource.
     * @experimental
     */
    public static function returnName($shelf, $book, $return)
    {
        return self::getReturnNameTemplate()->render([
            'shelf' => $shelf,
            'book' => $book,
            'return' => $return,
        ]);
    }

    /**
     * Parses a formatted name string and returns an associative array of the components in the name.
     * The following name formats are supported:
     * Template: Pattern
     * - shelf: shelves/{shelf_id}
     * - book: shelves/{shelf_id}/books/{book_id}
     * - return: shelves/{shelf}/books/{book}/returns/{return}
     *
     * The optional $template argument can be supplied to specify a particular pattern, and must
     * match one of the templates listed above. If no $template argument is provided, or if the
     * $template argument does not match one of the templates listed, then parseName will check
     * each of the supported templates, and return the first match.
     *
     * @param string $formattedName The formatted name string
     * @param string $template Optional name of template to match
     * @return array An associative array from name component IDs to component values.
     * @throws ValidationException If $formattedName could not be matched.
     * @experimental
     */
    public static function parseName($formattedName, $template = null)
    {
        $templateMap = self::getPathTemplateMap();

        if ($template) {
            if (!isset($templateMap[$template])) {
                throw new ValidationException("Template name $template does not exist");
            }
            return $templateMap[$template]->match($formattedName);
        }

        foreach ($templateMap as $templateName => $pathTemplate) {
            try {
                return $pathTemplate->match($formattedName);
            } catch (ValidationException $ex) {
                // Swallow the exception to continue trying other path templates
            }
        }
        throw new ValidationException("Input did not match any known format. Input: $formattedName");
    }


    /**
     * Return an OperationsClient object with the same endpoint as $this.
     *
     * @return \Google\GAX\LongRunning\OperationsClient
     * @experimental
     */
    public function getOperationsClient()
    {
        return $this->operationsClient;
    }

    /**
     * Resume an existing long running operation that was previously started
     * by a long running API method. If $methodName is not provided, or does
     * not match a long running API method, then the operation can still be
     * resumed, but the OperationResponse object will not deserialize the
     * final response.
     *
     * @param string $operationName The name of the long running operation
     * @param string $methodName The name of the method used to start the operation
     * @return \Google\GAX\OperationResponse
     * @experimental
     */
    public function resumeOperation($operationName, $methodName = null)
    {
        $lroDescriptors = LibraryServiceGapicClient::getLongRunningDescriptors();
        if (!is_null($methodName) && array_key_exists($methodName, $lroDescriptors)) {
            $options = $lroDescriptors[$methodName];
        } else {
            $options = [];
        }
        $operation = new OperationResponse($operationName, $this->getOperationsClient(), $options);
        $operation->reload();
        return $operation;
    }

    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $serviceAddress The domain name of the API remote host.
     *                                  Default 'library-example.googleapis.com'.
     *     @type mixed $port The port on which to connect to the remote host. Default 443.
     *     @type \Grpc\Channel $channel
     *           A `Channel` object to be used by gRPC. If not specified, a channel will be constructed.
     *     @type \Grpc\ChannelCredentials $sslCreds
     *           A `ChannelCredentials` object for use with an SSL-enabled channel.
     *           Default: a credentials object returned from
     *           \Grpc\ChannelCredentials::createSsl()
     *           NOTE: if the $channel optional argument is specified, then this argument is unused.
     *     @type bool $forceNewChannel
     *           If true, this forces gRPC to create a new channel instead of using a persistent channel.
     *           Defaults to false.
     *           NOTE: if the $channel optional argument is specified, then this option is unused.
     *     @type \Google\Auth\CredentialsLoader $credentialsLoader
     *           A CredentialsLoader object created using the Google\Auth library.
     *     @type array $scopes A string array of scopes to use when acquiring credentials.
     *                          Defaults to the scopes for the Google Example Library API.
     *     @type string $clientConfigPath
     *           Path to a JSON file containing client method configuration, including retry settings.
     *           Specify this setting to specify the retry behavior of all methods on the client.
     *           By default this settings points to the default client config file, which is provided
     *           in the resources folder. The retry settings provided in this option can be overridden
     *           by settings in $retryingOverride
     *     @type array $retryingOverride
     *           An associative array in which the keys are method names (e.g. 'createFoo'), and
     *           the values are retry settings to use for that method. The retry settings for each
     *           method can be a {@see Google\GAX\RetrySettings} object, or an associative array
     *           of retry settings parameters. See the documentation on {@see Google\GAX\RetrySettings}
     *           for example usage. Passing a value of null is equivalent to a value of
     *           ['retriesEnabled' => false]. Retry settings provided in this setting override the
     *           settings in $clientConfigPath.
     * }
     * @experimental
     */
    public function __construct($options = [])
    {
        $defaultOptions = [
            'serviceAddress' => self::SERVICE_ADDRESS,
            'port' => self::DEFAULT_SERVICE_PORT,
            'scopes' => [
                'https://www.googleapis.com/auth/cloud-platform',
                'https://www.googleapis.com/auth/library',
            ],
            'retryingOverride' => null,
            'libName' => null,
            'libVersion' => null,
            'clientConfigPath' => __DIR__ . '/../resources/library_service_client_config.json',
        ];
        $options = array_merge($defaultOptions, $options);

        if (array_key_exists('operationsClient', $options)) {
            $this->operationsClient = $options['operationsClient'];
        } else {
            $operationsClientOptions = $options;
            unset($operationsClientOptions['retryingOverride']);
            unset($operationsClientOptions['clientConfigPath']);
            $this->operationsClient = new OperationsClient($operationsClientOptions);
        }

        $gapicVersion = $options['libVersion'] ?: self::getGapicVersion();

        $headerDescriptor = new AgentHeaderDescriptor([
            'libName' => $options['libName'],
            'libVersion' => $options['libVersion'],
            'gapicVersion' => $gapicVersion,
        ]);

        $defaultDescriptors = ['headerDescriptor' => $headerDescriptor];
        $this->descriptors = [
            'createShelf' => $defaultDescriptors,
            'getShelf' => $defaultDescriptors,
            'listShelves' => $defaultDescriptors,
            'deleteShelf' => $defaultDescriptors,
            'mergeShelves' => $defaultDescriptors,
            'createBook' => $defaultDescriptors,
            'publishSeries' => $defaultDescriptors,
            'getBook' => $defaultDescriptors,
            'listBooks' => $defaultDescriptors,
            'deleteBook' => $defaultDescriptors,
            'updateBook' => $defaultDescriptors,
            'moveBook' => $defaultDescriptors,
            'listStrings' => $defaultDescriptors,
            'addComments' => $defaultDescriptors,
            'getBookFromArchive' => $defaultDescriptors,
            'getBookFromAnywhere' => $defaultDescriptors,
            'getBookFromAbsolutelyAnywhere' => $defaultDescriptors,
            'updateBookIndex' => $defaultDescriptors,
            'streamShelves' => $defaultDescriptors,
            'streamBooks' => $defaultDescriptors,
            'discussBook' => $defaultDescriptors,
            'monologAboutBook' => $defaultDescriptors,
            'findRelatedBooks' => $defaultDescriptors,
            'addTag' => $defaultDescriptors,
            'addLabel' => $defaultDescriptors,
            'getBigBook' => $defaultDescriptors,
            'getBigNothing' => $defaultDescriptors,
            'testOptionalRequiredFlatteningParams' => $defaultDescriptors,
        ];
        $pageStreamingDescriptors = self::getPageStreamingDescriptors();
        foreach ($pageStreamingDescriptors as $method => $pageStreamingDescriptor) {
            $this->descriptors[$method]['pageStreamingDescriptor'] = $pageStreamingDescriptor;
        }
        $longRunningDescriptors = self::getLongRunningDescriptors();
        foreach ($longRunningDescriptors as $method => $longRunningDescriptor) {
            $this->descriptors[$method]['longRunningDescriptor'] = $longRunningDescriptor + ['operationsClient' => $this->operationsClient];
        }
        $grpcStreamingDescriptors = self::getGrpcStreamingDescriptors();
        foreach ($grpcStreamingDescriptors as $method => $grpcStreamingDescriptor) {
            $this->descriptors[$method]['grpcStreamingDescriptor'] = $grpcStreamingDescriptor;
        }

        $clientConfigJsonString = file_get_contents($options['clientConfigPath']);
        $clientConfig = json_decode($clientConfigJsonString, true);
        $this->defaultCallSettings =
                CallSettings::load('google.example.library.v1.LibraryService',
                                   $clientConfig,
                                   $options['retryingOverride']);

        $this->scopes = $options['scopes'];

        $createStubOptions = [];
        if (array_key_exists('sslCreds', $options)) {
            $createStubOptions['sslCreds'] = $options['sslCreds'];
        }
        $this->grpcCredentialsHelper = new GrpcCredentialsHelper($options);

        $createLibraryServiceStubFunction = function ($hostname, $opts, $channel) {
            return new LibraryServiceGrpcClient($hostname, $opts, $channel);
        };
        if (array_key_exists('createLibraryServiceStubFunction', $options)) {
            $createLibraryServiceStubFunction = $options['createLibraryServiceStubFunction'];
        }
        $this->libraryServiceStub = $this->grpcCredentialsHelper->createStub($createLibraryServiceStubFunction);
        $createLabelerStubFunction = function ($hostname, $opts, $channel) {
            return new LabelerGrpcClient($hostname, $opts, $channel);
        };
        if (array_key_exists('createLabelerStubFunction', $options)) {
            $createLabelerStubFunction = $options['createLabelerStubFunction'];
        }
        $this->labelerStub = $this->grpcCredentialsHelper->createStub($createLabelerStubFunction);
    }

    /**
     * Creates a shelf, and returns the new Shelf.
     * RPC method comment may include special characters: <>&"`'&#64;.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $shelf = new Shelf();
     *     $response = $libraryServiceClient->createShelf($shelf);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param Shelf $shelf The shelf to create.
     * @param array $optionalArgs {
     *     Optional.
     *     @type \Google\GAX\RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\GAX\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\GAX\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\Shelf
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function createShelf($shelf, $optionalArgs = [])
    {
        $request = new CreateShelfRequest();
        $request->setShelf($shelf);

        $defaultCallSettings = $this->defaultCallSettings['createShelf'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'CreateShelf', $mergedSettings, $this->descriptors['createShelf']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Gets a shelf.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $formattedName = $libraryServiceClient->shelfName('[SHELF_ID]');
     *     $options = '';
     *     $response = $libraryServiceClient->getShelf($formattedName, $options);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the shelf to retrieve.
     * @param string $options To test 'options' parameter name conflict.
     * @param array $optionalArgs {
     *     Optional.
     *     @type SomeMessage $message
     *          Field to verify that message-type query parameter gets flattened.
     *     @type StringBuilder $stringBuilder
     *     @type \Google\GAX\RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\GAX\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\GAX\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\Shelf
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function getShelf($name, $options, $optionalArgs = [])
    {
        $request = new GetShelfRequest();
        $request->setName($name);
        $request->setOptions($options);
        if (isset($optionalArgs['message'])) {
            $request->setMessage($optionalArgs['message']);
        }
        if (isset($optionalArgs['stringBuilder'])) {
            $request->setStringBuilder($optionalArgs['stringBuilder']);
        }

        $defaultCallSettings = $this->defaultCallSettings['getShelf'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'GetShelf', $mergedSettings, $this->descriptors['getShelf']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Lists shelves.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *
     *     // Iterate through all elements
     *     $pagedResponse = $libraryServiceClient->listShelves();
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     *
     *     // OR iterate over pages of elements
     *     $pagedResponse = $libraryServiceClient->listShelves();
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *     @type string $pageToken
     *          A page token is used to specify a page of values to be returned.
     *          If no page token is specified (the default), the first page
     *          of values will be returned. Any page token used here must have
     *          been generated by a previous call to the API.
     *     @type \Google\GAX\RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\GAX\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\GAX\RetrySettings} for example usage.
     * }
     *
     * @return \Google\GAX\PagedListResponse
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function listShelves($optionalArgs = [])
    {
        $request = new ListShelvesRequest();
        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        $defaultCallSettings = $this->defaultCallSettings['listShelves'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'ListShelves', $mergedSettings, $this->descriptors['listShelves']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Deletes a shelf.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $formattedName = $libraryServiceClient->shelfName('[SHELF_ID]');
     *     $libraryServiceClient->deleteShelf($formattedName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the shelf to delete.
     * @param array $optionalArgs {
     *     Optional.
     *     @type \Google\GAX\RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\GAX\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\GAX\RetrySettings} for example usage.
     * }
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function deleteShelf($name, $optionalArgs = [])
    {
        $request = new DeleteShelfRequest();
        $request->setName($name);

        $defaultCallSettings = $this->defaultCallSettings['deleteShelf'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'DeleteShelf', $mergedSettings, $this->descriptors['deleteShelf']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Merges two shelves by adding all books from the shelf named
     * `other_shelf_name` to shelf `name`, and deletes
     * `other_shelf_name`. Returns the updated shelf.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $formattedName = $libraryServiceClient->shelfName('[SHELF_ID]');
     *     $formattedOtherShelfName = $libraryServiceClient->shelfName('[SHELF_ID]');
     *     $response = $libraryServiceClient->mergeShelves($formattedName, $formattedOtherShelfName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the shelf we're adding books to.
     * @param string $otherShelfName The name of the shelf we're removing books from and deleting.
     * @param array $optionalArgs {
     *     Optional.
     *     @type \Google\GAX\RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\GAX\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\GAX\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\Shelf
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function mergeShelves($name, $otherShelfName, $optionalArgs = [])
    {
        $request = new MergeShelvesRequest();
        $request->setName($name);
        $request->setOtherShelfName($otherShelfName);

        $defaultCallSettings = $this->defaultCallSettings['mergeShelves'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'MergeShelves', $mergedSettings, $this->descriptors['mergeShelves']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Creates a book.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $formattedName = $libraryServiceClient->shelfName('[SHELF_ID]');
     *     $book = new Book();
     *     $response = $libraryServiceClient->createBook($formattedName, $book);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the shelf in which the book is created.
     * @param Book $book The book to create.
     * @param array $optionalArgs {
     *     Optional.
     *     @type \Google\GAX\RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\GAX\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\GAX\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\Book
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function createBook($name, $book, $optionalArgs = [])
    {
        $request = new CreateBookRequest();
        $request->setName($name);
        $request->setBook($book);

        $defaultCallSettings = $this->defaultCallSettings['createBook'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'CreateBook', $mergedSettings, $this->descriptors['createBook']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Creates a series of books.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $shelf = new Shelf();
     *     $books = [];
     *     $seriesString = 'foobar';
     *     $seriesUuid = new SeriesUuid();
     *     $seriesUuid->setSeriesString($seriesString);
     *     $response = $libraryServiceClient->publishSeries($shelf, $books, $seriesUuid);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param Shelf $shelf The shelf in which the series is created.
     * @param Book[] $books The books to publish in the series.
     * @param SeriesUuid $seriesUuid Uniquely identifies the series to the publishing house.
     * @param array $optionalArgs {
     *     Optional.
     *     @type int $edition
     *          The edition of the series
     *     @type bool $reviewCopy
     *          If the book is in a pre-publish state
     *     @type \Google\GAX\RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\GAX\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\GAX\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\PublishSeriesResponse
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function publishSeries($shelf, $books, $seriesUuid, $optionalArgs = [])
    {
        $request = new PublishSeriesRequest();
        $request->setShelf($shelf);
        $request->setBooks($books);
        $request->setSeriesUuid($seriesUuid);
        if (isset($optionalArgs['edition'])) {
            $request->setEdition($optionalArgs['edition']);
        }
        if (isset($optionalArgs['reviewCopy'])) {
            $request->setReviewCopy($optionalArgs['reviewCopy']);
        }

        $defaultCallSettings = $this->defaultCallSettings['publishSeries'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'PublishSeries', $mergedSettings, $this->descriptors['publishSeries']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Gets a book.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $formattedName = $libraryServiceClient->bookName('[SHELF_ID]', '[BOOK_ID]');
     *     $response = $libraryServiceClient->getBook($formattedName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the book to retrieve.
     * @param array $optionalArgs {
     *     Optional.
     *     @type \Google\GAX\RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\GAX\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\GAX\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\Book
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function getBook($name, $optionalArgs = [])
    {
        $request = new GetBookRequest();
        $request->setName($name);

        $defaultCallSettings = $this->defaultCallSettings['getBook'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'GetBook', $mergedSettings, $this->descriptors['getBook']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Lists books in a shelf.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $formattedName = $libraryServiceClient->shelfName('[SHELF_ID]');
     *     // Iterate through all elements
     *     $pagedResponse = $libraryServiceClient->listBooks($formattedName);
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     *
     *     // OR iterate over pages of elements
     *     $pagedResponse = $libraryServiceClient->listBooks($formattedName);
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the shelf whose books we'd like to list.
     * @param array $optionalArgs {
     *     Optional.
     *     @type int $pageSize
     *          The maximum number of resources contained in the underlying API
     *          response. The API may return fewer values in a page, even if
     *          there are additional values to be retrieved.
     *     @type string $pageToken
     *          A page token is used to specify a page of values to be returned.
     *          If no page token is specified (the default), the first page
     *          of values will be returned. Any page token used here must have
     *          been generated by a previous call to the API.
     *     @type string $filter
     *          To test python built-in wrapping.
     *     @type \Google\GAX\RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\GAX\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\GAX\RetrySettings} for example usage.
     * }
     *
     * @return \Google\GAX\PagedListResponse
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function listBooks($name, $optionalArgs = [])
    {
        $request = new ListBooksRequest();
        $request->setName($name);
        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }
        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }
        if (isset($optionalArgs['filter'])) {
            $request->setFilter($optionalArgs['filter']);
        }

        $defaultCallSettings = $this->defaultCallSettings['listBooks'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'ListBooks', $mergedSettings, $this->descriptors['listBooks']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Deletes a book.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $formattedName = $libraryServiceClient->bookName('[SHELF_ID]', '[BOOK_ID]');
     *     $libraryServiceClient->deleteBook($formattedName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the book to delete.
     * @param array $optionalArgs {
     *     Optional.
     *     @type \Google\GAX\RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\GAX\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\GAX\RetrySettings} for example usage.
     * }
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function deleteBook($name, $optionalArgs = [])
    {
        $request = new DeleteBookRequest();
        $request->setName($name);

        $defaultCallSettings = $this->defaultCallSettings['deleteBook'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'DeleteBook', $mergedSettings, $this->descriptors['deleteBook']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Updates a book.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $formattedName = $libraryServiceClient->bookName('[SHELF_ID]', '[BOOK_ID]');
     *     $book = new Book();
     *     $response = $libraryServiceClient->updateBook($formattedName, $book);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the book to update.
     * @param Book $book The book to update with.
     * @param array $optionalArgs {
     *     Optional.
     *     @type string $optionalFoo
     *          An optional foo.
     *     @type FieldMask $updateMask
     *          A field mask to apply, rendered as an HTTP parameter.
     *     @type \Google\Example\Library\V1\FieldMask $physicalMask
     *          To test Python import clash resolution.
     *     @type \Google\GAX\RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\GAX\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\GAX\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\Book
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function updateBook($name, $book, $optionalArgs = [])
    {
        $request = new UpdateBookRequest();
        $request->setName($name);
        $request->setBook($book);
        if (isset($optionalArgs['optionalFoo'])) {
            $request->setOptionalFoo($optionalArgs['optionalFoo']);
        }
        if (isset($optionalArgs['updateMask'])) {
            $request->setUpdateMask($optionalArgs['updateMask']);
        }
        if (isset($optionalArgs['physicalMask'])) {
            $request->setPhysicalMask($optionalArgs['physicalMask']);
        }

        $defaultCallSettings = $this->defaultCallSettings['updateBook'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'UpdateBook', $mergedSettings, $this->descriptors['updateBook']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Moves a book to another shelf, and returns the new book.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $formattedName = $libraryServiceClient->bookName('[SHELF_ID]', '[BOOK_ID]');
     *     $formattedOtherShelfName = $libraryServiceClient->shelfName('[SHELF_ID]');
     *     $response = $libraryServiceClient->moveBook($formattedName, $formattedOtherShelfName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the book to move.
     * @param string $otherShelfName The name of the destination shelf.
     * @param array $optionalArgs {
     *     Optional.
     *     @type \Google\GAX\RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\GAX\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\GAX\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\Book
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function moveBook($name, $otherShelfName, $optionalArgs = [])
    {
        $request = new MoveBookRequest();
        $request->setName($name);
        $request->setOtherShelfName($otherShelfName);

        $defaultCallSettings = $this->defaultCallSettings['moveBook'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'MoveBook', $mergedSettings, $this->descriptors['moveBook']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Lists a primitive resource. To test go page streaming.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *
     *     // Iterate through all elements
     *     $pagedResponse = $libraryServiceClient->listStrings();
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     *
     *     // OR iterate over pages of elements
     *     $pagedResponse = $libraryServiceClient->listStrings();
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *     @type string $name
     *     @type int $pageSize
     *          The maximum number of resources contained in the underlying API
     *          response. The API may return fewer values in a page, even if
     *          there are additional values to be retrieved.
     *     @type string $pageToken
     *          A page token is used to specify a page of values to be returned.
     *          If no page token is specified (the default), the first page
     *          of values will be returned. Any page token used here must have
     *          been generated by a previous call to the API.
     *     @type \Google\GAX\RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\GAX\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\GAX\RetrySettings} for example usage.
     * }
     *
     * @return \Google\GAX\PagedListResponse
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function listStrings($optionalArgs = [])
    {
        $request = new ListStringsRequest();
        if (isset($optionalArgs['name'])) {
            $request->setName($optionalArgs['name']);
        }
        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }
        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        $defaultCallSettings = $this->defaultCallSettings['listStrings'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'ListStrings', $mergedSettings, $this->descriptors['listStrings']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Adds comments to a book
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $formattedName = $libraryServiceClient->bookName('[SHELF_ID]', '[BOOK_ID]');
     *     $comment = '';
     *     $stage = Stage::UNSET;
     *     $alignment = Alignment::CHAR;
     *     $commentsElement = new Comment();
     *     $commentsElement->setComment($comment);
     *     $commentsElement->setStage($stage);
     *     $commentsElement->setAlignment($alignment);
     *     $comments = [$commentsElement];
     *     $libraryServiceClient->addComments($formattedName, $comments);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name
     * @param Comment[] $comments
     * @param array $optionalArgs {
     *     Optional.
     *     @type \Google\GAX\RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\GAX\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\GAX\RetrySettings} for example usage.
     * }
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function addComments($name, $comments, $optionalArgs = [])
    {
        $request = new AddCommentsRequest();
        $request->setName($name);
        $request->setComments($comments);

        $defaultCallSettings = $this->defaultCallSettings['addComments'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'AddComments', $mergedSettings, $this->descriptors['addComments']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Gets a book from an archive.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $formattedName = $libraryServiceClient->archivedBookName('[ARCHIVE_PATH]', '[BOOK_ID]');
     *     $response = $libraryServiceClient->getBookFromArchive($formattedName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the book to retrieve.
     * @param array $optionalArgs {
     *     Optional.
     *     @type \Google\GAX\RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\GAX\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\GAX\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\BookFromArchive
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function getBookFromArchive($name, $optionalArgs = [])
    {
        $request = new GetBookFromArchiveRequest();
        $request->setName($name);

        $defaultCallSettings = $this->defaultCallSettings['getBookFromArchive'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'GetBookFromArchive', $mergedSettings, $this->descriptors['getBookFromArchive']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Gets a book from a shelf or archive.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $formattedName = $libraryServiceClient->bookName('[SHELF_ID]', '[BOOK_ID]');
     *     $formattedAltBookName = $libraryServiceClient->bookName('[SHELF_ID]', '[BOOK_ID]');
     *     $response = $libraryServiceClient->getBookFromAnywhere($formattedName, $formattedAltBookName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the book to retrieve.
     * @param string $altBookName An alternate book name, used to test restricting flattened field to a
     * single resource name type in a oneof.
     * @param array $optionalArgs {
     *     Optional.
     *     @type \Google\GAX\RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\GAX\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\GAX\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\BookFromAnywhere
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function getBookFromAnywhere($name, $altBookName, $optionalArgs = [])
    {
        $request = new GetBookFromAnywhereRequest();
        $request->setName($name);
        $request->setAltBookName($altBookName);

        $defaultCallSettings = $this->defaultCallSettings['getBookFromAnywhere'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'GetBookFromAnywhere', $mergedSettings, $this->descriptors['getBookFromAnywhere']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Test proper OneOf-Any resource name mapping
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $formattedName = $libraryServiceClient->bookName('[SHELF_ID]', '[BOOK_ID]');
     *     $response = $libraryServiceClient->getBookFromAbsolutelyAnywhere($formattedName);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the book to retrieve.
     * @param array $optionalArgs {
     *     Optional.
     *     @type \Google\GAX\RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\GAX\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\GAX\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\BookFromAnywhere
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function getBookFromAbsolutelyAnywhere($name, $optionalArgs = [])
    {
        $request = new GetBookFromAbsolutelyAnywhereRequest();
        $request->setName($name);

        $defaultCallSettings = $this->defaultCallSettings['getBookFromAbsolutelyAnywhere'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'GetBookFromAbsolutelyAnywhere', $mergedSettings, $this->descriptors['getBookFromAbsolutelyAnywhere']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Updates the index of a book.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $formattedName = $libraryServiceClient->bookName('[SHELF_ID]', '[BOOK_ID]');
     *     $indexName = 'default index';
     *     $indexMapItem = '';
     *     $indexMap = ['default_key' => $indexMapItem];
     *     $libraryServiceClient->updateBookIndex($formattedName, $indexName, $indexMap);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the book to update.
     * @param string $indexName The name of the index for the book
     * @param array $indexMap The index to update the book with
     * @param array $optionalArgs {
     *     Optional.
     *     @type \Google\GAX\RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\GAX\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\GAX\RetrySettings} for example usage.
     * }
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function updateBookIndex($name, $indexName, $indexMap, $optionalArgs = [])
    {
        $request = new UpdateBookIndexRequest();
        $request->setName($name);
        $request->setIndexName($indexName);
        $request->setIndexMap($indexMap);

        $defaultCallSettings = $this->defaultCallSettings['updateBookIndex'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'UpdateBookIndex', $mergedSettings, $this->descriptors['updateBookIndex']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Test server streaming
     * gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *
     *     // Read all responses until the stream is complete
     *     $stream = $libraryServiceClient->streamShelves();
     *     foreach ($stream->readAll() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *     @type int $timeoutMillis
     *          Timeout to use for this call.
     * }
     *
     * @return \Google\GAX\ServerStream
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function streamShelves($optionalArgs = [])
    {
        $request = new StreamShelvesRequest();

        if (array_key_exists('timeoutMillis', $optionalArgs)) {
            $optionalArgs['retrySettings'] = [
                'retriesEnabled' => false,
                'noRetriesRpcTimeoutMillis' => $optionalArgs['timeoutMillis']
            ];
        }

        $defaultCallSettings = $this->defaultCallSettings['streamShelves'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'StreamShelves', $mergedSettings, $this->descriptors['streamShelves']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Test server streaming, non-paged responses.
     * gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $name = '';
     *     // Read all responses until the stream is complete
     *     $stream = $libraryServiceClient->streamBooks($name);
     *     foreach ($stream->readAll() as $element) {
     *         // doSomethingWith($element);
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the shelf whose books we'd like to list.
     * @param array $optionalArgs {
     *     Optional.
     *     @type int $timeoutMillis
     *          Timeout to use for this call.
     * }
     *
     * @return \Google\GAX\ServerStream
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function streamBooks($name, $optionalArgs = [])
    {
        $request = new StreamBooksRequest();
        $request->setName($name);

        if (array_key_exists('timeoutMillis', $optionalArgs)) {
            $optionalArgs['retrySettings'] = [
                'retriesEnabled' => false,
                'noRetriesRpcTimeoutMillis' => $optionalArgs['timeoutMillis']
            ];
        }

        $defaultCallSettings = $this->defaultCallSettings['streamBooks'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'StreamBooks', $mergedSettings, $this->descriptors['streamBooks']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Test bidi-streaming.
     * gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $name = '';
     *     $request = new DiscussBookRequest();
     *     $request->setName($name);
     *     $requests = [$request];
     *
     *     // Write all requests to the server, then read all responses until the
     *     // stream is complete
     *     $stream = $libraryServiceClient->discussBook();
     *     $stream->writeAll($requests);
     *     foreach ($stream->closeWriteAndReadAll() as $element) {
     *         // doSomethingWith($element);
     *     }
     *
     *     // OR write requests individually, making read() calls if
     *     // required. Call closeWrite() once writes are complete, and read the
     *     // remaining responses from the server.
     *     $stream = $libraryServiceClient->discussBook();
     *     foreach ($requests as $request) {
     *         $stream->write($request);
     *         // if required, read a single response from the stream
     *         $element = $stream->read();
     *         // doSomethingWith($element)
     *     }
     *     $stream->closeWrite();
     *     $element = $stream->read();
     *     while (!is_null($element)) {
     *         // doSomethingWith($element)
     *         $element = $stream->read();
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *     @type int $timeoutMillis
     *          Timeout to use for this call.
     * }
     *
     * @return \Google\GAX\BidiStream
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function discussBook($optionalArgs = [])
    {
        if (array_key_exists('timeoutMillis', $optionalArgs)) {
            $optionalArgs['retrySettings'] = [
                'retriesEnabled' => false,
                'noRetriesRpcTimeoutMillis' => $optionalArgs['timeoutMillis']
            ];
        }

        $defaultCallSettings = $this->defaultCallSettings['discussBook'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'DiscussBook', $mergedSettings, $this->descriptors['discussBook']);

        return $callable(
            null,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Test client streaming.
     * gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $name = '';
     *     $request = new DiscussBookRequest();
     *     $request->setName($name);
     *     $requests = [$request];
     *
     *     // Write data to server and wait for a response
     *     $stream = $libraryServiceClient->monologAboutBook();
     *     $result = $stream->writeAllAndReadResponse($requests);
     *     // doSomethingWith($result)
     *
     *     // OR write data as it becomes available, then wait for a response
     *     $stream = $libraryServiceClient->monologAboutBook();
     *     foreach ($requests as $request) {
     *         $stream->write($request);
     *     }
     *     $result = $stream->readResponse();
     *     // doSomethingWith($result)
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *     @type int $timeoutMillis
     *          Timeout to use for this call.
     * }
     *
     * @return \Google\GAX\ClientStream
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function monologAboutBook($optionalArgs = [])
    {
        if (array_key_exists('timeoutMillis', $optionalArgs)) {
            $optionalArgs['retrySettings'] = [
                'retriesEnabled' => false,
                'noRetriesRpcTimeoutMillis' => $optionalArgs['timeoutMillis']
            ];
        }

        $defaultCallSettings = $this->defaultCallSettings['monologAboutBook'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'MonologAboutBook', $mergedSettings, $this->descriptors['monologAboutBook']);

        return $callable(
            null,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     *
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $namesElement = '';
     *     $names = [$namesElement];
     *     $shelves = [];
     *     // Iterate through all elements
     *     $pagedResponse = $libraryServiceClient->findRelatedBooks($names, $shelves);
     *     foreach ($pagedResponse->iterateAllElements() as $element) {
     *         // doSomethingWith($element);
     *     }
     *
     *     // OR iterate over pages of elements
     *     $pagedResponse = $libraryServiceClient->findRelatedBooks($names, $shelves);
     *     foreach ($pagedResponse->iteratePages() as $page) {
     *         foreach ($page as $element) {
     *             // doSomethingWith($element);
     *         }
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string[] $names
     * @param string[] $shelves
     * @param array $optionalArgs {
     *     Optional.
     *     @type int $pageSize
     *          The maximum number of resources contained in the underlying API
     *          response. The API may return fewer values in a page, even if
     *          there are additional values to be retrieved.
     *     @type string $pageToken
     *          A page token is used to specify a page of values to be returned.
     *          If no page token is specified (the default), the first page
     *          of values will be returned. Any page token used here must have
     *          been generated by a previous call to the API.
     *     @type \Google\GAX\RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\GAX\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\GAX\RetrySettings} for example usage.
     * }
     *
     * @return \Google\GAX\PagedListResponse
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function findRelatedBooks($names, $shelves, $optionalArgs = [])
    {
        $request = new FindRelatedBooksRequest();
        $request->setNames($names);
        $request->setShelves($shelves);
        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }
        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        $defaultCallSettings = $this->defaultCallSettings['findRelatedBooks'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'FindRelatedBooks', $mergedSettings, $this->descriptors['findRelatedBooks']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Adds a tag to the book. This RPC is a mixin.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $formattedResource = $libraryServiceClient->bookName('[SHELF_ID]', '[BOOK_ID]');
     *     $tag = '';
     *     $response = $libraryServiceClient->addTag($formattedResource, $tag);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $resource REQUIRED: The resource which the tag is being added to.
     * Resource is usually specified as a path, such as,
     * projects/{project}/zones/{zone}/disks/{disk}.
     * @param string $tag REQUIRED: The tag to add.
     * @param array $optionalArgs {
     *     Optional.
     *     @type \Google\GAX\RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\GAX\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\GAX\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Tagger\CustomNamespace\V1\AddTagResponse
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function addTag($resource, $tag, $optionalArgs = [])
    {
        $request = new AddTagRequest();
        $request->setResource($resource);
        $request->setTag($tag);

        $defaultCallSettings = $this->defaultCallSettings['addTag'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'AddTag', $mergedSettings, $this->descriptors['addTag']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Adds a label to the entity.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $formattedResource = $libraryServiceClient->bookName('[SHELF_ID]', '[BOOK_ID]');
     *     $label = '';
     *     $response = $libraryServiceClient->addLabel($formattedResource, $label);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $resource REQUIRED: The resource which the label is being added to.
     * Resource is usually specified as a path, such as,
     * projects/{project}/zones/{zone}/disks/{disk}.
     * @param string $label REQUIRED: The label to add.
     * @param array $optionalArgs {
     *     Optional.
     *     @type \Google\GAX\RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\GAX\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\GAX\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Tagger\CustomNamespace\V1\AddLabelResponse
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function addLabel($resource, $label, $optionalArgs = [])
    {
        $request = new AddLabelRequest();
        $request->setResource($resource);
        $request->setLabel($label);

        $defaultCallSettings = $this->defaultCallSettings['addLabel'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->labelerStub, 'AddLabel', $mergedSettings, $this->descriptors['addLabel']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Test long-running operations
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $formattedName = $libraryServiceClient->bookName('[SHELF_ID]', '[BOOK_ID]');
     *     $operationResponse = $libraryServiceClient->getBigBook($formattedName);
     *     $operationResponse->pollUntilComplete();
     *     if ($operationResponse->operationSucceeded()) {
     *       $result = $operationResponse->getResult();
     *       // doSomethingWith($result)
     *     } else {
     *       $error = $operationResponse->getError();
     *       // handleError($error)
     *     }
     *
     *     // OR start the operation, keep the operation name, and resume later
     *     $operationResponse = $libraryServiceClient->getBigBook($formattedName);
     *     $operationName = $operationResponse->getName();
     *     // ... do other work
     *     $newOperationResponse = $libraryServiceClient->resumeOperation($operationName, 'getBigBook');
     *     while (!$newOperationResponse->isDone()) {
     *         // ... do other work
     *         $newOperationResponse->reload();
     *     }
     *     if ($newOperationResponse->operationSucceeded()) {
     *       $result = $newOperationResponse->getResult();
     *       // doSomethingWith($result)
     *     } else {
     *       $error = $newOperationResponse->getError();
     *       // handleError($error)
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the book to retrieve.
     * @param array $optionalArgs {
     *     Optional.
     *     @type \Google\GAX\RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\GAX\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\GAX\RetrySettings} for example usage.
     * }
     *
     * @return \Google\GAX\OperationResponse
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function getBigBook($name, $optionalArgs = [])
    {
        $request = new GetBookRequest();
        $request->setName($name);

        $defaultCallSettings = $this->defaultCallSettings['getBigBook'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'GetBigBook', $mergedSettings, $this->descriptors['getBigBook']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Test long-running operations with empty return type.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $formattedName = $libraryServiceClient->bookName('[SHELF_ID]', '[BOOK_ID]');
     *     $operationResponse = $libraryServiceClient->getBigNothing($formattedName);
     *     $operationResponse->pollUntilComplete();
     *     if ($operationResponse->operationSucceeded()) {
     *       // operation succeeded and returns no value
     *     } else {
     *       $error = $operationResponse->getError();
     *       // handleError($error)
     *     }
     *
     *     // OR start the operation, keep the operation name, and resume later
     *     $operationResponse = $libraryServiceClient->getBigNothing($formattedName);
     *     $operationName = $operationResponse->getName();
     *     // ... do other work
     *     $newOperationResponse = $libraryServiceClient->resumeOperation($operationName, 'getBigNothing');
     *     while (!$newOperationResponse->isDone()) {
     *         // ... do other work
     *         $newOperationResponse->reload();
     *     }
     *     if ($newOperationResponse->operationSucceeded()) {
     *       // operation succeeded and returns no value
     *     } else {
     *       $error = $newOperationResponse->getError();
     *       // handleError($error)
     *     }
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param string $name The name of the book to retrieve.
     * @param array $optionalArgs {
     *     Optional.
     *     @type \Google\GAX\RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\GAX\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\GAX\RetrySettings} for example usage.
     * }
     *
     * @return \Google\GAX\OperationResponse
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function getBigNothing($name, $optionalArgs = [])
    {
        $request = new GetBookRequest();
        $request->setName($name);

        $defaultCallSettings = $this->defaultCallSettings['getBigNothing'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'GetBigNothing', $mergedSettings, $this->descriptors['getBigNothing']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Test optional flattening parameters of all types
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceClient = new LibraryServiceClient();
     *     $requiredSingularInt32 = 0;
     *     $requiredSingularInt64 = 0;
     *     $requiredSingularFloat = 0.0;
     *     $requiredSingularDouble = 0.0;
     *     $requiredSingularBool = false;
     *     $requiredSingularEnum = InnerEnum::ZERO;
     *     $requiredSingularString = '';
     *     $requiredSingularBytes = '';
     *     $requiredSingularMessage = new InnerMessage();
     *     $requiredSingularResourceName = '';
     *     $requiredSingularResourceNameOneof = '';
     *     $requiredSingularFixed32 = 0;
     *     $requiredSingularFixed64 = 0;
     *     $requiredRepeatedInt32 = [];
     *     $requiredRepeatedInt64 = [];
     *     $requiredRepeatedFloat = [];
     *     $requiredRepeatedDouble = [];
     *     $requiredRepeatedBool = [];
     *     $requiredRepeatedEnum = [];
     *     $requiredRepeatedString = [];
     *     $requiredRepeatedBytes = [];
     *     $requiredRepeatedMessage = [];
     *     $formattedRequiredRepeatedResourceName = [];
     *     $formattedRequiredRepeatedResourceNameOneof = [];
     *     $requiredRepeatedFixed32 = [];
     *     $requiredRepeatedFixed64 = [];
     *     $requiredMap = [];
     *     $response = $libraryServiceClient->testOptionalRequiredFlatteningParams($requiredSingularInt32, $requiredSingularInt64, $requiredSingularFloat, $requiredSingularDouble, $requiredSingularBool, $requiredSingularEnum, $requiredSingularString, $requiredSingularBytes, $requiredSingularMessage, $requiredSingularResourceName, $requiredSingularResourceNameOneof, $requiredSingularFixed32, $requiredSingularFixed64, $requiredRepeatedInt32, $requiredRepeatedInt64, $requiredRepeatedFloat, $requiredRepeatedDouble, $requiredRepeatedBool, $requiredRepeatedEnum, $requiredRepeatedString, $requiredRepeatedBytes, $requiredRepeatedMessage, $formattedRequiredRepeatedResourceName, $formattedRequiredRepeatedResourceNameOneof, $requiredRepeatedFixed32, $requiredRepeatedFixed64, $requiredMap);
     * } finally {
     *     $libraryServiceClient->close();
     * }
     * ```
     *
     * @param int $requiredSingularInt32
     * @param int $requiredSingularInt64
     * @param float $requiredSingularFloat
     * @param float $requiredSingularDouble
     * @param bool $requiredSingularBool
     * @param int $requiredSingularEnum For allowed values, use constants defined on {@see \Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest_InnerEnum}
     * @param string $requiredSingularString
     * @param string $requiredSingularBytes
     * @param InnerMessage $requiredSingularMessage
     * @param string $requiredSingularResourceName
     * @param string $requiredSingularResourceNameOneof
     * @param int $requiredSingularFixed32
     * @param int $requiredSingularFixed64
     * @param int[] $requiredRepeatedInt32
     * @param int[] $requiredRepeatedInt64
     * @param float[] $requiredRepeatedFloat
     * @param float[] $requiredRepeatedDouble
     * @param bool[] $requiredRepeatedBool
     * @param int[] $requiredRepeatedEnum For allowed values, use constants defined on {@see \Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest_InnerEnum}
     * @param string[] $requiredRepeatedString
     * @param string[] $requiredRepeatedBytes
     * @param InnerMessage[] $requiredRepeatedMessage
     * @param string[] $requiredRepeatedResourceName
     * @param string[] $requiredRepeatedResourceNameOneof
     * @param int[] $requiredRepeatedFixed32
     * @param int[] $requiredRepeatedFixed64
     * @param array $requiredMap
     * @param array $optionalArgs {
     *     Optional.
     *     @type int $optionalSingularInt32
     *     @type int $optionalSingularInt64
     *     @type float $optionalSingularFloat
     *     @type float $optionalSingularDouble
     *     @type bool $optionalSingularBool
     *     @type int $optionalSingularEnum
     *          For allowed values, use constants defined on {@see \Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest_InnerEnum}
     *     @type string $optionalSingularString
     *     @type string $optionalSingularBytes
     *     @type InnerMessage $optionalSingularMessage
     *     @type string $optionalSingularResourceName
     *     @type string $optionalSingularResourceNameOneof
     *     @type int $optionalSingularFixed32
     *     @type int $optionalSingularFixed64
     *     @type int[] $optionalRepeatedInt32
     *     @type int[] $optionalRepeatedInt64
     *     @type float[] $optionalRepeatedFloat
     *     @type float[] $optionalRepeatedDouble
     *     @type bool[] $optionalRepeatedBool
     *     @type int[] $optionalRepeatedEnum
     *          For allowed values, use constants defined on {@see \Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest_InnerEnum}
     *     @type string[] $optionalRepeatedString
     *     @type string[] $optionalRepeatedBytes
     *     @type InnerMessage[] $optionalRepeatedMessage
     *     @type string[] $optionalRepeatedResourceName
     *     @type string[] $optionalRepeatedResourceNameOneof
     *     @type int[] $optionalRepeatedFixed32
     *     @type int[] $optionalRepeatedFixed64
     *     @type array $optionalMap
     *     @type \Google\GAX\RetrySettings|array $retrySettings
     *          Retry settings to use for this call. Can be a
     *          {@see Google\GAX\RetrySettings} object, or an associative array
     *          of retry settings parameters. See the documentation on
     *          {@see Google\GAX\RetrySettings} for example usage.
     * }
     *
     * @return \Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsResponse
     *
     * @throws \Google\GAX\ApiException if the remote call fails
     * @experimental
     */
    public function testOptionalRequiredFlatteningParams($requiredSingularInt32, $requiredSingularInt64, $requiredSingularFloat, $requiredSingularDouble, $requiredSingularBool, $requiredSingularEnum, $requiredSingularString, $requiredSingularBytes, $requiredSingularMessage, $requiredSingularResourceName, $requiredSingularResourceNameOneof, $requiredSingularFixed32, $requiredSingularFixed64, $requiredRepeatedInt32, $requiredRepeatedInt64, $requiredRepeatedFloat, $requiredRepeatedDouble, $requiredRepeatedBool, $requiredRepeatedEnum, $requiredRepeatedString, $requiredRepeatedBytes, $requiredRepeatedMessage, $requiredRepeatedResourceName, $requiredRepeatedResourceNameOneof, $requiredRepeatedFixed32, $requiredRepeatedFixed64, $requiredMap, $optionalArgs = [])
    {
        $request = new TestOptionalRequiredFlatteningParamsRequest();
        $request->setRequiredSingularInt32($requiredSingularInt32);
        $request->setRequiredSingularInt64($requiredSingularInt64);
        $request->setRequiredSingularFloat($requiredSingularFloat);
        $request->setRequiredSingularDouble($requiredSingularDouble);
        $request->setRequiredSingularBool($requiredSingularBool);
        $request->setRequiredSingularEnum($requiredSingularEnum);
        $request->setRequiredSingularString($requiredSingularString);
        $request->setRequiredSingularBytes($requiredSingularBytes);
        $request->setRequiredSingularMessage($requiredSingularMessage);
        $request->setRequiredSingularResourceName($requiredSingularResourceName);
        $request->setRequiredSingularResourceNameOneof($requiredSingularResourceNameOneof);
        $request->setRequiredSingularFixed32($requiredSingularFixed32);
        $request->setRequiredSingularFixed64($requiredSingularFixed64);
        $request->setRequiredRepeatedInt32($requiredRepeatedInt32);
        $request->setRequiredRepeatedInt64($requiredRepeatedInt64);
        $request->setRequiredRepeatedFloat($requiredRepeatedFloat);
        $request->setRequiredRepeatedDouble($requiredRepeatedDouble);
        $request->setRequiredRepeatedBool($requiredRepeatedBool);
        $request->setRequiredRepeatedEnum($requiredRepeatedEnum);
        $request->setRequiredRepeatedString($requiredRepeatedString);
        $request->setRequiredRepeatedBytes($requiredRepeatedBytes);
        $request->setRequiredRepeatedMessage($requiredRepeatedMessage);
        $request->setRequiredRepeatedResourceName($requiredRepeatedResourceName);
        $request->setRequiredRepeatedResourceNameOneof($requiredRepeatedResourceNameOneof);
        $request->setRequiredRepeatedFixed32($requiredRepeatedFixed32);
        $request->setRequiredRepeatedFixed64($requiredRepeatedFixed64);
        $request->setRequiredMap($requiredMap);
        if (isset($optionalArgs['optionalSingularInt32'])) {
            $request->setOptionalSingularInt32($optionalArgs['optionalSingularInt32']);
        }
        if (isset($optionalArgs['optionalSingularInt64'])) {
            $request->setOptionalSingularInt64($optionalArgs['optionalSingularInt64']);
        }
        if (isset($optionalArgs['optionalSingularFloat'])) {
            $request->setOptionalSingularFloat($optionalArgs['optionalSingularFloat']);
        }
        if (isset($optionalArgs['optionalSingularDouble'])) {
            $request->setOptionalSingularDouble($optionalArgs['optionalSingularDouble']);
        }
        if (isset($optionalArgs['optionalSingularBool'])) {
            $request->setOptionalSingularBool($optionalArgs['optionalSingularBool']);
        }
        if (isset($optionalArgs['optionalSingularEnum'])) {
            $request->setOptionalSingularEnum($optionalArgs['optionalSingularEnum']);
        }
        if (isset($optionalArgs['optionalSingularString'])) {
            $request->setOptionalSingularString($optionalArgs['optionalSingularString']);
        }
        if (isset($optionalArgs['optionalSingularBytes'])) {
            $request->setOptionalSingularBytes($optionalArgs['optionalSingularBytes']);
        }
        if (isset($optionalArgs['optionalSingularMessage'])) {
            $request->setOptionalSingularMessage($optionalArgs['optionalSingularMessage']);
        }
        if (isset($optionalArgs['optionalSingularResourceName'])) {
            $request->setOptionalSingularResourceName($optionalArgs['optionalSingularResourceName']);
        }
        if (isset($optionalArgs['optionalSingularResourceNameOneof'])) {
            $request->setOptionalSingularResourceNameOneof($optionalArgs['optionalSingularResourceNameOneof']);
        }
        if (isset($optionalArgs['optionalSingularFixed32'])) {
            $request->setOptionalSingularFixed32($optionalArgs['optionalSingularFixed32']);
        }
        if (isset($optionalArgs['optionalSingularFixed64'])) {
            $request->setOptionalSingularFixed64($optionalArgs['optionalSingularFixed64']);
        }
        if (isset($optionalArgs['optionalRepeatedInt32'])) {
            $request->setOptionalRepeatedInt32($optionalArgs['optionalRepeatedInt32']);
        }
        if (isset($optionalArgs['optionalRepeatedInt64'])) {
            $request->setOptionalRepeatedInt64($optionalArgs['optionalRepeatedInt64']);
        }
        if (isset($optionalArgs['optionalRepeatedFloat'])) {
            $request->setOptionalRepeatedFloat($optionalArgs['optionalRepeatedFloat']);
        }
        if (isset($optionalArgs['optionalRepeatedDouble'])) {
            $request->setOptionalRepeatedDouble($optionalArgs['optionalRepeatedDouble']);
        }
        if (isset($optionalArgs['optionalRepeatedBool'])) {
            $request->setOptionalRepeatedBool($optionalArgs['optionalRepeatedBool']);
        }
        if (isset($optionalArgs['optionalRepeatedEnum'])) {
            $request->setOptionalRepeatedEnum($optionalArgs['optionalRepeatedEnum']);
        }
        if (isset($optionalArgs['optionalRepeatedString'])) {
            $request->setOptionalRepeatedString($optionalArgs['optionalRepeatedString']);
        }
        if (isset($optionalArgs['optionalRepeatedBytes'])) {
            $request->setOptionalRepeatedBytes($optionalArgs['optionalRepeatedBytes']);
        }
        if (isset($optionalArgs['optionalRepeatedMessage'])) {
            $request->setOptionalRepeatedMessage($optionalArgs['optionalRepeatedMessage']);
        }
        if (isset($optionalArgs['optionalRepeatedResourceName'])) {
            $request->setOptionalRepeatedResourceName($optionalArgs['optionalRepeatedResourceName']);
        }
        if (isset($optionalArgs['optionalRepeatedResourceNameOneof'])) {
            $request->setOptionalRepeatedResourceNameOneof($optionalArgs['optionalRepeatedResourceNameOneof']);
        }
        if (isset($optionalArgs['optionalRepeatedFixed32'])) {
            $request->setOptionalRepeatedFixed32($optionalArgs['optionalRepeatedFixed32']);
        }
        if (isset($optionalArgs['optionalRepeatedFixed64'])) {
            $request->setOptionalRepeatedFixed64($optionalArgs['optionalRepeatedFixed64']);
        }
        if (isset($optionalArgs['optionalMap'])) {
            $request->setOptionalMap($optionalArgs['optionalMap']);
        }

        $defaultCallSettings = $this->defaultCallSettings['testOptionalRequiredFlatteningParams'];
        if (isset($optionalArgs['retrySettings']) && is_array($optionalArgs['retrySettings'])) {
            $optionalArgs['retrySettings'] = $defaultCallSettings->getRetrySettings()->with(
                $optionalArgs['retrySettings']
            );
        }
        $mergedSettings = $defaultCallSettings->merge(new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'TestOptionalRequiredFlatteningParams', $mergedSettings, $this->descriptors['testOptionalRequiredFlatteningParams']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Initiates an orderly shutdown in which preexisting calls continue but new
     * calls are immediately cancelled.
     * @experimental
     */
    public function close()
    {
        $this->libraryServiceStub->close();
        $this->labelerStub->close();
    }

    private function createCredentialsCallback()
    {
        return $this->grpcCredentialsHelper->createCallCredentialsCallback();
    }
}
============== file: src/Example/Library/V1/LibraryServiceClient.php ==============
<?php
/*
 * Copyright 2017, Google LLC All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * This file was generated from the file
 * https://github.com/google/googleapis/blob/master/library.proto
 * and updates to that file get reflected here through a refresh process.
 *
 * EXPERIMENTAL: this client library class has not yet been declared beta. This class may change
 * more frequently than those which have been declared beta or 1.0, including changes which break
 * backwards compatibility.
 *
 * @experimental
 */

namespace Google\Example\Library\V1;

use Google\Example\Library\V1\Gapic\LibraryServiceGapicClient;

/**
 * {@inheritdoc}
 */
class LibraryServiceClient extends LibraryServiceGapicClient
{
    // This class is intentionally empty, and is intended to hold manual additions to the generated {@see LibraryServiceClientImpl} class.
}
============== file: src/Example/Library/V1/resources/library_service_client_config.json ==============
{
  "interfaces": {
    "google.example.library.v1.LibraryService": {
      "retry_codes": {
        "idempotent": [
          "DEADLINE_EXCEEDED",
          "UNAVAILABLE"
        ],
        "non_idempotent": []
      },
      "retry_params": {
        "default": {
          "initial_retry_delay_millis": 100,
          "retry_delay_multiplier": 1.2,
          "max_retry_delay_millis": 1000,
          "initial_rpc_timeout_millis": 300,
          "rpc_timeout_multiplier": 1.3,
          "max_rpc_timeout_millis": 3000,
          "total_timeout_millis": 30000
        }
      },
      "methods": {
        "CreateShelf": {
          "timeout_millis": 1000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "GetShelf": {
          "timeout_millis": 2000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "ListShelves": {
          "timeout_millis": 3000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "DeleteShelf": {
          "timeout_millis": 4000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "MergeShelves": {
          "timeout_millis": 5000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "CreateBook": {
          "timeout_millis": 6000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "PublishSeries": {
          "timeout_millis": 7000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default",
          "bundling": {
            "element_count_threshold": 6,
            "element_count_limit": 7,
            "request_byte_threshold": 100000,
            "request_byte_limit": 150000,
            "delay_threshold_millis": 500
          }
        },
        "GetBook": {
          "timeout_millis": 8000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "ListBooks": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "DeleteBook": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "UpdateBook": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "MoveBook": {
          "timeout_millis": 10000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "ListStrings": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "AddComments": {
          "timeout_millis": 10000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default",
          "bundling": {
            "element_count_threshold": 6,
            "request_byte_threshold": 100000,
            "delay_threshold_millis": 500
          }
        },
        "GetBookFromArchive": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "GetBookFromAnywhere": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "GetBookFromAbsolutelyAnywhere": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "UpdateBookIndex": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "StreamShelves": {
          "timeout_millis": 30000
        },
        "StreamBooks": {
          "timeout_millis": 30000
        },
        "DiscussBook": {
          "timeout_millis": 30000
        },
        "MonologAboutBook": {
          "timeout_millis": 30000
        },
        "FindRelatedBooks": {
          "timeout_millis": 3000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "AddTag": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "AddLabel": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "GetBigBook": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "GetBigNothing": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "TestOptionalRequiredFlatteningParams": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        }
      }
    }
  }
}

============== file: tests/system/Example/Library/V1/LibraryServiceSmokeTest.php ==============
<?php
/*
 * Copyright 2017, Google LLC All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * This file was automatically generated - do not edit!
 */

namespace Google\Tests\System\Example\Library\V1;

use Google\Example\Library\V1\LibraryServiceClient;
use Google\Example\Library\V1\Book;
use Google\Example\Library\V1\Book_Rating as Rating;
use Google\Example\Library\V1\UpdateBookRequest;
use Google\GAX\Testing\GeneratedTest;
use Google\Protobuf\FieldMask;

/**
 * @group library
 * @group grpc
 */
class LibraryServiceSmokeTest extends GeneratedTest
{
    /**
     * @test
     */
    public function updateBookTest()
    {
        $projectId = getenv('PROJECT_ID');

        $libraryServiceClient = new LibraryServiceClient();
        $formattedName = $libraryServiceClient->bookName('testShelf-'. time(), $projectId);
        $optionalFoo = '';
        $rating = Rating::GOOD;
        $book = new Book();
        $book->setRating($rating);
        $updateMask = new FieldMask();
        $physicalMask = new \Google\Example\Library\V1\FieldMask();
        $libraryServiceClient->updateBook($formattedName, $book, ['optionalFoo' => $optionalFoo, 'updateMask' => $updateMask, 'physicalMask' => $physicalMask]);
    }
}
============== file: tests/unit/Example/Library/V1/LibraryServiceClientTest.php ==============
<?php
/*
 * Copyright 2017, Google LLC All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * This file was automatically generated - do not edit!
 */

namespace Google\Tests\Unit\Example\Library\V1;

use Google\Example\Library\V1\LibraryServiceClient;
use Google\Example\Library\V1\AddCommentsRequest;
use Google\Example\Library\V1\Book;
use Google\Example\Library\V1\BookFromAnywhere;
use Google\Example\Library\V1\BookFromArchive;
use Google\Example\Library\V1\Comment;
use Google\Example\Library\V1\Comment_Stage as Stage;
use Google\Example\Library\V1\CreateBookRequest;
use Google\Example\Library\V1\CreateShelfRequest;
use Google\Example\Library\V1\DeleteBookRequest;
use Google\Example\Library\V1\DeleteShelfRequest;
use Google\Example\Library\V1\DiscussBookRequest;
use Google\Example\Library\V1\FindRelatedBooksRequest;
use Google\Example\Library\V1\FindRelatedBooksResponse;
use Google\Example\Library\V1\GetBookFromAbsolutelyAnywhereRequest;
use Google\Example\Library\V1\GetBookFromAnywhereRequest;
use Google\Example\Library\V1\GetBookFromArchiveRequest;
use Google\Example\Library\V1\GetBookRequest;
use Google\Example\Library\V1\GetShelfRequest;
use Google\Example\Library\V1\LibraryServiceGrpcClient;
use Google\Example\Library\V1\ListBooksRequest;
use Google\Example\Library\V1\ListBooksResponse;
use Google\Example\Library\V1\ListShelvesRequest;
use Google\Example\Library\V1\ListShelvesResponse;
use Google\Example\Library\V1\ListStringsRequest;
use Google\Example\Library\V1\ListStringsResponse;
use Google\Example\Library\V1\MergeShelvesRequest;
use Google\Example\Library\V1\MoveBookRequest;
use Google\Example\Library\V1\PublishSeriesRequest;
use Google\Example\Library\V1\PublishSeriesResponse;
use Google\Example\Library\V1\SeriesUuid;
use Google\Example\Library\V1\Shelf;
use Google\Example\Library\V1\SomeMessage2_SomeMessage3_Alignment as Alignment;
use Google\Example\Library\V1\StreamBooksRequest;
use Google\Example\Library\V1\StreamShelvesRequest;
use Google\Example\Library\V1\StreamShelvesResponse;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest_InnerEnum as InnerEnum;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest_InnerMessage as InnerMessage;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsResponse;
use Google\Example\Library\V1\UpdateBookIndexRequest;
use Google\Example\Library\V1\UpdateBookRequest;
use Google\GAX\ApiException;
use Google\GAX\BidiStream;
use Google\GAX\GrpcCredentialsHelper;
use Google\GAX\LongRunning\OperationsClient;
use Google\GAX\ServerStream;
use Google\GAX\Testing\GeneratedTest;
use Google\GAX\Testing\LongRunning\MockOperationsImpl;
use Google\GAX\Testing\MockStubTrait;
use Google\Longrunning\GetOperationRequest;
use Google\Longrunning\Operation;
use Google\Protobuf\Any;
use Google\Protobuf\GPBEmpty;
use Google\Tagger\CustomNamespace\V1\AddLabelRequest;
use Google\Tagger\CustomNamespace\V1\AddLabelResponse;
use Google\Tagger\CustomNamespace\V1\AddTagRequest;
use Google\Tagger\CustomNamespace\V1\AddTagResponse;
use Google\Tagger\CustomNamespace\V1\LabelerGrpcClient;
use Grpc;
use PHPUnit_Framework_TestCase;
use stdClass;

/**
 * @group library
 * @group grpc
 */
class LibraryServiceClientTest extends GeneratedTest
{
    public function createMockLibraryServiceImpl($hostname, $opts)
    {
        return new MockLibraryServiceImpl($hostname, $opts);
    }

    public function createMockLabelerImpl($hostname, $opts)
    {
        return new MockLabelerImpl($hostname, $opts);
    }

    public function createMockOperationsStub($hostname, $opts)
    {
        return new MockOperationsImpl($hostname, $opts);
    }

    private function createStub($createGrpcStub)
    {
        $grpcCredentialsHelper = new GrpcCredentialsHelper([
            'serviceAddress' => LibraryServiceClient::SERVICE_ADDRESS,
            'port' => LibraryServiceClient::DEFAULT_SERVICE_PORT,
            'scopes' => ['unknown-service-scopes'],
        ]);
        return $grpcCredentialsHelper->createStub($createGrpcStub);
    }

    /**
     * @return LibraryServiceClient
     */
    private function createClient($createStubFuncName, $grpcStub, $options = [])
    {
        return new LibraryServiceClient($options + [
            $createStubFuncName => function ($hostname, $opts) use ($grpcStub) {
                return $grpcStub;
            },
        ]);
    }
    /**
     * @test
     */
    public function createShelfTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $name = 'name3373707';
        $theme = 'theme110327241';
        $internalTheme = 'internalTheme792518087';
        $expectedResponse = new Shelf();
        $expectedResponse->setName($name);
        $expectedResponse->setTheme($theme);
        $expectedResponse->setInternalTheme($internalTheme);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $shelf = new Shelf();

        $response = $client->createShelf($shelf);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/CreateShelf', $actualFuncCall);

        $this->assertProtobufEquals($shelf, $actualRequestObject->getShelf());

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function createShelfExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $grpcStub->addResponse(null, $status);

        // Mock request
        $shelf = new Shelf();

        try {
            $client->createShelf($shelf);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function getShelfTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $name2 = 'name2-1052831874';
        $theme = 'theme110327241';
        $internalTheme = 'internalTheme792518087';
        $expectedResponse = new Shelf();
        $expectedResponse->setName($name2);
        $expectedResponse->setTheme($theme);
        $expectedResponse->setInternalTheme($internalTheme);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->shelfName('[SHELF_ID]');
        $options = 'options-1249474914';

        $response = $client->getShelf($formattedName, $options);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/GetShelf', $actualFuncCall);

        $this->assertProtobufEquals($formattedName, $actualRequestObject->getName());
        $this->assertProtobufEquals($options, $actualRequestObject->getOptions());

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function getShelfExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $grpcStub->addResponse(null, $status);

        // Mock request
        $formattedName = $client->shelfName('[SHELF_ID]');
        $options = 'options-1249474914';

        try {
            $client->getShelf($formattedName, $options);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function listShelvesTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $nextPageToken = '';
        $shelvesElement = new Shelf();
        $shelves = [$shelvesElement];
        $expectedResponse = new ListShelvesResponse();
        $expectedResponse->setNextPageToken($nextPageToken);
        $expectedResponse->setShelves($shelves);
        $grpcStub->addResponse($expectedResponse);

        $response = $client->listShelves();
        $this->assertEquals($expectedResponse, $response->getPage()->getResponseObject());
        $resources = iterator_to_array($response->iterateAllElements());
        $this->assertSame(1, count($resources));
        $this->assertEquals($expectedResponse->getShelves()[0], $resources[0]);

        $actualRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/ListShelves', $actualFuncCall);

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function listShelvesExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $grpcStub->addResponse(null, $status);

        try {
            $client->listShelves();
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function deleteShelfTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $expectedResponse = new GPBEmpty();
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->shelfName('[SHELF_ID]');

        $client->deleteShelf($formattedName);
        $actualRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/DeleteShelf', $actualFuncCall);

        $this->assertProtobufEquals($formattedName, $actualRequestObject->getName());

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function deleteShelfExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $grpcStub->addResponse(null, $status);

        // Mock request
        $formattedName = $client->shelfName('[SHELF_ID]');

        try {
            $client->deleteShelf($formattedName);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function mergeShelvesTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $name2 = 'name2-1052831874';
        $theme = 'theme110327241';
        $internalTheme = 'internalTheme792518087';
        $expectedResponse = new Shelf();
        $expectedResponse->setName($name2);
        $expectedResponse->setTheme($theme);
        $expectedResponse->setInternalTheme($internalTheme);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->shelfName('[SHELF_ID]');
        $formattedOtherShelfName = $client->shelfName('[SHELF_ID]');

        $response = $client->mergeShelves($formattedName, $formattedOtherShelfName);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/MergeShelves', $actualFuncCall);

        $this->assertProtobufEquals($formattedName, $actualRequestObject->getName());
        $this->assertProtobufEquals($formattedOtherShelfName, $actualRequestObject->getOtherShelfName());

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function mergeShelvesExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $grpcStub->addResponse(null, $status);

        // Mock request
        $formattedName = $client->shelfName('[SHELF_ID]');
        $formattedOtherShelfName = $client->shelfName('[SHELF_ID]');

        try {
            $client->mergeShelves($formattedName, $formattedOtherShelfName);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function createBookTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $name2 = 'name2-1052831874';
        $author = 'author-1406328437';
        $title = 'title110371416';
        $read = true;
        $expectedResponse = new Book();
        $expectedResponse->setName($name2);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->shelfName('[SHELF_ID]');
        $book = new Book();

        $response = $client->createBook($formattedName, $book);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/CreateBook', $actualFuncCall);

        $this->assertProtobufEquals($formattedName, $actualRequestObject->getName());
        $this->assertProtobufEquals($book, $actualRequestObject->getBook());

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function createBookExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $grpcStub->addResponse(null, $status);

        // Mock request
        $formattedName = $client->shelfName('[SHELF_ID]');
        $book = new Book();

        try {
            $client->createBook($formattedName, $book);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function publishSeriesTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $bookNamesElement = 'bookNamesElement1491670575';
        $bookNames = [$bookNamesElement];
        $expectedResponse = new PublishSeriesResponse();
        $expectedResponse->setBookNames($bookNames);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $shelf = new Shelf();
        $books = [];
        $seriesString = 'foobar';
        $seriesUuid = new SeriesUuid();
        $seriesUuid->setSeriesString($seriesString);

        $response = $client->publishSeries($shelf, $books, $seriesUuid);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/PublishSeries', $actualFuncCall);

        $this->assertProtobufEquals($shelf, $actualRequestObject->getShelf());
        $this->assertProtobufEquals($books, $actualRequestObject->getBooks());
        $this->assertProtobufEquals($seriesUuid, $actualRequestObject->getSeriesUuid());

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function publishSeriesExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $grpcStub->addResponse(null, $status);

        // Mock request
        $shelf = new Shelf();
        $books = [];
        $seriesString = 'foobar';
        $seriesUuid = new SeriesUuid();
        $seriesUuid->setSeriesString($seriesString);

        try {
            $client->publishSeries($shelf, $books, $seriesUuid);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function getBookTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $name2 = 'name2-1052831874';
        $author = 'author-1406328437';
        $title = 'title110371416';
        $read = true;
        $expectedResponse = new Book();
        $expectedResponse->setName($name2);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->bookName('[SHELF_ID]', '[BOOK_ID]');

        $response = $client->getBook($formattedName);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/GetBook', $actualFuncCall);

        $this->assertProtobufEquals($formattedName, $actualRequestObject->getName());

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function getBookExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $grpcStub->addResponse(null, $status);

        // Mock request
        $formattedName = $client->bookName('[SHELF_ID]', '[BOOK_ID]');

        try {
            $client->getBook($formattedName);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function listBooksTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $nextPageToken = '';
        $booksElement = new Book();
        $books = [$booksElement];
        $expectedResponse = new ListBooksResponse();
        $expectedResponse->setNextPageToken($nextPageToken);
        $expectedResponse->setBooks($books);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->shelfName('[SHELF_ID]');

        $response = $client->listBooks($formattedName);
        $this->assertEquals($expectedResponse, $response->getPage()->getResponseObject());
        $resources = iterator_to_array($response->iterateAllElements());
        $this->assertSame(1, count($resources));
        $this->assertEquals($expectedResponse->getBooks()[0], $resources[0]);

        $actualRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/ListBooks', $actualFuncCall);

        $this->assertProtobufEquals($formattedName, $actualRequestObject->getName());
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function listBooksExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $grpcStub->addResponse(null, $status);

        // Mock request
        $formattedName = $client->shelfName('[SHELF_ID]');

        try {
            $client->listBooks($formattedName);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function deleteBookTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $expectedResponse = new GPBEmpty();
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->bookName('[SHELF_ID]', '[BOOK_ID]');

        $client->deleteBook($formattedName);
        $actualRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/DeleteBook', $actualFuncCall);

        $this->assertProtobufEquals($formattedName, $actualRequestObject->getName());

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function deleteBookExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $grpcStub->addResponse(null, $status);

        // Mock request
        $formattedName = $client->bookName('[SHELF_ID]', '[BOOK_ID]');

        try {
            $client->deleteBook($formattedName);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function updateBookTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $name2 = 'name2-1052831874';
        $author = 'author-1406328437';
        $title = 'title110371416';
        $read = true;
        $expectedResponse = new Book();
        $expectedResponse->setName($name2);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->bookName('[SHELF_ID]', '[BOOK_ID]');
        $book = new Book();

        $response = $client->updateBook($formattedName, $book);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/UpdateBook', $actualFuncCall);

        $this->assertProtobufEquals($formattedName, $actualRequestObject->getName());
        $this->assertProtobufEquals($book, $actualRequestObject->getBook());

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function updateBookExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $grpcStub->addResponse(null, $status);

        // Mock request
        $formattedName = $client->bookName('[SHELF_ID]', '[BOOK_ID]');
        $book = new Book();

        try {
            $client->updateBook($formattedName, $book);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function moveBookTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $name2 = 'name2-1052831874';
        $author = 'author-1406328437';
        $title = 'title110371416';
        $read = true;
        $expectedResponse = new Book();
        $expectedResponse->setName($name2);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->bookName('[SHELF_ID]', '[BOOK_ID]');
        $formattedOtherShelfName = $client->shelfName('[SHELF_ID]');

        $response = $client->moveBook($formattedName, $formattedOtherShelfName);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/MoveBook', $actualFuncCall);

        $this->assertProtobufEquals($formattedName, $actualRequestObject->getName());
        $this->assertProtobufEquals($formattedOtherShelfName, $actualRequestObject->getOtherShelfName());

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function moveBookExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $grpcStub->addResponse(null, $status);

        // Mock request
        $formattedName = $client->bookName('[SHELF_ID]', '[BOOK_ID]');
        $formattedOtherShelfName = $client->shelfName('[SHELF_ID]');

        try {
            $client->moveBook($formattedName, $formattedOtherShelfName);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function listStringsTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $nextPageToken = '';
        $stringsElement = 'stringsElement474465855';
        $strings = [$stringsElement];
        $expectedResponse = new ListStringsResponse();
        $expectedResponse->setNextPageToken($nextPageToken);
        $expectedResponse->setStrings($strings);
        $grpcStub->addResponse($expectedResponse);

        $response = $client->listStrings();
        $this->assertEquals($expectedResponse, $response->getPage()->getResponseObject());
        $resources = iterator_to_array($response->iterateAllElements());
        $this->assertSame(1, count($resources));
        $this->assertEquals($expectedResponse->getStrings()[0], $resources[0]);

        $actualRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/ListStrings', $actualFuncCall);

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function listStringsExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $grpcStub->addResponse(null, $status);

        try {
            $client->listStrings();
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function addCommentsTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $expectedResponse = new GPBEmpty();
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->bookName('[SHELF_ID]', '[BOOK_ID]');
        $comment = '95';
        $stage = Stage::UNSET;
        $alignment = Alignment::CHAR;
        $commentsElement = new Comment();
        $commentsElement->setComment($comment);
        $commentsElement->setStage($stage);
        $commentsElement->setAlignment($alignment);
        $comments = [$commentsElement];

        $client->addComments($formattedName, $comments);
        $actualRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/AddComments', $actualFuncCall);

        $this->assertProtobufEquals($formattedName, $actualRequestObject->getName());
        $this->assertProtobufEquals($comments, $actualRequestObject->getComments());

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function addCommentsExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $grpcStub->addResponse(null, $status);

        // Mock request
        $formattedName = $client->bookName('[SHELF_ID]', '[BOOK_ID]');
        $comment = '95';
        $stage = Stage::UNSET;
        $alignment = Alignment::CHAR;
        $commentsElement = new Comment();
        $commentsElement->setComment($comment);
        $commentsElement->setStage($stage);
        $commentsElement->setAlignment($alignment);
        $comments = [$commentsElement];

        try {
            $client->addComments($formattedName, $comments);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function getBookFromArchiveTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $name2 = 'name2-1052831874';
        $author = 'author-1406328437';
        $title = 'title110371416';
        $read = true;
        $expectedResponse = new BookFromArchive();
        $expectedResponse->setName($name2);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->archivedBookName('[ARCHIVE_PATH]', '[BOOK_ID]');

        $response = $client->getBookFromArchive($formattedName);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/GetBookFromArchive', $actualFuncCall);

        $this->assertProtobufEquals($formattedName, $actualRequestObject->getName());

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function getBookFromArchiveExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $grpcStub->addResponse(null, $status);

        // Mock request
        $formattedName = $client->archivedBookName('[ARCHIVE_PATH]', '[BOOK_ID]');

        try {
            $client->getBookFromArchive($formattedName);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function getBookFromAnywhereTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $name2 = 'name2-1052831874';
        $author = 'author-1406328437';
        $title = 'title110371416';
        $read = true;
        $expectedResponse = new BookFromAnywhere();
        $expectedResponse->setName($name2);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->bookName('[SHELF_ID]', '[BOOK_ID]');
        $formattedAltBookName = $client->bookName('[SHELF_ID]', '[BOOK_ID]');

        $response = $client->getBookFromAnywhere($formattedName, $formattedAltBookName);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/GetBookFromAnywhere', $actualFuncCall);

        $this->assertProtobufEquals($formattedName, $actualRequestObject->getName());
        $this->assertProtobufEquals($formattedAltBookName, $actualRequestObject->getAltBookName());

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function getBookFromAnywhereExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $grpcStub->addResponse(null, $status);

        // Mock request
        $formattedName = $client->bookName('[SHELF_ID]', '[BOOK_ID]');
        $formattedAltBookName = $client->bookName('[SHELF_ID]', '[BOOK_ID]');

        try {
            $client->getBookFromAnywhere($formattedName, $formattedAltBookName);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function getBookFromAbsolutelyAnywhereTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $name2 = 'name2-1052831874';
        $author = 'author-1406328437';
        $title = 'title110371416';
        $read = true;
        $expectedResponse = new BookFromAnywhere();
        $expectedResponse->setName($name2);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->bookName('[SHELF_ID]', '[BOOK_ID]');

        $response = $client->getBookFromAbsolutelyAnywhere($formattedName);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/GetBookFromAbsolutelyAnywhere', $actualFuncCall);

        $this->assertProtobufEquals($formattedName, $actualRequestObject->getName());

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function getBookFromAbsolutelyAnywhereExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $grpcStub->addResponse(null, $status);

        // Mock request
        $formattedName = $client->bookName('[SHELF_ID]', '[BOOK_ID]');

        try {
            $client->getBookFromAbsolutelyAnywhere($formattedName);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function updateBookIndexTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $expectedResponse = new GPBEmpty();
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedName = $client->bookName('[SHELF_ID]', '[BOOK_ID]');
        $indexName = 'default index';
        $indexMapItem = 'indexMapItem1918721251';
        $indexMap = ['default_key' => $indexMapItem];

        $client->updateBookIndex($formattedName, $indexName, $indexMap);
        $actualRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/UpdateBookIndex', $actualFuncCall);

        $this->assertProtobufEquals($formattedName, $actualRequestObject->getName());
        $this->assertProtobufEquals($indexName, $actualRequestObject->getIndexName());
        $this->assertProtobufEquals($indexMap, $actualRequestObject->getIndexMap());

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function updateBookIndexExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $grpcStub->addResponse(null, $status);

        // Mock request
        $formattedName = $client->bookName('[SHELF_ID]', '[BOOK_ID]');
        $indexName = 'default index';
        $indexMapItem = 'indexMapItem1918721251';
        $indexMap = ['default_key' => $indexMapItem];

        try {
            $client->updateBookIndex($formattedName, $indexName, $indexMap);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function streamShelvesTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $shelvesElement = new Shelf();
        $shelves = [$shelvesElement];
        $expectedResponse = new StreamShelvesResponse();
        $expectedResponse->setShelves($shelves);
        $grpcStub->addResponse($expectedResponse);
        $shelvesElement2 = new Shelf();
        $shelves2 = [$shelvesElement2];
        $expectedResponse2 = new StreamShelvesResponse();
        $expectedResponse2->setShelves($shelves2);
        $grpcStub->addResponse($expectedResponse2);
        $shelvesElement3 = new Shelf();
        $shelves3 = [$shelvesElement3];
        $expectedResponse3 = new StreamShelvesResponse();
        $expectedResponse3->setShelves($shelves3);
        $grpcStub->addResponse($expectedResponse3);

        // Mock request


        $serverStream = $client->streamShelves();
        $this->assertInstanceOf(ServerStream::class, $serverStream);

        $responses = iterator_to_array($serverStream->readAll());

        $expectedResources = [];
        $expectedResources[] = $expectedResponse->getShelves()[0];
        $expectedResources[] = $expectedResponse2->getShelves()[0];
        $expectedResources[] = $expectedResponse3->getShelves()[0];
        $this->assertEquals($expectedResources, $responses);

        $actualRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/StreamShelves', $actualFuncCall);


        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function streamShelvesExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);

        $grpcStub->setStreamingStatus($status);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock request


        $serverStream = $client->streamShelves();
        $results = $serverStream->readAll();

        try {
            iterator_to_array($results);
            // If the close stream method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        }  catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function streamBooksTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $name2 = 'name2-1052831874';
        $author = 'author-1406328437';
        $title = 'title110371416';
        $read = true;
        $expectedResponse = new Book();
        $expectedResponse->setName($name2);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        $grpcStub->addResponse($expectedResponse);
        $name5 = 'name5-1052831871';
        $author2 = 'author21433073278';
        $title2 = 'title2-1307248629';
        $read2 = false;
        $expectedResponse2 = new Book();
        $expectedResponse2->setName($name5);
        $expectedResponse2->setAuthor($author2);
        $expectedResponse2->setTitle($title2);
        $expectedResponse2->setRead($read2);
        $grpcStub->addResponse($expectedResponse2);
        $name6 = 'name6-1052831870';
        $author3 = 'author31433073279';
        $title3 = 'title3-1307248628';
        $read3 = true;
        $expectedResponse3 = new Book();
        $expectedResponse3->setName($name6);
        $expectedResponse3->setAuthor($author3);
        $expectedResponse3->setTitle($title3);
        $expectedResponse3->setRead($read3);
        $grpcStub->addResponse($expectedResponse3);

        // Mock request
        $name = 'name3373707';

        $serverStream = $client->streamBooks($name);
        $this->assertInstanceOf(ServerStream::class, $serverStream);

        $responses = iterator_to_array($serverStream->readAll());

        $expectedResponses = [];
        $expectedResponses[] = $expectedResponse;
        $expectedResponses[] = $expectedResponse2;
        $expectedResponses[] = $expectedResponse3;
        $this->assertEquals($expectedResponses, $responses);

        $actualRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/StreamBooks', $actualFuncCall);

        $this->assertProtobufEquals($name, $actualRequestObject->getName());

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function streamBooksExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);

        $grpcStub->setStreamingStatus($status);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock request
        $name = 'name3373707';

        $serverStream = $client->streamBooks($name);
        $results = $serverStream->readAll();

        try {
            iterator_to_array($results);
            // If the close stream method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        }  catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function discussBookTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $userName = 'userName339340927';
        $comment = '95';
        $expectedResponse = new Comment();
        $expectedResponse->setUserName($userName);
        $expectedResponse->setComment($comment);
        $grpcStub->addResponse($expectedResponse);
        $userName2 = 'userName2-310880654';
        $comment2 = '82';
        $expectedResponse2 = new Comment();
        $expectedResponse2->setUserName($userName2);
        $expectedResponse2->setComment($comment2);
        $grpcStub->addResponse($expectedResponse2);
        $userName3 = 'userName3-310880653';
        $comment3 = '83';
        $expectedResponse3 = new Comment();
        $expectedResponse3->setUserName($userName3);
        $expectedResponse3->setComment($comment3);
        $grpcStub->addResponse($expectedResponse3);

        // Mock request
        $name = 'name3373707';
        $request = new DiscussBookRequest();
        $request->setName($name);
        $name2 = 'name2-1052831874';
        $request2 = new DiscussBookRequest();
        $request2->setName($name2);
        $name3 = 'name3-1052831873';
        $request3 = new DiscussBookRequest();
        $request3->setName($name3);

        $bidi = $client->discussBook();
        $this->assertInstanceOf(BidiStream::class, $bidi);

        $bidi->write($request);
        $responses = [];
        $responses[] = $bidi->read();

        $bidi->writeAll([$request2, $request3]);
        foreach ($bidi->closeWriteAndReadAll() as $response) {
            $responses[] = $response;
        }

        $expectedResponses = [];
        $expectedResponses[] = $expectedResponse;
        $expectedResponses[] = $expectedResponse2;
        $expectedResponses[] = $expectedResponse3;
        $this->assertEquals($expectedResponses, $responses);

        $createStreamRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($createStreamRequests));
        $streamFuncCall = $createStreamRequests[0]->getFuncCall();
        $streamRequestObject = $createStreamRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/DiscussBook', $streamFuncCall);
        $this->assertNull($streamRequestObject);

        $callObjects = $grpcStub->popCallObjects();
        $this->assertSame(1, count($callObjects));
        $bidiCall = $callObjects[0];

        $writeRequests = $bidiCall->popReceivedCalls();
        $expectedRequests = [];
        $expectedRequests[] = $request;
        $expectedRequests[] = $request2;
        $expectedRequests[] = $request3;
        $this->assertEquals($expectedRequests, $writeRequests);

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function discussBookExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);

        $grpcStub->setStreamingStatus($status);

        $this->assertTrue($grpcStub->isExhausted());

        $bidi = $client->discussBook();
        $results = $bidi->closeWriteAndReadAll();

        try {
            iterator_to_array($results);
            // If the close stream method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        }  catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function findRelatedBooksTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $nextPageToken = '';
        $namesElement2 = 'namesElement21120252792';
        $names2 = [$namesElement2];
        $expectedResponse = new FindRelatedBooksResponse();
        $expectedResponse->setNextPageToken($nextPageToken);
        $expectedResponse->setNames($names2);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $namesElement = 'namesElement-249113339';
        $names = [$namesElement];
        $shelves = [];

        $response = $client->findRelatedBooks($names, $shelves);
        $this->assertEquals($expectedResponse, $response->getPage()->getResponseObject());
        $resources = iterator_to_array($response->iterateAllElements());
        $this->assertSame(1, count($resources));
        $this->assertEquals($expectedResponse->getNames()[0], $resources[0]);

        $actualRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/FindRelatedBooks', $actualFuncCall);

        $this->assertProtobufEquals($names, $actualRequestObject->getNames());
        $this->assertProtobufEquals($shelves, $actualRequestObject->getShelves());
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function findRelatedBooksExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $grpcStub->addResponse(null, $status);

        // Mock request
        $namesElement = 'namesElement-249113339';
        $names = [$namesElement];
        $shelves = [];

        try {
            $client->findRelatedBooks($names, $shelves);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function addTagTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $expectedResponse = new AddTagResponse();
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedResource = $client->bookName('[SHELF_ID]', '[BOOK_ID]');
        $tag = 'tag114586';

        $response = $client->addTag($formattedResource, $tag);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/AddTag', $actualFuncCall);

        $this->assertProtobufEquals($formattedResource, $actualRequestObject->getResource());
        $this->assertProtobufEquals($tag, $actualRequestObject->getTag());

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function addTagExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $grpcStub->addResponse(null, $status);

        // Mock request
        $formattedResource = $client->bookName('[SHELF_ID]', '[BOOK_ID]');
        $tag = 'tag114586';

        try {
            $client->addTag($formattedResource, $tag);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function addLabelTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLabelerImpl']);
        $client = $this->createClient('createLabelerStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $expectedResponse = new AddLabelResponse();
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedResource = $client->bookName('[SHELF_ID]', '[BOOK_ID]');
        $label = 'label102727412';

        $response = $client->addLabel($formattedResource, $label);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.tagger.v1.Labeler/AddLabel', $actualFuncCall);

        $this->assertProtobufEquals($formattedResource, $actualRequestObject->getResource());
        $this->assertProtobufEquals($label, $actualRequestObject->getLabel());

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function addLabelExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLabelerImpl']);
        $client = $this->createClient('createLabelerStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $grpcStub->addResponse(null, $status);

        // Mock request
        $formattedResource = $client->bookName('[SHELF_ID]', '[BOOK_ID]');
        $label = 'label102727412';

        try {
            $client->addLabel($formattedResource, $label);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function getBigBookTest()
    {
        $operationsStub = $this->createStub([$this, 'createMockOperationsStub']);
        $operationsClient = new OperationsClient([
            'serviceAddress' => '',
            'scopes' => [],
            'createOperationsStubFunction' => function ($hostname, $opts) use ($operationsStub) {
                return $operationsStub;
            }
        ]);
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub, [
            'operationsClient' => $operationsClient
        ]);

        $this->assertTrue($grpcStub->isExhausted());
        $this->assertTrue($operationsStub->isExhausted());

        // Mock response
        $incompleteOperation = new Operation();
        $incompleteOperation->setName('operations/getBigBookTest');
        $incompleteOperation->setDone(false);
        $grpcStub->addResponse($incompleteOperation);
        $name2 = 'name2-1052831874';
        $author = 'author-1406328437';
        $title = 'title110371416';
        $read = true;
        $expectedResponse = new Book();
        $expectedResponse->setName($name2);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        $anyResponse = new Any();
        $anyResponse->setValue($expectedResponse->serializeToString());
        $completeOperation = new Operation();
        $completeOperation->setName('operations/getBigBookTest');
        $completeOperation->setDone(true);
        $completeOperation->setResponse($anyResponse);
        $operationsStub->addResponse($completeOperation);

        // Mock request
        $formattedName = $client->bookName('[SHELF_ID]', '[BOOK_ID]');

        $response = $client->getBigBook($formattedName);
        $this->assertFalse($response->isDone());
        $this->assertNull($response->getResult());
        $apiRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($apiRequests));
        $operationsRequestsEmpty = $operationsStub->popReceivedCalls();
        $this->assertSame(0, count($operationsRequestsEmpty));

        $actualApiFuncCall = $apiRequests[0]->getFuncCall();
        $actualApiRequestObject = $apiRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/GetBigBook', $actualApiFuncCall);
        $this->assertProtobufEquals($formattedName, $actualApiRequestObject->getName());

        $expectedOperationsRequestObject = new GetOperationRequest();
        $expectedOperationsRequestObject->setName('operations/getBigBookTest');

        $response->pollUntilComplete();
        $this->assertTrue($response->isDone());
        $this->assertEquals($expectedResponse, $response->getResult());
        $apiRequestsEmpty = $grpcStub->popReceivedCalls();
        $this->assertSame(0, count($apiRequestsEmpty));
        $operationsRequests = $operationsStub->popReceivedCalls();
        $this->assertSame(1, count($operationsRequests));

        $actualOperationsFuncCall = $operationsRequests[0]->getFuncCall();
        $actualOperationsRequestObject = $operationsRequests[0]->getRequestObject();
        $this->assertSame('/google.longrunning.Operations/GetOperation', $actualOperationsFuncCall);
        $this->assertEquals($expectedOperationsRequestObject, $actualOperationsRequestObject);

        $this->assertTrue($grpcStub->isExhausted());
        $this->assertTrue($operationsStub->isExhausted());
    }

    /**
     * @test
     */
    public function getBigBookExceptionTest()
    {
        $operationsStub = $this->createStub([$this, 'createMockOperationsStub']);
        $operationsClient = new OperationsClient([
            'serviceAddress' => '',
            'scopes' => [],
            'createOperationsStubFunction' => function ($hostname, $opts) use ($operationsStub) {
                return $operationsStub;
            }
        ]);
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub, [
            'operationsClient' => $operationsClient
        ]);

        $this->assertTrue($grpcStub->isExhausted());
        $this->assertTrue($operationsStub->isExhausted());

        // Mock response
        $incompleteOperation = new Operation();
        $incompleteOperation->setName('operations/getBigBookTest');
        $incompleteOperation->setDone(false);
        $grpcStub->addResponse($incompleteOperation);

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $operationsStub->addResponse(null, $status);

        // Mock request
        $formattedName = $client->bookName('[SHELF_ID]', '[BOOK_ID]');

        $response = $client->getBigBook($formattedName);
        $this->assertFalse($response->isDone());
        $this->assertNull($response->getResult());

        $expectedOperationsRequestObject = new GetOperationRequest();
        $expectedOperationsRequestObject->setName('operations/getBigBookTest');

        try {
            $response->pollUntilComplete();
            // If the pollUntilComplete() method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stubs are exhausted
        $grpcStub->popReceivedCalls();
        $operationsStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
        $this->assertTrue($operationsStub->isExhausted());
    }

    /**
     * @test
     */
    public function getBigNothingTest()
    {
        $operationsStub = $this->createStub([$this, 'createMockOperationsStub']);
        $operationsClient = new OperationsClient([
            'serviceAddress' => '',
            'scopes' => [],
            'createOperationsStubFunction' => function ($hostname, $opts) use ($operationsStub) {
                return $operationsStub;
            }
        ]);
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub, [
            'operationsClient' => $operationsClient
        ]);

        $this->assertTrue($grpcStub->isExhausted());
        $this->assertTrue($operationsStub->isExhausted());

        // Mock response
        $incompleteOperation = new Operation();
        $incompleteOperation->setName('operations/getBigNothingTest');
        $incompleteOperation->setDone(false);
        $grpcStub->addResponse($incompleteOperation);
        $expectedResponse = new GPBEmpty();
        $anyResponse = new Any();
        $anyResponse->setValue($expectedResponse->serializeToString());
        $completeOperation = new Operation();
        $completeOperation->setName('operations/getBigNothingTest');
        $completeOperation->setDone(true);
        $completeOperation->setResponse($anyResponse);
        $operationsStub->addResponse($completeOperation);

        // Mock request
        $formattedName = $client->bookName('[SHELF_ID]', '[BOOK_ID]');

        $response = $client->getBigNothing($formattedName);
        $this->assertFalse($response->isDone());
        $this->assertNull($response->getResult());
        $apiRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($apiRequests));
        $operationsRequestsEmpty = $operationsStub->popReceivedCalls();
        $this->assertSame(0, count($operationsRequestsEmpty));

        $actualApiFuncCall = $apiRequests[0]->getFuncCall();
        $actualApiRequestObject = $apiRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/GetBigNothing', $actualApiFuncCall);
        $this->assertProtobufEquals($formattedName, $actualApiRequestObject->getName());

        $expectedOperationsRequestObject = new GetOperationRequest();
        $expectedOperationsRequestObject->setName('operations/getBigNothingTest');

        $response->pollUntilComplete();
        $this->assertTrue($response->isDone());
        $this->assertEquals($expectedResponse, $response->getResult());
        $apiRequestsEmpty = $grpcStub->popReceivedCalls();
        $this->assertSame(0, count($apiRequestsEmpty));
        $operationsRequests = $operationsStub->popReceivedCalls();
        $this->assertSame(1, count($operationsRequests));

        $actualOperationsFuncCall = $operationsRequests[0]->getFuncCall();
        $actualOperationsRequestObject = $operationsRequests[0]->getRequestObject();
        $this->assertSame('/google.longrunning.Operations/GetOperation', $actualOperationsFuncCall);
        $this->assertEquals($expectedOperationsRequestObject, $actualOperationsRequestObject);

        $this->assertTrue($grpcStub->isExhausted());
        $this->assertTrue($operationsStub->isExhausted());
    }

    /**
     * @test
     */
    public function getBigNothingExceptionTest()
    {
        $operationsStub = $this->createStub([$this, 'createMockOperationsStub']);
        $operationsClient = new OperationsClient([
            'serviceAddress' => '',
            'scopes' => [],
            'createOperationsStubFunction' => function ($hostname, $opts) use ($operationsStub) {
                return $operationsStub;
            }
        ]);
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub, [
            'operationsClient' => $operationsClient
        ]);

        $this->assertTrue($grpcStub->isExhausted());
        $this->assertTrue($operationsStub->isExhausted());

        // Mock response
        $incompleteOperation = new Operation();
        $incompleteOperation->setName('operations/getBigNothingTest');
        $incompleteOperation->setDone(false);
        $grpcStub->addResponse($incompleteOperation);

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $operationsStub->addResponse(null, $status);

        // Mock request
        $formattedName = $client->bookName('[SHELF_ID]', '[BOOK_ID]');

        $response = $client->getBigNothing($formattedName);
        $this->assertFalse($response->isDone());
        $this->assertNull($response->getResult());

        $expectedOperationsRequestObject = new GetOperationRequest();
        $expectedOperationsRequestObject->setName('operations/getBigNothingTest');

        try {
            $response->pollUntilComplete();
            // If the pollUntilComplete() method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stubs are exhausted
        $grpcStub->popReceivedCalls();
        $operationsStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
        $this->assertTrue($operationsStub->isExhausted());
    }

    /**
     * @test
     */
    public function testOptionalRequiredFlatteningParamsTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $expectedResponse = new TestOptionalRequiredFlatteningParamsResponse();
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $requiredSingularInt32 = -72313594;
        $requiredSingularInt64 = -72313499;
        $requiredSingularFloat = -7514705.0;
        $requiredSingularDouble = 1.9111005E8;
        $requiredSingularBool = true;
        $requiredSingularEnum = InnerEnum::ZERO;
        $requiredSingularString = 'requiredSingularString-1949894503';
        $requiredSingularBytes = '-29';
        $requiredSingularMessage = new InnerMessage();
        $requiredSingularResourceName = 'requiredSingularResourceName-1701575020';
        $requiredSingularResourceNameOneof = 'requiredSingularResourceNameOneof-25303726';
        $requiredSingularFixed32 = 720656715;
        $requiredSingularFixed64 = 720656810;
        $requiredRepeatedInt32 = [];
        $requiredRepeatedInt64 = [];
        $requiredRepeatedFloat = [];
        $requiredRepeatedDouble = [];
        $requiredRepeatedBool = [];
        $requiredRepeatedEnum = [];
        $requiredRepeatedString = [];
        $requiredRepeatedBytes = [];
        $requiredRepeatedMessage = [];
        $formattedRequiredRepeatedResourceName = [];
        $formattedRequiredRepeatedResourceNameOneof = [];
        $requiredRepeatedFixed32 = [];
        $requiredRepeatedFixed64 = [];
        $requiredMap = [];

        $response = $client->testOptionalRequiredFlatteningParams($requiredSingularInt32, $requiredSingularInt64, $requiredSingularFloat, $requiredSingularDouble, $requiredSingularBool, $requiredSingularEnum, $requiredSingularString, $requiredSingularBytes, $requiredSingularMessage, $requiredSingularResourceName, $requiredSingularResourceNameOneof, $requiredSingularFixed32, $requiredSingularFixed64, $requiredRepeatedInt32, $requiredRepeatedInt64, $requiredRepeatedFloat, $requiredRepeatedDouble, $requiredRepeatedBool, $requiredRepeatedEnum, $requiredRepeatedString, $requiredRepeatedBytes, $requiredRepeatedMessage, $formattedRequiredRepeatedResourceName, $formattedRequiredRepeatedResourceNameOneof, $requiredRepeatedFixed32, $requiredRepeatedFixed64, $requiredMap);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->popReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/TestOptionalRequiredFlatteningParams', $actualFuncCall);

        $this->assertProtobufEquals($requiredSingularInt32, $actualRequestObject->getRequiredSingularInt32());
        $this->assertProtobufEquals($requiredSingularInt64, $actualRequestObject->getRequiredSingularInt64());
        $this->assertProtobufEquals($requiredSingularFloat, $actualRequestObject->getRequiredSingularFloat());
        $this->assertProtobufEquals($requiredSingularDouble, $actualRequestObject->getRequiredSingularDouble());
        $this->assertProtobufEquals($requiredSingularBool, $actualRequestObject->getRequiredSingularBool());
        $this->assertProtobufEquals($requiredSingularEnum, $actualRequestObject->getRequiredSingularEnum());
        $this->assertProtobufEquals($requiredSingularString, $actualRequestObject->getRequiredSingularString());
        $this->assertProtobufEquals($requiredSingularBytes, $actualRequestObject->getRequiredSingularBytes());
        $this->assertProtobufEquals($requiredSingularMessage, $actualRequestObject->getRequiredSingularMessage());
        $this->assertProtobufEquals($requiredSingularResourceName, $actualRequestObject->getRequiredSingularResourceName());
        $this->assertProtobufEquals($requiredSingularResourceNameOneof, $actualRequestObject->getRequiredSingularResourceNameOneof());
        $this->assertProtobufEquals($requiredSingularFixed32, $actualRequestObject->getRequiredSingularFixed32());
        $this->assertProtobufEquals($requiredSingularFixed64, $actualRequestObject->getRequiredSingularFixed64());
        $this->assertProtobufEquals($requiredRepeatedInt32, $actualRequestObject->getRequiredRepeatedInt32());
        $this->assertProtobufEquals($requiredRepeatedInt64, $actualRequestObject->getRequiredRepeatedInt64());
        $this->assertProtobufEquals($requiredRepeatedFloat, $actualRequestObject->getRequiredRepeatedFloat());
        $this->assertProtobufEquals($requiredRepeatedDouble, $actualRequestObject->getRequiredRepeatedDouble());
        $this->assertProtobufEquals($requiredRepeatedBool, $actualRequestObject->getRequiredRepeatedBool());
        $this->assertProtobufEquals($requiredRepeatedEnum, $actualRequestObject->getRequiredRepeatedEnum());
        $this->assertProtobufEquals($requiredRepeatedString, $actualRequestObject->getRequiredRepeatedString());
        $this->assertProtobufEquals($requiredRepeatedBytes, $actualRequestObject->getRequiredRepeatedBytes());
        $this->assertProtobufEquals($requiredRepeatedMessage, $actualRequestObject->getRequiredRepeatedMessage());
        $this->assertProtobufEquals($formattedRequiredRepeatedResourceName, $actualRequestObject->getRequiredRepeatedResourceName());
        $this->assertProtobufEquals($formattedRequiredRepeatedResourceNameOneof, $actualRequestObject->getRequiredRepeatedResourceNameOneof());
        $this->assertProtobufEquals($requiredRepeatedFixed32, $actualRequestObject->getRequiredRepeatedFixed32());
        $this->assertProtobufEquals($requiredRepeatedFixed64, $actualRequestObject->getRequiredRepeatedFixed64());
        $this->assertProtobufEquals($requiredMap, $actualRequestObject->getRequiredMap());

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function testOptionalRequiredFlatteningParamsExceptionTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        $status = new stdClass();
        $status->code = Grpc\STATUS_DATA_LOSS;
        $status->details = 'internal error';

        $expectedExceptionMessage = json_encode([
           'message' => 'internal error',
           'code' => Grpc\STATUS_DATA_LOSS,
           'status' => 'DATA_LOSS',
           'details' => [],
        ], JSON_PRETTY_PRINT);
        $grpcStub->addResponse(null, $status);

        // Mock request
        $requiredSingularInt32 = -72313594;
        $requiredSingularInt64 = -72313499;
        $requiredSingularFloat = -7514705.0;
        $requiredSingularDouble = 1.9111005E8;
        $requiredSingularBool = true;
        $requiredSingularEnum = InnerEnum::ZERO;
        $requiredSingularString = 'requiredSingularString-1949894503';
        $requiredSingularBytes = '-29';
        $requiredSingularMessage = new InnerMessage();
        $requiredSingularResourceName = 'requiredSingularResourceName-1701575020';
        $requiredSingularResourceNameOneof = 'requiredSingularResourceNameOneof-25303726';
        $requiredSingularFixed32 = 720656715;
        $requiredSingularFixed64 = 720656810;
        $requiredRepeatedInt32 = [];
        $requiredRepeatedInt64 = [];
        $requiredRepeatedFloat = [];
        $requiredRepeatedDouble = [];
        $requiredRepeatedBool = [];
        $requiredRepeatedEnum = [];
        $requiredRepeatedString = [];
        $requiredRepeatedBytes = [];
        $requiredRepeatedMessage = [];
        $formattedRequiredRepeatedResourceName = [];
        $formattedRequiredRepeatedResourceNameOneof = [];
        $requiredRepeatedFixed32 = [];
        $requiredRepeatedFixed64 = [];
        $requiredMap = [];

        try {
            $client->testOptionalRequiredFlatteningParams($requiredSingularInt32, $requiredSingularInt64, $requiredSingularFloat, $requiredSingularDouble, $requiredSingularBool, $requiredSingularEnum, $requiredSingularString, $requiredSingularBytes, $requiredSingularMessage, $requiredSingularResourceName, $requiredSingularResourceNameOneof, $requiredSingularFixed32, $requiredSingularFixed64, $requiredRepeatedInt32, $requiredRepeatedInt64, $requiredRepeatedFloat, $requiredRepeatedDouble, $requiredRepeatedBool, $requiredRepeatedEnum, $requiredRepeatedString, $requiredRepeatedBytes, $requiredRepeatedMessage, $formattedRequiredRepeatedResourceName, $formattedRequiredRepeatedResourceNameOneof, $requiredRepeatedFixed32, $requiredRepeatedFixed64, $requiredMap);
            // If the $client method call did not throw, fail the test
            $this->fail('Expected an ApiException, but no exception was thrown.');
        } catch (ApiException $ex) {
            $this->assertEquals($status->code, $ex->getCode());
            $this->assertEquals($expectedExceptionMessage, $ex->getMessage());
        }

        // Call popReceivedCalls to ensure the stub is exhausted
        $grpcStub->popReceivedCalls();
        $this->assertTrue($grpcStub->isExhausted());
    }

}
============== file: tests/unit/Example/Library/V1/MockLabelerImpl.php ==============
<?php
/*
 * Copyright 2017, Google LLC All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * This file was automatically generated - do not edit!
 */

namespace Google\Tests\Unit\Example\Library\V1;

use Google\GAX\ApiException;
use Google\GAX\BidiStream;
use Google\GAX\GrpcCredentialsHelper;
use Google\GAX\LongRunning\OperationsClient;
use Google\GAX\ServerStream;
use Google\GAX\Testing\GeneratedTest;
use Google\GAX\Testing\LongRunning\MockOperationsImpl;
use Google\GAX\Testing\MockStubTrait;
use Google\Longrunning\GetOperationRequest;
use Google\Protobuf\Any;
use Google\Protobuf\GPBEmpty;
use Google\Tagger\CustomNamespace\V1\LabelerGrpcClient;
use Grpc;
use PHPUnit_Framework_TestCase;
use stdClass;

class MockLabelerImpl extends LabelerGrpcClient
{
    use MockStubTrait;
}
============== file: tests/unit/Example/Library/V1/MockLibraryServiceImpl.php ==============
<?php
/*
 * Copyright 2017, Google LLC All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * This file was automatically generated - do not edit!
 */

namespace Google\Tests\Unit\Example\Library\V1;

use Google\Example\Library\V1\LibraryServiceGrpcClient;
use Google\GAX\ApiException;
use Google\GAX\BidiStream;
use Google\GAX\GrpcCredentialsHelper;
use Google\GAX\LongRunning\OperationsClient;
use Google\GAX\ServerStream;
use Google\GAX\Testing\GeneratedTest;
use Google\GAX\Testing\LongRunning\MockOperationsImpl;
use Google\GAX\Testing\MockStubTrait;
use Google\Longrunning\GetOperationRequest;
use Google\Protobuf\Any;
use Google\Protobuf\GPBEmpty;
use Grpc;
use PHPUnit_Framework_TestCase;
use stdClass;

class MockLibraryServiceImpl extends LibraryServiceGrpcClient
{
    use MockStubTrait;
}
