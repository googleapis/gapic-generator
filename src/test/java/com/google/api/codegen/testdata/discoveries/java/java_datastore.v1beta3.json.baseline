
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Datastore API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/datastore
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/datastore/v1beta3/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.datastore.Datastore;
import com.google.api.services.datastore.model.AllocateIdsRequest;
import com.google.api.services.datastore.model.AllocateIdsResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class DatastoreExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Datastore datastoreService = new Datastore.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google Cloud Platform Sample")
        .build();


    // TODO: Change placeholder below to desired parameter value for the `allocateIds` method:

    // The ID of the project against which to make the request.
    String projectId = "{MY-PROJECT-ID}";


    AllocateIdsRequest requestBody = new AllocateIdsRequest();
    // TODO: Assign values to desired fields of the `requestBody` object.


    Datastore.Projects.AllocateIds request = datastoreService.projects().allocateIds(projectId, requestBody);
    AllocateIdsResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Datastore API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/datastore
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/datastore/v1beta3/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.datastore.Datastore;
import com.google.api.services.datastore.model.BeginTransactionRequest;
import com.google.api.services.datastore.model.BeginTransactionResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class DatastoreExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Datastore datastoreService = new Datastore.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google Cloud Platform Sample")
        .build();


    // TODO: Change placeholder below to desired parameter value for the `beginTransaction` method:

    // The ID of the project against which to make the request.
    String projectId = "{MY-PROJECT-ID}";


    BeginTransactionRequest requestBody = new BeginTransactionRequest();
    // TODO: Assign values to desired fields of the `requestBody` object.


    Datastore.Projects.BeginTransaction request = datastoreService.projects().beginTransaction(projectId, requestBody);
    BeginTransactionResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Datastore API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/datastore
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/datastore/v1beta3/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.datastore.Datastore;
import com.google.api.services.datastore.model.CommitRequest;
import com.google.api.services.datastore.model.CommitResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class DatastoreExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Datastore datastoreService = new Datastore.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google Cloud Platform Sample")
        .build();


    // TODO: Change placeholder below to desired parameter value for the `commit` method:

    // The ID of the project against which to make the request.
    String projectId = "{MY-PROJECT-ID}";


    CommitRequest requestBody = new CommitRequest();
    // TODO: Assign values to desired fields of the `requestBody` object.


    Datastore.Projects.Commit request = datastoreService.projects().commit(projectId, requestBody);
    CommitResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Datastore API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/datastore
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/datastore/v1beta3/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.datastore.Datastore;
import com.google.api.services.datastore.model.LookupRequest;
import com.google.api.services.datastore.model.LookupResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class DatastoreExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Datastore datastoreService = new Datastore.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google Cloud Platform Sample")
        .build();


    // TODO: Change placeholder below to desired parameter value for the `lookup` method:

    // The ID of the project against which to make the request.
    String projectId = "{MY-PROJECT-ID}";


    LookupRequest requestBody = new LookupRequest();
    // TODO: Assign values to desired fields of the `requestBody` object.


    Datastore.Projects.Lookup request = datastoreService.projects().lookup(projectId, requestBody);
    LookupResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Datastore API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/datastore
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/datastore/v1beta3/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.datastore.Datastore;
import com.google.api.services.datastore.model.RollbackRequest;
import com.google.api.services.datastore.model.RollbackResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class DatastoreExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Datastore datastoreService = new Datastore.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google Cloud Platform Sample")
        .build();


    // TODO: Change placeholder below to desired parameter value for the `rollback` method:

    // The ID of the project against which to make the request.
    String projectId = "{MY-PROJECT-ID}";


    RollbackRequest requestBody = new RollbackRequest();
    // TODO: Assign values to desired fields of the `requestBody` object.


    Datastore.Projects.Rollback request = datastoreService.projects().rollback(projectId, requestBody);
    RollbackResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Datastore API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/datastore
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/datastore/v1beta3/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.datastore.Datastore;
import com.google.api.services.datastore.model.RunQueryRequest;
import com.google.api.services.datastore.model.RunQueryResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class DatastoreExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Use Application Default Credentials for authentication when running locally.
    // For more information, see:
    // https://developers.google.com/identity/protocols/application-default-credentials
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Datastore datastoreService = new Datastore.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google Cloud Platform Sample")
        .build();


    // TODO: Change placeholder below to desired parameter value for the `runQuery` method:

    // The ID of the project against which to make the request.
    String projectId = "{MY-PROJECT-ID}";


    RunQueryRequest requestBody = new RunQueryRequest();
    // TODO: Assign values to desired fields of the `requestBody` object.


    Datastore.Projects.RunQuery request = datastoreService.projects().runQuery(projectId, requestBody);
    RunQueryResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }
}
