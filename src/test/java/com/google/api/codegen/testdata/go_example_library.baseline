============== file: google.golang.org/cloud/library/apiv1/library_client_example_test.go ==============
// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// AUTO-GENERATED CODE. DO NOT EDIT.

package library_test

import (
    google_example_library_v1 "github.com/googleapis/proto-client-go/library/v1"
    "golang.org/x/net/context"
    "google.golang.org/cloud/library/apiv1"
)

func ExampleNewClient() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }
    // TODO: Use client.
    _ = c
}

func ExampleClient_CreateShelf() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &google_example_library_v1.CreateShelfRequest{
        // TODO: Fill request struct fields.
    }
    resp, err := c.CreateShelf(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
    // TODO: Use resp.
    _ = resp
}

func ExampleClient_GetShelf() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &google_example_library_v1.GetShelfRequest{
        // TODO: Fill request struct fields.
    }
    resp, err := c.GetShelf(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
    // TODO: Use resp.
    _ = resp
}

func ExampleClient_ListShelves() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &google_example_library_v1.ListShelvesRequest{
        // TODO: Fill request struct fields.
    }
    it := c.ListShelves(ctx, req)
    for {
        resp, err := it.Next()
        if err != nil {
            // TODO: Handle error.
            break
        }
        // TODO: Use resp.
        _ = resp
    }
}

func ExampleClient_DeleteShelf() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &google_example_library_v1.DeleteShelfRequest{
        // TODO: Fill request struct fields.
    }
    err = c.DeleteShelf(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
}

func ExampleClient_MergeShelves() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &google_example_library_v1.MergeShelvesRequest{
        // TODO: Fill request struct fields.
    }
    resp, err := c.MergeShelves(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
    // TODO: Use resp.
    _ = resp
}

func ExampleClient_CreateBook() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &google_example_library_v1.CreateBookRequest{
        // TODO: Fill request struct fields.
    }
    resp, err := c.CreateBook(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
    // TODO: Use resp.
    _ = resp
}

func ExampleClient_PublishSeries() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &google_example_library_v1.PublishSeriesRequest{
        // TODO: Fill request struct fields.
    }
    resp, err := c.PublishSeries(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
    // TODO: Use resp.
    _ = resp
}

func ExampleClient_GetBook() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &google_example_library_v1.GetBookRequest{
        // TODO: Fill request struct fields.
    }
    resp, err := c.GetBook(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
    // TODO: Use resp.
    _ = resp
}

func ExampleClient_ListBooks() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &google_example_library_v1.ListBooksRequest{
        // TODO: Fill request struct fields.
    }
    it := c.ListBooks(ctx, req)
    for {
        resp, err := it.Next()
        if err != nil {
            // TODO: Handle error.
            break
        }
        // TODO: Use resp.
        _ = resp
    }
}

func ExampleClient_DeleteBook() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &google_example_library_v1.DeleteBookRequest{
        // TODO: Fill request struct fields.
    }
    err = c.DeleteBook(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
}

func ExampleClient_UpdateBook() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &google_example_library_v1.UpdateBookRequest{
        // TODO: Fill request struct fields.
    }
    resp, err := c.UpdateBook(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
    // TODO: Use resp.
    _ = resp
}

func ExampleClient_MoveBook() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &google_example_library_v1.MoveBookRequest{
        // TODO: Fill request struct fields.
    }
    resp, err := c.MoveBook(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
    // TODO: Use resp.
    _ = resp
}

func ExampleClient_ListStrings() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &google_example_library_v1.ListStringsRequest{
        // TODO: Fill request struct fields.
    }
    it := c.ListStrings(ctx, req)
    for {
        resp, err := it.Next()
        if err != nil {
            // TODO: Handle error.
            break
        }
        // TODO: Use resp.
        _ = resp
    }
}

func ExampleClient_AddComments() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &google_example_library_v1.AddCommentsRequest{
        // TODO: Fill request struct fields.
    }
    err = c.AddComments(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
}

func ExampleClient_GetBookFromArchive() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &google_example_library_v1.GetBookFromArchiveRequest{
        // TODO: Fill request struct fields.
    }
    resp, err := c.GetBookFromArchive(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
    // TODO: Use resp.
    _ = resp
}

func ExampleClient_UpdateBookIndex() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &google_example_library_v1.UpdateBookIndexRequest{
        // TODO: Fill request struct fields.
    }
    err = c.UpdateBookIndex(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
}
