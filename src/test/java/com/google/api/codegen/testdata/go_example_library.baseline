============== file: cloud.google.com/go/library/apiv1/library_client_example_test.go ==============
// Copyright 2017, Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// AUTO-GENERATED CODE. DO NOT EDIT.

package library_test

import (
    "io"

    "cloud.google.com/go/library/apiv1"
    "golang.org/x/net/context"
    "google.golang.org/api/iterator"
    librarypb "google.golang.org/genproto/googleapis/example/library/v1"
)

func ExampleNewClient() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }
    // TODO: Use client.
    _ = c
}

func ExampleClient_BookIAM() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    book := &librarypb.Book{}
    h := c.BookIAM(book)
    policy, err := h.Policy(ctx)
    if err != nil {
        // TODO: Handle error.
    }
    //TODO: Use the IAM policy
    _ = policy
}


func ExampleClient_CreateShelf() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &librarypb.CreateShelfRequest{
        // TODO: Fill request struct fields.
    }
    resp, err := c.CreateShelf(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
    // TODO: Use resp.
    _ = resp
}

func ExampleClient_GetShelf() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &librarypb.GetShelfRequest{
        // TODO: Fill request struct fields.
    }
    resp, err := c.GetShelf(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
    // TODO: Use resp.
    _ = resp
}

func ExampleClient_ListShelves() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &librarypb.ListShelvesRequest{
        // TODO: Fill request struct fields.
    }
    it := c.ListShelves(ctx, req)
    for {
        resp, err := it.Next()
        if err == iterator.Done {
            break
        }
        if err != nil {
            // TODO: Handle error.
        }
        // TODO: Use resp.
        _ = resp
    }
}

func ExampleClient_DeleteShelf() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &librarypb.DeleteShelfRequest{
        // TODO: Fill request struct fields.
    }
    err = c.DeleteShelf(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
}

func ExampleClient_MergeShelves() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &librarypb.MergeShelvesRequest{
        // TODO: Fill request struct fields.
    }
    resp, err := c.MergeShelves(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
    // TODO: Use resp.
    _ = resp
}

func ExampleClient_CreateBook() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &librarypb.CreateBookRequest{
        // TODO: Fill request struct fields.
    }
    resp, err := c.CreateBook(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
    // TODO: Use resp.
    _ = resp
}

func ExampleClient_PublishSeries() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &librarypb.PublishSeriesRequest{
        // TODO: Fill request struct fields.
    }
    resp, err := c.PublishSeries(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
    // TODO: Use resp.
    _ = resp
}

func ExampleClient_GetBook() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &librarypb.GetBookRequest{
        // TODO: Fill request struct fields.
    }
    resp, err := c.GetBook(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
    // TODO: Use resp.
    _ = resp
}

func ExampleClient_ListBooks() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &librarypb.ListBooksRequest{
        // TODO: Fill request struct fields.
    }
    it := c.ListBooks(ctx, req)
    for {
        resp, err := it.Next()
        if err == iterator.Done {
            break
        }
        if err != nil {
            // TODO: Handle error.
        }
        // TODO: Use resp.
        _ = resp
    }
}

func ExampleClient_DeleteBook() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &librarypb.DeleteBookRequest{
        // TODO: Fill request struct fields.
    }
    err = c.DeleteBook(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
}

func ExampleClient_UpdateBook() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &librarypb.UpdateBookRequest{
        // TODO: Fill request struct fields.
    }
    resp, err := c.UpdateBook(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
    // TODO: Use resp.
    _ = resp
}

func ExampleClient_MoveBook() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &librarypb.MoveBookRequest{
        // TODO: Fill request struct fields.
    }
    resp, err := c.MoveBook(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
    // TODO: Use resp.
    _ = resp
}

func ExampleClient_ListStrings() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &librarypb.ListStringsRequest{
        // TODO: Fill request struct fields.
    }
    it := c.ListStrings(ctx, req)
    for {
        resp, err := it.Next()
        if err == iterator.Done {
            break
        }
        if err != nil {
            // TODO: Handle error.
        }
        // TODO: Use resp.
        _ = resp
    }
}

func ExampleClient_AddComments() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &librarypb.AddCommentsRequest{
        // TODO: Fill request struct fields.
    }
    err = c.AddComments(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
}

func ExampleClient_GetBookFromArchive() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &librarypb.GetBookFromArchiveRequest{
        // TODO: Fill request struct fields.
    }
    resp, err := c.GetBookFromArchive(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
    // TODO: Use resp.
    _ = resp
}

func ExampleClient_GetBookFromAnywhere() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &librarypb.GetBookFromAnywhereRequest{
        // TODO: Fill request struct fields.
    }
    resp, err := c.GetBookFromAnywhere(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
    // TODO: Use resp.
    _ = resp
}

func ExampleClient_UpdateBookIndex() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &librarypb.UpdateBookIndexRequest{
        // TODO: Fill request struct fields.
    }
    err = c.UpdateBookIndex(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
}

func ExampleClient_StreamShelves() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &librarypb.StreamShelvesRequest{
        // TODO: Fill request struct fields.
    }
    stream, err := c.StreamShelves(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
    for {
        resp, err := stream.Recv()
        if err == io.EOF {
            break
        }
        if err != nil {
            // TODO: handle error.
        }
        // TODO: Use resp.
        _ = resp
    }
}

func ExampleClient_StreamBooks() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &librarypb.StreamBooksRequest{
        // TODO: Fill request struct fields.
    }
    stream, err := c.StreamBooks(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
    for {
        resp, err := stream.Recv()
        if err == io.EOF {
            break
        }
        if err != nil {
            // TODO: handle error.
        }
        // TODO: Use resp.
        _ = resp
    }
}

func ExampleClient_DiscussBook() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }
    stream, err := c.DiscussBook(ctx)
    if err != nil {
        // TODO: Handle error.
    }
    go func() {
        reqs := []*librarypb.DiscussBookRequest{
            // TODO: Create requests.
        }
        for _, req := range reqs {
            if err := stream.Send(req); err != nil {
                // TODO: Handle error.
            }
        }
        stream.CloseSend()
    }()
    for {
        resp, err := stream.Recv()
        if err == io.EOF {
            break
        }
        if err != nil {
            // TODO: handle error.
        }
        // TODO: Use resp.
        _ = resp
    }
}

func ExampleClient_MonologAboutBook() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }
    stream, err := c.MonologAboutBook(ctx)
    if err != nil {
        // TODO: Handle error.
    }
    reqs := []*librarypb.DiscussBookRequest{
        // TODO: Create requests.
    }
    for _, req := range reqs {
        if err := stream.Send(req); err != nil {
            // TODO: Handle error.
        }
    }
    resp, err := stream.CloseAndRecv()
    if err != nil {
        // TODO: Handle error.
    }
    // TODO: Use resp.
    _ = resp
}

func ExampleClient_FindRelatedBooks() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &librarypb.FindRelatedBooksRequest{
        // TODO: Fill request struct fields.
    }
    it := c.FindRelatedBooks(ctx, req)
    for {
        resp, err := it.Next()
        if err == iterator.Done {
            break
        }
        if err != nil {
            // TODO: Handle error.
        }
        // TODO: Use resp.
        _ = resp
    }
}

func ExampleClient_GetBigBook() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &librarypb.GetBookRequest{
        // TODO: Fill request struct fields.
    }
    op, err := c.GetBigBook(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }

    resp, err := op.Wait(ctx)
    if err != nil {
        // TODO: Handle error.
    }
    // TODO: Use resp.
    _ = resp
}

func ExampleClient_GetBigNothing() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &librarypb.GetBookRequest{
        // TODO: Fill request struct fields.
    }
    op, err := c.GetBigNothing(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }

    err = op.Wait(ctx)
    // TODO: Handle error.
}

func ExampleClient_TestOptionalRequiredFlatteningParams() {
    ctx := context.Background()
    c, err := library.NewClient(ctx)
    if err != nil {
        // TODO: Handle error.
    }

    req := &librarypb.TestOptionalRequiredFlatteningParamsRequest{
        // TODO: Fill request struct fields.
    }
    resp, err := c.TestOptionalRequiredFlatteningParams(ctx, req)
    if err != nil {
        // TODO: Handle error.
    }
    // TODO: Use resp.
    _ = resp
}


