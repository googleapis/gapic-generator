============== file: src/test/java/com/google/gcloud/example/NoTemplatesApiServiceClientTest.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.gcloud.example;

import com.google.api.gax.core.NoCredentialsProvider;
import com.google.api.gax.grpc.GrpcStatusCode;
import com.google.api.gax.grpc.GrpcTransportProvider;
import com.google.api.gax.grpc.testing.MockGrpcService;
import com.google.api.gax.grpc.testing.MockServiceHelper;
import com.google.api.gax.rpc.InvalidArgumentException;
import com.google.common.collect.Lists;
import com.google.protobuf.GeneratedMessageV3;
import io.grpc.Status;
import io.grpc.StatusRuntimeException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.ExecutionException;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

@javax.annotation.Generated("by GAPIC")
public class NoTemplatesApiServiceClientTest {
  private static MockNoTemplatesAPIService mockNoTemplatesAPIService;
  private static MockServiceHelper serviceHelper;
  private NoTemplatesApiServiceClient client;

  @BeforeClass
  public static void startStaticServer() {
    mockNoTemplatesAPIService = new MockNoTemplatesAPIService();
    serviceHelper = new MockServiceHelper("in-process-1", Arrays.<MockGrpcService>asList(mockNoTemplatesAPIService));
    serviceHelper.start();
  }

  @AfterClass
  public static void stopServer() {
    serviceHelper.stop();
  }

  @Before
  public void setUp() throws IOException {
    serviceHelper.reset();
    NoTemplatesApiServiceSettings settings = NoTemplatesApiServiceSettings.defaultBuilder()
        .setTransportProvider(
              GrpcTransportProvider.newBuilder()
                  .setChannelProvider(serviceHelper.createChannelProvider())
                  .build())
        .setCredentialsProvider(new NoCredentialsProvider())
        .build();
    client = NoTemplatesApiServiceClient.create(settings);
  }

  @After
  public void tearDown() throws Exception {
    client.close();
  }

}
