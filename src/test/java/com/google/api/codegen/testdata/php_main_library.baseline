============== file: src/LibraryServiceApi.php ==============
<?php
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

/*
 * GENERATED CODE WARNING
 * This file was generated from the file
 * https://github.com/google/googleapis/blob/master/library.proto
 * and updates to that file get reflected here through a refresh process.
 */

namespace Google\Example\Library\V1;

use Google\GAX\AgentHeaderDescriptor;
use Google\GAX\ApiCallable;
use Google\GAX\CallSettings;
use Google\GAX\GrpcConstants;
use Google\GAX\GrpcCredentialsHelper;
use Google\GAX\PageStreamingDescriptor;
use Google\GAX\PathTemplate;
use google\example\library\v1\AddCommentsRequest;
use google\example\library\v1\Book;
use google\example\library\v1\Comment;
use google\example\library\v1\CreateBookRequest;
use google\example\library\v1\CreateShelfRequest;
use google\example\library\v1\DeleteBookRequest;
use google\example\library\v1\DeleteShelfRequest;
use google\example\library\v1\GetBookFromArchiveRequest;
use google\example\library\v1\GetBookRequest;
use google\example\library\v1\GetShelfRequest;
use google\example\library\v1\LibraryServiceClient;
use google\example\library\v1\ListBooksRequest;
use google\example\library\v1\ListShelvesRequest;
use google\example\library\v1\ListStringsRequest;
use google\example\library\v1\MergeShelvesRequest;
use google\example\library\v1\MoveBookRequest;
use google\example\library\v1\PublishSeriesRequest;
use google\example\library\v1\Shelf;
use google\example\library\v1\SomeMessage;
use google\example\library\v1\StringBuilder;
use google\example\library\v1\UpdateBookIndexRequest;
use google\example\library\v1\UpdateBookIndexRequest\IndexMapEntry;
use google\example\library\v1\UpdateBookRequest;
use google\protobuf\FieldMask;
use google\tagger\v1\AddLabelRequest;
use google\tagger\v1\AddTagRequest;
use google\tagger\v1\LabelerClient;

/**
 * Service Description: This API represents a simple digital library.  It lets you manage Shelf
 * resources and Book resources in the library. It defines the following
 * resource model:
 *
 * - The API has a collection of [Shelf][google.example.library.v1.Shelf]
 *   resources, named ``bookShelves/*``
 *
 * - Each Shelf has a collection of [Book][google.example.library.v1.Book]
 *   resources, named `bookShelves/*/books/*`
 *
 * Check out [cloud docs!](/library/example/link).
 * This is [not a cloud link](http://www.google.com).
 *
 * This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * ```
 * try {
 *     $libraryServiceApi = new LibraryServiceApi();
 *     $shelf = new Shelf();
 *     $response = $libraryServiceApi->createShelf($shelf);
 * } finally {
 *     if (isset($libraryServiceApi)) {
 *         $libraryServiceApi->close();
 *     }
 * }
 * ```
 *
 * Many parameters require resource names to be formatted in a particular way. To assist
 * with these names, this class includes a format method for each type of name, and additionally
 * a parse method to extract the individual identifiers contained within names that are
 * returned.
 */
class LibraryServiceApi
{
    /**
     * The default address of the service.
     */
    const SERVICE_ADDRESS = 'library-example.googleapis.com';

    /**
     * The default port of the service.
     */
    const DEFAULT_SERVICE_PORT = 443;

    /**
     * The default timeout for non-retrying methods.
     */
    const DEFAULT_TIMEOUT_MILLIS = 30000;

    const _GAX_VERSION = '0.1.0';
    const _CODEGEN_NAME = 'GAPIC';
    const _CODEGEN_VERSION = '0.0.0';

    private static $shelfNameTemplate;
    private static $bookNameTemplate;
    private static $archivedBookNameTemplate;

    private $grpcCredentialsHelper;
    private $libraryServiceStub;
    private $labelerStub;
    private $scopes;
    private $defaultCallSettings;
    private $descriptors;

    /**
     * Formats a string containing the fully-qualified path to represent
     * a shelf resource.
     */
    public static function formatShelfName($shelf)
    {
        return self::getShelfNameTemplate()->render([
            'shelf' => $shelf,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a book resource.
     */
    public static function formatBookName($shelf, $book)
    {
        return self::getBookNameTemplate()->render([
            'shelf' => $shelf,
            'book' => $book,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a archived_book resource.
     */
    public static function formatArchivedBookName($archivePath, $book)
    {
        return self::getArchivedBookNameTemplate()->render([
            'archive_path' => $archivePath,
            'book' => $book,
        ]);
    }

    /**
     * Parses the shelf from the given fully-qualified path which
     * represents a shelf resource.
     */
    public static function parseShelfFromShelfName($shelfName)
    {
        return self::getShelfNameTemplate()->match($shelfName)['shelf'];
    }

    /**
     * Parses the shelf from the given fully-qualified path which
     * represents a book resource.
     */
    public static function parseShelfFromBookName($bookName)
    {
        return self::getBookNameTemplate()->match($bookName)['shelf'];
    }

    /**
     * Parses the book from the given fully-qualified path which
     * represents a book resource.
     */
    public static function parseBookFromBookName($bookName)
    {
        return self::getBookNameTemplate()->match($bookName)['book'];
    }

    /**
     * Parses the archive_path from the given fully-qualified path which
     * represents a archivedBook resource.
     */
    public static function parseArchivePathFromArchivedBookName($archivedBookName)
    {
        return self::getArchivedBookNameTemplate()->match($archivedBookName)['archive_path'];
    }

    /**
     * Parses the book from the given fully-qualified path which
     * represents a archivedBook resource.
     */
    public static function parseBookFromArchivedBookName($archivedBookName)
    {
        return self::getArchivedBookNameTemplate()->match($archivedBookName)['book'];
    }


    private static function getShelfNameTemplate()
    {
        if (self::$shelfNameTemplate == null) {
            self::$shelfNameTemplate = new PathTemplate('shelves/{shelf}');
        }

        return self::$shelfNameTemplate;
    }

    private static function getBookNameTemplate()
    {
        if (self::$bookNameTemplate == null) {
            self::$bookNameTemplate = new PathTemplate('shelves/{shelf}/books/{book}');
        }

        return self::$bookNameTemplate;
    }

    private static function getArchivedBookNameTemplate()
    {
        if (self::$archivedBookNameTemplate == null) {
            self::$archivedBookNameTemplate = new PathTemplate('archives/{archive_path=**}/books/{book}');
        }

        return self::$archivedBookNameTemplate;
    }

    private static function getPageStreamingDescriptors()
    {
        $listShelvesPageStreamingDescriptor =
                new PageStreamingDescriptor([
                    'requestPageTokenField' => 'page_token',
                    'responsePageTokenField' => 'next_page_token',
                    'resourceField' => 'shelves',
                ]);
        $listBooksPageStreamingDescriptor =
                new PageStreamingDescriptor([
                    'requestPageTokenField' => 'page_token',
                    'requestPageSizeField' => 'page_size',
                    'responsePageTokenField' => 'next_page_token',
                    'resourceField' => 'books',
                ]);
        $listStringsPageStreamingDescriptor =
                new PageStreamingDescriptor([
                    'requestPageTokenField' => 'page_token',
                    'requestPageSizeField' => 'page_size',
                    'responsePageTokenField' => 'next_page_token',
                    'resourceField' => 'strings',
                ]);

        $pageStreamingDescriptors = [
            'listShelves' => $listShelvesPageStreamingDescriptor,
            'listBooks' => $listBooksPageStreamingDescriptor,
            'listStrings' => $listStringsPageStreamingDescriptor,
        ];

        return $pageStreamingDescriptors;
    }

    // TODO(garrettjones): add channel (when supported in gRPC)
    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @type string $serviceAddress The domain name of the API remote host.
     *                                  Default 'library-example.googleapis.com'.
     *     @type mixed $port The port on which to connect to the remote host. Default 443.
     *     @type Grpc\ChannelCredentials $sslCreds
     *           A `ChannelCredentials` for use with an SSL-enabled channel.
     *           Default: a credentials object returned from
     *           Grpc\ChannelCredentials::createSsl()
     *     @type array $scopes A string array of scopes to use when acquiring credentials.
     *                         Default the scopes for the Google Example Library API.
     *     @type array $retryingOverride
     *           An associative array of string => RetryOptions, where the keys
     *           are method names (e.g. 'createFoo'), that overrides default retrying
     *           settings. A value of null indicates that the method in question should
     *           not retry.
     *     @type int $timeoutMillis The timeout in milliseconds to use for calls
     *                              that don't use retries. For calls that use retries,
     *                              set the timeout in RetryOptions.
     *                              Default: 30000 (30 seconds)
     *     @type string $appName The codename of the calling service. Default 'gax'.
     *     @type string $appVersion The version of the calling service.
     *                              Default: the current version of GAX.
     *     @type Google\Auth\CredentialsLoader $credentialsLoader
     *                              A CredentialsLoader object created using the
     *                              Google\Auth library.
     * }
     */
    public function __construct($options = [])
    {
        $defaultScopes = [
            'https://www.googleapis.com/auth/cloud-platform',
            'https://www.googleapis.com/auth/library',
        ];
        $defaultOptions = [
            'serviceAddress' => self::SERVICE_ADDRESS,
            'port' => self::DEFAULT_SERVICE_PORT,
            'scopes' => $defaultScopes,
            'retryingOverride' => null,
            'timeoutMillis' => self::DEFAULT_TIMEOUT_MILLIS,
            'appName' => 'gax',
            'appVersion' => self::_GAX_VERSION,
            'credentialsLoader' => null,
        ];
        $options = array_merge($defaultOptions, $options);

        $headerDescriptor = new AgentHeaderDescriptor([
            'clientName' => $options['appName'],
            'clientVersion' => $options['appVersion'],
            'codeGenName' => self::_CODEGEN_NAME,
            'codeGenVersion' => self::_CODEGEN_VERSION,
            'gaxVersion' => self::_GAX_VERSION,
            'phpVersion' => phpversion(),
        ]);

        $defaultDescriptors = ['headerDescriptor' => $headerDescriptor];
        $this->descriptors = [
            'createShelf' => $defaultDescriptors,
            'getShelf' => $defaultDescriptors,
            'listShelves' => $defaultDescriptors,
            'deleteShelf' => $defaultDescriptors,
            'mergeShelves' => $defaultDescriptors,
            'createBook' => $defaultDescriptors,
            'publishSeries' => $defaultDescriptors,
            'getBook' => $defaultDescriptors,
            'listBooks' => $defaultDescriptors,
            'deleteBook' => $defaultDescriptors,
            'updateBook' => $defaultDescriptors,
            'moveBook' => $defaultDescriptors,
            'listStrings' => $defaultDescriptors,
            'addComments' => $defaultDescriptors,
            'getBookFromArchive' => $defaultDescriptors,
            'updateBookIndex' => $defaultDescriptors,
            'addTag' => $defaultDescriptors,
            'addLabel' => $defaultDescriptors,
        ];
        $pageStreamingDescriptors = self::getPageStreamingDescriptors();
        foreach ($pageStreamingDescriptors as $method => $pageStreamingDescriptor) {
            $this->descriptors[$method]['pageStreamingDescriptor'] = $pageStreamingDescriptor;
        }

        // TODO load the client config in a more package-friendly way
        // https://github.com/googleapis/toolkit/issues/332
        $clientConfigJsonString = file_get_contents(__DIR__ . '/resources/library_service_client_config.json');
        $clientConfig = json_decode($clientConfigJsonString, true);
        $this->defaultCallSettings =
                CallSettings::load('google.example.library.v1.LibraryService',
                                   $clientConfig,
                                   $options['retryingOverride'],
                                   GrpcConstants::getStatusCodeNames(),
                                   $options['timeoutMillis']);

        $this->scopes = $options['scopes'];

        $createStubOptions = [];
        if (!empty($options['sslCreds'])) {
            $createStubOptions['sslCreds'] = $options['sslCreds'];
        }
        $grpcCredentialsHelperOptions = array_diff_key($options, $defaultOptions);
        $this->grpcCredentialsHelper = new GrpcCredentialsHelper($this->scopes, $grpcCredentialsHelperOptions);

        $createLibraryServiceStubFunction = function ($hostname, $opts) {
            return new LibraryServiceClient($hostname, $opts);
        };
        $this->libraryServiceStub = $this->grpcCredentialsHelper->createStub(
            $createLibraryServiceStubFunction,
            $options['serviceAddress'],
            $options['port'],
            $createStubOptions);
        $createLabelerStubFunction = function ($hostname, $opts) {
            return new LabelerClient($hostname, $opts);
        };
        $this->labelerStub = $this->grpcCredentialsHelper->createStub(
            $createLabelerStubFunction,
            $options['serviceAddress'],
            $options['port'],
            $createStubOptions);
    }

    /**
     * Creates a shelf, and returns the new Shelf.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceApi = new LibraryServiceApi();
     *     $shelf = new Shelf();
     *     $response = $libraryServiceApi->createShelf($shelf);
     * } finally {
     *     if (isset($libraryServiceApi)) {
     *         $libraryServiceApi->close();
     *     }
     * }
     * ```
     *
     * @param Shelf $shelf The shelf to create.
     * @param array $optionalArgs {
     *     Optional.
     *     @type Google\GAX\RetrySettings $retrySettings
     *          Retry settings to use for this call. If present, then
     *          $timeoutMillis is ignored.
     *     @type int $timeoutMillis
     *          Timeout to use for this call. Only used if $retrySettings
     *          is not set.
     * }
     *
     * @return google\example\library\v1\Shelf
     *
     * @throws Google\GAX\ApiException if the remote call fails
     */
    public function createShelf($shelf, $optionalArgs = [])
    {
        $request = new CreateShelfRequest();
        $request->setShelf($shelf);

        $mergedSettings = $this->defaultCallSettings['createShelf']->merge(
            new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'CreateShelf', $mergedSettings, $this->descriptors['createShelf']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Gets a shelf.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceApi = new LibraryServiceApi();
     *     $formattedName = LibraryServiceApi::formatShelfName("[SHELF]");
     *     $options = "";
     *     $response = $libraryServiceApi->getShelf($formattedName, $options);
     * } finally {
     *     if (isset($libraryServiceApi)) {
     *         $libraryServiceApi->close();
     *     }
     * }
     * ```
     *
     * @param string $name The name of the shelf to retrieve.
     * @param string $options To test 'options' parameter name conflict.
     * @param array $optionalArgs {
     *     Optional.
     *     @type SomeMessage $message
     *          Field to verify that message-type query parameter gets flattened.
     *     @type StringBuilder $stringBuilder
     *     @type Google\GAX\RetrySettings $retrySettings
     *          Retry settings to use for this call. If present, then
     *          $timeoutMillis is ignored.
     *     @type int $timeoutMillis
     *          Timeout to use for this call. Only used if $retrySettings
     *          is not set.
     * }
     *
     * @return google\example\library\v1\Shelf
     *
     * @throws Google\GAX\ApiException if the remote call fails
     */
    public function getShelf($name, $options, $optionalArgs = [])
    {
        $request = new GetShelfRequest();
        $request->setName($name);
        $request->setOptions($options);
        if (isset($optionalArgs['message'])) {
            $request->setMessage($optionalArgs['message']);
        }
        if (isset($optionalArgs['stringBuilder'])) {
            $request->setStringBuilder($optionalArgs['stringBuilder']);
        }

        $mergedSettings = $this->defaultCallSettings['getShelf']->merge(
            new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'GetShelf', $mergedSettings, $this->descriptors['getShelf']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Lists shelves.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceApi = new LibraryServiceApi();
     *
     *     foreach ($libraryServiceApi->listShelves() as $element) {
     *         // doThingsWith(element);
     *     }
     * } finally {
     *     if (isset($libraryServiceApi)) {
     *         $libraryServiceApi->close();
     *     }
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *     @type string $pageToken
     *          A page token is used to specify a page of values to be returned.
     *          If no page token is specified (the default), the first page
     *          of values will be returned. Any page token used here must have
     *          been generated by a previous call to the API.
     *     @type Google\GAX\RetrySettings $retrySettings
     *          Retry settings to use for this call. If present, then
     *          $timeoutMillis is ignored.
     *     @type int $timeoutMillis
     *          Timeout to use for this call. Only used if $retrySettings
     *          is not set.
     * }
     *
     * @return Google\GAX\PagedListResponse
     *
     * @throws Google\GAX\ApiException if the remote call fails
     */
    public function listShelves($optionalArgs = [])
    {
        $request = new ListShelvesRequest();
        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        $mergedSettings = $this->defaultCallSettings['listShelves']->merge(
            new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'ListShelves', $mergedSettings, $this->descriptors['listShelves']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Deletes a shelf.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceApi = new LibraryServiceApi();
     *     $formattedName = LibraryServiceApi::formatShelfName("[SHELF]");
     *     $libraryServiceApi->deleteShelf($formattedName);
     * } finally {
     *     if (isset($libraryServiceApi)) {
     *         $libraryServiceApi->close();
     *     }
     * }
     * ```
     *
     * @param string $name The name of the shelf to delete.
     * @param array $optionalArgs {
     *     Optional.
     *     @type Google\GAX\RetrySettings $retrySettings
     *          Retry settings to use for this call. If present, then
     *          $timeoutMillis is ignored.
     *     @type int $timeoutMillis
     *          Timeout to use for this call. Only used if $retrySettings
     *          is not set.
     * }
     *
     * @throws Google\GAX\ApiException if the remote call fails
     */
    public function deleteShelf($name, $optionalArgs = [])
    {
        $request = new DeleteShelfRequest();
        $request->setName($name);

        $mergedSettings = $this->defaultCallSettings['deleteShelf']->merge(
            new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'DeleteShelf', $mergedSettings, $this->descriptors['deleteShelf']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Merges two shelves by adding all books from the shelf named
     * `other_shelf_name` to shelf `name`, and deletes
     * `other_shelf_name`. Returns the updated shelf.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceApi = new LibraryServiceApi();
     *     $formattedName = LibraryServiceApi::formatShelfName("[SHELF]");
     *     $formattedOtherShelfName = LibraryServiceApi::formatShelfName("[SHELF]");
     *     $response = $libraryServiceApi->mergeShelves($formattedName, $formattedOtherShelfName);
     * } finally {
     *     if (isset($libraryServiceApi)) {
     *         $libraryServiceApi->close();
     *     }
     * }
     * ```
     *
     * @param string $name The name of the shelf we're adding books to.
     * @param string $otherShelfName The name of the shelf we're removing books from and deleting.
     * @param array $optionalArgs {
     *     Optional.
     *     @type Google\GAX\RetrySettings $retrySettings
     *          Retry settings to use for this call. If present, then
     *          $timeoutMillis is ignored.
     *     @type int $timeoutMillis
     *          Timeout to use for this call. Only used if $retrySettings
     *          is not set.
     * }
     *
     * @return google\example\library\v1\Shelf
     *
     * @throws Google\GAX\ApiException if the remote call fails
     */
    public function mergeShelves($name, $otherShelfName, $optionalArgs = [])
    {
        $request = new MergeShelvesRequest();
        $request->setName($name);
        $request->setOtherShelfName($otherShelfName);

        $mergedSettings = $this->defaultCallSettings['mergeShelves']->merge(
            new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'MergeShelves', $mergedSettings, $this->descriptors['mergeShelves']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Creates a book.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceApi = new LibraryServiceApi();
     *     $formattedName = LibraryServiceApi::formatShelfName("[SHELF]");
     *     $book = new Book();
     *     $response = $libraryServiceApi->createBook($formattedName, $book);
     * } finally {
     *     if (isset($libraryServiceApi)) {
     *         $libraryServiceApi->close();
     *     }
     * }
     * ```
     *
     * @param string $name The name of the shelf in which the book is created.
     * @param Book $book The book to create.
     * @param array $optionalArgs {
     *     Optional.
     *     @type Google\GAX\RetrySettings $retrySettings
     *          Retry settings to use for this call. If present, then
     *          $timeoutMillis is ignored.
     *     @type int $timeoutMillis
     *          Timeout to use for this call. Only used if $retrySettings
     *          is not set.
     * }
     *
     * @return google\example\library\v1\Book
     *
     * @throws Google\GAX\ApiException if the remote call fails
     */
    public function createBook($name, $book, $optionalArgs = [])
    {
        $request = new CreateBookRequest();
        $request->setName($name);
        $request->setBook($book);

        $mergedSettings = $this->defaultCallSettings['createBook']->merge(
            new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'CreateBook', $mergedSettings, $this->descriptors['createBook']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Creates a series of books.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceApi = new LibraryServiceApi();
     *     $shelf = new Shelf();
     *     $books = [];
     *     $response = $libraryServiceApi->publishSeries($shelf, $books);
     * } finally {
     *     if (isset($libraryServiceApi)) {
     *         $libraryServiceApi->close();
     *     }
     * }
     * ```
     *
     * @param Shelf $shelf The shelf in which the series is created.
     * @param Book[] $books The books to publish in the series.
     * @param array $optionalArgs {
     *     Optional.
     *     @type int $edition
     *          The edition of the series
     *     @type Google\GAX\RetrySettings $retrySettings
     *          Retry settings to use for this call. If present, then
     *          $timeoutMillis is ignored.
     *     @type int $timeoutMillis
     *          Timeout to use for this call. Only used if $retrySettings
     *          is not set.
     * }
     *
     * @return google\example\library\v1\PublishSeriesResponse
     *
     * @throws Google\GAX\ApiException if the remote call fails
     */
    public function publishSeries($shelf, $books, $optionalArgs = [])
    {
        $request = new PublishSeriesRequest();
        $request->setShelf($shelf);
        foreach ($books as $elem) {
            $request->addBooks($elem);
        }
        if (isset($optionalArgs['edition'])) {
            $request->setEdition($optionalArgs['edition']);
        }

        $mergedSettings = $this->defaultCallSettings['publishSeries']->merge(
            new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'PublishSeries', $mergedSettings, $this->descriptors['publishSeries']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Gets a book.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceApi = new LibraryServiceApi();
     *     $formattedName = LibraryServiceApi::formatBookName("[SHELF]", "[BOOK]");
     *     $response = $libraryServiceApi->getBook($formattedName);
     * } finally {
     *     if (isset($libraryServiceApi)) {
     *         $libraryServiceApi->close();
     *     }
     * }
     * ```
     *
     * @param string $name The name of the book to retrieve.
     * @param array $optionalArgs {
     *     Optional.
     *     @type Google\GAX\RetrySettings $retrySettings
     *          Retry settings to use for this call. If present, then
     *          $timeoutMillis is ignored.
     *     @type int $timeoutMillis
     *          Timeout to use for this call. Only used if $retrySettings
     *          is not set.
     * }
     *
     * @return google\example\library\v1\Book
     *
     * @throws Google\GAX\ApiException if the remote call fails
     */
    public function getBook($name, $optionalArgs = [])
    {
        $request = new GetBookRequest();
        $request->setName($name);

        $mergedSettings = $this->defaultCallSettings['getBook']->merge(
            new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'GetBook', $mergedSettings, $this->descriptors['getBook']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Lists books in a shelf.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceApi = new LibraryServiceApi();
     *     $formattedName = LibraryServiceApi::formatShelfName("[SHELF]");
     *     foreach ($libraryServiceApi->listBooks($formattedName) as $element) {
     *         // doThingsWith(element);
     *     }
     * } finally {
     *     if (isset($libraryServiceApi)) {
     *         $libraryServiceApi->close();
     *     }
     * }
     * ```
     *
     * @param string $name The name of the shelf whose books we'd like to list.
     * @param array $optionalArgs {
     *     Optional.
     *     @type int $pageSize
     *          The maximum number of resources contained in the underlying API
     *          response. The API may return fewer values in a page, even if
     *          there are additional values to be retrieved.
     *     @type string $pageToken
     *          A page token is used to specify a page of values to be returned.
     *          If no page token is specified (the default), the first page
     *          of values will be returned. Any page token used here must have
     *          been generated by a previous call to the API.
     *     @type string $filter
     *          To test python built-in wrapping.
     *     @type Google\GAX\RetrySettings $retrySettings
     *          Retry settings to use for this call. If present, then
     *          $timeoutMillis is ignored.
     *     @type int $timeoutMillis
     *          Timeout to use for this call. Only used if $retrySettings
     *          is not set.
     * }
     *
     * @return Google\GAX\PagedListResponse
     *
     * @throws Google\GAX\ApiException if the remote call fails
     */
    public function listBooks($name, $optionalArgs = [])
    {
        $request = new ListBooksRequest();
        $request->setName($name);
        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }
        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }
        if (isset($optionalArgs['filter'])) {
            $request->setFilter($optionalArgs['filter']);
        }

        $mergedSettings = $this->defaultCallSettings['listBooks']->merge(
            new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'ListBooks', $mergedSettings, $this->descriptors['listBooks']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Deletes a book.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceApi = new LibraryServiceApi();
     *     $formattedName = LibraryServiceApi::formatBookName("[SHELF]", "[BOOK]");
     *     $libraryServiceApi->deleteBook($formattedName);
     * } finally {
     *     if (isset($libraryServiceApi)) {
     *         $libraryServiceApi->close();
     *     }
     * }
     * ```
     *
     * @param string $name The name of the book to delete.
     * @param array $optionalArgs {
     *     Optional.
     *     @type Google\GAX\RetrySettings $retrySettings
     *          Retry settings to use for this call. If present, then
     *          $timeoutMillis is ignored.
     *     @type int $timeoutMillis
     *          Timeout to use for this call. Only used if $retrySettings
     *          is not set.
     * }
     *
     * @throws Google\GAX\ApiException if the remote call fails
     */
    public function deleteBook($name, $optionalArgs = [])
    {
        $request = new DeleteBookRequest();
        $request->setName($name);

        $mergedSettings = $this->defaultCallSettings['deleteBook']->merge(
            new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'DeleteBook', $mergedSettings, $this->descriptors['deleteBook']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Updates a book.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceApi = new LibraryServiceApi();
     *     $formattedName = LibraryServiceApi::formatBookName("[SHELF]", "[BOOK]");
     *     $book = new Book();
     *     $response = $libraryServiceApi->updateBook($formattedName, $book);
     * } finally {
     *     if (isset($libraryServiceApi)) {
     *         $libraryServiceApi->close();
     *     }
     * }
     * ```
     *
     * @param string $name The name of the book to update.
     * @param Book $book The book to update with.
     * @param array $optionalArgs {
     *     Optional.
     *     @type FieldMask $updateMask
     *          A field mask to apply, rendered as an HTTP parameter.
     *     @type google\example\library\v1\FieldMask $physicalMask
     *          To test Python import clash resolution.
     *     @type Google\GAX\RetrySettings $retrySettings
     *          Retry settings to use for this call. If present, then
     *          $timeoutMillis is ignored.
     *     @type int $timeoutMillis
     *          Timeout to use for this call. Only used if $retrySettings
     *          is not set.
     * }
     *
     * @return google\example\library\v1\Book
     *
     * @throws Google\GAX\ApiException if the remote call fails
     */
    public function updateBook($name, $book, $optionalArgs = [])
    {
        $request = new UpdateBookRequest();
        $request->setName($name);
        $request->setBook($book);
        if (isset($optionalArgs['updateMask'])) {
            $request->setUpdateMask($optionalArgs['updateMask']);
        }
        if (isset($optionalArgs['physicalMask'])) {
            $request->setPhysicalMask($optionalArgs['physicalMask']);
        }

        $mergedSettings = $this->defaultCallSettings['updateBook']->merge(
            new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'UpdateBook', $mergedSettings, $this->descriptors['updateBook']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Moves a book to another shelf, and returns the new book.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceApi = new LibraryServiceApi();
     *     $formattedName = LibraryServiceApi::formatBookName("[SHELF]", "[BOOK]");
     *     $formattedOtherShelfName = LibraryServiceApi::formatShelfName("[SHELF]");
     *     $response = $libraryServiceApi->moveBook($formattedName, $formattedOtherShelfName);
     * } finally {
     *     if (isset($libraryServiceApi)) {
     *         $libraryServiceApi->close();
     *     }
     * }
     * ```
     *
     * @param string $name The name of the book to move.
     * @param string $otherShelfName The name of the destination shelf.
     * @param array $optionalArgs {
     *     Optional.
     *     @type Google\GAX\RetrySettings $retrySettings
     *          Retry settings to use for this call. If present, then
     *          $timeoutMillis is ignored.
     *     @type int $timeoutMillis
     *          Timeout to use for this call. Only used if $retrySettings
     *          is not set.
     * }
     *
     * @return google\example\library\v1\Book
     *
     * @throws Google\GAX\ApiException if the remote call fails
     */
    public function moveBook($name, $otherShelfName, $optionalArgs = [])
    {
        $request = new MoveBookRequest();
        $request->setName($name);
        $request->setOtherShelfName($otherShelfName);

        $mergedSettings = $this->defaultCallSettings['moveBook']->merge(
            new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'MoveBook', $mergedSettings, $this->descriptors['moveBook']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Lists a primitive resource. To test go page streaming.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceApi = new LibraryServiceApi();
     *
     *     foreach ($libraryServiceApi->listStrings() as $element) {
     *         // doThingsWith(element);
     *     }
     * } finally {
     *     if (isset($libraryServiceApi)) {
     *         $libraryServiceApi->close();
     *     }
     * }
     * ```
     *
     * @param array $optionalArgs {
     *     Optional.
     *     @type string $name
     *     @type int $pageSize
     *          The maximum number of resources contained in the underlying API
     *          response. The API may return fewer values in a page, even if
     *          there are additional values to be retrieved.
     *     @type string $pageToken
     *          A page token is used to specify a page of values to be returned.
     *          If no page token is specified (the default), the first page
     *          of values will be returned. Any page token used here must have
     *          been generated by a previous call to the API.
     *     @type Google\GAX\RetrySettings $retrySettings
     *          Retry settings to use for this call. If present, then
     *          $timeoutMillis is ignored.
     *     @type int $timeoutMillis
     *          Timeout to use for this call. Only used if $retrySettings
     *          is not set.
     * }
     *
     * @return Google\GAX\PagedListResponse
     *
     * @throws Google\GAX\ApiException if the remote call fails
     */
    public function listStrings($optionalArgs = [])
    {
        $request = new ListStringsRequest();
        if (isset($optionalArgs['name'])) {
            $request->setName($optionalArgs['name']);
        }
        if (isset($optionalArgs['pageSize'])) {
            $request->setPageSize($optionalArgs['pageSize']);
        }
        if (isset($optionalArgs['pageToken'])) {
            $request->setPageToken($optionalArgs['pageToken']);
        }

        $mergedSettings = $this->defaultCallSettings['listStrings']->merge(
            new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'ListStrings', $mergedSettings, $this->descriptors['listStrings']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Adds comments to a book
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceApi = new LibraryServiceApi();
     *     $formattedName = LibraryServiceApi::formatBookName("[SHELF]", "[BOOK]");
     *     $comment = "";
     *     $stage = Stage::UNSET;
     *     $commentsElement = new Comment();
     *     $commentsElement->setComment($comment);
     *     $commentsElement->setStage($stage);
     *     $comments = [$commentsElement];
     *     $libraryServiceApi->addComments($formattedName, $comments);
     * } finally {
     *     if (isset($libraryServiceApi)) {
     *         $libraryServiceApi->close();
     *     }
     * }
     * ```
     *
     * @param string $name
     * @param Comment[] $comments
     * @param array $optionalArgs {
     *     Optional.
     *     @type Google\GAX\RetrySettings $retrySettings
     *          Retry settings to use for this call. If present, then
     *          $timeoutMillis is ignored.
     *     @type int $timeoutMillis
     *          Timeout to use for this call. Only used if $retrySettings
     *          is not set.
     * }
     *
     * @throws Google\GAX\ApiException if the remote call fails
     */
    public function addComments($name, $comments, $optionalArgs = [])
    {
        $request = new AddCommentsRequest();
        $request->setName($name);
        foreach ($comments as $elem) {
            $request->addComments($elem);
        }

        $mergedSettings = $this->defaultCallSettings['addComments']->merge(
            new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'AddComments', $mergedSettings, $this->descriptors['addComments']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Gets a book from an archive.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceApi = new LibraryServiceApi();
     *     $formattedName = LibraryServiceApi::formatArchivedBookName("[ARCHIVE_PATH]", "[BOOK]");
     *     $response = $libraryServiceApi->getBookFromArchive($formattedName);
     * } finally {
     *     if (isset($libraryServiceApi)) {
     *         $libraryServiceApi->close();
     *     }
     * }
     * ```
     *
     * @param string $name The name of the book to retrieve.
     * @param array $optionalArgs {
     *     Optional.
     *     @type Google\GAX\RetrySettings $retrySettings
     *          Retry settings to use for this call. If present, then
     *          $timeoutMillis is ignored.
     *     @type int $timeoutMillis
     *          Timeout to use for this call. Only used if $retrySettings
     *          is not set.
     * }
     *
     * @return google\example\library\v1\Book
     *
     * @throws Google\GAX\ApiException if the remote call fails
     */
    public function getBookFromArchive($name, $optionalArgs = [])
    {
        $request = new GetBookFromArchiveRequest();
        $request->setName($name);

        $mergedSettings = $this->defaultCallSettings['getBookFromArchive']->merge(
            new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'GetBookFromArchive', $mergedSettings, $this->descriptors['getBookFromArchive']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Updates the index of a book.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceApi = new LibraryServiceApi();
     *     $formattedName = LibraryServiceApi::formatBookName("[SHELF]", "[BOOK]");
     *     $indexName = "default index";
     *     $indexMapItem = "";
     *     $indexMap = ["default_key" => $indexMapItem,];
     *     $libraryServiceApi->updateBookIndex($formattedName, $indexName, $indexMap);
     * } finally {
     *     if (isset($libraryServiceApi)) {
     *         $libraryServiceApi->close();
     *     }
     * }
     * ```
     *
     * @param string $name The name of the book to update.
     * @param string $indexName The name of the index for the book
     * @param array $indexMap The index to update the book with
     * @param array $optionalArgs {
     *     Optional.
     *     @type Google\GAX\RetrySettings $retrySettings
     *          Retry settings to use for this call. If present, then
     *          $timeoutMillis is ignored.
     *     @type int $timeoutMillis
     *          Timeout to use for this call. Only used if $retrySettings
     *          is not set.
     * }
     *
     * @throws Google\GAX\ApiException if the remote call fails
     */
    public function updateBookIndex($name, $indexName, $indexMap, $optionalArgs = [])
    {
        $request = new UpdateBookIndexRequest();
        $request->setName($name);
        $request->setIndexName($indexName);
        foreach ($indexMap as $key => $value) {
            $request->addIndexMap((new IndexMapEntry())->setKey($key)->setValue($value));
        }

        $mergedSettings = $this->defaultCallSettings['updateBookIndex']->merge(
            new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'UpdateBookIndex', $mergedSettings, $this->descriptors['updateBookIndex']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Adds a tag to the book. This RPC is a mixin.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceApi = new LibraryServiceApi();
     *     $formattedResource = LibraryServiceApi::formatBookName("[SHELF]", "[BOOK]");
     *     $tag = "";
     *     $response = $libraryServiceApi->addTag($formattedResource, $tag);
     * } finally {
     *     if (isset($libraryServiceApi)) {
     *         $libraryServiceApi->close();
     *     }
     * }
     * ```
     *
     * @param string $resource REQUIRED: The resource which the tag is being added to.
     * Resource is usually specified as a path, such as,
     * projects/{project}/zones/{zone}/disks/{disk}.
     * @param string $tag REQUIRED: The tag to add.
     * @param array $optionalArgs {
     *     Optional.
     *     @type Google\GAX\RetrySettings $retrySettings
     *          Retry settings to use for this call. If present, then
     *          $timeoutMillis is ignored.
     *     @type int $timeoutMillis
     *          Timeout to use for this call. Only used if $retrySettings
     *          is not set.
     * }
     *
     * @return google\tagger\v1\AddTagResponse
     *
     * @throws Google\GAX\ApiException if the remote call fails
     */
    public function addTag($resource, $tag, $optionalArgs = [])
    {
        $request = new AddTagRequest();
        $request->setResource($resource);
        $request->setTag($tag);

        $mergedSettings = $this->defaultCallSettings['addTag']->merge(
            new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->libraryServiceStub, 'AddTag', $mergedSettings, $this->descriptors['addTag']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Adds a label to the entity.
     *
     * Sample code:
     * ```
     * try {
     *     $libraryServiceApi = new LibraryServiceApi();
     *     $formattedResource = LibraryServiceApi::formatBookName("[SHELF]", "[BOOK]");
     *     $label = "";
     *     $response = $libraryServiceApi->addLabel($formattedResource, $label);
     * } finally {
     *     if (isset($libraryServiceApi)) {
     *         $libraryServiceApi->close();
     *     }
     * }
     * ```
     *
     * @param string $resource REQUIRED: The resource which the label is being added to.
     * Resource is usually specified as a path, such as,
     * projects/{project}/zones/{zone}/disks/{disk}.
     * @param string $label REQUIRED: The label to add.
     * @param array $optionalArgs {
     *     Optional.
     *     @type Google\GAX\RetrySettings $retrySettings
     *          Retry settings to use for this call. If present, then
     *          $timeoutMillis is ignored.
     *     @type int $timeoutMillis
     *          Timeout to use for this call. Only used if $retrySettings
     *          is not set.
     * }
     *
     * @return google\tagger\v1\AddLabelResponse
     *
     * @throws Google\GAX\ApiException if the remote call fails
     */
    public function addLabel($resource, $label, $optionalArgs = [])
    {
        $request = new AddLabelRequest();
        $request->setResource($resource);
        $request->setLabel($label);

        $mergedSettings = $this->defaultCallSettings['addLabel']->merge(
            new CallSettings($optionalArgs));
        $callable = ApiCallable::createApiCall(
            $this->labelerStub, 'AddLabel', $mergedSettings, $this->descriptors['addLabel']);

        return $callable(
            $request,
            [],
            ['call_credentials_callback' => $this->createCredentialsCallback()]);
    }

    /**
     * Initiates an orderly shutdown in which preexisting calls continue but new
     * calls are immediately cancelled.
     */
    public function close()
    {
        $this->libraryServiceStub->close();
        $this->labelerStub->close();
    }

    private function createCredentialsCallback()
    {
        return $this->grpcCredentialsHelper->createCallCredentialsCallback();
    }
}
