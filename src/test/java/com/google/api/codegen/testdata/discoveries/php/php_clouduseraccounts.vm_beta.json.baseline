
<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
 * 2. To install the client library on Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
 */

// composer autoloading
require_once __DIR__ . '/vendor/autoload.php';


// Create a new client
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new CloudUserAccounts service
$service = new Google_Service_CloudUserAccounts($client);

// Project ID for this request.
$project = '';
// Name of the Operations resource to delete.
$operation = '';

$response = $service->globalAccountsOperations->deleteGlobalAccountsOperations($project, $operation);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
 * 2. To install the client library on Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
 */

// composer autoloading
require_once __DIR__ . '/vendor/autoload.php';


// Create a new client
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new CloudUserAccounts service
$service = new Google_Service_CloudUserAccounts($client);

// Project ID for this request.
$project = '';
// Name of the Operations resource to return.
$operation = '';

$response = $service->globalAccountsOperations->getGlobalAccountsOperations($project, $operation);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
 * 2. To install the client library on Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
 */

// composer autoloading
require_once __DIR__ . '/vendor/autoload.php';


// Create a new client
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new CloudUserAccounts service
$service = new Google_Service_CloudUserAccounts($client);

// Project ID for this request.
$project = '';

$response = $service->globalAccountsOperations->listGlobalAccountsOperations($project);

foreach ($response['items'] as $element) {
  // TODO: Add code here to process the elements.
}

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
 * 2. To install the client library on Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
 */

// composer autoloading
require_once __DIR__ . '/vendor/autoload.php';


// Create a new client
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new CloudUserAccounts service
$service = new Google_Service_CloudUserAccounts($client);

// Project ID for this request.
$project = '';
// Name of the group for this request.
$groupName = '';

$response = $service->groups->addMemberGroups($project, $groupName);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
 * 2. To install the client library on Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
 */

// composer autoloading
require_once __DIR__ . '/vendor/autoload.php';


// Create a new client
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new CloudUserAccounts service
$service = new Google_Service_CloudUserAccounts($client);

// Project ID for this request.
$project = '';
// Name of the Group resource to delete.
$groupName = '';

$response = $service->groups->deleteGroups($project, $groupName);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
 * 2. To install the client library on Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
 */

// composer autoloading
require_once __DIR__ . '/vendor/autoload.php';


// Create a new client
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new CloudUserAccounts service
$service = new Google_Service_CloudUserAccounts($client);

// Project ID for this request.
$project = '';
// Name of the Group resource to return.
$groupName = '';

$response = $service->groups->getGroups($project, $groupName);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
 * 2. To install the client library on Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
 */

// composer autoloading
require_once __DIR__ . '/vendor/autoload.php';


// Create a new client
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new CloudUserAccounts service
$service = new Google_Service_CloudUserAccounts($client);

// Project ID for this request.
$project = '';

$response = $service->groups->insertGroups($project);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
 * 2. To install the client library on Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
 */

// composer autoloading
require_once __DIR__ . '/vendor/autoload.php';


// Create a new client
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new CloudUserAccounts service
$service = new Google_Service_CloudUserAccounts($client);

// Project ID for this request.
$project = '';

$response = $service->groups->listGroups($project);

foreach ($response['items'] as $element) {
  // TODO: Add code here to process the elements.
}

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
 * 2. To install the client library on Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
 */

// composer autoloading
require_once __DIR__ . '/vendor/autoload.php';


// Create a new client
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new CloudUserAccounts service
$service = new Google_Service_CloudUserAccounts($client);

// Project ID for this request.
$project = '';
// Name of the group for this request.
$groupName = '';

$response = $service->groups->removeMemberGroups($project, $groupName);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
 * 2. To install the client library on Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
 */

// composer autoloading
require_once __DIR__ . '/vendor/autoload.php';


// Create a new client
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new CloudUserAccounts service
$service = new Google_Service_CloudUserAccounts($client);

// Project ID for this request.
$project = '';
// Name of the zone for this request.
$zone = '';
// The user account for which you want to get a list of authorized public keys.
$user = '';
// The fully-qualified URL of the virtual machine requesting the view.
$instance = '';

$response = $service->linux->getAuthorizedKeysViewLinux($project, $zone, $user, $instance);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
 * 2. To install the client library on Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
 */

// composer autoloading
require_once __DIR__ . '/vendor/autoload.php';


// Create a new client
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new CloudUserAccounts service
$service = new Google_Service_CloudUserAccounts($client);

// Project ID for this request.
$project = '';
// Name of the zone for this request.
$zone = '';
// The fully-qualified URL of the virtual machine requesting the views.
$instance = '';

$response = $service->linux->getLinuxAccountViewsLinux($project, $zone, $instance);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
 * 2. To install the client library on Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
 */

// composer autoloading
require_once __DIR__ . '/vendor/autoload.php';


// Create a new client
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new CloudUserAccounts service
$service = new Google_Service_CloudUserAccounts($client);

// Project ID for this request.
$project = '';
// Name of the user for this request.
$user = '';

$response = $service->users->addPublicKeyUsers($project, $user);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
 * 2. To install the client library on Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
 */

// composer autoloading
require_once __DIR__ . '/vendor/autoload.php';


// Create a new client
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new CloudUserAccounts service
$service = new Google_Service_CloudUserAccounts($client);

// Project ID for this request.
$project = '';
// Name of the user resource to delete.
$user = '';

$response = $service->users->deleteUsers($project, $user);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
 * 2. To install the client library on Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
 */

// composer autoloading
require_once __DIR__ . '/vendor/autoload.php';


// Create a new client
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new CloudUserAccounts service
$service = new Google_Service_CloudUserAccounts($client);

// Project ID for this request.
$project = '';
// Name of the user resource to return.
$user = '';

$response = $service->users->getUsers($project, $user);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
 * 2. To install the client library on Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
 */

// composer autoloading
require_once __DIR__ . '/vendor/autoload.php';


// Create a new client
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new CloudUserAccounts service
$service = new Google_Service_CloudUserAccounts($client);

// Project ID for this request.
$project = '';

$response = $service->users->insertUsers($project);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
 * 2. To install the client library on Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
 */

// composer autoloading
require_once __DIR__ . '/vendor/autoload.php';


// Create a new client
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new CloudUserAccounts service
$service = new Google_Service_CloudUserAccounts($client);

// Project ID for this request.
$project = '';

$response = $service->users->listUsers($project);

foreach ($response['items'] as $element) {
  // TODO: Add code here to process the elements.
}

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
 * 2. To install the client library on Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
 */

// composer autoloading
require_once __DIR__ . '/vendor/autoload.php';


// Create a new client
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new CloudUserAccounts service
$service = new Google_Service_CloudUserAccounts($client);

// Project ID for this request.
$project = '';
// Name of the user for this request.
$user = '';
// The fingerprint of the public key to delete. Public keys are identified by their fingerprint, which is defined by RFC4716 to be the MD5 digest of the public key.
$fingerprint = '';

$response = $service->users->removePublicKeyUsers($project, $user, $fingerprint);

