
<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Container service.
$service = new Google_Service_Container($client);
// The Google Developers Console [project ID or project number]
// (https://developers.google.com/console/help/new/#projectnumber).
$projectId = '';
// The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
// resides.
$zone = '';

$postBody = new Google_Service_Container_CreateClusterRequest($client);

$response = $service->projects_zones_clusters->create($projectId, $zone, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Container service.
$service = new Google_Service_Container($client);
// The Google Developers Console [project ID or project number]
// (https://developers.google.com/console/help/new/#projectnumber).
$projectId = '';
// The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
// resides.
$zone = '';
// The name of the cluster to delete.
$clusterId = '';

$response = $service->projects_zones_clusters->delete($projectId, $zone, $clusterId);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Container service.
$service = new Google_Service_Container($client);
// The Google Developers Console [project ID or project number]
// (https://developers.google.com/console/help/new/#projectnumber).
$projectId = '';
// The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
// resides.
$zone = '';
// The name of the cluster to retrieve.
$clusterId = '';

$response = $service->projects_zones_clusters->get($projectId, $zone, $clusterId);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Container service.
$service = new Google_Service_Container($client);
// The Google Developers Console [project ID or project number]
// (https://developers.google.com/console/help/new/#projectnumber).
$projectId = '';
// The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
// resides, or "-" for all zones.
$zone = '';

$response = $service->projects_zones_clusters->listProjectsZonesClusters($projectId, $zone);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Container service.
$service = new Google_Service_Container($client);
// The Google Developers Console [project ID or project number]
// (https://developers.google.com/console/help/new/#projectnumber).
$projectId = '';
// The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
// resides.
$zone = '';
// The name of the cluster to upgrade.
$clusterId = '';

$postBody = new Google_Service_Container_UpdateClusterRequest($client);

$response = $service->projects_zones_clusters->update($projectId, $zone, $clusterId, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Container service.
$service = new Google_Service_Container($client);
// The Google Developers Console [project ID or project number]
// (https://developers.google.com/console/help/new/#projectnumber).
$projectId = '';
// The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
// for, or "-" for all zones.
$zone = '';

$response = $service->projects_zones->getServerconfig($projectId, $zone);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Container service.
$service = new Google_Service_Container($client);
// The Google Developers Console [project ID or project number]
// (https://developers.google.com/console/help/new/#projectnumber).
$projectId = '';
// The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
// resides.
$zone = '';
// The server-assigned `name` of the operation.
$operationId = '';

$response = $service->projects_zones_operations->get($projectId, $zone, $operationId);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Container Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/container
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Container service.
$service = new Google_Service_Container($client);
// The Google Developers Console [project ID or project number]
// (https://developers.google.com/console/help/new/#projectnumber).
$projectId = '';
// The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
// for, or "-" for all zones.
$zone = '';

$response = $service->projects_zones_operations->listProjectsZonesOperations($projectId, $zone);

