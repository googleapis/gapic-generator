
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Datastore API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/datastore
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('datastore', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `allocateIds` method:

# The ID of the project against which to make the request.
projectId = '{MY-PROJECT-ID}'


allocate_ids_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.projects().allocateIds(projectId=projectId, body=allocate_ids_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Datastore API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/datastore
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('datastore', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `beginTransaction` method:

# The ID of the project against which to make the request.
projectId = '{MY-PROJECT-ID}'


begin_transaction_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.projects().beginTransaction(projectId=projectId, body=begin_transaction_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Datastore API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/datastore
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('datastore', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `commit` method:

# The ID of the project against which to make the request.
projectId = '{MY-PROJECT-ID}'


commit_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.projects().commit(projectId=projectId, body=commit_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Datastore API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/datastore
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('datastore', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `lookup` method:

# The ID of the project against which to make the request.
projectId = '{MY-PROJECT-ID}'


lookup_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.projects().lookup(projectId=projectId, body=lookup_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Datastore API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/datastore
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('datastore', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `rollback` method:

# The ID of the project against which to make the request.
projectId = '{MY-PROJECT-ID}'


rollback_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.projects().rollback(projectId=projectId, body=rollback_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Datastore API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/datastore
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('datastore', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `runQuery` method:

# The ID of the project against which to make the request.
projectId = '{MY-PROJECT-ID}'


run_query_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.projects().runQuery(projectId=projectId, body=run_query_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
