
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Pub/Sub API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/pubsub
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the pubsub service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('pubsub', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'acknowledge' method:

# * The subscription whose message is being acknowledged.
subscription = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}'

acknowledge_request_body = {
# TODO: Add desired entries of the 'acknowledge_request_body' dict
}

request = service.projects().subscriptions().acknowledge(subscription=subscription, body=acknowledge_request_body)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Pub/Sub API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/pubsub
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the pubsub service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('pubsub', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'create' method:

# * The name of the subscription. It must have the format
#   `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must start with a letter,
#   and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`), periods
#   (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters in
#   length, and it must not start with `"goog"`.
name = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}'

subscription_body = {
# TODO: Add desired entries of the 'subscription_body' dict
}

request = service.projects().subscriptions().create(name=name, body=subscription_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Pub/Sub API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/pubsub
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the pubsub service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('pubsub', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * The subscription to delete.
subscription = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}'

request = service.projects().subscriptions().delete(subscription=subscription)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Pub/Sub API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/pubsub
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the pubsub service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('pubsub', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * The name of the subscription to get.
subscription = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}'

request = service.projects().subscriptions().get(subscription=subscription)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Pub/Sub API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/pubsub
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the pubsub service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('pubsub', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'getIamPolicy' method:

# * REQUIRED: The resource for which policy is being requested. `resource` is usually specified as a
#   path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified
#   in this value is resource specific and is specified in the documentation for the respective
#   GetIamPolicy rpc.
resource = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}'

request = service.projects().subscriptions().getIamPolicy(resource=resource)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Pub/Sub API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/pubsub
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the pubsub service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('pubsub', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * The name of the cloud project that subscriptions belong to.
project = 'projects/{MY-PROJECT}'

subscriptions = service.projects().subscriptions()
request = subscriptions.list(project=project)
while request is not None:
    response = request.execute()

    for subscription in response['subscriptions']:
        # TODO: Add code here to process each 'subscription' resource

    request = subscriptions.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Pub/Sub API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/pubsub
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the pubsub service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('pubsub', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'modifyAckDeadline' method:

# * The name of the subscription.
subscription = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}'

modify_ack_deadline_request_body = {
# TODO: Add desired entries of the 'modify_ack_deadline_request_body' dict
}

request = service.projects().subscriptions().modifyAckDeadline(subscription=subscription, body=modify_ack_deadline_request_body)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Pub/Sub API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/pubsub
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the pubsub service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('pubsub', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'modifyPushConfig' method:

# * The name of the subscription.
subscription = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}'

modify_push_config_request_body = {
# TODO: Add desired entries of the 'modify_push_config_request_body' dict
}

request = service.projects().subscriptions().modifyPushConfig(subscription=subscription, body=modify_push_config_request_body)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Pub/Sub API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/pubsub
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the pubsub service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('pubsub', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'pull' method:

# * The subscription from which messages should be pulled.
subscription = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}'

pull_request_body = {
# TODO: Add desired entries of the 'pull_request_body' dict
}

request = service.projects().subscriptions().pull(subscription=subscription, body=pull_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Pub/Sub API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/pubsub
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the pubsub service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('pubsub', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'setIamPolicy' method:

# * REQUIRED: The resource for which policy is being specified. `resource` is usually specified as a
#   path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified
#   in this value is resource specific and is specified in the documentation for the respective
#   SetIamPolicy rpc.
resource = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}'

set_iam_policy_request_body = {
# TODO: Add desired entries of the 'set_iam_policy_request_body' dict
}

request = service.projects().subscriptions().setIamPolicy(resource=resource, body=set_iam_policy_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Pub/Sub API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/pubsub
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the pubsub service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('pubsub', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'testIamPermissions' method:

# * REQUIRED: The resource for which policy detail is being requested. `resource` is usually specified
#   as a path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path
#   specified in this value is resource specific and is specified in the documentation for the
#   respective TestIamPermissions rpc.
resource = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}'

test_iam_permissions_request_body = {
# TODO: Add desired entries of the 'test_iam_permissions_request_body' dict
}

request = service.projects().subscriptions().testIamPermissions(resource=resource, body=test_iam_permissions_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Pub/Sub API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/pubsub
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the pubsub service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('pubsub', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'create' method:

# * The name of the topic. It must have the format `"projects/{project}/topics/{topic}"`. `{topic}`
#   must start with a letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
#   underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be
#   between 3 and 255 characters in length, and it must not start with `"goog"`.
name = 'projects/{MY-PROJECT}/topics/{MY-TOPIC}'

topic_body = {
# TODO: Add desired entries of the 'topic_body' dict
}

request = service.projects().topics().create(name=name, body=topic_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Pub/Sub API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/pubsub
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the pubsub service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('pubsub', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Name of the topic to delete.
topic = 'projects/{MY-PROJECT}/topics/{MY-TOPIC}'

request = service.projects().topics().delete(topic=topic)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Pub/Sub API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/pubsub
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the pubsub service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('pubsub', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * The name of the topic to get.
topic = 'projects/{MY-PROJECT}/topics/{MY-TOPIC}'

request = service.projects().topics().get(topic=topic)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Pub/Sub API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/pubsub
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the pubsub service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('pubsub', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'getIamPolicy' method:

# * REQUIRED: The resource for which policy is being requested. `resource` is usually specified as a
#   path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified
#   in this value is resource specific and is specified in the documentation for the respective
#   GetIamPolicy rpc.
resource = 'projects/{MY-PROJECT}/topics/{MY-TOPIC}'

request = service.projects().topics().getIamPolicy(resource=resource)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Pub/Sub API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/pubsub
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the pubsub service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('pubsub', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * The name of the cloud project that topics belong to.
project = 'projects/{MY-PROJECT}'

topics = service.projects().topics()
request = topics.list(project=project)
while request is not None:
    response = request.execute()

    for topic in response['topics']:
        # TODO: Add code here to process each 'topic' resource

    request = topics.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Pub/Sub API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/pubsub
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the pubsub service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('pubsub', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'publish' method:

# * The messages in the request will be published on this topic.
topic = 'projects/{MY-PROJECT}/topics/{MY-TOPIC}'

publish_request_body = {
# TODO: Add desired entries of the 'publish_request_body' dict
}

request = service.projects().topics().publish(topic=topic, body=publish_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Pub/Sub API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/pubsub
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the pubsub service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('pubsub', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'setIamPolicy' method:

# * REQUIRED: The resource for which policy is being specified. `resource` is usually specified as a
#   path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified
#   in this value is resource specific and is specified in the documentation for the respective
#   SetIamPolicy rpc.
resource = 'projects/{MY-PROJECT}/topics/{MY-TOPIC}'

set_iam_policy_request_body = {
# TODO: Add desired entries of the 'set_iam_policy_request_body' dict
}

request = service.projects().topics().setIamPolicy(resource=resource, body=set_iam_policy_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Pub/Sub API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/pubsub
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the pubsub service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('pubsub', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * The name of the topic that subscriptions are attached to.
topic = 'projects/{MY-PROJECT}/topics/{MY-TOPIC}'

subscriptions = service.projects().topics().subscriptions()
request = subscriptions.list(topic=topic)
while request is not None:
    response = request.execute()

    for item in response['subscriptions']:
        # TODO: Add code here to process each 'item' resource

    request = subscriptions.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Pub/Sub API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/pubsub
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the pubsub service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('pubsub', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'testIamPermissions' method:

# * REQUIRED: The resource for which policy detail is being requested. `resource` is usually specified
#   as a path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path
#   specified in this value is resource specific and is specified in the documentation for the
#   respective TestIamPermissions rpc.
resource = 'projects/{MY-PROJECT}/topics/{MY-TOPIC}'

test_iam_permissions_request_body = {
# TODO: Add desired entries of the 'test_iam_permissions_request_body' dict
}

request = service.projects().topics().testIamPermissions(resource=resource, body=test_iam_permissions_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
