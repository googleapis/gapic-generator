
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var storagetransfer = google.storagetransfer('v1');

authorize(function(authClient) {
  var request = {
    auth: authClient,
  };

  storagetransfer.getGoogleServiceAccount(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var storagetransfer = google.storagetransfer('v1');

authorize(function(authClient) {
  var request = {
    // The ID of the Google Developers Console project that the Google service account is associated with.
    // Required.
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  storagetransfer.googleServiceAccounts.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var storagetransfer = google.storagetransfer('v1');

authorize(function(authClient) {
  var request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  storagetransfer.transferJobs.create(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var storagetransfer = google.storagetransfer('v1');

authorize(function(authClient) {
  var request = {
    // The job to get. Required.
    jobName: 'transferJobs/my-transfer-job',  // TODO: Update placeholder value.

    auth: authClient,
  };

  storagetransfer.transferJobs.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var storagetransfer = google.storagetransfer('v1');

authorize(function(authClient) {
  var request = {
    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var transferJobsPage = response['transferJobs'];
    if (!transferJobsPage) {
      return;
    }
    for (var i = 0; i < transferJobsPage.length; i++) {
      // TODO: Change code below to process each resource in `transferJobsPage`:
      console.log(JSON.stringify(transferJobsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      storagetransfer.transferJobs.list(request, handlePage);
    }
  };

  storagetransfer.transferJobs.list(request, handlePage);
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var storagetransfer = google.storagetransfer('v1');

authorize(function(authClient) {
  var request = {
    // The name of job to update. Required.
    jobName: 'transferJobs/my-transfer-job',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  storagetransfer.transferJobs.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var storagetransfer = google.storagetransfer('v1');

authorize(function(authClient) {
  var request = {
    // The name of the operation resource to be cancelled.
    name: 'transferOperations/my-transfer-operation',  // TODO: Update placeholder value.

    auth: authClient,
  };

  storagetransfer.transferOperations.cancel(request, function(err) {
    if (err) {
      console.error(err);
      return;
    }
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var storagetransfer = google.storagetransfer('v1');

authorize(function(authClient) {
  var request = {
    // The name of the operation resource to be deleted.
    name: 'transferOperations/my-transfer-operation',  // TODO: Update placeholder value.

    auth: authClient,
  };

  storagetransfer.transferOperations.delete(request, function(err) {
    if (err) {
      console.error(err);
      return;
    }
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var storagetransfer = google.storagetransfer('v1');

authorize(function(authClient) {
  var request = {
    // The name of the operation resource.
    name: 'transferOperations/my-transfer-operation',  // TODO: Update placeholder value.

    auth: authClient,
  };

  storagetransfer.transferOperations.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var storagetransfer = google.storagetransfer('v1');

authorize(function(authClient) {
  var request = {
    // The value `transferOperations`.
    name: 'my-name',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var operationsPage = response['operations'];
    if (!operationsPage) {
      return;
    }
    for (var i = 0; i < operationsPage.length; i++) {
      // TODO: Change code below to process each resource in `operationsPage`:
      console.log(JSON.stringify(operationsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      storagetransfer.transferOperations.list(request, handlePage);
    }
  };

  storagetransfer.transferOperations.list(request, handlePage);
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var storagetransfer = google.storagetransfer('v1');

authorize(function(authClient) {
  var request = {
    // The name of the transfer operation. Required.
    name: 'transferOperations/my-transfer-operation',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  storagetransfer.transferOperations.pause(request, function(err) {
    if (err) {
      console.error(err);
      return;
    }
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var storagetransfer = google.storagetransfer('v1');

authorize(function(authClient) {
  var request = {
    // The name of the transfer operation. Required.
    name: 'transferOperations/my-transfer-operation',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  storagetransfer.transferOperations.resume(request, function(err) {
    if (err) {
      console.error(err);
      return;
    }
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
