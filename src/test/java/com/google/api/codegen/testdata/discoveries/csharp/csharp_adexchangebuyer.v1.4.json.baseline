
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The account id
            int id = 0;  // TODO: Update placeholder value.

            AccountsResource.GetRequest request = adExchangeBuyerService.Accounts.Get(id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Account response = request.Execute();
            // Data.Account response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            AccountsResource.ListRequest request = adExchangeBuyerService.Accounts.List();

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.AccountsList response = request.Execute();
            // Data.AccountsList response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The account id
            int id = 0;  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. Only assigned
            // properties will be changed:
            Data.Account requestBody = new Data.Account();

            AccountsResource.PatchRequest request = adExchangeBuyerService.Accounts.Patch(requestBody, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Account response = request.Execute();
            // Data.Account response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The account id
            int id = 0;  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. All existing
            // properties will be replaced:
            Data.Account requestBody = new Data.Account();

            AccountsResource.UpdateRequest request = adExchangeBuyerService.Accounts.Update(requestBody, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Account response = request.Execute();
            // Data.Account response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The account id.
            int accountId = 0;  // TODO: Update placeholder value.

            BillingInfoResource.GetRequest request = adExchangeBuyerService.BillingInfo.Get(accountId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.BillingInfo response = request.Execute();
            // Data.BillingInfo response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            BillingInfoResource.ListRequest request = adExchangeBuyerService.BillingInfo.List();

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.BillingInfoList response = request.Execute();
            // Data.BillingInfoList response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The account id to get the budget information for.
            long accountId = 0L;  // TODO: Update placeholder value.

            // The billing id to get the budget information for.
            long billingId = 0L;  // TODO: Update placeholder value.

            BudgetResource.GetRequest request = adExchangeBuyerService.Budget.Get(accountId, billingId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Budget response = request.Execute();
            // Data.Budget response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The account id associated with the budget being updated.
            long accountId = 0L;  // TODO: Update placeholder value.

            // The billing id associated with the budget being updated.
            long billingId = 0L;  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. Only assigned
            // properties will be changed:
            Data.Budget requestBody = new Data.Budget();

            BudgetResource.PatchRequest request = adExchangeBuyerService.Budget.Patch(requestBody, accountId, billingId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Budget response = request.Execute();
            // Data.Budget response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The account id associated with the budget being updated.
            long accountId = 0L;  // TODO: Update placeholder value.

            // The billing id associated with the budget being updated.
            long billingId = 0L;  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. All existing
            // properties will be replaced:
            Data.Budget requestBody = new Data.Budget();

            BudgetResource.UpdateRequest request = adExchangeBuyerService.Budget.Update(requestBody, accountId, billingId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Budget response = request.Execute();
            // Data.Budget response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The id for the account that will serve this creative.
            int accountId = 0;  // TODO: Update placeholder value.

            // The buyer-specific id for this creative.
            string buyerCreativeId = "";  // TODO: Update placeholder value.

            // The id of the deal id to associate with this creative.
            long dealId = 0L;  // TODO: Update placeholder value.

            CreativesResource.AddDealRequest request = adExchangeBuyerService.Creatives.AddDeal(accountId, buyerCreativeId, dealId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The id for the account that will serve this creative.
            int accountId = 0;  // TODO: Update placeholder value.

            // The buyer-specific id for this creative.
            string buyerCreativeId = "";  // TODO: Update placeholder value.

            CreativesResource.GetRequest request = adExchangeBuyerService.Creatives.Get(accountId, buyerCreativeId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Creative response = request.Execute();
            // Data.Creative response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // TODO: Assign values to desired properties of `requestBody`:
            Data.Creative requestBody = new Data.Creative();

            CreativesResource.InsertRequest request = adExchangeBuyerService.Creatives.Insert(requestBody);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Creative response = request.Execute();
            // Data.Creative response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            CreativesResource.ListRequest request = adExchangeBuyerService.Creatives.List();

            Data.CreativesList response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Creative creative in response.Items)
                {
                    // TODO: Change code below to process each `creative` resource:
                    Console.WriteLine(JsonConvert.SerializeObject(creative));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The id for the account that will serve this creative.
            int accountId = 0;  // TODO: Update placeholder value.

            // The buyer-specific id for this creative.
            string buyerCreativeId = "";  // TODO: Update placeholder value.

            CreativesResource.ListDealsRequest request = adExchangeBuyerService.Creatives.ListDeals(accountId, buyerCreativeId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.CreativeDealIds response = request.Execute();
            // Data.CreativeDealIds response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The id for the account that will serve this creative.
            int accountId = 0;  // TODO: Update placeholder value.

            // The buyer-specific id for this creative.
            string buyerCreativeId = "";  // TODO: Update placeholder value.

            // The id of the deal id to disassociate with this creative.
            long dealId = 0L;  // TODO: Update placeholder value.

            CreativesResource.RemoveDealRequest request = adExchangeBuyerService.Creatives.RemoveDeal(accountId, buyerCreativeId, dealId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The proposalId to delete deals from.
            string proposalId = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.DeleteOrderDealsRequest requestBody = new Data.DeleteOrderDealsRequest();

            MarketplacedealsResource.DeleteRequest request = adExchangeBuyerService.Marketplacedeals.Delete(requestBody, proposalId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.DeleteOrderDealsResponse response = request.Execute();
            // Data.DeleteOrderDealsResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // proposalId for which deals need to be added.
            string proposalId = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.AddOrderDealsRequest requestBody = new Data.AddOrderDealsRequest();

            MarketplacedealsResource.InsertRequest request = adExchangeBuyerService.Marketplacedeals.Insert(requestBody, proposalId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.AddOrderDealsResponse response = request.Execute();
            // Data.AddOrderDealsResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The proposalId to get deals for. To search across all proposals specify order_id = '-' as part of
            // the URL.
            string proposalId = "";  // TODO: Update placeholder value.

            MarketplacedealsResource.ListRequest request = adExchangeBuyerService.Marketplacedeals.List(proposalId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.GetOrderDealsResponse response = request.Execute();
            // Data.GetOrderDealsResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The proposalId to edit deals on.
            string proposalId = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.EditAllOrderDealsRequest requestBody = new Data.EditAllOrderDealsRequest();

            MarketplacedealsResource.UpdateRequest request = adExchangeBuyerService.Marketplacedeals.Update(requestBody, proposalId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.EditAllOrderDealsResponse response = request.Execute();
            // Data.EditAllOrderDealsResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The proposalId to add notes for.
            string proposalId = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.AddOrderNotesRequest requestBody = new Data.AddOrderNotesRequest();

            MarketplacenotesResource.InsertRequest request = adExchangeBuyerService.Marketplacenotes.Insert(requestBody, proposalId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.AddOrderNotesResponse response = request.Execute();
            // Data.AddOrderNotesResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The proposalId to get notes for. To search across all proposals specify order_id = '-' as part of
            // the URL.
            string proposalId = "";  // TODO: Update placeholder value.

            MarketplacenotesResource.ListRequest request = adExchangeBuyerService.Marketplacenotes.List(proposalId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.GetOrderNotesResponse response = request.Execute();
            // Data.GetOrderNotesResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The private auction id to be updated.
            string privateAuctionId = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.UpdatePrivateAuctionProposalRequest requestBody = new Data.UpdatePrivateAuctionProposalRequest();

            MarketplaceprivateauctionResource.UpdateproposalRequest request = adExchangeBuyerService.Marketplaceprivateauction.Updateproposal(requestBody, privateAuctionId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The account id to get the reports.
            long accountId = 0L;  // TODO: Update placeholder value.

            // The end time of the report in ISO 8601 timestamp format using UTC.
            string endDateTime = "";  // TODO: Update placeholder value.

            // The start time of the report in ISO 8601 timestamp format using UTC.
            string startDateTime = "";  // TODO: Update placeholder value.

            PerformanceReportResource.ListRequest request = adExchangeBuyerService.PerformanceReport.List(accountId, endDateTime, startDateTime);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.PerformanceReportList response = request.Execute();
            // Data.PerformanceReportList response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The account id to delete the pretargeting config for.
            long accountId = 0L;  // TODO: Update placeholder value.

            // The specific id of the configuration to delete.
            long configId = 0L;  // TODO: Update placeholder value.

            PretargetingConfigResource.DeleteRequest request = adExchangeBuyerService.PretargetingConfig.Delete(accountId, configId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The account id to get the pretargeting config for.
            long accountId = 0L;  // TODO: Update placeholder value.

            // The specific id of the configuration to retrieve.
            long configId = 0L;  // TODO: Update placeholder value.

            PretargetingConfigResource.GetRequest request = adExchangeBuyerService.PretargetingConfig.Get(accountId, configId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.PretargetingConfig response = request.Execute();
            // Data.PretargetingConfig response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The account id to insert the pretargeting config for.
            long accountId = 0L;  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.PretargetingConfig requestBody = new Data.PretargetingConfig();

            PretargetingConfigResource.InsertRequest request = adExchangeBuyerService.PretargetingConfig.Insert(requestBody, accountId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.PretargetingConfig response = request.Execute();
            // Data.PretargetingConfig response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The account id to get the pretargeting configs for.
            long accountId = 0L;  // TODO: Update placeholder value.

            PretargetingConfigResource.ListRequest request = adExchangeBuyerService.PretargetingConfig.List(accountId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.PretargetingConfigList response = request.Execute();
            // Data.PretargetingConfigList response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The account id to update the pretargeting config for.
            long accountId = 0L;  // TODO: Update placeholder value.

            // The specific id of the configuration to update.
            long configId = 0L;  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. Only assigned
            // properties will be changed:
            Data.PretargetingConfig requestBody = new Data.PretargetingConfig();

            PretargetingConfigResource.PatchRequest request = adExchangeBuyerService.PretargetingConfig.Patch(requestBody, accountId, configId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.PretargetingConfig response = request.Execute();
            // Data.PretargetingConfig response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The account id to update the pretargeting config for.
            long accountId = 0L;  // TODO: Update placeholder value.

            // The specific id of the configuration to update.
            long configId = 0L;  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. All existing
            // properties will be replaced:
            Data.PretargetingConfig requestBody = new Data.PretargetingConfig();

            PretargetingConfigResource.UpdateRequest request = adExchangeBuyerService.PretargetingConfig.Update(requestBody, accountId, configId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.PretargetingConfig response = request.Execute();
            // Data.PretargetingConfig response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The id for the product to get the head revision for.
            string productId = "";  // TODO: Update placeholder value.

            ProductsResource.GetRequest request = adExchangeBuyerService.Products.Get(productId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Product response = request.Execute();
            // Data.Product response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            ProductsResource.SearchRequest request = adExchangeBuyerService.Products.Search();

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.GetOffersResponse response = request.Execute();
            // Data.GetOffersResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // Id of the proposal to retrieve.
            string proposalId = "";  // TODO: Update placeholder value.

            ProposalsResource.GetRequest request = adExchangeBuyerService.Proposals.Get(proposalId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Proposal response = request.Execute();
            // Data.Proposal response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // TODO: Assign values to desired properties of `requestBody`:
            Data.CreateOrdersRequest requestBody = new Data.CreateOrdersRequest();

            ProposalsResource.InsertRequest request = adExchangeBuyerService.Proposals.Insert(requestBody);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.CreateOrdersResponse response = request.Execute();
            // Data.CreateOrdersResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The proposal id to update.
            string proposalId = "";  // TODO: Update placeholder value.

            // The last known revision number to update. If the head revision in the marketplace database has
            // since changed, an error will be thrown. The caller should then fetch the latest proposal at head
            // revision and retry the update at that revision.
            long revisionNumber = 0L;  // TODO: Update placeholder value.

            // The proposed action to take on the proposal. This field is required and it must be set when
            // updating a proposal.
            ProposalsResource.PatchRequest.UpdateActionEnum updateAction = (ProposalsResource.PatchRequest.UpdateActionEnum) 0;  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. Only assigned
            // properties will be changed:
            Data.Proposal requestBody = new Data.Proposal();

            ProposalsResource.PatchRequest request = adExchangeBuyerService.Proposals.Patch(requestBody, proposalId, revisionNumber, updateAction);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Proposal response = request.Execute();
            // Data.Proposal response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            ProposalsResource.SearchRequest request = adExchangeBuyerService.Proposals.Search();

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.GetOrdersResponse response = request.Execute();
            // Data.GetOrdersResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The proposal id for which the setup is complete
            string proposalId = "";  // TODO: Update placeholder value.

            ProposalsResource.SetupcompleteRequest request = adExchangeBuyerService.Proposals.Setupcomplete(proposalId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The proposal id to update.
            string proposalId = "";  // TODO: Update placeholder value.

            // The last known revision number to update. If the head revision in the marketplace database has
            // since changed, an error will be thrown. The caller should then fetch the latest proposal at head
            // revision and retry the update at that revision.
            long revisionNumber = 0L;  // TODO: Update placeholder value.

            // The proposed action to take on the proposal. This field is required and it must be set when
            // updating a proposal.
            ProposalsResource.UpdateRequest.UpdateActionEnum updateAction = (ProposalsResource.UpdateRequest.UpdateActionEnum) 0;  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. All existing
            // properties will be replaced:
            Data.Proposal requestBody = new Data.Proposal();

            ProposalsResource.UpdateRequest request = adExchangeBuyerService.Proposals.Update(requestBody, proposalId, revisionNumber, updateAction);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Proposal response = request.Execute();
            // Data.Proposal response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.AdExchangeBuyer.v1_4;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;

using Data = Google.Apis.AdExchangeBuyer.v1_4.Data;

namespace AdExchangeBuyerSample
{
    public class AdExchangeBuyerExample
    {
        public static void Main(string[] args)
        {
            AdExchangeBuyerService adExchangeBuyerService = new AdExchangeBuyerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AdExchangeBuyerSample/0.1",
            });

            // The accountId of the publisher to get profiles for.
            int accountId = 0;  // TODO: Update placeholder value.

            PubprofilesResource.ListRequest request = adExchangeBuyerService.Pubprofiles.List(accountId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.GetPublisherProfilesByAccountIdResponse response = request.Execute();
            // Data.GetPublisherProfilesByAccountIdResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static UserCredential GetCredential()
        {
            // TODO: Change placeholder below to generate authentication credentials. See:
            // https://foo.com/bar
            //
            // Authorize using the following scope:
            //     "https://www.googleapis.com/auth/adexchange.buyer"
            return null;
        }
    }
}
