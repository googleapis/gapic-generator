
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Compute Engine Instance Group Updater API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/replicapoolupdater
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/replicapoolupdater_v1beta1'
require 'json'

service = Google::Apis::ReplicapoolupdaterV1beta1::ReplicapoolupdaterService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The Google Developers Console project name.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# The name of the zone in which the update's target resides.
zone = '{MY-ZONE}'  # TODO: Update placeholder value(s).

# The name of the update.
rolling_update = '{MY-ROLLING-UPDATE}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.cancel_rolling_update(project, zone, rolling_update)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Compute Engine Instance Group Updater API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/replicapoolupdater
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/replicapoolupdater_v1beta1'
require 'json'

service = Google::Apis::ReplicapoolupdaterV1beta1::ReplicapoolupdaterService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The Google Developers Console project name.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# The name of the zone in which the update's target resides.
zone = '{MY-ZONE}'  # TODO: Update placeholder value(s).

# The name of the update.
rolling_update = '{MY-ROLLING-UPDATE}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.get_rolling_update(project, zone, rolling_update)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Compute Engine Instance Group Updater API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/replicapoolupdater
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/replicapoolupdater_v1beta1'
require 'json'

service = Google::Apis::ReplicapoolupdaterV1beta1::ReplicapoolupdaterService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The Google Developers Console project name.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# The name of the zone in which the update's target resides.
zone = '{MY-ZONE}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
rolling_update_body = Google::Apis::ReplicapoolupdaterV1beta1::RollingUpdate.new

# Perform the call
response = service.insert_rolling_update(project, zone, rolling_update_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Compute Engine Instance Group Updater API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/replicapoolupdater
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/replicapoolupdater_v1beta1'
require 'json'

service = Google::Apis::ReplicapoolupdaterV1beta1::ReplicapoolupdaterService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The Google Developers Console project name.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# The name of the zone in which the update's target resides.
zone = '{MY-ZONE}'  # TODO: Update placeholder value(s).

# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_rolling_updates(project, zone, page_token: token)
end

items.each do |rolling_update|
  # TODO: Use rolling_update
  puts JSON.pretty_generate(rolling_update)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Compute Engine Instance Group Updater API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/replicapoolupdater
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/replicapoolupdater_v1beta1'
require 'json'

service = Google::Apis::ReplicapoolupdaterV1beta1::ReplicapoolupdaterService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The Google Developers Console project name.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# The name of the zone in which the update's target resides.
zone = '{MY-ZONE}'  # TODO: Update placeholder value(s).

# The name of the update.
rolling_update = '{MY-ROLLING-UPDATE}'  # TODO: Update placeholder value(s).

# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_instance_updates(project, zone, rolling_update, page_token: token)
end

items.each do |instance_update|
  # TODO: Use instance_update
  puts JSON.pretty_generate(instance_update)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Compute Engine Instance Group Updater API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/replicapoolupdater
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/replicapoolupdater_v1beta1'
require 'json'

service = Google::Apis::ReplicapoolupdaterV1beta1::ReplicapoolupdaterService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The Google Developers Console project name.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# The name of the zone in which the update's target resides.
zone = '{MY-ZONE}'  # TODO: Update placeholder value(s).

# The name of the update.
rolling_update = '{MY-ROLLING-UPDATE}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.pause_rolling_update(project, zone, rolling_update)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Compute Engine Instance Group Updater API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/replicapoolupdater
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/replicapoolupdater_v1beta1'
require 'json'

service = Google::Apis::ReplicapoolupdaterV1beta1::ReplicapoolupdaterService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The Google Developers Console project name.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# The name of the zone in which the update's target resides.
zone = '{MY-ZONE}'  # TODO: Update placeholder value(s).

# The name of the update.
rolling_update = '{MY-ROLLING-UPDATE}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.resume_rolling_update(project, zone, rolling_update)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Compute Engine Instance Group Updater API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/replicapoolupdater
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/replicapoolupdater_v1beta1'
require 'json'

service = Google::Apis::ReplicapoolupdaterV1beta1::ReplicapoolupdaterService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The Google Developers Console project name.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# The name of the zone in which the update's target resides.
zone = '{MY-ZONE}'  # TODO: Update placeholder value(s).

# The name of the update.
rolling_update = '{MY-ROLLING-UPDATE}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.rollback_rolling_update(project, zone, rolling_update)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Compute Engine Instance Group Updater API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/replicapoolupdater
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/replicapoolupdater_v1beta1'
require 'json'

service = Google::Apis::ReplicapoolupdaterV1beta1::ReplicapoolupdaterService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Name of the project scoping this request.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Name of the zone scoping this request.
zone = '{MY-ZONE}'  # TODO: Update placeholder value(s).

# Name of the operation resource to return.
operation = '{MY-OPERATION}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.get_zone_operation(project, zone, operation)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Compute Engine Instance Group Updater API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/replicapoolupdater
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/replicapoolupdater_v1beta1'
require 'json'

service = Google::Apis::ReplicapoolupdaterV1beta1::ReplicapoolupdaterService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Name of the project scoping this request.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Name of the zone scoping this request.
zone = '{MY-ZONE}'  # TODO: Update placeholder value(s).

# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_zone_operations(project, zone, page_token: token)
end

items.each do |operation|
  # TODO: Use operation
  puts JSON.pretty_generate(operation)
end
