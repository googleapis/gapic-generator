
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Compute Engine Instance Group Updater API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/replicapoolupdater
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/replicapoolupdater_v1beta1'

service = Google::Apis::ReplicapoolupdaterV1beta1::ReplicapoolupdaterService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'cancel_rolling_update' method:
# The Google Developers Console project name.
project = ''

# The name of the zone in which the update's target resides.
zone = ''

# The name of the update.
rolling_update = ''


# Perform the call
response = service.cancel_rolling_update(project, zone, rolling_update)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Compute Engine Instance Group Updater API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/replicapoolupdater
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/replicapoolupdater_v1beta1'

service = Google::Apis::ReplicapoolupdaterV1beta1::ReplicapoolupdaterService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_rolling_update' method:
# The Google Developers Console project name.
project = ''

# The name of the zone in which the update's target resides.
zone = ''

# The name of the update.
rolling_update = ''


# Perform the call
response = service.get_rolling_update(project, zone, rolling_update)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Compute Engine Instance Group Updater API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/replicapoolupdater
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/replicapoolupdater_v1beta1'

service = Google::Apis::ReplicapoolupdaterV1beta1::ReplicapoolupdaterService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_rolling_update' method:
# The Google Developers Console project name.
project = ''

# The name of the zone in which the update's target resides.
zone = ''
rolling_update_object = Google::Apis::ReplicapoolupdaterV1beta1::RollingUpdate.new


# Perform the call
response = service.insert_rolling_update(project, zone, rolling_update_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Compute Engine Instance Group Updater API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/replicapoolupdater
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/replicapoolupdater_v1beta1'

service = Google::Apis::ReplicapoolupdaterV1beta1::ReplicapoolupdaterService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_rolling_updates' method:
# The Google Developers Console project name.
project = ''

# The name of the zone in which the update's target resides.
zone = ''


# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_rolling_updates(project, zone, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Compute Engine Instance Group Updater API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/replicapoolupdater
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/replicapoolupdater_v1beta1'

service = Google::Apis::ReplicapoolupdaterV1beta1::ReplicapoolupdaterService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_instance_updates' method:
# The Google Developers Console project name.
project = ''

# The name of the zone in which the update's target resides.
zone = ''

# The name of the update.
rolling_update = ''


# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_instance_updates(project, zone, rolling_update, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Compute Engine Instance Group Updater API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/replicapoolupdater
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/replicapoolupdater_v1beta1'

service = Google::Apis::ReplicapoolupdaterV1beta1::ReplicapoolupdaterService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'pause_rolling_update' method:
# The Google Developers Console project name.
project = ''

# The name of the zone in which the update's target resides.
zone = ''

# The name of the update.
rolling_update = ''


# Perform the call
response = service.pause_rolling_update(project, zone, rolling_update)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Compute Engine Instance Group Updater API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/replicapoolupdater
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/replicapoolupdater_v1beta1'

service = Google::Apis::ReplicapoolupdaterV1beta1::ReplicapoolupdaterService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'resume_rolling_update' method:
# The Google Developers Console project name.
project = ''

# The name of the zone in which the update's target resides.
zone = ''

# The name of the update.
rolling_update = ''


# Perform the call
response = service.resume_rolling_update(project, zone, rolling_update)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Compute Engine Instance Group Updater API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/replicapoolupdater
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/replicapoolupdater_v1beta1'

service = Google::Apis::ReplicapoolupdaterV1beta1::ReplicapoolupdaterService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'rollback_rolling_update' method:
# The Google Developers Console project name.
project = ''

# The name of the zone in which the update's target resides.
zone = ''

# The name of the update.
rolling_update = ''


# Perform the call
response = service.rollback_rolling_update(project, zone, rolling_update)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Compute Engine Instance Group Updater API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/replicapoolupdater
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/replicapoolupdater_v1beta1'

service = Google::Apis::ReplicapoolupdaterV1beta1::ReplicapoolupdaterService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_zone_operation' method:
# Name of the project scoping this request.
project = ''

# Name of the zone scoping this request.
zone = ''

# Name of the operation resource to return.
operation = ''


# Perform the call
response = service.get_zone_operation(project, zone, operation)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Compute Engine Instance Group Updater API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/replicapoolupdater
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/replicapoolupdater_v1beta1'

service = Google::Apis::ReplicapoolupdaterV1beta1::ReplicapoolupdaterService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_zone_operations' method:
# Name of the project scoping this request.
project = ''

# Name of the zone scoping this request.
zone = ''


# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_zone_operations(project, zone, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
