============== file: tests/unit/Example/Library/V1/LibraryServiceClientTest.php ==============
<?php
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * GENERATED CODE WARNING
 * This file was automatically generated - do not edit!
 */

namespace Google\Tests\Example\Library\V1;

use Google\Example\Library\V1\LibraryServiceClient;
use Google\GAX\GrpcCredentialsHelper;
use Google\GAX\LongRunning\OperationsClient;
use Google\GAX\Testing\LongRunning\MockOperationsImpl;
use Google\GAX\Testing\MockStubTrait;
use Google\Protobuf\GPBEmpty;
use PHPUnit_Framework_TestCase;
use Google\Example\Library\V1\AddCommentsRequest;
use Google\Example\Library\V1\Book;
use Google\Example\Library\V1\BookFromAnywhere;
use Google\Example\Library\V1\BookFromArchive;
use Google\Example\Library\V1\Comment;
use Google\Example\Library\V1\Comment_Stage as Stage;
use Google\Example\Library\V1\CreateBookRequest;
use Google\Example\Library\V1\CreateShelfRequest;
use Google\Example\Library\V1\DeleteBookRequest;
use Google\Example\Library\V1\DeleteShelfRequest;
use Google\Example\Library\V1\FindRelatedBooksRequest;
use Google\Example\Library\V1\FindRelatedBooksResponse;
use Google\Example\Library\V1\GetBookFromAnywhereRequest;
use Google\Example\Library\V1\GetBookFromArchiveRequest;
use Google\Example\Library\V1\GetBookRequest;
use Google\Example\Library\V1\GetShelfRequest;
use Google\Example\Library\V1\LibraryServiceGrpcClient;
use Google\Example\Library\V1\ListBooksRequest;
use Google\Example\Library\V1\ListBooksResponse;
use Google\Example\Library\V1\ListShelvesRequest;
use Google\Example\Library\V1\ListShelvesResponse;
use Google\Example\Library\V1\ListStringsRequest;
use Google\Example\Library\V1\ListStringsResponse;
use Google\Example\Library\V1\MergeShelvesRequest;
use Google\Example\Library\V1\MoveBookRequest;
use Google\Example\Library\V1\PublishSeriesRequest;
use Google\Example\Library\V1\PublishSeriesResponse;
use Google\Example\Library\V1\SeriesUuid;
use Google\Example\Library\V1\Shelf;
use Google\Example\Library\V1\SomeMessage2_SomeMessage3_Alignment as Alignment;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest_InnerEnum as InnerEnum;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsRequest_InnerMessage as InnerMessage;
use Google\Example\Library\V1\TestOptionalRequiredFlatteningParamsResponse;
use Google\Example\Library\V1\UpdateBookIndexRequest;
use Google\Example\Library\V1\UpdateBookRequest;
use Google\Longrunning\GetOperationRequest;
use Google\Longrunning\Operation;
use Google\Protobuf\Any;
use Google\Tagger\V1\AddLabelRequest;
use Google\Tagger\V1\AddLabelResponse;
use Google\Tagger\V1\AddTagRequest;
use Google\Tagger\V1\AddTagResponse;
use Google\Tagger\V1\LabelerGrpcClient;

/**
 * @group library
 * @group grpc
 */
class LibraryServiceClientTest extends PHPUnit_Framework_TestCase
{
    public function createMockLibraryServiceImpl($hostname, $opts)
    {
        return new MockLibraryServiceImpl($hostname, $opts);
    }

    public function createMockLabelerImpl($hostname, $opts)
    {
        return new MockLabelerImpl($hostname, $opts);
    }

    public function createMockOperationsStub($hostname, $opts)
    {
        return new MockOperationsImpl($hostname, $opts);
    }

    private function createStub($createGrpcStub)
    {
        $grpcCredentialsHelper = new GrpcCredentialsHelper([]);
        return $grpcCredentialsHelper->createStub(
            $createGrpcStub,
            LibraryServiceClient::SERVICE_ADDRESS,
            LibraryServiceClient::DEFAULT_SERVICE_PORT
        );
    }

    /**
     * @return LibraryServiceClient
     */
    private function createClient($createStubFuncName, $grpcStub, $options = [])
    {
        return new LibraryServiceClient($options + [
            $createStubFuncName => function ($hostname, $opts) use ($grpcStub) {
                return $grpcStub;
            },
        ]);
    }
    /**
     * @test
     */
    public function createShelfTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $name = "name3373707";
        $theme = "theme110327241";
        $internalTheme = "internalTheme792518087";
        $expectedResponse = new Shelf();
        $expectedResponse->setName($name);
        $expectedResponse->setTheme($theme);
        $expectedResponse->setInternalTheme($internalTheme);
        // Serialize/deserialize so that arrays are converted to repeated objects
        $expectedResponseSerialized = $expectedResponse->serializeToString();
        $expectedResponseClass = get_class($expectedResponse);
        $expectedResponse = new $expectedResponseClass();
        $expectedResponse->mergeFromString($expectedResponseSerialized);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $shelf = new Shelf();

        $response = $client->createShelf($shelf);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->getReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/CreateShelf', $actualFuncCall);

        $shelfActual = $actualRequestObject->getShelf();
        $this->assertEquals($shelf, $shelfActual);

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function getShelfTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $name2 = "name2-1052831874";
        $theme = "theme110327241";
        $internalTheme = "internalTheme792518087";
        $expectedResponse = new Shelf();
        $expectedResponse->setName($name2);
        $expectedResponse->setTheme($theme);
        $expectedResponse->setInternalTheme($internalTheme);
        // Serialize/deserialize so that arrays are converted to repeated objects
        $expectedResponseSerialized = $expectedResponse->serializeToString();
        $expectedResponseClass = get_class($expectedResponse);
        $expectedResponse = new $expectedResponseClass();
        $expectedResponse->mergeFromString($expectedResponseSerialized);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedName = LibraryServiceClient::formatShelfName("[SHELF_ID]");
        $options = "options-1249474914";

        $response = $client->getShelf($formattedName, $options);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->getReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/GetShelf', $actualFuncCall);

        $formattedNameActual = $actualRequestObject->getName();
        $this->assertEquals($formattedName, $formattedNameActual);
        $optionsActual = $actualRequestObject->getOptions();
        $this->assertEquals($options, $optionsActual);

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function listShelvesTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $nextPageToken = "";
        $shelvesElement = new Shelf();
        $shelves = [$shelvesElement];
        $expectedResponse = new ListShelvesResponse();
        $expectedResponse->setNextPageToken($nextPageToken);
        $expectedResponse->setShelves($shelves);
        // Serialize/deserialize so that arrays are converted to repeated objects
        $expectedResponseSerialized = $expectedResponse->serializeToString();
        $expectedResponseClass = get_class($expectedResponse);
        $expectedResponse = new $expectedResponseClass();
        $expectedResponse->mergeFromString($expectedResponseSerialized);
        $grpcStub->addResponse($expectedResponse);

        $response = $client->listShelves();
        $this->assertEquals($expectedResponse, $response->getPage()->getResponseObject());
        $resources = iterator_to_array($response->iterateAllElements());
        $this->assertSame(1, count($resources));
        $this->assertEquals($expectedResponse->getShelves()[0], $resources[0]);

        $actualRequests = $grpcStub->getReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/ListShelves', $actualFuncCall);

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function deleteShelfTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Add empty response to the grpc stub
        $grpcStub->addResponse(new GPBEmpty());
        // Mock request
        $formattedName = LibraryServiceClient::formatShelfName("[SHELF_ID]");

        $client->deleteShelf($formattedName);
        $actualRequests = $grpcStub->getReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/DeleteShelf', $actualFuncCall);

        $formattedNameActual = $actualRequestObject->getName();
        $this->assertEquals($formattedName, $formattedNameActual);

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function mergeShelvesTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $name2 = "name2-1052831874";
        $theme = "theme110327241";
        $internalTheme = "internalTheme792518087";
        $expectedResponse = new Shelf();
        $expectedResponse->setName($name2);
        $expectedResponse->setTheme($theme);
        $expectedResponse->setInternalTheme($internalTheme);
        // Serialize/deserialize so that arrays are converted to repeated objects
        $expectedResponseSerialized = $expectedResponse->serializeToString();
        $expectedResponseClass = get_class($expectedResponse);
        $expectedResponse = new $expectedResponseClass();
        $expectedResponse->mergeFromString($expectedResponseSerialized);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedName = LibraryServiceClient::formatShelfName("[SHELF_ID]");
        $formattedOtherShelfName = LibraryServiceClient::formatShelfName("[SHELF_ID]");

        $response = $client->mergeShelves($formattedName, $formattedOtherShelfName);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->getReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/MergeShelves', $actualFuncCall);

        $formattedNameActual = $actualRequestObject->getName();
        $this->assertEquals($formattedName, $formattedNameActual);
        $formattedOtherShelfNameActual = $actualRequestObject->getOtherShelfName();
        $this->assertEquals($formattedOtherShelfName, $formattedOtherShelfNameActual);

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function createBookTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $name2 = "name2-1052831874";
        $author = "author-1406328437";
        $title = "title110371416";
        $read = true;
        $expectedResponse = new Book();
        $expectedResponse->setName($name2);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        // Serialize/deserialize so that arrays are converted to repeated objects
        $expectedResponseSerialized = $expectedResponse->serializeToString();
        $expectedResponseClass = get_class($expectedResponse);
        $expectedResponse = new $expectedResponseClass();
        $expectedResponse->mergeFromString($expectedResponseSerialized);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedName = LibraryServiceClient::formatShelfName("[SHELF_ID]");
        $book = new Book();

        $response = $client->createBook($formattedName, $book);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->getReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/CreateBook', $actualFuncCall);

        $formattedNameActual = $actualRequestObject->getName();
        $this->assertEquals($formattedName, $formattedNameActual);
        $bookActual = $actualRequestObject->getBook();
        $this->assertEquals($book, $bookActual);

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function publishSeriesTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $bookNamesElement = "bookNamesElement1491670575";
        $bookNames = [$bookNamesElement];
        $expectedResponse = new PublishSeriesResponse();
        $expectedResponse->setBookNames($bookNames);
        // Serialize/deserialize so that arrays are converted to repeated objects
        $expectedResponseSerialized = $expectedResponse->serializeToString();
        $expectedResponseClass = get_class($expectedResponse);
        $expectedResponse = new $expectedResponseClass();
        $expectedResponse->mergeFromString($expectedResponseSerialized);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $shelf = new Shelf();
        $books = [];
        $seriesString = "foobar";
        $seriesUuid = new SeriesUuid();
        $seriesUuid->setSeriesString($seriesString);

        $response = $client->publishSeries($shelf, $books, $seriesUuid);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->getReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/PublishSeries', $actualFuncCall);

        $shelfActual = $actualRequestObject->getShelf();
        $this->assertEquals($shelf, $shelfActual);
        $booksActual = [];
        foreach ($actualRequestObject->getBooks() as $booksItem) {
            $booksActual[] = $booksItem;
        }
        $this->assertEquals($books, $booksActual);
        $seriesUuidActual = $actualRequestObject->getSeriesUuid();
        $this->assertEquals($seriesUuid, $seriesUuidActual);

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function getBookTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $name2 = "name2-1052831874";
        $author = "author-1406328437";
        $title = "title110371416";
        $read = true;
        $expectedResponse = new Book();
        $expectedResponse->setName($name2);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        // Serialize/deserialize so that arrays are converted to repeated objects
        $expectedResponseSerialized = $expectedResponse->serializeToString();
        $expectedResponseClass = get_class($expectedResponse);
        $expectedResponse = new $expectedResponseClass();
        $expectedResponse->mergeFromString($expectedResponseSerialized);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedName = LibraryServiceClient::formatBookName("[SHELF_ID]", "[BOOK_ID]");

        $response = $client->getBook($formattedName);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->getReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/GetBook', $actualFuncCall);

        $formattedNameActual = $actualRequestObject->getName();
        $this->assertEquals($formattedName, $formattedNameActual);

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function listBooksTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $nextPageToken = "";
        $booksElement = new Book();
        $books = [$booksElement];
        $expectedResponse = new ListBooksResponse();
        $expectedResponse->setNextPageToken($nextPageToken);
        $expectedResponse->setBooks($books);
        // Serialize/deserialize so that arrays are converted to repeated objects
        $expectedResponseSerialized = $expectedResponse->serializeToString();
        $expectedResponseClass = get_class($expectedResponse);
        $expectedResponse = new $expectedResponseClass();
        $expectedResponse->mergeFromString($expectedResponseSerialized);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedName = LibraryServiceClient::formatShelfName("[SHELF_ID]");

        $response = $client->listBooks($formattedName);
        $this->assertEquals($expectedResponse, $response->getPage()->getResponseObject());
        $resources = iterator_to_array($response->iterateAllElements());
        $this->assertSame(1, count($resources));
        $this->assertEquals($expectedResponse->getBooks()[0], $resources[0]);

        $actualRequests = $grpcStub->getReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/ListBooks', $actualFuncCall);

        $formattedNameActual = $actualRequestObject->getName();
        $this->assertEquals($formattedName, $formattedNameActual);
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function deleteBookTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Add empty response to the grpc stub
        $grpcStub->addResponse(new GPBEmpty());
        // Mock request
        $formattedName = LibraryServiceClient::formatBookName("[SHELF_ID]", "[BOOK_ID]");

        $client->deleteBook($formattedName);
        $actualRequests = $grpcStub->getReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/DeleteBook', $actualFuncCall);

        $formattedNameActual = $actualRequestObject->getName();
        $this->assertEquals($formattedName, $formattedNameActual);

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function updateBookTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $name2 = "name2-1052831874";
        $author = "author-1406328437";
        $title = "title110371416";
        $read = true;
        $expectedResponse = new Book();
        $expectedResponse->setName($name2);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        // Serialize/deserialize so that arrays are converted to repeated objects
        $expectedResponseSerialized = $expectedResponse->serializeToString();
        $expectedResponseClass = get_class($expectedResponse);
        $expectedResponse = new $expectedResponseClass();
        $expectedResponse->mergeFromString($expectedResponseSerialized);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedName = LibraryServiceClient::formatBookName("[SHELF_ID]", "[BOOK_ID]");
        $book = new Book();

        $response = $client->updateBook($formattedName, $book);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->getReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/UpdateBook', $actualFuncCall);

        $formattedNameActual = $actualRequestObject->getName();
        $this->assertEquals($formattedName, $formattedNameActual);
        $bookActual = $actualRequestObject->getBook();
        $this->assertEquals($book, $bookActual);

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function moveBookTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $name2 = "name2-1052831874";
        $author = "author-1406328437";
        $title = "title110371416";
        $read = true;
        $expectedResponse = new Book();
        $expectedResponse->setName($name2);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        // Serialize/deserialize so that arrays are converted to repeated objects
        $expectedResponseSerialized = $expectedResponse->serializeToString();
        $expectedResponseClass = get_class($expectedResponse);
        $expectedResponse = new $expectedResponseClass();
        $expectedResponse->mergeFromString($expectedResponseSerialized);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedName = LibraryServiceClient::formatBookName("[SHELF_ID]", "[BOOK_ID]");
        $formattedOtherShelfName = LibraryServiceClient::formatShelfName("[SHELF_ID]");

        $response = $client->moveBook($formattedName, $formattedOtherShelfName);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->getReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/MoveBook', $actualFuncCall);

        $formattedNameActual = $actualRequestObject->getName();
        $this->assertEquals($formattedName, $formattedNameActual);
        $formattedOtherShelfNameActual = $actualRequestObject->getOtherShelfName();
        $this->assertEquals($formattedOtherShelfName, $formattedOtherShelfNameActual);

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function listStringsTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $nextPageToken = "";
        $stringsElement = "stringsElement474465855";
        $strings = [$stringsElement];
        $expectedResponse = new ListStringsResponse();
        $expectedResponse->setNextPageToken($nextPageToken);
        $expectedResponse->setStrings($strings);
        // Serialize/deserialize so that arrays are converted to repeated objects
        $expectedResponseSerialized = $expectedResponse->serializeToString();
        $expectedResponseClass = get_class($expectedResponse);
        $expectedResponse = new $expectedResponseClass();
        $expectedResponse->mergeFromString($expectedResponseSerialized);
        $grpcStub->addResponse($expectedResponse);

        $response = $client->listStrings();
        $this->assertEquals($expectedResponse, $response->getPage()->getResponseObject());
        $resources = iterator_to_array($response->iterateAllElements());
        $this->assertSame(1, count($resources));
        $this->assertEquals($expectedResponse->getStrings()[0], $resources[0]);

        $actualRequests = $grpcStub->getReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/ListStrings', $actualFuncCall);

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function addCommentsTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Add empty response to the grpc stub
        $grpcStub->addResponse(new GPBEmpty());
        // Mock request
        $formattedName = LibraryServiceClient::formatBookName("[SHELF_ID]", "[BOOK_ID]");
        $comment = "95";
        $stage = Stage::UNSET;
        $alignment = Alignment::CHAR;
        $commentsElement = new Comment();
        $commentsElement->setComment($comment);
        $commentsElement->setStage($stage);
        $commentsElement->setAlignment($alignment);
        $comments = [$commentsElement];

        $client->addComments($formattedName, $comments);
        $actualRequests = $grpcStub->getReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/AddComments', $actualFuncCall);

        $formattedNameActual = $actualRequestObject->getName();
        $this->assertEquals($formattedName, $formattedNameActual);
        $commentsActual = [];
        foreach ($actualRequestObject->getComments() as $commentsItem) {
            $commentsActual[] = $commentsItem;
        }
        $this->assertEquals($comments, $commentsActual);

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function getBookFromArchiveTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $name2 = "name2-1052831874";
        $author = "author-1406328437";
        $title = "title110371416";
        $read = true;
        $expectedResponse = new BookFromArchive();
        $expectedResponse->setName($name2);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        // Serialize/deserialize so that arrays are converted to repeated objects
        $expectedResponseSerialized = $expectedResponse->serializeToString();
        $expectedResponseClass = get_class($expectedResponse);
        $expectedResponse = new $expectedResponseClass();
        $expectedResponse->mergeFromString($expectedResponseSerialized);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedName = LibraryServiceClient::formatArchivedBookName("[ARCHIVE_PATH]", "[BOOK_ID]");

        $response = $client->getBookFromArchive($formattedName);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->getReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/GetBookFromArchive', $actualFuncCall);

        $formattedNameActual = $actualRequestObject->getName();
        $this->assertEquals($formattedName, $formattedNameActual);

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function getBookFromAnywhereTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $name2 = "name2-1052831874";
        $author = "author-1406328437";
        $title = "title110371416";
        $read = true;
        $expectedResponse = new BookFromAnywhere();
        $expectedResponse->setName($name2);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        // Serialize/deserialize so that arrays are converted to repeated objects
        $expectedResponseSerialized = $expectedResponse->serializeToString();
        $expectedResponseClass = get_class($expectedResponse);
        $expectedResponse = new $expectedResponseClass();
        $expectedResponse->mergeFromString($expectedResponseSerialized);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedName = LibraryServiceClient::formatBookName("[SHELF_ID]", "[BOOK_ID]");
        $formattedAltBookName = LibraryServiceClient::formatBookName("[SHELF_ID]", "[BOOK_ID]");

        $response = $client->getBookFromAnywhere($formattedName, $formattedAltBookName);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->getReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/GetBookFromAnywhere', $actualFuncCall);

        $formattedNameActual = $actualRequestObject->getName();
        $this->assertEquals($formattedName, $formattedNameActual);
        $formattedAltBookNameActual = $actualRequestObject->getAltBookName();
        $this->assertEquals($formattedAltBookName, $formattedAltBookNameActual);

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function updateBookIndexTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Add empty response to the grpc stub
        $grpcStub->addResponse(new GPBEmpty());
        // Mock request
        $formattedName = LibraryServiceClient::formatBookName("[SHELF_ID]", "[BOOK_ID]");
        $indexName = "default index";
        $indexMapItem = "indexMapItem1918721251";
        $indexMap = ["default_key" => $indexMapItem,];

        $client->updateBookIndex($formattedName, $indexName, $indexMap);
        $actualRequests = $grpcStub->getReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/UpdateBookIndex', $actualFuncCall);

        $formattedNameActual = $actualRequestObject->getName();
        $this->assertEquals($formattedName, $formattedNameActual);
        $indexNameActual = $actualRequestObject->getIndexName();
        $this->assertEquals($indexName, $indexNameActual);
        $indexMapActual = $actualRequestObject->getIndexMap();
        $this->assertEquals($indexMap, $indexMapActual);

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function findRelatedBooksTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $nextPageToken = "";
        $namesElement2 = "namesElement21120252792";
        $names2 = [$namesElement2];
        $expectedResponse = new FindRelatedBooksResponse();
        $expectedResponse->setNextPageToken($nextPageToken);
        $expectedResponse->setNames($names2);
        // Serialize/deserialize so that arrays are converted to repeated objects
        $expectedResponseSerialized = $expectedResponse->serializeToString();
        $expectedResponseClass = get_class($expectedResponse);
        $expectedResponse = new $expectedResponseClass();
        $expectedResponse->mergeFromString($expectedResponseSerialized);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $namesElement = "namesElement-249113339";
        $names = [$namesElement];
        $shelves = [];

        $response = $client->findRelatedBooks($names, $shelves);
        $this->assertEquals($expectedResponse, $response->getPage()->getResponseObject());
        $resources = iterator_to_array($response->iterateAllElements());
        $this->assertSame(1, count($resources));
        $this->assertEquals($expectedResponse->getNames()[0], $resources[0]);

        $actualRequests = $grpcStub->getReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/FindRelatedBooks', $actualFuncCall);

        $namesActual = [];
        foreach ($actualRequestObject->getNames() as $namesItem) {
            $namesActual[] = $namesItem;
        }
        $this->assertEquals($names, $namesActual);
        $shelvesActual = [];
        foreach ($actualRequestObject->getShelves() as $shelvesItem) {
            $shelvesActual[] = $shelvesItem;
        }
        $this->assertEquals($shelves, $shelvesActual);
        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function addTagTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $expectedResponse = new AddTagResponse();
        // Serialize/deserialize so that arrays are converted to repeated objects
        $expectedResponseSerialized = $expectedResponse->serializeToString();
        $expectedResponseClass = get_class($expectedResponse);
        $expectedResponse = new $expectedResponseClass();
        $expectedResponse->mergeFromString($expectedResponseSerialized);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedResource = LibraryServiceClient::formatBookName("[SHELF_ID]", "[BOOK_ID]");
        $tag = "tag114586";

        $response = $client->addTag($formattedResource, $tag);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->getReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/AddTag', $actualFuncCall);

        $formattedResourceActual = $actualRequestObject->getResource();
        $this->assertEquals($formattedResource, $formattedResourceActual);
        $tagActual = $actualRequestObject->getTag();
        $this->assertEquals($tag, $tagActual);

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function addLabelTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLabelerImpl']);
        $client = $this->createClient('createLabelerStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $expectedResponse = new AddLabelResponse();
        // Serialize/deserialize so that arrays are converted to repeated objects
        $expectedResponseSerialized = $expectedResponse->serializeToString();
        $expectedResponseClass = get_class($expectedResponse);
        $expectedResponse = new $expectedResponseClass();
        $expectedResponse->mergeFromString($expectedResponseSerialized);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $formattedResource = LibraryServiceClient::formatBookName("[SHELF_ID]", "[BOOK_ID]");
        $label = "label102727412";

        $response = $client->addLabel($formattedResource, $label);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->getReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.tagger.v1.Labeler/AddLabel', $actualFuncCall);

        $formattedResourceActual = $actualRequestObject->getResource();
        $this->assertEquals($formattedResource, $formattedResourceActual);
        $labelActual = $actualRequestObject->getLabel();
        $this->assertEquals($label, $labelActual);

        $this->assertTrue($grpcStub->isExhausted());
    }

    /**
     * @test
     */
    public function getBigBookTest()
    {
        $operationsStub = $this->createStub([$this, 'createMockOperationsStub']);
        $operationsClient = new OperationsClient([
            'serviceAddress' => '',
            'scopes' => [],
            'createOperationsStubFunction' => function ($hostname, $opts) use ($operationsStub) {
                return $operationsStub;
            }
        ]);
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub, [
            'operationsClient' => $operationsClient
        ]);

        $this->assertTrue($grpcStub->isExhausted());
        $this->assertTrue($operationsStub->isExhausted());

        // Mock response
        $incompleteOperation = new Operation();
        $incompleteOperation->setName('operations/getBigBookTest');
        $incompleteOperation->setDone(false);
        $grpcStub->addResponse($incompleteOperation);
        $name2 = "name2-1052831874";
        $author = "author-1406328437";
        $title = "title110371416";
        $read = true;
        $expectedResponse = new Book();
        $expectedResponse->setName($name2);
        $expectedResponse->setAuthor($author);
        $expectedResponse->setTitle($title);
        $expectedResponse->setRead($read);
        // Serialize/deserialize so that arrays are converted to repeated objects
        $expectedResponseSerialized = $expectedResponse->serializeToString();
        $expectedResponseClass = get_class($expectedResponse);
        $expectedResponse = new $expectedResponseClass();
        $expectedResponse->mergeFromString($expectedResponseSerialized);
        $anyResponse = new Any();
        $anyResponse->setValue($expectedResponse->serializeToString());
        $completeOperation = new Operation();
        $completeOperation->setName('operations/getBigBookTest');
        $completeOperation->setDone(true);
        $completeOperation->setResponse($anyResponse);
        $operationsStub->addResponse($completeOperation);

        // Mock request
        $formattedName = LibraryServiceClient::formatBookName("[SHELF_ID]", "[BOOK_ID]");

        $response = $client->getBigBook($formattedName);
        $this->assertFalse($response->isDone());
        $this->assertNull($response->getResult());
        $apiRequests = $grpcStub->getReceivedCalls();
        $this->assertSame(1, count($apiRequests));
        $operationsRequestsEmpty = $operationsStub->getReceivedCalls();
        $this->assertSame(0, count($operationsRequestsEmpty));

        $actualApiFuncCall = $apiRequests[0]->getFuncCall();
        $actualApiRequestObject = $apiRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/GetBigBook', $actualApiFuncCall);
        $formattedNameActual = $actualApiRequestObject->getName();$this->assertEquals($formattedName, $formattedNameActual);

        $expectedOperationsRequestObject = new GetOperationRequest();
        $expectedOperationsRequestObject->setName('operations/getBigBookTest');

        $response->pollUntilComplete();
        $this->assertTrue($response->isDone());
        $this->assertEquals($expectedResponse, $response->getResult());
        $apiRequestsEmpty = $grpcStub->getReceivedCalls();
        $this->assertSame(0, count($apiRequestsEmpty));
        $operationsRequests = $operationsStub->getReceivedCalls();
        $this->assertSame(1, count($operationsRequests));

        $actualOperationsFuncCall = $operationsRequests[0]->getFuncCall();
        $actualOperationsRequestObject = $operationsRequests[0]->getRequestObject();
        $this->assertSame('/google.longrunning.Operations/GetOperation', $actualOperationsFuncCall);
        $this->assertEquals($expectedOperationsRequestObject, $actualOperationsRequestObject);

        $this->assertTrue($grpcStub->isExhausted());
        $this->assertTrue($operationsStub->isExhausted());
    }

    /**
     * @test
     */
    public function getBigNothingTest()
    {
        $operationsStub = $this->createStub([$this, 'createMockOperationsStub']);
        $operationsClient = new OperationsClient([
            'serviceAddress' => '',
            'scopes' => [],
            'createOperationsStubFunction' => function ($hostname, $opts) use ($operationsStub) {
                return $operationsStub;
            }
        ]);
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub, [
            'operationsClient' => $operationsClient
        ]);

        $this->assertTrue($grpcStub->isExhausted());
        $this->assertTrue($operationsStub->isExhausted());

        // Mock response
        $incompleteOperation = new Operation();
        $incompleteOperation->setName('operations/getBigNothingTest');
        $incompleteOperation->setDone(false);
        $grpcStub->addResponse($incompleteOperation);
        $expectedResponse = new GPBEmpty();
        // Serialize/deserialize so that arrays are converted to repeated objects
        $expectedResponseSerialized = $expectedResponse->serializeToString();
        $expectedResponseClass = get_class($expectedResponse);
        $expectedResponse = new $expectedResponseClass();
        $expectedResponse->mergeFromString($expectedResponseSerialized);
        $anyResponse = new Any();
        $anyResponse->setValue($expectedResponse->serializeToString());
        $completeOperation = new Operation();
        $completeOperation->setName('operations/getBigNothingTest');
        $completeOperation->setDone(true);
        $completeOperation->setResponse($anyResponse);
        $operationsStub->addResponse($completeOperation);

        // Mock request
        $formattedName = LibraryServiceClient::formatBookName("[SHELF_ID]", "[BOOK_ID]");

        $response = $client->getBigNothing($formattedName);
        $this->assertFalse($response->isDone());
        $this->assertNull($response->getResult());
        $apiRequests = $grpcStub->getReceivedCalls();
        $this->assertSame(1, count($apiRequests));
        $operationsRequestsEmpty = $operationsStub->getReceivedCalls();
        $this->assertSame(0, count($operationsRequestsEmpty));

        $actualApiFuncCall = $apiRequests[0]->getFuncCall();
        $actualApiRequestObject = $apiRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/GetBigNothing', $actualApiFuncCall);
        $formattedNameActual = $actualApiRequestObject->getName();$this->assertEquals($formattedName, $formattedNameActual);

        $expectedOperationsRequestObject = new GetOperationRequest();
        $expectedOperationsRequestObject->setName('operations/getBigNothingTest');

        $response->pollUntilComplete();
        $this->assertTrue($response->isDone());
        $this->assertEquals($expectedResponse, $response->getResult());
        $apiRequestsEmpty = $grpcStub->getReceivedCalls();
        $this->assertSame(0, count($apiRequestsEmpty));
        $operationsRequests = $operationsStub->getReceivedCalls();
        $this->assertSame(1, count($operationsRequests));

        $actualOperationsFuncCall = $operationsRequests[0]->getFuncCall();
        $actualOperationsRequestObject = $operationsRequests[0]->getRequestObject();
        $this->assertSame('/google.longrunning.Operations/GetOperation', $actualOperationsFuncCall);
        $this->assertEquals($expectedOperationsRequestObject, $actualOperationsRequestObject);

        $this->assertTrue($grpcStub->isExhausted());
        $this->assertTrue($operationsStub->isExhausted());
    }

    /**
     * @test
     */
    public function testOptionalRequiredFlatteningParamsTest()
    {
        $grpcStub = $this->createStub([$this, 'createMockLibraryServiceImpl']);
        $client = $this->createClient('createLibraryServiceStubFunction', $grpcStub);

        $this->assertTrue($grpcStub->isExhausted());

        // Mock response
        $expectedResponse = new TestOptionalRequiredFlatteningParamsResponse();
        // Serialize/deserialize so that arrays are converted to repeated objects
        $expectedResponseSerialized = $expectedResponse->serializeToString();
        $expectedResponseClass = get_class($expectedResponse);
        $expectedResponse = new $expectedResponseClass();
        $expectedResponse->mergeFromString($expectedResponseSerialized);
        $grpcStub->addResponse($expectedResponse);

        // Mock request
        $requiredSingularInt32 = -72313594;
        $requiredSingularInt64 = -72313499;
        $requiredSingularFloat = -7514705.0;
        $requiredSingularDouble = 1.9111005E8;
        $requiredSingularBool = true;
        $requiredSingularEnum = InnerEnum::ZERO;
        $requiredSingularString = "requiredSingularString-1949894503";
        $requiredSingularBytes = "-29";
        $requiredSingularMessage = new InnerMessage();
        $requiredSingularResourceName = "requiredSingularResourceName-1701575020";
        $requiredSingularResourceNameOneof = "requiredSingularResourceNameOneof-25303726";
        $requiredSingularFixed32 = 720656715;
        $requiredSingularFixed64 = 720656810;
        $requiredRepeatedInt32 = [];
        $requiredRepeatedInt64 = [];
        $requiredRepeatedFloat = [];
        $requiredRepeatedDouble = [];
        $requiredRepeatedBool = [];
        $requiredRepeatedEnum = [];
        $requiredRepeatedString = [];
        $requiredRepeatedBytes = [];
        $requiredRepeatedMessage = [];
        $formattedRequiredRepeatedResourceName = [];
        $formattedRequiredRepeatedResourceNameOneof = [];
        $requiredRepeatedFixed32 = [];
        $requiredRepeatedFixed64 = [];
        $requiredMap = [];

        $response = $client->testOptionalRequiredFlatteningParams($requiredSingularInt32, $requiredSingularInt64, $requiredSingularFloat, $requiredSingularDouble, $requiredSingularBool, $requiredSingularEnum, $requiredSingularString, $requiredSingularBytes, $requiredSingularMessage, $requiredSingularResourceName, $requiredSingularResourceNameOneof, $requiredSingularFixed32, $requiredSingularFixed64, $requiredRepeatedInt32, $requiredRepeatedInt64, $requiredRepeatedFloat, $requiredRepeatedDouble, $requiredRepeatedBool, $requiredRepeatedEnum, $requiredRepeatedString, $requiredRepeatedBytes, $requiredRepeatedMessage, $formattedRequiredRepeatedResourceName, $formattedRequiredRepeatedResourceNameOneof, $requiredRepeatedFixed32, $requiredRepeatedFixed64, $requiredMap);
        $this->assertEquals($expectedResponse, $response);
        $actualRequests = $grpcStub->getReceivedCalls();
        $this->assertSame(1, count($actualRequests));
        $actualFuncCall = $actualRequests[0]->getFuncCall();
        $actualRequestObject = $actualRequests[0]->getRequestObject();
        $this->assertSame('/google.example.library.v1.LibraryService/TestOptionalRequiredFlatteningParams', $actualFuncCall);

        $requiredSingularInt32Actual = $actualRequestObject->getRequiredSingularInt32();
        $this->assertEquals($requiredSingularInt32, $requiredSingularInt32Actual);
        $requiredSingularInt64Actual = $actualRequestObject->getRequiredSingularInt64();
        $this->assertEquals($requiredSingularInt64, $requiredSingularInt64Actual);
        $requiredSingularFloatActual = $actualRequestObject->getRequiredSingularFloat();
        $this->assertEquals($requiredSingularFloat, $requiredSingularFloatActual);
        $requiredSingularDoubleActual = $actualRequestObject->getRequiredSingularDouble();
        $this->assertEquals($requiredSingularDouble, $requiredSingularDoubleActual);
        $requiredSingularBoolActual = $actualRequestObject->getRequiredSingularBool();
        $this->assertEquals($requiredSingularBool, $requiredSingularBoolActual);
        $requiredSingularEnumActual = $actualRequestObject->getRequiredSingularEnum();
        $this->assertEquals($requiredSingularEnum, $requiredSingularEnumActual);
        $requiredSingularStringActual = $actualRequestObject->getRequiredSingularString();
        $this->assertEquals($requiredSingularString, $requiredSingularStringActual);
        $requiredSingularBytesActual = $actualRequestObject->getRequiredSingularBytes();
        $this->assertEquals($requiredSingularBytes, $requiredSingularBytesActual);
        $requiredSingularMessageActual = $actualRequestObject->getRequiredSingularMessage();
        $this->assertEquals($requiredSingularMessage, $requiredSingularMessageActual);
        $requiredSingularResourceNameActual = $actualRequestObject->getRequiredSingularResourceName();
        $this->assertEquals($requiredSingularResourceName, $requiredSingularResourceNameActual);
        $requiredSingularResourceNameOneofActual = $actualRequestObject->getRequiredSingularResourceNameOneof();
        $this->assertEquals($requiredSingularResourceNameOneof, $requiredSingularResourceNameOneofActual);
        $requiredSingularFixed32Actual = $actualRequestObject->getRequiredSingularFixed32();
        $this->assertEquals($requiredSingularFixed32, $requiredSingularFixed32Actual);
        $requiredSingularFixed64Actual = $actualRequestObject->getRequiredSingularFixed64();
        $this->assertEquals($requiredSingularFixed64, $requiredSingularFixed64Actual);
        $requiredRepeatedInt32Actual = [];
        foreach ($actualRequestObject->getRequiredRepeatedInt32() as $requiredRepeatedInt32Item) {
            $requiredRepeatedInt32Actual[] = $requiredRepeatedInt32Item;
        }
        $this->assertEquals($requiredRepeatedInt32, $requiredRepeatedInt32Actual);
        $requiredRepeatedInt64Actual = [];
        foreach ($actualRequestObject->getRequiredRepeatedInt64() as $requiredRepeatedInt64Item) {
            $requiredRepeatedInt64Actual[] = $requiredRepeatedInt64Item;
        }
        $this->assertEquals($requiredRepeatedInt64, $requiredRepeatedInt64Actual);
        $requiredRepeatedFloatActual = [];
        foreach ($actualRequestObject->getRequiredRepeatedFloat() as $requiredRepeatedFloatItem) {
            $requiredRepeatedFloatActual[] = $requiredRepeatedFloatItem;
        }
        $this->assertEquals($requiredRepeatedFloat, $requiredRepeatedFloatActual);
        $requiredRepeatedDoubleActual = [];
        foreach ($actualRequestObject->getRequiredRepeatedDouble() as $requiredRepeatedDoubleItem) {
            $requiredRepeatedDoubleActual[] = $requiredRepeatedDoubleItem;
        }
        $this->assertEquals($requiredRepeatedDouble, $requiredRepeatedDoubleActual);
        $requiredRepeatedBoolActual = [];
        foreach ($actualRequestObject->getRequiredRepeatedBool() as $requiredRepeatedBoolItem) {
            $requiredRepeatedBoolActual[] = $requiredRepeatedBoolItem;
        }
        $this->assertEquals($requiredRepeatedBool, $requiredRepeatedBoolActual);
        $requiredRepeatedEnumActual = [];
        foreach ($actualRequestObject->getRequiredRepeatedEnum() as $requiredRepeatedEnumItem) {
            $requiredRepeatedEnumActual[] = $requiredRepeatedEnumItem;
        }
        $this->assertEquals($requiredRepeatedEnum, $requiredRepeatedEnumActual);
        $requiredRepeatedStringActual = [];
        foreach ($actualRequestObject->getRequiredRepeatedString() as $requiredRepeatedStringItem) {
            $requiredRepeatedStringActual[] = $requiredRepeatedStringItem;
        }
        $this->assertEquals($requiredRepeatedString, $requiredRepeatedStringActual);
        $requiredRepeatedBytesActual = [];
        foreach ($actualRequestObject->getRequiredRepeatedBytes() as $requiredRepeatedBytesItem) {
            $requiredRepeatedBytesActual[] = $requiredRepeatedBytesItem;
        }
        $this->assertEquals($requiredRepeatedBytes, $requiredRepeatedBytesActual);
        $requiredRepeatedMessageActual = [];
        foreach ($actualRequestObject->getRequiredRepeatedMessage() as $requiredRepeatedMessageItem) {
            $requiredRepeatedMessageActual[] = $requiredRepeatedMessageItem;
        }
        $this->assertEquals($requiredRepeatedMessage, $requiredRepeatedMessageActual);
        $formattedRequiredRepeatedResourceNameActual = [];
        foreach ($actualRequestObject->getRequiredRepeatedResourceName() as $formattedRequiredRepeatedResourceNameItem) {
            $formattedRequiredRepeatedResourceNameActual[] = $formattedRequiredRepeatedResourceNameItem;
        }
        $this->assertEquals($formattedRequiredRepeatedResourceName, $formattedRequiredRepeatedResourceNameActual);
        $formattedRequiredRepeatedResourceNameOneofActual = [];
        foreach ($actualRequestObject->getRequiredRepeatedResourceNameOneof() as $formattedRequiredRepeatedResourceNameOneofItem) {
            $formattedRequiredRepeatedResourceNameOneofActual[] = $formattedRequiredRepeatedResourceNameOneofItem;
        }
        $this->assertEquals($formattedRequiredRepeatedResourceNameOneof, $formattedRequiredRepeatedResourceNameOneofActual);
        $requiredRepeatedFixed32Actual = [];
        foreach ($actualRequestObject->getRequiredRepeatedFixed32() as $requiredRepeatedFixed32Item) {
            $requiredRepeatedFixed32Actual[] = $requiredRepeatedFixed32Item;
        }
        $this->assertEquals($requiredRepeatedFixed32, $requiredRepeatedFixed32Actual);
        $requiredRepeatedFixed64Actual = [];
        foreach ($actualRequestObject->getRequiredRepeatedFixed64() as $requiredRepeatedFixed64Item) {
            $requiredRepeatedFixed64Actual[] = $requiredRepeatedFixed64Item;
        }
        $this->assertEquals($requiredRepeatedFixed64, $requiredRepeatedFixed64Actual);
        $requiredMapActual = $actualRequestObject->getRequiredMap();
        $this->assertEquals($requiredMap, $requiredMapActual);

        $this->assertTrue($grpcStub->isExhausted());
    }

}
