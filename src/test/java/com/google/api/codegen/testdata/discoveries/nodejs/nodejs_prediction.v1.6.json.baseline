
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. Install the Node.js client library by running
//    'npm install googleapis --save'
var google = require('googleapis');
var prediction = google.prediction('v1.6');

function getAuth(callback) {
  // TODO: Implement this function to get authentication credentials.
  // See https://foo.com/bar
  // Authorize using one of the following scopes in order to use this method:
  //   https://www.googleapis.com/auth/prediction
  return callback(new Error("Not implemented"), null);
};

getAuth(function(err, authClient)) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'predict' method:

    // * The project associated with the model.
    project: "{MY-PROJECT}",

    // * The name of a hosted model.
    hostedModelName: "{MY-HOSTED-MODEL-NAME}",

    resource: {},

    // Auth client
    auth: authClient
  };

  prediction.hostedmodels.predict(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. Install the Node.js client library by running
//    'npm install googleapis --save'
var google = require('googleapis');
var prediction = google.prediction('v1.6');

function getAuth(callback) {
  // TODO: Implement this function to get authentication credentials.
  // See https://foo.com/bar
  // Authorize using one of the following scopes in order to use this method:
  //   https://www.googleapis.com/auth/prediction
  return callback(new Error("Not implemented"), null);
};

getAuth(function(err, authClient)) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'analyze' method:

    // * The project associated with the model.
    project: "{MY-PROJECT}",

    // * The unique name for the predictive model.
    id: "{MY-ID}",

    // Auth client
    auth: authClient
  };

  prediction.trainedmodels.analyze(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. Install the Node.js client library by running
//    'npm install googleapis --save'
var google = require('googleapis');
var prediction = google.prediction('v1.6');

function getAuth(callback) {
  // TODO: Implement this function to get authentication credentials.
  // See https://foo.com/bar
  // Authorize using one of the following scopes in order to use this method:
  //   https://www.googleapis.com/auth/prediction
  return callback(new Error("Not implemented"), null);
};

getAuth(function(err, authClient)) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

    // * The project associated with the model.
    project: "{MY-PROJECT}",

    // * The unique name for the predictive model.
    id: "{MY-ID}",

    // Auth client
    auth: authClient
  };

  prediction.trainedmodels.delete(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. Install the Node.js client library by running
//    'npm install googleapis --save'
var google = require('googleapis');
var prediction = google.prediction('v1.6');

function getAuth(callback) {
  // TODO: Implement this function to get authentication credentials.
  // See https://foo.com/bar
  // Authorize using one of the following scopes in order to use this method:
  //   https://www.googleapis.com/auth/prediction
  return callback(new Error("Not implemented"), null);
};

getAuth(function(err, authClient)) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'get' method:

    // * The project associated with the model.
    project: "{MY-PROJECT}",

    // * The unique name for the predictive model.
    id: "{MY-ID}",

    // Auth client
    auth: authClient
  };

  prediction.trainedmodels.get(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. Install the Node.js client library by running
//    'npm install googleapis --save'
var google = require('googleapis');
var prediction = google.prediction('v1.6');

function getAuth(callback) {
  // TODO: Implement this function to get authentication credentials.
  // See https://foo.com/bar
  // Authorize using one of the following scopes in order to use this method:
  //   https://www.googleapis.com/auth/devstorage.full_control
  //   https://www.googleapis.com/auth/devstorage.read_only
  //   https://www.googleapis.com/auth/devstorage.read_write
  //   https://www.googleapis.com/auth/prediction
  return callback(new Error("Not implemented"), null);
};

getAuth(function(err, authClient)) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

    // * The project associated with the model.
    project: "{MY-PROJECT}",

    resource: {},

    // Auth client
    auth: authClient
  };

  prediction.trainedmodels.insert(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. Install the Node.js client library by running
//    'npm install googleapis --save'
var google = require('googleapis');
var prediction = google.prediction('v1.6');

function getAuth(callback) {
  // TODO: Implement this function to get authentication credentials.
  // See https://foo.com/bar
  // Authorize using one of the following scopes in order to use this method:
  //   https://www.googleapis.com/auth/prediction
  return callback(new Error("Not implemented"), null);
};

getAuth(function(err, authClient)) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'list' method:

    // * The project associated with the model.
    project: "{MY-PROJECT}",

    // Auth client
    auth: authClient
  };


  var recur = function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      if (result.nextPageToken) {
        request.pageToken = result.nextPageToken;
        prediction.trainedmodels.list(request, recur);
      }
    }
  };

  prediction.trainedmodels.list(request, recur);
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. Install the Node.js client library by running
//    'npm install googleapis --save'
var google = require('googleapis');
var prediction = google.prediction('v1.6');

function getAuth(callback) {
  // TODO: Implement this function to get authentication credentials.
  // See https://foo.com/bar
  // Authorize using one of the following scopes in order to use this method:
  //   https://www.googleapis.com/auth/prediction
  return callback(new Error("Not implemented"), null);
};

getAuth(function(err, authClient)) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'predict' method:

    // * The project associated with the model.
    project: "{MY-PROJECT}",

    // * The unique name for the predictive model.
    id: "{MY-ID}",

    resource: {},

    // Auth client
    auth: authClient
  };

  prediction.trainedmodels.predict(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. Install the Node.js client library by running
//    'npm install googleapis --save'
var google = require('googleapis');
var prediction = google.prediction('v1.6');

function getAuth(callback) {
  // TODO: Implement this function to get authentication credentials.
  // See https://foo.com/bar
  // Authorize using one of the following scopes in order to use this method:
  //   https://www.googleapis.com/auth/prediction
  return callback(new Error("Not implemented"), null);
};

getAuth(function(err, authClient)) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'update' method:

    // * The project associated with the model.
    project: "{MY-PROJECT}",

    // * The unique name for the predictive model.
    id: "{MY-ID}",

    resource: {},

    // Auth client
    auth: authClient
  };

  prediction.trainedmodels.update(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
