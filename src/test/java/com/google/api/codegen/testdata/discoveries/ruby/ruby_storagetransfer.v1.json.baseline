
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Storage Transfer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storagetransfer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/storagetransfer_v1'
require 'json'

service = Google::Apis::StoragetransferV1::StoragetransferService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# Perform the call
response = service.get_google_service_account_v1()

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Storage Transfer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storagetransfer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/storagetransfer_v1'
require 'json'

service = Google::Apis::StoragetransferV1::StoragetransferService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `get_google_service_account` method:

# The ID of the Google Developers Console project that the Google service account is associated with.
# Required.
project_id = '{MY-PROJECT-ID}'


# Perform the call
response = service.get_google_service_account(project_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Storage Transfer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storagetransfer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/storagetransfer_v1'
require 'json'

service = Google::Apis::StoragetransferV1::StoragetransferService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


request_body = Google::Apis::StoragetransferV1::TransferJob.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.create_transfer_job(request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Storage Transfer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storagetransfer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/storagetransfer_v1'
require 'json'

service = Google::Apis::StoragetransferV1::StoragetransferService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `get_transfer_job` method:

# The job to get. Required.
job_name = '{MY-JOB-NAME}'


# Perform the call
response = service.get_transfer_job(job_name)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Storage Transfer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storagetransfer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/storagetransfer_v1'
require 'json'

service = Google::Apis::StoragetransferV1::StoragetransferService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# Perform the call
transferJobs = service.fetch_all(items: :transferJobs) do |token|
  service.list_transfer_jobs(, page_token: token)
end

transferJobs.each do |transfer_job|
  # TODO: Change code below to process each `transfer_job` resource:
  puts JSON.pretty_generate(transfer_job)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Storage Transfer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storagetransfer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/storagetransfer_v1'
require 'json'

service = Google::Apis::StoragetransferV1::StoragetransferService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `patch_transfer_job` method:

# The name of job to update. Required.
job_name = '{MY-JOB-NAME}'


request_body = Google::Apis::StoragetransferV1::UpdateTransferJobRequest.new
# TODO: Assign values to desired members of the `request_body` object to be changed.


# Perform the call
response = service.patch_transfer_job(job_name, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Storage Transfer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storagetransfer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/storagetransfer_v1'
require 'json'

service = Google::Apis::StoragetransferV1::StoragetransferService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `cancel_transfer_operation` method:

# The name of the operation resource to be cancelled.
name = '{MY-NAME}'


# Perform the call
service.cancel_transfer_operation(name)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Storage Transfer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storagetransfer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/storagetransfer_v1'
require 'json'

service = Google::Apis::StoragetransferV1::StoragetransferService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `delete_transfer_operation` method:

# The name of the operation resource to be deleted.
name = '{MY-NAME}'


# Perform the call
service.delete_transfer_operation(name)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Storage Transfer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storagetransfer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/storagetransfer_v1'
require 'json'

service = Google::Apis::StoragetransferV1::StoragetransferService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `get_transfer_operation` method:

# The name of the operation resource.
name = '{MY-NAME}'


# Perform the call
response = service.get_transfer_operation(name)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Storage Transfer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storagetransfer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/storagetransfer_v1'
require 'json'

service = Google::Apis::StoragetransferV1::StoragetransferService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `list_transfer_operations` method:

# The value `transferOperations`.
name = '{MY-NAME}'


# Perform the call
operations = service.fetch_all(items: :operations) do |token|
  service.list_transfer_operations(name, page_token: token)
end

operations.each do |operation|
  # TODO: Change code below to process each `operation` resource:
  puts JSON.pretty_generate(operation)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Storage Transfer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storagetransfer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/storagetransfer_v1'
require 'json'

service = Google::Apis::StoragetransferV1::StoragetransferService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `pause_transfer_operation` method:

# The name of the transfer operation. Required.
name = '{MY-NAME}'


request_body = Google::Apis::StoragetransferV1::PauseTransferOperationRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
service.pause_transfer_operation(name, request_body)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Storage Transfer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storagetransfer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/storagetransfer_v1'
require 'json'

service = Google::Apis::StoragetransferV1::StoragetransferService.new

# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Change placeholder below to desired parameter value for the `resume_transfer_operation` method:

# The name of the transfer operation. Required.
name = '{MY-NAME}'


request_body = Google::Apis::StoragetransferV1::ResumeTransferOperationRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
service.resume_transfer_operation(name, request_body)
