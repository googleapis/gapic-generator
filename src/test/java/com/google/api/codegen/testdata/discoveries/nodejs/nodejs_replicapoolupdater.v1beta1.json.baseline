
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var replicapoolupdater = google.replicapoolupdater('v1beta1');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `cancel` method:

    // The Google Developers Console project name.
    project: '{MY-PROJECT}',

    // The name of the zone in which the update's target resides.
    zone: '{MY-ZONE}',

    // The name of the update.
    rollingUpdate: '{MY-ROLLING-UPDATE}',


    auth: authClient
  };

  replicapoolupdater.rollingUpdates.cancel(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var replicapoolupdater = google.replicapoolupdater('v1beta1');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // The Google Developers Console project name.
    project: '{MY-PROJECT}',

    // The name of the zone in which the update's target resides.
    zone: '{MY-ZONE}',

    // The name of the update.
    rollingUpdate: '{MY-ROLLING-UPDATE}',


    auth: authClient
  };

  replicapoolupdater.rollingUpdates.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var replicapoolupdater = google.replicapoolupdater('v1beta1');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `insert` method:

    // The Google Developers Console project name.
    project: '{MY-PROJECT}',

    // The name of the zone in which the update's target resides.
    zone: '{MY-ZONE}',


    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  };

  replicapoolupdater.rollingUpdates.insert(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var replicapoolupdater = google.replicapoolupdater('v1beta1');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // The Google Developers Console project name.
    project: '{MY-PROJECT}',

    // The name of the zone in which the update's target resides.
    zone: '{MY-ZONE}',


    auth: authClient
  };

  var handlePage = function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var itemsPage = response['items'];
    if (!itemsPage) {
      return;
    }
    for (var i = 0; i < itemsPage.length; i++) {
      // TODO: Change code below to process each resource in `itemsPage`:
      console.log(JSON.stringify(itemsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      replicapoolupdater.rollingUpdates.list(request, handlePage);
    }
  };

  replicapoolupdater.rollingUpdates.list(request, handlePage);
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var replicapoolupdater = google.replicapoolupdater('v1beta1');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `listInstanceUpdates` method:

    // The Google Developers Console project name.
    project: '{MY-PROJECT}',

    // The name of the zone in which the update's target resides.
    zone: '{MY-ZONE}',

    // The name of the update.
    rollingUpdate: '{MY-ROLLING-UPDATE}',


    auth: authClient
  };

  var handlePage = function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var itemsPage = response['items'];
    if (!itemsPage) {
      return;
    }
    for (var i = 0; i < itemsPage.length; i++) {
      // TODO: Change code below to process each resource in `itemsPage`:
      console.log(JSON.stringify(itemsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      replicapoolupdater.rollingUpdates.listInstanceUpdates(request, handlePage);
    }
  };

  replicapoolupdater.rollingUpdates.listInstanceUpdates(request, handlePage);
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var replicapoolupdater = google.replicapoolupdater('v1beta1');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `pause` method:

    // The Google Developers Console project name.
    project: '{MY-PROJECT}',

    // The name of the zone in which the update's target resides.
    zone: '{MY-ZONE}',

    // The name of the update.
    rollingUpdate: '{MY-ROLLING-UPDATE}',


    auth: authClient
  };

  replicapoolupdater.rollingUpdates.pause(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var replicapoolupdater = google.replicapoolupdater('v1beta1');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `resume` method:

    // The Google Developers Console project name.
    project: '{MY-PROJECT}',

    // The name of the zone in which the update's target resides.
    zone: '{MY-ZONE}',

    // The name of the update.
    rollingUpdate: '{MY-ROLLING-UPDATE}',


    auth: authClient
  };

  replicapoolupdater.rollingUpdates.resume(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var replicapoolupdater = google.replicapoolupdater('v1beta1');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `rollback` method:

    // The Google Developers Console project name.
    project: '{MY-PROJECT}',

    // The name of the zone in which the update's target resides.
    zone: '{MY-ZONE}',

    // The name of the update.
    rollingUpdate: '{MY-ROLLING-UPDATE}',


    auth: authClient
  };

  replicapoolupdater.rollingUpdates.rollback(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var replicapoolupdater = google.replicapoolupdater('v1beta1');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `abandon` method:

    // The Google Developers Console project name.
    project: '{MY-PROJECT}',

    // The name of the zone in which the update's target resides.
    zone: '{MY-ZONE}',

    // The ID of the update.
    rollout: '{MY-ROLLOUT}',


    auth: authClient
  };

  replicapoolupdater.rollout.abandon(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var replicapoolupdater = google.replicapoolupdater('v1beta1');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `commit` method:

    // The Google Developers Console project name.
    project: '{MY-PROJECT}',

    // The name of the zone in which the update's target resides.
    zone: '{MY-ZONE}',

    // The ID of the update.
    rollout: '{MY-ROLLOUT}',


    auth: authClient
  };

  replicapoolupdater.rollout.commit(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var replicapoolupdater = google.replicapoolupdater('v1beta1');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // The Google Developers Console project name.
    project: '{MY-PROJECT}',

    // The name of the zone in which the update's target resides.
    zone: '{MY-ZONE}',

    // The ID of the update.
    rollout: '{MY-ROLLOUT}',


    auth: authClient
  };

  replicapoolupdater.rollout.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var replicapoolupdater = google.replicapoolupdater('v1beta1');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `insert` method:

    // The Google Developers Console project name.
    project: '{MY-PROJECT}',

    // The name of the zone in which the update's target resides.
    zone: '{MY-ZONE}',


    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  };

  replicapoolupdater.rollout.insert(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var replicapoolupdater = google.replicapoolupdater('v1beta1');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // The Google Developers Console project name.
    project: '{MY-PROJECT}',

    // The name of the zone in which the update's target resides.
    zone: '{MY-ZONE}',


    auth: authClient
  };

  replicapoolupdater.rollout.list(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var replicapoolupdater = google.replicapoolupdater('v1beta1');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `pause` method:

    // The Google Developers Console project name.
    project: '{MY-PROJECT}',

    // The name of the zone in which the update's target resides.
    zone: '{MY-ZONE}',

    // The ID of the update.
    rollout: '{MY-ROLLOUT}',


    auth: authClient
  };

  replicapoolupdater.rollout.pause(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var replicapoolupdater = google.replicapoolupdater('v1beta1');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `rampup` method:

    // The Google Developers Console project name.
    project: '{MY-PROJECT}',

    // The name of the zone in which the update's target resides.
    zone: '{MY-ZONE}',

    // The ID of the update.
    rollout: '{MY-ROLLOUT}',


    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  };

  replicapoolupdater.rollout.rampup(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var replicapoolupdater = google.replicapoolupdater('v1beta1');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `resume` method:

    // The Google Developers Console project name.
    project: '{MY-PROJECT}',

    // The name of the zone in which the update's target resides.
    zone: '{MY-ZONE}',

    // The ID of the update.
    rollout: '{MY-ROLLOUT}',


    auth: authClient
  };

  replicapoolupdater.rollout.resume(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var replicapoolupdater = google.replicapoolupdater('v1beta1');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `rollback` method:

    // The Google Developers Console project name.
    project: '{MY-PROJECT}',

    // The name of the zone in which the update's target resides.
    zone: '{MY-ZONE}',

    // The ID of the update.
    rollout: '{MY-ROLLOUT}',


    auth: authClient
  };

  replicapoolupdater.rollout.rollback(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var replicapoolupdater = google.replicapoolupdater('v1beta1');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // Name of the project scoping this request.
    project: '{MY-PROJECT}',

    // Name of the zone scoping this request.
    zone: '{MY-ZONE}',

    // Name of the operation resource to return.
    operation: '{MY-OPERATION}',


    auth: authClient
  };

  replicapoolupdater.zoneOperations.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var replicapoolupdater = google.replicapoolupdater('v1beta1');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // Name of the project scoping this request.
    project: '{MY-PROJECT}',

    // Name of the zone scoping this request.
    zone: '{MY-ZONE}',


    auth: authClient
  };

  var handlePage = function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var itemsPage = response['items'];
    if (!itemsPage) {
      return;
    }
    for (var i = 0; i < itemsPage.length; i++) {
      // TODO: Change code below to process each resource in `itemsPage`:
      console.log(JSON.stringify(itemsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      replicapoolupdater.zoneOperations.list(request, handlePage);
    }
  };

  replicapoolupdater.zoneOperations.list(request, handlePage);
});
