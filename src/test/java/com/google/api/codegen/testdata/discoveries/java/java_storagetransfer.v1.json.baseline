
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storagetransfer/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storagetransfer.v1.Storagetransfer;
import com.google.api.services.storagetransfer.v1.model.GoogleServiceAccount;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StoragetransferExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The ID of the Google Developers Console project that the Google service account is associated with.
    // Required.
    String projectId = "";  // TODO: Update placeholder value.

    Storagetransfer storagetransferService = createStoragetransferService();
    Storagetransfer.GoogleServiceAccounts.Get request = storagetransferService.googleServiceAccounts().get(projectId);

    GoogleServiceAccount response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storagetransfer createStoragetransferService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storagetransfer.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StoragetransferSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storagetransfer/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storagetransfer.v1.Storagetransfer;
import com.google.api.services.storagetransfer.v1.model.GoogleServiceAccount;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StoragetransferExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The ID of the Google Developers Console project that the Google service account is associated with.
    // Required.
    String projectId = "";  // TODO: Update placeholder value.

    Storagetransfer storagetransferService = createStoragetransferService();
    Storagetransfer.GoogleServiceAccounts.Get request = storagetransferService.googleServiceAccounts().get(projectId);

    GoogleServiceAccount response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storagetransfer createStoragetransferService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storagetransfer.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StoragetransferSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storagetransfer/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storagetransfer.v1.Storagetransfer;
import com.google.api.services.storagetransfer.v1.model.TransferJob;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StoragetransferExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // TODO: Assign values to desired fields of `requestBody`:
    TransferJob requestBody = new TransferJob();

    Storagetransfer storagetransferService = createStoragetransferService();
    Storagetransfer.TransferJobs.Create request = storagetransferService.transferJobs().create(requestBody);

    TransferJob response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storagetransfer createStoragetransferService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storagetransfer.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StoragetransferSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storagetransfer/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storagetransfer.v1.Storagetransfer;
import com.google.api.services.storagetransfer.v1.model.TransferJob;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StoragetransferExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The job to get. Required.
    String jobName = "";  // TODO: Update placeholder value.

    Storagetransfer storagetransferService = createStoragetransferService();
    Storagetransfer.TransferJobs.Get request = storagetransferService.transferJobs().get(jobName);

    TransferJob response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storagetransfer createStoragetransferService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storagetransfer.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StoragetransferSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storagetransfer/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storagetransfer.v1.Storagetransfer;
import com.google.api.services.storagetransfer.v1.model.ListTransferJobsResponse;
import com.google.api.services.storagetransfer.v1.model.TransferJob;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StoragetransferExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    Storagetransfer storagetransferService = createStoragetransferService();
    Storagetransfer.TransferJobs.List request = storagetransferService.transferJobs().list();

    ListTransferJobsResponse response;
    do {
      response = request.execute();
      if (response.getTransferJobs() == null) {
        continue;
      }
      for (TransferJob transferJob : response.getTransferJobs()) {
        // TODO: Change code below to process each `transferJob` resource:
        System.out.println(transferJob);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Storagetransfer createStoragetransferService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storagetransfer.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StoragetransferSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storagetransfer/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storagetransfer.v1.Storagetransfer;
import com.google.api.services.storagetransfer.v1.model.TransferJob;
import com.google.api.services.storagetransfer.v1.model.UpdateTransferJobRequest;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StoragetransferExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of job to update. Required.
    String jobName = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    UpdateTransferJobRequest requestBody = new UpdateTransferJobRequest();

    Storagetransfer storagetransferService = createStoragetransferService();
    Storagetransfer.TransferJobs.Patch request = storagetransferService.transferJobs().patch(jobName, requestBody);

    TransferJob response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storagetransfer createStoragetransferService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storagetransfer.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StoragetransferSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storagetransfer/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storagetransfer.v1.Storagetransfer;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StoragetransferExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the operation resource to be cancelled.
    String name = "";  // TODO: Update placeholder value.

    Storagetransfer storagetransferService = createStoragetransferService();
    Storagetransfer.TransferOperations.Cancel request = storagetransferService.transferOperations().cancel(name);

    request.execute();
  }

  public static Storagetransfer createStoragetransferService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storagetransfer.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StoragetransferSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storagetransfer/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storagetransfer.v1.Storagetransfer;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StoragetransferExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the operation resource to be deleted.
    String name = "";  // TODO: Update placeholder value.

    Storagetransfer storagetransferService = createStoragetransferService();
    Storagetransfer.TransferOperations.Delete request = storagetransferService.transferOperations().delete(name);

    request.execute();
  }

  public static Storagetransfer createStoragetransferService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storagetransfer.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StoragetransferSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storagetransfer/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storagetransfer.v1.Storagetransfer;
import com.google.api.services.storagetransfer.v1.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StoragetransferExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the operation resource.
    String name = "";  // TODO: Update placeholder value.

    Storagetransfer storagetransferService = createStoragetransferService();
    Storagetransfer.TransferOperations.Get request = storagetransferService.transferOperations().get(name);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Storagetransfer createStoragetransferService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storagetransfer.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StoragetransferSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storagetransfer/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storagetransfer.v1.Storagetransfer;
import com.google.api.services.storagetransfer.v1.model.ListOperationsResponse;
import com.google.api.services.storagetransfer.v1.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StoragetransferExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The value `transferOperations`.
    String name = "";  // TODO: Update placeholder value.

    Storagetransfer storagetransferService = createStoragetransferService();
    Storagetransfer.TransferOperations.List request = storagetransferService.transferOperations().list(name);

    ListOperationsResponse response;
    do {
      response = request.execute();
      if (response.getOperations() == null) {
        continue;
      }
      for (Operation operation : response.getOperations()) {
        // TODO: Change code below to process each `operation` resource:
        System.out.println(operation);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Storagetransfer createStoragetransferService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storagetransfer.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StoragetransferSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storagetransfer/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storagetransfer.v1.Storagetransfer;
import com.google.api.services.storagetransfer.v1.model.PauseTransferOperationRequest;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StoragetransferExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the transfer operation. Required.
    String name = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    PauseTransferOperationRequest requestBody = new PauseTransferOperationRequest();

    Storagetransfer storagetransferService = createStoragetransferService();
    Storagetransfer.TransferOperations.Pause request = storagetransferService.transferOperations().pause(name, requestBody);

    request.execute();
  }

  public static Storagetransfer createStoragetransferService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storagetransfer.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StoragetransferSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storagetransfer/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storagetransfer.v1.Storagetransfer;
import com.google.api.services.storagetransfer.v1.model.ResumeTransferOperationRequest;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StoragetransferExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The name of the transfer operation. Required.
    String name = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    ResumeTransferOperationRequest requestBody = new ResumeTransferOperationRequest();

    Storagetransfer storagetransferService = createStoragetransferService();
    Storagetransfer.TransferOperations.Resume request = storagetransferService.transferOperations().resume(name, requestBody);

    request.execute();
  }

  public static Storagetransfer createStoragetransferService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Storagetransfer.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-StoragetransferSample/0.1")
        .build();
  }
}
