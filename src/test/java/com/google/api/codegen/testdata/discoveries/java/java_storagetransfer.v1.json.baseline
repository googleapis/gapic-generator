
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storagetransfer/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storagetransfer.v1.Storagetransfer;
import com.google.api.services.storagetransfer.v1.Storagetransfer.GoogleServiceAccounts.Get;
import com.google.api.services.storagetransfer.v1.model.GoogleServiceAccount;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StoragetransferExample {
  public void run() throws IOException, GeneralSecurityException {
    // The ID of the Google Developers Console project that the Google service account is associated with.
    // Required.
    String projectId = ""; // TODO: Update field(s).

    Storagetransfer service = createService();
    Get request = service.googleServiceAccounts().get(projectId);
    GoogleServiceAccount response = request.execute();
    System.out.println(response);
  }

  public Storagetransfer createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Storagetransfer.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new StoragetransferExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storagetransfer/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storagetransfer.v1.Storagetransfer;
import com.google.api.services.storagetransfer.v1.Storagetransfer.GoogleServiceAccounts.Get;
import com.google.api.services.storagetransfer.v1.model.GoogleServiceAccount;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StoragetransferExample {
  public void run() throws IOException, GeneralSecurityException {
    // The ID of the Google Developers Console project that the Google service account is associated with.
    // Required.
    String projectId = ""; // TODO: Update field(s).

    Storagetransfer service = createService();
    Get request = service.googleServiceAccounts().get(projectId);
    GoogleServiceAccount response = request.execute();
    System.out.println(response);
  }

  public Storagetransfer createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Storagetransfer.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new StoragetransferExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storagetransfer/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storagetransfer.v1.Storagetransfer;
import com.google.api.services.storagetransfer.v1.Storagetransfer.TransferJobs.Create;
import com.google.api.services.storagetransfer.v1.model.TransferJob;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StoragetransferExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    TransferJob requestBody = new TransferJob();

    Storagetransfer service = createService();
    Create request = service.transferJobs().create(requestBody);
    TransferJob response = request.execute();
    System.out.println(response);
  }

  public Storagetransfer createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Storagetransfer.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new StoragetransferExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storagetransfer/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storagetransfer.v1.Storagetransfer;
import com.google.api.services.storagetransfer.v1.Storagetransfer.TransferJobs.Get;
import com.google.api.services.storagetransfer.v1.model.TransferJob;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StoragetransferExample {
  public void run() throws IOException, GeneralSecurityException {
    // The job to get. Required.
    String jobName = ""; // TODO: Update field(s).

    Storagetransfer service = createService();
    Get request = service.transferJobs().get(jobName);
    TransferJob response = request.execute();
    System.out.println(response);
  }

  public Storagetransfer createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Storagetransfer.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new StoragetransferExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storagetransfer/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storagetransfer.v1.Storagetransfer;
import com.google.api.services.storagetransfer.v1.Storagetransfer.TransferJobs.List;
import com.google.api.services.storagetransfer.v1.model.ListTransferJobsResponse;
import com.google.api.services.storagetransfer.v1.model.TransferJob;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StoragetransferExample {
  public void run() throws IOException, GeneralSecurityException {
    Storagetransfer service = createService();
    List request = service.transferJobs().list();
    ListTransferJobsResponse response;
    do {
      response = request.execute();
      if (response.getTransferJobs() == null) {
        continue;
      }
      for (TransferJob item : response.getTransferJobs()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Storagetransfer createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Storagetransfer.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new StoragetransferExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storagetransfer/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storagetransfer.v1.Storagetransfer;
import com.google.api.services.storagetransfer.v1.Storagetransfer.TransferJobs.Patch;
import com.google.api.services.storagetransfer.v1.model.TransferJob;
import com.google.api.services.storagetransfer.v1.model.UpdateTransferJobRequest;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StoragetransferExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    UpdateTransferJobRequest requestBody = new UpdateTransferJobRequest();

    // The name of job to update. Required.
    String jobName = ""; // TODO: Update field(s).

    Storagetransfer service = createService();
    Patch request = service.transferJobs().patch(jobName, requestBody);
    TransferJob response = request.execute();
    System.out.println(response);
  }

  public Storagetransfer createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Storagetransfer.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new StoragetransferExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storagetransfer/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storagetransfer.v1.Storagetransfer;
import com.google.api.services.storagetransfer.v1.Storagetransfer.TransferOperations.Cancel;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StoragetransferExample {
  public void run() throws IOException, GeneralSecurityException {
    // The name of the operation resource to be cancelled.
    String name = ""; // TODO: Update field(s).

    Storagetransfer service = createService();
    Cancel request = service.transferOperations().cancel(name);
    request.execute();
  }

  public Storagetransfer createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Storagetransfer.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new StoragetransferExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storagetransfer/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storagetransfer.v1.Storagetransfer;
import com.google.api.services.storagetransfer.v1.Storagetransfer.TransferOperations.Delete;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StoragetransferExample {
  public void run() throws IOException, GeneralSecurityException {
    // The name of the operation resource to be deleted.
    String name = ""; // TODO: Update field(s).

    Storagetransfer service = createService();
    Delete request = service.transferOperations().delete(name);
    request.execute();
  }

  public Storagetransfer createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Storagetransfer.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new StoragetransferExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storagetransfer/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storagetransfer.v1.Storagetransfer;
import com.google.api.services.storagetransfer.v1.Storagetransfer.TransferOperations.Get;
import com.google.api.services.storagetransfer.v1.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StoragetransferExample {
  public void run() throws IOException, GeneralSecurityException {
    // The name of the operation resource.
    String name = ""; // TODO: Update field(s).

    Storagetransfer service = createService();
    Get request = service.transferOperations().get(name);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Storagetransfer createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Storagetransfer.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new StoragetransferExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storagetransfer/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storagetransfer.v1.Storagetransfer;
import com.google.api.services.storagetransfer.v1.Storagetransfer.TransferOperations.List;
import com.google.api.services.storagetransfer.v1.model.ListOperationsResponse;
import com.google.api.services.storagetransfer.v1.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StoragetransferExample {
  public void run() throws IOException, GeneralSecurityException {
    // The value `transferOperations`.
    String name = ""; // TODO: Update field(s).

    Storagetransfer service = createService();
    List request = service.transferOperations().list(name);
    ListOperationsResponse response;
    do {
      response = request.execute();
      if (response.getOperations() == null) {
        continue;
      }
      for (Operation item : response.getOperations()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Storagetransfer createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Storagetransfer.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new StoragetransferExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storagetransfer/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storagetransfer.v1.Storagetransfer;
import com.google.api.services.storagetransfer.v1.Storagetransfer.TransferOperations.Pause;
import com.google.api.services.storagetransfer.v1.model.PauseTransferOperationRequest;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StoragetransferExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    PauseTransferOperationRequest requestBody = new PauseTransferOperationRequest();

    // The name of the transfer operation. Required.
    String name = ""; // TODO: Update field(s).

    Storagetransfer service = createService();
    Pause request = service.transferOperations().pause(name, requestBody);
    request.execute();
  }

  public Storagetransfer createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Storagetransfer.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new StoragetransferExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Storage Transfer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/storagetransfer
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/storagetransfer/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.storagetransfer.v1.Storagetransfer;
import com.google.api.services.storagetransfer.v1.Storagetransfer.TransferOperations.Resume;
import com.google.api.services.storagetransfer.v1.model.ResumeTransferOperationRequest;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class StoragetransferExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    ResumeTransferOperationRequest requestBody = new ResumeTransferOperationRequest();

    // The name of the transfer operation. Required.
    String name = ""; // TODO: Update field(s).

    Storagetransfer service = createService();
    Resume request = service.transferOperations().resume(name, requestBody);
    request.execute();
  }

  public Storagetransfer createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Storagetransfer.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new StoragetransferExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
