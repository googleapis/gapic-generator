
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Replicapoolupdater.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Replicapoolupdater.v1beta1.Data;

namespace ReplicapoolupdaterSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ReplicapoolupdaterService replicapoolupdaterService = new ReplicapoolupdaterService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Cancel() method:
            // The Google Developers Console project name.
            string project = "";
            // The name of the zone in which the update's target resides.
            string zone = "";
            // The name of the update.
            string rollingUpdate = "";

            RollingUpdatesResource.CancelRequest request = replicapoolupdaterService.RollingUpdates.Cancel(project, zone, rollingUpdate);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Replicapoolupdater.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Replicapoolupdater.v1beta1.Data;

namespace ReplicapoolupdaterSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ReplicapoolupdaterService replicapoolupdaterService = new ReplicapoolupdaterService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:
            // The Google Developers Console project name.
            string project = "";
            // The name of the zone in which the update's target resides.
            string zone = "";
            // The name of the update.
            string rollingUpdate = "";

            RollingUpdatesResource.GetRequest request = replicapoolupdaterService.RollingUpdates.Get(project, zone, rollingUpdate);
            Data.RollingUpdate response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.RollingUpdate response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Replicapoolupdater.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Replicapoolupdater.v1beta1.Data;

namespace ReplicapoolupdaterSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ReplicapoolupdaterService replicapoolupdaterService = new ReplicapoolupdaterService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:
            // The Google Developers Console project name.
            string project = "";
            // The name of the zone in which the update's target resides.
            string zone = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.RollingUpdate content = new Data.RollingUpdate();

            RollingUpdatesResource.InsertRequest request = replicapoolupdaterService.RollingUpdates.Insert(content, project, zone);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Replicapoolupdater.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Replicapoolupdater.v1beta1.Data;

namespace ReplicapoolupdaterSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ReplicapoolupdaterService replicapoolupdaterService = new ReplicapoolupdaterService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:
            // The Google Developers Console project name.
            string project = "";
            // The name of the zone in which the update's target resides.
            string zone = "";

            RollingUpdatesResource.ListRequest request = replicapoolupdaterService.RollingUpdates.List(project, zone);
            Data.RollingUpdateList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.RollingUpdate item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.RollingUpdateList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Replicapoolupdater.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Replicapoolupdater.v1beta1.Data;

namespace ReplicapoolupdaterSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ReplicapoolupdaterService replicapoolupdaterService = new ReplicapoolupdaterService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the ListInstanceUpdates() method:
            // The Google Developers Console project name.
            string project = "";
            // The name of the zone in which the update's target resides.
            string zone = "";
            // The name of the update.
            string rollingUpdate = "";

            RollingUpdatesResource.ListInstanceUpdatesRequest request = replicapoolupdaterService.RollingUpdates.ListInstanceUpdates(project, zone, rollingUpdate);
            Data.InstanceUpdateList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.InstanceUpdate item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.InstanceUpdateList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Replicapoolupdater.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Replicapoolupdater.v1beta1.Data;

namespace ReplicapoolupdaterSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ReplicapoolupdaterService replicapoolupdaterService = new ReplicapoolupdaterService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Pause() method:
            // The Google Developers Console project name.
            string project = "";
            // The name of the zone in which the update's target resides.
            string zone = "";
            // The name of the update.
            string rollingUpdate = "";

            RollingUpdatesResource.PauseRequest request = replicapoolupdaterService.RollingUpdates.Pause(project, zone, rollingUpdate);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Replicapoolupdater.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Replicapoolupdater.v1beta1.Data;

namespace ReplicapoolupdaterSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ReplicapoolupdaterService replicapoolupdaterService = new ReplicapoolupdaterService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Resume() method:
            // The Google Developers Console project name.
            string project = "";
            // The name of the zone in which the update's target resides.
            string zone = "";
            // The name of the update.
            string rollingUpdate = "";

            RollingUpdatesResource.ResumeRequest request = replicapoolupdaterService.RollingUpdates.Resume(project, zone, rollingUpdate);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Replicapoolupdater.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Replicapoolupdater.v1beta1.Data;

namespace ReplicapoolupdaterSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ReplicapoolupdaterService replicapoolupdaterService = new ReplicapoolupdaterService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Rollback() method:
            // The Google Developers Console project name.
            string project = "";
            // The name of the zone in which the update's target resides.
            string zone = "";
            // The name of the update.
            string rollingUpdate = "";

            RollingUpdatesResource.RollbackRequest request = replicapoolupdaterService.RollingUpdates.Rollback(project, zone, rollingUpdate);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Replicapoolupdater.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Replicapoolupdater.v1beta1.Data;

namespace ReplicapoolupdaterSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ReplicapoolupdaterService replicapoolupdaterService = new ReplicapoolupdaterService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:
            // Name of the project scoping this request.
            string project = "";
            // Name of the zone scoping this request.
            string zone = "";
            // Name of the operation resource to return.
            string operation = "";

            ZoneOperationsResource.GetRequest request = replicapoolupdaterService.ZoneOperations.Get(project, zone, operation);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Instance Group Updater API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/replicapoolupdater
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Replicapoolupdater.v1beta1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Replicapoolupdater.v1beta1.Data;

namespace ReplicapoolupdaterSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ReplicapoolupdaterService replicapoolupdaterService = new ReplicapoolupdaterService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:
            // Name of the project scoping this request.
            string project = "";
            // Name of the zone scoping this request.
            string zone = "";

            ZoneOperationsResource.ListRequest request = replicapoolupdaterService.ZoneOperations.List(project, zone);
            Data.OperationList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Operation item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.OperationList response = await request.ExecuteAsync();
        }
    }
}
