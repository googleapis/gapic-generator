
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud User Accounts API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/clouduseraccounts
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/clouduseraccounts_beta'

service = Google::Apis::ClouduseraccountsBeta::CloudUserAccountsService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_global_accounts_operation' method:
# Project ID for this request.
project = ''

# Name of the Operations resource to delete.
operation = ''


# Perform the call
service.delete_global_accounts_operation(project, operation)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud User Accounts API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/clouduseraccounts
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/clouduseraccounts_beta'

service = Google::Apis::ClouduseraccountsBeta::CloudUserAccountsService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_global_accounts_operation' method:
# Project ID for this request.
project = ''

# Name of the Operations resource to return.
operation = ''


# Perform the call
response = service.get_global_accounts_operation(project, operation)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud User Accounts API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/clouduseraccounts
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/clouduseraccounts_beta'

service = Google::Apis::ClouduseraccountsBeta::CloudUserAccountsService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_global_accounts_operations' method:
# Project ID for this request.
project = ''


# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_global_accounts_operations(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud User Accounts API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/clouduseraccounts
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/clouduseraccounts_beta'

service = Google::Apis::ClouduseraccountsBeta::CloudUserAccountsService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'add_group_member' method:
# Project ID for this request.
project = ''

# Name of the group for this request.
group_name = ''
groups_add_member_request_object = Google::Apis::ClouduseraccountsBeta::GroupsAddMemberRequest.new


# Perform the call
response = service.add_group_member(project, group_name, groups_add_member_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud User Accounts API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/clouduseraccounts
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/clouduseraccounts_beta'

service = Google::Apis::ClouduseraccountsBeta::CloudUserAccountsService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_group' method:
# Project ID for this request.
project = ''

# Name of the Group resource to delete.
group_name = ''


# Perform the call
response = service.delete_group(project, group_name)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud User Accounts API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/clouduseraccounts
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/clouduseraccounts_beta'

service = Google::Apis::ClouduseraccountsBeta::CloudUserAccountsService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_group' method:
# Project ID for this request.
project = ''

# Name of the Group resource to return.
group_name = ''


# Perform the call
response = service.get_group(project, group_name)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud User Accounts API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/clouduseraccounts
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/clouduseraccounts_beta'

service = Google::Apis::ClouduseraccountsBeta::CloudUserAccountsService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_group' method:
# Project ID for this request.
project = ''
group_object = Google::Apis::ClouduseraccountsBeta::Group.new


# Perform the call
response = service.insert_group(project, group_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud User Accounts API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/clouduseraccounts
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/clouduseraccounts_beta'

service = Google::Apis::ClouduseraccountsBeta::CloudUserAccountsService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_groups' method:
# Project ID for this request.
project = ''


# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_groups(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud User Accounts API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/clouduseraccounts
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/clouduseraccounts_beta'

service = Google::Apis::ClouduseraccountsBeta::CloudUserAccountsService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'remove_group_member' method:
# Project ID for this request.
project = ''

# Name of the group for this request.
group_name = ''
groups_remove_member_request_object = Google::Apis::ClouduseraccountsBeta::GroupsRemoveMemberRequest.new


# Perform the call
response = service.remove_group_member(project, group_name, groups_remove_member_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud User Accounts API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/clouduseraccounts
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/clouduseraccounts_beta'

service = Google::Apis::ClouduseraccountsBeta::CloudUserAccountsService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_linux_authorized_keys_view' method:
# Project ID for this request.
project = ''

# Name of the zone for this request.
zone = ''

# The user account for which you want to get a list of authorized public keys.
user = ''

# The fully-qualified URL of the virtual machine requesting the view.
instance = ''


# Perform the call
response = service.get_linux_authorized_keys_view(project, zone, user, instance)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud User Accounts API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/clouduseraccounts
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/clouduseraccounts_beta'

service = Google::Apis::ClouduseraccountsBeta::CloudUserAccountsService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_linux_linux_account_views' method:
# Project ID for this request.
project = ''

# Name of the zone for this request.
zone = ''

# The fully-qualified URL of the virtual machine requesting the views.
instance = ''


# Perform the call
response = service.get_linux_linux_account_views(project, zone, instance)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud User Accounts API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/clouduseraccounts
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/clouduseraccounts_beta'

service = Google::Apis::ClouduseraccountsBeta::CloudUserAccountsService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'add_user_public_key' method:
# Project ID for this request.
project = ''

# Name of the user for this request.
user = ''
public_key_object = Google::Apis::ClouduseraccountsBeta::PublicKey.new


# Perform the call
response = service.add_user_public_key(project, user, public_key_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud User Accounts API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/clouduseraccounts
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/clouduseraccounts_beta'

service = Google::Apis::ClouduseraccountsBeta::CloudUserAccountsService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_user' method:
# Project ID for this request.
project = ''

# Name of the user resource to delete.
user = ''


# Perform the call
response = service.delete_user(project, user)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud User Accounts API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/clouduseraccounts
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/clouduseraccounts_beta'

service = Google::Apis::ClouduseraccountsBeta::CloudUserAccountsService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_user' method:
# Project ID for this request.
project = ''

# Name of the user resource to return.
user = ''


# Perform the call
response = service.get_user(project, user)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud User Accounts API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/clouduseraccounts
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/clouduseraccounts_beta'

service = Google::Apis::ClouduseraccountsBeta::CloudUserAccountsService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_user' method:
# Project ID for this request.
project = ''
user_object = Google::Apis::ClouduseraccountsBeta::User.new


# Perform the call
response = service.insert_user(project, user_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud User Accounts API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/clouduseraccounts
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/clouduseraccounts_beta'

service = Google::Apis::ClouduseraccountsBeta::CloudUserAccountsService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_users' method:
# Project ID for this request.
project = ''


# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_users(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud User Accounts API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/clouduseraccounts
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/clouduseraccounts_beta'

service = Google::Apis::ClouduseraccountsBeta::CloudUserAccountsService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'remove_user_public_key' method:
# Project ID for this request.
project = ''

# Name of the user for this request.
user = ''

# The fingerprint of the public key to delete. Public keys are identified by their fingerprint, which
# is defined by RFC4716 to be the MD5 digest of the public key.
fingerprint = ''


# Perform the call
response = service.remove_user_public_key(project, user, fingerprint)
