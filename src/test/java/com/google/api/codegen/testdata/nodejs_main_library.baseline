============== file: src/v1/library_service_api.js ==============
/*
 * Copyright 2016 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * EDITING INSTRUCTIONS
 * This file was generated from the file
 * https://github.com/googleapis/googleapis/blob/master/library.proto,
 * and updates to that file get reflected here through a refresh process.
 * For the short term, the refresh process will only be runnable by Google
 * engineers.
 *
 * The only allowed edits are to method and file documentation. A 3-way
 * merge preserves those additions if the generated source changes.
 */
/* TODO: introduce line-wrapping so that it never exceeds the limit. */
/* jscs: disable maximumLineLength */
'use strict';

var configData = require('./library_service_client_config');
var extend = require('extend');
var gax = require('google-gax');

var SERVICE_ADDRESS = 'library-example.googleapis.com';

var DEFAULT_SERVICE_PORT = 443;

var CODE_GEN_NAME_VERSION = 'gapic/0.1.0';


var PAGE_DESCRIPTORS = {
  listShelves: new gax.PageDescriptor(
      'page_token',
      'next_page_token',
      'shelves'),
  listBooks: new gax.PageDescriptor(
      'page_token',
      'next_page_token',
      'books'),
  listStrings: new gax.PageDescriptor(
      'page_token',
      'next_page_token',
      'strings'),
  findRelatedBooks: new gax.PageDescriptor(
      'page_token',
      'next_page_token',
      'names')
};

/**
 * The scopes needed to make gRPC calls to all of the methods defined in
 * this service.
 */
var ALL_SCOPES = [
  'https://www.googleapis.com/auth/cloud-platform',
  'https://www.googleapis.com/auth/library'
];

/**
 * This API represents a simple digital library.  It lets you manage Shelf
 * resources and Book resources in the library. It defines the following
 * resource model:
 *
 * - The API has a collection of {@link Shelf}
 *   resources, named ``bookShelves/*``
 *
 * - Each Shelf has a collection of {@link Book}
 *   resources, named `bookShelves/*/books/*`
 *
 * Check out [cloud docs!](https://cloud.google.com/library/example/link).
 * This is [not a cloud link](http://www.google.com).
 *
 * This will be created through a builder function which can be obtained by the module.
 * See the following example of how to initialize the module and how to access to the builder.
 * @see {@link libraryServiceApi}
 *
 * @example
 * var libraryV1 = require('@google-cloud/library').v1({
 *   // optional auth parameters.
 * });
 * var api = libraryV1.libraryServiceApi();
 *
 * @class
 */
function LibraryServiceApi(gaxGrpc, grpcClients, opts) {
  opts = opts || {};
  var servicePath = opts.servicePath || SERVICE_ADDRESS;
  var port = opts.port || DEFAULT_SERVICE_PORT;
  var sslCreds = opts.sslCreds || null;
  var clientConfig = opts.clientConfig || {};
  var appName = opts.appName || 'gax';
  var appVersion = opts.appVersion || gax.version;

  var googleApiClient = [
    appName + '/' + appVersion,
    CODE_GEN_NAME_VERSION,
    'gax/' + gax.version,
    'nodejs/' + process.version].join(' ');


  var bundleDescriptors = {
    publishSeries: new gax.BundleDescriptor(
        'books',
        [
          'edition',
          'shelf.name'
        ],
        'book_names',
        gax.createByteLengthFunction(grpcClients.libraryServiceClient.google.example.library.v1.Book))
  };
  var defaults = gaxGrpc.constructSettings(
      'google.example.library.v1.LibraryService',
      configData,
      clientConfig,
      PAGE_DESCRIPTORS,
      bundleDescriptors,
      {'x-goog-api-client': googleApiClient});

  var libraryServiceStub = gaxGrpc.createStub(
      servicePath,
      port,
      grpcClients.libraryServiceClient.google.example.library.v1.LibraryService,
      {sslCreds: sslCreds});
  var libraryServiceStubMethods = [
    'createShelf',
    'getShelf',
    'listShelves',
    'deleteShelf',
    'mergeShelves',
    'createBook',
    'publishSeries',
    'getBook',
    'listBooks',
    'deleteBook',
    'updateBook',
    'moveBook',
    'listStrings',
    'addComments',
    'getBookFromArchive',
    'updateBookIndex',
    'findRelatedBooks',
    'addTag'
  ];
  libraryServiceStubMethods.forEach(function(methodName) {
    this['_' + methodName] = gax.createApiCall(
      libraryServiceStub.then(function(libraryServiceStub) {
        return libraryServiceStub[methodName].bind(libraryServiceStub);
      }),
      defaults[methodName]);
  }.bind(this));

  var labelerStub = gaxGrpc.createStub(
      servicePath,
      port,
      grpcClients.labelerClient.google.tagger.v1.Labeler,
      {sslCreds: sslCreds});
  var labelerStubMethods = [
    'addLabel'
  ];
  labelerStubMethods.forEach(function(methodName) {
    this['_' + methodName] = gax.createApiCall(
      labelerStub.then(function(labelerStub) {
        return labelerStub[methodName].bind(labelerStub);
      }),
      defaults[methodName]);
  }.bind(this));
}

// Path templates

var SHELF_PATH_TEMPLATE = new gax.PathTemplate(
    'shelves/{shelf}');

var BOOK_PATH_TEMPLATE = new gax.PathTemplate(
    'shelves/{shelf}/books/{book}');

var ARCHIVED_BOOK_PATH_TEMPLATE = new gax.PathTemplate(
    'archives/{archive_path=**}/books/{book}');

/**
 * Returns a fully-qualified shelf resource name string.
 * @param {String} shelf
 * @returns {String}
 */
LibraryServiceApi.prototype.shelfPath = function shelfPath(shelf) {
  return SHELF_PATH_TEMPLATE.render({
    shelf: shelf
  });
};

/**
 * Parses the shelfName from a shelf resource.
 * @param {String} shelfName
 *   A fully-qualified path representing a shelf resources.
 * @returns {String} - A string representing the shelf.
 */
LibraryServiceApi.prototype.matchShelfFromShelfName =
    function matchShelfFromShelfName(shelfName) {
  return SHELF_PATH_TEMPLATE.match(shelfName).shelf;
};

/**
 * Returns a fully-qualified book resource name string.
 * @param {String} shelf
 * @param {String} book
 * @returns {String}
 */
LibraryServiceApi.prototype.bookPath = function bookPath(shelf, book) {
  return BOOK_PATH_TEMPLATE.render({
    shelf: shelf,
    book: book
  });
};

/**
 * Parses the bookName from a book resource.
 * @param {String} bookName
 *   A fully-qualified path representing a book resources.
 * @returns {String} - A string representing the shelf.
 */
LibraryServiceApi.prototype.matchShelfFromBookName =
    function matchShelfFromBookName(bookName) {
  return BOOK_PATH_TEMPLATE.match(bookName).shelf;
};

/**
 * Parses the bookName from a book resource.
 * @param {String} bookName
 *   A fully-qualified path representing a book resources.
 * @returns {String} - A string representing the book.
 */
LibraryServiceApi.prototype.matchBookFromBookName =
    function matchBookFromBookName(bookName) {
  return BOOK_PATH_TEMPLATE.match(bookName).book;
};

/**
 * Returns a fully-qualified archived_book resource name string.
 * @param {String} archive_path
 * @param {String} book
 * @returns {String}
 */
LibraryServiceApi.prototype.archivedBookPath = function archivedBookPath(archive_path, book) {
  return ARCHIVED_BOOK_PATH_TEMPLATE.render({
    archive_path: archive_path,
    book: book
  });
};

/**
 * Parses the archivedBookName from a archived_book resource.
 * @param {String} archivedBookName
 *   A fully-qualified path representing a archived_book resources.
 * @returns {String} - A string representing the archive_path.
 */
LibraryServiceApi.prototype.matchArchivePathFromArchivedBookName =
    function matchArchivePathFromArchivedBookName(archivedBookName) {
  return ARCHIVED_BOOK_PATH_TEMPLATE.match(archivedBookName).archive_path;
};

/**
 * Parses the archivedBookName from a archived_book resource.
 * @param {String} archivedBookName
 *   A fully-qualified path representing a archived_book resources.
 * @returns {String} - A string representing the book.
 */
LibraryServiceApi.prototype.matchBookFromArchivedBookName =
    function matchBookFromArchivedBookName(archivedBookName) {
  return ARCHIVED_BOOK_PATH_TEMPLATE.match(archivedBookName).book;
};

// Service calls

/**
 * Creates a shelf, and returns the new Shelf.
 *
 * @param {Object} shelf
 *   The shelf to create.
 *
 *   This object should have the same structure as [Shelf]{@link Shelf}
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [Shelf]{@link Shelf}
 * @returns {gax.EventEmitter} - the event emitter to handle the call
 *   status.
 *
 * @example
 *
 * var api = libraryV1.libraryServiceApi();
 * var shelf = {};
 * api.createShelf(shelf, function(err, response) {
 *     if (err) {
 *         console.error(err);
 *         return;
 *     }
 *     // doThingsWith(response)
 * });
 */
LibraryServiceApi.prototype.createShelf = function createShelf(
    shelf,
    options,
    callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }
  var req = {
    shelf: shelf
  };
  return this._createShelf(req, options, callback);
};

/**
 * Gets a shelf.
 *
 * @param {string} name
 *   The name of the shelf to retrieve.
 * @param {string} options_
 *   To test 'options' parameter name conflict.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 *
 *   In addition, options may contain the following optional parameters.
 * @param {Object=} options.message
 *   Field to verify that message-type query parameter gets flattened.
 *
 *   This object should have the same structure as [SomeMessage]{@link SomeMessage}
 * @param {Object=} options.stringBuilder
 *   This object should have the same structure as [StringBuilder]{@link StringBuilder}
 *
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [Shelf]{@link Shelf}
 * @returns {gax.EventEmitter} - the event emitter to handle the call
 *   status.
 *
 * @example
 *
 * var api = libraryV1.libraryServiceApi();
 * var formattedName = api.shelfPath("[SHELF]");
 * var options = '';
 * api.getShelf(formattedName, options, function(err, response) {
 *     if (err) {
 *         console.error(err);
 *         return;
 *     }
 *     // doThingsWith(response)
 * });
 */
LibraryServiceApi.prototype.getShelf = function getShelf(
    name,
    options_,
    options,
    callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }
  var req = {
    name: name,
    options: options_
  };
  if ('message' in options) {
    req.message = options.message;
  }
  if ('stringBuilder' in options) {
    req.stringBuilder = options.stringBuilder;
  }
  return this._getShelf(req, options, callback);
};

/**
 * Lists shelves.
 *
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Object, ?string)=} callback
 *   When specified, the results are not streamed but this callback
 *   will be called with the response object representing [ListShelvesResponse]{@link ListShelvesResponse}.
 *   The third item will be set if the response contains the token for the further results
 *   and can be reused to `pageToken` field in the options in the next request.
 * @returns {Stream|gax.EventEmitter}
 *   An object stream which emits an object representing
 *   [Shelf]{@link Shelf} on 'data' event.
 *   When the callback is specified or streaming is suppressed through options,
 *   it will return an event emitter to handle the call status and the callback
 *   will be called with the response object.
 *
 * @example
 *
 * var api = libraryV1.libraryServiceApi();
 *
 * // Iterate over all elements.
 * api.listShelves().on('data', function(element) {
 *     // doThingsWith(element)
 * });
 *
 * // Or obtain the paged response through the callback.
 * function callback(err, response, nextPageToken) {
 *     if (err) {
 *         console.error(err);
 *         return;
 *     }
 *     // doThingsWith(response)
 *     if (nextPageToken) {
 *         // fetch the next page.
 *         api.listShelves({pageToken: nextPageToken}, callback);
 *     }
 * }
 * api.listShelves({flattenPages: false}, callback);
 * api.listShelves(function(err, response) {
 */
LibraryServiceApi.prototype.listShelves = function listShelves(
    options,
    callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }
  var req = {
  };
  return this._listShelves(req, options, callback);
};

/**
 * Deletes a shelf.
 *
 * @param {string} name
 *   The name of the shelf to delete.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error)=} callback
 *   The function which will be called with the result of the API call.
 * @returns {gax.EventEmitter} - the event emitter to handle the call
 *   status.
 *
 * @example
 *
 * var api = libraryV1.libraryServiceApi();
 * var formattedName = api.shelfPath("[SHELF]");
 * api.deleteShelf(formattedName, function(err) {
 *     if (err) {
 *         console.error(err);
 *     }
 * });
 */
LibraryServiceApi.prototype.deleteShelf = function deleteShelf(
    name,
    options,
    callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }
  var req = {
    name: name
  };
  return this._deleteShelf(req, options, callback);
};

/**
 * Merges two shelves by adding all books from the shelf named
 * `other_shelf_name` to shelf `name`, and deletes
 * `other_shelf_name`. Returns the updated shelf.
 *
 * @param {string} name
 *   The name of the shelf we're adding books to.
 * @param {string} otherShelfName
 *   The name of the shelf we're removing books from and deleting.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [Shelf]{@link Shelf}
 * @returns {gax.EventEmitter} - the event emitter to handle the call
 *   status.
 *
 * @example
 *
 * var api = libraryV1.libraryServiceApi();
 * var formattedName = api.shelfPath("[SHELF]");
 * var formattedOtherShelfName = api.shelfPath("[SHELF]");
 * api.mergeShelves(formattedName, formattedOtherShelfName, function(err, response) {
 *     if (err) {
 *         console.error(err);
 *         return;
 *     }
 *     // doThingsWith(response)
 * });
 */
LibraryServiceApi.prototype.mergeShelves = function mergeShelves(
    name,
    otherShelfName,
    options,
    callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }
  var req = {
    name: name,
    otherShelfName: otherShelfName
  };
  return this._mergeShelves(req, options, callback);
};

/**
 * Creates a book.
 *
 * @param {string} name
 *   The name of the shelf in which the book is created.
 * @param {Object} book
 *   The book to create.
 *
 *   This object should have the same structure as [Book]{@link Book}
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [Book]{@link Book}
 * @returns {gax.EventEmitter} - the event emitter to handle the call
 *   status.
 *
 * @example
 *
 * var api = libraryV1.libraryServiceApi();
 * var formattedName = api.shelfPath("[SHELF]");
 * var book = {};
 * api.createBook(formattedName, book, function(err, response) {
 *     if (err) {
 *         console.error(err);
 *         return;
 *     }
 *     // doThingsWith(response)
 * });
 */
LibraryServiceApi.prototype.createBook = function createBook(
    name,
    book,
    options,
    callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }
  var req = {
    name: name,
    book: book
  };
  return this._createBook(req, options, callback);
};

/**
 * Creates a series of books.
 *
 * @param {Object} shelf
 *   The shelf in which the series is created.
 *
 *   This object should have the same structure as [Shelf]{@link Shelf}
 * @param {Object[]} books
 *   The books to publish in the series.
 *
 *   This object should have the same structure as [Book]{@link Book}
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 *
 *   In addition, options may contain the following optional parameters.
 * @param {number=} options.edition
 *   The edition of the series
 *
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [PublishSeriesResponse]{@link PublishSeriesResponse}
 * @returns {gax.BundleEventEmitter} - the event emitter to handle the call
 *   status. When isBundling: false is specified in the options, it still returns
 *   a gax.BundleEventEmitter but the API is immediately invoked, so it behaves same
 *   as a gax.EventEmitter does.
 *
 * @example
 *
 * var api = libraryV1.libraryServiceApi();
 * var shelf = {};
 * var books = [];
 * api.publishSeries(shelf, books, function(err, response) {
 *     if (err) {
 *         console.error(err);
 *         return;
 *     }
 *     // doThingsWith(response)
 * });
 */
LibraryServiceApi.prototype.publishSeries = function publishSeries(
    shelf,
    books,
    options,
    callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }
  var req = {
    shelf: shelf,
    books: books
  };
  if ('edition' in options) {
    req.edition = options.edition;
  }
  return this._publishSeries(req, options, callback);
};

/**
 * Gets a book.
 *
 * @param {string} name
 *   The name of the book to retrieve.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [Book]{@link Book}
 * @returns {gax.EventEmitter} - the event emitter to handle the call
 *   status.
 *
 * @example
 *
 * var api = libraryV1.libraryServiceApi();
 * var formattedName = api.bookPath("[SHELF]", "[BOOK]");
 * api.getBook(formattedName, function(err, response) {
 *     if (err) {
 *         console.error(err);
 *         return;
 *     }
 *     // doThingsWith(response)
 * });
 */
LibraryServiceApi.prototype.getBook = function getBook(
    name,
    options,
    callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }
  var req = {
    name: name
  };
  return this._getBook(req, options, callback);
};

/**
 * Lists books in a shelf.
 *
 * @param {string} name
 *   The name of the shelf whose books we'd like to list.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 *
 *   In addition, options may contain the following optional parameters.
 * @param {number=} options.pageSize
 *   The maximum number of resources contained in the underlying API
 *   response. If page streaming is performed per-resource, this
 *   parameter does not affect the return value. If page streaming is
 *   performed per-page, this determines the maximum number of
 *   resources in a page.
 * @param {string=} options.filter
 *   To test python built-in wrapping.
 *
 * @param {function(?Error, ?Object, ?string)=} callback
 *   When specified, the results are not streamed but this callback
 *   will be called with the response object representing [ListBooksResponse]{@link ListBooksResponse}.
 *   The third item will be set if the response contains the token for the further results
 *   and can be reused to `pageToken` field in the options in the next request.
 * @returns {Stream|gax.EventEmitter}
 *   An object stream which emits an object representing
 *   [Book]{@link Book} on 'data' event.
 *   When the callback is specified or streaming is suppressed through options,
 *   it will return an event emitter to handle the call status and the callback
 *   will be called with the response object.
 *
 * @example
 *
 * var api = libraryV1.libraryServiceApi();
 * var formattedName = api.shelfPath("[SHELF]");
 * // Iterate over all elements.
 * api.listBooks(formattedName).on('data', function(element) {
 *     // doThingsWith(element)
 * });
 *
 * // Or obtain the paged response through the callback.
 * function callback(err, response, nextPageToken) {
 *     if (err) {
 *         console.error(err);
 *         return;
 *     }
 *     // doThingsWith(response)
 *     if (nextPageToken) {
 *         // fetch the next page.
 *         api.listBooks(formattedName, {pageToken: nextPageToken}, callback);
 *     }
 * }
 * api.listBooks(formattedName, {flattenPages: false}, callback);
 */
LibraryServiceApi.prototype.listBooks = function listBooks(
    name,
    options,
    callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }
  var req = {
    name: name
  };
  if ('pageSize' in options) {
    req.pageSize = options.pageSize;
  }
  if ('filter' in options) {
    req.filter = options.filter;
  }
  return this._listBooks(req, options, callback);
};

/**
 * Deletes a book.
 *
 * @param {string} name
 *   The name of the book to delete.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error)=} callback
 *   The function which will be called with the result of the API call.
 * @returns {gax.EventEmitter} - the event emitter to handle the call
 *   status.
 *
 * @example
 *
 * var api = libraryV1.libraryServiceApi();
 * var formattedName = api.bookPath("[SHELF]", "[BOOK]");
 * api.deleteBook(formattedName, function(err) {
 *     if (err) {
 *         console.error(err);
 *     }
 * });
 */
LibraryServiceApi.prototype.deleteBook = function deleteBook(
    name,
    options,
    callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }
  var req = {
    name: name
  };
  return this._deleteBook(req, options, callback);
};

/**
 * Updates a book.
 *
 * @param {string} name
 *   The name of the book to update.
 * @param {Object} book
 *   The book to update with.
 *
 *   This object should have the same structure as [Book]{@link Book}
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 *
 *   In addition, options may contain the following optional parameters.
 * @param {Object=} options.updateMask
 *   A field mask to apply, rendered as an HTTP parameter.
 *
 *   This object should have the same structure as [google.protobuf.FieldMask]{@link external:"google.protobuf.FieldMask"}
 * @param {Object=} options.physicalMask
 *   To test Python import clash resolution.
 *
 *   This object should have the same structure as [FieldMask]{@link FieldMask}
 *
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [Book]{@link Book}
 * @returns {gax.EventEmitter} - the event emitter to handle the call
 *   status.
 *
 * @example
 *
 * var api = libraryV1.libraryServiceApi();
 * var formattedName = api.bookPath("[SHELF]", "[BOOK]");
 * var book = {};
 * api.updateBook(formattedName, book, function(err, response) {
 *     if (err) {
 *         console.error(err);
 *         return;
 *     }
 *     // doThingsWith(response)
 * });
 */
LibraryServiceApi.prototype.updateBook = function updateBook(
    name,
    book,
    options,
    callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }
  var req = {
    name: name,
    book: book
  };
  if ('updateMask' in options) {
    req.updateMask = options.updateMask;
  }
  if ('physicalMask' in options) {
    req.physicalMask = options.physicalMask;
  }
  return this._updateBook(req, options, callback);
};

/**
 * Moves a book to another shelf, and returns the new book.
 *
 * @param {string} name
 *   The name of the book to move.
 * @param {string} otherShelfName
 *   The name of the destination shelf.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [Book]{@link Book}
 * @returns {gax.EventEmitter} - the event emitter to handle the call
 *   status.
 *
 * @example
 *
 * var api = libraryV1.libraryServiceApi();
 * var formattedName = api.bookPath("[SHELF]", "[BOOK]");
 * var formattedOtherShelfName = api.shelfPath("[SHELF]");
 * api.moveBook(formattedName, formattedOtherShelfName, function(err, response) {
 *     if (err) {
 *         console.error(err);
 *         return;
 *     }
 *     // doThingsWith(response)
 * });
 */
LibraryServiceApi.prototype.moveBook = function moveBook(
    name,
    otherShelfName,
    options,
    callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }
  var req = {
    name: name,
    otherShelfName: otherShelfName
  };
  return this._moveBook(req, options, callback);
};

/**
 * Lists a primitive resource. To test go page streaming.
 *
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 *
 *   In addition, options may contain the following optional parameters.
 * @param {string=} options.name
 * @param {number=} options.pageSize
 *   The maximum number of resources contained in the underlying API
 *   response. If page streaming is performed per-resource, this
 *   parameter does not affect the return value. If page streaming is
 *   performed per-page, this determines the maximum number of
 *   resources in a page.
 *
 * @param {function(?Error, ?Object, ?string)=} callback
 *   When specified, the results are not streamed but this callback
 *   will be called with the response object representing [ListStringsResponse]{@link ListStringsResponse}.
 *   The third item will be set if the response contains the token for the further results
 *   and can be reused to `pageToken` field in the options in the next request.
 * @returns {Stream|gax.EventEmitter}
 *   An object stream which emits a string on 'data' event.
 *   When the callback is specified or streaming is suppressed through options,
 *   it will return an event emitter to handle the call status and the callback
 *   will be called with the response object.
 *
 * @example
 *
 * var api = libraryV1.libraryServiceApi();
 *
 * // Iterate over all elements.
 * api.listStrings().on('data', function(element) {
 *     // doThingsWith(element)
 * });
 *
 * // Or obtain the paged response through the callback.
 * function callback(err, response, nextPageToken) {
 *     if (err) {
 *         console.error(err);
 *         return;
 *     }
 *     // doThingsWith(response)
 *     if (nextPageToken) {
 *         // fetch the next page.
 *         api.listStrings({pageToken: nextPageToken}, callback);
 *     }
 * }
 * api.listStrings({flattenPages: false}, callback);
 * api.listStrings(function(err, response) {
 */
LibraryServiceApi.prototype.listStrings = function listStrings(
    options,
    callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }
  var req = {
  };
  if ('name' in options) {
    req.name = options.name;
  }
  if ('pageSize' in options) {
    req.pageSize = options.pageSize;
  }
  return this._listStrings(req, options, callback);
};

/**
 * Adds comments to a book
 *
 * @param {string} name
 * @param {Object[]} comments
 *   This object should have the same structure as [Comment]{@link Comment}
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error)=} callback
 *   The function which will be called with the result of the API call.
 * @returns {gax.EventEmitter} - the event emitter to handle the call
 *   status.
 *
 * @example
 *
 * var api = libraryV1.libraryServiceApi();
 * var formattedName = api.bookPath("[SHELF]", "[BOOK]");
 * var comment = '';
 * var stage = Stage.UNSET;
 * var commentsElement = {
 *     comment : comment,
 *     stage : stage
 * };
 * var comments = [commentsElement];
 * api.addComments(formattedName, comments, function(err) {
 *     if (err) {
 *         console.error(err);
 *     }
 * });
 */
LibraryServiceApi.prototype.addComments = function addComments(
    name,
    comments,
    options,
    callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }
  var req = {
    name: name,
    comments: comments
  };
  return this._addComments(req, options, callback);
};

/**
 * Gets a book from an archive.
 *
 * @param {string} name
 *   The name of the book to retrieve.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [Book]{@link Book}
 * @returns {gax.EventEmitter} - the event emitter to handle the call
 *   status.
 *
 * @example
 *
 * var api = libraryV1.libraryServiceApi();
 * var formattedName = api.archivedBookPath("[ARCHIVE_PATH]", "[BOOK]");
 * api.getBookFromArchive(formattedName, function(err, response) {
 *     if (err) {
 *         console.error(err);
 *         return;
 *     }
 *     // doThingsWith(response)
 * });
 */
LibraryServiceApi.prototype.getBookFromArchive = function getBookFromArchive(
    name,
    options,
    callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }
  var req = {
    name: name
  };
  return this._getBookFromArchive(req, options, callback);
};

/**
 * Updates the index of a book.
 *
 * @param {string} name
 *   The name of the book to update.
 * @param {string} indexName
 *   The name of the index for the book
 * @param {Object.<string, string>} indexMap
 *   The index to update the book with
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error)=} callback
 *   The function which will be called with the result of the API call.
 * @returns {gax.EventEmitter} - the event emitter to handle the call
 *   status.
 *
 * @example
 *
 * var api = libraryV1.libraryServiceApi();
 * var formattedName = api.bookPath("[SHELF]", "[BOOK]");
 * var indexName = 'default index';
 * var indexMapItem = '';
 * var indexMap = {'default_key' : indexMapItem,};
 * api.updateBookIndex(formattedName, indexName, indexMap, function(err) {
 *     if (err) {
 *         console.error(err);
 *     }
 * });
 */
LibraryServiceApi.prototype.updateBookIndex = function updateBookIndex(
    name,
    indexName,
    indexMap,
    options,
    callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }
  var req = {
    name: name,
    indexName: indexName,
    indexMap: indexMap
  };
  return this._updateBookIndex(req, options, callback);
};

/**
 * @param {string[]} names
 * @param {string[]} shelves
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 *
 *   In addition, options may contain the following optional parameters.
 * @param {number=} options.pageSize
 *   The maximum number of resources contained in the underlying API
 *   response. If page streaming is performed per-resource, this
 *   parameter does not affect the return value. If page streaming is
 *   performed per-page, this determines the maximum number of
 *   resources in a page.
 *
 * @param {function(?Error, ?Object, ?string)=} callback
 *   When specified, the results are not streamed but this callback
 *   will be called with the response object representing [FindRelatedBooksResponse]{@link FindRelatedBooksResponse}.
 *   The third item will be set if the response contains the token for the further results
 *   and can be reused to `pageToken` field in the options in the next request.
 * @returns {Stream|gax.EventEmitter}
 *   An object stream which emits a string on 'data' event.
 *   When the callback is specified or streaming is suppressed through options,
 *   it will return an event emitter to handle the call status and the callback
 *   will be called with the response object.
 *
 * @example
 *
 * var api = libraryV1.libraryServiceApi();
 * var namesElement = '';
 * var names = [namesElement];
 * var shelves = [];
 * // Iterate over all elements.
 * api.findRelatedBooks(names, shelves).on('data', function(element) {
 *     // doThingsWith(element)
 * });
 *
 * // Or obtain the paged response through the callback.
 * function callback(err, response, nextPageToken) {
 *     if (err) {
 *         console.error(err);
 *         return;
 *     }
 *     // doThingsWith(response)
 *     if (nextPageToken) {
 *         // fetch the next page.
 *         api.findRelatedBooks(names, shelves, {pageToken: nextPageToken}, callback);
 *     }
 * }
 * api.findRelatedBooks(names, shelves, {flattenPages: false}, callback);
 */
LibraryServiceApi.prototype.findRelatedBooks = function findRelatedBooks(
    names,
    shelves,
    options,
    callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }
  var req = {
    names: names,
    shelves: shelves
  };
  if ('pageSize' in options) {
    req.pageSize = options.pageSize;
  }
  return this._findRelatedBooks(req, options, callback);
};

/**
 * Adds a tag to the book. This RPC is a mixin.
 *
 * @param {string} resource
 *   REQUIRED: The resource which the tag is being added to.
 *   Resource is usually specified as a path, such as,
 *   projects/{project}/zones/{zone}/disks/{disk}.
 * @param {string} tag
 *   REQUIRED: The tag to add.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [AddTagResponse]{@link AddTagResponse}
 * @returns {gax.EventEmitter} - the event emitter to handle the call
 *   status.
 *
 * @example
 *
 * var api = libraryV1.libraryServiceApi();
 * var formattedResource = api.bookPath("[SHELF]", "[BOOK]");
 * var tag = '';
 * api.addTag(formattedResource, tag, function(err, response) {
 *     if (err) {
 *         console.error(err);
 *         return;
 *     }
 *     // doThingsWith(response)
 * });
 */
LibraryServiceApi.prototype.addTag = function addTag(
    resource,
    tag,
    options,
    callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }
  var req = {
    resource: resource,
    tag: tag
  };
  return this._addTag(req, options, callback);
};

/**
 * Adds a label to the entity.
 *
 * @param {string} resource
 *   REQUIRED: The resource which the label is being added to.
 *   Resource is usually specified as a path, such as,
 *   projects/{project}/zones/{zone}/disks/{disk}.
 * @param {string} label
 *   REQUIRED: The label to add.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error, ?Object)=} callback
 *   The function which will be called with the result of the API call.
 *
 *   The second parameter to the callback is an object representing [AddLabelResponse]{@link AddLabelResponse}
 * @returns {gax.EventEmitter} - the event emitter to handle the call
 *   status.
 *
 * @example
 *
 * var api = libraryV1.libraryServiceApi();
 * var formattedResource = api.bookPath("[SHELF]", "[BOOK]");
 * var label = '';
 * api.addLabel(formattedResource, label, function(err, response) {
 *     if (err) {
 *         console.error(err);
 *         return;
 *     }
 *     // doThingsWith(response)
 * });
 */
LibraryServiceApi.prototype.addLabel = function addLabel(
    resource,
    label,
    options,
    callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }
  var req = {
    resource: resource,
    label: label
  };
  return this._addLabel(req, options, callback);
};

function LibraryServiceApiBuilder(gaxGrpc) {
  if (!(this instanceof LibraryServiceApiBuilder)) {
    return new LibraryServiceApiBuilder(gaxGrpc);
  }

  var libraryServiceClient = gaxGrpc.load([{
    root: require('google-proto-files')('..'),
    file: 'library.proto'
  }]);
  extend(this, libraryServiceClient.google.example.library.v1);

  var labelerClient = gaxGrpc.load([{
    root: require('google-proto-files')('..'),
    file: 'tagger.proto'
  }]);
  extend(this, labelerClient.google.tagger.v1);

  var grpcClients = {
    libraryServiceClient: libraryServiceClient,
    labelerClient: labelerClient
  };

  /**
   * Build a new instance of {@link LibraryServiceApi}.
   *
   * @param {Object=} opts - The optional parameters.
   * @param {String=} opts.servicePath
   *   The domain name of the API remote host.
   * @param {number=} opts.port
   *   The port on which to connect to the remote host.
   * @param {grpc.ClientCredentials=} opts.sslCreds
   *   A ClientCredentials for use with an SSL-enabled channel.
   * @param {Object=} opts.clientConfig
   *   The customized config to build the call settings. See
   *   {@link gax.constructSettings} for the format.
   * @param {number=} opts.appName
   *   The codename of the calling service.
   * @param {String=} opts.appVersion
   *   The version of the calling service.
   */
  this.libraryServiceApi = function(opts) {
    return new LibraryServiceApi(gaxGrpc, grpcClients, opts);
  };
  extend(this.libraryServiceApi, LibraryServiceApi);
}
module.exports = LibraryServiceApiBuilder;
module.exports.SERVICE_ADDRESS = SERVICE_ADDRESS;
module.exports.ALL_SCOPES = ALL_SCOPES;
