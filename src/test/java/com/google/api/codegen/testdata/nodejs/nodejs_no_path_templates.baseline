============== file: README.md ==============
# Node.js Client for Google Fake API ([Alpha](https://github.com/GoogleCloudPlatform/google-cloud-node#versioning))

[Google Fake API][Product Documentation]:
Tests no path templates
- [Client Library Documentation][]
- [Product Documentation][]

## Quick Start
In order to use this library, you first need to go through the following
steps:

1. [Select or create a Cloud Platform project.](https://console.cloud.google.com/project)
2. [Enable the Google Fake API.](https://console.cloud.google.com/apis/api/library)
3. [Setup Authentication.](https://googlecloudplatform.github.io/google-cloud-node/#/docs/google-cloud/master/guides/authentication)

### Installation
```
$ npm install --save example
```

### Next Steps
- Read the [Client Library Documentation][] for Google Fake API
  to see other available methods on the client.
- Read the [Google Fake API Product documentation][Product Documentation]
  to learn more about the product and see How-to Guides.
- View this [repository's main README](https://github.com/GoogleCloudPlatform/google-cloud-node/blob/master/README.md)
  to see the full list of Cloud APIs that we cover.

[Client Library Documentation]: https://googlecloudplatform.github.io/google-cloud-node/#/docs/library
[Product Documentation]: https://cloud.google.com/library
============== file: package.json ==============
{
  "repository": "GoogleCloudPlatform/google-cloud-node",
  "name": "example",
  "version": "0.7.1",
  "author": "Google LLC",
  "description": "Google Fake API client for Node.js",
  "main": "src/index.js",
  "files": [
    "protos",
    "src",
    "AUTHORS",
    "COPYING"
  ],
  "keywords": [
    "google apis client",
    "google api client",
    "google apis",
    "google api",
    "google",
    "google cloud platform",
    "google cloud",
    "cloud",
    "google library",
    "library",
    "Google Fake API"
  ],
  "dependencies": {
    "google-gax": "^0.14.0",
    "google-some-other-package-v1": "^0.2.1",
    "lodash.merge": "^4.6.0"
  },
  "devDependencies": {
    "mocha": "^3.2.0",
    "through2": "^2.0.3"
  },
  "scripts": {
    "publish-module": "node ../../scripts/publish.js library",
    "smoke-test": "mocha smoke-test/*.js --timeout 5000",
    "test": "mocha test/*.js"
  },
  "license": "Apache-2.0",
  "engines": {
    "node": ">=4.0.0"
  }
}

============== file: src/index.js ==============
// Copyright 2017, Google LLC All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

'use strict';

const NoTemplatesApiServiceClient = require('./no_templates_api_service_client');

module.exports.NoTemplatesApiServiceClient = NoTemplatesApiServiceClient;

============== file: src/v1/no_templates_api_service_client.js ==============
// Copyright 2017, Google LLC All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

'use strict';

const gapicConfig = require('./no_templates_api_service_client_config');
const gax = require('google-gax');
const merge = require('lodash.merge');
const path = require('path');

const VERSION = require('../package.json').version;

/**
 * @class
 */
class NoTemplatesApiServiceClient {
  /**
   * Construct an instance of NoTemplatesApiServiceClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *   usaing a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option above is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {function} [options.promise] - Custom promise module to use instead
   *     of native Promises.
   * @param {string} [options.servicePath] - The domain name of the
   *     API remote host.
   */
  constructor(opts) {
    this._descriptors = {};

    // Ensure that options include the service address and port.
    opts = Object.assign(
      {
        clientConfig: {},
        port: this.constructor.port,
        servicePath: this.constructor.servicePath,
      },
      opts
    );

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = this.constructor.scopes;
    var gaxGrpc = gax.grpc(opts);

    // Save the auth object to the client, for use by other methods.
    this.auth = gaxGrpc.auth;

    // Determine the client header string.
    var clientHeader = [
      `gl-node/${process.version.node}`,
      `grpc/${gaxGrpc.grpcVersion}`,
      `gax/${gax.version}`,
      `gapic/${VERSION}`,
    ];
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }

    // Load the applicable protos.
    var protos = merge(
      {},
      gaxGrpc.loadProto(
        path.join(__dirname, '..', 'protos'),
        'no_path_templates.proto'
      )
    );

    // Put together the default options sent with requests.
    var defaults = gaxGrpc.constructSettings(
      'google.cloud.example.v1.NoTemplatesAPIService',
      gapicConfig,
      opts.clientConfig,
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this._innerApiCalls = {};

    // Put together the "service stub" for
    // google.cloud.example.v1.NoTemplatesAPIService.
    var noTemplatesApiServiceStub = gaxGrpc.createStub(
      protos.google.cloud.example.v1.NoTemplatesAPIService,
      opts
    );

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    var noTemplatesApiServiceStubMethods = [
      'increment',
    ];
    for (let methodName of noTemplatesApiServiceStubMethods) {
      this._innerApiCalls[methodName] = gax.createApiCall(
        noTemplatesApiServiceStub.then(
          stub =>
            function() {
              var args = Array.prototype.slice.call(arguments, 0);
              return stub[methodName].apply(stub, args);
            }
        ),
        defaults[methodName],
        null
      );
    }
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'no-path-templates.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [
    ];
  }

  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(callback) {
    return this.auth.getProjectId(callback);
  }

  // -------------------
  // -- Service calls --
  // -------------------

  /**
   * Increments something.
   *   Sometimes the comments are indented, but Sphinx doesn't like that. So
   *  in Python we trim all
   *      leading
   *         and trailing
   *    whitespace.
   *
   * @param {Object} [request]
   *   The request object that will be sent.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error)} [callback]
   *   The function which will be called with the result of the API call.
   * @returns {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const example = require('example');
   *
   * var client = example.NoTemplatesApiServiceClient({
   *   // optional auth parameters.
   * });
   *
   *
   * client.increment({}).catch(err => {
   *   console.error(err);
   * });
   */
  increment(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    if (request === undefined) {
      request = {};
    }
    return this._innerApiCalls.increment(request, options, callback);
  }
}


module.exports = NoTemplatesApiServiceClient;

============== file: src/v1/no_templates_api_service_client_config.json ==============
{
  "interfaces": {
    "google.cloud.example.v1.NoTemplatesAPIService": {
      "retry_codes": {},
      "retry_params": {},
      "methods": {
        "Increment": {
          "timeout_millis": 10000
        }
      }
    }
  }
}

============== file: test/gapic.js ==============
// Copyright 2017, Google LLC All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

'use strict';

const assert = require('assert');

const exampleModule = require('../src');

var FAKE_STATUS_CODE = 1;
var error = new Error();
error.code = FAKE_STATUS_CODE;

describe('NoTemplatesApiServiceClient', () => {
  describe('increment', () => {
    it('invokes increment without error', done => {
      var client = new exampleModule.NoTemplatesApiServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var request = {};

      // Mock Grpc layer
      client._innerApiCalls.increment = mockSimpleGrpcMethod(request);

      client.increment(request, err => {
        assert.ifError(err);
        done();
      });
    });

    it('invokes increment with error', done => {
      var client = new exampleModule.NoTemplatesApiServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var request = {};

      // Mock Grpc layer
      client._innerApiCalls.increment = mockSimpleGrpcMethod(
        request,
        null,
        error
      );

      client.increment(request, err => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

});

function mockSimpleGrpcMethod(expectedRequest, response, error) {
  return function(actualRequest, options, callback) {
    assert.deepStrictEqual(actualRequest, expectedRequest);
    if (error) {
      callback(error);
    } else if (response) {
      callback(null, response);
    } else {
      callback(null);
    }
  };
}

