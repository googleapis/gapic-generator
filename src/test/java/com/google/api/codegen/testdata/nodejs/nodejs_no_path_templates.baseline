============== file: README.md ==============
# Node.js Client for Google Fake API ([Alpha](https://github.com/GoogleCloudPlatform/google-cloud-node#versioning))

[Google Fake API][Product Documentation]:
Tests no path templates
- [Client Library Documentation][]
- [Product Documentation][]

## Quick Start
In order to use this library, you first need to go through the following
steps:

1. [Select or create a Cloud Platform project.](https://console.cloud.google.com/project)
2. [Enable the Google Fake API.](https://console.cloud.google.com/apis/api/library)
3. [Setup Authentication.](https://googlecloudplatform.github.io/google-cloud-node/#/docs/google-cloud/master/guides/authentication)

### Installation
```
$ npm install --save example
```

### Next Steps
- Read the [Client Library Documentation][] for Google Fake API
  to see other available methods on the client.
- Read the [Google Fake API Product documentation][Product Documentation]
  to learn more about the product and see How-to Guides.
- View this [repository's main README](https://github.com/GoogleCloudPlatform/google-cloud-node/blob/master/README.md)
  to see the full list of Cloud APIs that we cover.

[Client Library Documentation]: https://googlecloudplatform.github.io/google-cloud-node/#/docs/library
[Product Documentation]: https://cloud.google.com/library
============== file: package.json ==============
{
  "repository": "GoogleCloudPlatform/google-cloud-node",
  "name": "example",
  "version": "0.7.1",
  "author": "Google, Inc.",
  "description": "Google Fake API client for Node.js",
  "main": "src/index.js",
  "files": [
    "protos",
    "src",
    "AUTHORS",
    "COPYING"
  ],
  "keywords": [
    "google apis client",
    "google api client",
    "google apis",
    "google api",
    "google",
    "google cloud platform",
    "google cloud",
    "cloud",
    "google library",
    "library",
    "Google Fake API"
  ],
  "dependencies": {
    "extend": "^3.0",
    "google-gax": "^0.14.0",
    "google-some-other-package-v1": "^0.2.1"
  },
  "devDependencies": {
    "mocha": "^3.2.0",
    "through2": "^2.0.3"
  },
  "scripts": {
    "publish-module": "node ../../scripts/publish.js library",
    "smoke-test": "mocha smoke-test/*.js --timeout 5000",
    "test": "mocha test/*.js"
  },
  "license": "Apache-2.0",
  "engines": {
    "node": ">=4.0.0"
  }
}

============== file: src/index.js ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';

var noTemplatesApiServiceClient = require('./no_templates_api_service_client');
var gax = require('google-gax');
var extend = require('extend');

function v1(options) {
  options = extend({
    scopes: v1.ALL_SCOPES
  }, options);
  var gaxGrpc = gax.grpc(options);
  return noTemplatesApiServiceClient(gaxGrpc);
}

v1.SERVICE_ADDRESS = noTemplatesApiServiceClient.SERVICE_ADDRESS;
v1.ALL_SCOPES = noTemplatesApiServiceClient.ALL_SCOPES;

module.exports = v1;
============== file: src/v1/no_templates_api_service_client.js ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * EDITING INSTRUCTIONS
 * This file was generated from the file
 * https://github.com/googleapis/googleapis/blob/master/no_path_templates.proto,
 * and updates to that file get reflected here through a refresh process.
 * For the short term, the refresh process will only be runnable by Google
 * engineers.
 *
 * The only allowed edits are to method and file documentation. A 3-way
 * merge preserves those additions if the generated source changes.
 */
'use strict';

var configData = require('./no_templates_api_service_client_config');
var extend = require('extend');
var gax = require('google-gax');
var path = require('path');

var SERVICE_ADDRESS = 'no-path-templates.googleapis.com';

var DEFAULT_SERVICE_PORT = 443;

var CODE_GEN_NAME_VERSION = 'gapic/0.0.5';

/*!
 * The scopes needed to make gRPC calls to all of the methods defined in
 * this service.
 */
var ALL_SCOPES = [
];

/**
 *
 * @class
 */
function NoTemplatesApiServiceClient(gaxGrpc, loadedProtos, opts) {
  opts = extend({
    servicePath: SERVICE_ADDRESS,
    port: DEFAULT_SERVICE_PORT,
    clientConfig: {}
  }, opts);

  var googleApiClient = [
    'gl-node/' + process.versions.node
  ];
  if (opts.libName && opts.libVersion) {
    googleApiClient.push(opts.libName + '/' + opts.libVersion);
  }
  googleApiClient.push(
    CODE_GEN_NAME_VERSION,
    'gax/' + gax.version,
    'grpc/' + gaxGrpc.grpcVersion
  );

  var defaults = gaxGrpc.constructSettings(
      'google.cloud.example.v1.NoTemplatesAPIService',
      configData,
      opts.clientConfig,
      {'x-goog-api-client': googleApiClient.join(' ')});

  var self = this;

  this.auth = gaxGrpc.auth;
  var noTemplatesApiServiceStub = gaxGrpc.createStub(
      loadedProtos.google.cloud.example.v1.NoTemplatesAPIService,
      opts);
  var noTemplatesApiServiceStubMethods = [
    'increment'
  ];
  noTemplatesApiServiceStubMethods.forEach(function(methodName) {
    self['_' + methodName] = gax.createApiCall(
      noTemplatesApiServiceStub.then(function(noTemplatesApiServiceStub) {
        return function() {
          var args = Array.prototype.slice.call(arguments, 0);
          return noTemplatesApiServiceStub[methodName].apply(noTemplatesApiServiceStub, args);
        };
      }),
      defaults[methodName],
      null);
  });
}


/**
 * Get the project ID used by this class.
 * @param {function(Error, string)} callback - the callback to be called with
 *   the current project Id.
 */
NoTemplatesApiServiceClient.prototype.getProjectId = function(callback) {
  return this.auth.getProjectId(callback);
};

// Service calls

/**
 * Increments something.
 *   Sometimes the comments are indented, but Sphinx doesn't like that. So
 *  in Python we trim all
 *      leading
 *         and trailing
 *    whitespace.
 *
 * @param {Object=} request
 *   The request object that will be sent.
 * @param {Object=} options
 *   Optional parameters. You can override the default settings for this call, e.g, timeout,
 *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
 * @param {function(?Error)=} callback
 *   The function which will be called with the result of the API call.
 * @returns {Promise} - The promise which resolves when API call finishes.
 *   The promise has a method named "cancel" which cancels the ongoing API call.
 *
 * @example
 *
 * var example = require('example');
 *
 * var client = example({
 *    // optional auth parameters.
 * });
 *
 *
 * client.increment({}).catch(function(err) {
 *     console.error(err);
 * });
 */
NoTemplatesApiServiceClient.prototype.increment = function(request, options, callback) {
  if (options instanceof Function && callback === undefined) {
    callback = options;
    options = {};
  }
  if (options === undefined) {
    options = {};
  }
  if (request === undefined) {
    request = {};
  }
  return this._increment(request, options, callback);
};

/**
 * @class
 * @param {*} gaxGrpc
 */
function NoTemplatesApiServiceClientBuilder(gaxGrpc) {
  if (!(this instanceof NoTemplatesApiServiceClientBuilder)) {
    return new NoTemplatesApiServiceClientBuilder(gaxGrpc);
  }

  var noTemplatesApiServiceStubProtos = gaxGrpc.loadProto(
    path.join(__dirname, '..', 'protos'), 'no_path_templates.proto');
  extend(this, noTemplatesApiServiceStubProtos.google.cloud.example.v1);


  /**
   * Build a new instance of {@link NoTemplatesApiServiceClient}.
   *
   * @method NoTemplatesApiServiceClientBuilder#noTemplatesApiServiceClient
   * @param {Object=} opts - The optional parameters.
   * @param {String=} opts.servicePath
   *   The domain name of the API remote host.
   * @param {number=} opts.port
   *   The port on which to connect to the remote host.
   * @param {grpc.ClientCredentials=} opts.sslCreds
   *   A ClientCredentials for use with an SSL-enabled channel.
   * @param {Object=} opts.clientConfig
   *   The customized config to build the call settings. See
   *   {@link gax.constructSettings} for the format.
   */
  this.noTemplatesApiServiceClient = function(opts) {
    return new NoTemplatesApiServiceClient(gaxGrpc, noTemplatesApiServiceStubProtos, opts);
  };
  extend(this.noTemplatesApiServiceClient, NoTemplatesApiServiceClient);
}
module.exports = NoTemplatesApiServiceClientBuilder;
module.exports.SERVICE_ADDRESS = SERVICE_ADDRESS;
module.exports.ALL_SCOPES = ALL_SCOPES;
============== file: src/v1/no_templates_api_service_client_config.json ==============
{
  "interfaces": {
    "google.cloud.example.v1.NoTemplatesAPIService": {
      "retry_codes": {},
      "retry_params": {},
      "methods": {
        "Increment": {
          "timeout_millis": 10000
        }
      }
    }
  }
}

============== file: test/gapic.js ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';

var assert = require('assert');
var example = require('../src');

var FAKE_STATUS_CODE = 1;
var error = new Error();
error.code = FAKE_STATUS_CODE;

describe('NoTemplatesApiServiceClient', function() {
  describe('increment', function() {
    it('invokes increment without error', function(done) {
      var client = example();

      // Mock request
      var request = {};

      // Mock Grpc layer
      client._increment = mockSimpleGrpcMethod(request);

      client.increment(request, function(err) {
        assert.ifError(err);
        done();
      });
    });

    it('invokes increment with error', function(done) {
      var client = example();

      // Mock request
      var request = {};

      // Mock Grpc layer
      client._increment = mockSimpleGrpcMethod(request, null, error);

      client.increment(request, function(err) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

});

function mockSimpleGrpcMethod(expectedRequest, response, error) {
  return function(actualRequest, options, callback) {
    assert.deepStrictEqual(actualRequest, expectedRequest);
    if (error) {
      callback(error);
    } else if (response) {
      callback(null, response);
    } else {
      callback(null);
    }
  };
}

