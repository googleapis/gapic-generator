
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of a bucket.
bucket = ''  # TODO: Update placeholder value.

# The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
# group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''  # TODO: Update placeholder value.

request = service.bucketAccessControls().delete(bucket=bucket, entity=entity)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of a bucket.
bucket = ''  # TODO: Update placeholder value.

# The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
# group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''  # TODO: Update placeholder value.

request = service.bucketAccessControls().get(bucket=bucket, entity=entity)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of a bucket.
bucket = ''  # TODO: Update placeholder value.

bucket_access_control_body = {
    # TODO: Add desired entries of the request body.
}

request = service.bucketAccessControls().insert(bucket=bucket, body=bucket_access_control_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of a bucket.
bucket = ''  # TODO: Update placeholder value.

request = service.bucketAccessControls().list(bucket=bucket)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of a bucket.
bucket = ''  # TODO: Update placeholder value.

# The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
# group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''  # TODO: Update placeholder value.

bucket_access_control_body = {
    # TODO: Add desired entries of the request body. Only assigned entries
    # will be changed:
}

request = service.bucketAccessControls().patch(bucket=bucket, entity=entity, body=bucket_access_control_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of a bucket.
bucket = ''  # TODO: Update placeholder value.

# The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
# group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''  # TODO: Update placeholder value.

bucket_access_control_body = {
    # TODO: Add desired entries of the request body.
}

request = service.bucketAccessControls().update(bucket=bucket, entity=entity, body=bucket_access_control_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of a bucket.
bucket = ''  # TODO: Update placeholder value.

request = service.buckets().delete(bucket=bucket)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of a bucket.
bucket = ''  # TODO: Update placeholder value.

request = service.buckets().get(bucket=bucket)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# A valid API project identifier.
project = ''  # TODO: Update placeholder value.

bucket_body = {
    # TODO: Add desired entries of the request body.
}

request = service.buckets().insert(project=project, body=bucket_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# A valid API project identifier.
project = ''  # TODO: Update placeholder value.

request = service.buckets().list(project=project)
while request is not None:
    response = request.execute()

    for bucket in response['items']:
        # TODO: Change code below to process each `bucket` resource:
        pprint(bucket)

    request = service.buckets().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of a bucket.
bucket = ''  # TODO: Update placeholder value.

bucket_body = {
    # TODO: Add desired entries of the request body. Only assigned entries
    # will be changed:
}

request = service.buckets().patch(bucket=bucket, body=bucket_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of a bucket.
bucket = ''  # TODO: Update placeholder value.

bucket_body = {
    # TODO: Add desired entries of the request body.
}

request = service.buckets().update(bucket=bucket, body=bucket_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

channel_body = {
    # TODO: Add desired entries of the request body.
}

request = service.channels().stop(body=channel_body)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of a bucket.
bucket = ''  # TODO: Update placeholder value.

# The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
# group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''  # TODO: Update placeholder value.

request = service.defaultObjectAccessControls().delete(bucket=bucket, entity=entity)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of a bucket.
bucket = ''  # TODO: Update placeholder value.

# The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
# group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''  # TODO: Update placeholder value.

request = service.defaultObjectAccessControls().get(bucket=bucket, entity=entity)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of a bucket.
bucket = ''  # TODO: Update placeholder value.

object_access_control_body = {
    # TODO: Add desired entries of the request body.
}

request = service.defaultObjectAccessControls().insert(bucket=bucket, body=object_access_control_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of a bucket.
bucket = ''  # TODO: Update placeholder value.

request = service.defaultObjectAccessControls().list(bucket=bucket)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of a bucket.
bucket = ''  # TODO: Update placeholder value.

# The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
# group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''  # TODO: Update placeholder value.

object_access_control_body = {
    # TODO: Add desired entries of the request body. Only assigned entries
    # will be changed:
}

request = service.defaultObjectAccessControls().patch(bucket=bucket, entity=entity, body=object_access_control_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of a bucket.
bucket = ''  # TODO: Update placeholder value.

# The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
# group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''  # TODO: Update placeholder value.

object_access_control_body = {
    # TODO: Add desired entries of the request body.
}

request = service.defaultObjectAccessControls().update(bucket=bucket, entity=entity, body=object_access_control_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of a bucket.
bucket = ''  # TODO: Update placeholder value.

# Name of the object. For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
object = ''  # TODO: Update placeholder value.

# The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
# group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''  # TODO: Update placeholder value.

request = service.objectAccessControls().delete(bucket=bucket, object=object, entity=entity)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of a bucket.
bucket = ''  # TODO: Update placeholder value.

# Name of the object. For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
object = ''  # TODO: Update placeholder value.

# The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
# group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''  # TODO: Update placeholder value.

request = service.objectAccessControls().get(bucket=bucket, object=object, entity=entity)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of a bucket.
bucket = ''  # TODO: Update placeholder value.

# Name of the object. For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
object = ''  # TODO: Update placeholder value.

object_access_control_body = {
    # TODO: Add desired entries of the request body.
}

request = service.objectAccessControls().insert(bucket=bucket, object=object, body=object_access_control_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of a bucket.
bucket = ''  # TODO: Update placeholder value.

# Name of the object. For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
object = ''  # TODO: Update placeholder value.

request = service.objectAccessControls().list(bucket=bucket, object=object)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of a bucket.
bucket = ''  # TODO: Update placeholder value.

# Name of the object. For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
object = ''  # TODO: Update placeholder value.

# The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
# group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''  # TODO: Update placeholder value.

object_access_control_body = {
    # TODO: Add desired entries of the request body. Only assigned entries
    # will be changed:
}

request = service.objectAccessControls().patch(bucket=bucket, object=object, entity=entity, body=object_access_control_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of a bucket.
bucket = ''  # TODO: Update placeholder value.

# Name of the object. For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
object = ''  # TODO: Update placeholder value.

# The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
# group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''  # TODO: Update placeholder value.

object_access_control_body = {
    # TODO: Add desired entries of the request body.
}

request = service.objectAccessControls().update(bucket=bucket, object=object, entity=entity, body=object_access_control_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of the bucket in which to store the new object.
destination_bucket = ''  # TODO: Update placeholder value.

# Name of the new object. For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
destination_object = ''  # TODO: Update placeholder value.

compose_request_body = {
    # TODO: Add desired entries of the request body.
}

# TODO: Use `compose_media` in place of `compose` below to download media content.
# For multipart download options, see:
# https://google.github.io/google-api-python-client/docs/epy/googleapiclient.http.MediaIoBaseDownload-class.html

request = service.objects().compose(destinationBucket=destination_bucket, destinationObject=destination_object, body=compose_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of the bucket in which to find the source object.
source_bucket = ''  # TODO: Update placeholder value.

# Name of the source object. For information about how to URL encode object names to be path safe,
# see Encoding URI Path Parts.
source_object = ''  # TODO: Update placeholder value.

# Name of the bucket in which to store the new object. Overrides the provided object metadata's
# bucket value, if any.For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
destination_bucket = ''  # TODO: Update placeholder value.

# Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
# object metadata's name value, if any.
destination_object = ''  # TODO: Update placeholder value.

object_body = {
    # TODO: Add desired entries of the request body.
}

# TODO: Use `copy_media` in place of `copy` below to download media content.
# For multipart download options, see:
# https://google.github.io/google-api-python-client/docs/epy/googleapiclient.http.MediaIoBaseDownload-class.html

request = service.objects().copy(sourceBucket=source_bucket, sourceObject=source_object, destinationBucket=destination_bucket, destinationObject=destination_object, body=object_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of the bucket in which the object resides.
bucket = ''  # TODO: Update placeholder value.

# Name of the object. For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
object = ''  # TODO: Update placeholder value.

request = service.objects().delete(bucket=bucket, object=object)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of the bucket in which the object resides.
bucket = ''  # TODO: Update placeholder value.

# Name of the object. For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
object = ''  # TODO: Update placeholder value.

# TODO: Use `get_media` in place of `get` below to download media content.
# For multipart download options, see:
# https://google.github.io/google-api-python-client/docs/epy/googleapiclient.http.MediaIoBaseDownload-class.html

request = service.objects().get(bucket=bucket, object=object)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of the bucket in which to store the new object. Overrides the provided object metadata's
# bucket value, if any.
bucket = ''  # TODO: Update placeholder value.

object_body = {
    # TODO: Add desired entries of the request body.
}

# TODO: Add desired media content for upload. For more information, see:
# https://developers.google.com/api-client-library/python/guide/media_upload

request = service.objects().insert(bucket=bucket, body=object_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of the bucket in which to look for objects.
bucket = ''  # TODO: Update placeholder value.

request = service.objects().list(bucket=bucket)
while request is not None:
    response = request.execute()

    for object2 in response['items']:
        # TODO: Change code below to process each `object2` resource:
        pprint(object2)

    request = service.objects().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of the bucket in which the object resides.
bucket = ''  # TODO: Update placeholder value.

# Name of the object. For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
object = ''  # TODO: Update placeholder value.

object_body = {
    # TODO: Add desired entries of the request body. Only assigned entries
    # will be changed:
}

request = service.objects().patch(bucket=bucket, object=object, body=object_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of the bucket in which to find the source object.
source_bucket = ''  # TODO: Update placeholder value.

# Name of the source object. For information about how to URL encode object names to be path safe,
# see Encoding URI Path Parts.
source_object = ''  # TODO: Update placeholder value.

# Name of the bucket in which to store the new object. Overrides the provided object metadata's
# bucket value, if any.
destination_bucket = ''  # TODO: Update placeholder value.

# Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
# object metadata's name value, if any. For information about how to URL encode object names to be
# path safe, see Encoding URI Path Parts.
destination_object = ''  # TODO: Update placeholder value.

object_body = {
    # TODO: Add desired entries of the request body.
}

request = service.objects().rewrite(sourceBucket=source_bucket, sourceObject=source_object, destinationBucket=destination_bucket, destinationObject=destination_object, body=object_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of the bucket in which the object resides.
bucket = ''  # TODO: Update placeholder value.

# Name of the object. For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
object = ''  # TODO: Update placeholder value.

object_body = {
    # TODO: Add desired entries of the request body.
}

# TODO: Use `update_media` in place of `update` below to download media content.
# For multipart download options, see:
# https://google.github.io/google-api-python-client/docs/epy/googleapiclient.http.MediaIoBaseDownload-class.html

request = service.objects().update(bucket=bucket, object=object, body=object_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)

# Name of the bucket in which to look for objects.
bucket = ''  # TODO: Update placeholder value.

channel_body = {
    # TODO: Add desired entries of the request body.
}

request = service.objects().watchAll(bucket=bucket, body=channel_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
