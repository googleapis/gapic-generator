
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Name of a bucket.
bucket = ''

# * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
#   group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''

request = service.bucketAccessControls().delete(bucket=bucket, entity=entity)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Name of a bucket.
bucket = ''

# * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
#   group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''

request = service.bucketAccessControls().get(bucket=bucket, entity=entity)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Name of a bucket.
bucket = ''

bucket_access_control_body = {
# TODO: Add desired entries of the 'bucket_access_control_body' dict
}

request = service.bucketAccessControls().insert(bucket=bucket, body=bucket_access_control_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Name of a bucket.
bucket = ''

request = service.bucketAccessControls().list(bucket=bucket)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'patch' method:

# * Name of a bucket.
bucket = ''

# * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
#   group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''

bucket_access_control_body = {
# TODO: Add desired entries of the 'bucket_access_control_body' dict to be changed
}

request = service.bucketAccessControls().patch(bucket=bucket, entity=entity, body=bucket_access_control_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'update' method:

# * Name of a bucket.
bucket = ''

# * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
#   group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''

bucket_access_control_body = {
# TODO: Add desired entries of the 'bucket_access_control_body' dict
}

request = service.bucketAccessControls().update(bucket=bucket, entity=entity, body=bucket_access_control_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Name of a bucket.
bucket = ''

request = service.buckets().delete(bucket=bucket)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Name of a bucket.
bucket = ''

request = service.buckets().get(bucket=bucket)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * A valid API project identifier.
project = ''

bucket_body = {
# TODO: Add desired entries of the 'bucket_body' dict
}

request = service.buckets().insert(project=project, body=bucket_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * A valid API project identifier.
project = ''

buckets = service.buckets()
request = buckets.list(project=project)
while request is not None:
    response = request.execute()

    for bucket in response['items']:
        # TODO: Add code here to process each 'bucket' resource

    request = buckets.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'patch' method:

# * Name of a bucket.
bucket = ''

bucket_body = {
# TODO: Add desired entries of the 'bucket_body' dict to be changed
}

request = service.buckets().patch(bucket=bucket, body=bucket_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'update' method:

# * Name of a bucket.
bucket = ''

bucket_body = {
# TODO: Add desired entries of the 'bucket_body' dict
}

request = service.buckets().update(bucket=bucket, body=bucket_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)



channel_body = {
# TODO: Add desired entries of the 'channel_body' dict
}

request = service.channels().stop(body=channel_body)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Name of a bucket.
bucket = ''

# * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
#   group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''

request = service.defaultObjectAccessControls().delete(bucket=bucket, entity=entity)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Name of a bucket.
bucket = ''

# * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
#   group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''

request = service.defaultObjectAccessControls().get(bucket=bucket, entity=entity)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Name of a bucket.
bucket = ''

object_access_control_body = {
# TODO: Add desired entries of the 'object_access_control_body' dict
}

request = service.defaultObjectAccessControls().insert(bucket=bucket, body=object_access_control_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Name of a bucket.
bucket = ''

request = service.defaultObjectAccessControls().list(bucket=bucket)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'patch' method:

# * Name of a bucket.
bucket = ''

# * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
#   group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''

object_access_control_body = {
# TODO: Add desired entries of the 'object_access_control_body' dict to be changed
}

request = service.defaultObjectAccessControls().patch(bucket=bucket, entity=entity, body=object_access_control_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'update' method:

# * Name of a bucket.
bucket = ''

# * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
#   group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''

object_access_control_body = {
# TODO: Add desired entries of the 'object_access_control_body' dict
}

request = service.defaultObjectAccessControls().update(bucket=bucket, entity=entity, body=object_access_control_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Name of a bucket.
bucket = ''

# * Name of the object. For information about how to URL encode object names to be path safe, see
#   Encoding URI Path Parts.
object = ''

# * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
#   group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''

request = service.objectAccessControls().delete(bucket=bucket, object=object, entity=entity)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Name of a bucket.
bucket = ''

# * Name of the object. For information about how to URL encode object names to be path safe, see
#   Encoding URI Path Parts.
object = ''

# * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
#   group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''

request = service.objectAccessControls().get(bucket=bucket, object=object, entity=entity)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Name of a bucket.
bucket = ''

# * Name of the object. For information about how to URL encode object names to be path safe, see
#   Encoding URI Path Parts.
object = ''

object_access_control_body = {
# TODO: Add desired entries of the 'object_access_control_body' dict
}

request = service.objectAccessControls().insert(bucket=bucket, object=object, body=object_access_control_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Name of a bucket.
bucket = ''

# * Name of the object. For information about how to URL encode object names to be path safe, see
#   Encoding URI Path Parts.
object = ''

request = service.objectAccessControls().list(bucket=bucket, object=object)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'patch' method:

# * Name of a bucket.
bucket = ''

# * Name of the object. For information about how to URL encode object names to be path safe, see
#   Encoding URI Path Parts.
object = ''

# * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
#   group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''

object_access_control_body = {
# TODO: Add desired entries of the 'object_access_control_body' dict to be changed
}

request = service.objectAccessControls().patch(bucket=bucket, object=object, entity=entity, body=object_access_control_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'update' method:

# * Name of a bucket.
bucket = ''

# * Name of the object. For information about how to URL encode object names to be path safe, see
#   Encoding URI Path Parts.
object = ''

# * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
#   group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''

object_access_control_body = {
# TODO: Add desired entries of the 'object_access_control_body' dict
}

request = service.objectAccessControls().update(bucket=bucket, object=object, entity=entity, body=object_access_control_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'compose' method:

# * Name of the bucket in which to store the new object.
destinationBucket = ''

# * Name of the new object. For information about how to URL encode object names to be path safe, see
#   Encoding URI Path Parts.
destinationObject = ''

compose_request_body = {
# TODO: Add desired entries of the 'compose_request_body' dict
}

request = service.objects().compose(destinationBucket=destinationBucket, destinationObject=destinationObject, body=compose_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'copy' method:

# * Name of the bucket in which to find the source object.
sourceBucket = ''

# * Name of the source object. For information about how to URL encode object names to be path safe,
#   see Encoding URI Path Parts.
sourceObject = ''

# * Name of the bucket in which to store the new object. Overrides the provided object metadata's
#   bucket value, if any.For information about how to URL encode object names to be path safe, see
#   Encoding URI Path Parts.
destinationBucket = ''

# * Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
#   object metadata's name value, if any.
destinationObject = ''

object__body = {
# TODO: Add desired entries of the 'object__body' dict
}

request = service.objects().copy(sourceBucket=sourceBucket, sourceObject=sourceObject, destinationBucket=destinationBucket, destinationObject=destinationObject, body=object__body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Name of the bucket in which the object resides.
bucket = ''

# * Name of the object. For information about how to URL encode object names to be path safe, see
#   Encoding URI Path Parts.
object = ''

request = service.objects().delete(bucket=bucket, object=object)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Name of the bucket in which the object resides.
bucket = ''

# * Name of the object. For information about how to URL encode object names to be path safe, see
#   Encoding URI Path Parts.
object = ''

request = service.objects().get(bucket=bucket, object=object)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Name of the bucket in which to store the new object. Overrides the provided object metadata's
#   bucket value, if any.
bucket = ''

object__body = {
# TODO: Add desired entries of the 'object__body' dict
}

request = service.objects().insert(bucket=bucket, body=object__body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Name of the bucket in which to look for objects.
bucket = ''

objects = service.objects()
request = objects.list(bucket=bucket)
while request is not None:
    response = request.execute()

    for object_ in response['items']:
        # TODO: Add code here to process each 'object_' resource

    request = objects.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'patch' method:

# * Name of the bucket in which the object resides.
bucket = ''

# * Name of the object. For information about how to URL encode object names to be path safe, see
#   Encoding URI Path Parts.
object = ''

object__body = {
# TODO: Add desired entries of the 'object__body' dict to be changed
}

request = service.objects().patch(bucket=bucket, object=object, body=object__body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'rewrite' method:

# * Name of the bucket in which to find the source object.
sourceBucket = ''

# * Name of the source object. For information about how to URL encode object names to be path safe,
#   see Encoding URI Path Parts.
sourceObject = ''

# * Name of the bucket in which to store the new object. Overrides the provided object metadata's
#   bucket value, if any.
destinationBucket = ''

# * Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
#   object metadata's name value, if any. For information about how to URL encode object names to be
#   path safe, see Encoding URI Path Parts.
destinationObject = ''

object__body = {
# TODO: Add desired entries of the 'object__body' dict
}

request = service.objects().rewrite(sourceBucket=sourceBucket, sourceObject=sourceObject, destinationBucket=destinationBucket, destinationObject=destinationObject, body=object__body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'update' method:

# * Name of the bucket in which the object resides.
bucket = ''

# * Name of the object. For information about how to URL encode object names to be path safe, see
#   Encoding URI Path Parts.
object = ''

object__body = {
# TODO: Add desired entries of the 'object__body' dict
}

request = service.objects().update(bucket=bucket, object=object, body=object__body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the storage service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'watchAll' method:

# * Name of the bucket in which to look for objects.
bucket = ''

channel_body = {
# TODO: Add desired entries of the 'channel_body' dict
}

request = service.objects().watchAll(bucket=bucket, body=channel_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
