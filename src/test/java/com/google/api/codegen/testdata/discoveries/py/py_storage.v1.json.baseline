
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Name of a bucket.
bucket = '{MY-BUCKET}'

# The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
# group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = '{MY-ENTITY}'


request = service.bucketAccessControls().delete(bucket=bucket, entity=entity)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Name of a bucket.
bucket = '{MY-BUCKET}'

# The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
# group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = '{MY-ENTITY}'


request = service.bucketAccessControls().get(bucket=bucket, entity=entity)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# Name of a bucket.
bucket = '{MY-BUCKET}'


bucket_access_control_body = {
    # TODO: Add desired entries of the request body.
}


request = service.bucketAccessControls().insert(bucket=bucket, body=bucket_access_control_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# Name of a bucket.
bucket = '{MY-BUCKET}'


request = service.bucketAccessControls().list(bucket=bucket)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# Name of a bucket.
bucket = '{MY-BUCKET}'

# The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
# group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = '{MY-ENTITY}'


bucket_access_control_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.bucketAccessControls().patch(bucket=bucket, entity=entity, body=bucket_access_control_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# Name of a bucket.
bucket = '{MY-BUCKET}'

# The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
# group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = '{MY-ENTITY}'


bucket_access_control_body = {
    # TODO: Add desired entries of the request body.
}


request = service.bucketAccessControls().update(bucket=bucket, entity=entity, body=bucket_access_control_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `delete` method:

# Name of a bucket.
bucket = '{MY-BUCKET}'


request = service.buckets().delete(bucket=bucket)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `get` method:

# Name of a bucket.
bucket = '{MY-BUCKET}'


request = service.buckets().get(bucket=bucket)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# A valid API project identifier.
project = '{MY-PROJECT}'


bucket_body = {
    # TODO: Add desired entries of the request body.
}


request = service.buckets().insert(project=project, body=bucket_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# A valid API project identifier.
project = '{MY-PROJECT}'


buckets = service.buckets()
request = buckets.list(project=project)
while request is not None:
    response = request.execute()

    for bucket in response['items']:
        # TODO: Change code below to process each `bucket` resource:
        pprint(bucket)

    request = buckets.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `patch` method:

# Name of a bucket.
bucket = '{MY-BUCKET}'


bucket_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.buckets().patch(bucket=bucket, body=bucket_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `update` method:

# Name of a bucket.
bucket = '{MY-BUCKET}'


bucket_body = {
    # TODO: Add desired entries of the request body.
}


request = service.buckets().update(bucket=bucket, body=bucket_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


channel_body = {
    # TODO: Add desired entries of the request body.
}


request = service.channels().stop(body=channel_body)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Name of a bucket.
bucket = '{MY-BUCKET}'

# The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
# group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = '{MY-ENTITY}'


request = service.defaultObjectAccessControls().delete(bucket=bucket, entity=entity)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Name of a bucket.
bucket = '{MY-BUCKET}'

# The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
# group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = '{MY-ENTITY}'


request = service.defaultObjectAccessControls().get(bucket=bucket, entity=entity)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# Name of a bucket.
bucket = '{MY-BUCKET}'


object_access_control_body = {
    # TODO: Add desired entries of the request body.
}


request = service.defaultObjectAccessControls().insert(bucket=bucket, body=object_access_control_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# Name of a bucket.
bucket = '{MY-BUCKET}'


request = service.defaultObjectAccessControls().list(bucket=bucket)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# Name of a bucket.
bucket = '{MY-BUCKET}'

# The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
# group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = '{MY-ENTITY}'


object_access_control_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.defaultObjectAccessControls().patch(bucket=bucket, entity=entity, body=object_access_control_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# Name of a bucket.
bucket = '{MY-BUCKET}'

# The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
# group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = '{MY-ENTITY}'


object_access_control_body = {
    # TODO: Add desired entries of the request body.
}


request = service.defaultObjectAccessControls().update(bucket=bucket, entity=entity, body=object_access_control_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Name of a bucket.
bucket = '{MY-BUCKET}'

# Name of the object. For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
object = '{MY-OBJECT}'

# The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
# group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = '{MY-ENTITY}'


request = service.objectAccessControls().delete(bucket=bucket, object=object, entity=entity)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Name of a bucket.
bucket = '{MY-BUCKET}'

# Name of the object. For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
object = '{MY-OBJECT}'

# The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
# group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = '{MY-ENTITY}'


request = service.objectAccessControls().get(bucket=bucket, object=object, entity=entity)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# Name of a bucket.
bucket = '{MY-BUCKET}'

# Name of the object. For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
object = '{MY-OBJECT}'


object_access_control_body = {
    # TODO: Add desired entries of the request body.
}


request = service.objectAccessControls().insert(bucket=bucket, object=object, body=object_access_control_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Name of a bucket.
bucket = '{MY-BUCKET}'

# Name of the object. For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
object = '{MY-OBJECT}'


request = service.objectAccessControls().list(bucket=bucket, object=object)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# Name of a bucket.
bucket = '{MY-BUCKET}'

# Name of the object. For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
object = '{MY-OBJECT}'

# The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
# group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = '{MY-ENTITY}'


object_access_control_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.objectAccessControls().patch(bucket=bucket, object=object, entity=entity, body=object_access_control_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# Name of a bucket.
bucket = '{MY-BUCKET}'

# Name of the object. For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
object = '{MY-OBJECT}'

# The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
# group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = '{MY-ENTITY}'


object_access_control_body = {
    # TODO: Add desired entries of the request body.
}


request = service.objectAccessControls().update(bucket=bucket, object=object, entity=entity, body=object_access_control_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `compose` method:

# Name of the bucket in which to store the new object.
destinationBucket = '{MY-DESTINATION-BUCKET}'

# Name of the new object. For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
destinationObject = '{MY-DESTINATION-OBJECT}'


compose_request_body = {
    # TODO: Add desired entries of the request body.
}


# TODO: Use `compose_media` in place of `compose` below to download media content.
# For multipart download options, see:
# https://google.github.io/google-api-python-client/docs/epy/googleapiclient.http.MediaIoBaseDownload-class.html

request = service.objects().compose(destinationBucket=destinationBucket, destinationObject=destinationObject, body=compose_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `copy` method:

# Name of the bucket in which to find the source object.
sourceBucket = '{MY-SOURCE-BUCKET}'

# Name of the source object. For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
sourceObject = '{MY-SOURCE-OBJECT}'

# Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket
# value, if any.For information about how to URL encode object names to be path safe, see Encoding URI
# Path Parts.
destinationBucket = '{MY-DESTINATION-BUCKET}'

# Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
# object metadata's name value, if any.
destinationObject = '{MY-DESTINATION-OBJECT}'


object__body = {
    # TODO: Add desired entries of the request body.
}


# TODO: Use `copy_media` in place of `copy` below to download media content.
# For multipart download options, see:
# https://google.github.io/google-api-python-client/docs/epy/googleapiclient.http.MediaIoBaseDownload-class.html

request = service.objects().copy(sourceBucket=sourceBucket, sourceObject=sourceObject, destinationBucket=destinationBucket, destinationObject=destinationObject, body=object__body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Name of the bucket in which the object resides.
bucket = '{MY-BUCKET}'

# Name of the object. For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
object = '{MY-OBJECT}'


request = service.objects().delete(bucket=bucket, object=object)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Name of the bucket in which the object resides.
bucket = '{MY-BUCKET}'

# Name of the object. For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
object = '{MY-OBJECT}'


# TODO: Use `get_media` in place of `get` below to download media content.
# For multipart download options, see:
# https://google.github.io/google-api-python-client/docs/epy/googleapiclient.http.MediaIoBaseDownload-class.html

request = service.objects().get(bucket=bucket, object=object)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket
# value, if any.
bucket = '{MY-BUCKET}'


object__body = {
    # TODO: Add desired entries of the request body.
}


# TODO: Add desired media content for upload. For more information, see:
# https://developers.google.com/api-client-library/python/guide/media_upload


request = service.objects().insert(bucket=bucket, body=object__body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# Name of the bucket in which to look for objects.
bucket = '{MY-BUCKET}'


objects = service.objects()
request = objects.list(bucket=bucket)
while request is not None:
    response = request.execute()

    for object_ in response['items']:
        # TODO: Change code below to process each `object_` resource:
        pprint(object_)

    request = objects.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# Name of the bucket in which the object resides.
bucket = '{MY-BUCKET}'

# Name of the object. For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
object = '{MY-OBJECT}'


object__body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.objects().patch(bucket=bucket, object=object, body=object__body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `rewrite` method:

# Name of the bucket in which to find the source object.
sourceBucket = '{MY-SOURCE-BUCKET}'

# Name of the source object. For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
sourceObject = '{MY-SOURCE-OBJECT}'

# Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket
# value, if any.
destinationBucket = '{MY-DESTINATION-BUCKET}'

# Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
# object metadata's name value, if any. For information about how to URL encode object names to be
# path safe, see Encoding URI Path Parts.
destinationObject = '{MY-DESTINATION-OBJECT}'


object__body = {
    # TODO: Add desired entries of the request body.
}


request = service.objects().rewrite(sourceBucket=sourceBucket, sourceObject=sourceObject, destinationBucket=destinationBucket, destinationObject=destinationObject, body=object__body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# Name of the bucket in which the object resides.
bucket = '{MY-BUCKET}'

# Name of the object. For information about how to URL encode object names to be path safe, see
# Encoding URI Path Parts.
object = '{MY-OBJECT}'


object__body = {
    # TODO: Add desired entries of the request body.
}


# TODO: Use `update_media` in place of `update` below to download media content.
# For multipart download options, see:
# https://google.github.io/google-api-python-client/docs/epy/googleapiclient.http.MediaIoBaseDownload-class.html

request = service.objects().update(bucket=bucket, object=object, body=object__body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud Storage JSON API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/storage
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('storage', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `watchAll` method:

# Name of the bucket in which to look for objects.
bucket = '{MY-BUCKET}'


channel_body = {
    # TODO: Add desired entries of the request body.
}


request = service.objects().watchAll(bucket=bucket, body=channel_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
