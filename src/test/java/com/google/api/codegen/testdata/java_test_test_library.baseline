============== file: src/test/java/com/google/gcloud/pubsub/spi/LibraryServiceTest.java ==============
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

package com.google.gcloud.pubsub.spi;

import com.google.api.gax.core.PageAccessor;
import com.google.api.gax.testing.MockGrpcService;
import com.google.api.gax.testing.MockServiceHelper;
import com.google.common.collect.Lists;
import com.google.example.library.v1.AddCommentsRequest;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.Comment;
import com.google.example.library.v1.CreateBookRequest;
import com.google.example.library.v1.CreateShelfRequest;
import com.google.example.library.v1.DeleteBookRequest;
import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.GetBookFromArchiveRequest;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.GetShelfRequest;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.ListStringsRequest;
import com.google.example.library.v1.ListStringsResponse;
import com.google.example.library.v1.MergeShelvesRequest;
import com.google.example.library.v1.MoveBookRequest;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.Shelf;
import com.google.example.library.v1.UpdateBookIndexRequest;
import com.google.example.library.v1.UpdateBookRequest;
import com.google.protobuf.ByteString;
import com.google.protobuf.Empty;
import com.google.protobuf.GeneratedMessage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import junit.framework.Assert;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

@javax.annotation.Generated("by GAPIC")
public class LibraryServiceTest {
  private static MockServiceHelper serviceHelper;
  private LibraryServiceApi api;

  @BeforeClass
  public static void startStaticServer() {
    MockLibraryService mockService = new MockLibraryService();
    serviceHelper = new MockServiceHelper("in-process-1", mockService);
    serviceHelper.start();
  }

  @AfterClass
  public static void stopServer() {
    serviceHelper.stop();
  }

  @Before
  public void setUp() throws IOException {
    serviceHelper.reset();
    LibraryServiceSettings settings = LibraryServiceSettings.defaultBuilder()
        .provideChannelWith(serviceHelper.createChannel(), true)
        .build();
    api = LibraryServiceApi.create(settings);
  }

  @After
  public void tearDown() throws Exception {
    api.close();
  }

  @Test
  @SuppressWarnings("all")
  public void createShelfTest() {
    Shelf expectedResponse = Shelf.newBuilder()
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    Shelf shelf = Shelf.newBuilder().build();
    Shelf actualResponse =
        api.createShelf(shelf);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> requests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, requests.size());
    CreateShelfRequest request = (CreateShelfRequest)requests.get(0);

    Assert.assertEquals(request.getShelf(), shelf);
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfTest() {
    Shelf expectedResponse = Shelf.newBuilder()
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatShelfName("[SHELF]");
    String options = "";
    Shelf actualResponse =
        api.getShelf(formattedName, options);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> requests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, requests.size());
    GetShelfRequest request = (GetShelfRequest)requests.get(0);

    Assert.assertEquals(request.getName(), formattedName);
    Assert.assertEquals(request.getOptions(), options);
  }

  @Test
  @SuppressWarnings("all")
  public void listShelvesTest() {
    ListShelvesResponse expectedResponse = ListShelvesResponse.newBuilder()
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);


    PageAccessor<Shelf> pageAccessor = api.listShelves();

    // PageAccessor will not make actual request until it is being used.
    // Add all the pages here in order to make grpc requests.
    List<Shelf> resources = Lists.newArrayList(pageAccessor.getPageValues());
    Assert.assertEquals(0, resources.size());

    List<GeneratedMessage> requests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, requests.size());
    ListShelvesRequest request = (ListShelvesRequest)requests.get(0);

  }

  @Test
  @SuppressWarnings("all")
  public void deleteShelfTest() {
    Empty expectedResponse = Empty.newBuilder()
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatShelfName("[SHELF]");
    Empty actualResponse =
        api.deleteShelf(formattedName);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> requests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, requests.size());
    DeleteShelfRequest request = (DeleteShelfRequest)requests.get(0);

    Assert.assertEquals(request.getName(), formattedName);
  }

  @Test
  @SuppressWarnings("all")
  public void mergeShelvesTest() {
    Shelf expectedResponse = Shelf.newBuilder()
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatShelfName("[SHELF]");
    String formattedOtherShelfName = LibraryServiceApi.formatShelfName("[SHELF]");
    Shelf actualResponse =
        api.mergeShelves(formattedName, formattedOtherShelfName);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> requests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, requests.size());
    MergeShelvesRequest request = (MergeShelvesRequest)requests.get(0);

    Assert.assertEquals(request.getName(), formattedName);
    Assert.assertEquals(request.getOtherShelfName(), formattedOtherShelfName);
  }

  @Test
  @SuppressWarnings("all")
  public void createBookTest() {
    Book expectedResponse = Book.newBuilder()
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatShelfName("[SHELF]");
    Book book = Book.newBuilder().build();
    Book actualResponse =
        api.createBook(formattedName, book);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> requests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, requests.size());
    CreateBookRequest request = (CreateBookRequest)requests.get(0);

    Assert.assertEquals(request.getName(), formattedName);
    Assert.assertEquals(request.getBook(), book);
  }

  @Test
  @SuppressWarnings("all")
  public void publishSeriesTest() {
    PublishSeriesResponse expectedResponse = PublishSeriesResponse.newBuilder()
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    Shelf shelf = Shelf.newBuilder().build();
    List<Book> books = new ArrayList<>();
    PublishSeriesResponse actualResponse =
        api.publishSeries(shelf, books);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> requests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, requests.size());
    PublishSeriesRequest request = (PublishSeriesRequest)requests.get(0);

    Assert.assertEquals(request.getShelf(), shelf);
    Assert.assertEquals(request.getBooks(), books);
  }

  @Test
  @SuppressWarnings("all")
  public void getBookTest() {
    Book expectedResponse = Book.newBuilder()
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatBookName("[SHELF]", "[BOOK]");
    Book actualResponse =
        api.getBook(formattedName);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> requests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, requests.size());
    GetBookRequest request = (GetBookRequest)requests.get(0);

    Assert.assertEquals(request.getName(), formattedName);
  }

  @Test
  @SuppressWarnings("all")
  public void listBooksTest() {
    ListBooksResponse expectedResponse = ListBooksResponse.newBuilder()
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatShelfName("[SHELF]");
    PageAccessor<Book> pageAccessor = api.listBooks(formattedName);

    // PageAccessor will not make actual request until it is being used.
    // Add all the pages here in order to make grpc requests.
    List<Book> resources = Lists.newArrayList(pageAccessor.getPageValues());
    Assert.assertEquals(0, resources.size());

    List<GeneratedMessage> requests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, requests.size());
    ListBooksRequest request = (ListBooksRequest)requests.get(0);

    Assert.assertEquals(request.getName(), formattedName);
  }

  @Test
  @SuppressWarnings("all")
  public void deleteBookTest() {
    Empty expectedResponse = Empty.newBuilder()
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatBookName("[SHELF]", "[BOOK]");
    Empty actualResponse =
        api.deleteBook(formattedName);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> requests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, requests.size());
    DeleteBookRequest request = (DeleteBookRequest)requests.get(0);

    Assert.assertEquals(request.getName(), formattedName);
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookTest() {
    Book expectedResponse = Book.newBuilder()
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatBookName("[SHELF]", "[BOOK]");
    Book book = Book.newBuilder().build();
    Book actualResponse =
        api.updateBook(formattedName, book);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> requests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, requests.size());
    UpdateBookRequest request = (UpdateBookRequest)requests.get(0);

    Assert.assertEquals(request.getName(), formattedName);
    Assert.assertEquals(request.getBook(), book);
  }

  @Test
  @SuppressWarnings("all")
  public void moveBookTest() {
    Book expectedResponse = Book.newBuilder()
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatBookName("[SHELF]", "[BOOK]");
    String formattedOtherShelfName = LibraryServiceApi.formatShelfName("[SHELF]");
    Book actualResponse =
        api.moveBook(formattedName, formattedOtherShelfName);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> requests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, requests.size());
    MoveBookRequest request = (MoveBookRequest)requests.get(0);

    Assert.assertEquals(request.getName(), formattedName);
    Assert.assertEquals(request.getOtherShelfName(), formattedOtherShelfName);
  }

  @Test
  @SuppressWarnings("all")
  public void listStringsTest() {
    ListStringsResponse expectedResponse = ListStringsResponse.newBuilder()
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);


    PageAccessor<String> pageAccessor = api.listStrings();

    // PageAccessor will not make actual request until it is being used.
    // Add all the pages here in order to make grpc requests.
    List<String> resources = Lists.newArrayList(pageAccessor.getPageValues());
    Assert.assertEquals(0, resources.size());

    List<GeneratedMessage> requests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, requests.size());
    ListStringsRequest request = (ListStringsRequest)requests.get(0);

  }

  @Test
  @SuppressWarnings("all")
  public void addCommentsTest() {
    Empty expectedResponse = Empty.newBuilder()
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatBookName("[SHELF]", "[BOOK]");
    ByteString comment = ByteString.copyFromUtf8("");
    Comment commentsElement = Comment.newBuilder()
      .setComment(comment)
      .build();
    List<Comment> comments = Arrays.asList(commentsElement);
    Empty actualResponse =
        api.addComments(formattedName, comments);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> requests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, requests.size());
    AddCommentsRequest request = (AddCommentsRequest)requests.get(0);

    Assert.assertEquals(request.getName(), formattedName);
    Assert.assertEquals(request.getComments(), comments);
  }

  @Test
  @SuppressWarnings("all")
  public void getBookFromArchiveTest() {
    Book expectedResponse = Book.newBuilder()
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatArchivedBookName("[ARCHIVE_PATH]", "[BOOK]");
    Book actualResponse =
        api.getBookFromArchive(formattedName);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> requests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, requests.size());
    GetBookFromArchiveRequest request = (GetBookFromArchiveRequest)requests.get(0);

    Assert.assertEquals(request.getName(), formattedName);
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookIndexTest() {
    Empty expectedResponse = Empty.newBuilder()
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatBookName("[SHELF]", "[BOOK]");
    String indexName = "default index";
    String indexMapItem = "";
    Map<String, String> indexMap = new HashMap<>();
    indexMap.put("default_key", indexMapItem);
    Empty actualResponse =
        api.updateBookIndex(formattedName, indexName, indexMap);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> requests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, requests.size());
    UpdateBookIndexRequest request = (UpdateBookIndexRequest)requests.get(0);

    Assert.assertEquals(request.getName(), formattedName);
    Assert.assertEquals(request.getIndexName(), indexName);
    Assert.assertEquals(request.getIndexMap(), indexMap);
  }

}
