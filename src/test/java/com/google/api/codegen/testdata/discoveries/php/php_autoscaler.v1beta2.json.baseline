
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Autoscaler API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/autoscaler
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Autoscaler($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID of Autoscaler resource.
$project = '{MY-PROJECT}';

// Zone name of Autoscaler resource.
$zone = '{MY-ZONE}';

// Name of the Autoscaler resource.
$autoscaler = '{MY-AUTOSCALER}';


$response = $service->autoscalers->delete($project, $zone, $autoscaler);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Autoscaler API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/autoscaler
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Autoscaler($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID of Autoscaler resource.
$project = '{MY-PROJECT}';

// Zone name of Autoscaler resource.
$zone = '{MY-ZONE}';

// Name of the Autoscaler resource.
$autoscaler = '{MY-AUTOSCALER}';


$response = $service->autoscalers->get($project, $zone, $autoscaler);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Autoscaler API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/autoscaler
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Autoscaler($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// Project ID of Autoscaler resource.
$project = '{MY-PROJECT}';

// Zone name of Autoscaler resource.
$zone = '{MY-ZONE}';


$requestBody = new Google_Service_Autoscaler_Autoscaler($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->autoscalers->insert($project, $zone, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Autoscaler API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/autoscaler
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Autoscaler($client);


// TODO: Change placeholders below to desired parameter values for the `listAutoscalers` method:

// Project ID of Autoscaler resource.
$project = '{MY-PROJECT}';

// Zone name of Autoscaler resource.
$zone = '{MY-ZONE}';


$optParams = array();
do {
  $response = $service->autoscalers->listAutoscalers($project, $zone, $optParams);

  foreach ($response['items'] as $autoscaler) {
    // TODO: Change code below to process each `autoscaler` resource:
    echo '<pre>', var_export($autoscaler, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Autoscaler API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/autoscaler
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Autoscaler($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// Project ID of Autoscaler resource.
$project = '{MY-PROJECT}';

// Zone name of Autoscaler resource.
$zone = '{MY-ZONE}';

// Name of the Autoscaler resource.
$autoscaler = '{MY-AUTOSCALER}';


$requestBody = new Google_Service_Autoscaler_Autoscaler($client);
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->autoscalers->patch($project, $zone, $autoscaler, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Autoscaler API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/autoscaler
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Autoscaler($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// Project ID of Autoscaler resource.
$project = '{MY-PROJECT}';

// Zone name of Autoscaler resource.
$zone = '{MY-ZONE}';

// Name of the Autoscaler resource.
$autoscaler = '{MY-AUTOSCALER}';


$requestBody = new Google_Service_Autoscaler_Autoscaler($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->autoscalers->update($project, $zone, $autoscaler, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Autoscaler API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/autoscaler
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Autoscaler($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

<<<<<<< e199ef123dc787d193bdd6e13ee92dc514de6f48
// project
$project = '{MY-PROJECT}';
=======
$zone = '{MY-ZONE}';
>>>>>>> Add Go 3LO and API key auth support (#453)

// zone
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// operation
$operation = '{MY-OPERATION}';


$service->zoneOperations->delete($project, $zone, $operation);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Autoscaler API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/autoscaler
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Autoscaler($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

<<<<<<< e199ef123dc787d193bdd6e13ee92dc514de6f48
// project
$project = '{MY-PROJECT}';
=======
$zone = '{MY-ZONE}';
>>>>>>> Add Go 3LO and API key auth support (#453)

// zone
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// operation
$operation = '{MY-OPERATION}';


$response = $service->zoneOperations->get($project, $zone, $operation);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Autoscaler API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/autoscaler
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Autoscaler($client);


// TODO: Change placeholders below to desired parameter values for the `listZoneOperations` method:

// project
$project = '{MY-PROJECT}';

// zone
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

<<<<<<< e199ef123dc787d193bdd6e13ee92dc514de6f48
=======
$zone = '{MY-ZONE}';
>>>>>>> Add Go 3LO and API key auth support (#453)

$optParams = array();
do {
  $response = $service->zoneOperations->listZoneOperations($project, $zone, $optParams);

  foreach ($response['items'] as $operation) {
    // TODO: Change code below to process each `operation` resource:
    echo '<pre>', var_export($operation, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Autoscaler API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/autoscaler
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Autoscaler($client);


// TODO: Change placeholders below to desired parameter values for the `listZones` method:

// project
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->zones->listZones($project, $optParams);

  foreach ($response['items'] as $zone) {
    // TODO: Change code below to process each `zone` resource:
    echo '<pre>', var_export($zone, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
