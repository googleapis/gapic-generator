============== file: cloud.google.com/go/library/apiv1/UpdateBook_smoke_test.go ==============
// Copyright 2017, Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// AUTO-GENERATED CODE. DO NOT EDIT.

package library

import (
  librarypb "google.golang.org/genproto/googleapis/example/library/v1"
)

import (
  "cloud.google.com/go/internal/testutil"
  "golang.org/x/net/context"
  "google.golang.org/api/iterator"
  "testing"
)

var _ = iterator.Done

func TestLibraryServiceSmoke(t *testing.T) {
  if testing.Short() {
    t.Skip("skipping smoke test in short mode")
  }

  projectId := testutil.ProjID()
  uidSpace := testutil.NewUIDSpace("TestLibraryServiceSmoke")
  _, _ = projectId, uidSpace

  ctx := context.Background()
  c, err := NewClient(ctx)
  if err != nil {
    t.Fatal(err)
  }

  var formattedName string = LibraryBookPath("testShelf-" + uidSpace.New() + "", projectId)
  var rating librarypb.Book_Rating = librarypb.Book_GOOD
  var book = &librarypb.Book{
      Rating: rating,
  }
  var request = &librarypb.UpdateBookRequest{
      Name: formattedName,
      Book: book,
  }

  resp, err := c.UpdateBook(ctx, request)
  if err != nil {
    t.Error(err)
  } else {
    t.Log(resp)
  }
}
