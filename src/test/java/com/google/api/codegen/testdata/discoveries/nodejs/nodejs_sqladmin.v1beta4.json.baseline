
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Cloud SQL instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    // The ID of the Backup Run to delete. To find a Backup Run ID, use the list method.
    id: '', // TODO: Update placeholder value(s).

    auth: authClient
  };

  sqladmin.backupRuns.delete(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Cloud SQL instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    // The ID of this Backup Run.
    id: '', // TODO: Update placeholder value(s).

    auth: authClient
  };

  sqladmin.backupRuns.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Cloud SQL instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  sqladmin.backupRuns.list(request, function handlePage(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var itemsPage = response['items'];
    if (!itemsPage) {
      console.log('{}');
      return;
    }
    for (var i = 0; i < itemsPage.length; i++) {
      // TODO: Use itemsPage
      console.log(JSON.stringify(itemsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      sqladmin.backupRuns.list(request, handlePage);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Database instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    // Name of the database to be deleted in the instance.
    database: "{MY-DATABASE}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  sqladmin.databases.delete(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Database instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    // Name of the database in the instance.
    database: "{MY-DATABASE}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  sqladmin.databases.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Database instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties.
    },

    auth: authClient
  };

  sqladmin.databases.insert(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project for which to list Cloud SQL instances.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Cloud SQL instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  sqladmin.databases.list(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Database instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    // Name of the database to be updated in the instance.
    database: "{MY-DATABASE}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties to be changed.
    },

    auth: authClient
  };

  sqladmin.databases.patch(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Database instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    // Name of the database to be updated in the instance.
    database: "{MY-DATABASE}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties.
    },

    auth: authClient
  };

  sqladmin.databases.update(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    auth: authClient
  };

  sqladmin.flags.list(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the source as well as the clone Cloud SQL instance.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // The ID of the Cloud SQL instance to be cloned (source). This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties.
    },

    auth: authClient
  };

  sqladmin.instances.clone(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance to be deleted.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Cloud SQL instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  sqladmin.instances.delete(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance to be exported.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Cloud SQL instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties.
    },

    auth: authClient
  };

  sqladmin.instances.export(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // ID of the project that contains the read replica.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Cloud SQL instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties.
    },

    auth: authClient
  };

  sqladmin.instances.failover(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Database instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  sqladmin.instances.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Cloud SQL instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties.
    },

    auth: authClient
  };

  sqladmin.instances.import(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project to which the newly created Cloud SQL instances should belong.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties.
    },

    auth: authClient
  };

  sqladmin.instances.insert(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project for which to list Cloud SQL instances.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  sqladmin.instances.list(request, function handlePage(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var itemsPage = response['items'];
    if (!itemsPage) {
      console.log('{}');
      return;
    }
    for (var i = 0; i < itemsPage.length; i++) {
      // TODO: Use itemsPage
      console.log(JSON.stringify(itemsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      sqladmin.instances.list(request, handlePage);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Cloud SQL instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties to be changed.
    },

    auth: authClient
  };

  sqladmin.instances.patch(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // ID of the project that contains the read replica.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Cloud SQL read replica instance name.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  sqladmin.instances.promoteReplica(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Cloud SQL instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  sqladmin.instances.resetSslConfig(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance to be restarted.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Cloud SQL instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  sqladmin.instances.restart(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Cloud SQL instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties.
    },

    auth: authClient
  };

  sqladmin.instances.restoreBackup(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // ID of the project that contains the read replica.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Cloud SQL read replica instance name.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  sqladmin.instances.startReplica(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // ID of the project that contains the read replica.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Cloud SQL read replica instance name.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  sqladmin.instances.stopReplica(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Cloud SQL instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties.
    },

    auth: authClient
  };

  sqladmin.instances.update(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Instance operation ID.
    operation: "{MY-OPERATION}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  sqladmin.operations.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Cloud SQL instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  sqladmin.operations.list(request, function handlePage(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var itemsPage = response['items'];
    if (!itemsPage) {
      console.log('{}');
      return;
    }
    for (var i = 0; i < itemsPage.length; i++) {
      // TODO: Use itemsPage
      console.log(JSON.stringify(itemsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      sqladmin.operations.list(request, handlePage);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the Cloud SQL project.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Cloud SQL instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties.
    },

    auth: authClient
  };

  sqladmin.sslCerts.createEphemeral(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance to be deleted.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Cloud SQL instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    // Sha1 FingerPrint.
    sha1Fingerprint: "{MY-SHA1-FINGERPRINT}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  sqladmin.sslCerts.delete(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Cloud SQL instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    // Sha1 FingerPrint.
    sha1Fingerprint: "{MY-SHA1-FINGERPRINT}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  sqladmin.sslCerts.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project to which the newly created Cloud SQL instances should belong.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Cloud SQL instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties.
    },

    auth: authClient
  };

  sqladmin.sslCerts.insert(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project for which to list Cloud SQL instances.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Cloud SQL instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  sqladmin.sslCerts.list(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project for which to list tiers.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  sqladmin.tiers.list(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Database instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    // Host of the user in the instance.
    host: "{MY-HOST}", // TODO: Update placeholder value(s).

    // Name of the user in the instance.
    name: "{MY-NAME}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  sqladmin.users.delete(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Database instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties.
    },

    auth: authClient
  };

  sqladmin.users.insert(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Database instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  sqladmin.users.list(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud SQL Administration API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/sqladmin
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var sqladmin = google.sqladmin('v1beta4');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // Project ID of the project that contains the instance.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Database instance ID. This does not include the project ID.
    instance: "{MY-INSTANCE}", // TODO: Update placeholder value(s).

    // Host of the user in the instance.
    host: "{MY-HOST}", // TODO: Update placeholder value(s).

    // Name of the user in the instance.
    name: "{MY-NAME}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties.
    },

    auth: authClient
  };

  sqladmin.users.update(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
