
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Pub/Sub API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/pubsub
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/pubsub_v1'

service = Google::Apis::PubsubV1::PubsubService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'acknowledge_subscription' method:

# * The subscription whose message is being acknowledged.
subscription = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}'

acknowledge_request_object = Google::Apis::PubsubV1::AcknowledgeRequest.new


# Perform the call
service.acknowledge_subscription(subscription, acknowledge_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Pub/Sub API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/pubsub
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/pubsub_v1'

service = Google::Apis::PubsubV1::PubsubService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'create_subscription' method:

# * The name of the subscription. It must have the format
#   `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must start with a letter,
#   and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`), periods
#   (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters in
#   length, and it must not start with `"goog"`.
name = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}'

subscription_object = Google::Apis::PubsubV1::Subscription.new


# Perform the call
response = service.create_subscription(name, subscription_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Pub/Sub API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/pubsub
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/pubsub_v1'

service = Google::Apis::PubsubV1::PubsubService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_subscription' method:

# * The subscription to delete.
subscription = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}'

# Perform the call
service.delete_subscription(subscription)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Pub/Sub API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/pubsub
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/pubsub_v1'

service = Google::Apis::PubsubV1::PubsubService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_subscription' method:

# * The name of the subscription to get.
subscription = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}'

# Perform the call
response = service.get_subscription(subscription)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Pub/Sub API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/pubsub
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/pubsub_v1'

service = Google::Apis::PubsubV1::PubsubService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_project_subscription_iam_policy' method:

# * REQUIRED: The resource for which policy is being requested. `resource` is usually specified as a
#   path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified
#   in this value is resource specific and is specified in the documentation for the respective
#   GetIamPolicy rpc.
resource = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}'

# Perform the call
response = service.get_project_subscription_iam_policy(resource)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Pub/Sub API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/pubsub
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/pubsub_v1'

service = Google::Apis::PubsubV1::PubsubService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_subscriptions' method:

# * The name of the cloud project that subscriptions belong to.
project = 'projects/{MY-PROJECT}'

# Perform the call
result_list = service.fetch_all(items: :subscriptions) { |token|
  service.list_subscriptions(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Pub/Sub API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/pubsub
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/pubsub_v1'

service = Google::Apis::PubsubV1::PubsubService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'modify_subscription_ack_deadline' method:

# * The name of the subscription.
subscription = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}'

modify_ack_deadline_request_object = Google::Apis::PubsubV1::ModifyAckDeadlineRequest.new


# Perform the call
service.modify_subscription_ack_deadline(subscription, modify_ack_deadline_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Pub/Sub API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/pubsub
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/pubsub_v1'

service = Google::Apis::PubsubV1::PubsubService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'modify_subscription_push_config' method:

# * The name of the subscription.
subscription = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}'

modify_push_config_request_object = Google::Apis::PubsubV1::ModifyPushConfigRequest.new


# Perform the call
service.modify_subscription_push_config(subscription, modify_push_config_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Pub/Sub API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/pubsub
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/pubsub_v1'

service = Google::Apis::PubsubV1::PubsubService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'pull_subscription' method:

# * The subscription from which messages should be pulled.
subscription = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}'

pull_request_object = Google::Apis::PubsubV1::PullRequest.new


# Perform the call
response = service.pull_subscription(subscription, pull_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Pub/Sub API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/pubsub
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/pubsub_v1'

service = Google::Apis::PubsubV1::PubsubService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'set_subscription_iam_policy' method:

# * REQUIRED: The resource for which policy is being specified. `resource` is usually specified as a
#   path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified
#   in this value is resource specific and is specified in the documentation for the respective
#   SetIamPolicy rpc.
resource = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}'

set_iam_policy_request_object = Google::Apis::PubsubV1::SetIamPolicyRequest.new


# Perform the call
response = service.set_subscription_iam_policy(resource, set_iam_policy_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Pub/Sub API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/pubsub
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/pubsub_v1'

service = Google::Apis::PubsubV1::PubsubService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'test_subscription_iam_permissions' method:

# * REQUIRED: The resource for which policy detail is being requested. `resource` is usually specified
#   as a path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path
#   specified in this value is resource specific and is specified in the documentation for the
#   respective TestIamPermissions rpc.
resource = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}'

test_iam_permissions_request_object = Google::Apis::PubsubV1::TestIamPermissionsRequest.new


# Perform the call
response = service.test_subscription_iam_permissions(resource, test_iam_permissions_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Pub/Sub API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/pubsub
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/pubsub_v1'

service = Google::Apis::PubsubV1::PubsubService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'create_topic' method:

# * The name of the topic. It must have the format `"projects/{project}/topics/{topic}"`. `{topic}`
#   must start with a letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
#   underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be
#   between 3 and 255 characters in length, and it must not start with `"goog"`.
name = 'projects/{MY-PROJECT}/topics/{MY-TOPIC}'

topic_object = Google::Apis::PubsubV1::Topic.new


# Perform the call
response = service.create_topic(name, topic_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Pub/Sub API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/pubsub
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/pubsub_v1'

service = Google::Apis::PubsubV1::PubsubService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_topic' method:

# * Name of the topic to delete.
topic = 'projects/{MY-PROJECT}/topics/{MY-TOPIC}'

# Perform the call
service.delete_topic(topic)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Pub/Sub API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/pubsub
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/pubsub_v1'

service = Google::Apis::PubsubV1::PubsubService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_topic' method:

# * The name of the topic to get.
topic = 'projects/{MY-PROJECT}/topics/{MY-TOPIC}'

# Perform the call
response = service.get_topic(topic)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Pub/Sub API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/pubsub
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/pubsub_v1'

service = Google::Apis::PubsubV1::PubsubService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_project_topic_iam_policy' method:

# * REQUIRED: The resource for which policy is being requested. `resource` is usually specified as a
#   path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified
#   in this value is resource specific and is specified in the documentation for the respective
#   GetIamPolicy rpc.
resource = 'projects/{MY-PROJECT}/topics/{MY-TOPIC}'

# Perform the call
response = service.get_project_topic_iam_policy(resource)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Pub/Sub API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/pubsub
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/pubsub_v1'

service = Google::Apis::PubsubV1::PubsubService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_topics' method:

# * The name of the cloud project that topics belong to.
project = 'projects/{MY-PROJECT}'

# Perform the call
result_list = service.fetch_all(items: :topics) { |token|
  service.list_topics(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Pub/Sub API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/pubsub
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/pubsub_v1'

service = Google::Apis::PubsubV1::PubsubService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'publish_topic' method:

# * The messages in the request will be published on this topic.
topic = 'projects/{MY-PROJECT}/topics/{MY-TOPIC}'

publish_request_object = Google::Apis::PubsubV1::PublishRequest.new


# Perform the call
response = service.publish_topic(topic, publish_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Pub/Sub API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/pubsub
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/pubsub_v1'

service = Google::Apis::PubsubV1::PubsubService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'set_topic_iam_policy' method:

# * REQUIRED: The resource for which policy is being specified. `resource` is usually specified as a
#   path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified
#   in this value is resource specific and is specified in the documentation for the respective
#   SetIamPolicy rpc.
resource = 'projects/{MY-PROJECT}/topics/{MY-TOPIC}'

set_iam_policy_request_object = Google::Apis::PubsubV1::SetIamPolicyRequest.new


# Perform the call
response = service.set_topic_iam_policy(resource, set_iam_policy_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Pub/Sub API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/pubsub
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/pubsub_v1'

service = Google::Apis::PubsubV1::PubsubService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_topic_subscriptions' method:

# * The name of the topic that subscriptions are attached to.
topic = 'projects/{MY-PROJECT}/topics/{MY-TOPIC}'

# Perform the call
result_list = service.fetch_all(items: :subscriptions) { |token|
  service.list_topic_subscriptions(topic, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Pub/Sub API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/pubsub
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/pubsub_v1'

service = Google::Apis::PubsubV1::PubsubService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'test_topic_iam_permissions' method:

# * REQUIRED: The resource for which policy detail is being requested. `resource` is usually specified
#   as a path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path
#   specified in this value is resource specific and is specified in the documentation for the
#   respective TestIamPermissions rpc.
resource = 'projects/{MY-PROJECT}/topics/{MY-TOPIC}'

test_iam_permissions_request_object = Google::Apis::PubsubV1::TestIamPermissionsRequest.new


# Perform the call
response = service.test_topic_iam_permissions(resource, test_iam_permissions_request_object)
