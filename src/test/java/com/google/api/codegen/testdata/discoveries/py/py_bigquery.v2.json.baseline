
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)

# Project ID of the dataset being deleted
project_id = 'my-project-id'  # TODO: Update placeholder value.

# Dataset ID of dataset being deleted
dataset_id = 'my-dataset-id'  # TODO: Update placeholder value.

request = service.datasets().delete(projectId=project_id, datasetId=dataset_id)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)

# Project ID of the requested dataset
project_id = 'my-project-id'  # TODO: Update placeholder value.

# Dataset ID of the requested dataset
dataset_id = 'my-dataset-id'  # TODO: Update placeholder value.

request = service.datasets().get(projectId=project_id, datasetId=dataset_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)

# Project ID of the new dataset
project_id = 'my-project-id'  # TODO: Update placeholder value.

dataset_body = {
    # TODO: Add desired entries to the request body.
}

request = service.datasets().insert(projectId=project_id, body=dataset_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)

# Project ID of the datasets to be listed
project_id = 'my-project-id'  # TODO: Update placeholder value.

request = service.datasets().list(projectId=project_id)
while request is not None:
    response = request.execute()

    for datasets in response['datasets']:
        # TODO: Change code below to process each `datasets` resource:
        pprint(datasets)

    request = service.datasets().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)

# Project ID of the dataset being updated
project_id = 'my-project-id'  # TODO: Update placeholder value.

# Dataset ID of the dataset being updated
dataset_id = 'my-dataset-id'  # TODO: Update placeholder value.

dataset_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.datasets().patch(projectId=project_id, datasetId=dataset_id, body=dataset_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)

# Project ID of the dataset being updated
project_id = 'my-project-id'  # TODO: Update placeholder value.

# Dataset ID of the dataset being updated
dataset_id = 'my-dataset-id'  # TODO: Update placeholder value.

dataset_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.datasets().update(projectId=project_id, datasetId=dataset_id, body=dataset_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)

# [Required] Project ID of the job to cancel
project_id = 'my-project-id'  # TODO: Update placeholder value.

# [Required] Job ID of the job to cancel
job_id = 'my-job-id'  # TODO: Update placeholder value.

request = service.jobs().cancel(projectId=project_id, jobId=job_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)

# [Required] Project ID of the requested job
project_id = 'my-project-id'  # TODO: Update placeholder value.

# [Required] Job ID of the requested job
job_id = 'my-job-id'  # TODO: Update placeholder value.

request = service.jobs().get(projectId=project_id, jobId=job_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)

# [Required] Project ID of the query job
project_id = 'my-project-id'  # TODO: Update placeholder value.

# [Required] Job ID of the query job
job_id = 'my-job-id'  # TODO: Update placeholder value.

request = service.jobs().getQueryResults(projectId=project_id, jobId=job_id)
while request is not None:
    response = request.execute()

    for error_proto in response['errors']:
        # TODO: Change code below to process each `error_proto` resource:
        pprint(error_proto)

    request = service.jobs().getQueryResults_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)

# Project ID of the project that will be billed for the job
project_id = 'my-project-id'  # TODO: Update placeholder value.

job_body = {
    # TODO: Add desired entries to the request body.
}

# TODO: Add desired media content for upload. For more information, see
# https://developers.google.com/api-client-library/python/guide/media_upload

request = service.jobs().insert(projectId=project_id, body=job_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)

# Project ID of the jobs to list
project_id = 'my-project-id'  # TODO: Update placeholder value.

request = service.jobs().list(projectId=project_id)
while request is not None:
    response = request.execute()

    for jobs in response['jobs']:
        # TODO: Change code below to process each `jobs` resource:
        pprint(jobs)

    request = service.jobs().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)

# Project ID of the project billed for the query
project_id = 'my-project-id'  # TODO: Update placeholder value.

query_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.jobs().query(projectId=project_id, body=query_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)

request = service.projects().list()
while request is not None:
    response = request.execute()

    for projects in response['projects']:
        # TODO: Change code below to process each `projects` resource:
        pprint(projects)

    request = service.projects().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)

# Project ID of the destination table.
project_id = 'my-project-id'  # TODO: Update placeholder value.

# Dataset ID of the destination table.
dataset_id = 'my-dataset-id'  # TODO: Update placeholder value.

# Table ID of the destination table.
table_id = 'my-table-id'  # TODO: Update placeholder value.

table_data_insert_all_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.tabledata().insertAll(projectId=project_id, datasetId=dataset_id, tableId=table_id, body=table_data_insert_all_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)

# Project ID of the table to read
project_id = 'my-project-id'  # TODO: Update placeholder value.

# Dataset ID of the table to read
dataset_id = 'my-dataset-id'  # TODO: Update placeholder value.

# Table ID of the table to read
table_id = 'my-table-id'  # TODO: Update placeholder value.

request = service.tabledata().list(projectId=project_id, datasetId=dataset_id, tableId=table_id)
while request is not None:
    response = request.execute()

    for table_row in response['rows']:
        # TODO: Change code below to process each `table_row` resource:
        pprint(table_row)

    request = service.tabledata().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)

# Project ID of the table to delete
project_id = 'my-project-id'  # TODO: Update placeholder value.

# Dataset ID of the table to delete
dataset_id = 'my-dataset-id'  # TODO: Update placeholder value.

# Table ID of the table to delete
table_id = 'my-table-id'  # TODO: Update placeholder value.

request = service.tables().delete(projectId=project_id, datasetId=dataset_id, tableId=table_id)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)

# Project ID of the requested table
project_id = 'my-project-id'  # TODO: Update placeholder value.

# Dataset ID of the requested table
dataset_id = 'my-dataset-id'  # TODO: Update placeholder value.

# Table ID of the requested table
table_id = 'my-table-id'  # TODO: Update placeholder value.

request = service.tables().get(projectId=project_id, datasetId=dataset_id, tableId=table_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)

# Project ID of the new table
project_id = 'my-project-id'  # TODO: Update placeholder value.

# Dataset ID of the new table
dataset_id = 'my-dataset-id'  # TODO: Update placeholder value.

table_body = {
    # TODO: Add desired entries to the request body.
}

request = service.tables().insert(projectId=project_id, datasetId=dataset_id, body=table_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)

# Project ID of the tables to list
project_id = 'my-project-id'  # TODO: Update placeholder value.

# Dataset ID of the tables to list
dataset_id = 'my-dataset-id'  # TODO: Update placeholder value.

request = service.tables().list(projectId=project_id, datasetId=dataset_id)
while request is not None:
    response = request.execute()

    for tables in response['tables']:
        # TODO: Change code below to process each `tables` resource:
        pprint(tables)

    request = service.tables().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)

# Project ID of the table to update
project_id = 'my-project-id'  # TODO: Update placeholder value.

# Dataset ID of the table to update
dataset_id = 'my-dataset-id'  # TODO: Update placeholder value.

# Table ID of the table to update
table_id = 'my-table-id'  # TODO: Update placeholder value.

table_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.tables().patch(projectId=project_id, datasetId=dataset_id, tableId=table_id, body=table_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)

# Project ID of the table to update
project_id = 'my-project-id'  # TODO: Update placeholder value.

# Dataset ID of the table to update
dataset_id = 'my-dataset-id'  # TODO: Update placeholder value.

# Table ID of the table to update
table_id = 'my-table-id'  # TODO: Update placeholder value.

table_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.tables().update(projectId=project_id, datasetId=dataset_id, tableId=table_id, body=table_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
