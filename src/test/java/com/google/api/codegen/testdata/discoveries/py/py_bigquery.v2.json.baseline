
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID of the dataset being deleted
projectId = '{MY-PROJECT-ID}'

# Dataset ID of dataset being deleted
datasetId = '{MY-DATASET-ID}'


request = service.datasets().delete(projectId=projectId, datasetId=datasetId)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID of the requested dataset
projectId = '{MY-PROJECT-ID}'

# Dataset ID of the requested dataset
datasetId = '{MY-DATASET-ID}'


request = service.datasets().get(projectId=projectId, datasetId=datasetId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# Project ID of the new dataset
projectId = '{MY-PROJECT-ID}'


dataset_body = {
    # TODO: Add desired entries of the request body.
}


request = service.datasets().insert(projectId=projectId, body=dataset_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Project ID of the datasets to be listed
projectId = '{MY-PROJECT-ID}'


datasets = service.datasets()
request = datasets.list(projectId=projectId)
while request is not None:
    response = request.execute()

    for dataset_list._datasets in response['datasets']:
        # TODO: Change code below to process each `dataset_list._datasets` resource:
        pprint(dataset_list._datasets)

    request = datasets.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# Project ID of the dataset being updated
projectId = '{MY-PROJECT-ID}'

# Dataset ID of the dataset being updated
datasetId = '{MY-DATASET-ID}'


dataset_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.datasets().patch(projectId=projectId, datasetId=datasetId, body=dataset_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# Project ID of the dataset being updated
projectId = '{MY-PROJECT-ID}'

# Dataset ID of the dataset being updated
datasetId = '{MY-DATASET-ID}'


dataset_body = {
    # TODO: Add desired entries of the request body.
}


request = service.datasets().update(projectId=projectId, datasetId=datasetId, body=dataset_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `cancel` method:

# [Required] Project ID of the job to cancel
projectId = '{MY-PROJECT-ID}'

# [Required] Job ID of the job to cancel
jobId = '{MY-JOB-ID}'


request = service.jobs().cancel(projectId=projectId, jobId=jobId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# [Required] Project ID of the requested job
projectId = '{MY-PROJECT-ID}'

# [Required] Job ID of the requested job
jobId = '{MY-JOB-ID}'


request = service.jobs().get(projectId=projectId, jobId=jobId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `getQueryResults` method:

# [Required] Project ID of the query job
projectId = '{MY-PROJECT-ID}'

# [Required] Job ID of the query job
jobId = '{MY-JOB-ID}'


request = service.jobs().getQueryResults(projectId=projectId, jobId=jobId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# Project ID of the project that will be billed for the job
projectId = '{MY-PROJECT-ID}'


job_body = {
    # TODO: Add desired entries of the request body.
}


# TODO: Add desired media content for upload. For more information, see:
# https://developers.google.com/api-client-library/python/guide/media_upload


request = service.jobs().insert(projectId=projectId, body=job_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Project ID of the jobs to list
projectId = '{MY-PROJECT-ID}'


jobs = service.jobs()
request = jobs.list(projectId=projectId)
while request is not None:
    response = request.execute()

    for job_list._jobs in response['jobs']:
        # TODO: Change code below to process each `job_list._jobs` resource:
        pprint(job_list._jobs)

    request = jobs.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `query` method:

# Project ID of the project billed for the query
projectId = '{MY-PROJECT-ID}'


query_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.jobs().query(projectId=projectId, body=query_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)


projects = service.projects()
request = projects.list()
while request is not None:
    response = request.execute()

    for project_list._projects in response['projects']:
        # TODO: Change code below to process each `project_list._projects` resource:
        pprint(project_list._projects)

    request = projects.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insertAll` method:

# Project ID of the destination table.
projectId = '{MY-PROJECT-ID}'

# Dataset ID of the destination table.
datasetId = '{MY-DATASET-ID}'

# Table ID of the destination table.
tableId = '{MY-TABLE-ID}'


table_data_insert_all_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.tabledata().insertAll(projectId=projectId, datasetId=datasetId, tableId=tableId, body=table_data_insert_all_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Project ID of the table to read
projectId = '{MY-PROJECT-ID}'

# Dataset ID of the table to read
datasetId = '{MY-DATASET-ID}'

# Table ID of the table to read
tableId = '{MY-TABLE-ID}'


request = service.tabledata().list(projectId=projectId, datasetId=datasetId, tableId=tableId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# Project ID of the table to delete
projectId = '{MY-PROJECT-ID}'

# Dataset ID of the table to delete
datasetId = '{MY-DATASET-ID}'

# Table ID of the table to delete
tableId = '{MY-TABLE-ID}'


request = service.tables().delete(projectId=projectId, datasetId=datasetId, tableId=tableId)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# Project ID of the requested table
projectId = '{MY-PROJECT-ID}'

# Dataset ID of the requested table
datasetId = '{MY-DATASET-ID}'

# Table ID of the requested table
tableId = '{MY-TABLE-ID}'


request = service.tables().get(projectId=projectId, datasetId=datasetId, tableId=tableId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `insert` method:

# Project ID of the new table
projectId = '{MY-PROJECT-ID}'

# Dataset ID of the new table
datasetId = '{MY-DATASET-ID}'


table_body = {
    # TODO: Add desired entries of the request body.
}


request = service.tables().insert(projectId=projectId, datasetId=datasetId, body=table_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# Project ID of the tables to list
projectId = '{MY-PROJECT-ID}'

# Dataset ID of the tables to list
datasetId = '{MY-DATASET-ID}'


tables = service.tables()
request = tables.list(projectId=projectId, datasetId=datasetId)
while request is not None:
    response = request.execute()

    for table_list._tables in response['tables']:
        # TODO: Change code below to process each `table_list._tables` resource:
        pprint(table_list._tables)

    request = tables.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# Project ID of the table to update
projectId = '{MY-PROJECT-ID}'

# Dataset ID of the table to update
datasetId = '{MY-DATASET-ID}'

# Table ID of the table to update
tableId = '{MY-TABLE-ID}'


table_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.tables().patch(projectId=projectId, datasetId=datasetId, tableId=tableId, body=table_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the BigQuery API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/bigquery
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('bigquery', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# Project ID of the table to update
projectId = '{MY-PROJECT-ID}'

# Dataset ID of the table to update
datasetId = '{MY-DATASET-ID}'

# Table ID of the table to update
tableId = '{MY-TABLE-ID}'


table_body = {
    # TODO: Add desired entries of the request body.
}


request = service.tables().update(projectId=projectId, datasetId=datasetId, tableId=tableId, body=table_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
