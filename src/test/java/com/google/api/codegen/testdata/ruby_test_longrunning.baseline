============== file: test/google/longrunning/operations_client_test.rb ==============
# Copyright 2017, Google Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

require "minitest/autorun"
require "minitest/spec"

require "google/gax"

require "google/longrunning"
require "google/longrunning/operations_client"
require "longrunning_services_pb"

class CustomTestError < StandardError; end

# Mock for the GRPC::ClientStub class.
class MockGrpcClientStub

  # @param expected_symbol [Symbol] the symbol of the grpc method to be mocked.
  # @param mock_method [Proc] The method that is being mocked.
  def initialize(expected_symbol, mock_method)
    @expected_symbol = expected_symbol
    @mock_method = mock_method
  end

  # This overrides the Object#method method to return the mocked method when the mocked method
  # is being requested. For methods that aren't being tested, this method returns a proc that
  # will raise an error when called. This is to assure that only the mocked grpc method is being
  # called.
  #
  # @param symbol [Symbol] The symbol of the method being requested.
  # @return [Proc] The proc of the requested method. If the requested method is not being mocked
  #   the proc returned will raise when called.
  def method(symbol)
    return @mock_method if symbol == @expected_symbol

    # The requested method is not being tested, raise if it called.
    proc do
      raise "The method #{symbol} was unexpectedly called during the " \
        "test for #{@expected_symbol}."
    end
  end
end

class MockCredentialsClass < Google::Gax::Credentials
  def initialize(method_name)
    @method_name = method_name
  end

  def updater_proc
    proc do
      raise "The method `#{@method_name}` was trying to make a grpc request. This should not " \
          "happen since the grpc layer is being mocked."
    end
  end
end

describe Google::Longrunning::OperationsClient do

  describe 'get_operation' do
    custom_error = CustomTestError.new "Custom test error for Google::Longrunning::OperationsClient#get_operation."

    it 'invokes get_operation without error' do
      # Create request parameters
      name = ''

      # Create expected grpc response
      name_2 = "name2-1052831874"
      done = true
      expected_response = { name: name_2, done: done }
      expected_response = Google::Gax::to_proto(expected_response, Google::Longrunning::Operation)

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of(Google::Longrunning::GetOperationRequest, request)
        assert_equal(name, request.name)
        expected_response
      end
      mock_stub = MockGrpcClientStub.new(:get_operation, mock_method)

      # Mock auth layer
      mock_credentials = MockCredentialsClass.new("get_operation")

      Google::Longrunning::Operations::Stub.stub(:new, mock_stub) do
        Google::Gax::Credentials.stub(:default, mock_credentials) do
          client = Google::Longrunning.new

          # Call method
          response = client.get_operation(name)

          # Verify the response
          assert_equal(expected_response, response)
        end
      end
    end

    it 'invokes get_operation with error' do
      # Create request parameters
      name = ''

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of(Google::Longrunning::GetOperationRequest, request)
        assert_equal(name, request.name)
        raise custom_error
      end
      mock_stub = MockGrpcClientStub.new(:get_operation, mock_method)

      # Mock auth layer
      mock_credentials = MockCredentialsClass.new("get_operation")

      Google::Longrunning::Operations::Stub.stub(:new, mock_stub) do
        Google::Gax::Credentials.stub(:default, mock_credentials) do
          client = Google::Longrunning.new

          # Call method
          err = assert_raises Google::Gax::GaxError do
            client.get_operation(name)
          end

          # Verify the GaxError wrapped the custom error that was raised.
          assert_match(custom_error.message, err.message)
        end
      end
    end
  end

  describe 'list_operations' do
    custom_error = CustomTestError.new "Custom test error for Google::Longrunning::OperationsClient#list_operations."

    it 'invokes list_operations without error' do
      # Create request parameters
      name = ''
      filter = ''

      # Create expected grpc response
      next_page_token = ""
      operations_element = {}
      operations = [operations_element]
      expected_response = { next_page_token: next_page_token, operations: operations }
      expected_response = Google::Gax::to_proto(expected_response, Google::Longrunning::ListOperationsResponse)

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of(Google::Longrunning::ListOperationsRequest, request)
        assert_equal(name, request.name)
        assert_equal(filter, request.filter)
        expected_response
      end
      mock_stub = MockGrpcClientStub.new(:list_operations, mock_method)

      # Mock auth layer
      mock_credentials = MockCredentialsClass.new("list_operations")

      Google::Longrunning::Operations::Stub.stub(:new, mock_stub) do
        Google::Gax::Credentials.stub(:default, mock_credentials) do
          client = Google::Longrunning.new

          # Call method
          response = client.list_operations(name, filter)

          # Verify the response
          assert(response.instance_of?(Google::Gax::PagedEnumerable))
          assert_equal(expected_response, response.page.response)
          assert_nil(response.next_page)
          assert_equal(expected_response.operations.to_a, response.to_a)
        end
      end
    end

    it 'invokes list_operations with error' do
      # Create request parameters
      name = ''
      filter = ''

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of(Google::Longrunning::ListOperationsRequest, request)
        assert_equal(name, request.name)
        assert_equal(filter, request.filter)
        raise custom_error
      end
      mock_stub = MockGrpcClientStub.new(:list_operations, mock_method)

      # Mock auth layer
      mock_credentials = MockCredentialsClass.new("list_operations")

      Google::Longrunning::Operations::Stub.stub(:new, mock_stub) do
        Google::Gax::Credentials.stub(:default, mock_credentials) do
          client = Google::Longrunning.new

          # Call method
          err = assert_raises Google::Gax::GaxError do
            client.list_operations(name, filter)
          end

          # Verify the GaxError wrapped the custom error that was raised.
          assert_match(custom_error.message, err.message)
        end
      end
    end
  end

  describe 'cancel_operation' do
    custom_error = CustomTestError.new "Custom test error for Google::Longrunning::OperationsClient#cancel_operation."

    it 'invokes cancel_operation without error' do
      # Create request parameters
      name = ''

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of(Google::Longrunning::CancelOperationRequest, request)
        assert_equal(name, request.name)
        nil
      end
      mock_stub = MockGrpcClientStub.new(:cancel_operation, mock_method)

      # Mock auth layer
      mock_credentials = MockCredentialsClass.new("cancel_operation")

      Google::Longrunning::Operations::Stub.stub(:new, mock_stub) do
        Google::Gax::Credentials.stub(:default, mock_credentials) do
          client = Google::Longrunning.new

          # Call method
          response = client.cancel_operation(name)

          # Verify the response
          assert_nil(response)
        end
      end
    end

    it 'invokes cancel_operation with error' do
      # Create request parameters
      name = ''

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of(Google::Longrunning::CancelOperationRequest, request)
        assert_equal(name, request.name)
        raise custom_error
      end
      mock_stub = MockGrpcClientStub.new(:cancel_operation, mock_method)

      # Mock auth layer
      mock_credentials = MockCredentialsClass.new("cancel_operation")

      Google::Longrunning::Operations::Stub.stub(:new, mock_stub) do
        Google::Gax::Credentials.stub(:default, mock_credentials) do
          client = Google::Longrunning.new

          # Call method
          err = assert_raises Google::Gax::GaxError do
            client.cancel_operation(name)
          end

          # Verify the GaxError wrapped the custom error that was raised.
          assert_match(custom_error.message, err.message)
        end
      end
    end
  end

  describe 'delete_operation' do
    custom_error = CustomTestError.new "Custom test error for Google::Longrunning::OperationsClient#delete_operation."

    it 'invokes delete_operation without error' do
      # Create request parameters
      name = ''

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of(Google::Longrunning::DeleteOperationRequest, request)
        assert_equal(name, request.name)
        nil
      end
      mock_stub = MockGrpcClientStub.new(:delete_operation, mock_method)

      # Mock auth layer
      mock_credentials = MockCredentialsClass.new("delete_operation")

      Google::Longrunning::Operations::Stub.stub(:new, mock_stub) do
        Google::Gax::Credentials.stub(:default, mock_credentials) do
          client = Google::Longrunning.new

          # Call method
          response = client.delete_operation(name)

          # Verify the response
          assert_nil(response)
        end
      end
    end

    it 'invokes delete_operation with error' do
      # Create request parameters
      name = ''

      # Mock Grpc layer
      mock_method = proc do |request|
        assert_instance_of(Google::Longrunning::DeleteOperationRequest, request)
        assert_equal(name, request.name)
        raise custom_error
      end
      mock_stub = MockGrpcClientStub.new(:delete_operation, mock_method)

      # Mock auth layer
      mock_credentials = MockCredentialsClass.new("delete_operation")

      Google::Longrunning::Operations::Stub.stub(:new, mock_stub) do
        Google::Gax::Credentials.stub(:default, mock_credentials) do
          client = Google::Longrunning.new

          # Call method
          err = assert_raises Google::Gax::GaxError do
            client.delete_operation(name)
          end

          # Verify the GaxError wrapped the custom error that was raised.
          assert_match(custom_error.message, err.message)
        end
      end
    end
  end
end
