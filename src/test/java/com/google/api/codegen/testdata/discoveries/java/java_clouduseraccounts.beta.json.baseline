
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/clouduseraccounts/beta/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.clouduseraccounts.CloudUserAccounts;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class CloudUserAccountsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // Construct the clouduseraccounts service object for interacting with the API.
    // You can browse other available API services and versions at
    // https://developers.google.com/api-client-library/java/apis/
    CloudUserAccounts clouduseraccountsService = new CloudUserAccounts.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `delete` method:

    // * Project ID for this request.
    String project = "";

    // * Name of the Operations resource to delete.
    String operation = "";


    CloudUserAccounts.GlobalAccountsOperations.Delete request = clouduseraccountsService.globalAccountsOperations().delete(project, operation);
    request.execute();
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/clouduseraccounts/beta/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.clouduseraccounts.CloudUserAccounts;
import com.google.api.services.clouduseraccounts.model.Operation;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class CloudUserAccountsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // Construct the clouduseraccounts service object for interacting with the API.
    // You can browse other available API services and versions at
    // https://developers.google.com/api-client-library/java/apis/
    CloudUserAccounts clouduseraccountsService = new CloudUserAccounts.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // * Project ID for this request.
    String project = "";

    // * Name of the Operations resource to return.
    String operation = "";


    CloudUserAccounts.GlobalAccountsOperations.Get request = clouduseraccountsService.globalAccountsOperations().get(project, operation);
    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    System.out.println(gson.toJson(new JsonParser().parse(response.toString())));
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/clouduseraccounts/beta/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.clouduseraccounts.CloudUserAccounts;
import com.google.api.services.clouduseraccounts.model.Operation;
import com.google.api.services.clouduseraccounts.model.OperationList;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class CloudUserAccountsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // Construct the clouduseraccounts service object for interacting with the API.
    // You can browse other available API services and versions at
    // https://developers.google.com/api-client-library/java/apis/
    CloudUserAccounts clouduseraccountsService = new CloudUserAccounts.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // * Project ID for this request.
    String project = "";


    CloudUserAccounts.GlobalAccountsOperations.List request = clouduseraccountsService.globalAccountsOperations().list(project);

    Gson gson = new GsonBuilder().setPrettyPrinting().create();

    OperationList response;
    do {
      response = request.execute();
      if (response.getItems() == null)
        continue;

      for (Operation operation : response.getItems()) {
        // TODO: Change code below to process each `operation` resource:
        System.out.println(gson.toJson(new JsonParser().parse(operation.toString())));
      }

      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/clouduseraccounts/beta/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.clouduseraccounts.CloudUserAccounts;
import com.google.api.services.clouduseraccounts.model.GroupsAddMemberRequest;
import com.google.api.services.clouduseraccounts.model.Operation;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class CloudUserAccountsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // Construct the clouduseraccounts service object for interacting with the API.
    // You can browse other available API services and versions at
    // https://developers.google.com/api-client-library/java/apis/
    CloudUserAccounts clouduseraccountsService = new CloudUserAccounts.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `addMember` method:

    // * Project ID for this request.
    String project = "";

    // * Name of the group for this request.
    String groupName = "";


    GroupsAddMemberRequest requestBody = new GroupsAddMemberRequest();
    // TODO: Assign values to desired fields of the `requestBody` object.


    CloudUserAccounts.Groups.AddMember request = clouduseraccountsService.groups().addMember(project, groupName, requestBody);
    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    System.out.println(gson.toJson(new JsonParser().parse(response.toString())));
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/clouduseraccounts/beta/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.clouduseraccounts.CloudUserAccounts;
import com.google.api.services.clouduseraccounts.model.Operation;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class CloudUserAccountsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // Construct the clouduseraccounts service object for interacting with the API.
    // You can browse other available API services and versions at
    // https://developers.google.com/api-client-library/java/apis/
    CloudUserAccounts clouduseraccountsService = new CloudUserAccounts.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `delete` method:

    // * Project ID for this request.
    String project = "";

    // * Name of the Group resource to delete.
    String groupName = "";


    CloudUserAccounts.Groups.Delete request = clouduseraccountsService.groups().delete(project, groupName);
    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    System.out.println(gson.toJson(new JsonParser().parse(response.toString())));
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/clouduseraccounts/beta/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.clouduseraccounts.CloudUserAccounts;
import com.google.api.services.clouduseraccounts.model.Group;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class CloudUserAccountsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // Construct the clouduseraccounts service object for interacting with the API.
    // You can browse other available API services and versions at
    // https://developers.google.com/api-client-library/java/apis/
    CloudUserAccounts clouduseraccountsService = new CloudUserAccounts.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // * Project ID for this request.
    String project = "";

    // * Name of the Group resource to return.
    String groupName = "";


    CloudUserAccounts.Groups.Get request = clouduseraccountsService.groups().get(project, groupName);
    Group response = request.execute();

    // TODO: Change code below to process the `response` object:
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    System.out.println(gson.toJson(new JsonParser().parse(response.toString())));
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/clouduseraccounts/beta/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.clouduseraccounts.CloudUserAccounts;
import com.google.api.services.clouduseraccounts.model.Group;
import com.google.api.services.clouduseraccounts.model.Operation;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class CloudUserAccountsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // Construct the clouduseraccounts service object for interacting with the API.
    // You can browse other available API services and versions at
    // https://developers.google.com/api-client-library/java/apis/
    CloudUserAccounts clouduseraccountsService = new CloudUserAccounts.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `insert` method:

    // * Project ID for this request.
    String project = "";


    Group requestBody = new Group();
    // TODO: Assign values to desired fields of the `requestBody` object.


    CloudUserAccounts.Groups.Insert request = clouduseraccountsService.groups().insert(project, requestBody);
    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    System.out.println(gson.toJson(new JsonParser().parse(response.toString())));
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/clouduseraccounts/beta/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.clouduseraccounts.CloudUserAccounts;
import com.google.api.services.clouduseraccounts.model.Group;
import com.google.api.services.clouduseraccounts.model.GroupList;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class CloudUserAccountsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // Construct the clouduseraccounts service object for interacting with the API.
    // You can browse other available API services and versions at
    // https://developers.google.com/api-client-library/java/apis/
    CloudUserAccounts clouduseraccountsService = new CloudUserAccounts.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // * Project ID for this request.
    String project = "";


    CloudUserAccounts.Groups.List request = clouduseraccountsService.groups().list(project);

    Gson gson = new GsonBuilder().setPrettyPrinting().create();

    GroupList response;
    do {
      response = request.execute();
      if (response.getItems() == null)
        continue;

      for (Group group : response.getItems()) {
        // TODO: Change code below to process each `group` resource:
        System.out.println(gson.toJson(new JsonParser().parse(group.toString())));
      }

      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/clouduseraccounts/beta/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.clouduseraccounts.CloudUserAccounts;
import com.google.api.services.clouduseraccounts.model.GroupsRemoveMemberRequest;
import com.google.api.services.clouduseraccounts.model.Operation;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class CloudUserAccountsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // Construct the clouduseraccounts service object for interacting with the API.
    // You can browse other available API services and versions at
    // https://developers.google.com/api-client-library/java/apis/
    CloudUserAccounts clouduseraccountsService = new CloudUserAccounts.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `removeMember` method:

    // * Project ID for this request.
    String project = "";

    // * Name of the group for this request.
    String groupName = "";


    GroupsRemoveMemberRequest requestBody = new GroupsRemoveMemberRequest();
    // TODO: Assign values to desired fields of the `requestBody` object.


    CloudUserAccounts.Groups.RemoveMember request = clouduseraccountsService.groups().removeMember(project, groupName, requestBody);
    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    System.out.println(gson.toJson(new JsonParser().parse(response.toString())));
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/clouduseraccounts/beta/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.clouduseraccounts.CloudUserAccounts;
import com.google.api.services.clouduseraccounts.model.LinuxGetAuthorizedKeysViewResponse;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class CloudUserAccountsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // Construct the clouduseraccounts service object for interacting with the API.
    // You can browse other available API services and versions at
    // https://developers.google.com/api-client-library/java/apis/
    CloudUserAccounts clouduseraccountsService = new CloudUserAccounts.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `getAuthorizedKeysView` method:

    // * Project ID for this request.
    String project = "";

    // * Name of the zone for this request.
    String zone = "";

    // * The user account for which you want to get a list of authorized public keys.
    String user = "";

    // * The fully-qualified URL of the virtual machine requesting the view.
    String instance = "";


    CloudUserAccounts.Linux.GetAuthorizedKeysView request = clouduseraccountsService.linux().getAuthorizedKeysView(project, zone, user, instance);
    LinuxGetAuthorizedKeysViewResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    System.out.println(gson.toJson(new JsonParser().parse(response.toString())));
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/clouduseraccounts/beta/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.clouduseraccounts.CloudUserAccounts;
import com.google.api.services.clouduseraccounts.model.LinuxGetLinuxAccountViewsResponse;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class CloudUserAccountsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // Construct the clouduseraccounts service object for interacting with the API.
    // You can browse other available API services and versions at
    // https://developers.google.com/api-client-library/java/apis/
    CloudUserAccounts clouduseraccountsService = new CloudUserAccounts.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `getLinuxAccountViews` method:

    // * Project ID for this request.
    String project = "";

    // * Name of the zone for this request.
    String zone = "";

    // * The fully-qualified URL of the virtual machine requesting the views.
    String instance = "";


    CloudUserAccounts.Linux.GetLinuxAccountViews request = clouduseraccountsService.linux().getLinuxAccountViews(project, zone, instance);
    LinuxGetLinuxAccountViewsResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    System.out.println(gson.toJson(new JsonParser().parse(response.toString())));
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/clouduseraccounts/beta/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.clouduseraccounts.CloudUserAccounts;
import com.google.api.services.clouduseraccounts.model.Operation;
import com.google.api.services.clouduseraccounts.model.PublicKey;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class CloudUserAccountsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // Construct the clouduseraccounts service object for interacting with the API.
    // You can browse other available API services and versions at
    // https://developers.google.com/api-client-library/java/apis/
    CloudUserAccounts clouduseraccountsService = new CloudUserAccounts.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `addPublicKey` method:

    // * Project ID for this request.
    String project = "";

    // * Name of the user for this request.
    String user = "";


    PublicKey requestBody = new PublicKey();
    // TODO: Assign values to desired fields of the `requestBody` object.


    CloudUserAccounts.Users.AddPublicKey request = clouduseraccountsService.users().addPublicKey(project, user, requestBody);
    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    System.out.println(gson.toJson(new JsonParser().parse(response.toString())));
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/clouduseraccounts/beta/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.clouduseraccounts.CloudUserAccounts;
import com.google.api.services.clouduseraccounts.model.Operation;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class CloudUserAccountsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // Construct the clouduseraccounts service object for interacting with the API.
    // You can browse other available API services and versions at
    // https://developers.google.com/api-client-library/java/apis/
    CloudUserAccounts clouduseraccountsService = new CloudUserAccounts.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `delete` method:

    // * Project ID for this request.
    String project = "";

    // * Name of the user resource to delete.
    String user = "";


    CloudUserAccounts.Users.Delete request = clouduseraccountsService.users().delete(project, user);
    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    System.out.println(gson.toJson(new JsonParser().parse(response.toString())));
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/clouduseraccounts/beta/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.clouduseraccounts.CloudUserAccounts;
import com.google.api.services.clouduseraccounts.model.User;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class CloudUserAccountsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // Construct the clouduseraccounts service object for interacting with the API.
    // You can browse other available API services and versions at
    // https://developers.google.com/api-client-library/java/apis/
    CloudUserAccounts clouduseraccountsService = new CloudUserAccounts.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // * Project ID for this request.
    String project = "";

    // * Name of the user resource to return.
    String user = "";


    CloudUserAccounts.Users.Get request = clouduseraccountsService.users().get(project, user);
    User response = request.execute();

    // TODO: Change code below to process the `response` object:
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    System.out.println(gson.toJson(new JsonParser().parse(response.toString())));
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/clouduseraccounts/beta/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.clouduseraccounts.CloudUserAccounts;
import com.google.api.services.clouduseraccounts.model.Operation;
import com.google.api.services.clouduseraccounts.model.User;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class CloudUserAccountsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // Construct the clouduseraccounts service object for interacting with the API.
    // You can browse other available API services and versions at
    // https://developers.google.com/api-client-library/java/apis/
    CloudUserAccounts clouduseraccountsService = new CloudUserAccounts.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `insert` method:

    // * Project ID for this request.
    String project = "";


    User requestBody = new User();
    // TODO: Assign values to desired fields of the `requestBody` object.


    CloudUserAccounts.Users.Insert request = clouduseraccountsService.users().insert(project, requestBody);
    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    System.out.println(gson.toJson(new JsonParser().parse(response.toString())));
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/clouduseraccounts/beta/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.clouduseraccounts.CloudUserAccounts;
import com.google.api.services.clouduseraccounts.model.User;
import com.google.api.services.clouduseraccounts.model.UserList;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class CloudUserAccountsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // Construct the clouduseraccounts service object for interacting with the API.
    // You can browse other available API services and versions at
    // https://developers.google.com/api-client-library/java/apis/
    CloudUserAccounts clouduseraccountsService = new CloudUserAccounts.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // * Project ID for this request.
    String project = "";


    CloudUserAccounts.Users.List request = clouduseraccountsService.users().list(project);

    Gson gson = new GsonBuilder().setPrettyPrinting().create();

    UserList response;
    do {
      response = request.execute();
      if (response.getItems() == null)
        continue;

      for (User user : response.getItems()) {
        // TODO: Change code below to process each `user` resource:
        System.out.println(gson.toJson(new JsonParser().parse(user.toString())));
      }

      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/clouduseraccounts/beta/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.clouduseraccounts.CloudUserAccounts;
import com.google.api.services.clouduseraccounts.model.Operation;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class CloudUserAccountsExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    // Construct the clouduseraccounts service object for interacting with the API.
    // You can browse other available API services and versions at
    // https://developers.google.com/api-client-library/java/apis/
    CloudUserAccounts clouduseraccountsService = new CloudUserAccounts.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Change placeholders below to desired parameter values for the `removePublicKey` method:

    // * Project ID for this request.
    String project = "";

    // * Name of the user for this request.
    String user = "";

    // * The fingerprint of the public key to delete. Public keys are identified by their fingerprint,
    //   which is defined by RFC4716 to be the MD5 digest of the public key.
    String fingerprint = "";


    CloudUserAccounts.Users.RemovePublicKey request = clouduseraccountsService.users().removePublicKey(project, user, fingerprint);
    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    System.out.println(gson.toJson(new JsonParser().parse(response.toString())));
  }
}
