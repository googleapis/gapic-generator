
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Instance Group Updater API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/replicapoolupdater
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/replicapoolupdater/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.replicapoolupdater.Replicapoolupdater;
import com.google.api.services.replicapoolupdater.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ReplicapoolupdaterExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The Google Developers Console project name.
    String project = "";  // TODO: Update placeholder value.

    // The name of the zone in which the update's target resides.
    String zone = "";  // TODO: Update placeholder value.

    // The name of the update.
    String rollingUpdate = "";  // TODO: Update placeholder value.

    Replicapoolupdater replicapoolupdaterService = createReplicapoolupdaterService();
    Replicapoolupdater.RollingUpdates.Cancel request = replicapoolupdaterService.rollingUpdates().cancel(project, zone, rollingUpdate);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Replicapoolupdater createReplicapoolupdaterService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Replicapoolupdater.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-ReplicapoolupdaterSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Instance Group Updater API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/replicapoolupdater
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/replicapoolupdater/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.replicapoolupdater.Replicapoolupdater;
import com.google.api.services.replicapoolupdater.model.RollingUpdate;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ReplicapoolupdaterExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The Google Developers Console project name.
    String project = "";  // TODO: Update placeholder value.

    // The name of the zone in which the update's target resides.
    String zone = "";  // TODO: Update placeholder value.

    // The name of the update.
    String rollingUpdate = "";  // TODO: Update placeholder value.

    Replicapoolupdater replicapoolupdaterService = createReplicapoolupdaterService();
    Replicapoolupdater.RollingUpdates.Get request = replicapoolupdaterService.rollingUpdates().get(project, zone, rollingUpdate);

    RollingUpdate response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Replicapoolupdater createReplicapoolupdaterService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Replicapoolupdater.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-ReplicapoolupdaterSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Instance Group Updater API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/replicapoolupdater
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/replicapoolupdater/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.replicapoolupdater.Replicapoolupdater;
import com.google.api.services.replicapoolupdater.model.Operation;
import com.google.api.services.replicapoolupdater.model.RollingUpdate;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ReplicapoolupdaterExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The Google Developers Console project name.
    String project = "";  // TODO: Update placeholder value.

    // The name of the zone in which the update's target resides.
    String zone = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    RollingUpdate requestBody = new RollingUpdate();

    Replicapoolupdater replicapoolupdaterService = createReplicapoolupdaterService();
    Replicapoolupdater.RollingUpdates.Insert request = replicapoolupdaterService.rollingUpdates().insert(project, zone, requestBody);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Replicapoolupdater createReplicapoolupdaterService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Replicapoolupdater.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-ReplicapoolupdaterSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Instance Group Updater API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/replicapoolupdater
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/replicapoolupdater/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.replicapoolupdater.Replicapoolupdater;
import com.google.api.services.replicapoolupdater.model.RollingUpdate;
import com.google.api.services.replicapoolupdater.model.RollingUpdateList;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ReplicapoolupdaterExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The Google Developers Console project name.
    String project = "";  // TODO: Update placeholder value.

    // The name of the zone in which the update's target resides.
    String zone = "";  // TODO: Update placeholder value.

    Replicapoolupdater replicapoolupdaterService = createReplicapoolupdaterService();
    Replicapoolupdater.RollingUpdates.List request = replicapoolupdaterService.rollingUpdates().list(project, zone);

    RollingUpdateList response;
    do {
      response = request.execute();
      if (response.getItems() == null) {
        continue;
      }
      for (RollingUpdate rollingUpdate : response.getItems()) {
        // TODO: Change code below to process each `rollingUpdate` resource:
        System.out.println(rollingUpdate);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Replicapoolupdater createReplicapoolupdaterService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Replicapoolupdater.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-ReplicapoolupdaterSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Instance Group Updater API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/replicapoolupdater
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/replicapoolupdater/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.replicapoolupdater.Replicapoolupdater;
import com.google.api.services.replicapoolupdater.model.InstanceUpdate;
import com.google.api.services.replicapoolupdater.model.InstanceUpdateList;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ReplicapoolupdaterExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The Google Developers Console project name.
    String project = "";  // TODO: Update placeholder value.

    // The name of the zone in which the update's target resides.
    String zone = "";  // TODO: Update placeholder value.

    // The name of the update.
    String rollingUpdate = "";  // TODO: Update placeholder value.

    Replicapoolupdater replicapoolupdaterService = createReplicapoolupdaterService();
    Replicapoolupdater.RollingUpdates.ListInstanceUpdates request = replicapoolupdaterService.rollingUpdates().listInstanceUpdates(project, zone, rollingUpdate);

    InstanceUpdateList response;
    do {
      response = request.execute();
      if (response.getItems() == null) {
        continue;
      }
      for (InstanceUpdate instanceUpdate : response.getItems()) {
        // TODO: Change code below to process each `instanceUpdate` resource:
        System.out.println(instanceUpdate);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Replicapoolupdater createReplicapoolupdaterService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Replicapoolupdater.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-ReplicapoolupdaterSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Instance Group Updater API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/replicapoolupdater
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/replicapoolupdater/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.replicapoolupdater.Replicapoolupdater;
import com.google.api.services.replicapoolupdater.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ReplicapoolupdaterExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The Google Developers Console project name.
    String project = "";  // TODO: Update placeholder value.

    // The name of the zone in which the update's target resides.
    String zone = "";  // TODO: Update placeholder value.

    // The name of the update.
    String rollingUpdate = "";  // TODO: Update placeholder value.

    Replicapoolupdater replicapoolupdaterService = createReplicapoolupdaterService();
    Replicapoolupdater.RollingUpdates.Pause request = replicapoolupdaterService.rollingUpdates().pause(project, zone, rollingUpdate);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Replicapoolupdater createReplicapoolupdaterService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Replicapoolupdater.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-ReplicapoolupdaterSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Instance Group Updater API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/replicapoolupdater
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/replicapoolupdater/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.replicapoolupdater.Replicapoolupdater;
import com.google.api.services.replicapoolupdater.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ReplicapoolupdaterExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The Google Developers Console project name.
    String project = "";  // TODO: Update placeholder value.

    // The name of the zone in which the update's target resides.
    String zone = "";  // TODO: Update placeholder value.

    // The name of the update.
    String rollingUpdate = "";  // TODO: Update placeholder value.

    Replicapoolupdater replicapoolupdaterService = createReplicapoolupdaterService();
    Replicapoolupdater.RollingUpdates.Resume request = replicapoolupdaterService.rollingUpdates().resume(project, zone, rollingUpdate);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Replicapoolupdater createReplicapoolupdaterService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Replicapoolupdater.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-ReplicapoolupdaterSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Instance Group Updater API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/replicapoolupdater
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/replicapoolupdater/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.replicapoolupdater.Replicapoolupdater;
import com.google.api.services.replicapoolupdater.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ReplicapoolupdaterExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The Google Developers Console project name.
    String project = "";  // TODO: Update placeholder value.

    // The name of the zone in which the update's target resides.
    String zone = "";  // TODO: Update placeholder value.

    // The name of the update.
    String rollingUpdate = "";  // TODO: Update placeholder value.

    Replicapoolupdater replicapoolupdaterService = createReplicapoolupdaterService();
    Replicapoolupdater.RollingUpdates.Rollback request = replicapoolupdaterService.rollingUpdates().rollback(project, zone, rollingUpdate);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Replicapoolupdater createReplicapoolupdaterService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Replicapoolupdater.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-ReplicapoolupdaterSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Instance Group Updater API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/replicapoolupdater
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/replicapoolupdater/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.replicapoolupdater.Replicapoolupdater;
import com.google.api.services.replicapoolupdater.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ReplicapoolupdaterExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of the project scoping this request.
    String project = "";  // TODO: Update placeholder value.

    // Name of the zone scoping this request.
    String zone = "";  // TODO: Update placeholder value.

    // Name of the operation resource to return.
    String operation = "";  // TODO: Update placeholder value.

    Replicapoolupdater replicapoolupdaterService = createReplicapoolupdaterService();
    Replicapoolupdater.ZoneOperations.Get request = replicapoolupdaterService.zoneOperations().get(project, zone, operation);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Replicapoolupdater createReplicapoolupdaterService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Replicapoolupdater.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-ReplicapoolupdaterSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Instance Group Updater API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/replicapoolupdater
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/replicapoolupdater/v1beta1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.replicapoolupdater.Replicapoolupdater;
import com.google.api.services.replicapoolupdater.model.Operation;
import com.google.api.services.replicapoolupdater.model.OperationList;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class ReplicapoolupdaterExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Name of the project scoping this request.
    String project = "";  // TODO: Update placeholder value.

    // Name of the zone scoping this request.
    String zone = "";  // TODO: Update placeholder value.

    Replicapoolupdater replicapoolupdaterService = createReplicapoolupdaterService();
    Replicapoolupdater.ZoneOperations.List request = replicapoolupdaterService.zoneOperations().list(project, zone);

    OperationList response;
    do {
      response = request.execute();
      if (response.getItems() == null) {
        continue;
      }
      for (Operation operation : response.getItems()) {
        // TODO: Change code below to process each `operation` resource:
        System.out.println(operation);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static Replicapoolupdater createReplicapoolupdaterService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Replicapoolupdater.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-ReplicapoolupdaterSample/0.1")
        .build();
  }
}
