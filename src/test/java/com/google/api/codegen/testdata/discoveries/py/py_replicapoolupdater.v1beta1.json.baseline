
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Instance Group Updater API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/replicapoolupdater
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('replicapoolupdater', 'v1beta1', credentials=credentials)

# The Google Developers Console project name.
project = '{MY-PROJECT}'  # {TODO()} Update placeholder value(s).

# The name of the zone in which the update's target resides.
zone = '{MY-ZONE}'  # {TODO()} Update placeholder value(s).

# The name of the update.
rollingUpdate = '{MY-ROLLING-UPDATE}'  # {TODO()} Update placeholder value(s).

request = service.rollingUpdates().cancel(project=project, zone=zone, rollingUpdate=rollingUpdate)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Instance Group Updater API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/replicapoolupdater
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('replicapoolupdater', 'v1beta1', credentials=credentials)

# The Google Developers Console project name.
project = '{MY-PROJECT}'  # {TODO()} Update placeholder value(s).

# The name of the zone in which the update's target resides.
zone = '{MY-ZONE}'  # {TODO()} Update placeholder value(s).

# The name of the update.
rollingUpdate = '{MY-ROLLING-UPDATE}'  # {TODO()} Update placeholder value(s).

request = service.rollingUpdates().get(project=project, zone=zone, rollingUpdate=rollingUpdate)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Instance Group Updater API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/replicapoolupdater
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('replicapoolupdater', 'v1beta1', credentials=credentials)

# The Google Developers Console project name.
project = '{MY-PROJECT}'  # {TODO()} Update placeholder value(s).

# The name of the zone in which the update's target resides.
zone = '{MY-ZONE}'  # {TODO()} Update placeholder value(s).

rolling_update_body = {
    # TODO: Add the desired entries.
}


request = service.rollingUpdates().insert(project=project, zone=zone, body=rolling_update_body)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Instance Group Updater API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/replicapoolupdater
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('replicapoolupdater', 'v1beta1', credentials=credentials)

# The Google Developers Console project name.
project = '{MY-PROJECT}'  # {TODO()} Update placeholder value(s).

# The name of the zone in which the update's target resides.
zone = '{MY-ZONE}'  # {TODO()} Update placeholder value(s).

rollingUpdates = service.rollingUpdates()
request = rollingUpdates.list(project=project, zone=zone)
while request is not None:
    response = request.execute()

    for rolling_update in response['items']:
        # TODO: Use rolling_update
        pprint(rolling_update)

    request = rollingUpdates.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Instance Group Updater API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/replicapoolupdater
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('replicapoolupdater', 'v1beta1', credentials=credentials)

# The Google Developers Console project name.
project = '{MY-PROJECT}'  # {TODO()} Update placeholder value(s).

# The name of the zone in which the update's target resides.
zone = '{MY-ZONE}'  # {TODO()} Update placeholder value(s).

# The name of the update.
rollingUpdate = '{MY-ROLLING-UPDATE}'  # {TODO()} Update placeholder value(s).

rollingUpdates = service.rollingUpdates()
request = rollingUpdates.listInstanceUpdates(project=project, zone=zone, rollingUpdate=rollingUpdate)
while request is not None:
    response = request.execute()

    for instance_update in response['items']:
        # TODO: Use instance_update
        pprint(instance_update)

    request = rollingUpdates.listInstanceUpdates_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Instance Group Updater API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/replicapoolupdater
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('replicapoolupdater', 'v1beta1', credentials=credentials)

# The Google Developers Console project name.
project = '{MY-PROJECT}'  # {TODO()} Update placeholder value(s).

# The name of the zone in which the update's target resides.
zone = '{MY-ZONE}'  # {TODO()} Update placeholder value(s).

# The name of the update.
rollingUpdate = '{MY-ROLLING-UPDATE}'  # {TODO()} Update placeholder value(s).

request = service.rollingUpdates().pause(project=project, zone=zone, rollingUpdate=rollingUpdate)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Instance Group Updater API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/replicapoolupdater
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('replicapoolupdater', 'v1beta1', credentials=credentials)

# The Google Developers Console project name.
project = '{MY-PROJECT}'  # {TODO()} Update placeholder value(s).

# The name of the zone in which the update's target resides.
zone = '{MY-ZONE}'  # {TODO()} Update placeholder value(s).

# The name of the update.
rollingUpdate = '{MY-ROLLING-UPDATE}'  # {TODO()} Update placeholder value(s).

request = service.rollingUpdates().resume(project=project, zone=zone, rollingUpdate=rollingUpdate)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Instance Group Updater API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/replicapoolupdater
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('replicapoolupdater', 'v1beta1', credentials=credentials)

# The Google Developers Console project name.
project = '{MY-PROJECT}'  # {TODO()} Update placeholder value(s).

# The name of the zone in which the update's target resides.
zone = '{MY-ZONE}'  # {TODO()} Update placeholder value(s).

# The name of the update.
rollingUpdate = '{MY-ROLLING-UPDATE}'  # {TODO()} Update placeholder value(s).

request = service.rollingUpdates().rollback(project=project, zone=zone, rollingUpdate=rollingUpdate)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Instance Group Updater API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/replicapoolupdater
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('replicapoolupdater', 'v1beta1', credentials=credentials)

# Name of the project scoping this request.
project = '{MY-PROJECT}'  # {TODO()} Update placeholder value(s).

# Name of the zone scoping this request.
zone = '{MY-ZONE}'  # {TODO()} Update placeholder value(s).

# Name of the operation resource to return.
operation = '{MY-OPERATION}'  # {TODO()} Update placeholder value(s).

request = service.zoneOperations().get(project=project, zone=zone, operation=operation)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Instance Group Updater API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/replicapoolupdater
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('replicapoolupdater', 'v1beta1', credentials=credentials)

# Name of the project scoping this request.
project = '{MY-PROJECT}'  # {TODO()} Update placeholder value(s).

# Name of the zone scoping this request.
zone = '{MY-ZONE}'  # {TODO()} Update placeholder value(s).

zoneOperations = service.zoneOperations()
request = zoneOperations.list(project=project, zone=zone)
while request is not None:
    response = request.execute()

    for operation in response['items']:
        # TODO: Use operation
        pprint(operation)

    request = zoneOperations.list_next(previous_request=request, previous_response=response)
