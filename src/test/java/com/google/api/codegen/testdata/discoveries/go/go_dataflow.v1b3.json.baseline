
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/dataflow/v1b3

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := dataflow.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The project which owns the job.
  projectId := "" // TODO: Update placeholder value.

  resp, err := c.Projects.Jobs.Create(projectId, &dataflow.Job{
                                        // TODO: Fill required fields.
                                      }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/dataflow/v1b3

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := dataflow.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The project which owns the job.
  projectId := "" // TODO: Update placeholder value.

  // Identifies a single job.
  jobId := "" // TODO: Update placeholder value.

  resp, err := c.Projects.Jobs.Get(projectId, jobId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/dataflow/v1b3

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := dataflow.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // A project id.
  projectId := "" // TODO: Update placeholder value.

  // The job to get messages for.
  jobId := "" // TODO: Update placeholder value.

  resp, err := c.Projects.Jobs.GetMetrics(projectId, jobId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/dataflow/v1b3

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := dataflow.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The project which owns the jobs.
  projectId := "" // TODO: Update placeholder value.


  call := c.Projects.Jobs.List(projectId)
  if err := call.Pages(ctx, func(page *dataflow.ListJobsResponse) error {
    for _, v := range page.Jobs {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/dataflow/v1b3

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := dataflow.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // A project id.
  projectId := "" // TODO: Update placeholder value.

  // The job to get messages about.
  jobId := "" // TODO: Update placeholder value.


  call := c.Projects.Jobs.Messages.List(projectId, jobId)
  if err := call.Pages(ctx, func(page *dataflow.ListJobMessagesResponse) error {
    for _, v := range page.JobMessages {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/dataflow/v1b3

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := dataflow.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The project which owns the job.
  projectId := "" // TODO: Update placeholder value.

  // Identifies a single job.
  jobId := "" // TODO: Update placeholder value.

  resp, err := c.Projects.Jobs.Update(projectId, jobId, &dataflow.Job{
                                        // TODO: Fill required fields.
                                      }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/dataflow/v1b3

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := dataflow.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Identifies the project this worker belongs to.
  projectId := "" // TODO: Update placeholder value.

  // Identifies the workflow job this worker belongs to.
  jobId := "" // TODO: Update placeholder value.

  resp, err := c.Projects.Jobs.WorkItems.Lease(projectId, jobId, &dataflow.LeaseWorkItemRequest{
                                                 // TODO: Fill required fields.
                                               }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/dataflow/v1b3

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := dataflow.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The project which owns the WorkItem's job.
  projectId := "" // TODO: Update placeholder value.

  // The job which the WorkItem is part of.
  jobId := "" // TODO: Update placeholder value.

  resp, err := c.Projects.Jobs.WorkItems.ReportStatus(projectId, jobId, &dataflow.ReportWorkItemStatusRequest{
                                                        // TODO: Fill required fields.
                                                      }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/dataflow/v1b3

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := dataflow.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The project to send the WorkerMessages to.
  projectId := "" // TODO: Update placeholder value.

  resp, err := c.Projects.WorkerMessages(projectId, &dataflow.SendWorkerMessagesRequest{
                                           // TODO: Fill required fields.
                                         }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
