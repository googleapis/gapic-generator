
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  dataflowService, err := dataflow.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project which owns the job.
  projectId := ""  // TODO: Update placeholder value.

  rb := &dataflow.Job{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dataflowService.Projects.Jobs.Create(projectId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  dataflowService, err := dataflow.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project id.
  projectId := ""  // TODO: Update placeholder value.

  // The job id.
  jobId := ""  // TODO: Update placeholder value.

  rb := &dataflow.GetDebugConfigRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dataflowService.Projects.Jobs.Debug.GetConfig(projectId, jobId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  dataflowService, err := dataflow.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project id.
  projectId := ""  // TODO: Update placeholder value.

  // The job id.
  jobId := ""  // TODO: Update placeholder value.

  rb := &dataflow.SendDebugCaptureRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dataflowService.Projects.Jobs.Debug.SendCapture(projectId, jobId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  dataflowService, err := dataflow.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project which owns the job.
  projectId := ""  // TODO: Update placeholder value.

  // Identifies a single job.
  jobId := ""  // TODO: Update placeholder value.

  resp, err := dataflowService.Projects.Jobs.Get(projectId, jobId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  dataflowService, err := dataflow.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // A project id.
  projectId := ""  // TODO: Update placeholder value.

  // The job to get messages for.
  jobId := ""  // TODO: Update placeholder value.

  resp, err := dataflowService.Projects.Jobs.GetMetrics(projectId, jobId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  dataflowService, err := dataflow.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project which owns the jobs.
  projectId := ""  // TODO: Update placeholder value.

  req := dataflowService.Projects.Jobs.List(projectId)
  if err := req.Pages(ctx, func(page *dataflow.ListJobsResponse) error {
    for _, job := range page.Jobs {
      // TODO: Change code below to process each `job` resource:
      fmt.Printf("%#v\n", job)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  dataflowService, err := dataflow.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // A project id.
  projectId := ""  // TODO: Update placeholder value.

  // The job to get messages about.
  jobId := ""  // TODO: Update placeholder value.

  req := dataflowService.Projects.Jobs.Messages.List(projectId, jobId)
  if err := req.Pages(ctx, func(page *dataflow.ListJobMessagesResponse) error {
    for _, jobMessage := range page.JobMessages {
      // TODO: Change code below to process each `jobMessage` resource:
      fmt.Printf("%#v\n", jobMessage)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  dataflowService, err := dataflow.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project which owns the job.
  projectId := ""  // TODO: Update placeholder value.

  // Identifies a single job.
  jobId := ""  // TODO: Update placeholder value.

  rb := &dataflow.Job{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dataflowService.Projects.Jobs.Update(projectId, jobId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  dataflowService, err := dataflow.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the project this worker belongs to.
  projectId := ""  // TODO: Update placeholder value.

  // Identifies the workflow job this worker belongs to.
  jobId := ""  // TODO: Update placeholder value.

  rb := &dataflow.LeaseWorkItemRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dataflowService.Projects.Jobs.WorkItems.Lease(projectId, jobId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  dataflowService, err := dataflow.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project which owns the WorkItem's job.
  projectId := ""  // TODO: Update placeholder value.

  // The job which the WorkItem is part of.
  jobId := ""  // TODO: Update placeholder value.

  rb := &dataflow.ReportWorkItemStatusRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dataflowService.Projects.Jobs.WorkItems.ReportStatus(projectId, jobId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  dataflowService, err := dataflow.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project which owns the job.
  projectId := ""  // TODO: Update placeholder value.

  rb := &dataflow.CreateJobFromTemplateRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dataflowService.Projects.Templates.Create(projectId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  dataflowService, err := dataflow.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project to send the WorkerMessages to.
  projectId := ""  // TODO: Update placeholder value.

  rb := &dataflow.SendWorkerMessagesRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dataflowService.Projects.WorkerMessages(projectId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
