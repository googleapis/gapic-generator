
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dataflow.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project which owns the job.
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  job := &dataflow.Job{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Jobs.Create(projectId, &job).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dataflow.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project which owns the job.
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // Identifies a single job.
  jobId := "{MY-JOB-ID}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Jobs.Get(projectId, jobId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dataflow.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // A project id.
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // The job to get messages for.
  jobId := "{MY-JOB-ID}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Jobs.GetMetrics(projectId, jobId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dataflow.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project which owns the jobs.
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  call := s.Projects.Jobs.List(projectId)
  if err := call.Pages(ctx, func(page *dataflow.ListJobsResponse) error {
    for _, job := range page.Jobs {
      // TODO: Use job
      fmt.Printf("%#v\n", job)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dataflow.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // A project id.
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // The job to get messages about.
  jobId := "{MY-JOB-ID}" // TODO: Update placeholder value(s).

  call := s.Projects.Jobs.Messages.List(projectId, jobId)
  if err := call.Pages(ctx, func(page *dataflow.ListJobMessagesResponse) error {
    for _, jobMessage := range page.JobMessages {
      // TODO: Use jobMessage
      fmt.Printf("%#v\n", jobMessage)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dataflow.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project which owns the job.
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // Identifies a single job.
  jobId := "{MY-JOB-ID}" // TODO: Update placeholder value(s).

  job := &dataflow.Job{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Jobs.Update(projectId, jobId, &job).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dataflow.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the project this worker belongs to.
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // Identifies the workflow job this worker belongs to.
  jobId := "{MY-JOB-ID}" // TODO: Update placeholder value(s).

  leaseWorkItemRequest := &dataflow.LeaseWorkItemRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Jobs.WorkItems.Lease(projectId, jobId, &leaseWorkItemRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dataflow.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project which owns the WorkItem's job.
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // The job which the WorkItem is part of.
  jobId := "{MY-JOB-ID}" // TODO: Update placeholder value(s).

  reportWorkItemStatusRequest := &dataflow.ReportWorkItemStatusRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Jobs.WorkItems.ReportStatus(projectId, jobId, &reportWorkItemStatusRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Dataflow API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataflow
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dataflow/v1b3"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dataflow.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dataflow.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project to send the WorkerMessages to.
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  sendWorkerMessagesRequest := &dataflow.SendWorkerMessagesRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.WorkerMessages(projectId, &sendWorkerMessagesRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
