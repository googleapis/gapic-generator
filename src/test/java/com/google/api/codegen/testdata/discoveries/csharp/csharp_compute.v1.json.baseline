
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Collections.Generic;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the AggregatedList() method:

            // Project ID for this request.
            string project = "";

            AddressesResource.AggregatedListRequest request = computeService.Addresses.AggregatedList(project);
            Data.AddressAggregatedList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (KeyValuePair<string, Data.AddressesScopedList> item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.AddressAggregatedList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the region for this request.
            string region = "";

            // Name of the address resource to delete.
            string address = "";

            AddressesResource.DeleteRequest request = computeService.Addresses.Delete(project, region, address);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the region for this request.
            string region = "";

            // Name of the address resource to return.
            string address = "";

            AddressesResource.GetRequest request = computeService.Addresses.Get(project, region, address);
            Data.Address response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Address response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // Name of the region for this request.
            string region = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.Address content = new Data.Address();

            AddressesResource.InsertRequest request = computeService.Addresses.Insert(content, project, region);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            // Name of the region for this request.
            string region = "";

            AddressesResource.ListRequest request = computeService.Addresses.List(project, region);
            Data.AddressList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Address item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.AddressList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Collections.Generic;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the AggregatedList() method:

            // Project ID for this request.
            string project = "";

            AutoscalersResource.AggregatedListRequest request = computeService.Autoscalers.AggregatedList(project);
            Data.AutoscalerAggregatedList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (KeyValuePair<string, Data.AutoscalersScopedList> item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.AutoscalerAggregatedList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the zone for this request.
            string zone = "";

            // Name of the autoscaler to delete.
            string autoscaler = "";

            AutoscalersResource.DeleteRequest request = computeService.Autoscalers.Delete(project, zone, autoscaler);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the zone for this request.
            string zone = "";

            // Name of the autoscaler to return.
            string autoscaler = "";

            AutoscalersResource.GetRequest request = computeService.Autoscalers.Get(project, zone, autoscaler);
            Data.Autoscaler response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Autoscaler response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // Name of the zone for this request.
            string zone = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.Autoscaler content = new Data.Autoscaler();

            AutoscalersResource.InsertRequest request = computeService.Autoscalers.Insert(content, project, zone);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            // Name of the zone for this request.
            string zone = "";

            AutoscalersResource.ListRequest request = computeService.Autoscalers.List(project, zone);
            Data.AutoscalerList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Autoscaler item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.AutoscalerList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Patch() method:

            // Project ID for this request.
            string project = "";

            // Name of the zone for this request.
            string zone = "";

            // Name of the autoscaler to update.
            string autoscaler = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.Autoscaler content = new Data.Autoscaler();

            AutoscalersResource.PatchRequest request = computeService.Autoscalers.Patch(content, project, zone, autoscaler);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Update() method:

            // Project ID for this request.
            string project = "";

            // Name of the zone for this request.
            string zone = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.Autoscaler content = new Data.Autoscaler();

            AutoscalersResource.UpdateRequest request = computeService.Autoscalers.Update(content, project, zone);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the BackendService resource to delete.
            string backendService = "";

            BackendServicesResource.DeleteRequest request = computeService.BackendServices.Delete(project, backendService);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the BackendService resource to return.
            string backendService = "";

            BackendServicesResource.GetRequest request = computeService.BackendServices.Get(project, backendService);
            Data.BackendService response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.BackendService response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the GetHealth() method:

            string project = "";

            // Name of the BackendService resource to which the queried instance belongs.
            string backendService = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.ResourceGroupReference content = new Data.ResourceGroupReference();

            BackendServicesResource.GetHealthRequest request = computeService.BackendServices.GetHealth(content, project, backendService);
            Data.BackendServiceGroupHealth response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.BackendServiceGroupHealth response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.BackendService content = new Data.BackendService();

            BackendServicesResource.InsertRequest request = computeService.BackendServices.Insert(content, project);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            BackendServicesResource.ListRequest request = computeService.BackendServices.List(project);
            Data.BackendServiceList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.BackendService item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.BackendServiceList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Patch() method:

            // Project ID for this request.
            string project = "";

            // Name of the BackendService resource to update.
            string backendService = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.BackendService content = new Data.BackendService();

            BackendServicesResource.PatchRequest request = computeService.BackendServices.Patch(content, project, backendService);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Update() method:

            // Project ID for this request.
            string project = "";

            // Name of the BackendService resource to update.
            string backendService = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.BackendService content = new Data.BackendService();

            BackendServicesResource.UpdateRequest request = computeService.BackendServices.Update(content, project, backendService);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Collections.Generic;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the AggregatedList() method:

            // Project ID for this request.
            string project = "";

            DiskTypesResource.AggregatedListRequest request = computeService.DiskTypes.AggregatedList(project);
            Data.DiskTypeAggregatedList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (KeyValuePair<string, Data.DiskTypesScopedList> item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.DiskTypeAggregatedList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            // Name of the disk type to return.
            string diskType = "";

            DiskTypesResource.GetRequest request = computeService.DiskTypes.Get(project, zone, diskType);
            Data.DiskType response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.DiskType response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            DiskTypesResource.ListRequest request = computeService.DiskTypes.List(project, zone);
            Data.DiskTypeList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.DiskType item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.DiskTypeList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Collections.Generic;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the AggregatedList() method:

            // Project ID for this request.
            string project = "";

            DisksResource.AggregatedListRequest request = computeService.Disks.AggregatedList(project);
            Data.DiskAggregatedList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (KeyValuePair<string, Data.DisksScopedList> item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.DiskAggregatedList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the CreateSnapshot() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            // Name of the persistent disk to snapshot.
            string disk = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.Snapshot content = new Data.Snapshot();

            DisksResource.CreateSnapshotRequest request = computeService.Disks.CreateSnapshot(content, project, zone, disk);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            // Name of the persistent disk to delete.
            string disk = "";

            DisksResource.DeleteRequest request = computeService.Disks.Delete(project, zone, disk);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            // Name of the persistent disk to return.
            string disk = "";

            DisksResource.GetRequest request = computeService.Disks.Get(project, zone, disk);
            Data.Disk response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Disk response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.Disk content = new Data.Disk();

            DisksResource.InsertRequest request = computeService.Disks.Insert(content, project, zone);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            DisksResource.ListRequest request = computeService.Disks.List(project, zone);
            Data.DiskList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Disk item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.DiskList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the firewall rule to delete.
            string firewall = "";

            FirewallsResource.DeleteRequest request = computeService.Firewalls.Delete(project, firewall);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the firewall rule to return.
            string firewall = "";

            FirewallsResource.GetRequest request = computeService.Firewalls.Get(project, firewall);
            Data.Firewall response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Firewall response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.Firewall content = new Data.Firewall();

            FirewallsResource.InsertRequest request = computeService.Firewalls.Insert(content, project);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            FirewallsResource.ListRequest request = computeService.Firewalls.List(project);
            Data.FirewallList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Firewall item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.FirewallList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Patch() method:

            // Project ID for this request.
            string project = "";

            // Name of the firewall rule to update.
            string firewall = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.Firewall content = new Data.Firewall();

            FirewallsResource.PatchRequest request = computeService.Firewalls.Patch(content, project, firewall);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Update() method:

            // Project ID for this request.
            string project = "";

            // Name of the firewall rule to update.
            string firewall = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.Firewall content = new Data.Firewall();

            FirewallsResource.UpdateRequest request = computeService.Firewalls.Update(content, project, firewall);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Collections.Generic;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the AggregatedList() method:

            // Project ID for this request.
            string project = "";

            ForwardingRulesResource.AggregatedListRequest request = computeService.ForwardingRules.AggregatedList(project);
            Data.ForwardingRuleAggregatedList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (KeyValuePair<string, Data.ForwardingRulesScopedList> item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.ForwardingRuleAggregatedList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the region scoping this request.
            string region = "";

            // Name of the ForwardingRule resource to delete.
            string forwardingRule = "";

            ForwardingRulesResource.DeleteRequest request = computeService.ForwardingRules.Delete(project, region, forwardingRule);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the region scoping this request.
            string region = "";

            // Name of the ForwardingRule resource to return.
            string forwardingRule = "";

            ForwardingRulesResource.GetRequest request = computeService.ForwardingRules.Get(project, region, forwardingRule);
            Data.ForwardingRule response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.ForwardingRule response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // Name of the region scoping this request.
            string region = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.ForwardingRule content = new Data.ForwardingRule();

            ForwardingRulesResource.InsertRequest request = computeService.ForwardingRules.Insert(content, project, region);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            // Name of the region scoping this request.
            string region = "";

            ForwardingRulesResource.ListRequest request = computeService.ForwardingRules.List(project, region);
            Data.ForwardingRuleList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.ForwardingRule item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.ForwardingRuleList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the SetTarget() method:

            // Project ID for this request.
            string project = "";

            // Name of the region scoping this request.
            string region = "";

            // Name of the ForwardingRule resource in which target is to be set.
            string forwardingRule = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.TargetReference content = new Data.TargetReference();

            ForwardingRulesResource.SetTargetRequest request = computeService.ForwardingRules.SetTarget(content, project, region, forwardingRule);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the address resource to delete.
            string address = "";

            GlobalAddressesResource.DeleteRequest request = computeService.GlobalAddresses.Delete(project, address);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the address resource to return.
            string address = "";

            GlobalAddressesResource.GetRequest request = computeService.GlobalAddresses.Get(project, address);
            Data.Address response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Address response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.Address content = new Data.Address();

            GlobalAddressesResource.InsertRequest request = computeService.GlobalAddresses.Insert(content, project);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            GlobalAddressesResource.ListRequest request = computeService.GlobalAddresses.List(project);
            Data.AddressList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Address item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.AddressList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the ForwardingRule resource to delete.
            string forwardingRule = "";

            GlobalForwardingRulesResource.DeleteRequest request = computeService.GlobalForwardingRules.Delete(project, forwardingRule);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the ForwardingRule resource to return.
            string forwardingRule = "";

            GlobalForwardingRulesResource.GetRequest request = computeService.GlobalForwardingRules.Get(project, forwardingRule);
            Data.ForwardingRule response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.ForwardingRule response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.ForwardingRule content = new Data.ForwardingRule();

            GlobalForwardingRulesResource.InsertRequest request = computeService.GlobalForwardingRules.Insert(content, project);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            GlobalForwardingRulesResource.ListRequest request = computeService.GlobalForwardingRules.List(project);
            Data.ForwardingRuleList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.ForwardingRule item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.ForwardingRuleList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the SetTarget() method:

            // Project ID for this request.
            string project = "";

            // Name of the ForwardingRule resource in which target is to be set.
            string forwardingRule = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.TargetReference content = new Data.TargetReference();

            GlobalForwardingRulesResource.SetTargetRequest request = computeService.GlobalForwardingRules.SetTarget(content, project, forwardingRule);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Collections.Generic;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the AggregatedList() method:

            // Project ID for this request.
            string project = "";

            GlobalOperationsResource.AggregatedListRequest request = computeService.GlobalOperations.AggregatedList(project);
            Data.OperationAggregatedList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (KeyValuePair<string, Data.OperationsScopedList> item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.OperationAggregatedList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the Operations resource to delete.
            string operation = "";

            GlobalOperationsResource.DeleteRequest request = computeService.GlobalOperations.Delete(project, operation);
            request.Execute();

            // To execute asynchronously in an async method, use
            // await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the Operations resource to return.
            string operation = "";

            GlobalOperationsResource.GetRequest request = computeService.GlobalOperations.Get(project, operation);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            GlobalOperationsResource.ListRequest request = computeService.GlobalOperations.List(project);
            Data.OperationList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Operation item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.OperationList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the HttpHealthCheck resource to delete.
            string httpHealthCheck = "";

            HttpHealthChecksResource.DeleteRequest request = computeService.HttpHealthChecks.Delete(project, httpHealthCheck);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the HttpHealthCheck resource to return.
            string httpHealthCheck = "";

            HttpHealthChecksResource.GetRequest request = computeService.HttpHealthChecks.Get(project, httpHealthCheck);
            Data.HttpHealthCheck response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.HttpHealthCheck response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.HttpHealthCheck content = new Data.HttpHealthCheck();

            HttpHealthChecksResource.InsertRequest request = computeService.HttpHealthChecks.Insert(content, project);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            HttpHealthChecksResource.ListRequest request = computeService.HttpHealthChecks.List(project);
            Data.HttpHealthCheckList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.HttpHealthCheck item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.HttpHealthCheckList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Patch() method:

            // Project ID for this request.
            string project = "";

            // Name of the HttpHealthCheck resource to update.
            string httpHealthCheck = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.HttpHealthCheck content = new Data.HttpHealthCheck();

            HttpHealthChecksResource.PatchRequest request = computeService.HttpHealthChecks.Patch(content, project, httpHealthCheck);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Update() method:

            // Project ID for this request.
            string project = "";

            // Name of the HttpHealthCheck resource to update.
            string httpHealthCheck = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.HttpHealthCheck content = new Data.HttpHealthCheck();

            HttpHealthChecksResource.UpdateRequest request = computeService.HttpHealthChecks.Update(content, project, httpHealthCheck);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the HttpsHealthCheck resource to delete.
            string httpsHealthCheck = "";

            HttpsHealthChecksResource.DeleteRequest request = computeService.HttpsHealthChecks.Delete(project, httpsHealthCheck);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the HttpsHealthCheck resource to return.
            string httpsHealthCheck = "";

            HttpsHealthChecksResource.GetRequest request = computeService.HttpsHealthChecks.Get(project, httpsHealthCheck);
            Data.HttpsHealthCheck response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.HttpsHealthCheck response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.HttpsHealthCheck content = new Data.HttpsHealthCheck();

            HttpsHealthChecksResource.InsertRequest request = computeService.HttpsHealthChecks.Insert(content, project);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            HttpsHealthChecksResource.ListRequest request = computeService.HttpsHealthChecks.List(project);
            Data.HttpsHealthCheckList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.HttpsHealthCheck item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.HttpsHealthCheckList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Patch() method:

            // Project ID for this request.
            string project = "";

            // Name of the HttpsHealthCheck resource to update.
            string httpsHealthCheck = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.HttpsHealthCheck content = new Data.HttpsHealthCheck();

            HttpsHealthChecksResource.PatchRequest request = computeService.HttpsHealthChecks.Patch(content, project, httpsHealthCheck);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Update() method:

            // Project ID for this request.
            string project = "";

            // Name of the HttpsHealthCheck resource to update.
            string httpsHealthCheck = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.HttpsHealthCheck content = new Data.HttpsHealthCheck();

            HttpsHealthChecksResource.UpdateRequest request = computeService.HttpsHealthChecks.Update(content, project, httpsHealthCheck);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the image resource to delete.
            string image = "";

            ImagesResource.DeleteRequest request = computeService.Images.Delete(project, image);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Deprecate() method:

            // Project ID for this request.
            string project = "";

            // Image name.
            string image = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.DeprecationStatus content = new Data.DeprecationStatus();

            ImagesResource.DeprecateRequest request = computeService.Images.Deprecate(content, project, image);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the image resource to return.
            string image = "";

            ImagesResource.GetRequest request = computeService.Images.Get(project, image);
            Data.Image response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Image response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.Image content = new Data.Image();

            ImagesResource.InsertRequest request = computeService.Images.Insert(content, project);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            ImagesResource.ListRequest request = computeService.Images.List(project);
            Data.ImageList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Image item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.ImageList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the AbandonInstances() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone where the managed instance group is located.
            string zone = "";

            // The name of the managed instance group.
            string instanceGroupManager = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.InstanceGroupManagersAbandonInstancesRequest content = new Data.InstanceGroupManagersAbandonInstancesRequest();

            InstanceGroupManagersResource.AbandonInstancesRequest request = computeService.InstanceGroupManagers.AbandonInstances(content, project, zone, instanceGroupManager);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Collections.Generic;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the AggregatedList() method:

            // Project ID for this request.
            string project = "";

            InstanceGroupManagersResource.AggregatedListRequest request = computeService.InstanceGroupManagers.AggregatedList(project);
            Data.InstanceGroupManagerAggregatedList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (KeyValuePair<string, Data.InstanceGroupManagersScopedList> item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.InstanceGroupManagerAggregatedList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone where the managed instance group is located.
            string zone = "";

            // The name of the managed instance group to delete.
            string instanceGroupManager = "";

            InstanceGroupManagersResource.DeleteRequest request = computeService.InstanceGroupManagers.Delete(project, zone, instanceGroupManager);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the DeleteInstances() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone where the managed instance group is located.
            string zone = "";

            // The name of the managed instance group.
            string instanceGroupManager = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.InstanceGroupManagersDeleteInstancesRequest content = new Data.InstanceGroupManagersDeleteInstancesRequest();

            InstanceGroupManagersResource.DeleteInstancesRequest request = computeService.InstanceGroupManagers.DeleteInstances(content, project, zone, instanceGroupManager);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone where the managed instance group is located.
            string zone = "";

            // The name of the managed instance group.
            string instanceGroupManager = "";

            InstanceGroupManagersResource.GetRequest request = computeService.InstanceGroupManagers.Get(project, zone, instanceGroupManager);
            Data.InstanceGroupManager response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.InstanceGroupManager response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone where you want to create the managed instance group.
            string zone = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.InstanceGroupManager content = new Data.InstanceGroupManager();

            InstanceGroupManagersResource.InsertRequest request = computeService.InstanceGroupManagers.Insert(content, project, zone);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone where the managed instance group is located.
            string zone = "";

            InstanceGroupManagersResource.ListRequest request = computeService.InstanceGroupManagers.List(project, zone);
            Data.InstanceGroupManagerList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.InstanceGroupManager item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.InstanceGroupManagerList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the ListManagedInstances() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone where the managed instance group is located.
            string zone = "";

            // The name of the managed instance group.
            string instanceGroupManager = "";

            InstanceGroupManagersResource.ListManagedInstancesRequest request = computeService.InstanceGroupManagers.ListManagedInstances(project, zone, instanceGroupManager);
            Data.InstanceGroupManagersListManagedInstancesResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.InstanceGroupManagersListManagedInstancesResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the RecreateInstances() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone where the managed instance group is located.
            string zone = "";

            // The name of the managed instance group.
            string instanceGroupManager = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.InstanceGroupManagersRecreateInstancesRequest content = new Data.InstanceGroupManagersRecreateInstancesRequest();

            InstanceGroupManagersResource.RecreateInstancesRequest request = computeService.InstanceGroupManagers.RecreateInstances(content, project, zone, instanceGroupManager);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Resize() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone where the managed instance group is located.
            string zone = "";

            // The name of the managed instance group.
            string instanceGroupManager = "";

            // The number of running instances that the managed instance group should maintain at any given time.
            // The group automatically adds or removes instances to maintain the number of instances specified by
            // this parameter.
            int size = 0;

            InstanceGroupManagersResource.ResizeRequest request = computeService.InstanceGroupManagers.Resize(project, zone, instanceGroupManager, size);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the SetInstanceTemplate() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone where the managed instance group is located.
            string zone = "";

            // The name of the managed instance group.
            string instanceGroupManager = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.InstanceGroupManagersSetInstanceTemplateRequest content = new Data.InstanceGroupManagersSetInstanceTemplateRequest();

            InstanceGroupManagersResource.SetInstanceTemplateRequest request = computeService.InstanceGroupManagers.SetInstanceTemplate(content, project, zone, instanceGroupManager);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the SetTargetPools() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone where the managed instance group is located.
            string zone = "";

            // The name of the managed instance group.
            string instanceGroupManager = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.InstanceGroupManagersSetTargetPoolsRequest content = new Data.InstanceGroupManagersSetTargetPoolsRequest();

            InstanceGroupManagersResource.SetTargetPoolsRequest request = computeService.InstanceGroupManagers.SetTargetPools(content, project, zone, instanceGroupManager);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the AddInstances() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone where the instance group is located.
            string zone = "";

            // The name of the instance group where you are adding instances.
            string instanceGroup = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.InstanceGroupsAddInstancesRequest content = new Data.InstanceGroupsAddInstancesRequest();

            InstanceGroupsResource.AddInstancesRequest request = computeService.InstanceGroups.AddInstances(content, project, zone, instanceGroup);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Collections.Generic;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the AggregatedList() method:

            // Project ID for this request.
            string project = "";

            InstanceGroupsResource.AggregatedListRequest request = computeService.InstanceGroups.AggregatedList(project);
            Data.InstanceGroupAggregatedList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (KeyValuePair<string, Data.InstanceGroupsScopedList> item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.InstanceGroupAggregatedList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone where the instance group is located.
            string zone = "";

            // The name of the instance group to delete.
            string instanceGroup = "";

            InstanceGroupsResource.DeleteRequest request = computeService.InstanceGroups.Delete(project, zone, instanceGroup);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone where the instance group is located.
            string zone = "";

            // The name of the instance group.
            string instanceGroup = "";

            InstanceGroupsResource.GetRequest request = computeService.InstanceGroups.Get(project, zone, instanceGroup);
            Data.InstanceGroup response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.InstanceGroup response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone where you want to create the instance group.
            string zone = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.InstanceGroup content = new Data.InstanceGroup();

            InstanceGroupsResource.InsertRequest request = computeService.InstanceGroups.Insert(content, project, zone);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone where the instance group is located.
            string zone = "";

            InstanceGroupsResource.ListRequest request = computeService.InstanceGroups.List(project, zone);
            Data.InstanceGroupList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.InstanceGroup item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.InstanceGroupList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the ListInstances() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone where the instance group is located.
            string zone = "";

            // The name of the instance group from which you want to generate a list of included instances.
            string instanceGroup = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.InstanceGroupsListInstancesRequest content = new Data.InstanceGroupsListInstancesRequest();

            InstanceGroupsResource.ListInstancesRequest request = computeService.InstanceGroups.ListInstances(content, project, zone, instanceGroup);
            Data.InstanceGroupsListInstances response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.InstanceWithNamedPorts item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.InstanceGroupsListInstances response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the RemoveInstances() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone where the instance group is located.
            string zone = "";

            // The name of the instance group where the specified instances will be removed.
            string instanceGroup = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.InstanceGroupsRemoveInstancesRequest content = new Data.InstanceGroupsRemoveInstancesRequest();

            InstanceGroupsResource.RemoveInstancesRequest request = computeService.InstanceGroups.RemoveInstances(content, project, zone, instanceGroup);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the SetNamedPorts() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone where the instance group is located.
            string zone = "";

            // The name of the instance group where the named ports are updated.
            string instanceGroup = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.InstanceGroupsSetNamedPortsRequest content = new Data.InstanceGroupsSetNamedPortsRequest();

            InstanceGroupsResource.SetNamedPortsRequest request = computeService.InstanceGroups.SetNamedPorts(content, project, zone, instanceGroup);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // The name of the instance template to delete.
            string instanceTemplate = "";

            InstanceTemplatesResource.DeleteRequest request = computeService.InstanceTemplates.Delete(project, instanceTemplate);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // The name of the instance template.
            string instanceTemplate = "";

            InstanceTemplatesResource.GetRequest request = computeService.InstanceTemplates.Get(project, instanceTemplate);
            Data.InstanceTemplate response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.InstanceTemplate response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.InstanceTemplate content = new Data.InstanceTemplate();

            InstanceTemplatesResource.InsertRequest request = computeService.InstanceTemplates.Insert(content, project);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            InstanceTemplatesResource.ListRequest request = computeService.InstanceTemplates.List(project);
            Data.InstanceTemplateList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.InstanceTemplate item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.InstanceTemplateList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the AddAccessConfig() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            // The instance name for this request.
            string instance = "";

            // The name of the network interface to add to this instance.
            string networkInterface = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.AccessConfig content = new Data.AccessConfig();

            InstancesResource.AddAccessConfigRequest request = computeService.Instances.AddAccessConfig(content, project, zone, instance, networkInterface);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Collections.Generic;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the AggregatedList() method:

            // Project ID for this request.
            string project = "";

            InstancesResource.AggregatedListRequest request = computeService.Instances.AggregatedList(project);
            Data.InstanceAggregatedList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (KeyValuePair<string, Data.InstancesScopedList> item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.InstanceAggregatedList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the AttachDisk() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            // The instance name for this request.
            string instance = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.AttachedDisk content = new Data.AttachedDisk();

            InstancesResource.AttachDiskRequest request = computeService.Instances.AttachDisk(content, project, zone, instance);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            // Name of the instance resource to delete.
            string instance = "";

            InstancesResource.DeleteRequest request = computeService.Instances.Delete(project, zone, instance);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the DeleteAccessConfig() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            // The instance name for this request.
            string instance = "";

            // The name of the access config to delete.
            string accessConfig = "";

            // The name of the network interface.
            string networkInterface = "";

            InstancesResource.DeleteAccessConfigRequest request = computeService.Instances.DeleteAccessConfig(project, zone, instance, accessConfig, networkInterface);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the DetachDisk() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            // Instance name.
            string instance = "";

            // Disk device name to detach.
            string deviceName = "";

            InstancesResource.DetachDiskRequest request = computeService.Instances.DetachDisk(project, zone, instance, deviceName);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            // Name of the instance resource to return.
            string instance = "";

            InstancesResource.GetRequest request = computeService.Instances.Get(project, zone, instance);
            Data.Instance response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Instance response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the GetSerialPortOutput() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            // Name of the instance scoping this request.
            string instance = "";

            InstancesResource.GetSerialPortOutputRequest request = computeService.Instances.GetSerialPortOutput(project, zone, instance);
            Data.SerialPortOutput response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.SerialPortOutput response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.Instance content = new Data.Instance();

            InstancesResource.InsertRequest request = computeService.Instances.Insert(content, project, zone);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            InstancesResource.ListRequest request = computeService.Instances.List(project, zone);
            Data.InstanceList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Instance item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.InstanceList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Reset() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            // Name of the instance scoping this request.
            string instance = "";

            InstancesResource.ResetRequest request = computeService.Instances.Reset(project, zone, instance);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the SetDiskAutoDelete() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            // The instance name.
            string instance = "";

            // Whether to auto-delete the disk when the instance is deleted.
            bool autoDelete = false;

            // The device name of the disk to modify.
            string deviceName = "";

            InstancesResource.SetDiskAutoDeleteRequest request = computeService.Instances.SetDiskAutoDelete(project, zone, instance, autoDelete, deviceName);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the SetMachineType() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            // Name of the instance scoping this request.
            string instance = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.InstancesSetMachineTypeRequest content = new Data.InstancesSetMachineTypeRequest();

            InstancesResource.SetMachineTypeRequest request = computeService.Instances.SetMachineType(content, project, zone, instance);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the SetMetadata() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            // Name of the instance scoping this request.
            string instance = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.Metadata content = new Data.Metadata();

            InstancesResource.SetMetadataRequest request = computeService.Instances.SetMetadata(content, project, zone, instance);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the SetScheduling() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            // Instance name.
            string instance = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.Scheduling content = new Data.Scheduling();

            InstancesResource.SetSchedulingRequest request = computeService.Instances.SetScheduling(content, project, zone, instance);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the SetTags() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            // Name of the instance scoping this request.
            string instance = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.Tags content = new Data.Tags();

            InstancesResource.SetTagsRequest request = computeService.Instances.SetTags(content, project, zone, instance);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Start() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            // Name of the instance resource to start.
            string instance = "";

            InstancesResource.StartRequest request = computeService.Instances.Start(project, zone, instance);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Stop() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            // Name of the instance resource to stop.
            string instance = "";

            InstancesResource.StopRequest request = computeService.Instances.Stop(project, zone, instance);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the License resource to return.
            string license = "";

            LicensesResource.GetRequest request = computeService.Licenses.Get(project, license);
            Data.License response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.License response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Collections.Generic;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the AggregatedList() method:

            // Project ID for this request.
            string project = "";

            MachineTypesResource.AggregatedListRequest request = computeService.MachineTypes.AggregatedList(project);
            Data.MachineTypeAggregatedList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (KeyValuePair<string, Data.MachineTypesScopedList> item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.MachineTypeAggregatedList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            // Name of the machine type to return.
            string machineType = "";

            MachineTypesResource.GetRequest request = computeService.MachineTypes.Get(project, zone, machineType);
            Data.MachineType response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.MachineType response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            // The name of the zone for this request.
            string zone = "";

            MachineTypesResource.ListRequest request = computeService.MachineTypes.List(project, zone);
            Data.MachineTypeList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.MachineType item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.MachineTypeList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the network to delete.
            string network = "";

            NetworksResource.DeleteRequest request = computeService.Networks.Delete(project, network);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the network to return.
            string network = "";

            NetworksResource.GetRequest request = computeService.Networks.Get(project, network);
            Data.Network response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Network response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.Network content = new Data.Network();

            NetworksResource.InsertRequest request = computeService.Networks.Insert(content, project);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            NetworksResource.ListRequest request = computeService.Networks.List(project);
            Data.NetworkList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Network item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.NetworkList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            ProjectsResource.GetRequest request = computeService.Projects.Get(project);
            Data.Project response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Project response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the MoveDisk() method:

            // Project ID for this request.
            string project = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.DiskMoveRequest content = new Data.DiskMoveRequest();

            ProjectsResource.MoveDiskRequest request = computeService.Projects.MoveDisk(content, project);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the MoveInstance() method:

            // Project ID for this request.
            string project = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.InstanceMoveRequest content = new Data.InstanceMoveRequest();

            ProjectsResource.MoveInstanceRequest request = computeService.Projects.MoveInstance(content, project);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the SetCommonInstanceMetadata() method:

            // Project ID for this request.
            string project = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.Metadata content = new Data.Metadata();

            ProjectsResource.SetCommonInstanceMetadataRequest request = computeService.Projects.SetCommonInstanceMetadata(content, project);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the SetUsageExportBucket() method:

            // Project ID for this request.
            string project = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.UsageExportLocation content = new Data.UsageExportLocation();

            ProjectsResource.SetUsageExportBucketRequest request = computeService.Projects.SetUsageExportBucket(content, project);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the region for this request.
            string region = "";

            // Name of the Operations resource to delete.
            string operation = "";

            RegionOperationsResource.DeleteRequest request = computeService.RegionOperations.Delete(project, region, operation);
            request.Execute();

            // To execute asynchronously in an async method, use
            // await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the region for this request.
            string region = "";

            // Name of the Operations resource to return.
            string operation = "";

            RegionOperationsResource.GetRequest request = computeService.RegionOperations.Get(project, region, operation);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            // Name of the region for this request.
            string region = "";

            RegionOperationsResource.ListRequest request = computeService.RegionOperations.List(project, region);
            Data.OperationList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Operation item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.OperationList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the region resource to return.
            string region = "";

            RegionsResource.GetRequest request = computeService.Regions.Get(project, region);
            Data.Region response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Region response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            RegionsResource.ListRequest request = computeService.Regions.List(project);
            Data.RegionList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Region item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.RegionList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the Route resource to delete.
            string route = "";

            RoutesResource.DeleteRequest request = computeService.Routes.Delete(project, route);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the Route resource to return.
            string route = "";

            RoutesResource.GetRequest request = computeService.Routes.Get(project, route);
            Data.Route response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Route response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.Route content = new Data.Route();

            RoutesResource.InsertRequest request = computeService.Routes.Insert(content, project);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            RoutesResource.ListRequest request = computeService.Routes.List(project);
            Data.RouteList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Route item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.RouteList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the Snapshot resource to delete.
            string snapshot = "";

            SnapshotsResource.DeleteRequest request = computeService.Snapshots.Delete(project, snapshot);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the Snapshot resource to return.
            string snapshot = "";

            SnapshotsResource.GetRequest request = computeService.Snapshots.Get(project, snapshot);
            Data.Snapshot response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Snapshot response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            SnapshotsResource.ListRequest request = computeService.Snapshots.List(project);
            Data.SnapshotList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Snapshot item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.SnapshotList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the SslCertificate resource to delete.
            string sslCertificate = "";

            SslCertificatesResource.DeleteRequest request = computeService.SslCertificates.Delete(project, sslCertificate);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the SslCertificate resource to return.
            string sslCertificate = "";

            SslCertificatesResource.GetRequest request = computeService.SslCertificates.Get(project, sslCertificate);
            Data.SslCertificate response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.SslCertificate response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.SslCertificate content = new Data.SslCertificate();

            SslCertificatesResource.InsertRequest request = computeService.SslCertificates.Insert(content, project);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            SslCertificatesResource.ListRequest request = computeService.SslCertificates.List(project);
            Data.SslCertificateList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.SslCertificate item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.SslCertificateList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Collections.Generic;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the AggregatedList() method:

            // Project ID for this request.
            string project = "";

            SubnetworksResource.AggregatedListRequest request = computeService.Subnetworks.AggregatedList(project);
            Data.SubnetworkAggregatedList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (KeyValuePair<string, Data.SubnetworksScopedList> item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.SubnetworkAggregatedList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the region scoping this request.
            string region = "";

            // Name of the Subnetwork resource to delete.
            string subnetwork = "";

            SubnetworksResource.DeleteRequest request = computeService.Subnetworks.Delete(project, region, subnetwork);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the region scoping this request.
            string region = "";

            // Name of the Subnetwork resource to return.
            string subnetwork = "";

            SubnetworksResource.GetRequest request = computeService.Subnetworks.Get(project, region, subnetwork);
            Data.Subnetwork response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Subnetwork response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // Name of the region scoping this request.
            string region = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.Subnetwork content = new Data.Subnetwork();

            SubnetworksResource.InsertRequest request = computeService.Subnetworks.Insert(content, project, region);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            // Name of the region scoping this request.
            string region = "";

            SubnetworksResource.ListRequest request = computeService.Subnetworks.List(project, region);
            Data.SubnetworkList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Subnetwork item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.SubnetworkList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the TargetHttpProxy resource to delete.
            string targetHttpProxy = "";

            TargetHttpProxiesResource.DeleteRequest request = computeService.TargetHttpProxies.Delete(project, targetHttpProxy);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the TargetHttpProxy resource to return.
            string targetHttpProxy = "";

            TargetHttpProxiesResource.GetRequest request = computeService.TargetHttpProxies.Get(project, targetHttpProxy);
            Data.TargetHttpProxy response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.TargetHttpProxy response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.TargetHttpProxy content = new Data.TargetHttpProxy();

            TargetHttpProxiesResource.InsertRequest request = computeService.TargetHttpProxies.Insert(content, project);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            TargetHttpProxiesResource.ListRequest request = computeService.TargetHttpProxies.List(project);
            Data.TargetHttpProxyList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.TargetHttpProxy item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.TargetHttpProxyList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the SetUrlMap() method:

            // Project ID for this request.
            string project = "";

            // Name of the TargetHttpProxy to set a URL map for.
            string targetHttpProxy = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.UrlMapReference content = new Data.UrlMapReference();

            TargetHttpProxiesResource.SetUrlMapRequest request = computeService.TargetHttpProxies.SetUrlMap(content, project, targetHttpProxy);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the TargetHttpsProxy resource to delete.
            string targetHttpsProxy = "";

            TargetHttpsProxiesResource.DeleteRequest request = computeService.TargetHttpsProxies.Delete(project, targetHttpsProxy);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the TargetHttpsProxy resource to return.
            string targetHttpsProxy = "";

            TargetHttpsProxiesResource.GetRequest request = computeService.TargetHttpsProxies.Get(project, targetHttpsProxy);
            Data.TargetHttpsProxy response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.TargetHttpsProxy response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.TargetHttpsProxy content = new Data.TargetHttpsProxy();

            TargetHttpsProxiesResource.InsertRequest request = computeService.TargetHttpsProxies.Insert(content, project);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            TargetHttpsProxiesResource.ListRequest request = computeService.TargetHttpsProxies.List(project);
            Data.TargetHttpsProxyList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.TargetHttpsProxy item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.TargetHttpsProxyList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the SetSslCertificates() method:

            // Project ID for this request.
            string project = "";

            // Name of the TargetHttpsProxy resource to set an SslCertificates resource for.
            string targetHttpsProxy = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.TargetHttpsProxiesSetSslCertificatesRequest content = new Data.TargetHttpsProxiesSetSslCertificatesRequest();

            TargetHttpsProxiesResource.SetSslCertificatesRequest request = computeService.TargetHttpsProxies.SetSslCertificates(content, project, targetHttpsProxy);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the SetUrlMap() method:

            // Project ID for this request.
            string project = "";

            // Name of the TargetHttpsProxy resource whose URL map is to be set.
            string targetHttpsProxy = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.UrlMapReference content = new Data.UrlMapReference();

            TargetHttpsProxiesResource.SetUrlMapRequest request = computeService.TargetHttpsProxies.SetUrlMap(content, project, targetHttpsProxy);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Collections.Generic;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the AggregatedList() method:

            // Project ID for this request.
            string project = "";

            TargetInstancesResource.AggregatedListRequest request = computeService.TargetInstances.AggregatedList(project);
            Data.TargetInstanceAggregatedList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (KeyValuePair<string, Data.TargetInstancesScopedList> item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.TargetInstanceAggregatedList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the zone scoping this request.
            string zone = "";

            // Name of the TargetInstance resource to delete.
            string targetInstance = "";

            TargetInstancesResource.DeleteRequest request = computeService.TargetInstances.Delete(project, zone, targetInstance);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the zone scoping this request.
            string zone = "";

            // Name of the TargetInstance resource to return.
            string targetInstance = "";

            TargetInstancesResource.GetRequest request = computeService.TargetInstances.Get(project, zone, targetInstance);
            Data.TargetInstance response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.TargetInstance response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // Name of the zone scoping this request.
            string zone = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.TargetInstance content = new Data.TargetInstance();

            TargetInstancesResource.InsertRequest request = computeService.TargetInstances.Insert(content, project, zone);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            // Name of the zone scoping this request.
            string zone = "";

            TargetInstancesResource.ListRequest request = computeService.TargetInstances.List(project, zone);
            Data.TargetInstanceList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.TargetInstance item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.TargetInstanceList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the AddHealthCheck() method:

            // Project ID for this request.
            string project = "";

            // Name of the region scoping this request.
            string region = "";

            // Name of the target pool to add a health check to.
            string targetPool = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.TargetPoolsAddHealthCheckRequest content = new Data.TargetPoolsAddHealthCheckRequest();

            TargetPoolsResource.AddHealthCheckRequest request = computeService.TargetPools.AddHealthCheck(content, project, region, targetPool);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the AddInstance() method:

            // Project ID for this request.
            string project = "";

            // Name of the region scoping this request.
            string region = "";

            // Name of the TargetPool resource to add instances to.
            string targetPool = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.TargetPoolsAddInstanceRequest content = new Data.TargetPoolsAddInstanceRequest();

            TargetPoolsResource.AddInstanceRequest request = computeService.TargetPools.AddInstance(content, project, region, targetPool);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Collections.Generic;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the AggregatedList() method:

            // Project ID for this request.
            string project = "";

            TargetPoolsResource.AggregatedListRequest request = computeService.TargetPools.AggregatedList(project);
            Data.TargetPoolAggregatedList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (KeyValuePair<string, Data.TargetPoolsScopedList> item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.TargetPoolAggregatedList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the region scoping this request.
            string region = "";

            // Name of the TargetPool resource to delete.
            string targetPool = "";

            TargetPoolsResource.DeleteRequest request = computeService.TargetPools.Delete(project, region, targetPool);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the region scoping this request.
            string region = "";

            // Name of the TargetPool resource to return.
            string targetPool = "";

            TargetPoolsResource.GetRequest request = computeService.TargetPools.Get(project, region, targetPool);
            Data.TargetPool response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.TargetPool response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the GetHealth() method:

            // Project ID for this request.
            string project = "";

            // Name of the region scoping this request.
            string region = "";

            // Name of the TargetPool resource to which the queried instance belongs.
            string targetPool = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.InstanceReference content = new Data.InstanceReference();

            TargetPoolsResource.GetHealthRequest request = computeService.TargetPools.GetHealth(content, project, region, targetPool);
            Data.TargetPoolInstanceHealth response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.TargetPoolInstanceHealth response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // Name of the region scoping this request.
            string region = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.TargetPool content = new Data.TargetPool();

            TargetPoolsResource.InsertRequest request = computeService.TargetPools.Insert(content, project, region);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            // Name of the region scoping this request.
            string region = "";

            TargetPoolsResource.ListRequest request = computeService.TargetPools.List(project, region);
            Data.TargetPoolList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.TargetPool item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.TargetPoolList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the RemoveHealthCheck() method:

            // Project ID for this request.
            string project = "";

            // Name of the region for this request.
            string region = "";

            // Name of the target pool to remove health checks from.
            string targetPool = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.TargetPoolsRemoveHealthCheckRequest content = new Data.TargetPoolsRemoveHealthCheckRequest();

            TargetPoolsResource.RemoveHealthCheckRequest request = computeService.TargetPools.RemoveHealthCheck(content, project, region, targetPool);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the RemoveInstance() method:

            // Project ID for this request.
            string project = "";

            // Name of the region scoping this request.
            string region = "";

            // Name of the TargetPool resource to remove instances from.
            string targetPool = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.TargetPoolsRemoveInstanceRequest content = new Data.TargetPoolsRemoveInstanceRequest();

            TargetPoolsResource.RemoveInstanceRequest request = computeService.TargetPools.RemoveInstance(content, project, region, targetPool);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the SetBackup() method:

            // Project ID for this request.
            string project = "";

            // Name of the region scoping this request.
            string region = "";

            // Name of the TargetPool resource to set a backup pool for.
            string targetPool = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.TargetReference content = new Data.TargetReference();

            TargetPoolsResource.SetBackupRequest request = computeService.TargetPools.SetBackup(content, project, region, targetPool);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Collections.Generic;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the AggregatedList() method:

            // Project ID for this request.
            string project = "";

            TargetVpnGatewaysResource.AggregatedListRequest request = computeService.TargetVpnGateways.AggregatedList(project);
            Data.TargetVpnGatewayAggregatedList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (KeyValuePair<string, Data.TargetVpnGatewaysScopedList> item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.TargetVpnGatewayAggregatedList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the region for this request.
            string region = "";

            // Name of the target VPN gateway to delete.
            string targetVpnGateway = "";

            TargetVpnGatewaysResource.DeleteRequest request = computeService.TargetVpnGateways.Delete(project, region, targetVpnGateway);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the region for this request.
            string region = "";

            // Name of the target VPN gateway to return.
            string targetVpnGateway = "";

            TargetVpnGatewaysResource.GetRequest request = computeService.TargetVpnGateways.Get(project, region, targetVpnGateway);
            Data.TargetVpnGateway response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.TargetVpnGateway response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // Name of the region for this request.
            string region = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.TargetVpnGateway content = new Data.TargetVpnGateway();

            TargetVpnGatewaysResource.InsertRequest request = computeService.TargetVpnGateways.Insert(content, project, region);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            // Name of the region for this request.
            string region = "";

            TargetVpnGatewaysResource.ListRequest request = computeService.TargetVpnGateways.List(project, region);
            Data.TargetVpnGatewayList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.TargetVpnGateway item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.TargetVpnGatewayList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the UrlMap resource to delete.
            string urlMap = "";

            UrlMapsResource.DeleteRequest request = computeService.UrlMaps.Delete(project, urlMap);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the UrlMap resource to return.
            string urlMap = "";

            UrlMapsResource.GetRequest request = computeService.UrlMaps.Get(project, urlMap);
            Data.UrlMap response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.UrlMap response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.UrlMap content = new Data.UrlMap();

            UrlMapsResource.InsertRequest request = computeService.UrlMaps.Insert(content, project);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            UrlMapsResource.ListRequest request = computeService.UrlMaps.List(project);
            Data.UrlMapList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.UrlMap item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.UrlMapList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Patch() method:

            // Project ID for this request.
            string project = "";

            // Name of the UrlMap resource to update.
            string urlMap = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.UrlMap content = new Data.UrlMap();

            UrlMapsResource.PatchRequest request = computeService.UrlMaps.Patch(content, project, urlMap);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Update() method:

            // Project ID for this request.
            string project = "";

            // Name of the UrlMap resource to update.
            string urlMap = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.UrlMap content = new Data.UrlMap();

            UrlMapsResource.UpdateRequest request = computeService.UrlMaps.Update(content, project, urlMap);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Validate() method:

            // Project ID for this request.
            string project = "";

            // Name of the UrlMap resource to be validated as.
            string urlMap = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.UrlMapsValidateRequest content = new Data.UrlMapsValidateRequest();

            UrlMapsResource.ValidateRequest request = computeService.UrlMaps.Validate(content, project, urlMap);
            Data.UrlMapsValidateResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.UrlMapsValidateResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Collections.Generic;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the AggregatedList() method:

            // Project ID for this request.
            string project = "";

            VpnTunnelsResource.AggregatedListRequest request = computeService.VpnTunnels.AggregatedList(project);
            Data.VpnTunnelAggregatedList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (KeyValuePair<string, Data.VpnTunnelsScopedList> item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.VpnTunnelAggregatedList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the region for this request.
            string region = "";

            // Name of the VpnTunnel resource to delete.
            string vpnTunnel = "";

            VpnTunnelsResource.DeleteRequest request = computeService.VpnTunnels.Delete(project, region, vpnTunnel);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the region for this request.
            string region = "";

            // Name of the VpnTunnel resource to return.
            string vpnTunnel = "";

            VpnTunnelsResource.GetRequest request = computeService.VpnTunnels.Get(project, region, vpnTunnel);
            Data.VpnTunnel response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.VpnTunnel response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // Project ID for this request.
            string project = "";

            // Name of the region for this request.
            string region = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.VpnTunnel content = new Data.VpnTunnel();

            VpnTunnelsResource.InsertRequest request = computeService.VpnTunnels.Insert(content, project, region);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            // Name of the region for this request.
            string region = "";

            VpnTunnelsResource.ListRequest request = computeService.VpnTunnels.List(project, region);
            Data.VpnTunnelList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.VpnTunnel item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.VpnTunnelList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // Project ID for this request.
            string project = "";

            // Name of the zone for this request.
            string zone = "";

            // Name of the Operations resource to delete.
            string operation = "";

            ZoneOperationsResource.DeleteRequest request = computeService.ZoneOperations.Delete(project, zone, operation);
            request.Execute();

            // To execute asynchronously in an async method, use
            // await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the zone for this request.
            string zone = "";

            // Name of the Operations resource to return.
            string operation = "";

            ZoneOperationsResource.GetRequest request = computeService.ZoneOperations.Get(project, zone, operation);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            // Name of the zone for request.
            string zone = "";

            ZoneOperationsResource.ListRequest request = computeService.ZoneOperations.List(project, zone);
            Data.OperationList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Operation item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.OperationList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // Project ID for this request.
            string project = "";

            // Name of the zone resource to return.
            string zone = "";

            ZonesResource.GetRequest request = computeService.Zones.Get(project, zone);
            Data.Zone response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Zone response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Compute Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/compute
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Compute.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Compute.v1.Data;

namespace ComputeSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            ComputeService computeService = new ComputeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // Project ID for this request.
            string project = "";

            ZonesResource.ListRequest request = computeService.Zones.List(project);
            Data.ZoneList response;
            do
            {
                response = request.Execute();
                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Zone item in response.Items)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.ZoneList response = await request.ExecuteAsync();
        }
    }
}
