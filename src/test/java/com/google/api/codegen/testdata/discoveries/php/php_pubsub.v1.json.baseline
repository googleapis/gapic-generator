
<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Pubsub service.
$service = new Google_Service_Pubsub($client);

// * The subscription whose message is being acknowledged.
$subscription = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}';

$postBody = new Google_Service_Pubsub_AcknowledgeRequest($client);

$response = $service->projects_subscriptions->acknowledge($subscription, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Pubsub service.
$service = new Google_Service_Pubsub($client);

// * The name of the subscription. It must have the format
//   `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must start with a letter,
//   and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`), periods
//   (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters in
//   length, and it must not start with `"goog"`.
$name = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}';

$postBody = new Google_Service_Pubsub_Subscription($client);

$response = $service->projects_subscriptions->create($name, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Pubsub service.
$service = new Google_Service_Pubsub($client);

// * The subscription to delete.
$subscription = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}';

$response = $service->projects_subscriptions->delete($subscription);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Pubsub service.
$service = new Google_Service_Pubsub($client);

// * The name of the subscription to get.
$subscription = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}';

$response = $service->projects_subscriptions->get($subscription);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Pubsub service.
$service = new Google_Service_Pubsub($client);

// * REQUIRED: The resource for which policy is being requested. `resource` is usually specified as a
//   path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified
//   in this value is resource specific and is specified in the documentation for the respective
//   GetIamPolicy rpc.
$resource = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}';

$response = $service->projects_subscriptions->getIamPolicy($resource);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Pubsub service.
$service = new Google_Service_Pubsub($client);

// * The name of the cloud project that subscriptions belong to.
$project = 'projects/{MY-PROJECT}';

$response = $service->projects_subscriptions->listProjectsSubscriptions($project);

foreach ($response['subscriptions'] as $element) {
  // TODO: Add code here to process the element.
}

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Pubsub service.
$service = new Google_Service_Pubsub($client);

// * The name of the subscription.
$subscription = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}';

$postBody = new Google_Service_Pubsub_ModifyAckDeadlineRequest($client);

$response = $service->projects_subscriptions->modifyAckDeadline($subscription, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Pubsub service.
$service = new Google_Service_Pubsub($client);

// * The name of the subscription.
$subscription = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}';

$postBody = new Google_Service_Pubsub_ModifyPushConfigRequest($client);

$response = $service->projects_subscriptions->modifyPushConfig($subscription, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Pubsub service.
$service = new Google_Service_Pubsub($client);

// * The subscription from which messages should be pulled.
$subscription = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}';

$postBody = new Google_Service_Pubsub_PullRequest($client);

$response = $service->projects_subscriptions->pull($subscription, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Pubsub service.
$service = new Google_Service_Pubsub($client);

// * REQUIRED: The resource for which policy is being specified. `resource` is usually specified as a
//   path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified
//   in this value is resource specific and is specified in the documentation for the respective
//   SetIamPolicy rpc.
$resource = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}';

$postBody = new Google_Service_Pubsub_SetIamPolicyRequest($client);

$response = $service->projects_subscriptions->setIamPolicy($resource, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Pubsub service.
$service = new Google_Service_Pubsub($client);

// * REQUIRED: The resource for which policy detail is being requested. `resource` is usually specified
//   as a path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path
//   specified in this value is resource specific and is specified in the documentation for the
//   respective TestIamPermissions rpc.
$resource = 'projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}';

$postBody = new Google_Service_Pubsub_TestIamPermissionsRequest($client);

$response = $service->projects_subscriptions->testIamPermissions($resource, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Pubsub service.
$service = new Google_Service_Pubsub($client);

// * The name of the topic. It must have the format `"projects/{project}/topics/{topic}"`. `{topic}`
//   must start with a letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
//   underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be
//   between 3 and 255 characters in length, and it must not start with `"goog"`.
$name = 'projects/{MY-PROJECT}/topics/{MY-TOPIC}';

$postBody = new Google_Service_Pubsub_Topic($client);

$response = $service->projects_topics->create($name, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Pubsub service.
$service = new Google_Service_Pubsub($client);

// * Name of the topic to delete.
$topic = 'projects/{MY-PROJECT}/topics/{MY-TOPIC}';

$response = $service->projects_topics->delete($topic);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Pubsub service.
$service = new Google_Service_Pubsub($client);

// * The name of the topic to get.
$topic = 'projects/{MY-PROJECT}/topics/{MY-TOPIC}';

$response = $service->projects_topics->get($topic);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Pubsub service.
$service = new Google_Service_Pubsub($client);

// * REQUIRED: The resource for which policy is being requested. `resource` is usually specified as a
//   path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified
//   in this value is resource specific and is specified in the documentation for the respective
//   GetIamPolicy rpc.
$resource = 'projects/{MY-PROJECT}/topics/{MY-TOPIC}';

$response = $service->projects_topics->getIamPolicy($resource);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Pubsub service.
$service = new Google_Service_Pubsub($client);

// * The name of the cloud project that topics belong to.
$project = 'projects/{MY-PROJECT}';

$response = $service->projects_topics->listProjectsTopics($project);

foreach ($response['topics'] as $element) {
  // TODO: Add code here to process the element.
}

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Pubsub service.
$service = new Google_Service_Pubsub($client);

// * The messages in the request will be published on this topic.
$topic = 'projects/{MY-PROJECT}/topics/{MY-TOPIC}';

$postBody = new Google_Service_Pubsub_PublishRequest($client);

$response = $service->projects_topics->publish($topic, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Pubsub service.
$service = new Google_Service_Pubsub($client);

// * REQUIRED: The resource for which policy is being specified. `resource` is usually specified as a
//   path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified
//   in this value is resource specific and is specified in the documentation for the respective
//   SetIamPolicy rpc.
$resource = 'projects/{MY-PROJECT}/topics/{MY-TOPIC}';

$postBody = new Google_Service_Pubsub_SetIamPolicyRequest($client);

$response = $service->projects_topics->setIamPolicy($resource, $postBody);

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Pubsub service.
$service = new Google_Service_Pubsub($client);

// * The name of the topic that subscriptions are attached to.
$topic = 'projects/{MY-PROJECT}/topics/{MY-TOPIC}';

$response = $service->projects_topics_subscriptions->listProjectsTopicsSubscriptions($topic);

foreach ($response['subscriptions'] as $element) {
  // TODO: Add code here to process the element.
}

<?php
/*
 * PRE-REQUISITES:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. To install the client library with Composer, check installation instructions at
 *    https://github.com/google/google-api-php-client.
 * 3. This sample uses Application Default Credentials for Auth.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Create a new client.
$client = new Google_Client();
$client->setApplicationName('Client Sample Application');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Create a new Pubsub service.
$service = new Google_Service_Pubsub($client);

// * REQUIRED: The resource for which policy detail is being requested. `resource` is usually specified
//   as a path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path
//   specified in this value is resource specific and is specified in the documentation for the
//   respective TestIamPermissions rpc.
$resource = 'projects/{MY-PROJECT}/topics/{MY-TOPIC}';

$postBody = new Google_Service_Pubsub_TestIamPermissionsRequest($client);

$response = $service->projects_topics->testIamPermissions($resource, $postBody);

