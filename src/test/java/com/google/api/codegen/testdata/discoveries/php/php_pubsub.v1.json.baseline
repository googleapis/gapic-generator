
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-PubsubSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Pubsub($client);

// REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as
// a path. For example, a Project resource is specified as `projects/{project}`.
$resource = '';  // TODO: Update placeholder value.
// ex: 'projects/my-project/snapshots/my-snapshot'

$response = $service->projects_snapshots->getIamPolicy($resource);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-PubsubSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Pubsub($client);

// REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as
// a path. For example, a Project resource is specified as `projects/{project}`.
$resource = '';  // TODO: Update placeholder value.
// ex: 'projects/my-project/snapshots/my-snapshot'

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Pubsub_SetIamPolicyRequest();

$response = $service->projects_snapshots->setIamPolicy($resource, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-PubsubSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Pubsub($client);

// REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
// specified as a path. For example, a Project resource is specified as `projects/{project}`.
$resource = '';  // TODO: Update placeholder value.
// ex: 'projects/my-project/snapshots/my-snapshot'

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Pubsub_TestIamPermissionsRequest();

$response = $service->projects_snapshots->testIamPermissions($resource, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-PubsubSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Pubsub($client);

// The subscription whose message is being acknowledged.
$subscription = '';  // TODO: Update placeholder value.
// ex: 'projects/my-project/subscriptions/my-subscription'

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Pubsub_AcknowledgeRequest();

$service->projects_subscriptions->acknowledge($subscription, $requestBody);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-PubsubSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Pubsub($client);

// The name of the subscription. It must have the format
// `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must start with a letter, and
// contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`), periods
// (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters in
// length, and it must not start with `"goog"`.
$name = '';  // TODO: Update placeholder value.
// ex: 'projects/my-project/subscriptions/my-subscription'

// TODO: Assign values to desired properties of `requestBody`. All existing
// properties will be replaced:
$requestBody = new Google_Service_Pubsub_Subscription();

$response = $service->projects_subscriptions->create($name, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-PubsubSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Pubsub($client);

// The subscription to delete.
$subscription = '';  // TODO: Update placeholder value.
// ex: 'projects/my-project/subscriptions/my-subscription'

$service->projects_subscriptions->delete($subscription);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-PubsubSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Pubsub($client);

// The name of the subscription to get.
$subscription = '';  // TODO: Update placeholder value.
// ex: 'projects/my-project/subscriptions/my-subscription'

$response = $service->projects_subscriptions->get($subscription);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-PubsubSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Pubsub($client);

// REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as
// a path. For example, a Project resource is specified as `projects/{project}`.
$resource = '';  // TODO: Update placeholder value.
// ex: 'projects/my-project/subscriptions/my-subscription'

$response = $service->projects_subscriptions->getIamPolicy($resource);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-PubsubSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Pubsub($client);

// The name of the cloud project that subscriptions belong to.
$project = '';  // TODO: Update placeholder value.
// ex: 'projects/my-project'

$optParams = [];
do {
  $response = $service->projects_subscriptions->listProjectsSubscriptions($project, $optParams);

  foreach ($response['subscriptions'] as $subscription) {
    // TODO: Change code below to process each `subscription` resource:
    echo '<pre>', var_export($subscription, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-PubsubSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Pubsub($client);

// The name of the subscription.
$subscription = '';  // TODO: Update placeholder value.
// ex: 'projects/my-project/subscriptions/my-subscription'

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Pubsub_ModifyAckDeadlineRequest();

$service->projects_subscriptions->modifyAckDeadline($subscription, $requestBody);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-PubsubSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Pubsub($client);

// The name of the subscription.
$subscription = '';  // TODO: Update placeholder value.
// ex: 'projects/my-project/subscriptions/my-subscription'

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Pubsub_ModifyPushConfigRequest();

$service->projects_subscriptions->modifyPushConfig($subscription, $requestBody);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-PubsubSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Pubsub($client);

// The subscription from which messages should be pulled.
$subscription = '';  // TODO: Update placeholder value.
// ex: 'projects/my-project/subscriptions/my-subscription'

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Pubsub_PullRequest();

$response = $service->projects_subscriptions->pull($subscription, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-PubsubSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Pubsub($client);

// REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as
// a path. For example, a Project resource is specified as `projects/{project}`.
$resource = '';  // TODO: Update placeholder value.
// ex: 'projects/my-project/subscriptions/my-subscription'

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Pubsub_SetIamPolicyRequest();

$response = $service->projects_subscriptions->setIamPolicy($resource, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-PubsubSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Pubsub($client);

// REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
// specified as a path. For example, a Project resource is specified as `projects/{project}`.
$resource = '';  // TODO: Update placeholder value.
// ex: 'projects/my-project/subscriptions/my-subscription'

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Pubsub_TestIamPermissionsRequest();

$response = $service->projects_subscriptions->testIamPermissions($resource, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-PubsubSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Pubsub($client);

// The name of the topic. It must have the format `"projects/{project}/topics/{topic}"`. `{topic}`
// must start with a letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
// underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be
// between 3 and 255 characters in length, and it must not start with `"goog"`.
$name = '';  // TODO: Update placeholder value.
// ex: 'projects/my-project/topics/my-topic'

// TODO: Assign values to desired properties of `requestBody`. All existing
// properties will be replaced:
$requestBody = new Google_Service_Pubsub_Topic();

$response = $service->projects_topics->create($name, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-PubsubSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Pubsub($client);

// Name of the topic to delete.
$topic = '';  // TODO: Update placeholder value.
// ex: 'projects/my-project/topics/my-topic'

$service->projects_topics->delete($topic);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-PubsubSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Pubsub($client);

// The name of the topic to get.
$topic = '';  // TODO: Update placeholder value.
// ex: 'projects/my-project/topics/my-topic'

$response = $service->projects_topics->get($topic);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-PubsubSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Pubsub($client);

// REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as
// a path. For example, a Project resource is specified as `projects/{project}`.
$resource = '';  // TODO: Update placeholder value.
// ex: 'projects/my-project/topics/my-topic'

$response = $service->projects_topics->getIamPolicy($resource);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-PubsubSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Pubsub($client);

// The name of the cloud project that topics belong to.
$project = '';  // TODO: Update placeholder value.
// ex: 'projects/my-project'

$optParams = [];
do {
  $response = $service->projects_topics->listProjectsTopics($project, $optParams);

  foreach ($response['topics'] as $topic) {
    // TODO: Change code below to process each `topic` resource:
    echo '<pre>', var_export($topic, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-PubsubSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Pubsub($client);

// The messages in the request will be published on this topic.
$topic = '';  // TODO: Update placeholder value.
// ex: 'projects/my-project/topics/my-topic'

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Pubsub_PublishRequest();

$response = $service->projects_topics->publish($topic, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-PubsubSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Pubsub($client);

// REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as
// a path. For example, a Project resource is specified as `projects/{project}`.
$resource = '';  // TODO: Update placeholder value.
// ex: 'projects/my-project/topics/my-topic'

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Pubsub_SetIamPolicyRequest();

$response = $service->projects_topics->setIamPolicy($resource, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-PubsubSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Pubsub($client);

// The name of the topic that subscriptions are attached to.
$topic = '';  // TODO: Update placeholder value.
// ex: 'projects/my-project/topics/my-topic'

$optParams = [];
do {
  $response = $service->projects_topics_subscriptions->listProjectsTopicsSubscriptions($topic, $optParams);

  foreach ($response['subscriptions'] as $item) {
    // TODO: Change code below to process each `item` resource:
    echo '<pre>', var_export($item, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Pub/Sub API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/pubsub
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-PubsubSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Pubsub($client);

// REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
// specified as a path. For example, a Project resource is specified as `projects/{project}`.
$resource = '';  // TODO: Update placeholder value.
// ex: 'projects/my-project/topics/my-topic'

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Pubsub_TestIamPermissionsRequest();

$response = $service->projects_topics->testIamPermissions($resource, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
