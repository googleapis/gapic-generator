
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var bigquery = google.bigquery('v2');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `delete` method:

    // Project ID of the dataset being deleted
    projectId: '{MY-PROJECT-ID}',

    // Dataset ID of dataset being deleted
    datasetId: '{MY-DATASET-ID}',


    auth: authClient
  };

  bigquery.datasets.delete(request, function(err) {
    if (err) {
      console.log(err);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var bigquery = google.bigquery('v2');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // Project ID of the requested dataset
    projectId: '{MY-PROJECT-ID}',

    // Dataset ID of the requested dataset
    datasetId: '{MY-DATASET-ID}',


    auth: authClient
  };

  bigquery.datasets.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var bigquery = google.bigquery('v2');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholder below to desired parameter value for the `insert` method:

    // Project ID of the new dataset
    projectId: '{MY-PROJECT-ID}',


    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  };

  bigquery.datasets.insert(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var bigquery = google.bigquery('v2');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholder below to desired parameter value for the `list` method:

    // Project ID of the datasets to be listed
    projectId: '{MY-PROJECT-ID}',


    auth: authClient
  };

  var handlePage = function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var datasetsPage = response['datasets'];
    if (!datasetsPage) {
      return;
    }
    for (var i = 0; i < datasetsPage.length; i++) {
      // TODO: Change code below to process each resource in `datasetsPage`:
      console.log(JSON.stringify(datasetsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      bigquery.datasets.list(request, handlePage);
    }
  };

  bigquery.datasets.list(request, handlePage);
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var bigquery = google.bigquery('v2');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `patch` method:

    // Project ID of the dataset being updated
    projectId: '{MY-PROJECT-ID}',

    // Dataset ID of the dataset being updated
    datasetId: '{MY-DATASET-ID}',


    resource: {
      // TODO: Add desired properties of the request body to be changed.
    },

    auth: authClient
  };

  bigquery.datasets.patch(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var bigquery = google.bigquery('v2');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `update` method:

    // Project ID of the dataset being updated
    projectId: '{MY-PROJECT-ID}',

    // Dataset ID of the dataset being updated
    datasetId: '{MY-DATASET-ID}',


    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  };

  bigquery.datasets.update(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var bigquery = google.bigquery('v2');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `cancel` method:

    // [Required] Project ID of the job to cancel
    projectId: '{MY-PROJECT-ID}',

    // [Required] Job ID of the job to cancel
    jobId: '{MY-JOB-ID}',


    auth: authClient
  };

  bigquery.jobs.cancel(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var bigquery = google.bigquery('v2');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // [Required] Project ID of the requested job
    projectId: '{MY-PROJECT-ID}',

    // [Required] Job ID of the requested job
    jobId: '{MY-JOB-ID}',


    auth: authClient
  };

  bigquery.jobs.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var bigquery = google.bigquery('v2');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `getQueryResults` method:

    // [Required] Project ID of the query job
    projectId: '{MY-PROJECT-ID}',

    // [Required] Job ID of the query job
    jobId: '{MY-JOB-ID}',


    auth: authClient
  };

  bigquery.jobs.getQueryResults(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var bigquery = google.bigquery('v2');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholder below to desired parameter value for the `insert` method:

    // Project ID of the project that will be billed for the job
    projectId: '{MY-PROJECT-ID}',


    resource: {
      // TODO: Add desired properties of the request body.
    },


    // TODO: Add desired media content for upload. For more information, see:
    // https://github.com/google/google-api-nodejs-client#media-uploads


    auth: authClient
  };

  bigquery.jobs.insert(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var bigquery = google.bigquery('v2');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholder below to desired parameter value for the `list` method:

    // Project ID of the jobs to list
    projectId: '{MY-PROJECT-ID}',


    auth: authClient
  };

  var handlePage = function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var jobsPage = response['jobs'];
    if (!jobsPage) {
      return;
    }
    for (var i = 0; i < jobsPage.length; i++) {
      // TODO: Change code below to process each resource in `jobsPage`:
      console.log(JSON.stringify(jobsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      bigquery.jobs.list(request, handlePage);
    }
  };

  bigquery.jobs.list(request, handlePage);
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var bigquery = google.bigquery('v2');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholder below to desired parameter value for the `query` method:

    // Project ID of the project billed for the query
    projectId: '{MY-PROJECT-ID}',


    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  };

  bigquery.jobs.query(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var bigquery = google.bigquery('v2');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    auth: authClient
  };

  var handlePage = function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var projectsPage = response['projects'];
    if (!projectsPage) {
      return;
    }
    for (var i = 0; i < projectsPage.length; i++) {
      // TODO: Change code below to process each resource in `projectsPage`:
      console.log(JSON.stringify(projectsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      bigquery.projects.list(request, handlePage);
    }
  };

  bigquery.projects.list(request, handlePage);
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var bigquery = google.bigquery('v2');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `insertAll` method:

    // Project ID of the destination table.
    projectId: '{MY-PROJECT-ID}',

    // Dataset ID of the destination table.
    datasetId: '{MY-DATASET-ID}',

    // Table ID of the destination table.
    tableId: '{MY-TABLE-ID}',


    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  };

  bigquery.tabledata.insertAll(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var bigquery = google.bigquery('v2');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // Project ID of the table to read
    projectId: '{MY-PROJECT-ID}',

    // Dataset ID of the table to read
    datasetId: '{MY-DATASET-ID}',

    // Table ID of the table to read
    tableId: '{MY-TABLE-ID}',


    auth: authClient
  };

  bigquery.tabledata.list(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var bigquery = google.bigquery('v2');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `delete` method:

    // Project ID of the table to delete
    projectId: '{MY-PROJECT-ID}',

    // Dataset ID of the table to delete
    datasetId: '{MY-DATASET-ID}',

    // Table ID of the table to delete
    tableId: '{MY-TABLE-ID}',


    auth: authClient
  };

  bigquery.tables.delete(request, function(err) {
    if (err) {
      console.log(err);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var bigquery = google.bigquery('v2');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // Project ID of the requested table
    projectId: '{MY-PROJECT-ID}',

    // Dataset ID of the requested table
    datasetId: '{MY-DATASET-ID}',

    // Table ID of the requested table
    tableId: '{MY-TABLE-ID}',


    auth: authClient
  };

  bigquery.tables.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var bigquery = google.bigquery('v2');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `insert` method:

    // Project ID of the new table
    projectId: '{MY-PROJECT-ID}',

    // Dataset ID of the new table
    datasetId: '{MY-DATASET-ID}',


    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  };

  bigquery.tables.insert(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var bigquery = google.bigquery('v2');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // Project ID of the tables to list
    projectId: '{MY-PROJECT-ID}',

    // Dataset ID of the tables to list
    datasetId: '{MY-DATASET-ID}',


    auth: authClient
  };

  var handlePage = function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var tablesPage = response['tables'];
    if (!tablesPage) {
      return;
    }
    for (var i = 0; i < tablesPage.length; i++) {
      // TODO: Change code below to process each resource in `tablesPage`:
      console.log(JSON.stringify(tablesPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      bigquery.tables.list(request, handlePage);
    }
  };

  bigquery.tables.list(request, handlePage);
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var bigquery = google.bigquery('v2');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `patch` method:

    // Project ID of the table to update
    projectId: '{MY-PROJECT-ID}',

    // Dataset ID of the table to update
    datasetId: '{MY-DATASET-ID}',

    // Table ID of the table to update
    tableId: '{MY-TABLE-ID}',


    resource: {
      // TODO: Add desired properties of the request body to be changed.
    },

    auth: authClient
  };

  bigquery.tables.patch(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var bigquery = google.bigquery('v2');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `update` method:

    // Project ID of the table to update
    projectId: '{MY-PROJECT-ID}',

    // Dataset ID of the table to update
    datasetId: '{MY-DATASET-ID}',

    // Table ID of the table to update
    tableId: '{MY-TABLE-ID}',


    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  };

  bigquery.tables.update(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
