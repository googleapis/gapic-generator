
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-DnsSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Dns($client);

// Identifies the project addressed by this request.
$project = 'my-project';  // TODO: Update placeholder value.

// Identifies the managed zone addressed by this request. Can be the managed zone name or id.
$managedZone = 'my-managed-zone';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Dns_Change();

$response = $service->changes->create($project, $managedZone, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-DnsSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Dns($client);

// Identifies the project addressed by this request.
$project = 'my-project';  // TODO: Update placeholder value.

// Identifies the managed zone addressed by this request. Can be the managed zone name or id.
$managedZone = 'my-managed-zone';  // TODO: Update placeholder value.

// The identifier of the requested change, from a previous ResourceRecordSetsChangeResponse.
$changeId = 'my-change-id';  // TODO: Update placeholder value.

$response = $service->changes->get($project, $managedZone, $changeId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-DnsSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Dns($client);

// Identifies the project addressed by this request.
$project = 'my-project';  // TODO: Update placeholder value.

// Identifies the managed zone addressed by this request. Can be the managed zone name or id.
$managedZone = 'my-managed-zone';  // TODO: Update placeholder value.

$optParams = [];

do {
  $response = $service->changes->listChanges($project, $managedZone, $optParams);

  foreach ($response['changes'] as $change) {
    // TODO: Change code below to process each `change` resource:
    echo '<pre>', var_export($change, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-DnsSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Dns($client);

// Identifies the project addressed by this request.
$project = 'my-project';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Dns_ManagedZone();

$response = $service->managedZones->create($project, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-DnsSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Dns($client);

// Identifies the project addressed by this request.
$project = 'my-project';  // TODO: Update placeholder value.

// Identifies the managed zone addressed by this request. Can be the managed zone name or id.
$managedZone = 'my-managed-zone';  // TODO: Update placeholder value.

$service->managedZones->delete($project, $managedZone);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-DnsSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Dns($client);

// Identifies the project addressed by this request.
$project = 'my-project';  // TODO: Update placeholder value.

// Identifies the managed zone addressed by this request. Can be the managed zone name or id.
$managedZone = 'my-managed-zone';  // TODO: Update placeholder value.

$response = $service->managedZones->get($project, $managedZone);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-DnsSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Dns($client);

// Identifies the project addressed by this request.
$project = 'my-project';  // TODO: Update placeholder value.

$optParams = [];

do {
  $response = $service->managedZones->listManagedZones($project, $optParams);

  foreach ($response['managedZones'] as $managedZone) {
    // TODO: Change code below to process each `managedZone` resource:
    echo '<pre>', var_export($managedZone, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-DnsSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Dns($client);

// Identifies the project addressed by this request.
$project = 'my-project';  // TODO: Update placeholder value.

$response = $service->projects->get($project);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud DNS API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dns
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-DnsSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Dns($client);

// Identifies the project addressed by this request.
$project = 'my-project';  // TODO: Update placeholder value.

// Identifies the managed zone addressed by this request. Can be the managed zone name or id.
$managedZone = 'my-managed-zone';  // TODO: Update placeholder value.

$optParams = [];

do {
  $response = $service->resourceRecordSets->listResourceRecordSets($project, $managedZone, $optParams);

  foreach ($response['rrsets'] as $resourceRecordSet) {
    // TODO: Change code below to process each `resourceRecordSet` resource:
    echo '<pre>', var_export($resourceRecordSet, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
