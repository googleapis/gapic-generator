
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Dataproc API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataproc
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Dataproc($client);


// TODO: Change placeholders below to desired parameter values for the `create` method:

// [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
$projectId = '{MY-PROJECT-ID}';

// [Required] The Cloud Dataproc region in which to handle the request.
$region = '{MY-REGION}';


$requestBody = new Google_Service_Dataproc_Cluster($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->projects_regions_clusters->create($projectId, $region, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Dataproc API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataproc
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Dataproc($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
$projectId = '{MY-PROJECT-ID}';

// [Required] The Cloud Dataproc region in which to handle the request.
$region = '{MY-REGION}';

// [Required] The cluster name.
$clusterName = '{MY-CLUSTER-NAME}';


$response = $service->projects_regions_clusters->delete($projectId, $region, $clusterName);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Dataproc API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataproc
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Dataproc($client);


// TODO: Change placeholders below to desired parameter values for the `diagnose` method:

// [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
$projectId = '{MY-PROJECT-ID}';

// [Required] The Cloud Dataproc region in which to handle the request.
$region = '{MY-REGION}';

// [Required] The cluster name.
$clusterName = '{MY-CLUSTER-NAME}';


$requestBody = new Google_Service_Dataproc_DiagnoseClusterRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->projects_regions_clusters->diagnose($projectId, $region, $clusterName, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Dataproc API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataproc
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Dataproc($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
$projectId = '{MY-PROJECT-ID}';

// [Required] The Cloud Dataproc region in which to handle the request.
$region = '{MY-REGION}';

// [Required] The cluster name.
$clusterName = '{MY-CLUSTER-NAME}';


$response = $service->projects_regions_clusters->get($projectId, $region, $clusterName);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Dataproc API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataproc
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Dataproc($client);


// TODO: Change placeholders below to desired parameter values for the `listProjectsRegionsClusters` method:

// [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
$projectId = '{MY-PROJECT-ID}';

// [Required] The Cloud Dataproc region in which to handle the request.
$region = '{MY-REGION}';


$optParams = array();
do {
  $response = $service->projects_regions_clusters->listProjectsRegionsClusters($projectId, $region, $optParams);

  foreach ($response['clusters'] as $cluster) {
    // TODO: Change code below to process each `cluster` resource:
    echo '<pre>', var_export($cluster, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Dataproc API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataproc
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Dataproc($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// [Required] The ID of the Google Cloud Platform project the cluster belongs to.
$projectId = '{MY-PROJECT-ID}';

// [Required] The Cloud Dataproc region in which to handle the request.
$region = '{MY-REGION}';

// [Required] The cluster name.
$clusterName = '{MY-CLUSTER-NAME}';


$requestBody = new Google_Service_Dataproc_Cluster($client);
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->projects_regions_clusters->patch($projectId, $region, $clusterName, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Dataproc API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataproc
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Dataproc($client);


// TODO: Change placeholders below to desired parameter values for the `cancel` method:

// [Required] The ID of the Google Cloud Platform project that the job belongs to.
$projectId = '{MY-PROJECT-ID}';

// [Required] The Cloud Dataproc region in which to handle the request.
$region = '{MY-REGION}';

// [Required] The job ID.
$jobId = '{MY-JOB-ID}';


$requestBody = new Google_Service_Dataproc_CancelJobRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->projects_regions_jobs->cancel($projectId, $region, $jobId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Dataproc API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataproc
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Dataproc($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// [Required] The ID of the Google Cloud Platform project that the job belongs to.
$projectId = '{MY-PROJECT-ID}';

// [Required] The Cloud Dataproc region in which to handle the request.
$region = '{MY-REGION}';

// [Required] The job ID.
$jobId = '{MY-JOB-ID}';


$service->projects_regions_jobs->delete($projectId, $region, $jobId);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Dataproc API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataproc
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Dataproc($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// [Required] The ID of the Google Cloud Platform project that the job belongs to.
$projectId = '{MY-PROJECT-ID}';

// [Required] The Cloud Dataproc region in which to handle the request.
$region = '{MY-REGION}';

// [Required] The job ID.
$jobId = '{MY-JOB-ID}';


$response = $service->projects_regions_jobs->get($projectId, $region, $jobId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Dataproc API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataproc
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Dataproc($client);


// TODO: Change placeholders below to desired parameter values for the `listProjectsRegionsJobs` method:

// [Required] The ID of the Google Cloud Platform project that the job belongs to.
$projectId = '{MY-PROJECT-ID}';

// [Required] The Cloud Dataproc region in which to handle the request.
$region = '{MY-REGION}';


$optParams = array();
do {
  $response = $service->projects_regions_jobs->listProjectsRegionsJobs($projectId, $region, $optParams);

  foreach ($response['jobs'] as $job) {
    // TODO: Change code below to process each `job` resource:
    echo '<pre>', var_export($job, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Dataproc API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataproc
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Dataproc($client);


// TODO: Change placeholders below to desired parameter values for the `submit` method:

// [Required] The ID of the Google Cloud Platform project that the job belongs to.
$projectId = '{MY-PROJECT-ID}';

// [Required] The Cloud Dataproc region in which to handle the request.
$region = '{MY-REGION}';


$requestBody = new Google_Service_Dataproc_SubmitJobRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->projects_regions_jobs->submit($projectId, $region, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Dataproc API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataproc
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Dataproc($client);


// TODO: Change placeholder below to desired parameter value for the `cancel` method:

// The name of the operation resource to be cancelled.
$name = 'projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}';


$service->projects_regions_operations->cancel($name);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Dataproc API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataproc
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Dataproc($client);


// TODO: Change placeholder below to desired parameter value for the `delete` method:

// The name of the operation resource to be deleted.
$name = 'projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}';


$service->projects_regions_operations->delete($name);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Dataproc API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataproc
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Dataproc($client);


// TODO: Change placeholder below to desired parameter value for the `get` method:

// The name of the operation resource.
$name = 'projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}';


$response = $service->projects_regions_operations->get($name);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Dataproc API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/dataproc
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Dataproc($client);


// TODO: Change placeholder below to desired parameter value for the `listProjectsRegionsOperations` method:

// The name of the operation collection.
$name = '{MY-NAME}';


$optParams = array();
do {
  $response = $service->projects_regions_operations->listProjectsRegionsOperations($name, $optParams);

  foreach ($response['operations'] as $operation) {
    // TODO: Change code below to process each `operation` resource:
    echo '<pre>', var_export($operation, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
