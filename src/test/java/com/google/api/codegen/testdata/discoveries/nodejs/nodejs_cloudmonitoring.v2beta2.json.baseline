
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var cloudmonitoring = google.cloudmonitoring('v2beta2');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // The project id. The value can be the numeric project ID or string-based project name.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties.
    },

    auth: authClient
  };

  cloudmonitoring.metricDescriptors.create(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var cloudmonitoring = google.cloudmonitoring('v2beta2');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // The project ID to which the metric belongs.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Name of the metric.
    metric: "{MY-METRIC}", // TODO: Update placeholder value(s).

    auth: authClient
  };

  cloudmonitoring.metricDescriptors.delete(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var cloudmonitoring = google.cloudmonitoring('v2beta2');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // The project id. The value can be the numeric project ID or string-based project name.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties.
    },

    auth: authClient
  };

  cloudmonitoring.metricDescriptors.list(request, function handlePage(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var metricsPage = response['metrics'];
    if (!metricsPage) {
      console.log('{}');
      return;
    }
    for (var i = 0; i < metricsPage.length; i++) {
      // TODO: Use metricsPage
      console.log(JSON.stringify(metricsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      cloudmonitoring.metricDescriptors.list(request, handlePage);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var cloudmonitoring = google.cloudmonitoring('v2beta2');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // The project ID to which this time series belongs. The value can be the numeric project ID or
    // string-based project name.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
    // compute.googleapis.com/instance/disk/read_ops_count.
    metric: "{MY-METRIC}", // TODO: Update placeholder value(s).

    // End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
    youngest: "{MY-YOUNGEST}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties.
    },

    auth: authClient
  };

  cloudmonitoring.timeseries.list(request, function handlePage(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var timeseriesPage = response['timeseries'];
    if (!timeseriesPage) {
      console.log('{}');
      return;
    }
    for (var i = 0; i < timeseriesPage.length; i++) {
      // TODO: Use timeseriesPage
      console.log(JSON.stringify(timeseriesPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      cloudmonitoring.timeseries.list(request, handlePage);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var cloudmonitoring = google.cloudmonitoring('v2beta2');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // The project ID. The value can be the numeric project ID or string-based project name.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties.
    },

    auth: authClient
  };

  cloudmonitoring.timeseries.write(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Use response
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

var cloudmonitoring = google.cloudmonitoring('v2beta2');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // The project ID to which this time series belongs. The value can be the numeric project ID or
    // string-based project name.
    project: "{MY-PROJECT}", // TODO: Update placeholder value(s).

    // Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
    // compute.googleapis.com/instance/disk/read_ops_count.
    metric: "{MY-METRIC}", // TODO: Update placeholder value(s).

    // End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
    youngest: "{MY-YOUNGEST}", // TODO: Update placeholder value(s).

    resource: {
      // TODO: Add the desired properties.
    },

    auth: authClient
  };

  cloudmonitoring.timeseriesDescriptors.list(request, function handlePage(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var timeseriesPage = response['timeseries'];
    if (!timeseriesPage) {
      console.log('{}');
      return;
    }
    for (var i = 0; i < timeseriesPage.length; i++) {
      // TODO: Use timeseriesPage
      console.log(JSON.stringify(timeseriesPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      cloudmonitoring.timeseriesDescriptors.list(request, handlePage);
    }
  });
});
