============== file: src/test/java/com/google/gcloud/pubsub/v1/MockLabelerImpl.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.gcloud.pubsub.v1;

import com.google.common.collect.Lists;
import com.google.protobuf.GeneratedMessageV3;
import com.google.tagger.v1.AddLabelRequest;
import com.google.tagger.v1.AddLabelResponse;
import com.google.tagger.v1.LabelerGrpc.LabelerImplBase;
import io.grpc.stub.StreamObserver;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

@javax.annotation.Generated("by GAPIC")
public class MockLabelerImpl extends LabelerImplBase {
  private ArrayList<GeneratedMessageV3> requests;
  private Queue<Object> responses;

  public MockLabelerImpl() {
    requests = new ArrayList<>();
    responses = new LinkedList<>();
  }

  public List<GeneratedMessageV3> getRequests() {
    return requests;
  }

  public void addResponse(GeneratedMessageV3 response) {
    responses.add(response);
  }

  public void setResponses(List<GeneratedMessageV3> responses) {
    this.responses = new LinkedList<Object>(responses);
  }

  public void addException(Exception exception) {
    responses.add(exception);
  }

  public void reset() {
    requests = new ArrayList<>();
    responses = new LinkedList<>();
  }

  @Override
  public void addLabel(AddLabelRequest request,
    StreamObserver<AddLabelResponse> responseObserver) {
    Object response = responses.remove();
    if (response instanceof AddLabelResponse) {
      requests.add(request);
      responseObserver.onNext((AddLabelResponse) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

}
============== file: src/test/java/com/google/gcloud/pubsub/v1/MockLibraryServiceImpl.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.gcloud.pubsub.v1;

import com.google.common.collect.Lists;
import com.google.example.library.v1.AddCommentsRequest;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookFromAnywhere;
import com.google.example.library.v1.BookFromArchive;
import com.google.example.library.v1.Comment;
import com.google.example.library.v1.CreateBookRequest;
import com.google.example.library.v1.CreateShelfRequest;
import com.google.example.library.v1.DeleteBookRequest;
import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.DiscussBookRequest;
import com.google.example.library.v1.FindRelatedBooksRequest;
import com.google.example.library.v1.FindRelatedBooksResponse;
import com.google.example.library.v1.GetBookFromAnywhereRequest;
import com.google.example.library.v1.GetBookFromArchiveRequest;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.GetShelfRequest;
import com.google.example.library.v1.LibraryServiceGrpc.LibraryServiceImplBase;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.ListStringsRequest;
import com.google.example.library.v1.ListStringsResponse;
import com.google.example.library.v1.MergeShelvesRequest;
import com.google.example.library.v1.MoveBookRequest;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.Shelf;
import com.google.example.library.v1.StreamBooksRequest;
import com.google.example.library.v1.StreamShelvesRequest;
import com.google.example.library.v1.StreamShelvesResponse;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsResponse;
import com.google.example.library.v1.UpdateBookIndexRequest;
import com.google.example.library.v1.UpdateBookRequest;
import com.google.longrunning.Operation;
import com.google.protobuf.Empty;
import com.google.protobuf.GeneratedMessageV3;
import com.google.tagger.v1.AddTagRequest;
import com.google.tagger.v1.AddTagResponse;
import io.grpc.stub.StreamObserver;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

@javax.annotation.Generated("by GAPIC")
public class MockLibraryServiceImpl extends LibraryServiceImplBase {
  private ArrayList<GeneratedMessageV3> requests;
  private Queue<Object> responses;

  public MockLibraryServiceImpl() {
    requests = new ArrayList<>();
    responses = new LinkedList<>();
  }

  public List<GeneratedMessageV3> getRequests() {
    return requests;
  }

  public void addResponse(GeneratedMessageV3 response) {
    responses.add(response);
  }

  public void setResponses(List<GeneratedMessageV3> responses) {
    this.responses = new LinkedList<Object>(responses);
  }

  public void addException(Exception exception) {
    responses.add(exception);
  }

  public void reset() {
    requests = new ArrayList<>();
    responses = new LinkedList<>();
  }

  @Override
  public void createShelf(CreateShelfRequest request,
    StreamObserver<Shelf> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Shelf) {
      requests.add(request);
      responseObserver.onNext((Shelf) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void getShelf(GetShelfRequest request,
    StreamObserver<Shelf> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Shelf) {
      requests.add(request);
      responseObserver.onNext((Shelf) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void listShelves(ListShelvesRequest request,
    StreamObserver<ListShelvesResponse> responseObserver) {
    Object response = responses.remove();
    if (response instanceof ListShelvesResponse) {
      requests.add(request);
      responseObserver.onNext((ListShelvesResponse) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void deleteShelf(DeleteShelfRequest request,
    StreamObserver<Empty> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Empty) {
      requests.add(request);
      responseObserver.onNext((Empty) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void mergeShelves(MergeShelvesRequest request,
    StreamObserver<Shelf> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Shelf) {
      requests.add(request);
      responseObserver.onNext((Shelf) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void createBook(CreateBookRequest request,
    StreamObserver<Book> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Book) {
      requests.add(request);
      responseObserver.onNext((Book) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void publishSeries(PublishSeriesRequest request,
    StreamObserver<PublishSeriesResponse> responseObserver) {
    Object response = responses.remove();
    if (response instanceof PublishSeriesResponse) {
      requests.add(request);
      responseObserver.onNext((PublishSeriesResponse) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void getBook(GetBookRequest request,
    StreamObserver<Book> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Book) {
      requests.add(request);
      responseObserver.onNext((Book) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void listBooks(ListBooksRequest request,
    StreamObserver<ListBooksResponse> responseObserver) {
    Object response = responses.remove();
    if (response instanceof ListBooksResponse) {
      requests.add(request);
      responseObserver.onNext((ListBooksResponse) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void deleteBook(DeleteBookRequest request,
    StreamObserver<Empty> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Empty) {
      requests.add(request);
      responseObserver.onNext((Empty) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void updateBook(UpdateBookRequest request,
    StreamObserver<Book> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Book) {
      requests.add(request);
      responseObserver.onNext((Book) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void moveBook(MoveBookRequest request,
    StreamObserver<Book> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Book) {
      requests.add(request);
      responseObserver.onNext((Book) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void listStrings(ListStringsRequest request,
    StreamObserver<ListStringsResponse> responseObserver) {
    Object response = responses.remove();
    if (response instanceof ListStringsResponse) {
      requests.add(request);
      responseObserver.onNext((ListStringsResponse) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void addComments(AddCommentsRequest request,
    StreamObserver<Empty> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Empty) {
      requests.add(request);
      responseObserver.onNext((Empty) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void getBookFromArchive(GetBookFromArchiveRequest request,
    StreamObserver<BookFromArchive> responseObserver) {
    Object response = responses.remove();
    if (response instanceof BookFromArchive) {
      requests.add(request);
      responseObserver.onNext((BookFromArchive) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void getBookFromAnywhere(GetBookFromAnywhereRequest request,
    StreamObserver<BookFromAnywhere> responseObserver) {
    Object response = responses.remove();
    if (response instanceof BookFromAnywhere) {
      requests.add(request);
      responseObserver.onNext((BookFromAnywhere) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void updateBookIndex(UpdateBookIndexRequest request,
    StreamObserver<Empty> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Empty) {
      requests.add(request);
      responseObserver.onNext((Empty) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void streamShelves(StreamShelvesRequest request,
    StreamObserver<StreamShelvesResponse> responseObserver) {
    Object response = responses.remove();
    if (response instanceof StreamShelvesResponse) {
      requests.add(request);
      responseObserver.onNext((StreamShelvesResponse) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void streamBooks(StreamBooksRequest request,
    StreamObserver<Book> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Book) {
      requests.add(request);
      responseObserver.onNext((Book) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public StreamObserver<DiscussBookRequest> discussBook(
      final StreamObserver<Comment> responseObserver) {
    final Object response = responses.remove();
    StreamObserver<DiscussBookRequest> requestObserver =
        new StreamObserver<DiscussBookRequest>() {
      @Override
      public void onNext(DiscussBookRequest value) {
        if (response instanceof Comment) {
          responseObserver.onNext((Comment) response);
        } else if (response instanceof Exception) {
          responseObserver.onError((Exception) response);
        } else {
          responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
        }
      }

      @Override
      public void onError(Throwable t) {
        responseObserver.onError(t);
      }

      @Override
      public void onCompleted() {
        responseObserver.onCompleted();
      }
    };
    return requestObserver;
  }

  @Override
  public StreamObserver<DiscussBookRequest> monologAboutBook(
      final StreamObserver<Comment> responseObserver) {
    final Object response = responses.remove();
    StreamObserver<DiscussBookRequest> requestObserver =
        new StreamObserver<DiscussBookRequest>() {
      @Override
      public void onNext(DiscussBookRequest value) {
        if (response instanceof Comment) {
          responseObserver.onNext((Comment) response);
        } else if (response instanceof Exception) {
          responseObserver.onError((Exception) response);
        } else {
          responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
        }
      }

      @Override
      public void onError(Throwable t) {
        responseObserver.onError(t);
      }

      @Override
      public void onCompleted() {
        responseObserver.onCompleted();
      }
    };
    return requestObserver;
  }

  @Override
  public void findRelatedBooks(FindRelatedBooksRequest request,
    StreamObserver<FindRelatedBooksResponse> responseObserver) {
    Object response = responses.remove();
    if (response instanceof FindRelatedBooksResponse) {
      requests.add(request);
      responseObserver.onNext((FindRelatedBooksResponse) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void addTag(AddTagRequest request,
    StreamObserver<AddTagResponse> responseObserver) {
    Object response = responses.remove();
    if (response instanceof AddTagResponse) {
      requests.add(request);
      responseObserver.onNext((AddTagResponse) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void getBigBook(GetBookRequest request,
    StreamObserver<Operation> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Operation) {
      requests.add(request);
      responseObserver.onNext((Operation) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void getBigNothing(GetBookRequest request,
    StreamObserver<Operation> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Operation) {
      requests.add(request);
      responseObserver.onNext((Operation) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

  @Override
  public void testOptionalRequiredFlatteningParams(TestOptionalRequiredFlatteningParamsRequest request,
    StreamObserver<TestOptionalRequiredFlatteningParamsResponse> responseObserver) {
    Object response = responses.remove();
    if (response instanceof TestOptionalRequiredFlatteningParamsResponse) {
      requests.add(request);
      responseObserver.onNext((TestOptionalRequiredFlatteningParamsResponse) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

}
