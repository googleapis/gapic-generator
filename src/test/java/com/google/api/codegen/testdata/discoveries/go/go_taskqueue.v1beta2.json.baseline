
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the TaskQueue API and check the quota for your project at
//    https://console.developers.google.com/apis/api/taskqueue_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/taskqueue/v1beta2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/taskqueue/v1beta2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, taskqueue.TaskqueueScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := taskqueue.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // The project under which the queue lies.
    project = ""

    // The id of the taskqueue to get the properties of.
    taskqueue_ = ""
  )

  response, err := client.Taskqueues.Get(project, taskqueue_).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the TaskQueue API and check the quota for your project at
//    https://console.developers.google.com/apis/api/taskqueue_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/taskqueue/v1beta2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/taskqueue/v1beta2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, taskqueue.TaskqueueScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := taskqueue.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // The project under which the queue lies.
    project = ""

    // The taskqueue to delete a task from.
    taskqueue_ = ""

    // The id of the task to delete.
    task = ""
  )

  if err = client.Tasks.Delete(project, taskqueue_, task).Context(ctx).Do(); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the TaskQueue API and check the quota for your project at
//    https://console.developers.google.com/apis/api/taskqueue_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/taskqueue/v1beta2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/taskqueue/v1beta2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, taskqueue.TaskqueueScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := taskqueue.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // The project under which the queue lies.
    project = ""

    // The taskqueue in which the task belongs.
    taskqueue_ = ""

    // The task to get properties of.
    task = ""
  )

  response, err := client.Tasks.Get(project, taskqueue_, task).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the TaskQueue API and check the quota for your project at
//    https://console.developers.google.com/apis/api/taskqueue_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/taskqueue/v1beta2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/taskqueue/v1beta2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, taskqueue.TaskqueueScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := taskqueue.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // The project under which the queue lies
    project = ""

    // The taskqueue to insert the task into
    taskqueue_ = ""

    requestBody = &taskqueue.Task{}
  )

  response, err := client.Tasks.Insert(project, taskqueue_, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the TaskQueue API and check the quota for your project at
//    https://console.developers.google.com/apis/api/taskqueue_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/taskqueue/v1beta2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/taskqueue/v1beta2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, taskqueue.TaskqueueScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := taskqueue.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'lease' method:
  var (
    // The project under which the queue lies.
    project = ""

    // The taskqueue to lease a task from.
    taskqueue_ = ""

    // The number of tasks to lease.
    numTasks = int64(0)

    // The lease in seconds.
    leaseSecs = int64(0)
  )

  response, err := client.Tasks.Lease(project, taskqueue_, numTasks, leaseSecs).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the TaskQueue API and check the quota for your project at
//    https://console.developers.google.com/apis/api/taskqueue_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/taskqueue/v1beta2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/taskqueue/v1beta2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, taskqueue.TaskqueueScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := taskqueue.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // The project under which the queue lies.
    project = ""

    // The id of the taskqueue to list tasks from.
    taskqueue_ = ""
  )

  response, err := client.Tasks.List(project, taskqueue_).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the TaskQueue API and check the quota for your project at
//    https://console.developers.google.com/apis/api/taskqueue_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/taskqueue/v1beta2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/taskqueue/v1beta2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, taskqueue.TaskqueueScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := taskqueue.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
  var (
    // The project under which the queue lies.
    project = ""


    taskqueue_ = ""


    task = ""

    // The new lease in seconds.
    newLeaseSeconds = int64(0)

    requestBody = &taskqueue.Task{}
  )

  response, err := client.Tasks.Patch(project, taskqueue_, task, newLeaseSeconds, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the TaskQueue API and check the quota for your project at
//    https://console.developers.google.com/apis/api/taskqueue_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/taskqueue/v1beta2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/taskqueue/v1beta2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, taskqueue.TaskqueueScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := taskqueue.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'update' method:
  var (
    // The project under which the queue lies.
    project = ""


    taskqueue_ = ""


    task = ""

    // The new lease in seconds.
    newLeaseSeconds = int64(0)

    requestBody = &taskqueue.Task{}
  )

  response, err := client.Tasks.Update(project, taskqueue_, task, newLeaseSeconds, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
