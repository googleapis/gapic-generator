============== file: test/test.rb ==============
# Copyright 2017, Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require "minitest/autorun"
require "minitest/spec"

require "library/v1/library_service_client"

class CustomError < StandardError; end

describe Library::V1::LibraryServiceClient do
  error = CustomError.new "Test error"

  describe 'create_shelf' do

    LibraryServiceClient = Library::V1::LibraryServiceClient
    Shelf = Google::Example::Library::V1::Shelf

    it 'invokes create_shelf without error' do
      # Create request parameters and expected request
      shelf = Shelf.new

      # Create expected grpc response
      name = "name3373707"
      theme = "theme110327241"
      internal_theme = "internalTheme792518087"
      expected_response = Shelf.new
      expected_response.name = name
      expected_response.theme = theme
      expected_response.internal_theme = internal_theme

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@create_shelf",
        proc do |request|
          assert_equal(shelf, request.shelf)
          expected_response
        end
      )

      # Call method
      response = client.create_shelf(shelf)

      # Verify the response
      assert_equal(expected_response, response)
    end

    it 'invokes create_shelf with error' do
      # Create request parameters and expected request
      shelf = Shelf.new

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@create_shelf",
        proc do |request|
          assert_equal(shelf, request.shelf)
          raise error
        end
      )

      # Call method
      assert_raises CustomError do
        client.create_shelf(shelf)
      end
    end
  end

  describe 'get_shelf' do

    LibraryServiceClient = Library::V1::LibraryServiceClient
    Shelf = Google::Example::Library::V1::Shelf

    it 'invokes get_shelf without error' do
      # Create request parameters and expected request
      formatted_name = LibraryServiceClient.shelf_path("[SHELF_ID]")
      options_ = ''

      # Create expected grpc response
      name_2 = "name2-1052831874"
      theme = "theme110327241"
      internal_theme = "internalTheme792518087"
      expected_response = Shelf.new
      expected_response.name = name_2
      expected_response.theme = theme
      expected_response.internal_theme = internal_theme

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@get_shelf",
        proc do |request|
          assert_equal(formatted_name, request.name)
          assert_equal(options_, request.options)
          expected_response
        end
      )

      # Call method
      response = client.get_shelf(formatted_name, options_)

      # Verify the response
      assert_equal(expected_response, response)
    end

    it 'invokes get_shelf with error' do
      # Create request parameters and expected request
      formatted_name = LibraryServiceClient.shelf_path("[SHELF_ID]")
      options_ = ''

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@get_shelf",
        proc do |request|
          assert_equal(formatted_name, request.name)
          assert_equal(options_, request.options)
          raise error
        end
      )

      # Call method
      assert_raises CustomError do
        client.get_shelf(formatted_name, options_)
      end
    end
  end

  describe 'delete_shelf' do

    Empty = Google::Protobuf::Empty
    LibraryServiceClient = Library::V1::LibraryServiceClient

    it 'invokes delete_shelf without error' do
      # Create request parameters and expected request
      formatted_name = LibraryServiceClient.shelf_path("[SHELF_ID]")

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@delete_shelf",
        proc do |request|
          assert_equal(formatted_name, request.name)
          nil
        end
      )

      # Call method
      response = client.delete_shelf(formatted_name)

      # Verify the response
      assert_nil(response)
    end

    it 'invokes delete_shelf with error' do
      # Create request parameters and expected request
      formatted_name = LibraryServiceClient.shelf_path("[SHELF_ID]")

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@delete_shelf",
        proc do |request|
          assert_equal(formatted_name, request.name)
          raise error
        end
      )

      # Call method
      assert_raises CustomError do
        client.delete_shelf(formatted_name)
      end
    end
  end

  describe 'merge_shelves' do

    LibraryServiceClient = Library::V1::LibraryServiceClient
    Shelf = Google::Example::Library::V1::Shelf

    it 'invokes merge_shelves without error' do
      # Create request parameters and expected request
      formatted_name = LibraryServiceClient.shelf_path("[SHELF_ID]")
      formatted_other_shelf_name = LibraryServiceClient.shelf_path("[SHELF_ID]")

      # Create expected grpc response
      name_2 = "name2-1052831874"
      theme = "theme110327241"
      internal_theme = "internalTheme792518087"
      expected_response = Shelf.new
      expected_response.name = name_2
      expected_response.theme = theme
      expected_response.internal_theme = internal_theme

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@merge_shelves",
        proc do |request|
          assert_equal(formatted_name, request.name)
          assert_equal(formatted_other_shelf_name, request.other_shelf_name)
          expected_response
        end
      )

      # Call method
      response = client.merge_shelves(formatted_name, formatted_other_shelf_name)

      # Verify the response
      assert_equal(expected_response, response)
    end

    it 'invokes merge_shelves with error' do
      # Create request parameters and expected request
      formatted_name = LibraryServiceClient.shelf_path("[SHELF_ID]")
      formatted_other_shelf_name = LibraryServiceClient.shelf_path("[SHELF_ID]")

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@merge_shelves",
        proc do |request|
          assert_equal(formatted_name, request.name)
          assert_equal(formatted_other_shelf_name, request.other_shelf_name)
          raise error
        end
      )

      # Call method
      assert_raises CustomError do
        client.merge_shelves(formatted_name, formatted_other_shelf_name)
      end
    end
  end

  describe 'create_book' do

    Book = Google::Example::Library::V1::Book
    LibraryServiceClient = Library::V1::LibraryServiceClient

    it 'invokes create_book without error' do
      # Create request parameters and expected request
      formatted_name = LibraryServiceClient.shelf_path("[SHELF_ID]")
      book = Book.new

      # Create expected grpc response
      name_2 = "name2-1052831874"
      author = "author-1406328437"
      title = "title110371416"
      read = true
      expected_response = Book.new
      expected_response.name = name_2
      expected_response.author = author
      expected_response.title = title
      expected_response.read = read

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@create_book",
        proc do |request|
          assert_equal(formatted_name, request.name)
          assert_equal(book, request.book)
          expected_response
        end
      )

      # Call method
      response = client.create_book(formatted_name, book)

      # Verify the response
      assert_equal(expected_response, response)
    end

    it 'invokes create_book with error' do
      # Create request parameters and expected request
      formatted_name = LibraryServiceClient.shelf_path("[SHELF_ID]")
      book = Book.new

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@create_book",
        proc do |request|
          assert_equal(formatted_name, request.name)
          assert_equal(book, request.book)
          raise error
        end
      )

      # Call method
      assert_raises CustomError do
        client.create_book(formatted_name, book)
      end
    end
  end

  describe 'publish_series' do

    LibraryServiceClient = Library::V1::LibraryServiceClient
    PublishSeriesResponse = Google::Example::Library::V1::PublishSeriesResponse
    SeriesUuid = Google::Example::Library::V1::SeriesUuid
    Shelf = Google::Example::Library::V1::Shelf

    it 'invokes publish_series without error' do
      # Create request parameters and expected request
      shelf = Shelf.new
      books = []
      series_string = "foobar"
      series_uuid = SeriesUuid.new
      series_uuid.series_string = series_string

      # Create expected grpc response
      book_names_element = "bookNamesElement1491670575"
      book_names = [book_names_element]
      expected_response = PublishSeriesResponse.new
      expected_response.book_names += book_names unless book_names.empty?

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@publish_series",
        proc do |request|
          assert_equal(shelf, request.shelf)
          assert_equal(books, request.books)
          assert_equal(series_uuid, request.series_uuid)
          expected_response
        end
      )

      # Call method
      response = client.publish_series(
        shelf,
        books,
        series_uuid
      )

      # Verify the response
      assert_equal(expected_response, response)
    end

    it 'invokes publish_series with error' do
      # Create request parameters and expected request
      shelf = Shelf.new
      books = []
      series_string = "foobar"
      series_uuid = SeriesUuid.new
      series_uuid.series_string = series_string

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@publish_series",
        proc do |request|
          assert_equal(shelf, request.shelf)
          assert_equal(books, request.books)
          assert_equal(series_uuid, request.series_uuid)
          raise error
        end
      )

      # Call method
      assert_raises CustomError do
        client.publish_series(
          shelf,
          books,
          series_uuid
        )
      end
    end
  end

  describe 'get_book' do

    Book = Google::Example::Library::V1::Book
    LibraryServiceClient = Library::V1::LibraryServiceClient

    it 'invokes get_book without error' do
      # Create request parameters and expected request
      formatted_name = LibraryServiceClient.book_path("[SHELF_ID]", "[BOOK_ID]")

      # Create expected grpc response
      name_2 = "name2-1052831874"
      author = "author-1406328437"
      title = "title110371416"
      read = true
      expected_response = Book.new
      expected_response.name = name_2
      expected_response.author = author
      expected_response.title = title
      expected_response.read = read

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@get_book",
        proc do |request|
          assert_equal(formatted_name, request.name)
          expected_response
        end
      )

      # Call method
      response = client.get_book(formatted_name)

      # Verify the response
      assert_equal(expected_response, response)
    end

    it 'invokes get_book with error' do
      # Create request parameters and expected request
      formatted_name = LibraryServiceClient.book_path("[SHELF_ID]", "[BOOK_ID]")

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@get_book",
        proc do |request|
          assert_equal(formatted_name, request.name)
          raise error
        end
      )

      # Call method
      assert_raises CustomError do
        client.get_book(formatted_name)
      end
    end
  end

  describe 'delete_book' do

    Empty = Google::Protobuf::Empty
    LibraryServiceClient = Library::V1::LibraryServiceClient

    it 'invokes delete_book without error' do
      # Create request parameters and expected request
      formatted_name = LibraryServiceClient.book_path("[SHELF_ID]", "[BOOK_ID]")

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@delete_book",
        proc do |request|
          assert_equal(formatted_name, request.name)
          nil
        end
      )

      # Call method
      response = client.delete_book(formatted_name)

      # Verify the response
      assert_nil(response)
    end

    it 'invokes delete_book with error' do
      # Create request parameters and expected request
      formatted_name = LibraryServiceClient.book_path("[SHELF_ID]", "[BOOK_ID]")

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@delete_book",
        proc do |request|
          assert_equal(formatted_name, request.name)
          raise error
        end
      )

      # Call method
      assert_raises CustomError do
        client.delete_book(formatted_name)
      end
    end
  end

  describe 'update_book' do

    Book = Google::Example::Library::V1::Book
    LibraryServiceClient = Library::V1::LibraryServiceClient

    it 'invokes update_book without error' do
      # Create request parameters and expected request
      formatted_name = LibraryServiceClient.book_path("[SHELF_ID]", "[BOOK_ID]")
      book = Book.new

      # Create expected grpc response
      name_2 = "name2-1052831874"
      author = "author-1406328437"
      title = "title110371416"
      read = true
      expected_response = Book.new
      expected_response.name = name_2
      expected_response.author = author
      expected_response.title = title
      expected_response.read = read

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@update_book",
        proc do |request|
          assert_equal(formatted_name, request.name)
          assert_equal(book, request.book)
          expected_response
        end
      )

      # Call method
      response = client.update_book(formatted_name, book)

      # Verify the response
      assert_equal(expected_response, response)
    end

    it 'invokes update_book with error' do
      # Create request parameters and expected request
      formatted_name = LibraryServiceClient.book_path("[SHELF_ID]", "[BOOK_ID]")
      book = Book.new

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@update_book",
        proc do |request|
          assert_equal(formatted_name, request.name)
          assert_equal(book, request.book)
          raise error
        end
      )

      # Call method
      assert_raises CustomError do
        client.update_book(formatted_name, book)
      end
    end
  end

  describe 'move_book' do

    Book = Google::Example::Library::V1::Book
    LibraryServiceClient = Library::V1::LibraryServiceClient

    it 'invokes move_book without error' do
      # Create request parameters and expected request
      formatted_name = LibraryServiceClient.book_path("[SHELF_ID]", "[BOOK_ID]")
      formatted_other_shelf_name = LibraryServiceClient.shelf_path("[SHELF_ID]")

      # Create expected grpc response
      name_2 = "name2-1052831874"
      author = "author-1406328437"
      title = "title110371416"
      read = true
      expected_response = Book.new
      expected_response.name = name_2
      expected_response.author = author
      expected_response.title = title
      expected_response.read = read

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@move_book",
        proc do |request|
          assert_equal(formatted_name, request.name)
          assert_equal(formatted_other_shelf_name, request.other_shelf_name)
          expected_response
        end
      )

      # Call method
      response = client.move_book(formatted_name, formatted_other_shelf_name)

      # Verify the response
      assert_equal(expected_response, response)
    end

    it 'invokes move_book with error' do
      # Create request parameters and expected request
      formatted_name = LibraryServiceClient.book_path("[SHELF_ID]", "[BOOK_ID]")
      formatted_other_shelf_name = LibraryServiceClient.shelf_path("[SHELF_ID]")

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@move_book",
        proc do |request|
          assert_equal(formatted_name, request.name)
          assert_equal(formatted_other_shelf_name, request.other_shelf_name)
          raise error
        end
      )

      # Call method
      assert_raises CustomError do
        client.move_book(formatted_name, formatted_other_shelf_name)
      end
    end
  end

  describe 'add_comments' do

    Alignment = Google::Example::Library::V1::SomeMessage2::SomeMessage3::Alignment
    Comment = Google::Example::Library::V1::Comment
    Empty = Google::Protobuf::Empty
    LibraryServiceClient = Library::V1::LibraryServiceClient
    Stage = Google::Example::Library::V1::Comment::Stage

    it 'invokes add_comments without error' do
      # Create request parameters and expected request
      formatted_name = LibraryServiceClient.book_path("[SHELF_ID]", "[BOOK_ID]")
      comment = ''
      stage = Stage::UNSET
      alignment = Alignment::CHAR
      comments_element = Comment.new
      comments_element.comment = comment
      comments_element.stage = stage
      comments_element.alignment = alignment
      comments = [comments_element]

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@add_comments",
        proc do |request|
          assert_equal(formatted_name, request.name)
          assert_equal(comments, request.comments)
          nil
        end
      )

      # Call method
      response = client.add_comments(formatted_name, comments)

      # Verify the response
      assert_nil(response)
    end

    it 'invokes add_comments with error' do
      # Create request parameters and expected request
      formatted_name = LibraryServiceClient.book_path("[SHELF_ID]", "[BOOK_ID]")
      comment = ''
      stage = Stage::UNSET
      alignment = Alignment::CHAR
      comments_element = Comment.new
      comments_element.comment = comment
      comments_element.stage = stage
      comments_element.alignment = alignment
      comments = [comments_element]

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@add_comments",
        proc do |request|
          assert_equal(formatted_name, request.name)
          assert_equal(comments, request.comments)
          raise error
        end
      )

      # Call method
      assert_raises CustomError do
        client.add_comments(formatted_name, comments)
      end
    end
  end

  describe 'get_book_from_archive' do

    BookFromArchive = Google::Example::Library::V1::BookFromArchive
    LibraryServiceClient = Library::V1::LibraryServiceClient

    it 'invokes get_book_from_archive without error' do
      # Create request parameters and expected request
      formatted_name = LibraryServiceClient.archived_book_path("[ARCHIVE_PATH]", "[BOOK_ID]")

      # Create expected grpc response
      name_2 = "name2-1052831874"
      author = "author-1406328437"
      title = "title110371416"
      read = true
      expected_response = BookFromArchive.new
      expected_response.name = name_2
      expected_response.author = author
      expected_response.title = title
      expected_response.read = read

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@get_book_from_archive",
        proc do |request|
          assert_equal(formatted_name, request.name)
          expected_response
        end
      )

      # Call method
      response = client.get_book_from_archive(formatted_name)

      # Verify the response
      assert_equal(expected_response, response)
    end

    it 'invokes get_book_from_archive with error' do
      # Create request parameters and expected request
      formatted_name = LibraryServiceClient.archived_book_path("[ARCHIVE_PATH]", "[BOOK_ID]")

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@get_book_from_archive",
        proc do |request|
          assert_equal(formatted_name, request.name)
          raise error
        end
      )

      # Call method
      assert_raises CustomError do
        client.get_book_from_archive(formatted_name)
      end
    end
  end

  describe 'get_book_from_anywhere' do

    BookFromAnywhere = Google::Example::Library::V1::BookFromAnywhere
    LibraryServiceClient = Library::V1::LibraryServiceClient

    it 'invokes get_book_from_anywhere without error' do
      # Create request parameters and expected request
      formatted_name = LibraryServiceClient.book_path("[SHELF_ID]", "[BOOK_ID]")
      formatted_alt_book_name = LibraryServiceClient.book_path("[SHELF_ID]", "[BOOK_ID]")

      # Create expected grpc response
      name_2 = "name2-1052831874"
      author = "author-1406328437"
      title = "title110371416"
      read = true
      expected_response = BookFromAnywhere.new
      expected_response.name = name_2
      expected_response.author = author
      expected_response.title = title
      expected_response.read = read

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@get_book_from_anywhere",
        proc do |request|
          assert_equal(formatted_name, request.name)
          assert_equal(formatted_alt_book_name, request.alt_book_name)
          expected_response
        end
      )

      # Call method
      response = client.get_book_from_anywhere(formatted_name, formatted_alt_book_name)

      # Verify the response
      assert_equal(expected_response, response)
    end

    it 'invokes get_book_from_anywhere with error' do
      # Create request parameters and expected request
      formatted_name = LibraryServiceClient.book_path("[SHELF_ID]", "[BOOK_ID]")
      formatted_alt_book_name = LibraryServiceClient.book_path("[SHELF_ID]", "[BOOK_ID]")

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@get_book_from_anywhere",
        proc do |request|
          assert_equal(formatted_name, request.name)
          assert_equal(formatted_alt_book_name, request.alt_book_name)
          raise error
        end
      )

      # Call method
      assert_raises CustomError do
        client.get_book_from_anywhere(formatted_name, formatted_alt_book_name)
      end
    end
  end

  describe 'update_book_index' do

    Empty = Google::Protobuf::Empty
    LibraryServiceClient = Library::V1::LibraryServiceClient

    it 'invokes update_book_index without error' do
      # Create request parameters and expected request
      formatted_name = LibraryServiceClient.book_path("[SHELF_ID]", "[BOOK_ID]")
      index_name = "default index"
      index_map_item = ''
      index_map = { "default_key" => index_map_item }

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@update_book_index",
        proc do |request|
          assert_equal(formatted_name, request.name)
          assert_equal(index_name, request.index_name)
          assert_equal(index_map, request.index_map)
          nil
        end
      )

      # Call method
      response = client.update_book_index(
        formatted_name,
        index_name,
        index_map
      )

      # Verify the response
      assert_nil(response)
    end

    it 'invokes update_book_index with error' do
      # Create request parameters and expected request
      formatted_name = LibraryServiceClient.book_path("[SHELF_ID]", "[BOOK_ID]")
      index_name = "default index"
      index_map_item = ''
      index_map = { "default_key" => index_map_item }

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@update_book_index",
        proc do |request|
          assert_equal(formatted_name, request.name)
          assert_equal(index_name, request.index_name)
          assert_equal(index_map, request.index_map)
          raise error
        end
      )

      # Call method
      assert_raises CustomError do
        client.update_book_index(
          formatted_name,
          index_name,
          index_map
        )
      end
    end
  end

  describe 'add_tag' do

    AddTagResponse = Google::Tagger::V1::AddTagResponse
    LibraryServiceClient = Library::V1::LibraryServiceClient

    it 'invokes add_tag without error' do
      # Create request parameters and expected request
      formatted_resource = LibraryServiceClient.book_path("[SHELF_ID]", "[BOOK_ID]")
      tag = ''

      # Create expected grpc response
      expected_response = AddTagResponse.new

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@add_tag",
        proc do |request|
          assert_equal(formatted_resource, request.resource)
          assert_equal(tag, request.tag)
          expected_response
        end
      )

      # Call method
      response = client.add_tag(formatted_resource, tag)

      # Verify the response
      assert_equal(expected_response, response)
    end

    it 'invokes add_tag with error' do
      # Create request parameters and expected request
      formatted_resource = LibraryServiceClient.book_path("[SHELF_ID]", "[BOOK_ID]")
      tag = ''

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@add_tag",
        proc do |request|
          assert_equal(formatted_resource, request.resource)
          assert_equal(tag, request.tag)
          raise error
        end
      )

      # Call method
      assert_raises CustomError do
        client.add_tag(formatted_resource, tag)
      end
    end
  end

  describe 'add_label' do

    AddLabelResponse = Google::Tagger::V1::AddLabelResponse
    LibraryServiceClient = Library::V1::LibraryServiceClient

    it 'invokes add_label without error' do
      # Create request parameters and expected request
      formatted_resource = LibraryServiceClient.book_path("[SHELF_ID]", "[BOOK_ID]")
      label = ''

      # Create expected grpc response
      expected_response = AddLabelResponse.new

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@add_label",
        proc do |request|
          assert_equal(formatted_resource, request.resource)
          assert_equal(label, request.label)
          expected_response
        end
      )

      # Call method
      response = client.add_label(formatted_resource, label)

      # Verify the response
      assert_equal(expected_response, response)
    end

    it 'invokes add_label with error' do
      # Create request parameters and expected request
      formatted_resource = LibraryServiceClient.book_path("[SHELF_ID]", "[BOOK_ID]")
      label = ''

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@add_label",
        proc do |request|
          assert_equal(formatted_resource, request.resource)
          assert_equal(label, request.label)
          raise error
        end
      )

      # Call method
      assert_raises CustomError do
        client.add_label(formatted_resource, label)
      end
    end
  end

  describe 'test_optional_required_flattening_params' do

    InnerEnum = Google::Example::Library::V1::TestOptionalRequiredFlatteningParamsRequest::InnerEnum
    InnerMessage = Google::Example::Library::V1::TestOptionalRequiredFlatteningParamsRequest::InnerMessage
    LibraryServiceClient = Library::V1::LibraryServiceClient
    TestOptionalRequiredFlatteningParamsResponse = Google::Example::Library::V1::TestOptionalRequiredFlatteningParamsResponse

    it 'invokes test_optional_required_flattening_params without error' do
      # Create request parameters and expected request
      required_singular_int32 = 0
      required_singular_int64 = 0
      required_singular_float = 0.0
      required_singular_double = 0.0
      required_singular_bool = false
      required_singular_enum = InnerEnum::ZERO
      required_singular_string = ''
      required_singular_bytes = ''
      required_singular_message = InnerMessage.new
      required_singular_resource_name = ''
      required_singular_resource_name_oneof = ''
      required_singular_fixed32 = 0
      required_singular_fixed64 = 0
      required_repeated_int32 = []
      required_repeated_int64 = []
      required_repeated_float = []
      required_repeated_double = []
      required_repeated_bool = []
      required_repeated_enum = []
      required_repeated_string = []
      required_repeated_bytes = []
      required_repeated_message = []
      formatted_required_repeated_resource_name = []
      formatted_required_repeated_resource_name_oneof = []
      required_repeated_fixed32 = []
      required_repeated_fixed64 = []
      required_map = {}

      # Create expected grpc response
      expected_response = TestOptionalRequiredFlatteningParamsResponse.new

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@test_optional_required_flattening_params",
        proc do |request|
          assert_equal(required_singular_int32, request.required_singular_int32)
          assert_equal(required_singular_int64, request.required_singular_int64)
          assert_equal(required_singular_float, request.required_singular_float)
          assert_equal(required_singular_double, request.required_singular_double)
          assert_equal(required_singular_bool, request.required_singular_bool)
          assert_equal(required_singular_enum, request.required_singular_enum)
          assert_equal(required_singular_string, request.required_singular_string)
          assert_equal(required_singular_bytes, request.required_singular_bytes)
          assert_equal(required_singular_message, request.required_singular_message)
          assert_equal(required_singular_resource_name, request.required_singular_resource_name)
          assert_equal(required_singular_resource_name_oneof, request.required_singular_resource_name_oneof)
          assert_equal(required_singular_fixed32, request.required_singular_fixed32)
          assert_equal(required_singular_fixed64, request.required_singular_fixed64)
          assert_equal(required_repeated_int32, request.required_repeated_int32)
          assert_equal(required_repeated_int64, request.required_repeated_int64)
          assert_equal(required_repeated_float, request.required_repeated_float)
          assert_equal(required_repeated_double, request.required_repeated_double)
          assert_equal(required_repeated_bool, request.required_repeated_bool)
          assert_equal(required_repeated_enum, request.required_repeated_enum)
          assert_equal(required_repeated_string, request.required_repeated_string)
          assert_equal(required_repeated_bytes, request.required_repeated_bytes)
          assert_equal(required_repeated_message, request.required_repeated_message)
          assert_equal(formatted_required_repeated_resource_name, request.required_repeated_resource_name)
          assert_equal(formatted_required_repeated_resource_name_oneof, request.required_repeated_resource_name_oneof)
          assert_equal(required_repeated_fixed32, request.required_repeated_fixed32)
          assert_equal(required_repeated_fixed64, request.required_repeated_fixed64)
          assert_equal(required_map, request.required_map)
          expected_response
        end
      )

      # Call method
      response = client.test_optional_required_flattening_params(
        required_singular_int32,
        required_singular_int64,
        required_singular_float,
        required_singular_double,
        required_singular_bool,
        required_singular_enum,
        required_singular_string,
        required_singular_bytes,
        required_singular_message,
        required_singular_resource_name,
        required_singular_resource_name_oneof,
        required_singular_fixed32,
        required_singular_fixed64,
        required_repeated_int32,
        required_repeated_int64,
        required_repeated_float,
        required_repeated_double,
        required_repeated_bool,
        required_repeated_enum,
        required_repeated_string,
        required_repeated_bytes,
        required_repeated_message,
        formatted_required_repeated_resource_name,
        formatted_required_repeated_resource_name_oneof,
        required_repeated_fixed32,
        required_repeated_fixed64,
        required_map
      )

      # Verify the response
      assert_equal(expected_response, response)
    end

    it 'invokes test_optional_required_flattening_params with error' do
      # Create request parameters and expected request
      required_singular_int32 = 0
      required_singular_int64 = 0
      required_singular_float = 0.0
      required_singular_double = 0.0
      required_singular_bool = false
      required_singular_enum = InnerEnum::ZERO
      required_singular_string = ''
      required_singular_bytes = ''
      required_singular_message = InnerMessage.new
      required_singular_resource_name = ''
      required_singular_resource_name_oneof = ''
      required_singular_fixed32 = 0
      required_singular_fixed64 = 0
      required_repeated_int32 = []
      required_repeated_int64 = []
      required_repeated_float = []
      required_repeated_double = []
      required_repeated_bool = []
      required_repeated_enum = []
      required_repeated_string = []
      required_repeated_bytes = []
      required_repeated_message = []
      formatted_required_repeated_resource_name = []
      formatted_required_repeated_resource_name_oneof = []
      required_repeated_fixed32 = []
      required_repeated_fixed64 = []
      required_map = {}

      # Mock Grpc layer
      client = LibraryServiceClient.new
      client.instance_variable_set(
        "@test_optional_required_flattening_params",
        proc do |request|
          assert_equal(required_singular_int32, request.required_singular_int32)
          assert_equal(required_singular_int64, request.required_singular_int64)
          assert_equal(required_singular_float, request.required_singular_float)
          assert_equal(required_singular_double, request.required_singular_double)
          assert_equal(required_singular_bool, request.required_singular_bool)
          assert_equal(required_singular_enum, request.required_singular_enum)
          assert_equal(required_singular_string, request.required_singular_string)
          assert_equal(required_singular_bytes, request.required_singular_bytes)
          assert_equal(required_singular_message, request.required_singular_message)
          assert_equal(required_singular_resource_name, request.required_singular_resource_name)
          assert_equal(required_singular_resource_name_oneof, request.required_singular_resource_name_oneof)
          assert_equal(required_singular_fixed32, request.required_singular_fixed32)
          assert_equal(required_singular_fixed64, request.required_singular_fixed64)
          assert_equal(required_repeated_int32, request.required_repeated_int32)
          assert_equal(required_repeated_int64, request.required_repeated_int64)
          assert_equal(required_repeated_float, request.required_repeated_float)
          assert_equal(required_repeated_double, request.required_repeated_double)
          assert_equal(required_repeated_bool, request.required_repeated_bool)
          assert_equal(required_repeated_enum, request.required_repeated_enum)
          assert_equal(required_repeated_string, request.required_repeated_string)
          assert_equal(required_repeated_bytes, request.required_repeated_bytes)
          assert_equal(required_repeated_message, request.required_repeated_message)
          assert_equal(formatted_required_repeated_resource_name, request.required_repeated_resource_name)
          assert_equal(formatted_required_repeated_resource_name_oneof, request.required_repeated_resource_name_oneof)
          assert_equal(required_repeated_fixed32, request.required_repeated_fixed32)
          assert_equal(required_repeated_fixed64, request.required_repeated_fixed64)
          assert_equal(required_map, request.required_map)
          raise error
        end
      )

      # Call method
      assert_raises CustomError do
        client.test_optional_required_flattening_params(
          required_singular_int32,
          required_singular_int64,
          required_singular_float,
          required_singular_double,
          required_singular_bool,
          required_singular_enum,
          required_singular_string,
          required_singular_bytes,
          required_singular_message,
          required_singular_resource_name,
          required_singular_resource_name_oneof,
          required_singular_fixed32,
          required_singular_fixed64,
          required_repeated_int32,
          required_repeated_int64,
          required_repeated_float,
          required_repeated_double,
          required_repeated_bool,
          required_repeated_enum,
          required_repeated_string,
          required_repeated_bytes,
          required_repeated_message,
          formatted_required_repeated_resource_name,
          formatted_required_repeated_resource_name_oneof,
          required_repeated_fixed32,
          required_repeated_fixed64,
          required_map
        )
      end
    end
  end
end
