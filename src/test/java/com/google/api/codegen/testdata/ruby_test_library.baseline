============== file: tests/library/v1/library_service_api_test.rb ==============
# Copyright 2016 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require "minitest/autorun"
require "google/example/library/v1/library_service_api"
include Google::Example::Library::V1

describe LibraryServiceApi do

  def stub_grpc_client
    mock_client = Minitest::Mock.new

    # Implement "method" method for the mock.
    def mock_client.method(name_symbol)
      # We return a lambda (an instance of Proc) instead of a Method, because
      # the latter can't be easily constructed on the fly. In practice, most
      # operations performed on Methods work on Procs. The differences are:
      # Proc implements: :yield, :lambda?, :binding
      # Method implements: :receiver, :name, :original_name, :owner, :unbind,
      #                    and :super_method
      lambda { |*args| public_send(name_symbol, *args) }
    end

    LibraryService::Stub.stub(:new, mock_client) { yield(mock_client) }
  end

  describe "#create_shelf" do
    it "forwards calls to LibraryService::Stub" do
      stub_grpc_client do |mock_client|
        LibraryServiceApi = Library::V1::LibraryServiceApi
        Shelf = Google::Example::Library::V1::Shelf

        expected_request = CreateShelfRequest.new(
          shelf: Shelf.new,
        )

        mocked_response = Shelf.new

        mock_client.expect(
          :create_shelf,
          mocked_response,
          [expected_request, Hash],
        )

        library_service_api = LibraryServiceApi.new
        shelf = Shelf.new
        response = library_service_api.create_shelf(shelf)

        # Verification:
        response.must_equal mocked_response
      end
    end
  end

  describe "#get_shelf" do
    it "forwards calls to LibraryService::Stub" do
      stub_grpc_client do |mock_client|
        LibraryServiceApi = Library::V1::LibraryServiceApi

        expected_request = GetShelfRequest.new(
          formatted_name: LibraryServiceApi.shelf_path("[SHELF_ID]"),
          options: '',
        )

        mocked_response = Shelf.new

        mock_client.expect(
          :get_shelf,
          mocked_response,
          [expected_request, Hash],
        )

        library_service_api = LibraryServiceApi.new
        formatted_name = LibraryServiceApi.shelf_path("[SHELF_ID]")
        options = ''
        response = library_service_api.get_shelf(formatted_name, options)

        # Verification:
        response.must_equal mocked_response
      end
    end
  end

  describe "#get_shelf" do
    it "forwards calls to LibraryService::Stub" do
      stub_grpc_client do |mock_client|
        LibraryServiceApi = Library::V1::LibraryServiceApi

        expected_request = GetShelfRequest.new(
          formatted_name: LibraryServiceApi.shelf_path("[SHELF_ID]"),
          options: '',
        )

        mocked_response = Shelf.new

        mock_client.expect(
          :get_shelf,
          mocked_response,
          [expected_request, Hash],
        )

        library_service_api = LibraryServiceApi.new
        formatted_name = LibraryServiceApi.shelf_path("[SHELF_ID]")
        options = ''
        response = library_service_api.get_shelf(formatted_name, options)

        # Verification:
        response.must_equal mocked_response
      end
    end
  end

  describe "#get_shelf" do
    it "forwards calls to LibraryService::Stub" do
      stub_grpc_client do |mock_client|
        LibraryServiceApi = Library::V1::LibraryServiceApi

        expected_request = GetShelfRequest.new(
          formatted_name: LibraryServiceApi.shelf_path("[SHELF_ID]"),
          options: '',
        )

        mocked_response = Shelf.new

        mock_client.expect(
          :get_shelf,
          mocked_response,
          [expected_request, Hash],
        )

        library_service_api = LibraryServiceApi.new
        formatted_name = LibraryServiceApi.shelf_path("[SHELF_ID]")
        options = ''
        response = library_service_api.get_shelf(formatted_name, options)

        # Verification:
        response.must_equal mocked_response
      end
    end
  end

  describe "#list_shelves" do
    it "forwards calls to LibraryService::Stub" do
      stub_grpc_client do |mock_client|
        LibraryServiceApi = Library::V1::LibraryServiceApi

        expected_request = ListShelvesRequest.new(

        )

        mocked_response = ListShelvesResponse.new

        mock_client.expect(
          :list_shelves,
          mocked_response,
          [expected_request, Hash],
        )

        library_service_api = LibraryServiceApi.new

        # Iterate over all results.
        library_service_api.list_shelves.each do |element|
          # Process element.
        end

        # Or iterate over results one page at a time.
        library_service_api.list_shelves.each_page do |page|
          # Process each page at a time.
          page.each do |element|
            # Process element.
          end
        end

        # Verification:
        response.must_equal mocked_response
      end
    end
  end

  describe "#delete_shelf" do
    it "forwards calls to LibraryService::Stub" do
      stub_grpc_client do |mock_client|
        LibraryServiceApi = Library::V1::LibraryServiceApi

        expected_request = DeleteShelfRequest.new(
          formatted_name: LibraryServiceApi.shelf_path("[SHELF_ID]"),
        )

        mocked_response = Empty.new

        mock_client.expect(
          :delete_shelf,
          mocked_response,
          [expected_request, Hash],
        )

        library_service_api = LibraryServiceApi.new
        formatted_name = LibraryServiceApi.shelf_path("[SHELF_ID]")
        library_service_api.delete_shelf(formatted_name)

        # Verification:
        response.must_equal mocked_response
      end
    end
  end

  describe "#merge_shelves" do
    it "forwards calls to LibraryService::Stub" do
      stub_grpc_client do |mock_client|
        LibraryServiceApi = Library::V1::LibraryServiceApi

        expected_request = MergeShelvesRequest.new(
          formatted_name: LibraryServiceApi.shelf_path("[SHELF_ID]"),
          formatted_other_shelf_name: LibraryServiceApi.shelf_path("[SHELF_ID]"),
        )

        mocked_response = Shelf.new

        mock_client.expect(
          :merge_shelves,
          mocked_response,
          [expected_request, Hash],
        )

        library_service_api = LibraryServiceApi.new
        formatted_name = LibraryServiceApi.shelf_path("[SHELF_ID]")
        formatted_other_shelf_name = LibraryServiceApi.shelf_path("[SHELF_ID]")
        response = library_service_api.merge_shelves(formatted_name, formatted_other_shelf_name)

        # Verification:
        response.must_equal mocked_response
      end
    end
  end

  describe "#create_book" do
    it "forwards calls to LibraryService::Stub" do
      stub_grpc_client do |mock_client|
        Book = Google::Example::Library::V1::Book
        LibraryServiceApi = Library::V1::LibraryServiceApi

        expected_request = CreateBookRequest.new(
          formatted_name: LibraryServiceApi.shelf_path("[SHELF_ID]"),
          book: Book.new,
        )

        mocked_response = Book.new

        mock_client.expect(
          :create_book,
          mocked_response,
          [expected_request, Hash],
        )

        library_service_api = LibraryServiceApi.new
        formatted_name = LibraryServiceApi.shelf_path("[SHELF_ID]")
        book = Book.new
        response = library_service_api.create_book(formatted_name, book)

        # Verification:
        response.must_equal mocked_response
      end
    end
  end

  describe "#publish_series" do
    it "forwards calls to LibraryService::Stub" do
      stub_grpc_client do |mock_client|
        LibraryServiceApi = Library::V1::LibraryServiceApi
        Shelf = Google::Example::Library::V1::Shelf

        expected_request = PublishSeriesRequest.new(
          shelf: Shelf.new,
          books: [],
        )

        mocked_response = PublishSeriesResponse.new

        mock_client.expect(
          :publish_series,
          mocked_response,
          [expected_request, Hash],
        )

        library_service_api = LibraryServiceApi.new
        shelf = Shelf.new
        books = []
        response = library_service_api.publish_series(shelf, books)

        # Verification:
        response.must_equal mocked_response
      end
    end
  end

  describe "#get_book" do
    it "forwards calls to LibraryService::Stub" do
      stub_grpc_client do |mock_client|
        LibraryServiceApi = Library::V1::LibraryServiceApi

        expected_request = GetBookRequest.new(
          formatted_name: LibraryServiceApi.book_path("[SHELF_ID]", "[BOOK_ID]"),
        )

        mocked_response = Book.new

        mock_client.expect(
          :get_book,
          mocked_response,
          [expected_request, Hash],
        )

        library_service_api = LibraryServiceApi.new
        formatted_name = LibraryServiceApi.book_path("[SHELF_ID]", "[BOOK_ID]")
        response = library_service_api.get_book(formatted_name)

        # Verification:
        response.must_equal mocked_response
      end
    end
  end

  describe "#list_books" do
    it "forwards calls to LibraryService::Stub" do
      stub_grpc_client do |mock_client|
        LibraryServiceApi = Library::V1::LibraryServiceApi

        expected_request = ListBooksRequest.new(
          formatted_name: LibraryServiceApi.shelf_path("[SHELF_ID]"),
        )

        mocked_response = ListBooksResponse.new

        mock_client.expect(
          :list_books,
          mocked_response,
          [expected_request, Hash],
        )

        library_service_api = LibraryServiceApi.new
        formatted_name = LibraryServiceApi.shelf_path("[SHELF_ID]")

        # Iterate over all results.
        library_service_api.list_books(formatted_name).each do |element|
          # Process element.
        end

        # Or iterate over results one page at a time.
        library_service_api.list_books(formatted_name).each_page do |page|
          # Process each page at a time.
          page.each do |element|
            # Process element.
          end
        end

        # Verification:
        response.must_equal mocked_response
      end
    end
  end

  describe "#delete_book" do
    it "forwards calls to LibraryService::Stub" do
      stub_grpc_client do |mock_client|
        LibraryServiceApi = Library::V1::LibraryServiceApi

        expected_request = DeleteBookRequest.new(
          formatted_name: LibraryServiceApi.book_path("[SHELF_ID]", "[BOOK_ID]"),
        )

        mocked_response = Empty.new

        mock_client.expect(
          :delete_book,
          mocked_response,
          [expected_request, Hash],
        )

        library_service_api = LibraryServiceApi.new
        formatted_name = LibraryServiceApi.book_path("[SHELF_ID]", "[BOOK_ID]")
        library_service_api.delete_book(formatted_name)

        # Verification:
        response.must_equal mocked_response
      end
    end
  end

  describe "#update_book" do
    it "forwards calls to LibraryService::Stub" do
      stub_grpc_client do |mock_client|
        Book = Google::Example::Library::V1::Book
        LibraryServiceApi = Library::V1::LibraryServiceApi

        expected_request = UpdateBookRequest.new(
          formatted_name: LibraryServiceApi.book_path("[SHELF_ID]", "[BOOK_ID]"),
          book: Book.new,
        )

        mocked_response = Book.new

        mock_client.expect(
          :update_book,
          mocked_response,
          [expected_request, Hash],
        )

        library_service_api = LibraryServiceApi.new
        formatted_name = LibraryServiceApi.book_path("[SHELF_ID]", "[BOOK_ID]")
        book = Book.new
        response = library_service_api.update_book(formatted_name, book)

        # Verification:
        response.must_equal mocked_response
      end
    end
  end

  describe "#update_book" do
    it "forwards calls to LibraryService::Stub" do
      stub_grpc_client do |mock_client|
        Book = Google::Example::Library::V1::Book
        LibraryServiceApi = Library::V1::LibraryServiceApi

        expected_request = UpdateBookRequest.new(
          formatted_name: LibraryServiceApi.book_path("[SHELF_ID]", "[BOOK_ID]"),
          book: Book.new,
        )

        mocked_response = Book.new

        mock_client.expect(
          :update_book,
          mocked_response,
          [expected_request, Hash],
        )

        library_service_api = LibraryServiceApi.new
        formatted_name = LibraryServiceApi.book_path("[SHELF_ID]", "[BOOK_ID]")
        book = Book.new
        response = library_service_api.update_book(formatted_name, book)

        # Verification:
        response.must_equal mocked_response
      end
    end
  end

  describe "#move_book" do
    it "forwards calls to LibraryService::Stub" do
      stub_grpc_client do |mock_client|
        LibraryServiceApi = Library::V1::LibraryServiceApi

        expected_request = MoveBookRequest.new(
          formatted_name: LibraryServiceApi.book_path("[SHELF_ID]", "[BOOK_ID]"),
          formatted_other_shelf_name: LibraryServiceApi.shelf_path("[SHELF_ID]"),
        )

        mocked_response = Book.new

        mock_client.expect(
          :move_book,
          mocked_response,
          [expected_request, Hash],
        )

        library_service_api = LibraryServiceApi.new
        formatted_name = LibraryServiceApi.book_path("[SHELF_ID]", "[BOOK_ID]")
        formatted_other_shelf_name = LibraryServiceApi.shelf_path("[SHELF_ID]")
        response = library_service_api.move_book(formatted_name, formatted_other_shelf_name)

        # Verification:
        response.must_equal mocked_response
      end
    end
  end

  describe "#list_strings" do
    it "forwards calls to LibraryService::Stub" do
      stub_grpc_client do |mock_client|
        LibraryServiceApi = Library::V1::LibraryServiceApi

        expected_request = ListStringsRequest.new(

        )

        mocked_response = ListStringsResponse.new

        mock_client.expect(
          :list_strings,
          mocked_response,
          [expected_request, Hash],
        )

        library_service_api = LibraryServiceApi.new

        # Iterate over all results.
        library_service_api.list_strings.each do |element|
          # Process element.
        end

        # Or iterate over results one page at a time.
        library_service_api.list_strings.each_page do |page|
          # Process each page at a time.
          page.each do |element|
            # Process element.
          end
        end

        # Verification:
        response.must_equal mocked_response
      end
    end
  end

  describe "#add_comments" do
    it "forwards calls to LibraryService::Stub" do
      stub_grpc_client do |mock_client|
        Alignment = Google::Example::Library::V1::SomeMessage2::SomeMessage3::Alignment
        Comment = Google::Example::Library::V1::Comment
        LibraryServiceApi = Library::V1::LibraryServiceApi
        Stage = Google::Example::Library::V1::Comment::Stage

        expected_request = AddCommentsRequest.new(
          formatted_name: LibraryServiceApi.book_path("[SHELF_ID]", "[BOOK_ID]"),
          comment: '',
          stage: Stage::UNSET,
          alignment: Alignment::CHAR,
          comments_element: Comment.new(
            comment: comment
            stage: stage
            alignment: alignment
          ),
          comments: [comments_element],
        )

        mocked_response = Empty.new

        mock_client.expect(
          :add_comments,
          mocked_response,
          [expected_request, Hash],
        )

        library_service_api = LibraryServiceApi.new
        formatted_name = LibraryServiceApi.book_path("[SHELF_ID]", "[BOOK_ID]")
        comment = ''
        stage = Stage::UNSET
        alignment = Alignment::CHAR
        comments_element = Comment.new
        comments_element.comment = comment
        comments_element.stage = stage
        comments_element.alignment = alignment
        comments = [comments_element]
        library_service_api.add_comments(formatted_name, comments)

        # Verification:
        response.must_equal mocked_response
      end
    end
  end

  describe "#get_book_from_archive" do
    it "forwards calls to LibraryService::Stub" do
      stub_grpc_client do |mock_client|
        LibraryServiceApi = Library::V1::LibraryServiceApi

        expected_request = GetBookFromArchiveRequest.new(
          formatted_name: LibraryServiceApi.archived_book_path("[ARCHIVE_PATH]", "[BOOK_ID]"),
        )

        mocked_response = Book.new

        mock_client.expect(
          :get_book_from_archive,
          mocked_response,
          [expected_request, Hash],
        )

        library_service_api = LibraryServiceApi.new
        formatted_name = LibraryServiceApi.archived_book_path("[ARCHIVE_PATH]", "[BOOK_ID]")
        response = library_service_api.get_book_from_archive(formatted_name)

        # Verification:
        response.must_equal mocked_response
      end
    end
  end

  describe "#update_book_index" do
    it "forwards calls to LibraryService::Stub" do
      stub_grpc_client do |mock_client|
        LibraryServiceApi = Library::V1::LibraryServiceApi

        expected_request = UpdateBookIndexRequest.new(
          formatted_name: LibraryServiceApi.book_path("[SHELF_ID]", "[BOOK_ID]"),
          index_name: "default index",
          index_map_item: '',
          index_map: { "default_key" => index_map_item },
        )

        mocked_response = Empty.new

        mock_client.expect(
          :update_book_index,
          mocked_response,
          [expected_request, Hash],
        )

        library_service_api = LibraryServiceApi.new
        formatted_name = LibraryServiceApi.book_path("[SHELF_ID]", "[BOOK_ID]")
        index_name = "default index"
        index_map_item = ''
        index_map = { "default_key" => index_map_item }
        library_service_api.update_book_index(formatted_name, index_name, index_map)

        # Verification:
        response.must_equal mocked_response
      end
    end
  end

  describe "#find_related_books" do
    it "forwards calls to LibraryService::Stub" do
      stub_grpc_client do |mock_client|
        LibraryServiceApi = Library::V1::LibraryServiceApi

        expected_request = FindRelatedBooksRequest.new(
          names_element: '',
          names: [names_element],
          shelves: [],
        )

        mocked_response = FindRelatedBooksResponse.new

        mock_client.expect(
          :find_related_books,
          mocked_response,
          [expected_request, Hash],
        )

        library_service_api = LibraryServiceApi.new
        names_element = ''
        names = [names_element]
        shelves = []

        # Iterate over all results.
        library_service_api.find_related_books(names, shelves).each do |element|
          # Process element.
        end

        # Or iterate over results one page at a time.
        library_service_api.find_related_books(names, shelves).each_page do |page|
          # Process each page at a time.
          page.each do |element|
            # Process element.
          end
        end

        # Verification:
        response.must_equal mocked_response
      end
    end
  end

  describe "#add_tag" do
    it "forwards calls to LibraryService::Stub" do
      stub_grpc_client do |mock_client|
        LibraryServiceApi = Library::V1::LibraryServiceApi

        expected_request = AddTagRequest.new(
          formatted_resource: LibraryServiceApi.book_path("[SHELF_ID]", "[BOOK_ID]"),
          tag: '',
        )

        mocked_response = AddTagResponse.new

        mock_client.expect(
          :add_tag,
          mocked_response,
          [expected_request, Hash],
        )

        library_service_api = LibraryServiceApi.new
        formatted_resource = LibraryServiceApi.book_path("[SHELF_ID]", "[BOOK_ID]")
        tag = ''
        response = library_service_api.add_tag(formatted_resource, tag)

        # Verification:
        response.must_equal mocked_response
      end
    end
  end

  describe "#add_label" do
    it "forwards calls to LibraryService::Stub" do
      stub_grpc_client do |mock_client|
        LibraryServiceApi = Library::V1::LibraryServiceApi

        expected_request = AddLabelRequest.new(
          formatted_resource: LibraryServiceApi.book_path("[SHELF_ID]", "[BOOK_ID]"),
          label: '',
        )

        mocked_response = AddLabelResponse.new

        mock_client.expect(
          :add_label,
          mocked_response,
          [expected_request, Hash],
        )

        library_service_api = LibraryServiceApi.new
        formatted_resource = LibraryServiceApi.book_path("[SHELF_ID]", "[BOOK_ID]")
        label = ''
        response = library_service_api.add_label(formatted_resource, label)

        # Verification:
        response.must_equal mocked_response
      end
    end
  end

  describe "#get_big_book" do
    it "forwards calls to LibraryService::Stub" do
      stub_grpc_client do |mock_client|
        LibraryServiceApi = Library::V1::LibraryServiceApi

        expected_request = GetBookRequest.new(
          formatted_name: LibraryServiceApi.book_path("[SHELF_ID]", "[BOOK_ID]"),
        )

        mocked_response = Operation.new

        mock_client.expect(
          :get_big_book,
          mocked_response,
          [expected_request, Hash],
        )

        library_service_api = LibraryServiceApi.new
        formatted_name = LibraryServiceApi.book_path("[SHELF_ID]", "[BOOK_ID]")
        response = library_service_api.get_big_book(formatted_name)

        # Verification:
        response.must_equal mocked_response
      end
    end
  end
end
