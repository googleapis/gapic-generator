
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/datastore/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, datastore.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  datastoreService, err := datastore.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The ID of the project against which to make the request.
  projectId := ""  // TODO: Update placeholder value.

  rb := &datastore.AllocateIdsRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := datastoreService.Projects.AllocateIds(projectId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/datastore/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, datastore.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  datastoreService, err := datastore.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The ID of the project against which to make the request.
  projectId := ""  // TODO: Update placeholder value.

  rb := &datastore.BeginTransactionRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := datastoreService.Projects.BeginTransaction(projectId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/datastore/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, datastore.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  datastoreService, err := datastore.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The ID of the project against which to make the request.
  projectId := ""  // TODO: Update placeholder value.

  rb := &datastore.CommitRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := datastoreService.Projects.Commit(projectId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/datastore/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, datastore.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  datastoreService, err := datastore.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The ID of the project against which to make the request.
  projectId := ""  // TODO: Update placeholder value.

  rb := &datastore.LookupRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := datastoreService.Projects.Lookup(projectId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/datastore/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, datastore.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  datastoreService, err := datastore.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The ID of the project against which to make the request.
  projectId := ""  // TODO: Update placeholder value.

  rb := &datastore.RollbackRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := datastoreService.Projects.Rollback(projectId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/datastore/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, datastore.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  datastoreService, err := datastore.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The ID of the project against which to make the request.
  projectId := ""  // TODO: Update placeholder value.

  rb := &datastore.RunQueryRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := datastoreService.Projects.RunQuery(projectId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
