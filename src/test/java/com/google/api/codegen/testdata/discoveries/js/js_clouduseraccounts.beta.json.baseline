
<html>
  <head></head>
  <body>
    <!--
    BEFORE RUNNING:
    ---------------
    1. If not already done, enable the Cloud User Accounts API
       and check the quota for your project at
       https://console.developers.google.com/apis/api/clouduseraccounts
    2. Get access keys for your application. See
       https://developers.google.com/api-client-library/javascript/start/start-js#get-access-keys-for-your-application
    -->
    <script>
    function makeApiCall() {
      var params = {
        // Project ID for this request.
        project: '',  // TODO: Update placeholder value.

        // Name of the Operations resource to delete.
        operation: '',  // TODO: Update placeholder value.
      };

      var request = gapi.client.clouduseraccounts.globalAccountsOperations.delete(params);
      request.then(function() {}, function(reason) {
        console.error('error: ' + reason.result.error.message');
      });
    }

    function initClient() {
      gapi.client.init({
        'apiKey': '',  // TODO: Update placeholder with desired API key.
        'clientId': '',  // TODO: Update placeholder with desired client ID.
        'scope': 'https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud.useraccounts',
        'discoveryDocs': ['https://content.googleapis.com/discovery/v1/apis/clouduseraccounts/beta/rest'],
      }).then(function() {
        gapi.auth2.getAuthInstance().isSignedIn.listen(updateSignInStatus);
        updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
      });
    }

    function handleClientLoad() {
      gapi.load('client:auth2', initClient);
    }

    function updateSignInStatus(isSignedIn) {
      if (isSignedIn) {
        makeApiCall();
      }
    }

    function handleSignInClick(event) {
      gapi.auth2.getAuthInstance().signIn();
    }

    function handleSignOutClick(event) {
      gapi.auth2.getAuthInstance().signOut();
    }
    </script>
    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
    <button id="signin-button" onclick="handleSignInClick()">Sign in</button>
    <button id="signout-button" onclick="handleSignOutClick()">Sign out</button>
  </body>
</html>
<html>
  <head></head>
  <body>
    <!--
    BEFORE RUNNING:
    ---------------
    1. If not already done, enable the Cloud User Accounts API
       and check the quota for your project at
       https://console.developers.google.com/apis/api/clouduseraccounts
    2. Get access keys for your application. See
       https://developers.google.com/api-client-library/javascript/start/start-js#get-access-keys-for-your-application
    -->
    <script>
    function makeApiCall() {
      var params = {
        // Project ID for this request.
        project: '',  // TODO: Update placeholder value.

        // Name of the Operations resource to return.
        operation: '',  // TODO: Update placeholder value.
      };

      var request = gapi.client.clouduseraccounts.globalAccountsOperations.get(params);
      request.then(function(response) {
        // TODO: Change code below to process the `response` object:
        console.log(response.result);
      }, function(reason) {
        console.error('error: ' + reason.result.error.message);
      });
    }

    function initClient() {
      gapi.client.init({
        'apiKey': '',  // TODO: Update placeholder with desired API key.
        'clientId': '',  // TODO: Update placeholder with desired client ID.
        'scope': 'https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud-platform.read-only https://www.googleapis.com/auth/cloud.useraccounts https://www.googleapis.com/auth/cloud.useraccounts.readonly',
        'discoveryDocs': ['https://content.googleapis.com/discovery/v1/apis/clouduseraccounts/beta/rest'],
      }).then(function() {
        gapi.auth2.getAuthInstance().isSignedIn.listen(updateSignInStatus);
        updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
      });
    }

    function handleClientLoad() {
      gapi.load('client:auth2', initClient);
    }

    function updateSignInStatus(isSignedIn) {
      if (isSignedIn) {
        makeApiCall();
      }
    }

    function handleSignInClick(event) {
      gapi.auth2.getAuthInstance().signIn();
    }

    function handleSignOutClick(event) {
      gapi.auth2.getAuthInstance().signOut();
    }
    </script>
    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
    <button id="signin-button" onclick="handleSignInClick()">Sign in</button>
    <button id="signout-button" onclick="handleSignOutClick()">Sign out</button>
  </body>
</html>
<html>
  <head></head>
  <body>
    <!--
    BEFORE RUNNING:
    ---------------
    1. If not already done, enable the Cloud User Accounts API
       and check the quota for your project at
       https://console.developers.google.com/apis/api/clouduseraccounts
    2. Get access keys for your application. See
       https://developers.google.com/api-client-library/javascript/start/start-js#get-access-keys-for-your-application
    -->
    <script>
    function makeApiCall() {
      var params = {
        // Project ID for this request.
        project: '',  // TODO: Update placeholder value.
      };

      executeRequest(params);
    }

    function executeRequest(params) {
      var request = gapi.client.clouduseraccounts.globalAccountsOperations.list(params);
      request.then(function(response) {
        var itemsPage = response.result.items;
        for (var i = 0; i < itemsPage.length; i++) {
          // TODO: Change code below to process each resource in `itemsPage`:
          console.log(itemsPage[i]);
        }

        if (response.result.nextPageToken) {
          params.pageToken = response.result.nextPageToken;
          executeRequest(params);
        }
      }, function(reason) {
        console.error('error: ' + reason.result.error.message);
      });
    }

    function initClient() {
      gapi.client.init({
        'apiKey': '',  // TODO: Update placeholder with desired API key.
        'clientId': '',  // TODO: Update placeholder with desired client ID.
        'scope': 'https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud-platform.read-only https://www.googleapis.com/auth/cloud.useraccounts https://www.googleapis.com/auth/cloud.useraccounts.readonly',
        'discoveryDocs': ['https://content.googleapis.com/discovery/v1/apis/clouduseraccounts/beta/rest'],
      }).then(function() {
        gapi.auth2.getAuthInstance().isSignedIn.listen(updateSignInStatus);
        updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
      });
    }

    function handleClientLoad() {
      gapi.load('client:auth2', initClient);
    }

    function updateSignInStatus(isSignedIn) {
      if (isSignedIn) {
        makeApiCall();
      }
    }

    function handleSignInClick(event) {
      gapi.auth2.getAuthInstance().signIn();
    }

    function handleSignOutClick(event) {
      gapi.auth2.getAuthInstance().signOut();
    }
    </script>
    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
    <button id="signin-button" onclick="handleSignInClick()">Sign in</button>
    <button id="signout-button" onclick="handleSignOutClick()">Sign out</button>
  </body>
</html>
<html>
  <head></head>
  <body>
    <!--
    BEFORE RUNNING:
    ---------------
    1. If not already done, enable the Cloud User Accounts API
       and check the quota for your project at
       https://console.developers.google.com/apis/api/clouduseraccounts
    2. Get access keys for your application. See
       https://developers.google.com/api-client-library/javascript/start/start-js#get-access-keys-for-your-application
    -->
    <script>
    function makeApiCall() {
      var params = {
        // Project ID for this request.
        project: '',  // TODO: Update placeholder value.

        // Name of the group for this request.
        groupName: '',  // TODO: Update placeholder value.
      };

      var groupsAddMemberRequestBody = {
        // TODO: Add desired properties to the request body.
      };

      var request = gapi.client.clouduseraccounts.groups.addMember(params, groupsAddMemberRequestBody);
      request.then(function(response) {
        // TODO: Change code below to process the `response` object:
        console.log(response.result);
      }, function(reason) {
        console.error('error: ' + reason.result.error.message);
      });
    }

    function initClient() {
      gapi.client.init({
        'apiKey': '',  // TODO: Update placeholder with desired API key.
        'clientId': '',  // TODO: Update placeholder with desired client ID.
        'scope': 'https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud.useraccounts',
        'discoveryDocs': ['https://content.googleapis.com/discovery/v1/apis/clouduseraccounts/beta/rest'],
      }).then(function() {
        gapi.auth2.getAuthInstance().isSignedIn.listen(updateSignInStatus);
        updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
      });
    }

    function handleClientLoad() {
      gapi.load('client:auth2', initClient);
    }

    function updateSignInStatus(isSignedIn) {
      if (isSignedIn) {
        makeApiCall();
      }
    }

    function handleSignInClick(event) {
      gapi.auth2.getAuthInstance().signIn();
    }

    function handleSignOutClick(event) {
      gapi.auth2.getAuthInstance().signOut();
    }
    </script>
    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
    <button id="signin-button" onclick="handleSignInClick()">Sign in</button>
    <button id="signout-button" onclick="handleSignOutClick()">Sign out</button>
  </body>
</html>
<html>
  <head></head>
  <body>
    <!--
    BEFORE RUNNING:
    ---------------
    1. If not already done, enable the Cloud User Accounts API
       and check the quota for your project at
       https://console.developers.google.com/apis/api/clouduseraccounts
    2. Get access keys for your application. See
       https://developers.google.com/api-client-library/javascript/start/start-js#get-access-keys-for-your-application
    -->
    <script>
    function makeApiCall() {
      var params = {
        // Project ID for this request.
        project: '',  // TODO: Update placeholder value.

        // Name of the Group resource to delete.
        groupName: '',  // TODO: Update placeholder value.
      };

      var request = gapi.client.clouduseraccounts.groups.delete(params);
      request.then(function(response) {
        // TODO: Change code below to process the `response` object:
        console.log(response.result);
      }, function(reason) {
        console.error('error: ' + reason.result.error.message);
      });
    }

    function initClient() {
      gapi.client.init({
        'apiKey': '',  // TODO: Update placeholder with desired API key.
        'clientId': '',  // TODO: Update placeholder with desired client ID.
        'scope': 'https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud.useraccounts',
        'discoveryDocs': ['https://content.googleapis.com/discovery/v1/apis/clouduseraccounts/beta/rest'],
      }).then(function() {
        gapi.auth2.getAuthInstance().isSignedIn.listen(updateSignInStatus);
        updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
      });
    }

    function handleClientLoad() {
      gapi.load('client:auth2', initClient);
    }

    function updateSignInStatus(isSignedIn) {
      if (isSignedIn) {
        makeApiCall();
      }
    }

    function handleSignInClick(event) {
      gapi.auth2.getAuthInstance().signIn();
    }

    function handleSignOutClick(event) {
      gapi.auth2.getAuthInstance().signOut();
    }
    </script>
    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
    <button id="signin-button" onclick="handleSignInClick()">Sign in</button>
    <button id="signout-button" onclick="handleSignOutClick()">Sign out</button>
  </body>
</html>
<html>
  <head></head>
  <body>
    <!--
    BEFORE RUNNING:
    ---------------
    1. If not already done, enable the Cloud User Accounts API
       and check the quota for your project at
       https://console.developers.google.com/apis/api/clouduseraccounts
    2. Get access keys for your application. See
       https://developers.google.com/api-client-library/javascript/start/start-js#get-access-keys-for-your-application
    -->
    <script>
    function makeApiCall() {
      var params = {
        // Project ID for this request.
        project: '',  // TODO: Update placeholder value.

        // Name of the Group resource to return.
        groupName: '',  // TODO: Update placeholder value.
      };

      var request = gapi.client.clouduseraccounts.groups.get(params);
      request.then(function(response) {
        // TODO: Change code below to process the `response` object:
        console.log(response.result);
      }, function(reason) {
        console.error('error: ' + reason.result.error.message);
      });
    }

    function initClient() {
      gapi.client.init({
        'apiKey': '',  // TODO: Update placeholder with desired API key.
        'clientId': '',  // TODO: Update placeholder with desired client ID.
        'scope': 'https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud-platform.read-only https://www.googleapis.com/auth/cloud.useraccounts https://www.googleapis.com/auth/cloud.useraccounts.readonly',
        'discoveryDocs': ['https://content.googleapis.com/discovery/v1/apis/clouduseraccounts/beta/rest'],
      }).then(function() {
        gapi.auth2.getAuthInstance().isSignedIn.listen(updateSignInStatus);
        updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
      });
    }

    function handleClientLoad() {
      gapi.load('client:auth2', initClient);
    }

    function updateSignInStatus(isSignedIn) {
      if (isSignedIn) {
        makeApiCall();
      }
    }

    function handleSignInClick(event) {
      gapi.auth2.getAuthInstance().signIn();
    }

    function handleSignOutClick(event) {
      gapi.auth2.getAuthInstance().signOut();
    }
    </script>
    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
    <button id="signin-button" onclick="handleSignInClick()">Sign in</button>
    <button id="signout-button" onclick="handleSignOutClick()">Sign out</button>
  </body>
</html>
<html>
  <head></head>
  <body>
    <!--
    BEFORE RUNNING:
    ---------------
    1. If not already done, enable the Cloud User Accounts API
       and check the quota for your project at
       https://console.developers.google.com/apis/api/clouduseraccounts
    2. Get access keys for your application. See
       https://developers.google.com/api-client-library/javascript/start/start-js#get-access-keys-for-your-application
    -->
    <script>
    function makeApiCall() {
      var params = {
        // Project ID for this request.
        project: '',  // TODO: Update placeholder value.
      };

      var groupBody = {
        // TODO: Add desired properties to the request body.
      };

      var request = gapi.client.clouduseraccounts.groups.insert(params, groupBody);
      request.then(function(response) {
        // TODO: Change code below to process the `response` object:
        console.log(response.result);
      }, function(reason) {
        console.error('error: ' + reason.result.error.message);
      });
    }

    function initClient() {
      gapi.client.init({
        'apiKey': '',  // TODO: Update placeholder with desired API key.
        'clientId': '',  // TODO: Update placeholder with desired client ID.
        'scope': 'https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud.useraccounts',
        'discoveryDocs': ['https://content.googleapis.com/discovery/v1/apis/clouduseraccounts/beta/rest'],
      }).then(function() {
        gapi.auth2.getAuthInstance().isSignedIn.listen(updateSignInStatus);
        updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
      });
    }

    function handleClientLoad() {
      gapi.load('client:auth2', initClient);
    }

    function updateSignInStatus(isSignedIn) {
      if (isSignedIn) {
        makeApiCall();
      }
    }

    function handleSignInClick(event) {
      gapi.auth2.getAuthInstance().signIn();
    }

    function handleSignOutClick(event) {
      gapi.auth2.getAuthInstance().signOut();
    }
    </script>
    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
    <button id="signin-button" onclick="handleSignInClick()">Sign in</button>
    <button id="signout-button" onclick="handleSignOutClick()">Sign out</button>
  </body>
</html>
<html>
  <head></head>
  <body>
    <!--
    BEFORE RUNNING:
    ---------------
    1. If not already done, enable the Cloud User Accounts API
       and check the quota for your project at
       https://console.developers.google.com/apis/api/clouduseraccounts
    2. Get access keys for your application. See
       https://developers.google.com/api-client-library/javascript/start/start-js#get-access-keys-for-your-application
    -->
    <script>
    function makeApiCall() {
      var params = {
        // Project ID for this request.
        project: '',  // TODO: Update placeholder value.
      };

      executeRequest(params);
    }

    function executeRequest(params) {
      var request = gapi.client.clouduseraccounts.groups.list(params);
      request.then(function(response) {
        var itemsPage = response.result.items;
        for (var i = 0; i < itemsPage.length; i++) {
          // TODO: Change code below to process each resource in `itemsPage`:
          console.log(itemsPage[i]);
        }

        if (response.result.nextPageToken) {
          params.pageToken = response.result.nextPageToken;
          executeRequest(params);
        }
      }, function(reason) {
        console.error('error: ' + reason.result.error.message);
      });
    }

    function initClient() {
      gapi.client.init({
        'apiKey': '',  // TODO: Update placeholder with desired API key.
        'clientId': '',  // TODO: Update placeholder with desired client ID.
        'scope': 'https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud-platform.read-only https://www.googleapis.com/auth/cloud.useraccounts https://www.googleapis.com/auth/cloud.useraccounts.readonly',
        'discoveryDocs': ['https://content.googleapis.com/discovery/v1/apis/clouduseraccounts/beta/rest'],
      }).then(function() {
        gapi.auth2.getAuthInstance().isSignedIn.listen(updateSignInStatus);
        updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
      });
    }

    function handleClientLoad() {
      gapi.load('client:auth2', initClient);
    }

    function updateSignInStatus(isSignedIn) {
      if (isSignedIn) {
        makeApiCall();
      }
    }

    function handleSignInClick(event) {
      gapi.auth2.getAuthInstance().signIn();
    }

    function handleSignOutClick(event) {
      gapi.auth2.getAuthInstance().signOut();
    }
    </script>
    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
    <button id="signin-button" onclick="handleSignInClick()">Sign in</button>
    <button id="signout-button" onclick="handleSignOutClick()">Sign out</button>
  </body>
</html>
<html>
  <head></head>
  <body>
    <!--
    BEFORE RUNNING:
    ---------------
    1. If not already done, enable the Cloud User Accounts API
       and check the quota for your project at
       https://console.developers.google.com/apis/api/clouduseraccounts
    2. Get access keys for your application. See
       https://developers.google.com/api-client-library/javascript/start/start-js#get-access-keys-for-your-application
    -->
    <script>
    function makeApiCall() {
      var params = {
        // Project ID for this request.
        project: '',  // TODO: Update placeholder value.

        // Name of the group for this request.
        groupName: '',  // TODO: Update placeholder value.
      };

      var groupsRemoveMemberRequestBody = {
        // TODO: Add desired properties to the request body.
      };

      var request = gapi.client.clouduseraccounts.groups.removeMember(params, groupsRemoveMemberRequestBody);
      request.then(function(response) {
        // TODO: Change code below to process the `response` object:
        console.log(response.result);
      }, function(reason) {
        console.error('error: ' + reason.result.error.message);
      });
    }

    function initClient() {
      gapi.client.init({
        'apiKey': '',  // TODO: Update placeholder with desired API key.
        'clientId': '',  // TODO: Update placeholder with desired client ID.
        'scope': 'https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud.useraccounts',
        'discoveryDocs': ['https://content.googleapis.com/discovery/v1/apis/clouduseraccounts/beta/rest'],
      }).then(function() {
        gapi.auth2.getAuthInstance().isSignedIn.listen(updateSignInStatus);
        updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
      });
    }

    function handleClientLoad() {
      gapi.load('client:auth2', initClient);
    }

    function updateSignInStatus(isSignedIn) {
      if (isSignedIn) {
        makeApiCall();
      }
    }

    function handleSignInClick(event) {
      gapi.auth2.getAuthInstance().signIn();
    }

    function handleSignOutClick(event) {
      gapi.auth2.getAuthInstance().signOut();
    }
    </script>
    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
    <button id="signin-button" onclick="handleSignInClick()">Sign in</button>
    <button id="signout-button" onclick="handleSignOutClick()">Sign out</button>
  </body>
</html>
<html>
  <head></head>
  <body>
    <!--
    BEFORE RUNNING:
    ---------------
    1. If not already done, enable the Cloud User Accounts API
       and check the quota for your project at
       https://console.developers.google.com/apis/api/clouduseraccounts
    2. Get access keys for your application. See
       https://developers.google.com/api-client-library/javascript/start/start-js#get-access-keys-for-your-application
    -->
    <script>
    function makeApiCall() {
      var params = {
        // Project ID for this request.
        project: '',  // TODO: Update placeholder value.

        // Name of the zone for this request.
        zone: '',  // TODO: Update placeholder value.

        // The user account for which you want to get a list of authorized public keys.
        user: '',  // TODO: Update placeholder value.

        // The fully-qualified URL of the virtual machine requesting the view.
        instance: '',  // TODO: Update placeholder value.
      };

      var request = gapi.client.clouduseraccounts.linux.getAuthorizedKeysView(params);
      request.then(function(response) {
        // TODO: Change code below to process the `response` object:
        console.log(response.result);
      }, function(reason) {
        console.error('error: ' + reason.result.error.message);
      });
    }

    function initClient() {
      gapi.client.init({
        'apiKey': '',  // TODO: Update placeholder with desired API key.
        'clientId': '',  // TODO: Update placeholder with desired client ID.
        'scope': 'https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud-platform.read-only https://www.googleapis.com/auth/cloud.useraccounts https://www.googleapis.com/auth/cloud.useraccounts.readonly',
        'discoveryDocs': ['https://content.googleapis.com/discovery/v1/apis/clouduseraccounts/beta/rest'],
      }).then(function() {
        gapi.auth2.getAuthInstance().isSignedIn.listen(updateSignInStatus);
        updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
      });
    }

    function handleClientLoad() {
      gapi.load('client:auth2', initClient);
    }

    function updateSignInStatus(isSignedIn) {
      if (isSignedIn) {
        makeApiCall();
      }
    }

    function handleSignInClick(event) {
      gapi.auth2.getAuthInstance().signIn();
    }

    function handleSignOutClick(event) {
      gapi.auth2.getAuthInstance().signOut();
    }
    </script>
    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
    <button id="signin-button" onclick="handleSignInClick()">Sign in</button>
    <button id="signout-button" onclick="handleSignOutClick()">Sign out</button>
  </body>
</html>
<html>
  <head></head>
  <body>
    <!--
    BEFORE RUNNING:
    ---------------
    1. If not already done, enable the Cloud User Accounts API
       and check the quota for your project at
       https://console.developers.google.com/apis/api/clouduseraccounts
    2. Get access keys for your application. See
       https://developers.google.com/api-client-library/javascript/start/start-js#get-access-keys-for-your-application
    -->
    <script>
    function makeApiCall() {
      var params = {
        // Project ID for this request.
        project: '',  // TODO: Update placeholder value.

        // Name of the zone for this request.
        zone: '',  // TODO: Update placeholder value.

        // The fully-qualified URL of the virtual machine requesting the views.
        instance: '',  // TODO: Update placeholder value.
      };

      var request = gapi.client.clouduseraccounts.linux.getLinuxAccountViews(params);
      request.then(function(response) {
        // TODO: Change code below to process the `response` object:
        console.log(response.result);
      }, function(reason) {
        console.error('error: ' + reason.result.error.message);
      });
    }

    function initClient() {
      gapi.client.init({
        'apiKey': '',  // TODO: Update placeholder with desired API key.
        'clientId': '',  // TODO: Update placeholder with desired client ID.
        'scope': 'https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud-platform.read-only https://www.googleapis.com/auth/cloud.useraccounts https://www.googleapis.com/auth/cloud.useraccounts.readonly',
        'discoveryDocs': ['https://content.googleapis.com/discovery/v1/apis/clouduseraccounts/beta/rest'],
      }).then(function() {
        gapi.auth2.getAuthInstance().isSignedIn.listen(updateSignInStatus);
        updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
      });
    }

    function handleClientLoad() {
      gapi.load('client:auth2', initClient);
    }

    function updateSignInStatus(isSignedIn) {
      if (isSignedIn) {
        makeApiCall();
      }
    }

    function handleSignInClick(event) {
      gapi.auth2.getAuthInstance().signIn();
    }

    function handleSignOutClick(event) {
      gapi.auth2.getAuthInstance().signOut();
    }
    </script>
    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
    <button id="signin-button" onclick="handleSignInClick()">Sign in</button>
    <button id="signout-button" onclick="handleSignOutClick()">Sign out</button>
  </body>
</html>
<html>
  <head></head>
  <body>
    <!--
    BEFORE RUNNING:
    ---------------
    1. If not already done, enable the Cloud User Accounts API
       and check the quota for your project at
       https://console.developers.google.com/apis/api/clouduseraccounts
    2. Get access keys for your application. See
       https://developers.google.com/api-client-library/javascript/start/start-js#get-access-keys-for-your-application
    -->
    <script>
    function makeApiCall() {
      var params = {
        // Project ID for this request.
        project: '',  // TODO: Update placeholder value.

        // Name of the user for this request.
        user: '',  // TODO: Update placeholder value.
      };

      var publicKeyBody = {
        // TODO: Add desired properties to the request body.
      };

      var request = gapi.client.clouduseraccounts.users.addPublicKey(params, publicKeyBody);
      request.then(function(response) {
        // TODO: Change code below to process the `response` object:
        console.log(response.result);
      }, function(reason) {
        console.error('error: ' + reason.result.error.message);
      });
    }

    function initClient() {
      gapi.client.init({
        'apiKey': '',  // TODO: Update placeholder with desired API key.
        'clientId': '',  // TODO: Update placeholder with desired client ID.
        'scope': 'https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud.useraccounts',
        'discoveryDocs': ['https://content.googleapis.com/discovery/v1/apis/clouduseraccounts/beta/rest'],
      }).then(function() {
        gapi.auth2.getAuthInstance().isSignedIn.listen(updateSignInStatus);
        updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
      });
    }

    function handleClientLoad() {
      gapi.load('client:auth2', initClient);
    }

    function updateSignInStatus(isSignedIn) {
      if (isSignedIn) {
        makeApiCall();
      }
    }

    function handleSignInClick(event) {
      gapi.auth2.getAuthInstance().signIn();
    }

    function handleSignOutClick(event) {
      gapi.auth2.getAuthInstance().signOut();
    }
    </script>
    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
    <button id="signin-button" onclick="handleSignInClick()">Sign in</button>
    <button id="signout-button" onclick="handleSignOutClick()">Sign out</button>
  </body>
</html>
<html>
  <head></head>
  <body>
    <!--
    BEFORE RUNNING:
    ---------------
    1. If not already done, enable the Cloud User Accounts API
       and check the quota for your project at
       https://console.developers.google.com/apis/api/clouduseraccounts
    2. Get access keys for your application. See
       https://developers.google.com/api-client-library/javascript/start/start-js#get-access-keys-for-your-application
    -->
    <script>
    function makeApiCall() {
      var params = {
        // Project ID for this request.
        project: '',  // TODO: Update placeholder value.

        // Name of the user resource to delete.
        user: '',  // TODO: Update placeholder value.
      };

      var request = gapi.client.clouduseraccounts.users.delete(params);
      request.then(function(response) {
        // TODO: Change code below to process the `response` object:
        console.log(response.result);
      }, function(reason) {
        console.error('error: ' + reason.result.error.message);
      });
    }

    function initClient() {
      gapi.client.init({
        'apiKey': '',  // TODO: Update placeholder with desired API key.
        'clientId': '',  // TODO: Update placeholder with desired client ID.
        'scope': 'https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud.useraccounts',
        'discoveryDocs': ['https://content.googleapis.com/discovery/v1/apis/clouduseraccounts/beta/rest'],
      }).then(function() {
        gapi.auth2.getAuthInstance().isSignedIn.listen(updateSignInStatus);
        updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
      });
    }

    function handleClientLoad() {
      gapi.load('client:auth2', initClient);
    }

    function updateSignInStatus(isSignedIn) {
      if (isSignedIn) {
        makeApiCall();
      }
    }

    function handleSignInClick(event) {
      gapi.auth2.getAuthInstance().signIn();
    }

    function handleSignOutClick(event) {
      gapi.auth2.getAuthInstance().signOut();
    }
    </script>
    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
    <button id="signin-button" onclick="handleSignInClick()">Sign in</button>
    <button id="signout-button" onclick="handleSignOutClick()">Sign out</button>
  </body>
</html>
<html>
  <head></head>
  <body>
    <!--
    BEFORE RUNNING:
    ---------------
    1. If not already done, enable the Cloud User Accounts API
       and check the quota for your project at
       https://console.developers.google.com/apis/api/clouduseraccounts
    2. Get access keys for your application. See
       https://developers.google.com/api-client-library/javascript/start/start-js#get-access-keys-for-your-application
    -->
    <script>
    function makeApiCall() {
      var params = {
        // Project ID for this request.
        project: '',  // TODO: Update placeholder value.

        // Name of the user resource to return.
        user: '',  // TODO: Update placeholder value.
      };

      var request = gapi.client.clouduseraccounts.users.get(params);
      request.then(function(response) {
        // TODO: Change code below to process the `response` object:
        console.log(response.result);
      }, function(reason) {
        console.error('error: ' + reason.result.error.message);
      });
    }

    function initClient() {
      gapi.client.init({
        'apiKey': '',  // TODO: Update placeholder with desired API key.
        'clientId': '',  // TODO: Update placeholder with desired client ID.
        'scope': 'https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud-platform.read-only https://www.googleapis.com/auth/cloud.useraccounts https://www.googleapis.com/auth/cloud.useraccounts.readonly',
        'discoveryDocs': ['https://content.googleapis.com/discovery/v1/apis/clouduseraccounts/beta/rest'],
      }).then(function() {
        gapi.auth2.getAuthInstance().isSignedIn.listen(updateSignInStatus);
        updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
      });
    }

    function handleClientLoad() {
      gapi.load('client:auth2', initClient);
    }

    function updateSignInStatus(isSignedIn) {
      if (isSignedIn) {
        makeApiCall();
      }
    }

    function handleSignInClick(event) {
      gapi.auth2.getAuthInstance().signIn();
    }

    function handleSignOutClick(event) {
      gapi.auth2.getAuthInstance().signOut();
    }
    </script>
    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
    <button id="signin-button" onclick="handleSignInClick()">Sign in</button>
    <button id="signout-button" onclick="handleSignOutClick()">Sign out</button>
  </body>
</html>
<html>
  <head></head>
  <body>
    <!--
    BEFORE RUNNING:
    ---------------
    1. If not already done, enable the Cloud User Accounts API
       and check the quota for your project at
       https://console.developers.google.com/apis/api/clouduseraccounts
    2. Get access keys for your application. See
       https://developers.google.com/api-client-library/javascript/start/start-js#get-access-keys-for-your-application
    -->
    <script>
    function makeApiCall() {
      var params = {
        // Project ID for this request.
        project: '',  // TODO: Update placeholder value.
      };

      var userBody = {
        // TODO: Add desired properties to the request body.
      };

      var request = gapi.client.clouduseraccounts.users.insert(params, userBody);
      request.then(function(response) {
        // TODO: Change code below to process the `response` object:
        console.log(response.result);
      }, function(reason) {
        console.error('error: ' + reason.result.error.message);
      });
    }

    function initClient() {
      gapi.client.init({
        'apiKey': '',  // TODO: Update placeholder with desired API key.
        'clientId': '',  // TODO: Update placeholder with desired client ID.
        'scope': 'https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud.useraccounts',
        'discoveryDocs': ['https://content.googleapis.com/discovery/v1/apis/clouduseraccounts/beta/rest'],
      }).then(function() {
        gapi.auth2.getAuthInstance().isSignedIn.listen(updateSignInStatus);
        updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
      });
    }

    function handleClientLoad() {
      gapi.load('client:auth2', initClient);
    }

    function updateSignInStatus(isSignedIn) {
      if (isSignedIn) {
        makeApiCall();
      }
    }

    function handleSignInClick(event) {
      gapi.auth2.getAuthInstance().signIn();
    }

    function handleSignOutClick(event) {
      gapi.auth2.getAuthInstance().signOut();
    }
    </script>
    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
    <button id="signin-button" onclick="handleSignInClick()">Sign in</button>
    <button id="signout-button" onclick="handleSignOutClick()">Sign out</button>
  </body>
</html>
<html>
  <head></head>
  <body>
    <!--
    BEFORE RUNNING:
    ---------------
    1. If not already done, enable the Cloud User Accounts API
       and check the quota for your project at
       https://console.developers.google.com/apis/api/clouduseraccounts
    2. Get access keys for your application. See
       https://developers.google.com/api-client-library/javascript/start/start-js#get-access-keys-for-your-application
    -->
    <script>
    function makeApiCall() {
      var params = {
        // Project ID for this request.
        project: '',  // TODO: Update placeholder value.
      };

      executeRequest(params);
    }

    function executeRequest(params) {
      var request = gapi.client.clouduseraccounts.users.list(params);
      request.then(function(response) {
        var itemsPage = response.result.items;
        for (var i = 0; i < itemsPage.length; i++) {
          // TODO: Change code below to process each resource in `itemsPage`:
          console.log(itemsPage[i]);
        }

        if (response.result.nextPageToken) {
          params.pageToken = response.result.nextPageToken;
          executeRequest(params);
        }
      }, function(reason) {
        console.error('error: ' + reason.result.error.message);
      });
    }

    function initClient() {
      gapi.client.init({
        'apiKey': '',  // TODO: Update placeholder with desired API key.
        'clientId': '',  // TODO: Update placeholder with desired client ID.
        'scope': 'https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud-platform.read-only https://www.googleapis.com/auth/cloud.useraccounts https://www.googleapis.com/auth/cloud.useraccounts.readonly',
        'discoveryDocs': ['https://content.googleapis.com/discovery/v1/apis/clouduseraccounts/beta/rest'],
      }).then(function() {
        gapi.auth2.getAuthInstance().isSignedIn.listen(updateSignInStatus);
        updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
      });
    }

    function handleClientLoad() {
      gapi.load('client:auth2', initClient);
    }

    function updateSignInStatus(isSignedIn) {
      if (isSignedIn) {
        makeApiCall();
      }
    }

    function handleSignInClick(event) {
      gapi.auth2.getAuthInstance().signIn();
    }

    function handleSignOutClick(event) {
      gapi.auth2.getAuthInstance().signOut();
    }
    </script>
    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
    <button id="signin-button" onclick="handleSignInClick()">Sign in</button>
    <button id="signout-button" onclick="handleSignOutClick()">Sign out</button>
  </body>
</html>
<html>
  <head></head>
  <body>
    <!--
    BEFORE RUNNING:
    ---------------
    1. If not already done, enable the Cloud User Accounts API
       and check the quota for your project at
       https://console.developers.google.com/apis/api/clouduseraccounts
    2. Get access keys for your application. See
       https://developers.google.com/api-client-library/javascript/start/start-js#get-access-keys-for-your-application
    -->
    <script>
    function makeApiCall() {
      var params = {
        // Project ID for this request.
        project: '',  // TODO: Update placeholder value.

        // Name of the user for this request.
        user: '',  // TODO: Update placeholder value.

        // The fingerprint of the public key to delete. Public keys are identified by their fingerprint, which
        // is defined by RFC4716 to be the MD5 digest of the public key.
        fingerprint: '',  // TODO: Update placeholder value.
      };

      var request = gapi.client.clouduseraccounts.users.removePublicKey(params);
      request.then(function(response) {
        // TODO: Change code below to process the `response` object:
        console.log(response.result);
      }, function(reason) {
        console.error('error: ' + reason.result.error.message);
      });
    }

    function initClient() {
      gapi.client.init({
        'apiKey': '',  // TODO: Update placeholder with desired API key.
        'clientId': '',  // TODO: Update placeholder with desired client ID.
        'scope': 'https://www.googleapis.com/auth/cloud-platform https://www.googleapis.com/auth/cloud.useraccounts',
        'discoveryDocs': ['https://content.googleapis.com/discovery/v1/apis/clouduseraccounts/beta/rest'],
      }).then(function() {
        gapi.auth2.getAuthInstance().isSignedIn.listen(updateSignInStatus);
        updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
      });
    }

    function handleClientLoad() {
      gapi.load('client:auth2', initClient);
    }

    function updateSignInStatus(isSignedIn) {
      if (isSignedIn) {
        makeApiCall();
      }
    }

    function handleSignInClick(event) {
      gapi.auth2.getAuthInstance().signIn();
    }

    function handleSignOutClick(event) {
      gapi.auth2.getAuthInstance().signOut();
    }
    </script>
    <script async defer src="https://apis.google.com/js/api.js"
      onload="this.onload=function(){};handleClientLoad()"
      onreadystatechange="if (this.readyState === 'complete') this.onload()">
    </script>
    <button id="signin-button" onclick="handleSignInClick()">Sign in</button>
    <button id="signout-button" onclick="handleSignOutClick()">Sign out</button>
  </body>
</html>
