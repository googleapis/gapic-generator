
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Instance Group Updater API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/replicapoolupdater
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Replicapoolupdater service object for interacting with the API.
$service = new Google_Service_Replicapoolupdater($client);


// TODO: Change placeholders below to desired parameter values for the `cancel` method:

// * The Google Developers Console project name.
$project = '';

// * The name of the zone in which the update's target resides.
$zone = '';

// * The name of the update.
$rollingUpdate = '';


$response = $service->rollingUpdates->cancel($project, $zone, $rollingUpdate);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Instance Group Updater API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/replicapoolupdater
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Replicapoolupdater service object for interacting with the API.
$service = new Google_Service_Replicapoolupdater($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// * The Google Developers Console project name.
$project = '';

// * The name of the zone in which the update's target resides.
$zone = '';

// * The name of the update.
$rollingUpdate = '';


$response = $service->rollingUpdates->get($project, $zone, $rollingUpdate);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Instance Group Updater API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/replicapoolupdater
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Replicapoolupdater service object for interacting with the API.
$service = new Google_Service_Replicapoolupdater($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// * The Google Developers Console project name.
$project = '';

// * The name of the zone in which the update's target resides.
$zone = '';


$Google_Service_Replicapoolupdater_RollingUpdateBody = new Google_Service_Replicapoolupdater_RollingUpdate($client);
// TODO: Assign values to desired properties of the `$Google_Service_Replicapoolupdater_RollingUpdateBody` object.


$response = $service->rollingUpdates->insert($project, $zone, $Google_Service_Replicapoolupdater_RollingUpdateBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Instance Group Updater API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/replicapoolupdater
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Replicapoolupdater service object for interacting with the API.
$service = new Google_Service_Replicapoolupdater($client);


// TODO: Change placeholders below to desired parameter values for the `listRollingUpdates` method:

// * The Google Developers Console project name.
$project = '';

// * The name of the zone in which the update's target resides.
$zone = '';


$optParams = array();
do {
  $response = $service->rollingUpdates->listRollingUpdates($project, $zone, $optParams);

  foreach ($response['items'] as $rolling_update) {
    // TODO: Change code below to process each `rolling_update` resource:
    echo '<pre>', var_export($rolling_update, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Instance Group Updater API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/replicapoolupdater
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Replicapoolupdater service object for interacting with the API.
$service = new Google_Service_Replicapoolupdater($client);


// TODO: Change placeholders below to desired parameter values for the `listInstanceUpdates` method:

// * The Google Developers Console project name.
$project = '';

// * The name of the zone in which the update's target resides.
$zone = '';

// * The name of the update.
$rollingUpdate = '';


$optParams = array();
do {
  $response = $service->rollingUpdates->listInstanceUpdates($project, $zone, $rollingUpdate, $optParams);

  foreach ($response['items'] as $instance_update) {
    // TODO: Change code below to process each `instance_update` resource:
    echo '<pre>', var_export($instance_update, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Instance Group Updater API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/replicapoolupdater
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Replicapoolupdater service object for interacting with the API.
$service = new Google_Service_Replicapoolupdater($client);


// TODO: Change placeholders below to desired parameter values for the `pause` method:

// * The Google Developers Console project name.
$project = '';

// * The name of the zone in which the update's target resides.
$zone = '';

// * The name of the update.
$rollingUpdate = '';


$response = $service->rollingUpdates->pause($project, $zone, $rollingUpdate);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Instance Group Updater API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/replicapoolupdater
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Replicapoolupdater service object for interacting with the API.
$service = new Google_Service_Replicapoolupdater($client);


// TODO: Change placeholders below to desired parameter values for the `resume` method:

// * The Google Developers Console project name.
$project = '';

// * The name of the zone in which the update's target resides.
$zone = '';

// * The name of the update.
$rollingUpdate = '';


$response = $service->rollingUpdates->resume($project, $zone, $rollingUpdate);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Instance Group Updater API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/replicapoolupdater
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Replicapoolupdater service object for interacting with the API.
$service = new Google_Service_Replicapoolupdater($client);


// TODO: Change placeholders below to desired parameter values for the `rollback` method:

// * The Google Developers Console project name.
$project = '';

// * The name of the zone in which the update's target resides.
$zone = '';

// * The name of the update.
$rollingUpdate = '';


$response = $service->rollingUpdates->rollback($project, $zone, $rollingUpdate);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Instance Group Updater API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/replicapoolupdater
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Replicapoolupdater service object for interacting with the API.
$service = new Google_Service_Replicapoolupdater($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// * Name of the project scoping this request.
$project = '';

// * Name of the zone scoping this request.
$zone = '';

// * Name of the operation resource to return.
$operation = '';


$response = $service->zoneOperations->get($project, $zone, $operation);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Instance Group Updater API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/replicapoolupdater
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the Replicapoolupdater service object for interacting with the API.
$service = new Google_Service_Replicapoolupdater($client);


// TODO: Change placeholders below to desired parameter values for the `listZoneOperations` method:

// * Name of the project scoping this request.
$project = '';

// * Name of the zone scoping this request.
$zone = '';


$optParams = array();
do {
  $response = $service->zoneOperations->listZoneOperations($project, $zone, $optParams);

  foreach ($response['items'] as $operation) {
    // TODO: Change code below to process each `operation` resource:
    echo '<pre>', var_export($operation, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
