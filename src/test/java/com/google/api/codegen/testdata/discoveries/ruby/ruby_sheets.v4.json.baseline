
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Sheets API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sheets
# 2. Install the Ruby client library by running `gem install google-api-client`

require 'google/apis/sheets_v4'
require 'json'

service = Google::Apis::SheetsV4::SheetsService.new

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using one of the following scopes:
#   'https://www.googleapis.com/auth/drive'
#   'https://www.googleapis.com/auth/spreadsheets'
service.authorization = nil

# The spreadsheet to apply the updates to.
spreadsheet_id = 'my-spreadsheet-id'  # TODO: Update placeholder value.

# A list of updates to apply to the spreadsheet.
requests = []  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::SheetsV4::BatchUpdateSpreadsheetRequest.new
request_body.requests = requests;

response = service.batch_update_spreadsheet(spreadsheet_id, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Sheets API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sheets
# 2. Install the Ruby client library by running `gem install google-api-client`

require 'google/apis/sheets_v4'
require 'json'

service = Google::Apis::SheetsV4::SheetsService.new

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using one of the following scopes:
#   'https://www.googleapis.com/auth/drive'
#   'https://www.googleapis.com/auth/spreadsheets'
service.authorization = nil

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::SheetsV4::Spreadsheet.new

response = service.create_spreadsheet(request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Sheets API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sheets
# 2. Install the Ruby client library by running `gem install google-api-client`

require 'google/apis/sheets_v4'
require 'json'

service = Google::Apis::SheetsV4::SheetsService.new

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using one of the following scopes:
#   'https://www.googleapis.com/auth/drive'
#   'https://www.googleapis.com/auth/drive.readonly'
#   'https://www.googleapis.com/auth/spreadsheets'
#   'https://www.googleapis.com/auth/spreadsheets.readonly'
service.authorization = nil

# The spreadsheet to request.
spreadsheet_id = 'my-spreadsheet-id'  # TODO: Update placeholder value.

# The ranges to retrieve from the spreadsheet.
ranges = []  # TODO: Update placeholder value.

# True if grid data should be returned.
# This parameter is ignored if a field mask was set in the request.
include_grid_data = false  # TODO: Update placeholder value.

response = service.get_spreadsheet(spreadsheet_id, ranges: ranges, include_grid_data: include_grid_data)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Sheets API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sheets
# 2. Install the Ruby client library by running `gem install google-api-client`

require 'google/apis/sheets_v4'
require 'json'

service = Google::Apis::SheetsV4::SheetsService.new

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using one of the following scopes:
#   'https://www.googleapis.com/auth/drive'
#   'https://www.googleapis.com/auth/spreadsheets'
service.authorization = nil

# The ID of the spreadsheet containing the sheet to copy.
spreadsheet_id = 'my-spreadsheet-id'  # TODO: Update placeholder value.

# The ID of the sheet to copy.
sheet_id = 0  # TODO: Update placeholder value.

# The ID of the spreadsheet to copy the sheet to.
destination_spreadsheet_id = ''  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::SheetsV4::CopySheetToAnotherSpreadsheetRequest.new
request_body.destination_spreadsheet_id = destination_spreadsheet_id;

response = service.copy_spreadsheet(spreadsheet_id, sheet_id, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Sheets API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sheets
# 2. Install the Ruby client library by running `gem install google-api-client`

require 'google/apis/sheets_v4'
require 'json'

service = Google::Apis::SheetsV4::SheetsService.new

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using one of the following scopes:
#   'https://www.googleapis.com/auth/drive'
#   'https://www.googleapis.com/auth/spreadsheets'
service.authorization = nil

# The ID of the spreadsheet to update.
spreadsheet_id = 'my-spreadsheet-id'  # TODO: Update placeholder value.

# The A1 notation of a range to search for a logical table of data.
# Values will be appended after the last row of the table.
range = 'my-range'  # TODO: Update placeholder value.

# How the input data should be interpreted.
value_input_option = ''  # TODO: Update placeholder value.

# How the input data should be inserted.
insert_data_option = ''  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::SheetsV4::ValueRange.new

response = service.append_spreadsheet_value(spreadsheet_id, range, request_body, value_input_option: value_input_option, insert_data_option: insert_data_option)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Sheets API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sheets
# 2. Install the Ruby client library by running `gem install google-api-client`

require 'google/apis/sheets_v4'
require 'json'

service = Google::Apis::SheetsV4::SheetsService.new

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using one of the following scopes:
#   'https://www.googleapis.com/auth/drive'
#   'https://www.googleapis.com/auth/spreadsheets'
service.authorization = nil

# The ID of the spreadsheet to update.
spreadsheet_id = 'my-spreadsheet-id'  # TODO: Update placeholder value.

# The ranges to clear, in A1 notation.
ranges = []  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::SheetsV4::BatchClearValuesRequest.new
request_body.ranges = ranges;

response = service.batch_clear_values(spreadsheet_id, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Sheets API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sheets
# 2. Install the Ruby client library by running `gem install google-api-client`

require 'google/apis/sheets_v4'
require 'json'

service = Google::Apis::SheetsV4::SheetsService.new

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using one of the following scopes:
#   'https://www.googleapis.com/auth/drive'
#   'https://www.googleapis.com/auth/drive.readonly'
#   'https://www.googleapis.com/auth/spreadsheets'
#   'https://www.googleapis.com/auth/spreadsheets.readonly'
service.authorization = nil

# The ID of the spreadsheet to retrieve data from.
spreadsheet_id = 'my-spreadsheet-id'  # TODO: Update placeholder value.

# The A1 notation of the values to retrieve.
ranges = []  # TODO: Update placeholder value.

# How values should be represented in the output.
# The default render option is ValueRenderOption.FORMATTED_VALUE.
value_render_option = ''  # TODO: Update placeholder value.

# How dates, times, and durations should be represented in the output.
# This is ignored if value_render_option is
# FORMATTED_VALUE.
# The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
date_time_render_option = ''  # TODO: Update placeholder value.

response = service.batch_get_spreadsheet_values(spreadsheet_id, ranges: ranges, value_render_option: value_render_option, date_time_render_option: date_time_render_option)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Sheets API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sheets
# 2. Install the Ruby client library by running `gem install google-api-client`

require 'google/apis/sheets_v4'
require 'json'

service = Google::Apis::SheetsV4::SheetsService.new

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using one of the following scopes:
#   'https://www.googleapis.com/auth/drive'
#   'https://www.googleapis.com/auth/spreadsheets'
service.authorization = nil

# The ID of the spreadsheet to update.
spreadsheet_id = 'my-spreadsheet-id'  # TODO: Update placeholder value.

# How the input data should be interpreted.
value_input_option = ''  # TODO: Update placeholder value.

# The new values to apply to the spreadsheet.
data = []  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::SheetsV4::BatchUpdateValuesRequest.new
request_body.value_input_option = value_input_option;
request_body.data = data;

response = service.batch_update_values(spreadsheet_id, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Sheets API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sheets
# 2. Install the Ruby client library by running `gem install google-api-client`

require 'google/apis/sheets_v4'
require 'json'

service = Google::Apis::SheetsV4::SheetsService.new

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using one of the following scopes:
#   'https://www.googleapis.com/auth/drive'
#   'https://www.googleapis.com/auth/spreadsheets'
service.authorization = nil

# The ID of the spreadsheet to update.
spreadsheet_id = 'my-spreadsheet-id'  # TODO: Update placeholder value.

# The A1 notation of the values to clear.
range = 'my-range'  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`:
request_body = Google::Apis::SheetsV4::ClearValuesRequest.new

response = service.clear_values(spreadsheet_id, range, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Sheets API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sheets
# 2. Install the Ruby client library by running `gem install google-api-client`

require 'google/apis/sheets_v4'
require 'json'

service = Google::Apis::SheetsV4::SheetsService.new

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using one of the following scopes:
#   'https://www.googleapis.com/auth/drive'
#   'https://www.googleapis.com/auth/drive.readonly'
#   'https://www.googleapis.com/auth/spreadsheets'
#   'https://www.googleapis.com/auth/spreadsheets.readonly'
service.authorization = nil

# The ID of the spreadsheet to retrieve data from.
spreadsheet_id = 'my-spreadsheet-id'  # TODO: Update placeholder value.

# The A1 notation of the values to retrieve.
range = 'my-range'  # TODO: Update placeholder value.

# How values should be represented in the output.
# The default render option is ValueRenderOption.FORMATTED_VALUE.
value_render_option = ''  # TODO: Update placeholder value.

# How dates, times, and durations should be represented in the output.
# This is ignored if value_render_option is
# FORMATTED_VALUE.
# The default dateTime render option is [DateTimeRenderOption.SERIAL_NUMBER].
date_time_render_option = ''  # TODO: Update placeholder value.

response = service.get_spreadsheet_values(spreadsheet_id, range, value_render_option: value_render_option, date_time_render_option: date_time_render_option)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Sheets API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/sheets
# 2. Install the Ruby client library by running `gem install google-api-client`

require 'google/apis/sheets_v4'
require 'json'

service = Google::Apis::SheetsV4::SheetsService.new

# TODO: Change placeholder below to generate authentication credentials. See
# https://foo.com/bar
#
# Authorize using one of the following scopes:
#   'https://www.googleapis.com/auth/drive'
#   'https://www.googleapis.com/auth/spreadsheets'
service.authorization = nil

# The ID of the spreadsheet to update.
spreadsheet_id = 'my-spreadsheet-id'  # TODO: Update placeholder value.

# The A1 notation of the values to update.
range = 'my-range'  # TODO: Update placeholder value.

# How the input data should be interpreted.
value_input_option = ''  # TODO: Update placeholder value.

# TODO: Assign values to desired members of `request_body`. All existing
# members will be replaced:
request_body = Google::Apis::SheetsV4::ValueRange.new

response = service.update_spreadsheet_value(spreadsheet_id, range, request_body, value_input_option: value_input_option)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
