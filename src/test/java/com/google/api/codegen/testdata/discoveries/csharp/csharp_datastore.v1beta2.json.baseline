
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API and check quota for your project at
//    https://console.developers.google.com/apis/api/datastore_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Datastore.v1beta2;
using Google.Apis.Datastore.v1beta2.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace DatastoreSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DatastoreService datastoreService = new DatastoreService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the AllocateIds() method:
            // Identifies the dataset.
            string datasetId = "";

            // TODO Add code to assign values to fields of 'content'.
            AllocateIdsRequest content = new AllocateIdsRequest();

            DatasetsResource.AllocateIdsRequest request = datastoreService.Datasets.AllocateIds(content, datasetId);
            AllocateIdsResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // AllocateIdsResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API and check quota for your project at
//    https://console.developers.google.com/apis/api/datastore_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Datastore.v1beta2;
using Google.Apis.Datastore.v1beta2.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace DatastoreSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DatastoreService datastoreService = new DatastoreService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the BeginTransaction() method:
            // Identifies the dataset.
            string datasetId = "";

            // TODO Add code to assign values to fields of 'content'.
            BeginTransactionRequest content = new BeginTransactionRequest();

            DatasetsResource.BeginTransactionRequest request = datastoreService.Datasets.BeginTransaction(content, datasetId);
            BeginTransactionResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // BeginTransactionResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API and check quota for your project at
//    https://console.developers.google.com/apis/api/datastore_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Datastore.v1beta2;
using Google.Apis.Datastore.v1beta2.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace DatastoreSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DatastoreService datastoreService = new DatastoreService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Commit() method:
            // Identifies the dataset.
            string datasetId = "";

            // TODO Add code to assign values to fields of 'content'.
            CommitRequest content = new CommitRequest();

            DatasetsResource.CommitRequest request = datastoreService.Datasets.Commit(content, datasetId);
            CommitResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // CommitResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API and check quota for your project at
//    https://console.developers.google.com/apis/api/datastore_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Datastore.v1beta2;
using Google.Apis.Datastore.v1beta2.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace DatastoreSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DatastoreService datastoreService = new DatastoreService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Lookup() method:
            // Identifies the dataset.
            string datasetId = "";

            // TODO Add code to assign values to fields of 'content'.
            LookupRequest content = new LookupRequest();

            DatasetsResource.LookupRequest request = datastoreService.Datasets.Lookup(content, datasetId);
            LookupResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // LookupResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API and check quota for your project at
//    https://console.developers.google.com/apis/api/datastore_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Datastore.v1beta2;
using Google.Apis.Datastore.v1beta2.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace DatastoreSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DatastoreService datastoreService = new DatastoreService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Rollback() method:
            // Identifies the dataset.
            string datasetId = "";

            // TODO Add code to assign values to fields of 'content'.
            RollbackRequest content = new RollbackRequest();

            DatasetsResource.RollbackRequest request = datastoreService.Datasets.Rollback(content, datasetId);
            RollbackResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // RollbackResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API and check quota for your project at
//    https://console.developers.google.com/apis/api/datastore_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Datastore.v1beta2;
using Google.Apis.Datastore.v1beta2.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace DatastoreSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DatastoreService datastoreService = new DatastoreService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the RunQuery() method:
            // Identifies the dataset.
            string datasetId = "";

            // TODO Add code to assign values to fields of 'content'.
            RunQueryRequest content = new RunQueryRequest();

            DatasetsResource.RunQueryRequest request = datastoreService.Datasets.RunQuery(content, datasetId);
            RunQueryResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // RunQueryResponse response = await request.ExecuteAsync();
        }
    }
}
