
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Datastore.v1beta2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Datastore.v1beta2.Data;


namespace DatastoreSample
{
    public class DatastoreServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the datastore service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            DatastoreService datastoreService = new DatastoreService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


<<<<<<< 51f8f4f3d39d21fcc22dbbe6f829c792246e560f
            // Identifies the dataset.
            string datasetId = "{MY-DATASET-ID}";
=======
            // TODO: Change placeholders below to desired parameter values for the `AllocateIds` method:

            // * Identifies the dataset.
            string datasetId = "";
>>>>>>> Update discovery sample gen across languages.


            Data.AllocateIdsRequest requestBody = new Data.AllocateIdsRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            DatasetsResource.AllocateIdsRequest request = datastoreService.Datasets.AllocateIds(requestBody, datasetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.AllocateIdsResponse response = request.Execute();
            // Data.AllocateIdsResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Datastore.v1beta2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Datastore.v1beta2.Data;


namespace DatastoreSample
{
    public class DatastoreServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the datastore service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            DatastoreService datastoreService = new DatastoreService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


<<<<<<< 51f8f4f3d39d21fcc22dbbe6f829c792246e560f
            // Identifies the dataset.
            string datasetId = "{MY-DATASET-ID}";
=======
            // TODO: Change placeholders below to desired parameter values for the `BeginTransaction` method:

            // * Identifies the dataset.
            string datasetId = "";
>>>>>>> Update discovery sample gen across languages.


            Data.BeginTransactionRequest requestBody = new Data.BeginTransactionRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            DatasetsResource.BeginTransactionRequest request = datastoreService.Datasets.BeginTransaction(requestBody, datasetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.BeginTransactionResponse response = request.Execute();
            // Data.BeginTransactionResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Datastore.v1beta2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Datastore.v1beta2.Data;


namespace DatastoreSample
{
    public class DatastoreServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the datastore service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            DatastoreService datastoreService = new DatastoreService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


<<<<<<< 51f8f4f3d39d21fcc22dbbe6f829c792246e560f
            // Identifies the dataset.
            string datasetId = "{MY-DATASET-ID}";
=======
            // TODO: Change placeholders below to desired parameter values for the `Commit` method:

            // * Identifies the dataset.
            string datasetId = "";
>>>>>>> Update discovery sample gen across languages.


            Data.CommitRequest requestBody = new Data.CommitRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            DatasetsResource.CommitRequest request = datastoreService.Datasets.Commit(requestBody, datasetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.CommitResponse response = request.Execute();
            // Data.CommitResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Datastore.v1beta2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Datastore.v1beta2.Data;


namespace DatastoreSample
{
    public class DatastoreServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the datastore service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            DatastoreService datastoreService = new DatastoreService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


<<<<<<< 51f8f4f3d39d21fcc22dbbe6f829c792246e560f
            // Identifies the dataset.
            string datasetId = "{MY-DATASET-ID}";
=======
            // TODO: Change placeholders below to desired parameter values for the `Lookup` method:

            // * Identifies the dataset.
            string datasetId = "";
>>>>>>> Update discovery sample gen across languages.


            Data.LookupRequest requestBody = new Data.LookupRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            DatasetsResource.LookupRequest request = datastoreService.Datasets.Lookup(requestBody, datasetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.LookupResponse response = request.Execute();
            // Data.LookupResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Datastore.v1beta2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Datastore.v1beta2.Data;


namespace DatastoreSample
{
    public class DatastoreServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the datastore service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            DatastoreService datastoreService = new DatastoreService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


<<<<<<< 51f8f4f3d39d21fcc22dbbe6f829c792246e560f
            // Identifies the dataset.
            string datasetId = "{MY-DATASET-ID}";
=======
            // TODO: Change placeholders below to desired parameter values for the `Rollback` method:

            // * Identifies the dataset.
            string datasetId = "";
>>>>>>> Update discovery sample gen across languages.


            Data.RollbackRequest requestBody = new Data.RollbackRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            DatasetsResource.RollbackRequest request = datastoreService.Datasets.Rollback(requestBody, datasetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.RollbackResponse response = request.Execute();
            // Data.RollbackResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Datastore API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/datastore
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Datastore.v1beta2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Datastore.v1beta2.Data;


namespace DatastoreSample
{
    public class DatastoreServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the datastore service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            DatastoreService datastoreService = new DatastoreService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


<<<<<<< 51f8f4f3d39d21fcc22dbbe6f829c792246e560f
            // Identifies the dataset.
            string datasetId = "{MY-DATASET-ID}";
=======
            // TODO: Change placeholders below to desired parameter values for the `RunQuery` method:

            // * Identifies the dataset.
            string datasetId = "";
>>>>>>> Update discovery sample gen across languages.


            Data.RunQueryRequest requestBody = new Data.RunQueryRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            DatasetsResource.RunQueryRequest request = datastoreService.Datasets.RunQuery(requestBody, datasetId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.RunQueryResponse response = request.Execute();
            // Data.RunQueryResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
