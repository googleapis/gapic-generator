
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Autoscaler API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/autoscaler
2. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from pprint import pprint

from googleapiclient import discovery

def get_auth():
  # TODO: Implement this function to get authentication credentials.
  # See https://foo.com/bar
  return None

# Authorize using one of the following scopes in order to use this method:
#   https://www.googleapis.com/auth/compute
credentials = get_auth()

# Construct the autoscaler service object (version v1beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('autoscaler', 'v1beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID of Autoscaler resource.
project = '{MY-PROJECT}'

# * Zone name of Autoscaler resource.
zone = '{MY-ZONE}'

# * Name of the Autoscaler resource.
autoscaler = '{MY-AUTOSCALER}'

request = service.autoscalers().delete(project=project, zone=zone, autoscaler=autoscaler)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Autoscaler API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/autoscaler
2. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from pprint import pprint

from googleapiclient import discovery

def get_auth():
  # TODO: Implement this function to get authentication credentials.
  # See https://foo.com/bar
  return None

# Authorize using one of the following scopes in order to use this method:
#   https://www.googleapis.com/auth/compute
#   https://www.googleapis.com/auth/compute.readonly
credentials = get_auth()

# Construct the autoscaler service object (version v1beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('autoscaler', 'v1beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID of Autoscaler resource.
project = '{MY-PROJECT}'

# * Zone name of Autoscaler resource.
zone = '{MY-ZONE}'

# * Name of the Autoscaler resource.
autoscaler = '{MY-AUTOSCALER}'

request = service.autoscalers().get(project=project, zone=zone, autoscaler=autoscaler)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Autoscaler API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/autoscaler
2. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from pprint import pprint

from googleapiclient import discovery

def get_auth():
  # TODO: Implement this function to get authentication credentials.
  # See https://foo.com/bar
  return None

# Authorize using one of the following scopes in order to use this method:
#   https://www.googleapis.com/auth/compute
credentials = get_auth()

# Construct the autoscaler service object (version v1beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('autoscaler', 'v1beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID of Autoscaler resource.
project = '{MY-PROJECT}'

# * Zone name of Autoscaler resource.
zone = '{MY-ZONE}'

autoscaler_body = {
# TODO: Add desired entries of the 'autoscaler_body' dict
}

request = service.autoscalers().insert(project=project, zone=zone, body=autoscaler_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Autoscaler API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/autoscaler
2. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from googleapiclient import discovery

def get_auth():
  # TODO: Implement this function to get authentication credentials.
  # See https://foo.com/bar
  return None

# Authorize using one of the following scopes in order to use this method:
#   https://www.googleapis.com/auth/compute
#   https://www.googleapis.com/auth/compute.readonly
credentials = get_auth()

# Construct the autoscaler service object (version v1beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('autoscaler', 'v1beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID of Autoscaler resource.
project = '{MY-PROJECT}'

# * Zone name of Autoscaler resource.
zone = '{MY-ZONE}'

autoscalers = service.autoscalers()
request = autoscalers.list(project=project, zone=zone)
while request is not None:
    response = request.execute()

    for autoscaler in response['items']:
        # TODO: Add code here to process each 'autoscaler' resource

    request = autoscalers.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Autoscaler API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/autoscaler
2. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from pprint import pprint

from googleapiclient import discovery

def get_auth():
  # TODO: Implement this function to get authentication credentials.
  # See https://foo.com/bar
  return None

# Authorize using one of the following scopes in order to use this method:
#   https://www.googleapis.com/auth/compute
credentials = get_auth()

# Construct the autoscaler service object (version v1beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('autoscaler', 'v1beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'patch' method:

# * Project ID of Autoscaler resource.
project = '{MY-PROJECT}'

# * Zone name of Autoscaler resource.
zone = '{MY-ZONE}'

# * Name of the Autoscaler resource.
autoscaler = '{MY-AUTOSCALER}'

autoscaler_body = {
# TODO: Add desired entries of the 'autoscaler_body' dict to be changed
}

request = service.autoscalers().patch(project=project, zone=zone, autoscaler=autoscaler, body=autoscaler_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Autoscaler API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/autoscaler
2. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from pprint import pprint

from googleapiclient import discovery

def get_auth():
  # TODO: Implement this function to get authentication credentials.
  # See https://foo.com/bar
  return None

# Authorize using one of the following scopes in order to use this method:
#   https://www.googleapis.com/auth/compute
credentials = get_auth()

# Construct the autoscaler service object (version v1beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('autoscaler', 'v1beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'update' method:

# * Project ID of Autoscaler resource.
project = '{MY-PROJECT}'

# * Zone name of Autoscaler resource.
zone = '{MY-ZONE}'

# * Name of the Autoscaler resource.
autoscaler = '{MY-AUTOSCALER}'

autoscaler_body = {
# TODO: Add desired entries of the 'autoscaler_body' dict
}

request = service.autoscalers().update(project=project, zone=zone, autoscaler=autoscaler, body=autoscaler_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Autoscaler API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/autoscaler
2. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from googleapiclient import discovery

def get_auth():
  # TODO: Implement this function to get authentication credentials.
  # See https://foo.com/bar
  return None

# Authorize using one of the following scopes in order to use this method:
#   https://www.googleapis.com/auth/compute
credentials = get_auth()

# Construct the autoscaler service object (version v1beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('autoscaler', 'v1beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:


project = '{MY-PROJECT}'


zone = '{MY-ZONE}'


operation = '{MY-OPERATION}'

request = service.zoneOperations().delete(project=project, zone=zone, operation=operation)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Autoscaler API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/autoscaler
2. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from pprint import pprint

from googleapiclient import discovery

def get_auth():
  # TODO: Implement this function to get authentication credentials.
  # See https://foo.com/bar
  return None

# Authorize using one of the following scopes in order to use this method:
#   https://www.googleapis.com/auth/compute
#   https://www.googleapis.com/auth/compute.readonly
credentials = get_auth()

# Construct the autoscaler service object (version v1beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('autoscaler', 'v1beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:


project = '{MY-PROJECT}'


zone = '{MY-ZONE}'


operation = '{MY-OPERATION}'

request = service.zoneOperations().get(project=project, zone=zone, operation=operation)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Autoscaler API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/autoscaler
2. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from googleapiclient import discovery

def get_auth():
  # TODO: Implement this function to get authentication credentials.
  # See https://foo.com/bar
  return None

# Authorize using one of the following scopes in order to use this method:
#   https://www.googleapis.com/auth/compute
#   https://www.googleapis.com/auth/compute.readonly
credentials = get_auth()

# Construct the autoscaler service object (version v1beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('autoscaler', 'v1beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:


project = '{MY-PROJECT}'


zone = '{MY-ZONE}'

zoneOperations = service.zoneOperations()
request = zoneOperations.list(project=project, zone=zone)
while request is not None:
    response = request.execute()

    for operation in response['items']:
        # TODO: Add code here to process each 'operation' resource

    request = zoneOperations.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Autoscaler API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/autoscaler
2. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from googleapiclient import discovery

def get_auth():
  # TODO: Implement this function to get authentication credentials.
  # See https://foo.com/bar
  return None

# Authorize using one of the following scopes in order to use this method:
#   https://www.googleapis.com/auth/compute
#   https://www.googleapis.com/auth/compute.readonly
credentials = get_auth()

# Construct the autoscaler service object (version v1beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('autoscaler', 'v1beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:


project = '{MY-PROJECT}'

zones = service.zones()
request = zones.list(project=project)
while request is not None:
    response = request.execute()

    for zone in response['items']:
        # TODO: Add code here to process each 'zone' resource

    request = zones.list_next(previous_request=request, previous_response=response)
