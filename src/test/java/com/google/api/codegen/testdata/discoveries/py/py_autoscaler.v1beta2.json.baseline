
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Autoscaler API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/autoscaler
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('autoscaler', 'v1beta2', credentials=credentials)

# Project ID of Autoscaler resource.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Zone name of Autoscaler resource.
zone = '{MY-ZONE}'  # TODO: Update placeholder value(s).

# Name of the Autoscaler resource.
autoscaler = '{MY-AUTOSCALER}'  # TODO: Update placeholder value(s).

request = service.autoscalers().delete(project=project, zone=zone, autoscaler=autoscaler)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Autoscaler API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/autoscaler
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('autoscaler', 'v1beta2', credentials=credentials)

# Project ID of Autoscaler resource.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Zone name of Autoscaler resource.
zone = '{MY-ZONE}'  # TODO: Update placeholder value(s).

# Name of the Autoscaler resource.
autoscaler = '{MY-AUTOSCALER}'  # TODO: Update placeholder value(s).

request = service.autoscalers().get(project=project, zone=zone, autoscaler=autoscaler)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Autoscaler API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/autoscaler
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('autoscaler', 'v1beta2', credentials=credentials)

# Project ID of Autoscaler resource.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Zone name of Autoscaler resource.
zone = '{MY-ZONE}'  # TODO: Update placeholder value(s).

autoscaler_body = {
    # TODO: Add the desired entries.
}


request = service.autoscalers().insert(project=project, zone=zone, body=autoscaler_body)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Autoscaler API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/autoscaler
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('autoscaler', 'v1beta2', credentials=credentials)

# Project ID of Autoscaler resource.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Zone name of Autoscaler resource.
zone = '{MY-ZONE}'  # TODO: Update placeholder value(s).

autoscalers = service.autoscalers()
request = autoscalers.list(project=project, zone=zone)
while request is not None:
    response = request.execute()

    for autoscaler in response['items']:
        # TODO: Use autoscaler
        pprint(autoscaler)

    request = autoscalers.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Autoscaler API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/autoscaler
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('autoscaler', 'v1beta2', credentials=credentials)

# Project ID of Autoscaler resource.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Zone name of Autoscaler resource.
zone = '{MY-ZONE}'  # TODO: Update placeholder value(s).

# Name of the Autoscaler resource.
autoscaler = '{MY-AUTOSCALER}'  # TODO: Update placeholder value(s).

autoscaler_body = {
    # TODO: Add the desired entries to be changed.
}


request = service.autoscalers().patch(project=project, zone=zone, autoscaler=autoscaler, body=autoscaler_body)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Autoscaler API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/autoscaler
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('autoscaler', 'v1beta2', credentials=credentials)

# Project ID of Autoscaler resource.
project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

# Zone name of Autoscaler resource.
zone = '{MY-ZONE}'  # TODO: Update placeholder value(s).

# Name of the Autoscaler resource.
autoscaler = '{MY-AUTOSCALER}'  # TODO: Update placeholder value(s).

autoscaler_body = {
    # TODO: Add the desired entries.
}


request = service.autoscalers().update(project=project, zone=zone, autoscaler=autoscaler, body=autoscaler_body)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Autoscaler API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/autoscaler
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('autoscaler', 'v1beta2', credentials=credentials)


project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).


zone = '{MY-ZONE}'  # TODO: Update placeholder value(s). eg. 'us-central1-f'


operation = '{MY-OPERATION}'  # TODO: Update placeholder value(s).

request = service.zoneOperations().delete(project=project, zone=zone, operation=operation)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Autoscaler API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/autoscaler
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('autoscaler', 'v1beta2', credentials=credentials)


project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).


zone = '{MY-ZONE}'  # TODO: Update placeholder value(s). eg. 'us-central1-f'


operation = '{MY-OPERATION}'  # TODO: Update placeholder value(s).

request = service.zoneOperations().get(project=project, zone=zone, operation=operation)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Autoscaler API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/autoscaler
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('autoscaler', 'v1beta2', credentials=credentials)


project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).


zone = '{MY-ZONE}'  # TODO: Update placeholder value(s). eg. 'us-central1-f'

zoneOperations = service.zoneOperations()
request = zoneOperations.list(project=project, zone=zone)
while request is not None:
    response = request.execute()

    for operation in response['items']:
        # TODO: Use operation
        pprint(operation)

    request = zoneOperations.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Compute Engine Autoscaler API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/autoscaler
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('autoscaler', 'v1beta2', credentials=credentials)


project = '{MY-PROJECT}'  # TODO: Update placeholder value(s).

zones = service.zones()
request = zones.list(project=project)
while request is not None:
    response = request.execute()

    for zone in response['items']:
        # TODO: Use zone
        pprint(zone)

    request = zones.list_next(previous_request=request, previous_response=response)
