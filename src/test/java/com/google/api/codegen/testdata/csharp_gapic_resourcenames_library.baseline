============== file: /ResourceNames.cs ==============
// Copyright 2017, Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated code. DO NOT EDIT!

using Google.Api.Gax;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Google.Example.Library.V1
{
    /// <summary>
    /// Resource name for the 'shelf' resource.
    /// </summary>
    public sealed partial class ShelfName : IResourceName, IEquatable<ShelfName>
    {
        private static readonly PathTemplate s_template = new PathTemplate("shelves/{shelf_id}");

        /// <summary>
        /// Parses the given shelf resource name in string form into a new
        /// <see cref="ShelfName"/> instance.
        /// </summary>
        /// <param name="shelfName">The shelf resource name in string form. Must not be <c>null</c>.</param>
        /// <returns>The parsed <see cref="ShelfName"/> if successful.</returns>
        public static ShelfName Parse(string shelfName)
        {
            GaxPreconditions.CheckNotNull(shelfName, nameof(shelfName));
            TemplatedResourceName resourceName = s_template.ParseName(shelfName);
            return new ShelfName(resourceName[0]);
        }

        /// <summary>
        /// Tries to parse the given shelf resource name in string form into a new
        /// <see cref="ShelfName"/> instance.
        /// </summary>
        /// <remarks>
        /// This method still throws <see cref="ArgumentNullException"/> if <paramref name="shelfName"/> is null,
        /// as this would usually indicate a programming error rather than a data error.
        /// </remarks>
        /// <param name="shelfName">The shelf resource name in string form. Must not be <c>null</c>.</param>
        /// <param name="result">When this method returns, the parsed <see cref="ShelfName"/>,
        /// or <c>null</c> if parsing fails.</param>
        /// <returns><c>true</c> if the name was parsed succssfully; <c>false</c> otherwise.</returns>
        public static bool TryParse(string shelfName, out ShelfName result)
        {
            GaxPreconditions.CheckNotNull(shelfName, nameof(shelfName));
            TemplatedResourceName resourceName;
            if (s_template.TryParseName(shelfName, out resourceName))
            {
                result = new ShelfName(resourceName[0]);
                return true;
            }
            else
            {
                result = null;
                return false;
            }
        }

        /// <summary>
        /// Constructs a new instance of the <see cref="ShelfName"/> resource name class
        /// from its component parts.
        /// </summary>
        /// <param name="shelfId">The shelf ID. Must not be <c>null</c>.</param>
        public ShelfName(string shelfId)
        {
            ShelfId = GaxPreconditions.CheckNotNull(shelfId, nameof(shelfId));
        }

        /// <summary>
        /// The shelf ID. Never <c>null</c>.
        /// </summary>
        public string ShelfId { get; }

        /// <inheritdoc />
        public ResourceNameKind Kind => ResourceNameKind.Simple;

        /// <inheritdoc />
        public override string ToString() => s_template.Expand(ShelfId);

        /// <inheritdoc />
        public override int GetHashCode() => ToString().GetHashCode();

        /// <inheritdoc />
        public override bool Equals(object obj) => Equals(obj as ShelfName);

        /// <inheritdoc />
        public bool Equals(ShelfName other) => ToString() == other?.ToString();

        /// <inheritdoc />
        public static bool operator ==(ShelfName a, ShelfName b) => ReferenceEquals(a, b) || (a?.Equals(b) ?? false);

        /// <inheritdoc />
        public static bool operator !=(ShelfName a, ShelfName b) => !(a == b);
    }

    /// <summary>
    /// Resource name for the 'archived_book' resource.
    /// </summary>
    public sealed partial class ArchivedBookName : IResourceName, IEquatable<ArchivedBookName>
    {
        private static readonly PathTemplate s_template = new PathTemplate("archives/{archive_path}/books/{book_id=**}");

        /// <summary>
        /// Parses the given archived_book resource name in string form into a new
        /// <see cref="ArchivedBookName"/> instance.
        /// </summary>
        /// <param name="archivedBookName">The archived_book resource name in string form. Must not be <c>null</c>.</param>
        /// <returns>The parsed <see cref="ArchivedBookName"/> if successful.</returns>
        public static ArchivedBookName Parse(string archivedBookName)
        {
            GaxPreconditions.CheckNotNull(archivedBookName, nameof(archivedBookName));
            TemplatedResourceName resourceName = s_template.ParseName(archivedBookName);
            return new ArchivedBookName(resourceName[0], resourceName[1]);
        }

        /// <summary>
        /// Tries to parse the given archived_book resource name in string form into a new
        /// <see cref="ArchivedBookName"/> instance.
        /// </summary>
        /// <remarks>
        /// This method still throws <see cref="ArgumentNullException"/> if <paramref name="archivedBookName"/> is null,
        /// as this would usually indicate a programming error rather than a data error.
        /// </remarks>
        /// <param name="archivedBookName">The archived_book resource name in string form. Must not be <c>null</c>.</param>
        /// <param name="result">When this method returns, the parsed <see cref="ArchivedBookName"/>,
        /// or <c>null</c> if parsing fails.</param>
        /// <returns><c>true</c> if the name was parsed succssfully; <c>false</c> otherwise.</returns>
        public static bool TryParse(string archivedBookName, out ArchivedBookName result)
        {
            GaxPreconditions.CheckNotNull(archivedBookName, nameof(archivedBookName));
            TemplatedResourceName resourceName;
            if (s_template.TryParseName(archivedBookName, out resourceName))
            {
                result = new ArchivedBookName(resourceName[0], resourceName[1]);
                return true;
            }
            else
            {
                result = null;
                return false;
            }
        }

        /// <summary>
        /// Constructs a new instance of the <see cref="ArchivedBookName"/> resource name class
        /// from its component parts.
        /// </summary>
        /// <param name="archivePathId">The archivePath ID. Must not be <c>null</c>.</param>
        /// <param name="bookId">The book ID. Must not be <c>null</c>.</param>
        public ArchivedBookName(string archivePathId, string bookId)
        {
            ArchivePathId = GaxPreconditions.CheckNotNull(archivePathId, nameof(archivePathId));
            BookId = GaxPreconditions.CheckNotNull(bookId, nameof(bookId));
        }

        /// <summary>
        /// The archivePath ID. Never <c>null</c>.
        /// </summary>
        public string ArchivePathId { get; }

        /// <summary>
        /// The book ID. Never <c>null</c>.
        /// </summary>
        public string BookId { get; }

        /// <inheritdoc />
        public ResourceNameKind Kind => ResourceNameKind.Simple;

        /// <inheritdoc />
        public override string ToString() => s_template.Expand(ArchivePathId, BookId);

        /// <inheritdoc />
        public override int GetHashCode() => ToString().GetHashCode();

        /// <inheritdoc />
        public override bool Equals(object obj) => Equals(obj as ArchivedBookName);

        /// <inheritdoc />
        public bool Equals(ArchivedBookName other) => ToString() == other?.ToString();

        /// <inheritdoc />
        public static bool operator ==(ArchivedBookName a, ArchivedBookName b) => ReferenceEquals(a, b) || (a?.Equals(b) ?? false);

        /// <inheritdoc />
        public static bool operator !=(ArchivedBookName a, ArchivedBookName b) => !(a == b);
    }

    /// <summary>
    /// Resource name for the 'book' resource.
    /// </summary>
    public sealed partial class BookName : IResourceName, IEquatable<BookName>
    {
        private static readonly PathTemplate s_template = new PathTemplate("shelves/{shelf_id}/books/{book_id}");

        /// <summary>
        /// Parses the given book resource name in string form into a new
        /// <see cref="BookName"/> instance.
        /// </summary>
        /// <param name="bookName">The book resource name in string form. Must not be <c>null</c>.</param>
        /// <returns>The parsed <see cref="BookName"/> if successful.</returns>
        public static BookName Parse(string bookName)
        {
            GaxPreconditions.CheckNotNull(bookName, nameof(bookName));
            TemplatedResourceName resourceName = s_template.ParseName(bookName);
            return new BookName(resourceName[0], resourceName[1]);
        }

        /// <summary>
        /// Tries to parse the given book resource name in string form into a new
        /// <see cref="BookName"/> instance.
        /// </summary>
        /// <remarks>
        /// This method still throws <see cref="ArgumentNullException"/> if <paramref name="bookName"/> is null,
        /// as this would usually indicate a programming error rather than a data error.
        /// </remarks>
        /// <param name="bookName">The book resource name in string form. Must not be <c>null</c>.</param>
        /// <param name="result">When this method returns, the parsed <see cref="BookName"/>,
        /// or <c>null</c> if parsing fails.</param>
        /// <returns><c>true</c> if the name was parsed succssfully; <c>false</c> otherwise.</returns>
        public static bool TryParse(string bookName, out BookName result)
        {
            GaxPreconditions.CheckNotNull(bookName, nameof(bookName));
            TemplatedResourceName resourceName;
            if (s_template.TryParseName(bookName, out resourceName))
            {
                result = new BookName(resourceName[0], resourceName[1]);
                return true;
            }
            else
            {
                result = null;
                return false;
            }
        }

        /// <summary>
        /// Constructs a new instance of the <see cref="BookName"/> resource name class
        /// from its component parts.
        /// </summary>
        /// <param name="shelfId">The shelf ID. Must not be <c>null</c>.</param>
        /// <param name="bookId">The book ID. Must not be <c>null</c>.</param>
        public BookName(string shelfId, string bookId)
        {
            ShelfId = GaxPreconditions.CheckNotNull(shelfId, nameof(shelfId));
            BookId = GaxPreconditions.CheckNotNull(bookId, nameof(bookId));
        }

        /// <summary>
        /// The shelf ID. Never <c>null</c>.
        /// </summary>
        public string ShelfId { get; }

        /// <summary>
        /// The book ID. Never <c>null</c>.
        /// </summary>
        public string BookId { get; }

        /// <inheritdoc />
        public ResourceNameKind Kind => ResourceNameKind.Simple;

        /// <inheritdoc />
        public override string ToString() => s_template.Expand(ShelfId, BookId);

        /// <inheritdoc />
        public override int GetHashCode() => ToString().GetHashCode();

        /// <inheritdoc />
        public override bool Equals(object obj) => Equals(obj as BookName);

        /// <inheritdoc />
        public bool Equals(BookName other) => ToString() == other?.ToString();

        /// <inheritdoc />
        public static bool operator ==(BookName a, BookName b) => ReferenceEquals(a, b) || (a?.Equals(b) ?? false);

        /// <inheritdoc />
        public static bool operator !=(BookName a, BookName b) => !(a == b);
    }

    /// <summary>
    /// Resource name for the 'return' resource.
    /// </summary>
    public sealed partial class ReturnName : IResourceName, IEquatable<ReturnName>
    {
        private static readonly PathTemplate s_template = new PathTemplate("shelves/{shelf}/books/{book}/returns/{return}");

        /// <summary>
        /// Parses the given return resource name in string form into a new
        /// <see cref="ReturnName"/> instance.
        /// </summary>
        /// <param name="returnName">The return resource name in string form. Must not be <c>null</c>.</param>
        /// <returns>The parsed <see cref="ReturnName"/> if successful.</returns>
        public static ReturnName Parse(string returnName)
        {
            GaxPreconditions.CheckNotNull(returnName, nameof(returnName));
            TemplatedResourceName resourceName = s_template.ParseName(returnName);
            return new ReturnName(resourceName[0], resourceName[1], resourceName[2]);
        }

        /// <summary>
        /// Tries to parse the given return resource name in string form into a new
        /// <see cref="ReturnName"/> instance.
        /// </summary>
        /// <remarks>
        /// This method still throws <see cref="ArgumentNullException"/> if <paramref name="returnName"/> is null,
        /// as this would usually indicate a programming error rather than a data error.
        /// </remarks>
        /// <param name="returnName">The return resource name in string form. Must not be <c>null</c>.</param>
        /// <param name="result">When this method returns, the parsed <see cref="ReturnName"/>,
        /// or <c>null</c> if parsing fails.</param>
        /// <returns><c>true</c> if the name was parsed succssfully; <c>false</c> otherwise.</returns>
        public static bool TryParse(string returnName, out ReturnName result)
        {
            GaxPreconditions.CheckNotNull(returnName, nameof(returnName));
            TemplatedResourceName resourceName;
            if (s_template.TryParseName(returnName, out resourceName))
            {
                result = new ReturnName(resourceName[0], resourceName[1], resourceName[2]);
                return true;
            }
            else
            {
                result = null;
                return false;
            }
        }

        /// <summary>
        /// Constructs a new instance of the <see cref="ReturnName"/> resource name class
        /// from its component parts.
        /// </summary>
        /// <param name="shelfId">The shelf ID. Must not be <c>null</c>.</param>
        /// <param name="bookId">The book ID. Must not be <c>null</c>.</param>
        /// <param name="returnId">The return ID. Must not be <c>null</c>.</param>
        public ReturnName(string shelfId, string bookId, string returnId)
        {
            ShelfId = GaxPreconditions.CheckNotNull(shelfId, nameof(shelfId));
            BookId = GaxPreconditions.CheckNotNull(bookId, nameof(bookId));
            ReturnId = GaxPreconditions.CheckNotNull(returnId, nameof(returnId));
        }

        /// <summary>
        /// The shelf ID. Never <c>null</c>.
        /// </summary>
        public string ShelfId { get; }

        /// <summary>
        /// The book ID. Never <c>null</c>.
        /// </summary>
        public string BookId { get; }

        /// <summary>
        /// The return ID. Never <c>null</c>.
        /// </summary>
        public string ReturnId { get; }

        /// <inheritdoc />
        public ResourceNameKind Kind => ResourceNameKind.Simple;

        /// <inheritdoc />
        public override string ToString() => s_template.Expand(ShelfId, BookId, ReturnId);

        /// <inheritdoc />
        public override int GetHashCode() => ToString().GetHashCode();

        /// <inheritdoc />
        public override bool Equals(object obj) => Equals(obj as ReturnName);

        /// <inheritdoc />
        public bool Equals(ReturnName other) => ToString() == other?.ToString();

        /// <inheritdoc />
        public static bool operator ==(ReturnName a, ReturnName b) => ReferenceEquals(a, b) || (a?.Equals(b) ?? false);

        /// <inheritdoc />
        public static bool operator !=(ReturnName a, ReturnName b) => !(a == b);
    }

    /// <summary>
    /// Resource name which will contain one of a choice of resource names.
    /// </summary>
    /// <remarks>
    /// This resource name will contain one of the following:
    /// <list type="bullet">
    /// <item><description>BookName: A resource of type 'book'.</description></item>
    /// <item><description>ArchivedBookName: A resource of type 'archived_book'.</description></item>
    /// <item><description>DeletedBookNameFixed: A resource of type 'deleted_book'.</description></item>
    /// </list>
    /// </remarks>
    public sealed partial class BookNameOneof : IResourceName, IEquatable<BookNameOneof>
    {
        /// <summary>
        /// The possible contents of <see cref="BookNameOneof"/>.
        /// </summary>
        public enum OneofType
        {
            /// <summary>
            /// A resource of an unknown type.
            /// </summary>
            Unknown = 0,

            /// <summary>
            /// A resource of type 'book'.
            /// </summary>
            BookName = 1,

            /// <summary>
            /// A resource of type 'archived_book'.
            /// </summary>
            ArchivedBookName = 2,

            /// <summary>
            /// A resource of type 'deleted_book'.
            /// </summary>
            DeletedBookNameFixed = 3,
        }

        /// <summary>
        /// Parses a resource name in string form into a new <see cref="BookNameOneof"/> instance.
        /// </summary>
        /// <remarks>
        /// To parse successfully the resource name must be one of the following:
        /// <list type="bullet">
        /// <item><description>BookName: A resource of type 'book'.</description></item>
        /// <item><description>ArchivedBookName: A resource of type 'archived_book'.</description></item>
        /// <item><description>DeletedBookNameFixed: A resource of type 'deleted_book'.</description></item>
        /// </list>
        /// Or an <see cref="UnknownResourceName"/> if <paramref name="allowUnknown"/> is <c>true</c>.
        /// </remarks>
        /// <param name="name">The resource name in string form. Must not be <c>null</c>.</param>
        /// <param name="allowUnknown">If true, will successfully parse an unknown resource name
        /// into an <see cref="UnknownResourceName"/>; otherwise will throw an
        /// <see cref="ArgumentException"/> if an unknown resource name is given.</param>
        /// <returns>The parsed <see cref="BookNameOneof"/> if successful.</returns>
        public static BookNameOneof Parse(string name, bool allowUnknown)
        {
            BookNameOneof result;
            if (TryParse(name, allowUnknown, out result))
            {
                return result;
            }
            throw new ArgumentException("Invalid name", nameof(name));
        }

        /// <summary>
        /// Tries to parse a resource name in string form into a new <see cref="BookNameOneof"/> instance.
        /// </summary>
        /// <remarks>
        /// To parse successfully the resource name must be one of the following:
        /// <list type="bullet">
        /// <item><description>BookName: A resource of type 'book'.</description></item>
        /// <item><description>ArchivedBookName: A resource of type 'archived_book'.</description></item>
        /// <item><description>DeletedBookNameFixed: A resource of type 'deleted_book'.</description></item>
        /// </list>
        /// Or an <see cref="UnknownResourceName"/> if <paramref name="allowUnknown"/> is <c>true</c>.
        /// </remarks>
        /// <param name="name">The resource name in string form. Must not be <c>null</c>.</param>
        /// <param name="allowUnknown">If true, will successfully parse an unknown resource name
        /// into an <see cref="UnknownResourceName"/>.</param>
        /// <param name="result">When this method returns, the parsed <see cref="BookNameOneof"/>,
        /// or <c>null</c> if parsing fails.</param>
        /// <returns><c>true</c> if the name was parsed succssfully; <c>false</c> otherwise.</returns>
        public static bool TryParse(string name, bool allowUnknown, out BookNameOneof result)
        {
            GaxPreconditions.CheckNotNull(name, nameof(name));
            BookName bookName;
            if (BookName.TryParse(name, out bookName))
            {
                result = new BookNameOneof(OneofType.BookName, bookName);
                return true;
            }
            ArchivedBookName archivedBookName;
            if (ArchivedBookName.TryParse(name, out archivedBookName))
            {
                result = new BookNameOneof(OneofType.ArchivedBookName, archivedBookName);
                return true;
            }
            DeletedBookNameFixed deletedBookNameFixed;
            if (DeletedBookNameFixed.TryParse(name, out deletedBookNameFixed))
            {
                result = new BookNameOneof(OneofType.DeletedBookNameFixed, deletedBookNameFixed);
                return true;
            }
            if (allowUnknown)
            {
                UnknownResourceName unknownResourceName;
                if (UnknownResourceName.TryParse(name, out unknownResourceName))
                {
                    result = new BookNameOneof(OneofType.Unknown, unknownResourceName);
                    return true;
                }
            }
            result = null;
            return false;
        }

        /// <summary>
        /// Construct a new instance of <see cref="BookNameOneof"/> from the provided <see cref="BookName"/>
        /// </summary>
        /// <param name="bookName">The <see cref="BookName"/> to be contained within
        /// the returned <see cref="BookNameOneof"/>. Must not be <c>null</c>.</param>
        /// <returns>A new <see cref="BookNameOneof"/>, containing <paramref name="bookName"/>.</returns>
        public static BookNameOneof From(BookName bookName) => new BookNameOneof(OneofType.BookName, bookName);

        /// <summary>
        /// Construct a new instance of <see cref="BookNameOneof"/> from the provided <see cref="ArchivedBookName"/>
        /// </summary>
        /// <param name="archivedBookName">The <see cref="ArchivedBookName"/> to be contained within
        /// the returned <see cref="BookNameOneof"/>. Must not be <c>null</c>.</param>
        /// <returns>A new <see cref="BookNameOneof"/>, containing <paramref name="archivedBookName"/>.</returns>
        public static BookNameOneof From(ArchivedBookName archivedBookName) => new BookNameOneof(OneofType.ArchivedBookName, archivedBookName);

        /// <summary>
        /// Construct a new instance of <see cref="BookNameOneof"/> from the provided <see cref="DeletedBookNameFixed"/>
        /// </summary>
        /// <param name="deletedBookNameFixed">The <see cref="DeletedBookNameFixed"/> to be contained within
        /// the returned <see cref="BookNameOneof"/>. Must not be <c>null</c>.</param>
        /// <returns>A new <see cref="BookNameOneof"/>, containing <paramref name="deletedBookNameFixed"/>.</returns>
        public static BookNameOneof From(DeletedBookNameFixed deletedBookNameFixed) => new BookNameOneof(OneofType.DeletedBookNameFixed, deletedBookNameFixed);

        private static bool IsValid(OneofType type, IResourceName name)
        {
            switch (type)
            {
                case OneofType.Unknown: return true; // Anything goes with Unknown.
                case OneofType.BookName: return name is BookName;
                case OneofType.ArchivedBookName: return name is ArchivedBookName;
                case OneofType.DeletedBookNameFixed: return name is DeletedBookNameFixed;
                default: return false;
            }
        }

        /// <summary>
        /// Constructs a new instance of the <see cref="BookNameOneof"/> resource name class
        /// from a suitable <see cref="IResourceName"/> instance.
        /// </summary>
        public BookNameOneof(OneofType type, IResourceName name)
        {
            Type = GaxPreconditions.CheckEnumValue<OneofType>(type, nameof(type));
            Name = GaxPreconditions.CheckNotNull(name, nameof(name));
            if (!IsValid(type, name))
            {
                throw new ArgumentException($"Mismatched OneofType '{type}' and resource name '{name}'");
            }
        }

        /// <summary>
        /// The <see cref="OneofType"/> of the Name contained in this instance.
        /// </summary>
        public OneofType Type { get; }

        /// <summary>
        /// The <see cref="IResourceName"/> contained in this instance.
        /// </summary>
        public IResourceName Name { get; }

        private T CheckAndReturn<T>(OneofType type)
        {
            if (Type != type)
            {
                throw new InvalidOperationException($"Requested type {type}, but this one-of contains type {Type}");
            }
            return (T)Name;
        }

        /// <summary>
        /// Get the contained <see cref="IResourceName"/> as <see cref="BookName"/>.
        /// </summary>
        /// <remarks>
        /// An <see cref="InvalidOperationException"/> will be thrown if this does not
        /// contain an instance of <see cref="BookName"/>.
        /// </remarks>
        public BookName BookName => CheckAndReturn<BookName>(OneofType.BookName);

        /// <summary>
        /// Get the contained <see cref="IResourceName"/> as <see cref="ArchivedBookName"/>.
        /// </summary>
        /// <remarks>
        /// An <see cref="InvalidOperationException"/> will be thrown if this does not
        /// contain an instance of <see cref="ArchivedBookName"/>.
        /// </remarks>
        public ArchivedBookName ArchivedBookName => CheckAndReturn<ArchivedBookName>(OneofType.ArchivedBookName);

        /// <summary>
        /// Get the contained <see cref="IResourceName"/> as <see cref="DeletedBookNameFixed"/>.
        /// </summary>
        /// <remarks>
        /// An <see cref="InvalidOperationException"/> will be thrown if this does not
        /// contain an instance of <see cref="DeletedBookNameFixed"/>.
        /// </remarks>
        public DeletedBookNameFixed DeletedBookNameFixed => CheckAndReturn<DeletedBookNameFixed>(OneofType.DeletedBookNameFixed);

        /// <inheritdoc />
        public ResourceNameKind Kind => ResourceNameKind.Oneof;

        /// <inheritdoc />
        public override string ToString() => Name.ToString();

        /// <inheritdoc />
        public override int GetHashCode() => ToString().GetHashCode();

        /// <inheritdoc />
        public override bool Equals(object obj) => Equals(obj as BookNameOneof);

        /// <inheritdoc />
        public bool Equals(BookNameOneof other) => ToString() == other?.ToString();

        /// <inheritdoc />
        public static bool operator ==(BookNameOneof a, BookNameOneof b) => ReferenceEquals(a, b) || (a?.Equals(b) ?? false);

        /// <inheritdoc />
        public static bool operator !=(BookNameOneof a, BookNameOneof b) => !(a == b);
    }

    /// <summary>
    /// Resource name to represent the fixed string "_deleted-book_".
    /// </summary>
    public sealed partial class DeletedBookNameFixed : IResourceName, IEquatable<DeletedBookNameFixed>
    {
        /// <summary>
        /// The fixed string value: "_deleted-book_".
        /// </summary>
        public const string FixedValue = "_deleted-book_";

        /// <summary>
        /// An instance of <see cref="DeletedBookNameFixed"/>.
        /// </summary>
        public static DeletedBookNameFixed Instance => new DeletedBookNameFixed();

        /// <summary>
        /// Parses the given string into a new <see cref="DeletedBookNameFixed"/> instance.
        /// Only succeeds if the string is equal to "_deleted-book_".
        /// </summary>
        public static DeletedBookNameFixed Parse(string deletedBookNameFixed)
        {
            DeletedBookNameFixed result;
            if (!TryParse(deletedBookNameFixed, out result))
            {
                throw new ArgumentException($"Invalid resource name, must be \"{FixedValue}\"", nameof(deletedBookNameFixed));
            }
            return result;
        }

        /// <summary>
        /// Tries to parse the given string into a new <see cref="DeletedBookNameFixed"/> instance.
        /// Only succeeds if the string is equal to "_deleted-book_".
        /// </summary>
        public static bool TryParse(string deletedBookNameFixed, out DeletedBookNameFixed result)
        {
            GaxPreconditions.CheckNotNull(deletedBookNameFixed, nameof(deletedBookNameFixed));
            if (deletedBookNameFixed == FixedValue)
            {
                result = Instance;
                return true;
            }
            else
            {
                result = null;
                return false;
            }
        }

        private DeletedBookNameFixed() { }

        /// <inheritdoc />
        public ResourceNameKind Kind => ResourceNameKind.Fixed;

        /// <inheritdoc />
        public override string ToString() => FixedValue;

        /// <inheritdoc />
        public override int GetHashCode() => ToString().GetHashCode();

        /// <inheritdoc />
        public override bool Equals(object obj) => Equals(obj as DeletedBookNameFixed);

        /// <inheritdoc />
        public bool Equals(DeletedBookNameFixed other) => other != null;

        /// <inheritdoc />
        public static bool operator ==(DeletedBookNameFixed a, DeletedBookNameFixed b) => ReferenceEquals(a, b) || (a?.Equals(b) ?? false);

        /// <inheritdoc />
        public static bool operator !=(DeletedBookNameFixed a, DeletedBookNameFixed b) => !(a == b);
    }


    public partial class Book
    {
        /// <summary>
        /// <see cref="BookName"/>-typed view over the <see cref="Name"/> resource name property.
        /// </summary>
        public BookName BookName
        {
            get { return string.IsNullOrEmpty(Name) ? null : Google.Example.Library.V1.BookName.Parse(Name); }
            set { Name = value != null ? value.ToString() : ""; }
        }

    }

    public partial class BookFromAnywhere
    {
        /// <summary>
        /// <see cref="BookNameOneof"/>-typed view over the <see cref="Name"/> resource name property.
        /// </summary>
        public BookNameOneof BookNameOneof
        {
            get { return string.IsNullOrEmpty(Name) ? null : Google.Example.Library.V1.BookNameOneof.Parse(Name, true); }
            set { Name = value != null ? value.ToString() : ""; }
        }

    }

    public partial class BookFromArchive
    {
        /// <summary>
        /// <see cref="ArchivedBookName"/>-typed view over the <see cref="Name"/> resource name property.
        /// </summary>
        public ArchivedBookName ArchivedBookName
        {
            get { return string.IsNullOrEmpty(Name) ? null : Google.Example.Library.V1.ArchivedBookName.Parse(Name); }
            set { Name = value != null ? value.ToString() : ""; }
        }

    }

    public partial class CreateBookRequest
    {
        /// <summary>
        /// <see cref="ShelfName"/>-typed view over the <see cref="Name"/> resource name property.
        /// </summary>
        public ShelfName ShelfName
        {
            get { return string.IsNullOrEmpty(Name) ? null : Google.Example.Library.V1.ShelfName.Parse(Name); }
            set { Name = value != null ? value.ToString() : ""; }
        }

    }

    public partial class DeleteBookRequest
    {
        /// <summary>
        /// <see cref="BookName"/>-typed view over the <see cref="Name"/> resource name property.
        /// </summary>
        public BookName BookName
        {
            get { return string.IsNullOrEmpty(Name) ? null : Google.Example.Library.V1.BookName.Parse(Name); }
            set { Name = value != null ? value.ToString() : ""; }
        }

    }

    public partial class DeleteShelfRequest
    {
        /// <summary>
        /// <see cref="ShelfName"/>-typed view over the <see cref="Name"/> resource name property.
        /// </summary>
        public ShelfName ShelfName
        {
            get { return string.IsNullOrEmpty(Name) ? null : Google.Example.Library.V1.ShelfName.Parse(Name); }
            set { Name = value != null ? value.ToString() : ""; }
        }

    }

    public partial class FindRelatedBooksRequest
    {
        /// <summary>
        /// <see cref="ResourceNameList{BookName}"/>-typed view over the <see cref="Names"/> resource name property.
        /// </summary>
        public ResourceNameList<BookName> BookNames =>
            new ResourceNameList<BookName>(Names,
                str => BookName.Parse(str));

        /// <summary>
        /// <see cref="ResourceNameList{ShelfName}"/>-typed view over the <see cref="Shelves"/> resource name property.
        /// </summary>
        public ResourceNameList<ShelfName> ShelvesAsShelfNames =>
            new ResourceNameList<ShelfName>(Shelves,
                str => ShelfName.Parse(str));

    }

    public partial class FindRelatedBooksResponse
    {
        /// <summary>
        /// <see cref="ResourceNameList{BookName}"/>-typed view over the <see cref="Names"/> resource name property.
        /// </summary>
        public ResourceNameList<BookName> BookNames =>
            new ResourceNameList<BookName>(Names,
                str => BookName.Parse(str));

    }

    public partial class GetBookFromAnywhereRequest
    {
        /// <summary>
        /// <see cref="BookNameOneof"/>-typed view over the <see cref="Name"/> resource name property.
        /// </summary>
        public BookNameOneof BookNameOneof
        {
            get { return string.IsNullOrEmpty(Name) ? null : Google.Example.Library.V1.BookNameOneof.Parse(Name, true); }
            set { Name = value != null ? value.ToString() : ""; }
        }

        /// <summary>
        /// <see cref="BookNameOneof"/>-typed view over the <see cref="AltBookName"/> resource name property.
        /// </summary>
        public BookNameOneof AltBookNameAsBookNameOneof
        {
            get { return string.IsNullOrEmpty(AltBookName) ? null : Google.Example.Library.V1.BookNameOneof.Parse(AltBookName, true); }
            set { AltBookName = value != null ? value.ToString() : ""; }
        }

    }

    public partial class GetBookFromArchiveRequest
    {
        /// <summary>
        /// <see cref="ArchivedBookName"/>-typed view over the <see cref="Name"/> resource name property.
        /// </summary>
        public ArchivedBookName ArchivedBookName
        {
            get { return string.IsNullOrEmpty(Name) ? null : Google.Example.Library.V1.ArchivedBookName.Parse(Name); }
            set { Name = value != null ? value.ToString() : ""; }
        }

    }

    public partial class GetBookRequest
    {
        /// <summary>
        /// <see cref="BookName"/>-typed view over the <see cref="Name"/> resource name property.
        /// </summary>
        public BookName BookName
        {
            get { return string.IsNullOrEmpty(Name) ? null : Google.Example.Library.V1.BookName.Parse(Name); }
            set { Name = value != null ? value.ToString() : ""; }
        }

    }

    public partial class GetShelfRequest
    {
        /// <summary>
        /// <see cref="ShelfName"/>-typed view over the <see cref="Name"/> resource name property.
        /// </summary>
        public ShelfName ShelfName
        {
            get { return string.IsNullOrEmpty(Name) ? null : Google.Example.Library.V1.ShelfName.Parse(Name); }
            set { Name = value != null ? value.ToString() : ""; }
        }

    }

    public partial class ListBooksRequest
    {
        /// <summary>
        /// <see cref="ShelfName"/>-typed view over the <see cref="Name"/> resource name property.
        /// </summary>
        public ShelfName ShelfName
        {
            get { return string.IsNullOrEmpty(Name) ? null : Google.Example.Library.V1.ShelfName.Parse(Name); }
            set { Name = value != null ? value.ToString() : ""; }
        }

    }

    public partial class ListStringsRequest
    {
        /// <summary>
        /// <see cref="IResourceName"/>-typed view over the <see cref="Name"/> resource name property.
        /// </summary>
        public IResourceName AsResourceName
        {
            get { return string.IsNullOrEmpty(Name) ? null : UnknownResourceName.Parse(Name); }
            set { Name = value != null ? value.ToString() : ""; }
        }

    }

    public partial class ListStringsResponse
    {
        /// <summary>
        /// <see cref="ResourceNameList{IResourceName}"/>-typed view over the <see cref="Strings"/> resource name property.
        /// </summary>
        public ResourceNameList<IResourceName> StringsAsResourceNames =>
            new ResourceNameList<IResourceName>(Strings,
                str => UnknownResourceName.Parse(str));

    }

    public partial class MergeShelvesRequest
    {
        /// <summary>
        /// <see cref="ShelfName"/>-typed view over the <see cref="Name"/> resource name property.
        /// </summary>
        public ShelfName ShelfName
        {
            get { return string.IsNullOrEmpty(Name) ? null : Google.Example.Library.V1.ShelfName.Parse(Name); }
            set { Name = value != null ? value.ToString() : ""; }
        }

        /// <summary>
        /// <see cref="ShelfName"/>-typed view over the <see cref="OtherShelfName"/> resource name property.
        /// </summary>
        public ShelfName OtherShelfNameAsShelfName
        {
            get { return string.IsNullOrEmpty(OtherShelfName) ? null : Google.Example.Library.V1.ShelfName.Parse(OtherShelfName); }
            set { OtherShelfName = value != null ? value.ToString() : ""; }
        }

    }

    public partial class MoveBookRequest
    {
        /// <summary>
        /// <see cref="BookName"/>-typed view over the <see cref="Name"/> resource name property.
        /// </summary>
        public BookName BookName
        {
            get { return string.IsNullOrEmpty(Name) ? null : Google.Example.Library.V1.BookName.Parse(Name); }
            set { Name = value != null ? value.ToString() : ""; }
        }

        /// <summary>
        /// <see cref="ShelfName"/>-typed view over the <see cref="OtherShelfName"/> resource name property.
        /// </summary>
        public ShelfName OtherShelfNameAsShelfName
        {
            get { return string.IsNullOrEmpty(OtherShelfName) ? null : Google.Example.Library.V1.ShelfName.Parse(OtherShelfName); }
            set { OtherShelfName = value != null ? value.ToString() : ""; }
        }

    }

    public partial class Shelf
    {
        /// <summary>
        /// <see cref="ShelfName"/>-typed view over the <see cref="Name"/> resource name property.
        /// </summary>
        public ShelfName ShelfName
        {
            get { return string.IsNullOrEmpty(Name) ? null : Google.Example.Library.V1.ShelfName.Parse(Name); }
            set { Name = value != null ? value.ToString() : ""; }
        }

    }

    public partial class TestOptionalRequiredFlatteningParamsRequest
    {
        /// <summary>
        /// <see cref="BookName"/>-typed view over the <see cref="RequiredSingularResourceName"/> resource name property.
        /// </summary>
        public BookName RequiredSingularResourceNameAsBookName
        {
            get { return string.IsNullOrEmpty(RequiredSingularResourceName) ? null : Google.Example.Library.V1.BookName.Parse(RequiredSingularResourceName); }
            set { RequiredSingularResourceName = value != null ? value.ToString() : ""; }
        }

        /// <summary>
        /// <see cref="BookNameOneof"/>-typed view over the <see cref="RequiredSingularResourceNameOneof"/> resource name property.
        /// </summary>
        public BookNameOneof RequiredSingularResourceNameOneofAsBookNameOneof
        {
            get { return string.IsNullOrEmpty(RequiredSingularResourceNameOneof) ? null : Google.Example.Library.V1.BookNameOneof.Parse(RequiredSingularResourceNameOneof, true); }
            set { RequiredSingularResourceNameOneof = value != null ? value.ToString() : ""; }
        }

        /// <summary>
        /// <see cref="ResourceNameList{BookName}"/>-typed view over the <see cref="RequiredRepeatedResourceName"/> resource name property.
        /// </summary>
        public ResourceNameList<BookName> RequiredRepeatedResourceNameAsBookNames =>
            new ResourceNameList<BookName>(RequiredRepeatedResourceName,
                str => BookName.Parse(str));

        /// <summary>
        /// <see cref="ResourceNameList{BookNameOneof}"/>-typed view over the <see cref="RequiredRepeatedResourceNameOneof"/> resource name property.
        /// </summary>
        public ResourceNameList<BookNameOneof> RequiredRepeatedResourceNameOneofAsBookNameOneofs =>
            new ResourceNameList<BookNameOneof>(RequiredRepeatedResourceNameOneof,
                str => BookNameOneof.Parse(str, true));

        /// <summary>
        /// <see cref="BookName"/>-typed view over the <see cref="OptionalSingularResourceName"/> resource name property.
        /// </summary>
        public BookName OptionalSingularResourceNameAsBookName
        {
            get { return string.IsNullOrEmpty(OptionalSingularResourceName) ? null : Google.Example.Library.V1.BookName.Parse(OptionalSingularResourceName); }
            set { OptionalSingularResourceName = value != null ? value.ToString() : ""; }
        }

        /// <summary>
        /// <see cref="BookNameOneof"/>-typed view over the <see cref="OptionalSingularResourceNameOneof"/> resource name property.
        /// </summary>
        public BookNameOneof OptionalSingularResourceNameOneofAsBookNameOneof
        {
            get { return string.IsNullOrEmpty(OptionalSingularResourceNameOneof) ? null : Google.Example.Library.V1.BookNameOneof.Parse(OptionalSingularResourceNameOneof, true); }
            set { OptionalSingularResourceNameOneof = value != null ? value.ToString() : ""; }
        }

        /// <summary>
        /// <see cref="ResourceNameList{BookName}"/>-typed view over the <see cref="OptionalRepeatedResourceName"/> resource name property.
        /// </summary>
        public ResourceNameList<BookName> OptionalRepeatedResourceNameAsBookNames =>
            new ResourceNameList<BookName>(OptionalRepeatedResourceName,
                str => BookName.Parse(str));

        /// <summary>
        /// <see cref="ResourceNameList{BookNameOneof}"/>-typed view over the <see cref="OptionalRepeatedResourceNameOneof"/> resource name property.
        /// </summary>
        public ResourceNameList<BookNameOneof> OptionalRepeatedResourceNameOneofAsBookNameOneofs =>
            new ResourceNameList<BookNameOneof>(OptionalRepeatedResourceNameOneof,
                str => BookNameOneof.Parse(str, true));

    }

    public partial class UpdateBookIndexRequest
    {
        /// <summary>
        /// <see cref="BookName"/>-typed view over the <see cref="Name"/> resource name property.
        /// </summary>
        public BookName BookName
        {
            get { return string.IsNullOrEmpty(Name) ? null : Google.Example.Library.V1.BookName.Parse(Name); }
            set { Name = value != null ? value.ToString() : ""; }
        }

    }

    public partial class UpdateBookRequest
    {
        /// <summary>
        /// <see cref="BookName"/>-typed view over the <see cref="Name"/> resource name property.
        /// </summary>
        public BookName BookName
        {
            get { return string.IsNullOrEmpty(Name) ? null : Google.Example.Library.V1.BookName.Parse(Name); }
            set { Name = value != null ? value.ToString() : ""; }
        }

    }

}
