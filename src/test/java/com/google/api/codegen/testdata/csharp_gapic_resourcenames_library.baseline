============== file: Google/Example/Library/V1/ResourceNames.cs ==============
// Copyright 2016, Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated code. DO NOT EDIT!

using Google.Api.Gax;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Google.Example.Library.V1
{
    public interface IResourceName{}// TODO: This will be in GAX
    public interface ISingleResourceName:IResourceName{} // TODO: Is this required?

    public sealed class UnknownResourceName : IResourceName // TODO: This will be in GAX
    {
        public static UnknownResourceName Parse(string value) => new UnknownResourceName(value);

        public static bool TryParse(string value, out UnknownResourceName result)
        {
            result = new UnknownResourceName(value);
            return true;
        }

        public UnknownResourceName(string value)
        {
            Value = GaxPreconditions.CheckNotNull(value, nameof(value));
        }

        public string Value { get; }

        public override string ToString() => Value;
    }

    public sealed class ResourceNameList<TResource> : IList<TResource> where TResource : IResourceName // TODO: This will be in GAX
    {
        public ResourceNameList(IList<string> underlyingList, Func<TResource, string> nameToString, Func<string, TResource> stringToName)
        {
            _underlyingList = GaxPreconditions.CheckNotNull(underlyingList, nameof(underlyingList));
            _nameToString = GaxPreconditions.CheckNotNull(nameToString, nameof(nameToString));
            _stringToName = GaxPreconditions.CheckNotNull(stringToName, nameof(stringToName));
        }

        private IList<string> _underlyingList;
        private Func<TResource, string> _nameToString;
        private Func<string, TResource> _stringToName;

        public int Count => _underlyingList.Count;
        public bool IsReadOnly => _underlyingList.IsReadOnly;
        public TResource this[int i]
        {
            get { return _stringToName(_underlyingList[i]); }
            set { _underlyingList[i] = _nameToString(value); }
        }
        public void Add(TResource value) => _underlyingList.Add(_nameToString(value));
        public void Clear() => _underlyingList.Clear();
        public bool Contains(TResource value) => _underlyingList.Contains(_nameToString(value));
        public void CopyTo(TResource[] array, int arrayIndex)
        {
            // TODO: Improve exceptions
            if (array == null) throw new ArgumentNullException();
            if (arrayIndex < 0) throw new ArgumentOutOfRangeException();
            if (Count > array.Length - arrayIndex) throw new ArgumentException();
            for (int i = 0; i < Count; i++)
            {
                array[arrayIndex + i] = _stringToName(_underlyingList[i]);
            }
        }
        public IEnumerator<TResource> GetEnumerator() => _underlyingList.Select(_stringToName).GetEnumerator();
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
        public int IndexOf(TResource value) => _underlyingList.IndexOf(_nameToString(value));
        public void Insert(int index, TResource item) => _underlyingList.Insert(index, _nameToString(item));
        public bool Remove(TResource item) => _underlyingList.Remove(_nameToString(item));
        public void RemoveAt(int index) => _underlyingList.RemoveAt(index);
    }

    /// <summary>
    /// Resource name for a shelf.
    /// </summary>
    public sealed partial class ShelfName : ISingleResourceName
    {
        private static readonly PathTemplate s_template = new PathTemplate("shelves/{shelf_id}");

        /// <summary>
        /// Parses a shelf resource name in string form into a <see cref="ShelfName"/>.
        /// </summary>
        /// <param name="shelfName">The shelf resource name in string form. Must not be <c>null</c>.</param>
        public static ShelfName Parse(string shelfName)
        {
            GaxPreconditions.CheckNotNull(shelfName, nameof(shelfName));
            ResourceName resourceName = s_template.ParseName(shelfName);
            return new ShelfName(resourceName[0]);
        }

        public static bool TryParse(string shelfName, out ShelfName result)
        {
            GaxPreconditions.CheckNotNull(shelfName, nameof(shelfName));
            ResourceName resourceName;
            if (s_template.TryParseName(shelfName, out resourceName))
            {
                result = new ShelfName(resourceName[0]);
                return true;
            }
            else
            {
                result = null;
                return false;
            }
        }

        /// <summary>
        /// Constructs a shelf name from its component parts.
        /// </summary>
        /// <param name="shelfIdId">The shelfId ID. Must not be <c>null</c>.</param>
        public ShelfName(string shelfIdId)
        {
            ShelfIdId = GaxPreconditions.CheckNotNull(shelfIdId, nameof(shelfIdId));
        }

        /// <summary>
        /// The shelfId ID. Never <c>null</c>.
        /// </summary>
        public string ShelfIdId { get; }

        /// <inheritdoc />
        public override string ToString() => s_template.Expand(ShelfIdId);
    }

    /// <summary>
    /// Resource name for a archived_book.
    /// </summary>
    public sealed partial class ArchivedBookName : ISingleResourceName
    {
        private static readonly PathTemplate s_template = new PathTemplate("archives/{archive_path}/books/{book_id=**}");

        /// <summary>
        /// Parses a archived_book resource name in string form into a <see cref="ArchivedBookName"/>.
        /// </summary>
        /// <param name="archivedBookName">The archived_book resource name in string form. Must not be <c>null</c>.</param>
        public static ArchivedBookName Parse(string archivedBookName)
        {
            GaxPreconditions.CheckNotNull(archivedBookName, nameof(archivedBookName));
            ResourceName resourceName = s_template.ParseName(archivedBookName);
            return new ArchivedBookName(resourceName[0], resourceName[1]);
        }

        public static bool TryParse(string archivedBookName, out ArchivedBookName result)
        {
            GaxPreconditions.CheckNotNull(archivedBookName, nameof(archivedBookName));
            ResourceName resourceName;
            if (s_template.TryParseName(archivedBookName, out resourceName))
            {
                result = new ArchivedBookName(resourceName[0], resourceName[1]);
                return true;
            }
            else
            {
                result = null;
                return false;
            }
        }

        /// <summary>
        /// Constructs a archived_book name from its component parts.
        /// </summary>
        /// <param name="archivePathId">The archivePath ID. Must not be <c>null</c>.</param>
        /// <param name="bookIdId">The bookId ID. Must not be <c>null</c>.</param>
        public ArchivedBookName(string archivePathId, string bookIdId)
        {
            ArchivePathId = GaxPreconditions.CheckNotNull(archivePathId, nameof(archivePathId));
            BookIdId = GaxPreconditions.CheckNotNull(bookIdId, nameof(bookIdId));
        }

        /// <summary>
        /// The archivePath ID. Never <c>null</c>.
        /// </summary>
        public string ArchivePathId { get; }

        /// <summary>
        /// The bookId ID. Never <c>null</c>.
        /// </summary>
        public string BookIdId { get; }

        /// <inheritdoc />
        public override string ToString() => s_template.Expand(ArchivePathId, BookIdId);
    }

    /// <summary>
    /// Resource name for a book.
    /// </summary>
    public sealed partial class BookName : ISingleResourceName
    {
        private static readonly PathTemplate s_template = new PathTemplate("shelves/{shelf_id}/books/{book_id}");

        /// <summary>
        /// Parses a book resource name in string form into a <see cref="BookName"/>.
        /// </summary>
        /// <param name="bookName">The book resource name in string form. Must not be <c>null</c>.</param>
        public static BookName Parse(string bookName)
        {
            GaxPreconditions.CheckNotNull(bookName, nameof(bookName));
            ResourceName resourceName = s_template.ParseName(bookName);
            return new BookName(resourceName[0], resourceName[1]);
        }

        public static bool TryParse(string bookName, out BookName result)
        {
            GaxPreconditions.CheckNotNull(bookName, nameof(bookName));
            ResourceName resourceName;
            if (s_template.TryParseName(bookName, out resourceName))
            {
                result = new BookName(resourceName[0], resourceName[1]);
                return true;
            }
            else
            {
                result = null;
                return false;
            }
        }

        /// <summary>
        /// Constructs a book name from its component parts.
        /// </summary>
        /// <param name="shelfIdId">The shelfId ID. Must not be <c>null</c>.</param>
        /// <param name="bookIdId">The bookId ID. Must not be <c>null</c>.</param>
        public BookName(string shelfIdId, string bookIdId)
        {
            ShelfIdId = GaxPreconditions.CheckNotNull(shelfIdId, nameof(shelfIdId));
            BookIdId = GaxPreconditions.CheckNotNull(bookIdId, nameof(bookIdId));
        }

        /// <summary>
        /// The shelfId ID. Never <c>null</c>.
        /// </summary>
        public string ShelfIdId { get; }

        /// <summary>
        /// The bookId ID. Never <c>null</c>.
        /// </summary>
        public string BookIdId { get; }

        /// <inheritdoc />
        public override string ToString() => s_template.Expand(ShelfIdId, BookIdId);
    }

    /// <summary>
    /// Resource name for a return.
    /// </summary>
    public sealed partial class ReturnName : ISingleResourceName
    {
        private static readonly PathTemplate s_template = new PathTemplate("shelves/{shelf}/books/{book}/returns/{return}");

        /// <summary>
        /// Parses a return resource name in string form into a <see cref="ReturnName"/>.
        /// </summary>
        /// <param name="returnName">The return resource name in string form. Must not be <c>null</c>.</param>
        public static ReturnName Parse(string returnName)
        {
            GaxPreconditions.CheckNotNull(returnName, nameof(returnName));
            ResourceName resourceName = s_template.ParseName(returnName);
            return new ReturnName(resourceName[0], resourceName[1], resourceName[2]);
        }

        public static bool TryParse(string returnName, out ReturnName result)
        {
            GaxPreconditions.CheckNotNull(returnName, nameof(returnName));
            ResourceName resourceName;
            if (s_template.TryParseName(returnName, out resourceName))
            {
                result = new ReturnName(resourceName[0], resourceName[1], resourceName[2]);
                return true;
            }
            else
            {
                result = null;
                return false;
            }
        }

        /// <summary>
        /// Constructs a return name from its component parts.
        /// </summary>
        /// <param name="shelfId">The shelf ID. Must not be <c>null</c>.</param>
        /// <param name="bookId">The book ID. Must not be <c>null</c>.</param>
        /// <param name="returnId">The return ID. Must not be <c>null</c>.</param>
        public ReturnName(string shelfId, string bookId, string returnId)
        {
            ShelfId = GaxPreconditions.CheckNotNull(shelfId, nameof(shelfId));
            BookId = GaxPreconditions.CheckNotNull(bookId, nameof(bookId));
            ReturnId = GaxPreconditions.CheckNotNull(returnId, nameof(returnId));
        }

        /// <summary>
        /// The shelf ID. Never <c>null</c>.
        /// </summary>
        public string ShelfId { get; }

        /// <summary>
        /// The book ID. Never <c>null</c>.
        /// </summary>
        public string BookId { get; }

        /// <summary>
        /// The return ID. Never <c>null</c>.
        /// </summary>
        public string ReturnId { get; }

        /// <inheritdoc />
        public override string ToString() => s_template.Expand(ShelfId, BookId, ReturnId);
    }

    public sealed partial class BookNameOneof : IResourceName
    {
        public enum OneofType
        {
            BookName = 1,
            ArchivedBookName = 2,
            DeletedBookNameFixed = 3,
        }

        public static BookNameOneof Parse(string name)
        {
            BookNameOneof result;
            if (TryParse(name, out result))
            {
                return result;
            }
            throw new ArgumentException("Invalid name", "name");
        }

        public static bool TryParse(string name, out BookNameOneof result)
        {
            BookName bookName;
            if (BookName.TryParse(name, out bookName))
            {
                result = new BookNameOneof(OneofType.BookName, bookName);
                return true;
            }
            ArchivedBookName archivedBookName;
            if (ArchivedBookName.TryParse(name, out archivedBookName))
            {
                result = new BookNameOneof(OneofType.ArchivedBookName, archivedBookName);
                return true;
            }
            DeletedBookNameFixed deletedBookNameFixed;
            if (DeletedBookNameFixed.TryParse(name, out deletedBookNameFixed))
            {
                result = new BookNameOneof(OneofType.DeletedBookNameFixed, deletedBookNameFixed);
                return true;
            }
            result = null;
            return false;
        }

        public static BookNameOneof From(BookName bookName) => new BookNameOneof(OneofType.BookName, bookName);

        public static BookNameOneof From(ArchivedBookName archivedBookName) => new BookNameOneof(OneofType.ArchivedBookName, archivedBookName);

        public static BookNameOneof From(DeletedBookNameFixed deletedBookNameFixed) => new BookNameOneof(OneofType.DeletedBookNameFixed, deletedBookNameFixed);

        public BookNameOneof(OneofType type, IResourceName value)
        {
            Type = GaxPreconditions.CheckEnumValue<OneofType>(type, nameof(value));
            Value = GaxPreconditions.CheckNotNull(value, nameof(value));
        }

        public OneofType Type { get; }
        public IResourceName Value { get; }

        private T CheckAndReturn<T>(OneofType type)
        {
            if (Type != type)
            {
                throw new InvalidOperationException($"Requested type {type}, but this one-of contains type {Type}");
            }
            return (T)Value;
        }

        public BookName BookName => CheckAndReturn<BookName>(OneofType.BookName);

        public ArchivedBookName ArchivedBookName => CheckAndReturn<ArchivedBookName>(OneofType.ArchivedBookName);

        public DeletedBookNameFixed DeletedBookNameFixed => CheckAndReturn<DeletedBookNameFixed>(OneofType.DeletedBookNameFixed);

        public override string ToString() => Value.ToString();
    }

    public sealed partial class DeletedBookNameFixed : IResourceName
    {
        private const string FixedValue = "_deleted-book_";

        public static DeletedBookNameFixed Instance => new DeletedBookNameFixed();

        public static DeletedBookNameFixed Parse(string deletedBookNameFixed)
        {
            DeletedBookNameFixed result;
            if (!TryParse(deletedBookNameFixed, out result))
            {
                throw new ArgumentException($"Invalid resource name, must be \"{FixedValue}\"", nameof(deletedBookNameFixed));
            }
            return result;
        }

        public static bool TryParse(string deletedBookNameFixed, out DeletedBookNameFixed result)
        {
            GaxPreconditions.CheckNotNull(deletedBookNameFixed, nameof(deletedBookNameFixed));
            if (deletedBookNameFixed == FixedValue)
            {
                result = Instance;
                return true;
            }
            else
            {
                result = null;
                return false;
            }
        }

        private DeletedBookNameFixed() { }

        public override string ToString() => FixedValue;
    }


    public partial class FindRelatedBooksResponse
    {
        /// <summary>
        /// A <see cref="IList<BookName>"/>-typed view over the <see cref="Names"/> resource-name property.
        /// </summary>
        public IList<BookName> NamesAsResources =>
            new ResourceNameList<BookName>(Names,
                name => name.ToString(),
                str => BookName.Parse(str));

    }

    public partial class DeleteBookRequest
    {
        /// <summary>
        /// A <see cref="BookName"/>-typed view over the <see cref="Name"/> resource-name property.
        /// </summary>
        public BookName NameAsResource
        {
            get { return BookName.Parse(Name); }
            set { Name = GaxPreconditions.CheckNotNull(value, nameof(value)).ToString(); }
        }

    }

    public partial class ListBooksRequest
    {
        /// <summary>
        /// A <see cref="ShelfName"/>-typed view over the <see cref="Name"/> resource-name property.
        /// </summary>
        public ShelfName NameAsResource
        {
            get { return ShelfName.Parse(Name); }
            set { Name = GaxPreconditions.CheckNotNull(value, nameof(value)).ToString(); }
        }

    }

    public partial class MoveBookRequest
    {
        /// <summary>
        /// A <see cref="BookName"/>-typed view over the <see cref="Name"/> resource-name property.
        /// </summary>
        public BookName NameAsResource
        {
            get { return BookName.Parse(Name); }
            set { Name = GaxPreconditions.CheckNotNull(value, nameof(value)).ToString(); }
        }

        /// <summary>
        /// A <see cref="ShelfName"/>-typed view over the <see cref="OtherShelfName"/> resource-name property.
        /// </summary>
        public ShelfName OtherShelfNameAsResource
        {
            get { return ShelfName.Parse(OtherShelfName); }
            set { OtherShelfName = GaxPreconditions.CheckNotNull(value, nameof(value)).ToString(); }
        }

    }

    public partial class UpdateBookRequest
    {
        /// <summary>
        /// A <see cref="BookName"/>-typed view over the <see cref="Name"/> resource-name property.
        /// </summary>
        public BookName NameAsResource
        {
            get { return BookName.Parse(Name); }
            set { Name = GaxPreconditions.CheckNotNull(value, nameof(value)).ToString(); }
        }

    }

    public partial class GetBookRequest
    {
        /// <summary>
        /// A <see cref="BookName"/>-typed view over the <see cref="Name"/> resource-name property.
        /// </summary>
        public BookName NameAsResource
        {
            get { return BookName.Parse(Name); }
            set { Name = GaxPreconditions.CheckNotNull(value, nameof(value)).ToString(); }
        }

    }

    public partial class ListStringsRequest
    {
        /// <summary>
        /// A <see cref="IResourceName"/>-typed view over the <see cref="Name"/> resource-name property.
        /// </summary>
        public IResourceName NameAsResource
        {
            get { return UnknownResourceName.Parse(Name); }
            set { Name = GaxPreconditions.CheckNotNull(value, nameof(value)).ToString(); }
        }

    }

    public partial class GetBookFromAnywhereRequest
    {
        /// <summary>
        /// A <see cref="BookNameOneof"/>-typed view over the <see cref="Name"/> resource-name property.
        /// </summary>
        public BookNameOneof NameAsResource
        {
            get { return BookNameOneof.Parse(Name); }
            set { Name = GaxPreconditions.CheckNotNull(value, nameof(value)).ToString(); }
        }

        /// <summary>
        /// A <see cref="BookNameOneof"/>-typed view over the <see cref="AltBookName"/> resource-name property.
        /// </summary>
        public BookNameOneof AltBookNameAsResource
        {
            get { return BookNameOneof.Parse(AltBookName); }
            set { AltBookName = GaxPreconditions.CheckNotNull(value, nameof(value)).ToString(); }
        }

    }

    public partial class GetShelfRequest
    {
        /// <summary>
        /// A <see cref="ShelfName"/>-typed view over the <see cref="Name"/> resource-name property.
        /// </summary>
        public ShelfName NameAsResource
        {
            get { return ShelfName.Parse(Name); }
            set { Name = GaxPreconditions.CheckNotNull(value, nameof(value)).ToString(); }
        }

    }

    public partial class MergeShelvesRequest
    {
        /// <summary>
        /// A <see cref="ShelfName"/>-typed view over the <see cref="Name"/> resource-name property.
        /// </summary>
        public ShelfName NameAsResource
        {
            get { return ShelfName.Parse(Name); }
            set { Name = GaxPreconditions.CheckNotNull(value, nameof(value)).ToString(); }
        }

        /// <summary>
        /// A <see cref="ShelfName"/>-typed view over the <see cref="OtherShelfName"/> resource-name property.
        /// </summary>
        public ShelfName OtherShelfNameAsResource
        {
            get { return ShelfName.Parse(OtherShelfName); }
            set { OtherShelfName = GaxPreconditions.CheckNotNull(value, nameof(value)).ToString(); }
        }

    }

    public partial class GetBookFromArchiveRequest
    {
        /// <summary>
        /// A <see cref="ArchivedBookName"/>-typed view over the <see cref="Name"/> resource-name property.
        /// </summary>
        public ArchivedBookName NameAsResource
        {
            get { return ArchivedBookName.Parse(Name); }
            set { Name = GaxPreconditions.CheckNotNull(value, nameof(value)).ToString(); }
        }

    }

    public partial class BookFromArchive
    {
        /// <summary>
        /// A <see cref="ArchivedBookName"/>-typed view over the <see cref="Name"/> resource-name property.
        /// </summary>
        public ArchivedBookName NameAsResource
        {
            get { return ArchivedBookName.Parse(Name); }
            set { Name = GaxPreconditions.CheckNotNull(value, nameof(value)).ToString(); }
        }

    }

    public partial class DeleteShelfRequest
    {
        /// <summary>
        /// A <see cref="ShelfName"/>-typed view over the <see cref="Name"/> resource-name property.
        /// </summary>
        public ShelfName NameAsResource
        {
            get { return ShelfName.Parse(Name); }
            set { Name = GaxPreconditions.CheckNotNull(value, nameof(value)).ToString(); }
        }

    }

    public partial class BookFromAnywhere
    {
        /// <summary>
        /// A <see cref="BookNameOneof"/>-typed view over the <see cref="Name"/> resource-name property.
        /// </summary>
        public BookNameOneof NameAsResource
        {
            get { return BookNameOneof.Parse(Name); }
            set { Name = GaxPreconditions.CheckNotNull(value, nameof(value)).ToString(); }
        }

    }

    public partial class Shelf
    {
        /// <summary>
        /// A <see cref="ShelfName"/>-typed view over the <see cref="Name"/> resource-name property.
        /// </summary>
        public ShelfName NameAsResource
        {
            get { return ShelfName.Parse(Name); }
            set { Name = GaxPreconditions.CheckNotNull(value, nameof(value)).ToString(); }
        }

    }

    public partial class Book
    {
        /// <summary>
        /// A <see cref="BookName"/>-typed view over the <see cref="Name"/> resource-name property.
        /// </summary>
        public BookName NameAsResource
        {
            get { return BookName.Parse(Name); }
            set { Name = GaxPreconditions.CheckNotNull(value, nameof(value)).ToString(); }
        }

    }

    public partial class UpdateBookIndexRequest
    {
        /// <summary>
        /// A <see cref="BookName"/>-typed view over the <see cref="Name"/> resource-name property.
        /// </summary>
        public BookName NameAsResource
        {
            get { return BookName.Parse(Name); }
            set { Name = GaxPreconditions.CheckNotNull(value, nameof(value)).ToString(); }
        }

    }

    public partial class CreateBookRequest
    {
        /// <summary>
        /// A <see cref="ShelfName"/>-typed view over the <see cref="Name"/> resource-name property.
        /// </summary>
        public ShelfName NameAsResource
        {
            get { return ShelfName.Parse(Name); }
            set { Name = GaxPreconditions.CheckNotNull(value, nameof(value)).ToString(); }
        }

    }

    public partial class FindRelatedBooksRequest
    {
        /// <summary>
        /// A <see cref="IList<BookName>"/>-typed view over the <see cref="Names"/> resource-name property.
        /// </summary>
        public IList<BookName> NamesAsResources =>
            new ResourceNameList<BookName>(Names,
                name => name.ToString(),
                str => BookName.Parse(str));

        /// <summary>
        /// A <see cref="IList<ShelfName>"/>-typed view over the <see cref="Shelves"/> resource-name property.
        /// </summary>
        public IList<ShelfName> ShelvesAsResources =>
            new ResourceNameList<ShelfName>(Shelves,
                name => name.ToString(),
                str => ShelfName.Parse(str));

    }

}
