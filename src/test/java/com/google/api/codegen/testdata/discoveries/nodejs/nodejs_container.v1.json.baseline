
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var container = google.container('v1');

authorize(function(authClient) {
  var request = {
    // The Google Developers Console [project ID or project number]
    // (https://support.google.com/cloud/answer/6158840).
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    zone: 'my-zone',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  container.projects.zones.clusters.create(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var container = google.container('v1');

authorize(function(authClient) {
  var request = {
    // The Google Developers Console [project ID or project number]
    // (https://support.google.com/cloud/answer/6158840).
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    zone: 'my-zone',  // TODO: Update placeholder value.

    // The name of the cluster to delete.
    clusterId: 'my-cluster-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  container.projects.zones.clusters.delete(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var container = google.container('v1');

authorize(function(authClient) {
  var request = {
    // The Google Developers Console [project ID or project number]
    // (https://support.google.com/cloud/answer/6158840).
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    zone: 'my-zone',  // TODO: Update placeholder value.

    // The name of the cluster to retrieve.
    clusterId: 'my-cluster-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  container.projects.zones.clusters.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var container = google.container('v1');

authorize(function(authClient) {
  var request = {
    // The Google Developers Console [project ID or project number]
    // (https://support.google.com/cloud/answer/6158840).
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides, or "-" for all zones.
    zone: 'my-zone',  // TODO: Update placeholder value.

    auth: authClient,
  };

  container.projects.zones.clusters.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var container = google.container('v1');

authorize(function(authClient) {
  var request = {
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    zone: 'my-zone',  // TODO: Update placeholder value.

    // The name of the cluster.
    clusterId: 'my-cluster-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  container.projects.zones.clusters.nodePools.create(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var container = google.container('v1');

authorize(function(authClient) {
  var request = {
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    zone: 'my-zone',  // TODO: Update placeholder value.

    // The name of the cluster.
    clusterId: 'my-cluster-id',  // TODO: Update placeholder value.

    // The name of the node pool to delete.
    nodePoolId: 'my-node-pool-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  container.projects.zones.clusters.nodePools.delete(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var container = google.container('v1');

authorize(function(authClient) {
  var request = {
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    zone: 'my-zone',  // TODO: Update placeholder value.

    // The name of the cluster.
    clusterId: 'my-cluster-id',  // TODO: Update placeholder value.

    // The name of the node pool.
    nodePoolId: 'my-node-pool-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  container.projects.zones.clusters.nodePools.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var container = google.container('v1');

authorize(function(authClient) {
  var request = {
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    zone: 'my-zone',  // TODO: Update placeholder value.

    // The name of the cluster.
    clusterId: 'my-cluster-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  container.projects.zones.clusters.nodePools.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var container = google.container('v1');

authorize(function(authClient) {
  var request = {
    // The Google Developers Console [project ID or project number]
    // (https://support.google.com/cloud/answer/6158840).
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    zone: 'my-zone',  // TODO: Update placeholder value.

    // The name of the cluster to upgrade.
    clusterId: 'my-cluster-id',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  container.projects.zones.clusters.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var container = google.container('v1');

authorize(function(authClient) {
  var request = {
    // The Google Developers Console [project ID or project number]
    // (https://support.google.com/cloud/answer/6158840).
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
    // for.
    zone: 'my-zone',  // TODO: Update placeholder value.

    auth: authClient,
  };

  container.projects.zones.getServerconfig(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var container = google.container('v1');

authorize(function(authClient) {
  var request = {
    // The Google Developers Console [project ID or project number]
    // (https://support.google.com/cloud/answer/6158840).
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    zone: 'my-zone',  // TODO: Update placeholder value.

    // The server-assigned `name` of the operation.
    operationId: 'my-operation-id',  // TODO: Update placeholder value.

    auth: authClient,
  };

  container.projects.zones.operations.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var container = google.container('v1');

authorize(function(authClient) {
  var request = {
    // The Google Developers Console [project ID or project number]
    // (https://support.google.com/cloud/answer/6158840).
    projectId: 'my-project-id',  // TODO: Update placeholder value.

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
    // for, or `-` for all zones.
    zone: 'my-zone',  // TODO: Update placeholder value.

    auth: authClient,
  };

  container.projects.zones.operations.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
