
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var container = google.container('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'create' method:

    // The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
    projectId: "",
    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides.
    zone: "",
    resource: {},
    // Auth client
    auth: authClient
  };

  container.projects.zones.clusters.create(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var container = google.container('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'delete' method:

    // The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
    projectId: "",
    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides.
    zone: "",
    // The name of the cluster to delete.
    clusterId: "",
    // Auth client
    auth: authClient
  };

  container.projects.zones.clusters.delete(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var container = google.container('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'get' method:

    // The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
    projectId: "",
    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides.
    zone: "",
    // The name of the cluster to retrieve.
    clusterId: "",
    // Auth client
    auth: authClient
  };

  container.projects.zones.clusters.get(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var container = google.container('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'list' method:

    // The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
    projectId: "",
    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides, or "-" for all zones.
    zone: "",
    // Auth client
    auth: authClient
  };

  container.projects.zones.clusters.list(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var container = google.container('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'update' method:

    // The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
    projectId: "",
    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides.
    zone: "",
    // The name of the cluster to upgrade.
    clusterId: "",
    resource: {},
    // Auth client
    auth: authClient
  };

  container.projects.zones.clusters.update(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var container = google.container('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'getServerconfig' method:

    // The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
    projectId: "",
    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations for, or "-" for all zones.
    zone: "",
    // Auth client
    auth: authClient
  };

  container.projects.zones.getServerconfig(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var container = google.container('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'get' method:

    // The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
    projectId: "",
    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster resides.
    zone: "",
    // The server-assigned `name` of the operation.
    operationId: "",
    // Auth client
    auth: authClient
  };

  container.projects.zones.operations.get(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var authFactory = new GoogleAuth();
var container = google.container('v1');

authFactory.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to values for parameters to the 'list' method:

    // The Google Developers Console [project ID or project number](https://developers.google.com/console/help/new/#projectnumber).
    projectId: "",
    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations for, or "-" for all zones.
    zone: "",
    // Auth client
    auth: authClient
  };

  container.projects.zones.operations.list(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
