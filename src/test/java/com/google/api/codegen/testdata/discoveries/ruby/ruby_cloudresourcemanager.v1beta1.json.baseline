
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    'gcloud beta auth application-default login'
# 3. Install the Ruby client library and Application Default Credentials
#    library by running 'gem install google-api-client' and
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_organization' method:

# * The id of the Organization resource to fetch.
organization_id = '{MY-ORGANIZATION-ID}'

# Perform the call
response = service.get_organization(organization_id)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    'gcloud beta auth application-default login'
# 3. Install the Ruby client library and Application Default Credentials
#    library by running 'gem install google-api-client' and
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_organization_iam_policy' method:

# * REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as
#   a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified
#   in this value is resource specific and is specified in the `getIamPolicy` documentation.
resource = '{MY-RESOURCE}'

get_iam_policy_request_object = Google::Apis::CloudresourcemanagerV1beta1::GetIamPolicyRequest.new


# Perform the call
response = service.get_organization_iam_policy(resource, get_iam_policy_request_object)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    'gcloud beta auth application-default login'
# 3. Install the Ruby client library and Application Default Credentials
#    library by running 'gem install google-api-client' and
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])



# Perform the call
result_list = service.fetch_all(items: :organizations) { |token|
  service.list_organizations(, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    'gcloud beta auth application-default login'
# 3. Install the Ruby client library and Application Default Credentials
#    library by running 'gem install google-api-client' and
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'set_organization_iam_policy' method:

# * REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as
#   a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified
#   in this value is resource specific and is specified in the `setIamPolicy` documentation.
resource = '{MY-RESOURCE}'

set_iam_policy_request_object = Google::Apis::CloudresourcemanagerV1beta1::SetIamPolicyRequest.new


# Perform the call
response = service.set_organization_iam_policy(resource, set_iam_policy_request_object)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    'gcloud beta auth application-default login'
# 3. Install the Ruby client library and Application Default Credentials
#    library by running 'gem install google-api-client' and
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'test_organization_iam_permissions' method:

# * REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
#   specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the
#   path specified in this value is resource specific and is specified in the `testIamPermissions`
#   documentation.
resource = '{MY-RESOURCE}'

test_iam_permissions_request_object = Google::Apis::CloudresourcemanagerV1beta1::TestIamPermissionsRequest.new


# Perform the call
response = service.test_organization_iam_permissions(resource, test_iam_permissions_request_object)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    'gcloud beta auth application-default login'
# 3. Install the Ruby client library and Application Default Credentials
#    library by running 'gem install google-api-client' and
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'update_organization' method:

# * An immutable id for the Organization that is assigned on creation. This should be omitted when
#   creating a new Organization. This field is read-only.
organization_id = '{MY-ORGANIZATION-ID}'

organization_object = Google::Apis::CloudresourcemanagerV1beta1::Organization.new


# Perform the call
response = service.update_organization(organization_id, organization_object)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    'gcloud beta auth application-default login'
# 3. Install the Ruby client library and Application Default Credentials
#    library by running 'gem install google-api-client' and
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])



project_object = Google::Apis::CloudresourcemanagerV1beta1::Project.new


# Perform the call
response = service.create_project(project_object)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    'gcloud beta auth application-default login'
# 3. Install the Ruby client library and Application Default Credentials
#    library by running 'gem install google-api-client' and
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_project' method:

# * The Project ID (for example, `foo-bar-123`). Required.
project_id = '{MY-PROJECT-ID}'

# Perform the call
service.delete_project(project_id)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    'gcloud beta auth application-default login'
# 3. Install the Ruby client library and Application Default Credentials
#    library by running 'gem install google-api-client' and
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_project' method:

# * The Project ID (for example, `my-project-123`). Required.
project_id = '{MY-PROJECT-ID}'

# Perform the call
response = service.get_project(project_id)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    'gcloud beta auth application-default login'
# 3. Install the Ruby client library and Application Default Credentials
#    library by running 'gem install google-api-client' and
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_project_iam_policy' method:

# * REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as
#   a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified
#   in this value is resource specific and is specified in the `getIamPolicy` documentation.
resource = '{MY-RESOURCE}'

get_iam_policy_request_object = Google::Apis::CloudresourcemanagerV1beta1::GetIamPolicyRequest.new


# Perform the call
response = service.get_project_iam_policy(resource, get_iam_policy_request_object)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    'gcloud beta auth application-default login'
# 3. Install the Ruby client library and Application Default Credentials
#    library by running 'gem install google-api-client' and
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])



# Perform the call
result_list = service.fetch_all(items: :projects) { |token|
  service.list_projects(, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    'gcloud beta auth application-default login'
# 3. Install the Ruby client library and Application Default Credentials
#    library by running 'gem install google-api-client' and
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'set_project_iam_policy' method:

# * REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as
#   a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified
#   in this value is resource specific and is specified in the `setIamPolicy` documentation.
resource = '{MY-RESOURCE}'

set_iam_policy_request_object = Google::Apis::CloudresourcemanagerV1beta1::SetIamPolicyRequest.new


# Perform the call
response = service.set_project_iam_policy(resource, set_iam_policy_request_object)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    'gcloud beta auth application-default login'
# 3. Install the Ruby client library and Application Default Credentials
#    library by running 'gem install google-api-client' and
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'test_project_iam_permissions' method:

# * REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
#   specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the
#   path specified in this value is resource specific and is specified in the `testIamPermissions`
#   documentation.
resource = '{MY-RESOURCE}'

test_iam_permissions_request_object = Google::Apis::CloudresourcemanagerV1beta1::TestIamPermissionsRequest.new


# Perform the call
response = service.test_project_iam_permissions(resource, test_iam_permissions_request_object)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    'gcloud beta auth application-default login'
# 3. Install the Ruby client library and Application Default Credentials
#    library by running 'gem install google-api-client' and
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'undelete_project' method:

# * The project ID (for example, `foo-bar-123`). Required.
project_id = '{MY-PROJECT-ID}'

undelete_project_request_object = Google::Apis::CloudresourcemanagerV1beta1::UndeleteProjectRequest.new


# Perform the call
service.undelete_project(project_id, undelete_project_request_object)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    'gcloud beta auth application-default login'
# 3. Install the Ruby client library and Application Default Credentials
#    library by running 'gem install google-api-client' and
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'update_project' method:

# * The project ID (for example, `my-project-123`). Required.
project_id = '{MY-PROJECT-ID}'

project_object = Google::Apis::CloudresourcemanagerV1beta1::Project.new


# Perform the call
response = service.update_project(project_id, project_object)
