
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The id of the Organization resource to fetch.
organization_id = '{MY-ORGANIZATION-ID}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.get_organization(organization_id)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as a
# path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
# this value is resource specific and is specified in the `getIamPolicy` documentation.
resource = '{MY-RESOURCE}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
get_iam_policy_request_body = Google::Apis::CloudresourcemanagerV1beta1::GetIamPolicyRequest.new

# Perform the call
response = service.get_organization_iam_policy(resource, get_iam_policy_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# Perform the call
organizations = service.fetch_all(items: :organizations) do |token|
  service.list_organizations(, page_token: token)
end

organizations.each do |organization|
  # TODO: Use organization
  puts JSON.pretty_generate(organization)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as a
# path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
# this value is resource specific and is specified in the `setIamPolicy` documentation.
resource = '{MY-RESOURCE}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
set_iam_policy_request_body = Google::Apis::CloudresourcemanagerV1beta1::SetIamPolicyRequest.new

# Perform the call
response = service.set_organization_iam_policy(resource, set_iam_policy_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
# specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path
# specified in this value is resource specific and is specified in the `testIamPermissions`
# documentation.
resource = '{MY-RESOURCE}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
test_iam_permissions_request_body = Google::Apis::CloudresourcemanagerV1beta1::TestIamPermissionsRequest.new

# Perform the call
response = service.test_organization_iam_permissions(resource, test_iam_permissions_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# An immutable id for the Organization that is assigned on creation. This should be omitted when
# creating a new Organization. This field is read-only.
organization_id = '{MY-ORGANIZATION-ID}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
organization_body = Google::Apis::CloudresourcemanagerV1beta1::Organization.new

# Perform the call
response = service.update_organization(organization_id, organization_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Assign values to the desired members.
project_body = Google::Apis::CloudresourcemanagerV1beta1::Project.new

# Perform the call
response = service.create_project(project_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The Project ID (for example, `foo-bar-123`). Required.
project_id = '{MY-PROJECT-ID}'  # TODO: Update placeholder value(s).

# Perform the call
service.delete_project(project_id)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The Project ID (for example, `my-project-123`). Required.
project_id = '{MY-PROJECT-ID}'  # TODO: Update placeholder value(s).

# Perform the call
response = service.get_project(project_id)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as a
# path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
# this value is resource specific and is specified in the `getIamPolicy` documentation.
resource = '{MY-RESOURCE}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
get_iam_policy_request_body = Google::Apis::CloudresourcemanagerV1beta1::GetIamPolicyRequest.new

# Perform the call
response = service.get_project_iam_policy(resource, get_iam_policy_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# Perform the call
projects = service.fetch_all(items: :projects) do |token|
  service.list_projects(, page_token: token)
end

projects.each do |project|
  # TODO: Use project
  puts JSON.pretty_generate(project)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as a
# path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
# this value is resource specific and is specified in the `setIamPolicy` documentation.
resource = '{MY-RESOURCE}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
set_iam_policy_request_body = Google::Apis::CloudresourcemanagerV1beta1::SetIamPolicyRequest.new

# Perform the call
response = service.set_project_iam_policy(resource, set_iam_policy_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
# specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path
# specified in this value is resource specific and is specified in the `testIamPermissions`
# documentation.
resource = '{MY-RESOURCE}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
test_iam_permissions_request_body = Google::Apis::CloudresourcemanagerV1beta1::TestIamPermissionsRequest.new

# Perform the call
response = service.test_project_iam_permissions(resource, test_iam_permissions_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The project ID (for example, `foo-bar-123`). Required.
project_id = '{MY-PROJECT-ID}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
undelete_project_request_body = Google::Apis::CloudresourcemanagerV1beta1::UndeleteProjectRequest.new

# Perform the call
service.undelete_project(project_id, undelete_project_request_body)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Google Cloud Resource Manager API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/cloudresourcemanager
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/cloudresourcemanager_v1beta1'
require 'json'

service = Google::Apis::CloudresourcemanagerV1beta1::CloudResourceManagerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The project ID (for example, `my-project-123`). Required.
project_id = '{MY-PROJECT-ID}'  # TODO: Update placeholder value(s).

# TODO: Assign values to the desired members.
project_body = Google::Apis::CloudresourcemanagerV1beta1::Project.new

# Perform the call
response = service.update_project(project_id, project_body)

# TODO: Use response
puts JSON.pretty_generate(response)
