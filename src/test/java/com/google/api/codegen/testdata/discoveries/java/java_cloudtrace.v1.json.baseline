
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Trace API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudtrace
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudtrace/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudtrace.v1.CloudTrace;
import com.google.api.services.cloudtrace.v1.CloudTrace.Projects.PatchTraces;
import com.google.api.services.cloudtrace.v1.model.Traces;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudTraceExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Traces requestBody = new Traces();

    // ID of the Cloud project where the trace data is stored.
    String projectId = ""; // TODO: Update field(s).

    CloudTrace service = createService();
    PatchTraces request = service.projects().patchTraces(projectId, requestBody);
    request.execute();
  }

  public CloudTrace createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new CloudTrace.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new CloudTraceExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Trace API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudtrace
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudtrace/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudtrace.v1.CloudTrace;
import com.google.api.services.cloudtrace.v1.CloudTrace.Projects.Traces.Get;
import com.google.api.services.cloudtrace.v1.model.Trace;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudTraceExample {
  public void run() throws IOException, GeneralSecurityException {
    // ID of the Cloud project where the trace data is stored.
    String projectId = ""; // TODO: Update field(s).

    // ID of the trace to return.
    String traceId = ""; // TODO: Update field(s).

    CloudTrace service = createService();
    Get request = service.projects().traces().get(projectId, traceId);
    Trace response = request.execute();
    System.out.println(response);
  }

  public CloudTrace createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new CloudTrace.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new CloudTraceExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Trace API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudtrace
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudtrace/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudtrace.v1.CloudTrace;
import com.google.api.services.cloudtrace.v1.CloudTrace.Projects.Traces.List;
import com.google.api.services.cloudtrace.v1.model.ListTracesResponse;
import com.google.api.services.cloudtrace.v1.model.Trace;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class CloudTraceExample {
  public void run() throws IOException, GeneralSecurityException {
    // ID of the Cloud project where the trace data is stored.
    String projectId = ""; // TODO: Update field(s).

    CloudTrace service = createService();
    List request = service.projects().traces().list(projectId);
    ListTracesResponse response;
    do {
      response = request.execute();
      if (response.getTraces() == null) {
        continue;
      }
      for (Trace item : response.getTraces()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public CloudTrace createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new CloudTrace.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new CloudTraceExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
