
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google App Engine Admin API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/appengine
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('appengine', 'v1beta5', credentials=credentials)

application_body = {
    # TODO: Add desired entries of the request body.
}

request = service.apps().create(body=application_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google App Engine Admin API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/appengine
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('appengine', 'v1beta5', credentials=credentials)

# Part of `name`. Name of the application to get. Example: `apps/myapp`.
apps_id = ''  # TODO: Update placeholder value.

request = service.apps().get(appsId=apps_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google App Engine Admin API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/appengine
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('appengine', 'v1beta5', credentials=credentials)

# Part of `name`. Resource name for the location.
apps_id = ''  # TODO: Update placeholder value.

# Part of `name`. See documentation of `appsId`.
locations_id = ''  # TODO: Update placeholder value.

request = service.apps().locations().get(appsId=apps_id, locationsId=locations_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google App Engine Admin API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/appengine
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('appengine', 'v1beta5', credentials=credentials)

# Part of `name`. The resource that owns the locations collection, if applicable.
apps_id = ''  # TODO: Update placeholder value.

request = service.apps().locations().list(appsId=apps_id)
while request is not None:
    response = request.execute()

    for location in response['locations']:
        # TODO: Change code below to process each `location` resource:
        pprint(location)

    request = service.apps().locations().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google App Engine Admin API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/appengine
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('appengine', 'v1beta5', credentials=credentials)

# Part of `name`. The name of the operation resource.
apps_id = ''  # TODO: Update placeholder value.

# Part of `name`. See documentation of `appsId`.
operations_id = ''  # TODO: Update placeholder value.

request = service.apps().operations().get(appsId=apps_id, operationsId=operations_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google App Engine Admin API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/appengine
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('appengine', 'v1beta5', credentials=credentials)

# Part of `name`. The name of the operation collection.
apps_id = ''  # TODO: Update placeholder value.

request = service.apps().operations().list(appsId=apps_id)
while request is not None:
    response = request.execute()

    for operation in response['operations']:
        # TODO: Change code below to process each `operation` resource:
        pprint(operation)

    request = service.apps().operations().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google App Engine Admin API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/appengine
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('appengine', 'v1beta5', credentials=credentials)

# Part of `name`. Name of the application to update. Example: `apps/myapp`.
apps_id = ''  # TODO: Update placeholder value.

application_body = {
    # TODO: Add desired entries of the request body. Only assigned entries
    # will be changed:
}

request = service.apps().patch(appsId=apps_id, body=application_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google App Engine Admin API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/appengine
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('appengine', 'v1beta5', credentials=credentials)

# Part of `name`. Name of the resource requested. Example: `apps/myapp/services/default`.
apps_id = ''  # TODO: Update placeholder value.

# Part of `name`. See documentation of `appsId`.
services_id = ''  # TODO: Update placeholder value.

request = service.apps().services().delete(appsId=apps_id, servicesId=services_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google App Engine Admin API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/appengine
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('appengine', 'v1beta5', credentials=credentials)

# Part of `name`. Name of the resource requested. Example: `apps/myapp/services/default`.
apps_id = ''  # TODO: Update placeholder value.

# Part of `name`. See documentation of `appsId`.
services_id = ''  # TODO: Update placeholder value.

request = service.apps().services().get(appsId=apps_id, servicesId=services_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google App Engine Admin API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/appengine
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('appengine', 'v1beta5', credentials=credentials)

# Part of `name`. Name of the resource requested. Example: `apps/myapp`.
apps_id = ''  # TODO: Update placeholder value.

request = service.apps().services().list(appsId=apps_id)
while request is not None:
    response = request.execute()

    for service2 in response['services']:
        # TODO: Change code below to process each `service2` resource:
        pprint(service2)

    request = service.apps().services().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google App Engine Admin API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/appengine
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('appengine', 'v1beta5', credentials=credentials)

# Part of `name`. Name of the resource to update. Example: `apps/myapp/services/default`.
apps_id = ''  # TODO: Update placeholder value.

# Part of `name`. See documentation of `appsId`.
services_id = ''  # TODO: Update placeholder value.

service_body = {
    # TODO: Add desired entries of the request body. Only assigned entries
    # will be changed:
}

request = service.apps().services().patch(appsId=apps_id, servicesId=services_id, body=service_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google App Engine Admin API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/appengine
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('appengine', 'v1beta5', credentials=credentials)

# Part of `name`. Name of the resource to update. For example: "apps/myapp/services/default".
apps_id = ''  # TODO: Update placeholder value.

# Part of `name`. See documentation of `appsId`.
services_id = ''  # TODO: Update placeholder value.

version_body = {
    # TODO: Add desired entries of the request body.
}

request = service.apps().services().versions().create(appsId=apps_id, servicesId=services_id, body=version_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google App Engine Admin API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/appengine
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('appengine', 'v1beta5', credentials=credentials)

# Part of `name`. Name of the resource requested. Example: `apps/myapp/services/default/versions/v1`.
apps_id = ''  # TODO: Update placeholder value.

# Part of `name`. See documentation of `appsId`.
services_id = ''  # TODO: Update placeholder value.

# Part of `name`. See documentation of `appsId`.
versions_id = ''  # TODO: Update placeholder value.

request = service.apps().services().versions().delete(appsId=apps_id, servicesId=services_id, versionsId=versions_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google App Engine Admin API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/appengine
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('appengine', 'v1beta5', credentials=credentials)

# Part of `name`. Name of the resource requested. Example: `apps/myapp/services/default/versions/v1`.
apps_id = ''  # TODO: Update placeholder value.

# Part of `name`. See documentation of `appsId`.
services_id = ''  # TODO: Update placeholder value.

# Part of `name`. See documentation of `appsId`.
versions_id = ''  # TODO: Update placeholder value.

request = service.apps().services().versions().get(appsId=apps_id, servicesId=services_id, versionsId=versions_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google App Engine Admin API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/appengine
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('appengine', 'v1beta5', credentials=credentials)

# Part of `name`. Name of the resource requested. Example:
# `apps/myapp/services/default/versions/v1/instances/instance-1`.
apps_id = ''  # TODO: Update placeholder value.

# Part of `name`. See documentation of `appsId`.
services_id = ''  # TODO: Update placeholder value.

# Part of `name`. See documentation of `appsId`.
versions_id = ''  # TODO: Update placeholder value.

# Part of `name`. See documentation of `appsId`.
instances_id = ''  # TODO: Update placeholder value.

debug_instance_request_body = {
    # TODO: Add desired entries of the request body.
}

request = service.apps().services().versions().instances().debug(appsId=apps_id, servicesId=services_id, versionsId=versions_id, instancesId=instances_id, body=debug_instance_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google App Engine Admin API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/appengine
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('appengine', 'v1beta5', credentials=credentials)

# Part of `name`. Name of the resource requested. For example:
# "apps/myapp/services/default/versions/v1/instances/instance-1".
apps_id = ''  # TODO: Update placeholder value.

# Part of `name`. See documentation of `appsId`.
services_id = ''  # TODO: Update placeholder value.

# Part of `name`. See documentation of `appsId`.
versions_id = ''  # TODO: Update placeholder value.

# Part of `name`. See documentation of `appsId`.
instances_id = ''  # TODO: Update placeholder value.

request = service.apps().services().versions().instances().delete(appsId=apps_id, servicesId=services_id, versionsId=versions_id, instancesId=instances_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google App Engine Admin API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/appengine
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('appengine', 'v1beta5', credentials=credentials)

# Part of `name`. Name of the resource requested. Example:
# `apps/myapp/services/default/versions/v1/instances/instance-1`.
apps_id = ''  # TODO: Update placeholder value.

# Part of `name`. See documentation of `appsId`.
services_id = ''  # TODO: Update placeholder value.

# Part of `name`. See documentation of `appsId`.
versions_id = ''  # TODO: Update placeholder value.

# Part of `name`. See documentation of `appsId`.
instances_id = ''  # TODO: Update placeholder value.

request = service.apps().services().versions().instances().get(appsId=apps_id, servicesId=services_id, versionsId=versions_id, instancesId=instances_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google App Engine Admin API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/appengine
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('appengine', 'v1beta5', credentials=credentials)

# Part of `name`. Name of the resource requested. Example: `apps/myapp/services/default/versions/v1`.
apps_id = ''  # TODO: Update placeholder value.

# Part of `name`. See documentation of `appsId`.
services_id = ''  # TODO: Update placeholder value.

# Part of `name`. See documentation of `appsId`.
versions_id = ''  # TODO: Update placeholder value.

request = service.apps().services().versions().instances().list(appsId=apps_id, servicesId=services_id, versionsId=versions_id)
while request is not None:
    response = request.execute()

    for instance in response['instances']:
        # TODO: Change code below to process each `instance` resource:
        pprint(instance)

    request = service.apps().services().versions().instances().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google App Engine Admin API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/appengine
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('appengine', 'v1beta5', credentials=credentials)

# Part of `name`. Name of the resource requested. Example: `apps/myapp/services/default`.
apps_id = ''  # TODO: Update placeholder value.

# Part of `name`. See documentation of `appsId`.
services_id = ''  # TODO: Update placeholder value.

request = service.apps().services().versions().list(appsId=apps_id, servicesId=services_id)
while request is not None:
    response = request.execute()

    for version in response['versions']:
        # TODO: Change code below to process each `version` resource:
        pprint(version)

    request = service.apps().services().versions().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google App Engine Admin API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/appengine
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`
   For more information, see:
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('appengine', 'v1beta5', credentials=credentials)

# Part of `name`. Name of the resource to update. Example: `apps/myapp/services/default/versions/1`.
apps_id = ''  # TODO: Update placeholder value.

# Part of `name`. See documentation of `appsId`.
services_id = ''  # TODO: Update placeholder value.

# Part of `name`. See documentation of `appsId`.
versions_id = ''  # TODO: Update placeholder value.

version_body = {
    # TODO: Add desired entries of the request body. Only assigned entries
    # will be changed:
}

request = service.apps().services().versions().patch(appsId=apps_id, servicesId=services_id, versionsId=versions_id, body=version_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
