
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Name of a bucket.
    bucket = ""

    // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    // group-emailAddress, allUsers, or allAuthenticatedUsers.
    entity = ""
  )

  if err = client.BucketAccessControls.Delete(bucket, entity).Context(ctx).Do(); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Name of a bucket.
    bucket = ""

    // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    // group-emailAddress, allUsers, or allAuthenticatedUsers.
    entity = ""
  )

  response, err := client.BucketAccessControls.Get(bucket, entity).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Name of a bucket.
    bucket = ""

    requestBody = &storage.BucketAccessControl{}
  )

  response, err := client.BucketAccessControls.Insert(bucket, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Name of a bucket.
    bucket = ""
  )

  response, err := client.BucketAccessControls.List(bucket).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
  var (
    // Name of a bucket.
    bucket = ""

    // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    // group-emailAddress, allUsers, or allAuthenticatedUsers.
    entity = ""

    requestBody = &storage.BucketAccessControl{}
  )

  response, err := client.BucketAccessControls.Patch(bucket, entity, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'update' method:
  var (
    // Name of a bucket.
    bucket = ""

    // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    // group-emailAddress, allUsers, or allAuthenticatedUsers.
    entity = ""

    requestBody = &storage.BucketAccessControl{}
  )

  response, err := client.BucketAccessControls.Update(bucket, entity, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Name of a bucket.
    bucket = ""
  )

  if err = client.Buckets.Delete(bucket).Context(ctx).Do(); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Name of a bucket.
    bucket = ""
  )

  response, err := client.Buckets.Get(bucket).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // A valid API project identifier.
    project = ""

    requestBody = &storage.Bucket{}
  )

  response, err := client.Buckets.Insert(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // A valid API project identifier.
    project = ""
  )

  fn := func(page *storage.Buckets) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Buckets.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
  var (
    // Name of a bucket.
    bucket = ""

    requestBody = &storage.Bucket{}
  )

  response, err := client.Buckets.Patch(bucket, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'update' method:
  var (
    // Name of a bucket.
    bucket = ""

    requestBody = &storage.Bucket{}
  )

  response, err := client.Buckets.Update(bucket, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'stop' method:
  var (

    requestBody = &storage.Channel{}
  )

  if err = client.Channels.Stop(requestBody).Context(ctx).Do(); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Name of a bucket.
    bucket = ""

    // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    // group-emailAddress, allUsers, or allAuthenticatedUsers.
    entity = ""
  )

  if err = client.DefaultObjectAccessControls.Delete(bucket, entity).Context(ctx).Do(); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Name of a bucket.
    bucket = ""

    // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    // group-emailAddress, allUsers, or allAuthenticatedUsers.
    entity = ""
  )

  response, err := client.DefaultObjectAccessControls.Get(bucket, entity).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Name of a bucket.
    bucket = ""

    requestBody = &storage.ObjectAccessControl{}
  )

  response, err := client.DefaultObjectAccessControls.Insert(bucket, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Name of a bucket.
    bucket = ""
  )

  response, err := client.DefaultObjectAccessControls.List(bucket).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
  var (
    // Name of a bucket.
    bucket = ""

    // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    // group-emailAddress, allUsers, or allAuthenticatedUsers.
    entity = ""

    requestBody = &storage.ObjectAccessControl{}
  )

  response, err := client.DefaultObjectAccessControls.Patch(bucket, entity, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'update' method:
  var (
    // Name of a bucket.
    bucket = ""

    // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    // group-emailAddress, allUsers, or allAuthenticatedUsers.
    entity = ""

    requestBody = &storage.ObjectAccessControl{}
  )

  response, err := client.DefaultObjectAccessControls.Update(bucket, entity, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Name of a bucket.
    bucket = ""

    // Name of the object. For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    object = ""

    // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    // group-emailAddress, allUsers, or allAuthenticatedUsers.
    entity = ""
  )

  if err = client.ObjectAccessControls.Delete(bucket, object, entity).Context(ctx).Do(); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Name of a bucket.
    bucket = ""

    // Name of the object. For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    object = ""

    // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    // group-emailAddress, allUsers, or allAuthenticatedUsers.
    entity = ""
  )

  response, err := client.ObjectAccessControls.Get(bucket, object, entity).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Name of a bucket.
    bucket = ""

    // Name of the object. For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    object = ""

    requestBody = &storage.ObjectAccessControl{}
  )

  response, err := client.ObjectAccessControls.Insert(bucket, object, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Name of a bucket.
    bucket = ""

    // Name of the object. For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    object = ""
  )

  response, err := client.ObjectAccessControls.List(bucket, object).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
  var (
    // Name of a bucket.
    bucket = ""

    // Name of the object. For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    object = ""

    // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    // group-emailAddress, allUsers, or allAuthenticatedUsers.
    entity = ""

    requestBody = &storage.ObjectAccessControl{}
  )

  response, err := client.ObjectAccessControls.Patch(bucket, object, entity, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'update' method:
  var (
    // Name of a bucket.
    bucket = ""

    // Name of the object. For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    object = ""

    // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
    // group-emailAddress, allUsers, or allAuthenticatedUsers.
    entity = ""

    requestBody = &storage.ObjectAccessControl{}
  )

  response, err := client.ObjectAccessControls.Update(bucket, object, entity, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'compose' method:
  var (
    // Name of the bucket in which to store the new object.
    destinationBucket = ""

    // Name of the new object. For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    destinationObject = ""

    requestBody = &storage.ComposeRequest{}
  )

  response, err := client.Objects.Compose(destinationBucket, destinationObject, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'copy' method:
  var (
    // Name of the bucket in which to find the source object.
    sourceBucket = ""

    // Name of the source object. For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    sourceObject = ""

    // Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket
    // value, if any.For information about how to URL encode object names to be path safe, see Encoding URI
    // Path Parts.
    destinationBucket = ""

    // Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
    // object metadata's name value, if any.
    destinationObject = ""

    requestBody = &storage.Object{}
  )

  response, err := client.Objects.Copy(sourceBucket, sourceObject, destinationBucket, destinationObject, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Name of the bucket in which the object resides.
    bucket = ""

    // Name of the object. For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    object = ""
  )

  if err = client.Objects.Delete(bucket, object).Context(ctx).Do(); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Name of the bucket in which the object resides.
    bucket = ""

    // Name of the object. For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    object = ""
  )

  response, err := client.Objects.Get(bucket, object).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket
    // value, if any.
    bucket = ""

    requestBody = &storage.Object{}
  )

  response, err := client.Objects.Insert(bucket, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Name of the bucket in which to look for objects.
    bucket = ""
  )

  fn := func(page *storage.Objects) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Objects.List(bucket).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
  var (
    // Name of the bucket in which the object resides.
    bucket = ""

    // Name of the object. For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    object = ""

    requestBody = &storage.Object{}
  )

  response, err := client.Objects.Patch(bucket, object, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'rewrite' method:
  var (
    // Name of the bucket in which to find the source object.
    sourceBucket = ""

    // Name of the source object. For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    sourceObject = ""

    // Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket
    // value, if any.
    destinationBucket = ""

    // Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
    // object metadata's name value, if any. For information about how to URL encode object names to be
    // path safe, see Encoding URI Path Parts.
    destinationObject = ""

    requestBody = &storage.Object{}
  )

  response, err := client.Objects.Rewrite(sourceBucket, sourceObject, destinationBucket, destinationObject, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'update' method:
  var (
    // Name of the bucket in which the object resides.
    bucket = ""

    // Name of the object. For information about how to URL encode object names to be path safe, see
    // Encoding URI Path Parts.
    object = ""

    requestBody = &storage.Object{}
  )

  response, err := client.Objects.Update(bucket, object, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storage/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storage.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'watchAll' method:
  var (
    // Name of the bucket in which to look for objects.
    bucket = ""

    requestBody = &storage.Channel{}
  )

  response, err := client.Objects.WatchAll(bucket, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
