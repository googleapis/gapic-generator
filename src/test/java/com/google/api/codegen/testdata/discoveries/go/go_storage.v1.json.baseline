
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of a bucket.
  bucket := "" // TODO: Update placeholder value.

  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
  // group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := "" // TODO: Update placeholder value.

  err := c.BucketAccessControls.Delete(bucket, entity).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of a bucket.
  bucket := "" // TODO: Update placeholder value.

  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
  // group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := "" // TODO: Update placeholder value.

  resp, err := c.BucketAccessControls.Get(bucket, entity).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of a bucket.
  bucket := "" // TODO: Update placeholder value.

  resp, err := c.BucketAccessControls.Insert(bucket, &storage.BucketAccessControl{
                                               // TODO: Fill required fields.
                                             }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of a bucket.
  bucket := "" // TODO: Update placeholder value.

  resp, err := c.BucketAccessControls.List(bucket).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of a bucket.
  bucket := "" // TODO: Update placeholder value.

  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
  // group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := "" // TODO: Update placeholder value.

  resp, err := c.BucketAccessControls.Patch(bucket, entity, &storage.BucketAccessControl{
                                              // TODO: Fill required fields.
                                            }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of a bucket.
  bucket := "" // TODO: Update placeholder value.

  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
  // group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := "" // TODO: Update placeholder value.

  resp, err := c.BucketAccessControls.Update(bucket, entity, &storage.BucketAccessControl{
                                               // TODO: Fill required fields.
                                             }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of a bucket.
  bucket := "" // TODO: Update placeholder value.

  err := c.Buckets.Delete(bucket).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of a bucket.
  bucket := "" // TODO: Update placeholder value.

  resp, err := c.Buckets.Get(bucket).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // A valid API project identifier.
  project := "" // TODO: Update placeholder value.

  resp, err := c.Buckets.Insert(project, &storage.Bucket{
                                  // TODO: Fill required fields.
                                }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // A valid API project identifier.
  project := "" // TODO: Update placeholder value.


  call := c.Buckets.List(project)
  if err := call.Pages(ctx, func(page *storage.Buckets) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of a bucket.
  bucket := "" // TODO: Update placeholder value.

  resp, err := c.Buckets.Patch(bucket, &storage.Bucket{
                                 // TODO: Fill required fields.
                               }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of a bucket.
  bucket := "" // TODO: Update placeholder value.

  resp, err := c.Buckets.Update(bucket, &storage.Bucket{
                                  // TODO: Fill required fields.
                                }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }



  call := c.Channels.Stop(&storage.Channel{
                            // TODO: Fill required fields.
                          }).Context(ctx)
  if err := call.Do(); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of a bucket.
  bucket := "" // TODO: Update placeholder value.

  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
  // group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := "" // TODO: Update placeholder value.

  err := c.DefaultObjectAccessControls.Delete(bucket, entity).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of a bucket.
  bucket := "" // TODO: Update placeholder value.

  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
  // group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := "" // TODO: Update placeholder value.

  resp, err := c.DefaultObjectAccessControls.Get(bucket, entity).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of a bucket.
  bucket := "" // TODO: Update placeholder value.

  resp, err := c.DefaultObjectAccessControls.Insert(bucket, &storage.ObjectAccessControl{
                                                      // TODO: Fill required fields.
                                                    }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of a bucket.
  bucket := "" // TODO: Update placeholder value.

  resp, err := c.DefaultObjectAccessControls.List(bucket).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of a bucket.
  bucket := "" // TODO: Update placeholder value.

  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
  // group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := "" // TODO: Update placeholder value.

  resp, err := c.DefaultObjectAccessControls.Patch(bucket, entity, &storage.ObjectAccessControl{
                                                     // TODO: Fill required fields.
                                                   }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of a bucket.
  bucket := "" // TODO: Update placeholder value.

  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
  // group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := "" // TODO: Update placeholder value.

  resp, err := c.DefaultObjectAccessControls.Update(bucket, entity, &storage.ObjectAccessControl{
                                                      // TODO: Fill required fields.
                                                    }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of a bucket.
  bucket := "" // TODO: Update placeholder value.

  // Name of the object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  object := "" // TODO: Update placeholder value.

  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
  // group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := "" // TODO: Update placeholder value.

  err := c.ObjectAccessControls.Delete(bucket, object, entity).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of a bucket.
  bucket := "" // TODO: Update placeholder value.

  // Name of the object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  object := "" // TODO: Update placeholder value.

  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
  // group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := "" // TODO: Update placeholder value.

  resp, err := c.ObjectAccessControls.Get(bucket, object, entity).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of a bucket.
  bucket := "" // TODO: Update placeholder value.

  // Name of the object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  object := "" // TODO: Update placeholder value.

  resp, err := c.ObjectAccessControls.Insert(bucket, object, &storage.ObjectAccessControl{
                                               // TODO: Fill required fields.
                                             }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of a bucket.
  bucket := "" // TODO: Update placeholder value.

  // Name of the object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  object := "" // TODO: Update placeholder value.

  resp, err := c.ObjectAccessControls.List(bucket, object).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of a bucket.
  bucket := "" // TODO: Update placeholder value.

  // Name of the object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  object := "" // TODO: Update placeholder value.

  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
  // group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := "" // TODO: Update placeholder value.

  resp, err := c.ObjectAccessControls.Patch(bucket, object, entity, &storage.ObjectAccessControl{
                                              // TODO: Fill required fields.
                                            }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of a bucket.
  bucket := "" // TODO: Update placeholder value.

  // Name of the object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  object := "" // TODO: Update placeholder value.

  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
  // group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := "" // TODO: Update placeholder value.

  resp, err := c.ObjectAccessControls.Update(bucket, object, entity, &storage.ObjectAccessControl{
                                               // TODO: Fill required fields.
                                             }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of the bucket in which to store the new object.
  destinationBucket := "" // TODO: Update placeholder value.

  // Name of the new object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  destinationObject := "" // TODO: Update placeholder value.

  resp, err := c.Objects.Compose(destinationBucket, destinationObject, &storage.ComposeRequest{
                                   // TODO: Fill required fields.
                                 }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of the bucket in which to find the source object.
  sourceBucket := "" // TODO: Update placeholder value.

  // Name of the source object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  sourceObject := "" // TODO: Update placeholder value.

  // Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket
  // value, if any.For information about how to URL encode object names to be path safe, see Encoding URI
  // Path Parts.
  destinationBucket := "" // TODO: Update placeholder value.

  // Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
  // object metadata's name value, if any.
  destinationObject := "" // TODO: Update placeholder value.

  resp, err := c.Objects.Copy(sourceBucket, sourceObject, destinationBucket, destinationObject, &storage.Object{
                                // TODO: Fill required fields.
                              }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of the bucket in which the object resides.
  bucket := "" // TODO: Update placeholder value.

  // Name of the object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  object := "" // TODO: Update placeholder value.

  err := c.Objects.Delete(bucket, object).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of the bucket in which the object resides.
  bucket := "" // TODO: Update placeholder value.

  // Name of the object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  object := "" // TODO: Update placeholder value.

  resp, err := c.Objects.Get(bucket, object).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket
  // value, if any.
  bucket := "" // TODO: Update placeholder value.

  resp, err := c.Objects.Insert(bucket, &storage.Object{
                                  // TODO: Fill required fields.
                                }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of the bucket in which to look for objects.
  bucket := "" // TODO: Update placeholder value.


  call := c.Objects.List(bucket)
  if err := call.Pages(ctx, func(page *storage.Objects) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of the bucket in which the object resides.
  bucket := "" // TODO: Update placeholder value.

  // Name of the object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  object := "" // TODO: Update placeholder value.

  resp, err := c.Objects.Patch(bucket, object, &storage.Object{
                                 // TODO: Fill required fields.
                               }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of the bucket in which to find the source object.
  sourceBucket := "" // TODO: Update placeholder value.

  // Name of the source object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  sourceObject := "" // TODO: Update placeholder value.

  // Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket
  // value, if any.
  destinationBucket := "" // TODO: Update placeholder value.

  // Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
  // object metadata's name value, if any. For information about how to URL encode object names to be
  // path safe, see Encoding URI Path Parts.
  destinationObject := "" // TODO: Update placeholder value.

  resp, err := c.Objects.Rewrite(sourceBucket, sourceObject, destinationBucket, destinationObject, &storage.Object{
                                   // TODO: Fill required fields.
                                 }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of the bucket in which the object resides.
  bucket := "" // TODO: Update placeholder value.

  // Name of the object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  object := "" // TODO: Update placeholder value.

  resp, err := c.Objects.Update(bucket, object, &storage.Object{
                                  // TODO: Fill required fields.
                                }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storage/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := storage.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of the bucket in which to look for objects.
  bucket := "" // TODO: Update placeholder value.

  resp, err := c.Objects.WatchAll(bucket, &storage.Channel{
                                    // TODO: Fill required fields.
                                  }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
