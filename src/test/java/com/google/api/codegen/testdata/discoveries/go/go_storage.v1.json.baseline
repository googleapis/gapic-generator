
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of a bucket.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
  // group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := "{MY-ENTITY}"
  // TODO: Change placeholder value above.

  if err := storageService.BucketAccessControls.Delete(bucket, entity).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of a bucket.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
  // group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := "{MY-ENTITY}"
  // TODO: Change placeholder value above.

  resp, err := storageService.BucketAccessControls.Get(bucket, entity).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of a bucket.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  rb := storage.BucketAccessControl{
    // TODO: Add desired fields of the request body.
  }

  resp, err := storageService.BucketAccessControls.Insert(bucket, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of a bucket.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  resp, err := storageService.BucketAccessControls.List(bucket).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of a bucket.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
  // group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := "{MY-ENTITY}"
  // TODO: Change placeholder value above.

  rb := storage.BucketAccessControl{
    // TODO: Add desired fields of the request body to be changed.
  }

  resp, err := storageService.BucketAccessControls.Patch(bucket, entity, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of a bucket.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
  // group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := "{MY-ENTITY}"
  // TODO: Change placeholder value above.

  rb := storage.BucketAccessControl{
    // TODO: Add desired fields of the request body.
  }

  resp, err := storageService.BucketAccessControls.Update(bucket, entity, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of a bucket.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  if err := storageService.Buckets.Delete(bucket).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of a bucket.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  resp, err := storageService.Buckets.Get(bucket).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // A valid API project identifier.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := storage.Bucket{
    // TODO: Add desired fields of the request body.
  }

  resp, err := storageService.Buckets.Insert(project, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // A valid API project identifier.
  project := "{MY-PROJECT}"
  // TODO: Change placeholder value above.

  req := storageService.Buckets.List(project)
  if err := req.Pages(ctx, func(page *storage.Buckets) error {
    for _, bucket := range page.Items {
      // TODO: Change code below to process each `bucket` resource:
      fmt.Printf("%#v\n", bucket)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of a bucket.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  rb := storage.Bucket{
    // TODO: Add desired fields of the request body to be changed.
  }

  resp, err := storageService.Buckets.Patch(bucket, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of a bucket.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  rb := storage.Bucket{
    // TODO: Add desired fields of the request body.
  }

  resp, err := storageService.Buckets.Update(bucket, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }


  rb := storage.Channel{
    // TODO: Add desired fields of the request body.
  }

  if err := storageService.Channels.Stop(&rb).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of a bucket.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
  // group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := "{MY-ENTITY}"
  // TODO: Change placeholder value above.

  if err := storageService.DefaultObjectAccessControls.Delete(bucket, entity).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of a bucket.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
  // group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := "{MY-ENTITY}"
  // TODO: Change placeholder value above.

  resp, err := storageService.DefaultObjectAccessControls.Get(bucket, entity).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of a bucket.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  rb := storage.ObjectAccessControl{
    // TODO: Add desired fields of the request body.
  }

  resp, err := storageService.DefaultObjectAccessControls.Insert(bucket, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of a bucket.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  resp, err := storageService.DefaultObjectAccessControls.List(bucket).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of a bucket.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
  // group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := "{MY-ENTITY}"
  // TODO: Change placeholder value above.

  rb := storage.ObjectAccessControl{
    // TODO: Add desired fields of the request body to be changed.
  }

  resp, err := storageService.DefaultObjectAccessControls.Patch(bucket, entity, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of a bucket.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
  // group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := "{MY-ENTITY}"
  // TODO: Change placeholder value above.

  rb := storage.ObjectAccessControl{
    // TODO: Add desired fields of the request body.
  }

  resp, err := storageService.DefaultObjectAccessControls.Update(bucket, entity, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of a bucket.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  // Name of the object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  object := "{MY-OBJECT}"
  // TODO: Change placeholder value above.

  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
  // group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := "{MY-ENTITY}"
  // TODO: Change placeholder value above.

  if err := storageService.ObjectAccessControls.Delete(bucket, object, entity).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of a bucket.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  // Name of the object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  object := "{MY-OBJECT}"
  // TODO: Change placeholder value above.

  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
  // group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := "{MY-ENTITY}"
  // TODO: Change placeholder value above.

  resp, err := storageService.ObjectAccessControls.Get(bucket, object, entity).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of a bucket.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  // Name of the object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  object := "{MY-OBJECT}"
  // TODO: Change placeholder value above.

  rb := storage.ObjectAccessControl{
    // TODO: Add desired fields of the request body.
  }

  resp, err := storageService.ObjectAccessControls.Insert(bucket, object, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of a bucket.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  // Name of the object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  object := "{MY-OBJECT}"
  // TODO: Change placeholder value above.

  resp, err := storageService.ObjectAccessControls.List(bucket, object).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of a bucket.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  // Name of the object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  object := "{MY-OBJECT}"
  // TODO: Change placeholder value above.

  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
  // group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := "{MY-ENTITY}"
  // TODO: Change placeholder value above.

  rb := storage.ObjectAccessControl{
    // TODO: Add desired fields of the request body to be changed.
  }

  resp, err := storageService.ObjectAccessControls.Patch(bucket, object, entity, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of a bucket.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  // Name of the object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  object := "{MY-OBJECT}"
  // TODO: Change placeholder value above.

  // The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
  // group-emailAddress, allUsers, or allAuthenticatedUsers.
  entity := "{MY-ENTITY}"
  // TODO: Change placeholder value above.

  rb := storage.ObjectAccessControl{
    // TODO: Add desired fields of the request body.
  }

  resp, err := storageService.ObjectAccessControls.Update(bucket, object, entity, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the bucket in which to store the new object.
  destinationBucket := "{MY-DESTINATION-BUCKET}"
  // TODO: Change placeholder value above.

  // Name of the new object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  destinationObject := "{MY-DESTINATION-OBJECT}"
  // TODO: Change placeholder value above.

  rb := storage.ComposeRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := storageService.Objects.Compose(destinationBucket, destinationObject, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the bucket in which to find the source object.
  sourceBucket := "{MY-SOURCE-BUCKET}"
  // TODO: Change placeholder value above.

  // Name of the source object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  sourceObject := "{MY-SOURCE-OBJECT}"
  // TODO: Change placeholder value above.

  // Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket
  // value, if any.For information about how to URL encode object names to be path safe, see Encoding URI
  // Path Parts.
  destinationBucket := "{MY-DESTINATION-BUCKET}"
  // TODO: Change placeholder value above.

  // Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
  // object metadata's name value, if any.
  destinationObject := "{MY-DESTINATION-OBJECT}"
  // TODO: Change placeholder value above.

  rb := storage.Object{
    // TODO: Add desired fields of the request body.
  }

  resp, err := storageService.Objects.Copy(sourceBucket, sourceObject, destinationBucket, destinationObject, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the bucket in which the object resides.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  // Name of the object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  object := "{MY-OBJECT}"
  // TODO: Change placeholder value above.

  if err := storageService.Objects.Delete(bucket, object).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the bucket in which the object resides.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  // Name of the object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  object := "{MY-OBJECT}"
  // TODO: Change placeholder value above.

  resp, err := storageService.Objects.Get(bucket, object).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket
  // value, if any.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  rb := storage.Object{
    // TODO: Add desired fields of the request body.
  }

  // TODO: Add desired media content for upload. For more information, see:
  // https://godoc.org/google.golang.org/api/storage/v1

  resp, err := storageService.Objects.Insert(bucket, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the bucket in which to look for objects.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  req := storageService.Objects.List(bucket)
  if err := req.Pages(ctx, func(page *storage.Objects) error {
    for _, object := range page.Items {
      // TODO: Change code below to process each `object` resource:
      fmt.Printf("%#v\n", object)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the bucket in which the object resides.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  // Name of the object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  object := "{MY-OBJECT}"
  // TODO: Change placeholder value above.

  rb := storage.Object{
    // TODO: Add desired fields of the request body to be changed.
  }

  resp, err := storageService.Objects.Patch(bucket, object, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the bucket in which to find the source object.
  sourceBucket := "{MY-SOURCE-BUCKET}"
  // TODO: Change placeholder value above.

  // Name of the source object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  sourceObject := "{MY-SOURCE-OBJECT}"
  // TODO: Change placeholder value above.

  // Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket
  // value, if any.
  destinationBucket := "{MY-DESTINATION-BUCKET}"
  // TODO: Change placeholder value above.

  // Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
  // object metadata's name value, if any. For information about how to URL encode object names to be
  // path safe, see Encoding URI Path Parts.
  destinationObject := "{MY-DESTINATION-OBJECT}"
  // TODO: Change placeholder value above.

  rb := storage.Object{
    // TODO: Add desired fields of the request body.
  }

  resp, err := storageService.Objects.Rewrite(sourceBucket, sourceObject, destinationBucket, destinationObject, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the bucket in which the object resides.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  // Name of the object. For information about how to URL encode object names to be path safe, see
  // Encoding URI Path Parts.
  object := "{MY-OBJECT}"
  // TODO: Change placeholder value above.

  rb := storage.Object{
    // TODO: Add desired fields of the request body.
  }

  resp, err := storageService.Objects.Update(bucket, object, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Storage JSON API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storage
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storage/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, storage.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storageService, err := storage.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the bucket in which to look for objects.
  bucket := "{MY-BUCKET}"
  // TODO: Change placeholder value above.

  rb := storage.Channel{
    // TODO: Add desired fields of the request body.
  }

  resp, err := storageService.Objects.WatchAll(bucket, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
