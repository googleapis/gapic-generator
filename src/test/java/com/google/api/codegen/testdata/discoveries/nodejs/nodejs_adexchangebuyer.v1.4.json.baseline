
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholder below to desired parameter value for the `get` method:

    // The account id
    id: 0,


    auth: authClient
  };

  adexchangebuyer.accounts.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    auth: authClient
  };

  adexchangebuyer.accounts.list(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `list` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholder below to desired parameter value for the `patch` method:

    // The account id
    id: 0,


    resource: {
      // TODO: Add desired properties of the request body to be changed.
    },

    auth: authClient
  };

  adexchangebuyer.accounts.patch(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholder below to desired parameter value for the `update` method:

    // The account id
    id: 0,


    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  };

  adexchangebuyer.accounts.update(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholder below to desired parameter value for the `get` method:

    // The account id.
    accountId: 0,


    auth: authClient
  };

  adexchangebuyer.billingInfo.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    auth: authClient
  };

  adexchangebuyer.billingInfo.list(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `list` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // The account id to get the budget information for.
    accountId: '',

    // The billing id to get the budget information for.
    billingId: '',


    auth: authClient
  };

  adexchangebuyer.budget.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `patch` method:

    // The account id associated with the budget being updated.
    accountId: '',

    // The billing id associated with the budget being updated.
    billingId: '',


    resource: {
      // TODO: Add desired properties of the request body to be changed.
    },

    auth: authClient
  };

  adexchangebuyer.budget.patch(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `update` method:

    // The account id associated with the budget being updated.
    accountId: '',

    // The billing id associated with the budget being updated.
    billingId: '',


    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  };

  adexchangebuyer.budget.update(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `addDeal` method:

    // The id for the account that will serve this creative.
    accountId: 0,

    // The buyer-specific id for this creative.
    buyerCreativeId: '{MY-BUYER-CREATIVE-ID}',

    // The id of the deal id to associate with this creative.
    dealId: '',


    auth: authClient
  };

  adexchangebuyer.creatives.addDeal(request, function(err) {
    if (err) {
      console.log(err);
    }
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `addDeal` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // The id for the account that will serve this creative.
    accountId: 0,

    // The buyer-specific id for this creative.
    buyerCreativeId: '{MY-BUYER-CREATIVE-ID}',


    auth: authClient
  };

  adexchangebuyer.creatives.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  };

  adexchangebuyer.creatives.insert(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    auth: authClient
  };

  var handlePage = function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var itemsPage = response['items'];
    if (!itemsPage) {
      return;
    }
    for (var i = 0; i < itemsPage.length; i++) {
      // TODO: Change code below to process each resource in `itemsPage`:
      console.log(JSON.stringify(itemsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      adexchangebuyer.creatives.list(request, handlePage);
    }
  };

  adexchangebuyer.creatives.list(request, handlePage);
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `list` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `removeDeal` method:

    // The id for the account that will serve this creative.
    accountId: 0,

    // The buyer-specific id for this creative.
    buyerCreativeId: '{MY-BUYER-CREATIVE-ID}',

    // The id of the deal id to disassociate with this creative.
    dealId: '',


    auth: authClient
  };

  adexchangebuyer.creatives.removeDeal(request, function(err) {
    if (err) {
      console.log(err);
    }
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `removeDeal` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholder below to desired parameter value for the `delete` method:

    // The proposalId to delete deals from.
    proposalId: '{MY-PROPOSAL-ID}',


    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  };

  adexchangebuyer.marketplacedeals.delete(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `delete` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholder below to desired parameter value for the `insert` method:

    // proposalId for which deals need to be added.
    proposalId: '{MY-PROPOSAL-ID}',


    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  };

  adexchangebuyer.marketplacedeals.insert(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholder below to desired parameter value for the `list` method:

    // The proposalId to get deals for. To search across all proposals specify order_id = '-' as part of
    // the URL.
    proposalId: '{MY-PROPOSAL-ID}',


    auth: authClient
  };

  adexchangebuyer.marketplacedeals.list(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `list` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholder below to desired parameter value for the `update` method:

    // The proposalId to edit deals on.
    proposalId: '{MY-PROPOSAL-ID}',


    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  };

  adexchangebuyer.marketplacedeals.update(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholder below to desired parameter value for the `insert` method:

    // The proposalId to add notes for.
    proposalId: '{MY-PROPOSAL-ID}',


    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  };

  adexchangebuyer.marketplacenotes.insert(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholder below to desired parameter value for the `list` method:

    // The proposalId to get notes for. To search across all proposals specify order_id = '-' as part of
    // the URL.
    proposalId: '{MY-PROPOSAL-ID}',


    auth: authClient
  };

  adexchangebuyer.marketplacenotes.list(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `list` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholder below to desired parameter value for the `updateproposal` method:

    // The private auction id to be updated.
    privateAuctionId: '{MY-PRIVATE-AUCTION-ID}',


    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  };

  adexchangebuyer.marketplaceprivateauction.updateproposal(request, function(err) {
    if (err) {
      console.log(err);
    }
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `updateproposal` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // The account id to get the reports.
    accountId: '',

    // The end time of the report in ISO 8601 timestamp format using UTC.
    endDateTime: '{MY-END-DATE-TIME}',

    // The start time of the report in ISO 8601 timestamp format using UTC.
    startDateTime: '{MY-START-DATE-TIME}',


    auth: authClient
  };

  adexchangebuyer.performanceReport.list(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `list` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `delete` method:

    // The account id to delete the pretargeting config for.
    accountId: '',

    // The specific id of the configuration to delete.
    configId: '',


    auth: authClient
  };

  adexchangebuyer.pretargetingConfig.delete(request, function(err) {
    if (err) {
      console.log(err);
    }
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `delete` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // The account id to get the pretargeting config for.
    accountId: '',

    // The specific id of the configuration to retrieve.
    configId: '',


    auth: authClient
  };

  adexchangebuyer.pretargetingConfig.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholder below to desired parameter value for the `insert` method:

    // The account id to insert the pretargeting config for.
    accountId: '',


    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  };

  adexchangebuyer.pretargetingConfig.insert(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholder below to desired parameter value for the `list` method:

    // The account id to get the pretargeting configs for.
    accountId: '',


    auth: authClient
  };

  adexchangebuyer.pretargetingConfig.list(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `list` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `patch` method:

    // The account id to update the pretargeting config for.
    accountId: '',

    // The specific id of the configuration to update.
    configId: '',


    resource: {
      // TODO: Add desired properties of the request body to be changed.
    },

    auth: authClient
  };

  adexchangebuyer.pretargetingConfig.patch(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `update` method:

    // The account id to update the pretargeting config for.
    accountId: '',

    // The specific id of the configuration to update.
    configId: '',


    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  };

  adexchangebuyer.pretargetingConfig.update(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholder below to desired parameter value for the `get` method:

    // The id for the product to get the head revision for.
    productId: '{MY-PRODUCT-ID}',


    auth: authClient
  };

  adexchangebuyer.products.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    auth: authClient
  };

  adexchangebuyer.products.search(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `search` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholder below to desired parameter value for the `get` method:

    // Id of the proposal to retrieve.
    proposalId: '{MY-PROPOSAL-ID}',


    auth: authClient
  };

  adexchangebuyer.proposals.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  };

  adexchangebuyer.proposals.insert(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `patch` method:

    // The proposal id to update.
    proposalId: '{MY-PROPOSAL-ID}',

    // The last known revision number to update. If the head revision in the marketplace database has since
    // changed, an error will be thrown. The caller should then fetch the latest proposal at head revision
    // and retry the update at that revision.
    revisionNumber: '',

    // The proposed action to take on the proposal. This field is required and it must be set when updating
    // a proposal.
    updateAction: '{MY-UPDATE-ACTION}',


    resource: {
      // TODO: Add desired properties of the request body to be changed.
    },

    auth: authClient
  };

  adexchangebuyer.proposals.patch(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    auth: authClient
  };

  adexchangebuyer.proposals.search(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `search` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholder below to desired parameter value for the `setupcomplete` method:

    // The proposal id for which the setup is complete
    proposalId: '{MY-PROPOSAL-ID}',


    auth: authClient
  };

  adexchangebuyer.proposals.setupcomplete(request, function(err) {
    if (err) {
      console.log(err);
    }
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `setupcomplete` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `update` method:

    // The proposal id to update.
    proposalId: '{MY-PROPOSAL-ID}',

    // The last known revision number to update. If the head revision in the marketplace database has since
    // changed, an error will be thrown. The caller should then fetch the latest proposal at head revision
    // and retry the update at that revision.
    revisionNumber: '',

    // The proposed action to take on the proposal. This field is required and it must be set when updating
    // a proposal.
    updateAction: '{MY-UPDATE-ACTION}',


    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  };

  adexchangebuyer.proposals.update(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Ad Exchange Buyer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/adexchangebuyer
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
var google = require('googleapis');
var adexchangebuyer = google.adexchangebuyer('v1.4');

getAuth(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }

  var request = {

    // TODO: Change placeholder below to desired parameter value for the `list` method:

    // The accountId of the publisher to get profiles for.
    accountId: 0,


    auth: authClient
  };

  adexchangebuyer.pubprofiles.list(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function getAuth(callback) {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `list` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return callback(new Error("Not implemented"), null);
};
