
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/logging/v2beta1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.logging.v2beta1.Logging;
import com.google.api.services.logging.v2beta1.model.ListLogEntriesRequest;
import com.google.api.services.logging.v2beta1.model.ListLogEntriesResponse;
import com.google.api.services.logging.v2beta1.model.LogEntry;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class LoggingExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Logging loggingService = new Logging.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Assign values to the desired fields.
    ListLogEntriesRequest requestBody = new ListLogEntriesRequest();


    Logging.Entries.List request = loggingService.entries().list(requestBody);

    Gson gson = new GsonBuilder().setPrettyPrinting().create();

    ListLogEntriesResponse response;
    do {
      response = request.execute();
      if (response.getEntries() == null)
        continue;

      for (LogEntry logEntry : response.getEntries()) {
        // TODO: Use logEntry
        System.out.println(gson.toJson(new JsonParser().parse(logEntry.toString())));
      }

      requestBody.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/logging/v2beta1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.logging.v2beta1.Logging;
import com.google.api.services.logging.v2beta1.model.WriteLogEntriesRequest;
import com.google.api.services.logging.v2beta1.model.WriteLogEntriesResponse;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class LoggingExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Logging loggingService = new Logging.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    // TODO: Assign values to the desired fields.
    WriteLogEntriesRequest requestBody = new WriteLogEntriesRequest();


    Logging.Entries.Write request = loggingService.entries().write(requestBody);
    WriteLogEntriesResponse response = request.execute();

    // TODO: Use response
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    System.out.println(gson.toJson(new JsonParser().parse(response.toString())));
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/logging/v2beta1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.logging.v2beta1.Logging;
import com.google.api.services.logging.v2beta1.model.ListMonitoredResourceDescriptorsResponse;
import com.google.api.services.logging.v2beta1.model.MonitoredResourceDescriptor;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class LoggingExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Logging loggingService = new Logging.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    Logging.MonitoredResourceDescriptors.List request = loggingService.monitoredResourceDescriptors().list();

    Gson gson = new GsonBuilder().setPrettyPrinting().create();

    ListMonitoredResourceDescriptorsResponse response;
    do {
      response = request.execute();
      if (response.getResourceDescriptors() == null)
        continue;

      for (MonitoredResourceDescriptor monitoredResourceDescriptor : response.getResourceDescriptors()) {
        // TODO: Use monitoredResourceDescriptor
        System.out.println(gson.toJson(new JsonParser().parse(monitoredResourceDescriptor.toString())));
      }

      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/logging/v2beta1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.logging.v2beta1.Logging;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class LoggingExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Logging loggingService = new Logging.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // Required. The resource name of the log to delete. Example: `"projects/my-project/logs/syslog"`.
    String logName = "projects/{MY-PROJECT}/logs/{MY-LOG}"; // TODO: Update placeholder value(s).

    Logging.Projects.Logs.Delete request = loggingService.projects().logs().delete(logName);
    request.execute();
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/logging/v2beta1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.logging.v2beta1.Logging;
import com.google.api.services.logging.v2beta1.model.LogMetric;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class LoggingExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Logging loggingService = new Logging.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // The resource name of the project in which to create the metric. Example: `"projects/my-project-id"`.
    // The new metric must be provided in the request.
    String projectName = "projects/{MY-PROJECT}"; // TODO: Update placeholder value(s).

    // TODO: Assign values to the desired fields.
    LogMetric requestBody = new LogMetric();


    Logging.Projects.Metrics.Create request = loggingService.projects().metrics().create(projectName, requestBody);
    LogMetric response = request.execute();

    // TODO: Use response
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    System.out.println(gson.toJson(new JsonParser().parse(response.toString())));
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/logging/v2beta1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.logging.v2beta1.Logging;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class LoggingExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Logging loggingService = new Logging.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // The resource name of the metric to delete. Example: `"projects/my-project-id/metrics/my-metric-id"`.
    String metricName = "projects/{MY-PROJECT}/metrics/{MY-METRIC}"; // TODO: Update placeholder value(s).

    Logging.Projects.Metrics.Delete request = loggingService.projects().metrics().delete(metricName);
    request.execute();
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/logging/v2beta1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.logging.v2beta1.Logging;
import com.google.api.services.logging.v2beta1.model.LogMetric;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class LoggingExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Logging loggingService = new Logging.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // The resource name of the desired metric. Example: `"projects/my-project-id/metrics/my-metric-id"`.
    String metricName = "projects/{MY-PROJECT}/metrics/{MY-METRIC}"; // TODO: Update placeholder value(s).

    Logging.Projects.Metrics.Get request = loggingService.projects().metrics().get(metricName);
    LogMetric response = request.execute();

    // TODO: Use response
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    System.out.println(gson.toJson(new JsonParser().parse(response.toString())));
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/logging/v2beta1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.logging.v2beta1.Logging;
import com.google.api.services.logging.v2beta1.model.ListLogMetricsResponse;
import com.google.api.services.logging.v2beta1.model.LogMetric;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class LoggingExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Logging loggingService = new Logging.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // Required. The resource name of the project containing the metrics. Example:
    // `"projects/my-project-id"`.
    String projectName = "projects/{MY-PROJECT}"; // TODO: Update placeholder value(s).

    Logging.Projects.Metrics.List request = loggingService.projects().metrics().list(projectName);

    Gson gson = new GsonBuilder().setPrettyPrinting().create();

    ListLogMetricsResponse response;
    do {
      response = request.execute();
      if (response.getMetrics() == null)
        continue;

      for (LogMetric logMetric : response.getMetrics()) {
        // TODO: Use logMetric
        System.out.println(gson.toJson(new JsonParser().parse(logMetric.toString())));
      }

      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/logging/v2beta1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.logging.v2beta1.Logging;
import com.google.api.services.logging.v2beta1.model.LogMetric;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class LoggingExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Logging loggingService = new Logging.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // The resource name of the metric to update. Example: `"projects/my-project-id/metrics/my-metric-id"`.
    // The updated metric must be provided in the request and have the same identifier that is specified in
    // `metricName`. If the metric does not exist, it is created.
    String metricName = "projects/{MY-PROJECT}/metrics/{MY-METRIC}"; // TODO: Update placeholder value(s).

    // TODO: Assign values to the desired fields.
    LogMetric requestBody = new LogMetric();


    Logging.Projects.Metrics.Update request = loggingService.projects().metrics().update(metricName, requestBody);
    LogMetric response = request.execute();

    // TODO: Use response
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    System.out.println(gson.toJson(new JsonParser().parse(response.toString())));
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/logging/v2beta1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.logging.v2beta1.Logging;
import com.google.api.services.logging.v2beta1.model.LogSink;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class LoggingExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Logging loggingService = new Logging.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // The resource name of the project in which to create the sink. Example: `"projects/my-project-id"`.
    // The new sink must be provided in the request.
    String projectName = "projects/{MY-PROJECT}"; // TODO: Update placeholder value(s).

    // TODO: Assign values to the desired fields.
    LogSink requestBody = new LogSink();


    Logging.Projects.Sinks.Create request = loggingService.projects().sinks().create(projectName, requestBody);
    LogSink response = request.execute();

    // TODO: Use response
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    System.out.println(gson.toJson(new JsonParser().parse(response.toString())));
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/logging/v2beta1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.logging.v2beta1.Logging;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class LoggingExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Logging loggingService = new Logging.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // The resource name of the sink to delete. Example: `"projects/my-project-id/sinks/my-sink-id"`.
    String sinkName = "projects/{MY-PROJECT}/sinks/{MY-SINK}"; // TODO: Update placeholder value(s).

    Logging.Projects.Sinks.Delete request = loggingService.projects().sinks().delete(sinkName);
    request.execute();
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/logging/v2beta1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.logging.v2beta1.Logging;
import com.google.api.services.logging.v2beta1.model.LogSink;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class LoggingExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Logging loggingService = new Logging.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // The resource name of the sink to return. Example: `"projects/my-project-id/sinks/my-sink-id"`.
    String sinkName = "projects/{MY-PROJECT}/sinks/{MY-SINK}"; // TODO: Update placeholder value(s).

    Logging.Projects.Sinks.Get request = loggingService.projects().sinks().get(sinkName);
    LogSink response = request.execute();

    // TODO: Use response
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    System.out.println(gson.toJson(new JsonParser().parse(response.toString())));
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/logging/v2beta1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.logging.v2beta1.Logging;
import com.google.api.services.logging.v2beta1.model.ListSinksResponse;
import com.google.api.services.logging.v2beta1.model.LogSink;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class LoggingExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Logging loggingService = new Logging.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // Required. The resource name of the project containing the sinks. Example:
    // `"projects/my-logging-project"`, `"projects/01234567890"`.
    String projectName = "projects/{MY-PROJECT}"; // TODO: Update placeholder value(s).

    Logging.Projects.Sinks.List request = loggingService.projects().sinks().list(projectName);

    Gson gson = new GsonBuilder().setPrettyPrinting().create();

    ListSinksResponse response;
    do {
      response = request.execute();
      if (response.getSinks() == null)
        continue;

      for (LogSink logSink : response.getSinks()) {
        // TODO: Use logSink
        System.out.println(gson.toJson(new JsonParser().parse(logSink.toString())));
      }

      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Logging API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/logging
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on maven or gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/logging/v2beta1/java
 */

import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.logging.v2beta1.Logging;
import com.google.api.services.logging.v2beta1.model.LogSink;
import com.google.gson.Gson;
import com.google.gson.JsonParser;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Collections;


public class LoggingExample {
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    // Authentication is provided by the `gcloud` tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    Logging loggingService = new Logging.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // The resource name of the sink to update. Example: `"projects/my-project-id/sinks/my-sink-id"`. The
    // updated sink must be provided in the request and have the same name that is specified in `sinkName`.
    // If the sink does not exist, it is created.
    String sinkName = "projects/{MY-PROJECT}/sinks/{MY-SINK}"; // TODO: Update placeholder value(s).

    // TODO: Assign values to the desired fields.
    LogSink requestBody = new LogSink();


    Logging.Projects.Sinks.Update request = loggingService.projects().sinks().update(sinkName, requestBody);
    LogSink response = request.execute();

    // TODO: Use response
    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    System.out.println(gson.toJson(new JsonParser().parse(response.toString())));
  }
}
