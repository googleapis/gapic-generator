
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Bigquery.v2;
using Google.Apis.Services;
using System.Threading.Tasks;


namespace BigquerySample
{
    public class BigqueryServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            BigqueryService bigqueryService = new BigqueryService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Project ID of the dataset being deleted
            string projectId = "{MY-PROJECT-ID}"; // TODO: Update placeholder value(s).

            // Dataset ID of dataset being deleted
            string datasetId = "{MY-DATASET-ID}"; // TODO: Update placeholder value(s).

            DatasetsResource.DeleteRequest request = bigqueryService.Datasets.Delete(projectId, datasetId);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Bigquery.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Bigquery.v2.Data;


namespace BigquerySample
{
    public class BigqueryServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            BigqueryService bigqueryService = new BigqueryService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Project ID of the requested dataset
            string projectId = "{MY-PROJECT-ID}"; // TODO: Update placeholder value(s).

            // Dataset ID of the requested dataset
            string datasetId = "{MY-DATASET-ID}"; // TODO: Update placeholder value(s).

            DatasetsResource.GetRequest request = bigqueryService.Datasets.Get(projectId, datasetId);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Dataset response = request.Execute();
            // Data.Dataset response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Bigquery.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Bigquery.v2.Data;


namespace BigquerySample
{
    public class BigqueryServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            BigqueryService bigqueryService = new BigqueryService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Project ID of the new dataset
            string projectId = "{MY-PROJECT-ID}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.Dataset requestBody = new Data.Dataset();

            DatasetsResource.InsertRequest request = bigqueryService.Datasets.Insert(requestBody, projectId);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Dataset response = request.Execute();
            // Data.Dataset response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Bigquery.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Bigquery.v2.Data;


namespace BigquerySample
{
    public class BigqueryServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            BigqueryService bigqueryService = new BigqueryService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Project ID of the datasets to be listed
            string projectId = "{MY-PROJECT-ID}"; // TODO: Update placeholder value(s).

            DatasetsResource.ListRequest request = bigqueryService.Datasets.List(projectId);

            Data.DatasetList response;
            do
            {
                // To execute asynchronously in an async method, replace request.Execute() as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Datasets == null)
                {
                    continue;
                }
                foreach (Data.DatasetList.Datasets datasets in response.Datasets)
                {
                    // TODO: Use datasets
                    Console.WriteLine(new JavaScriptSerializer().Serialize(datasets));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Bigquery.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Bigquery.v2.Data;


namespace BigquerySample
{
    public class BigqueryServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            BigqueryService bigqueryService = new BigqueryService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Project ID of the dataset being updated
            string projectId = "{MY-PROJECT-ID}"; // TODO: Update placeholder value(s).

            // Dataset ID of the dataset being updated
            string datasetId = "{MY-DATASET-ID}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties to be changed.
            Data.Dataset requestBody = new Data.Dataset();

            DatasetsResource.PatchRequest request = bigqueryService.Datasets.Patch(requestBody, projectId, datasetId);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Dataset response = request.Execute();
            // Data.Dataset response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Bigquery.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Bigquery.v2.Data;


namespace BigquerySample
{
    public class BigqueryServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            BigqueryService bigqueryService = new BigqueryService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Project ID of the dataset being updated
            string projectId = "{MY-PROJECT-ID}"; // TODO: Update placeholder value(s).

            // Dataset ID of the dataset being updated
            string datasetId = "{MY-DATASET-ID}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.Dataset requestBody = new Data.Dataset();

            DatasetsResource.UpdateRequest request = bigqueryService.Datasets.Update(requestBody, projectId, datasetId);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Dataset response = request.Execute();
            // Data.Dataset response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Bigquery.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Bigquery.v2.Data;


namespace BigquerySample
{
    public class BigqueryServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            BigqueryService bigqueryService = new BigqueryService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // [Required] Project ID of the job to cancel
            string projectId = "{MY-PROJECT-ID}"; // TODO: Update placeholder value(s).

            // [Required] Job ID of the job to cancel
            string jobId = "{MY-JOB-ID}"; // TODO: Update placeholder value(s).

            JobsResource.CancelRequest request = bigqueryService.Jobs.Cancel(projectId, jobId);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.JobCancelResponse response = request.Execute();
            // Data.JobCancelResponse response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Bigquery.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Bigquery.v2.Data;


namespace BigquerySample
{
    public class BigqueryServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            BigqueryService bigqueryService = new BigqueryService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // [Required] Project ID of the requested job
            string projectId = "{MY-PROJECT-ID}"; // TODO: Update placeholder value(s).

            // [Required] Job ID of the requested job
            string jobId = "{MY-JOB-ID}"; // TODO: Update placeholder value(s).

            JobsResource.GetRequest request = bigqueryService.Jobs.Get(projectId, jobId);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Job response = request.Execute();
            // Data.Job response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Bigquery.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Bigquery.v2.Data;


namespace BigquerySample
{
    public class BigqueryServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            BigqueryService bigqueryService = new BigqueryService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // [Required] Project ID of the query job
            string projectId = "{MY-PROJECT-ID}"; // TODO: Update placeholder value(s).

            // [Required] Job ID of the query job
            string jobId = "{MY-JOB-ID}"; // TODO: Update placeholder value(s).

            JobsResource.GetQueryResultsRequest request = bigqueryService.Jobs.GetQueryResults(projectId, jobId);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.GetQueryResultsResponse response = request.Execute();
            // Data.GetQueryResultsResponse response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Bigquery.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Bigquery.v2.Data;


namespace BigquerySample
{
    public class BigqueryServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            BigqueryService bigqueryService = new BigqueryService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Project ID of the project that will be billed for the job
            string projectId = "{MY-PROJECT-ID}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.Job requestBody = new Data.Job();

            JobsResource.InsertRequest request = bigqueryService.Jobs.Insert(requestBody, projectId);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Job response = request.Execute();
            // Data.Job response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Bigquery.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Bigquery.v2.Data;


namespace BigquerySample
{
    public class BigqueryServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            BigqueryService bigqueryService = new BigqueryService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Project ID of the jobs to list
            string projectId = "{MY-PROJECT-ID}"; // TODO: Update placeholder value(s).

            JobsResource.ListRequest request = bigqueryService.Jobs.List(projectId);

            Data.JobList response;
            do
            {
                // To execute asynchronously in an async method, replace request.Execute() as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Jobs == null)
                {
                    continue;
                }
                foreach (Data.JobList.Jobs jobs in response.Jobs)
                {
                    // TODO: Use jobs
                    Console.WriteLine(new JavaScriptSerializer().Serialize(jobs));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Bigquery.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Bigquery.v2.Data;


namespace BigquerySample
{
    public class BigqueryServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            BigqueryService bigqueryService = new BigqueryService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Project ID of the project billed for the query
            string projectId = "{MY-PROJECT-ID}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.QueryRequest requestBody = new Data.QueryRequest();

            JobsResource.QueryRequest request = bigqueryService.Jobs.Query(requestBody, projectId);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.QueryResponse response = request.Execute();
            // Data.QueryResponse response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Bigquery.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Bigquery.v2.Data;


namespace BigquerySample
{
    public class BigqueryServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            BigqueryService bigqueryService = new BigqueryService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            ProjectsResource.ListRequest request = bigqueryService.Projects.List();

            Data.ProjectList response;
            do
            {
                // To execute asynchronously in an async method, replace request.Execute() as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Projects == null)
                {
                    continue;
                }
                foreach (Data.ProjectList.Projects projects in response.Projects)
                {
                    // TODO: Use projects
                    Console.WriteLine(new JavaScriptSerializer().Serialize(projects));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Bigquery.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Bigquery.v2.Data;


namespace BigquerySample
{
    public class BigqueryServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            BigqueryService bigqueryService = new BigqueryService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Project ID of the destination table.
            string projectId = "{MY-PROJECT-ID}"; // TODO: Update placeholder value(s).

            // Dataset ID of the destination table.
            string datasetId = "{MY-DATASET-ID}"; // TODO: Update placeholder value(s).

            // Table ID of the destination table.
            string tableId = "{MY-TABLE-ID}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.TableDataInsertAllRequest requestBody = new Data.TableDataInsertAllRequest();

            TabledataResource.InsertAllRequest request = bigqueryService.Tabledata.InsertAll(requestBody, projectId, datasetId, tableId);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.TableDataInsertAllResponse response = request.Execute();
            // Data.TableDataInsertAllResponse response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Bigquery.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Bigquery.v2.Data;


namespace BigquerySample
{
    public class BigqueryServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            BigqueryService bigqueryService = new BigqueryService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Project ID of the table to read
            string projectId = "{MY-PROJECT-ID}"; // TODO: Update placeholder value(s).

            // Dataset ID of the table to read
            string datasetId = "{MY-DATASET-ID}"; // TODO: Update placeholder value(s).

            // Table ID of the table to read
            string tableId = "{MY-TABLE-ID}"; // TODO: Update placeholder value(s).

            TabledataResource.ListRequest request = bigqueryService.Tabledata.List(projectId, datasetId, tableId);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.TableDataList response = request.Execute();
            // Data.TableDataList response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Bigquery.v2;
using Google.Apis.Services;
using System.Threading.Tasks;


namespace BigquerySample
{
    public class BigqueryServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            BigqueryService bigqueryService = new BigqueryService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Project ID of the table to delete
            string projectId = "{MY-PROJECT-ID}"; // TODO: Update placeholder value(s).

            // Dataset ID of the table to delete
            string datasetId = "{MY-DATASET-ID}"; // TODO: Update placeholder value(s).

            // Table ID of the table to delete
            string tableId = "{MY-TABLE-ID}"; // TODO: Update placeholder value(s).

            TablesResource.DeleteRequest request = bigqueryService.Tables.Delete(projectId, datasetId, tableId);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Bigquery.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Bigquery.v2.Data;


namespace BigquerySample
{
    public class BigqueryServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            BigqueryService bigqueryService = new BigqueryService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Project ID of the requested table
            string projectId = "{MY-PROJECT-ID}"; // TODO: Update placeholder value(s).

            // Dataset ID of the requested table
            string datasetId = "{MY-DATASET-ID}"; // TODO: Update placeholder value(s).

            // Table ID of the requested table
            string tableId = "{MY-TABLE-ID}"; // TODO: Update placeholder value(s).

            TablesResource.GetRequest request = bigqueryService.Tables.Get(projectId, datasetId, tableId);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Table response = request.Execute();
            // Data.Table response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Bigquery.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Bigquery.v2.Data;


namespace BigquerySample
{
    public class BigqueryServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            BigqueryService bigqueryService = new BigqueryService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Project ID of the new table
            string projectId = "{MY-PROJECT-ID}"; // TODO: Update placeholder value(s).

            // Dataset ID of the new table
            string datasetId = "{MY-DATASET-ID}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.Table requestBody = new Data.Table();

            TablesResource.InsertRequest request = bigqueryService.Tables.Insert(requestBody, projectId, datasetId);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Table response = request.Execute();
            // Data.Table response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Bigquery.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Bigquery.v2.Data;


namespace BigquerySample
{
    public class BigqueryServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            BigqueryService bigqueryService = new BigqueryService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Project ID of the tables to list
            string projectId = "{MY-PROJECT-ID}"; // TODO: Update placeholder value(s).

            // Dataset ID of the tables to list
            string datasetId = "{MY-DATASET-ID}"; // TODO: Update placeholder value(s).

            TablesResource.ListRequest request = bigqueryService.Tables.List(projectId, datasetId);

            Data.TableList response;
            do
            {
                // To execute asynchronously in an async method, replace request.Execute() as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Tables == null)
                {
                    continue;
                }
                foreach (Data.TableList.Tables tables in response.Tables)
                {
                    // TODO: Use tables
                    Console.WriteLine(new JavaScriptSerializer().Serialize(tables));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Bigquery.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Bigquery.v2.Data;


namespace BigquerySample
{
    public class BigqueryServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            BigqueryService bigqueryService = new BigqueryService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Project ID of the table to update
            string projectId = "{MY-PROJECT-ID}"; // TODO: Update placeholder value(s).

            // Dataset ID of the table to update
            string datasetId = "{MY-DATASET-ID}"; // TODO: Update placeholder value(s).

            // Table ID of the table to update
            string tableId = "{MY-TABLE-ID}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties to be changed.
            Data.Table requestBody = new Data.Table();

            TablesResource.PatchRequest request = bigqueryService.Tables.Patch(requestBody, projectId, datasetId, tableId);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Table response = request.Execute();
            // Data.Table response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Bigquery.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Bigquery.v2.Data;


namespace BigquerySample
{
    public class BigqueryServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            BigqueryService bigqueryService = new BigqueryService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // Project ID of the table to update
            string projectId = "{MY-PROJECT-ID}"; // TODO: Update placeholder value(s).

            // Dataset ID of the table to update
            string datasetId = "{MY-DATASET-ID}"; // TODO: Update placeholder value(s).

            // Table ID of the table to update
            string tableId = "{MY-TABLE-ID}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.Table requestBody = new Data.Table();

            TablesResource.UpdateRequest request = bigqueryService.Tables.Update(requestBody, projectId, datasetId, tableId);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Table response = request.Execute();
            // Data.Table response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
