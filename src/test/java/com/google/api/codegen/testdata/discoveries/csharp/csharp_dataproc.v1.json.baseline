
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Dataproc.v1.Data;


namespace DataprocSample
{
    public class DataprocServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Create` method:

            // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
            string projectId = "{MY-PROJECT-ID}";

            // [Required] The Cloud Dataproc region in which to handle the request.
            string region = "{MY-REGION}";


            Data.Cluster requestBody = new Data.Cluster();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.RegionsResource.ClustersResource.CreateRequest request = dataprocService.Projects.Regions.Clusters.Create(requestBody, projectId, region);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Dataproc.v1.Data;


namespace DataprocSample
{
    public class DataprocServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
            string projectId = "{MY-PROJECT-ID}";

            // [Required] The Cloud Dataproc region in which to handle the request.
            string region = "{MY-REGION}";

            // [Required] The cluster name.
            string clusterName = "{MY-CLUSTER-NAME}";


            ProjectsResource.RegionsResource.ClustersResource.DeleteRequest request = dataprocService.Projects.Regions.Clusters.Delete(projectId, region, clusterName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Dataproc.v1.Data;


namespace DataprocSample
{
    public class DataprocServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Diagnose` method:

            // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
            string projectId = "{MY-PROJECT-ID}";

            // [Required] The Cloud Dataproc region in which to handle the request.
            string region = "{MY-REGION}";

            // [Required] The cluster name.
            string clusterName = "{MY-CLUSTER-NAME}";


            Data.DiagnoseClusterRequest requestBody = new Data.DiagnoseClusterRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.RegionsResource.ClustersResource.DiagnoseRequest request = dataprocService.Projects.Regions.Clusters.Diagnose(requestBody, projectId, region, clusterName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Dataproc.v1.Data;


namespace DataprocSample
{
    public class DataprocServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
            string projectId = "{MY-PROJECT-ID}";

            // [Required] The Cloud Dataproc region in which to handle the request.
            string region = "{MY-REGION}";

            // [Required] The cluster name.
            string clusterName = "{MY-CLUSTER-NAME}";


            ProjectsResource.RegionsResource.ClustersResource.GetRequest request = dataprocService.Projects.Regions.Clusters.Get(projectId, region, clusterName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Cluster response = request.Execute();
            // Data.Cluster response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Dataproc.v1.Data;


namespace DataprocSample
{
    public class DataprocServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
            string projectId = "{MY-PROJECT-ID}";

            // [Required] The Cloud Dataproc region in which to handle the request.
            string region = "{MY-REGION}";


            ProjectsResource.RegionsResource.ClustersResource.ListRequest request = dataprocService.Projects.Regions.Clusters.List(projectId, region);

            Data.ListClustersResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Clusters == null)
                {
                    continue;
                }
                foreach (Data.Cluster cluster in response.Clusters)
                {
                    // TODO: Change code below to process each `cluster` resource:
                    Console.WriteLine(new JavaScriptSerializer().Serialize(cluster));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Dataproc.v1.Data;


namespace DataprocSample
{
    public class DataprocServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // [Required] The ID of the Google Cloud Platform project the cluster belongs to.
            string projectId = "{MY-PROJECT-ID}";

            // [Required] The Cloud Dataproc region in which to handle the request.
            string region = "{MY-REGION}";

            // [Required] The cluster name.
            string clusterName = "{MY-CLUSTER-NAME}";


            Data.Cluster requestBody = new Data.Cluster();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            ProjectsResource.RegionsResource.ClustersResource.PatchRequest request = dataprocService.Projects.Regions.Clusters.Patch(requestBody, projectId, region, clusterName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Dataproc.v1.Data;


namespace DataprocSample
{
    public class DataprocServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Cancel` method:

            // [Required] The ID of the Google Cloud Platform project that the job belongs to.
            string projectId = "{MY-PROJECT-ID}";

            // [Required] The Cloud Dataproc region in which to handle the request.
            string region = "{MY-REGION}";

            // [Required] The job ID.
            string jobId = "{MY-JOB-ID}";


            Data.CancelJobRequest requestBody = new Data.CancelJobRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.RegionsResource.JobsResource.CancelRequest request = dataprocService.Projects.Regions.Jobs.Cancel(requestBody, projectId, region, jobId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Job response = request.Execute();
            // Data.Job response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Dataproc.v1.Data;


namespace DataprocSample
{
    public class DataprocServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // [Required] The ID of the Google Cloud Platform project that the job belongs to.
            string projectId = "{MY-PROJECT-ID}";

            // [Required] The Cloud Dataproc region in which to handle the request.
            string region = "{MY-REGION}";

            // [Required] The job ID.
            string jobId = "{MY-JOB-ID}";


            ProjectsResource.RegionsResource.JobsResource.DeleteRequest request = dataprocService.Projects.Regions.Jobs.Delete(projectId, region, jobId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Empty response = request.Execute();
            // Data.Empty response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Dataproc.v1.Data;


namespace DataprocSample
{
    public class DataprocServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // [Required] The ID of the Google Cloud Platform project that the job belongs to.
            string projectId = "{MY-PROJECT-ID}";

            // [Required] The Cloud Dataproc region in which to handle the request.
            string region = "{MY-REGION}";

            // [Required] The job ID.
            string jobId = "{MY-JOB-ID}";


            ProjectsResource.RegionsResource.JobsResource.GetRequest request = dataprocService.Projects.Regions.Jobs.Get(projectId, region, jobId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Job response = request.Execute();
            // Data.Job response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Dataproc.v1.Data;


namespace DataprocSample
{
    public class DataprocServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // [Required] The ID of the Google Cloud Platform project that the job belongs to.
            string projectId = "{MY-PROJECT-ID}";

            // [Required] The Cloud Dataproc region in which to handle the request.
            string region = "{MY-REGION}";


            ProjectsResource.RegionsResource.JobsResource.ListRequest request = dataprocService.Projects.Regions.Jobs.List(projectId, region);

            Data.ListJobsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Jobs == null)
                {
                    continue;
                }
                foreach (Data.Job job in response.Jobs)
                {
                    // TODO: Change code below to process each `job` resource:
                    Console.WriteLine(new JavaScriptSerializer().Serialize(job));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Dataproc.v1.Data;


namespace DataprocSample
{
    public class DataprocServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Submit` method:

            // [Required] The ID of the Google Cloud Platform project that the job belongs to.
            string projectId = "{MY-PROJECT-ID}";

            // [Required] The Cloud Dataproc region in which to handle the request.
            string region = "{MY-REGION}";


            Data.SubmitJobRequest requestBody = new Data.SubmitJobRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ProjectsResource.RegionsResource.JobsResource.SubmitRequest request = dataprocService.Projects.Regions.Jobs.Submit(requestBody, projectId, region);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Job response = request.Execute();
            // Data.Job response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Dataproc.v1.Data;


namespace DataprocSample
{
    public class DataprocServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Cancel` method:

            // The name of the operation resource to be cancelled.
            string name = "projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}";


            ProjectsResource.RegionsResource.OperationsResource.CancelRequest request = dataprocService.Projects.Regions.Operations.Cancel(name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Empty response = request.Execute();
            // Data.Empty response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Dataproc.v1.Data;


namespace DataprocSample
{
    public class DataprocServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // The name of the operation resource to be deleted.
            string name = "projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}";


            ProjectsResource.RegionsResource.OperationsResource.DeleteRequest request = dataprocService.Projects.Regions.Operations.Delete(name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Empty response = request.Execute();
            // Data.Empty response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Dataproc.v1.Data;


namespace DataprocSample
{
    public class DataprocServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // The name of the operation resource.
            string name = "projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}";


            ProjectsResource.RegionsResource.OperationsResource.GetRequest request = dataprocService.Projects.Regions.Operations.Get(name);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Dataproc.v1.Data;


namespace DataprocSample
{
    public class DataprocServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // The name of the operation collection.
            string name = "{MY-NAME}";


            ProjectsResource.RegionsResource.OperationsResource.ListRequest request = dataprocService.Projects.Regions.Operations.List(name);

            Data.ListOperationsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Operations == null)
                {
                    continue;
                }
                foreach (Data.Operation operation in response.Operations)
                {
                    // TODO: Change code below to process each `operation` resource:
                    Console.WriteLine(new JavaScriptSerializer().Serialize(operation));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
