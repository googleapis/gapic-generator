
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Dataproc.v1.Data;

namespace DataprocSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Create() method:
            // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
            string projectId = "";
            // [Required] The Cloud Dataproc region in which to handle the request.
            string region = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.Cluster content = new Data.Cluster();

            ProjectsResource.RegionsResource.ClustersResource.CreateRequest request = dataprocService.Projects.Regions.Clusters.Create(content, projectId, region);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Dataproc.v1.Data;

namespace DataprocSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:
            // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
            string projectId = "";
            // [Required] The Cloud Dataproc region in which to handle the request.
            string region = "";
            // [Required] The cluster name.
            string clusterName = "";

            ProjectsResource.RegionsResource.ClustersResource.DeleteRequest request = dataprocService.Projects.Regions.Clusters.Delete(projectId, region, clusterName);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Dataproc.v1.Data;

namespace DataprocSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Diagnose() method:
            // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
            string projectId = "";
            // [Required] The Cloud Dataproc region in which to handle the request.
            string region = "";
            // [Required] The cluster name.
            string clusterName = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.DiagnoseClusterRequest content = new Data.DiagnoseClusterRequest();

            ProjectsResource.RegionsResource.ClustersResource.DiagnoseRequest request = dataprocService.Projects.Regions.Clusters.Diagnose(content, projectId, region, clusterName);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Dataproc.v1.Data;

namespace DataprocSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:
            // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
            string projectId = "";
            // [Required] The Cloud Dataproc region in which to handle the request.
            string region = "";
            // [Required] The cluster name.
            string clusterName = "";

            ProjectsResource.RegionsResource.ClustersResource.GetRequest request = dataprocService.Projects.Regions.Clusters.Get(projectId, region, clusterName);
            Data.Cluster response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Cluster response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Dataproc.v1.Data;

namespace DataprocSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:
            // [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
            string projectId = "";
            // [Required] The Cloud Dataproc region in which to handle the request.
            string region = "";

            ProjectsResource.RegionsResource.ClustersResource.ListRequest request = dataprocService.Projects.Regions.Clusters.List(projectId, region);
            Data.ListClustersResponse response;
            do
            {
                response = request.Execute();
                if (response.Clusters == null)
                {
                    continue;
                }
                foreach (Data.Cluster item in response.Clusters)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.ListClustersResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Dataproc.v1.Data;

namespace DataprocSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Patch() method:
            // [Required] The ID of the Google Cloud Platform project the cluster belongs to.
            string projectId = "";
            // [Required] The Cloud Dataproc region in which to handle the request.
            string region = "";
            // [Required] The cluster name.
            string clusterName = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.Cluster content = new Data.Cluster();

            ProjectsResource.RegionsResource.ClustersResource.PatchRequest request = dataprocService.Projects.Regions.Clusters.Patch(content, projectId, region, clusterName);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Dataproc.v1.Data;

namespace DataprocSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Cancel() method:
            // [Required] The ID of the Google Cloud Platform project that the job belongs to.
            string projectId = "";
            // [Required] The Cloud Dataproc region in which to handle the request.
            string region = "";
            // [Required] The job ID.
            string jobId = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.CancelJobRequest content = new Data.CancelJobRequest();

            ProjectsResource.RegionsResource.JobsResource.CancelRequest request = dataprocService.Projects.Regions.Jobs.Cancel(content, projectId, region, jobId);
            Data.Job response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Job response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Dataproc.v1.Data;

namespace DataprocSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:
            // [Required] The ID of the Google Cloud Platform project that the job belongs to.
            string projectId = "";
            // [Required] The Cloud Dataproc region in which to handle the request.
            string region = "";
            // [Required] The job ID.
            string jobId = "";

            ProjectsResource.RegionsResource.JobsResource.DeleteRequest request = dataprocService.Projects.Regions.Jobs.Delete(projectId, region, jobId);
            Data.Empty response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Empty response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Dataproc.v1.Data;

namespace DataprocSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:
            // [Required] The ID of the Google Cloud Platform project that the job belongs to.
            string projectId = "";
            // [Required] The Cloud Dataproc region in which to handle the request.
            string region = "";
            // [Required] The job ID.
            string jobId = "";

            ProjectsResource.RegionsResource.JobsResource.GetRequest request = dataprocService.Projects.Regions.Jobs.Get(projectId, region, jobId);
            Data.Job response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Job response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Dataproc.v1.Data;

namespace DataprocSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:
            // [Required] The ID of the Google Cloud Platform project that the job belongs to.
            string projectId = "";
            // [Required] The Cloud Dataproc region in which to handle the request.
            string region = "";

            ProjectsResource.RegionsResource.JobsResource.ListRequest request = dataprocService.Projects.Regions.Jobs.List(projectId, region);
            Data.ListJobsResponse response;
            do
            {
                response = request.Execute();
                if (response.Jobs == null)
                {
                    continue;
                }
                foreach (Data.Job item in response.Jobs)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.ListJobsResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Dataproc.v1.Data;

namespace DataprocSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Submit() method:
            // [Required] The ID of the Google Cloud Platform project that the job belongs to.
            string projectId = "";
            // [Required] The Cloud Dataproc region in which to handle the request.
            string region = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.SubmitJobRequest content = new Data.SubmitJobRequest();

            ProjectsResource.RegionsResource.JobsResource.SubmitRequest request = dataprocService.Projects.Regions.Jobs.Submit(content, projectId, region);
            Data.Job response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Job response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Dataproc.v1.Data;

namespace DataprocSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Cancel() method:
            // The name of the operation resource to be cancelled.
            string name = "projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}";

            ProjectsResource.RegionsResource.OperationsResource.CancelRequest request = dataprocService.Projects.Regions.Operations.Cancel(name);
            Data.Empty response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Empty response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Dataproc.v1.Data;

namespace DataprocSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:
            // The name of the operation resource to be deleted.
            string name = "projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}";

            ProjectsResource.RegionsResource.OperationsResource.DeleteRequest request = dataprocService.Projects.Regions.Operations.Delete(name);
            Data.Empty response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Empty response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Dataproc.v1.Data;

namespace DataprocSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:
            // The name of the operation resource.
            string name = "projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}";

            ProjectsResource.RegionsResource.OperationsResource.GetRequest request = dataprocService.Projects.Regions.Operations.Get(name);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Dataproc API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dataproc
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Dataproc.v1;
using Google.Apis.Services;
using System.Threading.Tasks;

using Data = Google.Apis.Dataproc.v1.Data;

namespace DataprocSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DataprocService dataprocService = new DataprocService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:
            // The name of the operation collection.
            string name = "";

            ProjectsResource.RegionsResource.OperationsResource.ListRequest request = dataprocService.Projects.Regions.Operations.List(name);
            Data.ListOperationsResponse response;
            do
            {
                response = request.Execute();
                if (response.Operations == null)
                {
                    continue;
                }
                foreach (Data.Operation item in response.Operations)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.ListOperationsResponse response = await request.ExecuteAsync();
        }
    }
}
