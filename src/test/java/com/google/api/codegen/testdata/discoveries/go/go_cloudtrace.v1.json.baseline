
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Trace API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudtrace
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudtrace/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudtrace/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudtrace.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudtrace.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // * ID of the Cloud project where the trace data is stored.
  projectId := "" // TODO: Update placeholder value.

  resp, err := c.Projects.PatchTraces(projectId, &cloudtrace.Traces{
                                        // TODO: Fill required fields.
                                      }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Trace API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudtrace
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudtrace/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudtrace/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudtrace.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudtrace.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // * ID of the Cloud project where the trace data is stored.
  projectId := "" // TODO: Update placeholder value.

  // * ID of the trace to return.
  traceId := "" // TODO: Update placeholder value.

  resp, err := c.Projects.Traces.Get(projectId, traceId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Trace API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudtrace
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudtrace/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudtrace/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudtrace.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudtrace.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // * ID of the Cloud project where the trace data is stored.
  projectId := "" // TODO: Update placeholder value.


  call := c.Projects.Traces.List(projectId)
  if err := call.Pages(ctx, func(page *cloudtrace.ListTracesResponse) error {
    for _, v := range page.Traces {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
