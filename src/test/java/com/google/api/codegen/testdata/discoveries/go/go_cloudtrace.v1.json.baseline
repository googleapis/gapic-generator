
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Trace API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudtrace
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudtrace/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, cloudtrace.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the cloudtrace service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := cloudtrace.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `PatchTraces` method:

  // * ID of the Cloud project where the trace data is stored.
  projectId := ""

  tracesBody := cloudtrace.Traces{
    // TODO: Add desired fields of the `tracesBody` variable to be changed.
  }

  res, err := service.Projects.PatchTraces(projectId, &tracesBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Trace API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudtrace
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudtrace/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, cloudtrace.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the cloudtrace service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := cloudtrace.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * ID of the Cloud project where the trace data is stored.
  projectId := ""

  // * ID of the trace to return.
  traceId := ""

  res, err := service.Projects.Traces.Get(projectId, traceId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Trace API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudtrace
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudtrace/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, cloudtrace.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the cloudtrace service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := cloudtrace.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * ID of the Cloud project where the trace data is stored.
  projectId := ""

  req := service.Projects.Traces.List(projectId)
  if err := req.Pages(ctx, func(page *cloudtrace.ListTracesResponse) error {
    for _, trace := range page.Traces {
      // TODO: Change code below to process each `trace` resource:
      out, err := json.MarshalIndent(trace, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
