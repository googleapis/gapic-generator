
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Trace API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudtrace
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudtrace/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudtrace.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudtraceService, err := cloudtrace.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // ID of the Cloud project where the trace data is stored.
  projectId := ""  // TODO: Update placeholder value.

  rb := &cloudtrace.Traces{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := cloudtraceService.Projects.PatchTraces(projectId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Trace API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudtrace
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudtrace/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudtrace.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudtraceService, err := cloudtrace.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // ID of the Cloud project where the trace data is stored.
  projectId := ""  // TODO: Update placeholder value.

  // ID of the trace to return.
  traceId := ""  // TODO: Update placeholder value.

  resp, err := cloudtraceService.Projects.Traces.Get(projectId, traceId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Trace API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudtrace
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudtrace/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudtrace.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudtraceService, err := cloudtrace.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // ID of the Cloud project where the trace data is stored.
  projectId := ""  // TODO: Update placeholder value.

  req := cloudtraceService.Projects.Traces.List(projectId)
  if err := req.Pages(ctx, func(page *cloudtrace.ListTracesResponse) error {
    for _, trace := range page.Traces {
      // TODO: Change code below to process each `trace` resource:
      fmt.Printf("%#v\n", trace)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
