
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Datastore API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/datastore
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/datastore/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.datastore.v1.Datastore;
import com.google.api.services.datastore.v1.model.AllocateIdsRequest;
import com.google.api.services.datastore.v1.model.AllocateIdsResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DatastoreExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The ID of the project against which to make the request.
    String projectId = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    AllocateIdsRequest requestBody = new AllocateIdsRequest();

    Datastore datastoreService = createDatastoreService();
    Datastore.Projects.AllocateIds request = datastoreService.projects().allocateIds(projectId, requestBody);

    AllocateIdsResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Datastore createDatastoreService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Datastore.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google Cloud Platform Sample")
        .build();
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Datastore API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/datastore
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/datastore/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.datastore.v1.Datastore;
import com.google.api.services.datastore.v1.model.BeginTransactionRequest;
import com.google.api.services.datastore.v1.model.BeginTransactionResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DatastoreExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The ID of the project against which to make the request.
    String projectId = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    BeginTransactionRequest requestBody = new BeginTransactionRequest();

    Datastore datastoreService = createDatastoreService();
    Datastore.Projects.BeginTransaction request = datastoreService.projects().beginTransaction(projectId, requestBody);

    BeginTransactionResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Datastore createDatastoreService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Datastore.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google Cloud Platform Sample")
        .build();
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Datastore API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/datastore
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/datastore/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.datastore.v1.Datastore;
import com.google.api.services.datastore.v1.model.CommitRequest;
import com.google.api.services.datastore.v1.model.CommitResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DatastoreExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The ID of the project against which to make the request.
    String projectId = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    CommitRequest requestBody = new CommitRequest();

    Datastore datastoreService = createDatastoreService();
    Datastore.Projects.Commit request = datastoreService.projects().commit(projectId, requestBody);

    CommitResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Datastore createDatastoreService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Datastore.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google Cloud Platform Sample")
        .build();
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Datastore API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/datastore
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/datastore/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.datastore.v1.Datastore;
import com.google.api.services.datastore.v1.model.LookupRequest;
import com.google.api.services.datastore.v1.model.LookupResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DatastoreExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The ID of the project against which to make the request.
    String projectId = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    LookupRequest requestBody = new LookupRequest();

    Datastore datastoreService = createDatastoreService();
    Datastore.Projects.Lookup request = datastoreService.projects().lookup(projectId, requestBody);

    LookupResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Datastore createDatastoreService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Datastore.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google Cloud Platform Sample")
        .build();
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Datastore API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/datastore
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/datastore/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.datastore.v1.Datastore;
import com.google.api.services.datastore.v1.model.RollbackRequest;
import com.google.api.services.datastore.v1.model.RollbackResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DatastoreExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The ID of the project against which to make the request.
    String projectId = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    RollbackRequest requestBody = new RollbackRequest();

    Datastore datastoreService = createDatastoreService();
    Datastore.Projects.Rollback request = datastoreService.projects().rollback(projectId, requestBody);

    RollbackResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Datastore createDatastoreService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Datastore.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google Cloud Platform Sample")
        .build();
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Datastore API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/datastore
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/datastore/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.datastore.v1.Datastore;
import com.google.api.services.datastore.v1.model.RunQueryRequest;
import com.google.api.services.datastore.v1.model.RunQueryResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DatastoreExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The ID of the project against which to make the request.
    String projectId = "";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    RunQueryRequest requestBody = new RunQueryRequest();

    Datastore datastoreService = createDatastoreService();
    Datastore.Projects.RunQuery request = datastoreService.projects().runQuery(projectId, requestBody);

    RunQueryResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static Datastore createDatastoreService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new Datastore.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google Cloud Platform Sample")
        .build();
  }
}
