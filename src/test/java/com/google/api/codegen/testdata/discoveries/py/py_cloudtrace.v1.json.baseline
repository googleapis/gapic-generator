
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Trace API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudtrace
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('cloudtrace', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patchTraces` method:

# ID of the Cloud project where the trace data is stored.
projectId = '{MY-PROJECT-ID}'


traces_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.projects().patchTraces(projectId=projectId, body=traces_body)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Trace API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudtrace
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('cloudtrace', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# ID of the Cloud project where the trace data is stored.
projectId = '{MY-PROJECT-ID}'

# ID of the trace to return.
traceId = '{MY-TRACE-ID}'


request = service.projects().traces().get(projectId=projectId, traceId=traceId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Trace API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudtrace
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('cloudtrace', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# ID of the Cloud project where the trace data is stored.
projectId = '{MY-PROJECT-ID}'


traces = service.projects().traces()
request = traces.list(projectId=projectId)
while request is not None:
    response = request.execute()

    for trace in response['traces']:
        # TODO: Change code below to process each `trace` resource:
        pprint(trace)

    request = traces.list_next(previous_request=request, previous_response=response)
