
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Trace API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudtrace
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the cloudtrace service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('cloudtrace', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'patchTraces' method:

# * ID of the Cloud project where the trace data is stored.
projectId = ''

traces_body = {
# TODO: Add desired entries of the 'traces_body' dict to be changed
}

request = service.projects().patchTraces(projectId=projectId, body=traces_body)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Trace API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudtrace
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the cloudtrace service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('cloudtrace', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * ID of the Cloud project where the trace data is stored.
projectId = ''

# * ID of the trace to return.
traceId = ''

request = service.projects().traces().get(projectId=projectId, traceId=traceId)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Trace API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudtrace
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the cloudtrace service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('cloudtrace', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * ID of the Cloud project where the trace data is stored.
projectId = ''

traces = service.projects().traces()
request = traces.list(projectId=projectId)
while request is not None:
    response = request.execute()

    for trace in response['traces']:
        # TODO: Add code here to process each 'trace' resource

    request = traces.list_next(previous_request=request, previous_response=response)
