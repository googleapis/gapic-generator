
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the cloudresourcemanager service object (version v1beta1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * The id of the Organization resource to fetch.
organizationId = ''

request = service.organizations().get(organizationId=organizationId)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the cloudresourcemanager service object (version v1beta1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'getIamPolicy' method:

# * REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as
#   a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified
#   in this value is resource specific and is specified in the `getIamPolicy` documentation.
resource = ''

get_iam_policy_request_body = {
# TODO: Add desired entries of the 'get_iam_policy_request_body' dict
}

request = service.organizations().getIamPolicy(resource=resource, body=get_iam_policy_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the cloudresourcemanager service object (version v1beta1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)



organizations = service.organizations()
request = organizations.list()
while request is not None:
    response = request.execute()

    for organization in response['organizations']:
        # TODO: Add code here to process each 'organization' resource

    request = organizations.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the cloudresourcemanager service object (version v1beta1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'setIamPolicy' method:

# * REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as
#   a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified
#   in this value is resource specific and is specified in the `setIamPolicy` documentation.
resource = ''

set_iam_policy_request_body = {
# TODO: Add desired entries of the 'set_iam_policy_request_body' dict
}

request = service.organizations().setIamPolicy(resource=resource, body=set_iam_policy_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the cloudresourcemanager service object (version v1beta1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'testIamPermissions' method:

# * REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
#   specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the
#   path specified in this value is resource specific and is specified in the `testIamPermissions`
#   documentation.
resource = ''

test_iam_permissions_request_body = {
# TODO: Add desired entries of the 'test_iam_permissions_request_body' dict
}

request = service.organizations().testIamPermissions(resource=resource, body=test_iam_permissions_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the cloudresourcemanager service object (version v1beta1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'update' method:

# * An immutable id for the Organization that is assigned on creation. This should be omitted when
#   creating a new Organization. This field is read-only.
organizationId = ''

organization_body = {
# TODO: Add desired entries of the 'organization_body' dict
}

request = service.organizations().update(organizationId=organizationId, body=organization_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the cloudresourcemanager service object (version v1beta1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)



project_body = {
# TODO: Add desired entries of the 'project_body' dict
}

request = service.projects().create(body=project_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the cloudresourcemanager service object (version v1beta1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * The Project ID (for example, `foo-bar-123`). Required.
projectId = ''

request = service.projects().delete(projectId=projectId)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the cloudresourcemanager service object (version v1beta1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * The Project ID (for example, `my-project-123`). Required.
projectId = ''

request = service.projects().get(projectId=projectId)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the cloudresourcemanager service object (version v1beta1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'getIamPolicy' method:

# * REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as
#   a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified
#   in this value is resource specific and is specified in the `getIamPolicy` documentation.
resource = ''

get_iam_policy_request_body = {
# TODO: Add desired entries of the 'get_iam_policy_request_body' dict
}

request = service.projects().getIamPolicy(resource=resource, body=get_iam_policy_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the cloudresourcemanager service object (version v1beta1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)



projects = service.projects()
request = projects.list()
while request is not None:
    response = request.execute()

    for project in response['projects']:
        # TODO: Add code here to process each 'project' resource

    request = projects.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the cloudresourcemanager service object (version v1beta1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'setIamPolicy' method:

# * REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as
#   a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified
#   in this value is resource specific and is specified in the `setIamPolicy` documentation.
resource = ''

set_iam_policy_request_body = {
# TODO: Add desired entries of the 'set_iam_policy_request_body' dict
}

request = service.projects().setIamPolicy(resource=resource, body=set_iam_policy_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the cloudresourcemanager service object (version v1beta1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'testIamPermissions' method:

# * REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
#   specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the
#   path specified in this value is resource specific and is specified in the `testIamPermissions`
#   documentation.
resource = ''

test_iam_permissions_request_body = {
# TODO: Add desired entries of the 'test_iam_permissions_request_body' dict
}

request = service.projects().testIamPermissions(resource=resource, body=test_iam_permissions_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the cloudresourcemanager service object (version v1beta1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'undelete' method:

# * The project ID (for example, `foo-bar-123`). Required.
projectId = ''

undelete_project_request_body = {
# TODO: Add desired entries of the 'undelete_project_request_body' dict
}

request = service.projects().undelete(projectId=projectId, body=undelete_project_request_body)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the cloudresourcemanager service object (version v1beta1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'update' method:

# * The project ID (for example, `my-project-123`). Required.
projectId = ''

project_body = {
# TODO: Add desired entries of the 'project_body' dict
}

request = service.projects().update(projectId=projectId, body=project_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
