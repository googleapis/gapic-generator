
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)

# The id of the Organization resource to fetch.
organizationId = '{MY-ORGANIZATION-ID}'  # TODO: Update placeholder value(s).

request = service.organizations().get(organizationId=organizationId)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)

# REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as a
# path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
# this value is resource specific and is specified in the `getIamPolicy` documentation.
resource = '{MY-RESOURCE}'  # TODO: Update placeholder value(s).

get_iam_policy_request_body = {
    # TODO: Add the desired entries.
}


request = service.organizations().getIamPolicy(resource=resource, body=get_iam_policy_request_body)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)


organizations = service.organizations()
request = organizations.list()
while request is not None:
    response = request.execute()

    for organization in response['organizations']:
        # TODO: Use organization
        pprint(organization)

    request = organizations.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)

# REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as a
# path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
# this value is resource specific and is specified in the `setIamPolicy` documentation.
resource = '{MY-RESOURCE}'  # TODO: Update placeholder value(s).

set_iam_policy_request_body = {
    # TODO: Add the desired entries.
}


request = service.organizations().setIamPolicy(resource=resource, body=set_iam_policy_request_body)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)

# REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
# specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path
# specified in this value is resource specific and is specified in the `testIamPermissions`
# documentation.
resource = '{MY-RESOURCE}'  # TODO: Update placeholder value(s).

test_iam_permissions_request_body = {
    # TODO: Add the desired entries.
}


request = service.organizations().testIamPermissions(resource=resource, body=test_iam_permissions_request_body)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)

# An immutable id for the Organization that is assigned on creation. This should be omitted when
# creating a new Organization. This field is read-only.
organizationId = '{MY-ORGANIZATION-ID}'  # TODO: Update placeholder value(s).

organization_body = {
    # TODO: Add the desired entries.
}


request = service.organizations().update(organizationId=organizationId, body=organization_body)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)


project_body = {
    # TODO: Add the desired entries.
}


request = service.projects().create(body=project_body)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)

# The Project ID (for example, `foo-bar-123`). Required.
projectId = '{MY-PROJECT-ID}'  # TODO: Update placeholder value(s).

request = service.projects().delete(projectId=projectId)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)

# The Project ID (for example, `my-project-123`). Required.
projectId = '{MY-PROJECT-ID}'  # TODO: Update placeholder value(s).

request = service.projects().get(projectId=projectId)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)

# REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as a
# path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
# this value is resource specific and is specified in the `getIamPolicy` documentation.
resource = '{MY-RESOURCE}'  # TODO: Update placeholder value(s).

get_iam_policy_request_body = {
    # TODO: Add the desired entries.
}


request = service.projects().getIamPolicy(resource=resource, body=get_iam_policy_request_body)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)


projects = service.projects()
request = projects.list()
while request is not None:
    response = request.execute()

    for project in response['projects']:
        # TODO: Use project
        pprint(project)

    request = projects.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)

# REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as a
# path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
# this value is resource specific and is specified in the `setIamPolicy` documentation.
resource = '{MY-RESOURCE}'  # TODO: Update placeholder value(s).

set_iam_policy_request_body = {
    # TODO: Add the desired entries.
}


request = service.projects().setIamPolicy(resource=resource, body=set_iam_policy_request_body)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)

# REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
# specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path
# specified in this value is resource specific and is specified in the `testIamPermissions`
# documentation.
resource = '{MY-RESOURCE}'  # TODO: Update placeholder value(s).

test_iam_permissions_request_body = {
    # TODO: Add the desired entries.
}


request = service.projects().testIamPermissions(resource=resource, body=test_iam_permissions_request_body)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)

# The project ID (for example, `foo-bar-123`). Required.
projectId = '{MY-PROJECT-ID}'  # TODO: Update placeholder value(s).

undelete_project_request_body = {
    # TODO: Add the desired entries.
}


request = service.projects().undelete(projectId=projectId, body=undelete_project_request_body)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Resource Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/cloudresourcemanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('cloudresourcemanager', 'v1beta1', credentials=credentials)

# The project ID (for example, `my-project-123`). Required.
projectId = '{MY-PROJECT-ID}'  # TODO: Update placeholder value(s).

project_body = {
    # TODO: Add the desired entries.
}


request = service.projects().update(projectId=projectId, body=project_body)
response = request.execute()

# TODO: Use response
pprint(response)
