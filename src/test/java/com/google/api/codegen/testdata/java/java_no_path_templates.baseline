============== file: ../build.gradle ==============
Static or binary file content is not shown.
============== file: ../gradle/wrapper/gradle-wrapper.jar ==============
Static or binary file content is not shown.
============== file: ../gradle/wrapper/gradle-wrapper.properties ==============
Static or binary file content is not shown.
============== file: ../gradlew ==============
Static or binary file content is not shown.
============== file: ../gradlew.bat ==============
Static or binary file content is not shown.
============== file: ../settings.gradle ==============
Static or binary file content is not shown.
============== file: build.gradle ==============
buildscript {
  repositories {
    mavenCentral()
  }
}

apply plugin: 'java'

description = 'GAPIC library for google-cloud-library-v1'
group = 'com.google.api'
sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
  mavenCentral()
  mavenLocal()
}

dependencies {
  compile 'com.google.api:gax:1.0.0'
  testCompile 'com.google.api:gax:1.0.0:testlib'
  compile 'com.google.api:gax-grpc:0.18.0'
  testCompile 'com.google.api:gax-grpc:0.18.0:testlib'
  testCompile 'junit:junit:4.12'
  testCompile 'io.grpc:grpc-netty-shaded:1.9.0'
  // Remove this line if you are bundling your proto-generated classes together with your client classes
  compile project(':proto-google-cloud-library-v1')
  // Remove this line if you are bundling your proto-generated classes together with your client classes
  testCompile project(':grpc-google-cloud-library-v1')
}

task smokeTest(type: Test) {
  filter {
    includeTestsMatching "*SmokeTest"
    setFailOnNoMatchingTests false
  }
}

test {
  exclude "**/*SmokeTest*"
}

sourceSets {
  main {
    java {
      srcDir 'src/main/java'
    }
  }
}

compileJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'
============== file: src/main/java/com/google/gcloud/example/NoTemplatesApiServiceClient.java ==============
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.gcloud.example;

import com.google.api.core.ApiFunction;
import com.google.api.core.ApiFuture;
import com.google.api.core.ApiFutures;
import com.google.api.core.BetaApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.paging.AbstractFixedSizeCollection;
import com.google.api.gax.paging.AbstractPage;
import com.google.api.gax.paging.AbstractPagedListResponse;
import com.google.api.gax.paging.FixedSizeCollection;
import com.google.api.gax.paging.Page;
import com.google.api.gax.rpc.ApiExceptions;
import com.google.api.gax.rpc.PageContext;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.api.pathtemplate.PathTemplate;
import com.google.common.base.Function;
import com.google.common.collect.Iterables;
import com.google.example.noPathTemplates.v1.IncrementRequest;
import com.google.gcloud.example.stub.NoTemplatesApiServiceStub;
import com.google.gcloud.example.stub.NoTemplatesApiServiceStubSettings;
import com.google.protobuf.Empty;
import java.io.Closeable;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND SERVICE
/**
 * Service Description:
 *
 * <p>This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * <pre>
 * <code>
 * try (NoTemplatesApiServiceClient noTemplatesApiServiceClient = NoTemplatesApiServiceClient.create()) {
 *   IncrementRequest request = IncrementRequest.newBuilder().build();
 *   noTemplatesApiServiceClient.increment(request);
 * }
 * </code>
 * </pre>
 *
 * <p>Note: close() needs to be called on the noTemplatesApiServiceClient object to clean up resources such
 * as threads. In the example above, try-with-resources is used, which automatically calls
 * close().
 *
 * <p>The surface of this class includes several types of Java methods for each of the API's methods:
 *
 * <ol>
 * <li> A "flattened" method. With this type of method, the fields of the request type have been
 * converted into function parameters. It may be the case that not all fields are available
 * as parameters, and not every API method will have a flattened method entry point.
 * <li> A "request object" method. This type of method only takes one parameter, a request
 * object, which must be constructed before the call. Not every API method will have a request
 * object method.
 * <li> A "callable" method. This type of method takes no parameters and returns an immutable
 * API callable object, which can be used to initiate calls to the service.
 * </ol>
 *
 * <p>See the individual methods for example code.
 *
 * <p>Many parameters require resource names to be formatted in a particular way. To assist
 * with these names, this class includes a format method for each type of name, and additionally
 * a parse method to extract the individual identifiers contained within names that are
 * returned.
 *
 * <p>This class can be customized by passing in a custom instance of NoTemplatesApiServiceSettings to
 * create(). For example:
 *
 * To customize credentials:
 *
 * <pre>
 * <code>
 * NoTemplatesApiServiceSettings noTemplatesApiServiceSettings =
 *     NoTemplatesApiServiceSettings.newBuilder()
 *         .setCredentialsProvider(FixedCredentialsProvider.create(myCredentials))
 *         .build();
 * NoTemplatesApiServiceClient noTemplatesApiServiceClient =
 *     NoTemplatesApiServiceClient.create(noTemplatesApiServiceSettings);
 * </code>
 * </pre>
 */
@Generated("by gapic-generator")
@BetaApi
public class NoTemplatesApiServiceClient implements BackgroundResource {
  private final NoTemplatesApiServiceSettings settings;
  private final NoTemplatesApiServiceStub stub;




  /**
   * Constructs an instance of NoTemplatesApiServiceClient, using the given settings.
   * The channels are created based on the settings passed in, or defaults for any
   * settings that are not set.
   */
  public static final NoTemplatesApiServiceClient create(NoTemplatesApiServiceSettings settings) throws IOException {
    return new NoTemplatesApiServiceClient(settings);
  }

  /**
   * Constructs an instance of NoTemplatesApiServiceClient, using the given stub for making calls. This is for
   * advanced usage - prefer to use NoTemplatesApiServiceSettings}.
   */
  @BetaApi("A restructuring of stub classes is planned, so this may break in the future")
  public static final NoTemplatesApiServiceClient create(NoTemplatesApiServiceStub stub) {
    return new NoTemplatesApiServiceClient(stub);
  }

  /**
   * Constructs an instance of NoTemplatesApiServiceClient, using the given settings.
   * This is protected so that it is easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected NoTemplatesApiServiceClient(NoTemplatesApiServiceSettings settings) throws IOException {
    this.settings = settings;
    this.stub = ((NoTemplatesApiServiceStubSettings) settings.getStubSettings()).createStub();
  }

  @BetaApi("A restructuring of stub classes is planned, so this may break in the future")
  protected NoTemplatesApiServiceClient(NoTemplatesApiServiceStub stub) {
    this.settings = null;
    this.stub = stub;
  }

  public final NoTemplatesApiServiceSettings getSettings() {
    return settings;
  }

  @BetaApi("A restructuring of stub classes is planned, so this may break in the future")
  public NoTemplatesApiServiceStub getStub() {
    return stub;
  }


  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Increments something.
   *   Sometimes the comments are indented, but Sphinx doesn't like that. So
   *  in Python we trim all
   *      leading
   *         and trailing
   *    whitespace.
   *
   * Sample code:
   * <pre><code>
   * try (NoTemplatesApiServiceClient noTemplatesApiServiceClient = NoTemplatesApiServiceClient.create()) {
   *   IncrementRequest request = IncrementRequest.newBuilder().build();
   *   noTemplatesApiServiceClient.increment(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  private final void increment(IncrementRequest request) {
    incrementCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Increments something.
   *   Sometimes the comments are indented, but Sphinx doesn't like that. So
   *  in Python we trim all
   *      leading
   *         and trailing
   *    whitespace.
   *
   * Sample code:
   * <pre><code>
   * try (NoTemplatesApiServiceClient noTemplatesApiServiceClient = NoTemplatesApiServiceClient.create()) {
   *   IncrementRequest request = IncrementRequest.newBuilder().build();
   *   ApiFuture&lt;Void&gt; future = noTemplatesApiServiceClient.incrementCallable().futureCall(request);
   *   // Do something
   *   future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<IncrementRequest, Empty> incrementCallable() {
    return stub.incrementCallable();
  }

  @Override
  public final void close() {
    stub.close();
  }

  @Override
  public void shutdown() {
    stub.shutdown();
  }

  @Override
  public boolean isShutdown() {
    return stub.isShutdown();
  }

  @Override
  public boolean isTerminated() {
    return stub.isTerminated();
  }

  @Override
  public void shutdownNow() {
    stub.shutdownNow();
  }

  @Override
  public boolean awaitTermination(long duration, TimeUnit unit) throws InterruptedException {
    return stub.awaitTermination(duration, unit);
  }


}
============== file: src/main/java/com/google/gcloud/example/NoTemplatesApiServiceSettings.java ==============
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.gcloud.example;

import com.google.api.core.ApiFunction;
import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.core.GaxProperties;
import com.google.api.gax.core.GoogleCredentialsProvider;
import com.google.api.gax.core.InstantiatingExecutorProvider;
import com.google.api.gax.grpc.GaxGrpcProperties;
import com.google.api.gax.grpc.GrpcTransportChannel;
import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.ApiClientHeaderProvider;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.ClientSettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.StatusCode;
import com.google.api.gax.rpc.StubSettings;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.api.gax.rpc.UnaryCallSettings;
import com.google.auth.Credentials;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.google.example.noPathTemplates.v1.IncrementRequest;
import com.google.example.noPathTemplates.v1.NoTemplatesAPIServiceGrpc;
import com.google.gcloud.example.stub.NoTemplatesApiServiceStubSettings;
import com.google.protobuf.Empty;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.ScheduledExecutorService;
import javax.annotation.Generated;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * Settings class to configure an instance of {@link NoTemplatesApiServiceClient}.
 */
@Generated("by gapic-generator")
@BetaApi
public class NoTemplatesApiServiceSettings extends ClientSettings<NoTemplatesApiServiceSettings> {
  /**
   * Returns the object with the settings used for calls to increment.
   */
  public UnaryCallSettings<IncrementRequest, Empty> incrementSettings() {
    return ((NoTemplatesApiServiceStubSettings) getStubSettings()).incrementSettings();
  }


  public static final NoTemplatesApiServiceSettings create(NoTemplatesApiServiceStubSettings stub) throws IOException {
    return new NoTemplatesApiServiceSettings.Builder(stub.toBuilder()).build();
  }

  /**
   * Returns a builder for the default ExecutorProvider for this service.
   */
  public static InstantiatingExecutorProvider.Builder defaultExecutorProviderBuilder() {
    return NoTemplatesApiServiceStubSettings.defaultExecutorProviderBuilder();
  }



  /**
   * Returns a builder for the default credentials for this service.
   */
  public static GoogleCredentialsProvider.Builder defaultCredentialsProviderBuilder() {
    return NoTemplatesApiServiceStubSettings.defaultCredentialsProviderBuilder();
  }


  @BetaApi("The surface for customizing headers is not stable yet and may change in the future.")
  public static ApiClientHeaderProvider.Builder defaultApiClientHeaderProviderBuilder() {
    return NoTemplatesApiServiceStubSettings.defaultApiClientHeaderProviderBuilder();
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder() {
    return Builder.createDefault();
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder(ClientContext clientContext) {
    return new Builder(clientContext);
  }

  /**
   * Returns a builder containing all the values of this settings class.
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  protected NoTemplatesApiServiceSettings(Builder settingsBuilder) throws IOException {
    super(settingsBuilder);
  }

  /**
   * Builder for NoTemplatesApiServiceSettings.
   */
  public static class Builder extends ClientSettings.Builder<NoTemplatesApiServiceSettings, Builder> {
    protected Builder() throws IOException {
      this((ClientContext) null);
    }

    protected Builder(ClientContext clientContext) {
      super(NoTemplatesApiServiceStubSettings.newBuilder(clientContext));
    }

    private static Builder createDefault() {
      return new Builder(NoTemplatesApiServiceStubSettings.newBuilder());
    }

    protected Builder(NoTemplatesApiServiceSettings settings) {
      super(settings.getStubSettings().toBuilder());
    }

    protected Builder(NoTemplatesApiServiceStubSettings.Builder stubSettings) {
      super(stubSettings);
    }


    public NoTemplatesApiServiceStubSettings.Builder getStubSettingsBuilder() {
      return ((NoTemplatesApiServiceStubSettings.Builder) getStubSettings());
    }

    // NEXT_MAJOR_VER: remove 'throws Exception'
    /**
     * Applies the given settings updater function to all of the unary API methods in this service.
     *
     * Note: This method does not support applying settings to streaming methods.
     */
    public Builder applyToAllUnaryMethods(ApiFunction<UnaryCallSettings.Builder<?, ?>, Void> settingsUpdater) throws Exception {
      super.applyToAllUnaryMethods(getStubSettingsBuilder().unaryMethodSettingsBuilders(), settingsUpdater);
      return this;
    }

    /**
     * Returns the builder for the settings used for calls to increment.
     */
    public UnaryCallSettings.Builder<IncrementRequest, Empty> incrementSettings() {
      return getStubSettingsBuilder().incrementSettings();
    }

    @Override
    public NoTemplatesApiServiceSettings build() throws IOException {
      return new NoTemplatesApiServiceSettings(this);
    }
  }
}
============== file: src/main/java/com/google/gcloud/example/package-info.java ==============
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A client to Google Fake API.
 *
 * The interfaces provided are listed below, along with usage samples.
 *
 * ===========================
 * NoTemplatesApiServiceClient
 * ===========================
 *
 * Service Description:
 */

package com.google.gcloud.example;
============== file: src/main/java/com/google/gcloud/example/stub/GrpcNoTemplatesApiServiceCallableFactory.java ==============
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.gcloud.example.stub;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.core.BackgroundResourceAggregation;
import com.google.api.gax.grpc.GrpcCallSettings;
import com.google.api.gax.grpc.GrpcCallableFactory;
import com.google.api.gax.grpc.GrpcStubCallableFactory;
import com.google.api.gax.rpc.BatchingCallSettings;
import com.google.api.gax.rpc.BidiStreamingCallable;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.ClientStreamingCallable;
import com.google.api.gax.rpc.OperationCallSettings;
import com.google.api.gax.rpc.OperationCallable;
import com.google.api.gax.rpc.PagedCallSettings;
import com.google.api.gax.rpc.RequestParamsExtractor;
import com.google.api.gax.rpc.ServerStreamingCallSettings;
import com.google.api.gax.rpc.ServerStreamingCallable;
import com.google.api.gax.rpc.StreamingCallSettings;
import com.google.api.gax.rpc.UnaryCallSettings;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.common.collect.ImmutableMap;
import com.google.example.noPathTemplates.v1.IncrementRequest;
import com.google.gcloud.example.NoTemplatesApiServiceSettings;
import com.google.longrunning.Operation;
import com.google.longrunning.stub.OperationsStub;
import com.google.protobuf.Empty;
import io.grpc.MethodDescriptor;
import io.grpc.protobuf.ProtoUtils;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * gRPC callable factory implementation for Google Fake API.
 *
 * <p>This class is for advanced usage.
 */
@Generated("by gapic-generator")
@BetaApi("The surface for use by generated code is not stable yet and may change in the future.")
public class GrpcNoTemplatesApiServiceCallableFactory implements GrpcStubCallableFactory {
  @Override
  public <RequestT, ResponseT> UnaryCallable<RequestT, ResponseT> createUnaryCallable(
      GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,
      UnaryCallSettings<RequestT, ResponseT> callSettings, ClientContext clientContext) {
    return GrpcCallableFactory.createUnaryCallable(grpcCallSettings, callSettings, clientContext);
  }

  @Override
  public <RequestT, ResponseT, PagedListResponseT> UnaryCallable<RequestT, PagedListResponseT> createPagedCallable(
      GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,
      PagedCallSettings<RequestT, ResponseT, PagedListResponseT> pagedCallSettings,
      ClientContext clientContext) {
    return GrpcCallableFactory.createPagedCallable(grpcCallSettings, pagedCallSettings, clientContext);
  }

  @Override
  public <RequestT, ResponseT> UnaryCallable<RequestT, ResponseT> createBatchingCallable(
      GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,
      BatchingCallSettings<RequestT, ResponseT> batchingCallSettings, ClientContext clientContext) {
    return GrpcCallableFactory.createBatchingCallable(grpcCallSettings, batchingCallSettings, clientContext);
  }

  @Override
  public <RequestT, ResponseT, MetadataT> OperationCallable<RequestT, ResponseT, MetadataT> createOperationCallable(
      GrpcCallSettings<RequestT, com.google.longrunning.Operation> grpcCallSettings,
      OperationCallSettings<RequestT, ResponseT, MetadataT> operationCallSettings,
      ClientContext clientContext, OperationsStub operationsStub) {
    return GrpcCallableFactory.createOperationCallable(grpcCallSettings, operationCallSettings, clientContext, operationsStub);
  }

  @Override
  public <RequestT, ResponseT> BidiStreamingCallable<RequestT, ResponseT> createBidiStreamingCallable(
      GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,
      StreamingCallSettings<RequestT, ResponseT> streamingCallSettings,
      ClientContext clientContext) {
    return GrpcCallableFactory.createBidiStreamingCallable(grpcCallSettings, streamingCallSettings, clientContext);
  }

  @Override
  public <RequestT, ResponseT> ServerStreamingCallable<RequestT, ResponseT> createServerStreamingCallable(
      GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,
      ServerStreamingCallSettings<RequestT, ResponseT> streamingCallSettings,
      ClientContext clientContext) {
    return GrpcCallableFactory.createServerStreamingCallable(grpcCallSettings, streamingCallSettings, clientContext);
  }

  @Override
  public <RequestT, ResponseT> ClientStreamingCallable<RequestT, ResponseT> createClientStreamingCallable(
      GrpcCallSettings<RequestT, ResponseT> grpcCallSettings,
      StreamingCallSettings<RequestT, ResponseT> streamingCallSettings,
      ClientContext clientContext) {
    return GrpcCallableFactory.createClientStreamingCallable(grpcCallSettings, streamingCallSettings, clientContext);
  }
}
============== file: src/main/java/com/google/gcloud/example/stub/GrpcNoTemplatesApiServiceStub.java ==============
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.gcloud.example.stub;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.core.BackgroundResourceAggregation;
import com.google.api.gax.grpc.GrpcCallSettings;
import com.google.api.gax.grpc.GrpcCallableFactory;
import com.google.api.gax.grpc.GrpcStubCallableFactory;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.RequestParamsExtractor;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.common.collect.ImmutableMap;
import com.google.example.noPathTemplates.v1.IncrementRequest;
import com.google.gcloud.example.NoTemplatesApiServiceSettings;
import com.google.protobuf.Empty;
import io.grpc.MethodDescriptor;
import io.grpc.protobuf.ProtoUtils;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * gRPC stub implementation for Google Fake API.
 *
 * <p>This class is for advanced usage and reflects the underlying API directly.
 */
@Generated("by gapic-generator")
@BetaApi("A restructuring of stub classes is planned, so this may break in the future")
public class GrpcNoTemplatesApiServiceStub extends NoTemplatesApiServiceStub {

  private static final MethodDescriptor<IncrementRequest, Empty> incrementMethodDescriptor =
      MethodDescriptor.<IncrementRequest, Empty>newBuilder()
          .setType(MethodDescriptor.MethodType.UNARY)
          .setFullMethodName("google.cloud.example.v1.NoTemplatesAPIService/Increment")
          .setRequestMarshaller(ProtoUtils.marshaller(IncrementRequest.getDefaultInstance()))
          .setResponseMarshaller(ProtoUtils.marshaller(Empty.getDefaultInstance()))
          .build();


  private final BackgroundResource backgroundResources;

  private final UnaryCallable<IncrementRequest, Empty> incrementCallable;

  private final GrpcStubCallableFactory callableFactory;

  public static final GrpcNoTemplatesApiServiceStub create(NoTemplatesApiServiceStubSettings settings) throws IOException {
    return new GrpcNoTemplatesApiServiceStub(settings, ClientContext.create(settings));
  }

  public static final GrpcNoTemplatesApiServiceStub create(ClientContext clientContext) throws IOException {
    return new GrpcNoTemplatesApiServiceStub(NoTemplatesApiServiceStubSettings.newBuilder().build(), clientContext);
  }

  public static final GrpcNoTemplatesApiServiceStub create(ClientContext clientContext, GrpcStubCallableFactory callableFactory) throws IOException {
    return new GrpcNoTemplatesApiServiceStub(NoTemplatesApiServiceStubSettings.newBuilder().build(), clientContext, callableFactory);
  }

  /**
   * Constructs an instance of GrpcNoTemplatesApiServiceStub, using the given settings.
   * This is protected so that it is easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected GrpcNoTemplatesApiServiceStub(NoTemplatesApiServiceStubSettings settings, ClientContext clientContext) throws IOException {
    this(settings, clientContext, new GrpcNoTemplatesApiServiceCallableFactory());
  }

  /**
   * Constructs an instance of GrpcNoTemplatesApiServiceStub, using the given settings.
   * This is protected so that it is easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected GrpcNoTemplatesApiServiceStub(NoTemplatesApiServiceStubSettings settings, ClientContext clientContext, GrpcStubCallableFactory callableFactory) throws IOException {
    this.callableFactory = callableFactory;

    GrpcCallSettings<IncrementRequest, Empty> incrementTransportSettings =
        GrpcCallSettings.<IncrementRequest, Empty>newBuilder()
            .setMethodDescriptor(incrementMethodDescriptor)
            .build();

    this.incrementCallable = callableFactory.createUnaryCallable(incrementTransportSettings,settings.incrementSettings(), clientContext);

    backgroundResources = new BackgroundResourceAggregation(clientContext.getBackgroundResources());
  }


  public UnaryCallable<IncrementRequest, Empty> incrementCallable() {
    return incrementCallable;
  }

  @Override
  public final void close() {
    shutdown();
  }

  @Override
  public void shutdown() {
    backgroundResources.shutdown();
  }

  @Override
  public boolean isShutdown() {
    return backgroundResources.isShutdown();
  }

  @Override
  public boolean isTerminated() {
    return backgroundResources.isTerminated();
  }

  @Override
  public void shutdownNow() {
    backgroundResources.shutdownNow();
  }

  @Override
  public boolean awaitTermination(long duration, TimeUnit unit) throws InterruptedException {
    return backgroundResources.awaitTermination(duration, unit);
  }

}
============== file: src/main/java/com/google/gcloud/example/stub/NoTemplatesApiServiceStub.java ==============
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.gcloud.example.stub;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.example.noPathTemplates.v1.IncrementRequest;
import com.google.protobuf.Empty;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * Base stub class for Google Fake API.
 *
 * <p>This class is for advanced usage and reflects the underlying API directly.
 */
@Generated("by gapic-generator")
@BetaApi("A restructuring of stub classes is planned, so this may break in the future")
public abstract class NoTemplatesApiServiceStub implements BackgroundResource {


  public UnaryCallable<IncrementRequest, Empty> incrementCallable() {
    throw new UnsupportedOperationException("Not implemented: incrementCallable()");
  }

  @Override
  public abstract void close();
}
============== file: src/main/java/com/google/gcloud/example/stub/NoTemplatesApiServiceStubSettings.java ==============
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.gcloud.example.stub;

import com.google.api.core.ApiFunction;
import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.core.GaxProperties;
import com.google.api.gax.core.GoogleCredentialsProvider;
import com.google.api.gax.core.InstantiatingExecutorProvider;
import com.google.api.gax.grpc.GaxGrpcProperties;
import com.google.api.gax.grpc.GrpcTransportChannel;
import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.ApiClientHeaderProvider;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.ClientSettings;
import com.google.api.gax.rpc.HeaderProvider;
import com.google.api.gax.rpc.StatusCode;
import com.google.api.gax.rpc.StubSettings;
import com.google.api.gax.rpc.TransportChannelProvider;
import com.google.api.gax.rpc.UnaryCallSettings;
import com.google.auth.Credentials;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.google.example.noPathTemplates.v1.IncrementRequest;
import com.google.example.noPathTemplates.v1.NoTemplatesAPIServiceGrpc;
import com.google.protobuf.Empty;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.ScheduledExecutorService;
import javax.annotation.Generated;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * Settings class to configure an instance of {@link NoTemplatesApiServiceStub}.
 */
@Generated("by gapic-generator")
@BetaApi
public class NoTemplatesApiServiceStubSettings extends StubSettings<NoTemplatesApiServiceStubSettings> {

  private final UnaryCallSettings<IncrementRequest, Empty> incrementSettings;

  /**
   * Returns the object with the settings used for calls to increment.
   */
  public UnaryCallSettings<IncrementRequest, Empty> incrementSettings() {
    return incrementSettings;
  }


  @BetaApi("A restructuring of stub classes is planned, so this may break in the future")
  public NoTemplatesApiServiceStub createStub() throws IOException {
    if (getTransportChannelProvider()
        .getTransportName()
        .equals(GrpcTransportChannel.getGrpcTransportName())) {
      return GrpcNoTemplatesApiServiceStub.create(this);
    } else {
      throw new UnsupportedOperationException(
          "Transport not supported: " + getTransportChannelProvider().getTransportName());
    }
  }

  /**
   * Returns a builder for the default ExecutorProvider for this service.
   */
  public static InstantiatingExecutorProvider.Builder defaultExecutorProviderBuilder() {
    return InstantiatingExecutorProvider.newBuilder();
  }



  /**
   * Returns a builder for the default credentials for this service.
   */
  public static GoogleCredentialsProvider.Builder defaultCredentialsProviderBuilder() {
    return GoogleCredentialsProvider.newBuilder()
        ;
  }


  @BetaApi("The surface for customizing headers is not stable yet and may change in the future.")
  public static ApiClientHeaderProvider.Builder defaultApiClientHeaderProviderBuilder() {
    return ApiClientHeaderProvider.newBuilder()
        .setGeneratedLibToken("gapic", GaxProperties.getLibraryVersion(NoTemplatesApiServiceStubSettings.class))
        .setTransportToken(GaxGrpcProperties.getGrpcTokenName(), GaxGrpcProperties.getGrpcVersion());
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder() {
    return Builder.createDefault();
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder(ClientContext clientContext) {
    return new Builder(clientContext);
  }

  /**
   * Returns a builder containing all the values of this settings class.
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  protected NoTemplatesApiServiceStubSettings(Builder settingsBuilder) throws IOException {
    super(settingsBuilder);

    incrementSettings = settingsBuilder.incrementSettings().build();
  }




  /**
   * Builder for NoTemplatesApiServiceStubSettings.
   */
  public static class Builder extends StubSettings.Builder<NoTemplatesApiServiceStubSettings, Builder> {
    private final ImmutableList<UnaryCallSettings.Builder<?, ?>> unaryMethodSettingsBuilders;

    private final UnaryCallSettings.Builder<IncrementRequest, Empty> incrementSettings;

    private static final ImmutableMap<String, ImmutableSet<StatusCode.Code>> RETRYABLE_CODE_DEFINITIONS;

    static {
      ImmutableMap.Builder<String, ImmutableSet<StatusCode.Code>> definitions = ImmutableMap.builder();
      RETRYABLE_CODE_DEFINITIONS = definitions.build();
    }

    private static final ImmutableMap<String, RetrySettings> RETRY_PARAM_DEFINITIONS;

    static {
      ImmutableMap.Builder<String, RetrySettings> definitions = ImmutableMap.builder();
      RetrySettings settings = null;
      RETRY_PARAM_DEFINITIONS = definitions.build();
    }

    protected Builder() {
      this((ClientContext) null);
    }

    protected Builder(ClientContext clientContext) {
      super(clientContext);

      incrementSettings = UnaryCallSettings.newUnaryCallSettingsBuilder();

      unaryMethodSettingsBuilders = ImmutableList.<UnaryCallSettings.Builder<?, ?>>of(
          incrementSettings
      );

      initDefaults(this);
    }

    private static Builder createDefault() {
      Builder builder = new Builder((ClientContext) null);
      return initDefaults(builder);
    }

    private static Builder initDefaults(Builder builder) {

      builder.incrementSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get(""))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      return builder;
    }

    protected Builder(NoTemplatesApiServiceStubSettings settings) {
      super(settings);

      incrementSettings = settings.incrementSettings.toBuilder();

      unaryMethodSettingsBuilders = ImmutableList.<UnaryCallSettings.Builder<?, ?>>of(
          incrementSettings
      );
    }

    // NEXT_MAJOR_VER: remove 'throws Exception'
    /**
     * Applies the given settings updater function to all of the unary API methods in this service.
     *
     * Note: This method does not support applying settings to streaming methods.
     */
    public Builder applyToAllUnaryMethods(ApiFunction<UnaryCallSettings.Builder<?, ?>, Void> settingsUpdater) throws Exception {
      super.applyToAllUnaryMethods(unaryMethodSettingsBuilders, settingsUpdater);
      return this;
    }

    public ImmutableList<UnaryCallSettings.Builder<?, ?>> unaryMethodSettingsBuilders() {
      return unaryMethodSettingsBuilders;
    }

    /**
     * Returns the builder for the settings used for calls to increment.
     */
    public UnaryCallSettings.Builder<IncrementRequest, Empty> incrementSettings() {
      return incrementSettings;
    }

    @Override
    public NoTemplatesApiServiceStubSettings build() throws IOException {
      return new NoTemplatesApiServiceStubSettings(this);
    }
  }
}
============== file: src/test/java/com/google/gcloud/example/MockNoTemplatesAPIService.java ==============
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.gcloud.example;

import com.google.api.core.BetaApi;
import com.google.api.gax.grpc.testing.MockGrpcService;
import com.google.protobuf.GeneratedMessageV3;
import io.grpc.ServerServiceDefinition;
import java.util.List;

@javax.annotation.Generated("by GAPIC")
@BetaApi
public class MockNoTemplatesAPIService implements MockGrpcService  {
  private final MockNoTemplatesAPIServiceImpl serviceImpl;

  public MockNoTemplatesAPIService() {
    serviceImpl = new MockNoTemplatesAPIServiceImpl();
  }

  @Override
  public List<GeneratedMessageV3> getRequests() {
    return serviceImpl.getRequests();
  }

  @Override
  public void addResponse(GeneratedMessageV3 response) {
    serviceImpl.addResponse(response);
  }

  @Override
  public void addException(Exception exception) {
    serviceImpl.addException(exception);
  }

  @Override
  public ServerServiceDefinition getServiceDefinition() {
    return serviceImpl.bindService();
  }

  @Override
  public void reset() {
    serviceImpl.reset();
  }
}
============== file: src/test/java/com/google/gcloud/example/MockNoTemplatesAPIServiceImpl.java ==============
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.gcloud.example;

import com.google.api.core.BetaApi;
import com.google.common.collect.Lists;
import com.google.example.noPathTemplates.v1.IncrementRequest;
import com.google.example.noPathTemplates.v1.NoTemplatesAPIServiceGrpc.NoTemplatesAPIServiceImplBase;
import com.google.protobuf.Empty;
import com.google.protobuf.GeneratedMessageV3;
import io.grpc.stub.StreamObserver;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

@javax.annotation.Generated("by GAPIC")
@BetaApi
public class MockNoTemplatesAPIServiceImpl extends NoTemplatesAPIServiceImplBase {
  private ArrayList<GeneratedMessageV3> requests;
  private Queue<Object> responses;

  public MockNoTemplatesAPIServiceImpl() {
    requests = new ArrayList<>();
    responses = new LinkedList<>();
  }

  public List<GeneratedMessageV3> getRequests() {
    return requests;
  }

  public void addResponse(GeneratedMessageV3 response) {
    responses.add(response);
  }

  public void setResponses(List<GeneratedMessageV3> responses) {
    this.responses = new LinkedList<Object>(responses);
  }

  public void addException(Exception exception) {
    responses.add(exception);
  }

  public void reset() {
    requests = new ArrayList<>();
    responses = new LinkedList<>();
  }

  @Override
  public void increment(IncrementRequest request,
    StreamObserver<Empty> responseObserver) {
    Object response = responses.remove();
    if (response instanceof Empty) {
      requests.add(request);
      responseObserver.onNext((Empty) response);
      responseObserver.onCompleted();
    } else if (response instanceof Exception) {
      responseObserver.onError((Exception) response);
    } else {
      responseObserver.onError(new IllegalArgumentException("Unrecognized response type"));
    }
  }

}
============== file: src/test/java/com/google/gcloud/example/NoTemplatesApiServiceClientTest.java ==============
/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.gcloud.example;

import com.google.api.gax.core.NoCredentialsProvider;
import com.google.api.gax.grpc.GaxGrpcProperties;
import com.google.api.gax.grpc.GrpcStatusCode;
import com.google.api.gax.grpc.testing.LocalChannelProvider;
import com.google.api.gax.grpc.testing.MockGrpcService;
import com.google.api.gax.grpc.testing.MockServiceHelper;
import com.google.api.gax.rpc.ApiClientHeaderProvider;
import com.google.api.gax.rpc.InvalidArgumentException;
import com.google.api.gax.rpc.StatusCode;
import com.google.common.collect.Lists;
import com.google.protobuf.GeneratedMessageV3;
import io.grpc.Status;
import io.grpc.StatusRuntimeException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.ExecutionException;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

@javax.annotation.Generated("by GAPIC")
public class NoTemplatesApiServiceClientTest {
  private static MockNoTemplatesAPIService mockNoTemplatesAPIService;
  private static MockServiceHelper serviceHelper;
  private NoTemplatesApiServiceClient client;
  private LocalChannelProvider channelProvider;

  @BeforeClass
  public static void startStaticServer() {
    mockNoTemplatesAPIService = new MockNoTemplatesAPIService();
    serviceHelper = new MockServiceHelper("in-process-1", Arrays.<MockGrpcService>asList(mockNoTemplatesAPIService));
    serviceHelper.start();
  }

  @AfterClass
  public static void stopServer() {
    serviceHelper.stop();
  }

  @Before
  public void setUp() throws IOException {
    serviceHelper.reset();
    channelProvider = serviceHelper.createChannelProvider();
    NoTemplatesApiServiceSettings settings = NoTemplatesApiServiceSettings.newBuilder()
        .setTransportChannelProvider(channelProvider)
        .setCredentialsProvider(NoCredentialsProvider.create())
        .build();
    client = NoTemplatesApiServiceClient.create(settings);
  }

  @After
  public void tearDown() throws Exception {
    client.close();
  }

}
