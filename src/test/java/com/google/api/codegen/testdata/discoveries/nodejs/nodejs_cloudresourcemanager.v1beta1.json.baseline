
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var cloudresourcemanager = google.cloudresourcemanager('v1beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'get' method:

    // * The id of the Organization resource to fetch.
    organizationId: "",

    // Auth client
    auth: authClient
  };

  cloudresourcemanager.organizations.get(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var cloudresourcemanager = google.cloudresourcemanager('v1beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'getIamPolicy' method:

    // * REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as
    //   a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified
    //   in this value is resource specific and is specified in the `getIamPolicy` documentation.
    resource_: "",

    resource: {},

    // Auth client
    auth: authClient
  };

  cloudresourcemanager.organizations.getIamPolicy(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var cloudresourcemanager = google.cloudresourcemanager('v1beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'list' method:

    // Auth client
    auth: authClient
  };


  var recur = function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      if (result.nextPageToken) {
        request.pageToken = result.nextPageToken;
        cloudresourcemanager.organizations.list(request, recur);
      }
    }
  };

  cloudresourcemanager.organizations.list(request, recur);
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var cloudresourcemanager = google.cloudresourcemanager('v1beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'setIamPolicy' method:

    // * REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as
    //   a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified
    //   in this value is resource specific and is specified in the `setIamPolicy` documentation.
    resource_: "",

    resource: {},

    // Auth client
    auth: authClient
  };

  cloudresourcemanager.organizations.setIamPolicy(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var cloudresourcemanager = google.cloudresourcemanager('v1beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'testIamPermissions' method:

    // * REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
    //   specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the
    //   path specified in this value is resource specific and is specified in the `testIamPermissions`
    //   documentation.
    resource_: "",

    resource: {},

    // Auth client
    auth: authClient
  };

  cloudresourcemanager.organizations.testIamPermissions(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var cloudresourcemanager = google.cloudresourcemanager('v1beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'update' method:

    // * An immutable id for the Organization that is assigned on creation. This should be omitted when
    //   creating a new Organization. This field is read-only.
    organizationId: "",

    resource: {},

    // Auth client
    auth: authClient
  };

  cloudresourcemanager.organizations.update(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var cloudresourcemanager = google.cloudresourcemanager('v1beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'create' method:

    resource: {},

    // Auth client
    auth: authClient
  };

  cloudresourcemanager.projects.create(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var cloudresourcemanager = google.cloudresourcemanager('v1beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

    // * The Project ID (for example, `foo-bar-123`). Required.
    projectId: "",

    // Auth client
    auth: authClient
  };

  cloudresourcemanager.projects.delete(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var cloudresourcemanager = google.cloudresourcemanager('v1beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'get' method:

    // * The Project ID (for example, `my-project-123`). Required.
    projectId: "",

    // Auth client
    auth: authClient
  };

  cloudresourcemanager.projects.get(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var cloudresourcemanager = google.cloudresourcemanager('v1beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'getIamPolicy' method:

    // * REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as
    //   a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified
    //   in this value is resource specific and is specified in the `getIamPolicy` documentation.
    resource_: "",

    resource: {},

    // Auth client
    auth: authClient
  };

  cloudresourcemanager.projects.getIamPolicy(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var cloudresourcemanager = google.cloudresourcemanager('v1beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'list' method:

    // Auth client
    auth: authClient
  };


  var recur = function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      if (result.nextPageToken) {
        request.pageToken = result.nextPageToken;
        cloudresourcemanager.projects.list(request, recur);
      }
    }
  };

  cloudresourcemanager.projects.list(request, recur);
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var cloudresourcemanager = google.cloudresourcemanager('v1beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'setIamPolicy' method:

    // * REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as
    //   a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified
    //   in this value is resource specific and is specified in the `setIamPolicy` documentation.
    resource_: "",

    resource: {},

    // Auth client
    auth: authClient
  };

  cloudresourcemanager.projects.setIamPolicy(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var cloudresourcemanager = google.cloudresourcemanager('v1beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'testIamPermissions' method:

    // * REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
    //   specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the
    //   path specified in this value is resource specific and is specified in the `testIamPermissions`
    //   documentation.
    resource_: "",

    resource: {},

    // Auth client
    auth: authClient
  };

  cloudresourcemanager.projects.testIamPermissions(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var cloudresourcemanager = google.cloudresourcemanager('v1beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'undelete' method:

    // * The project ID (for example, `foo-bar-123`). Required.
    projectId: "",

    resource: {},

    // Auth client
    auth: authClient
  };

  cloudresourcemanager.projects.undelete(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var cloudresourcemanager = google.cloudresourcemanager('v1beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'update' method:

    // * The project ID (for example, `my-project-123`). Required.
    projectId: "",

    resource: {},

    // Auth client
    auth: authClient
  };

  cloudresourcemanager.projects.update(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
