
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_bucket_access_control' method:

# * Name of a bucket.
bucket = ''

# * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
#   group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''

# Perform the call
service.delete_bucket_access_control(bucket, entity)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_bucket_access_control' method:

# * Name of a bucket.
bucket = ''

# * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
#   group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''

# Perform the call
response = service.get_bucket_access_control(bucket, entity)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_bucket_access_control' method:

# * Name of a bucket.
bucket = ''

bucket_access_control_object = Google::Apis::StorageV1::BucketAccessControl.new


# Perform the call
response = service.insert_bucket_access_control(bucket, bucket_access_control_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_bucket_access_controls' method:

# * Name of a bucket.
bucket = ''

# Perform the call
response = service.list_bucket_access_controls(bucket)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'patch_bucket_access_control' method:

# * Name of a bucket.
bucket = ''

# * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
#   group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''

bucket_access_control_object = Google::Apis::StorageV1::BucketAccessControl.new


# Perform the call
response = service.patch_bucket_access_control(bucket, entity, bucket_access_control_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'update_bucket_access_control' method:

# * Name of a bucket.
bucket = ''

# * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
#   group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''

bucket_access_control_object = Google::Apis::StorageV1::BucketAccessControl.new


# Perform the call
response = service.update_bucket_access_control(bucket, entity, bucket_access_control_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_bucket' method:

# * Name of a bucket.
bucket = ''

# Perform the call
service.delete_bucket(bucket)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_bucket' method:

# * Name of a bucket.
bucket = ''

# Perform the call
response = service.get_bucket(bucket)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_bucket' method:

# * A valid API project identifier.
project = ''

bucket_object = Google::Apis::StorageV1::Bucket.new


# Perform the call
response = service.insert_bucket(project, bucket_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_buckets' method:

# * A valid API project identifier.
project = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_buckets(project, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'patch_bucket' method:

# * Name of a bucket.
bucket = ''

bucket_object = Google::Apis::StorageV1::Bucket.new


# Perform the call
response = service.patch_bucket(bucket, bucket_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'update_bucket' method:

# * Name of a bucket.
bucket = ''

bucket_object = Google::Apis::StorageV1::Bucket.new


# Perform the call
response = service.update_bucket(bucket, bucket_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])



channel_object = Google::Apis::StorageV1::Channel.new


# Perform the call
service.stop_channel(channel_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_default_object_access_control' method:

# * Name of a bucket.
bucket = ''

# * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
#   group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''

# Perform the call
service.delete_default_object_access_control(bucket, entity)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_default_object_access_control' method:

# * Name of a bucket.
bucket = ''

# * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
#   group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''

# Perform the call
response = service.get_default_object_access_control(bucket, entity)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_default_object_access_control' method:

# * Name of a bucket.
bucket = ''

object_access_control_object = Google::Apis::StorageV1::ObjectAccessControl.new


# Perform the call
response = service.insert_default_object_access_control(bucket, object_access_control_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_default_object_access_controls' method:

# * Name of a bucket.
bucket = ''

# Perform the call
response = service.list_default_object_access_controls(bucket)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'patch_default_object_access_control' method:

# * Name of a bucket.
bucket = ''

# * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
#   group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''

object_access_control_object = Google::Apis::StorageV1::ObjectAccessControl.new


# Perform the call
response = service.patch_default_object_access_control(bucket, entity, object_access_control_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'update_default_object_access_control' method:

# * Name of a bucket.
bucket = ''

# * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
#   group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''

object_access_control_object = Google::Apis::StorageV1::ObjectAccessControl.new


# Perform the call
response = service.update_default_object_access_control(bucket, entity, object_access_control_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_object_access_control' method:

# * Name of a bucket.
bucket = ''

# * Name of the object. For information about how to URL encode object names to be path safe, see
#   Encoding URI Path Parts.
object = ''

# * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
#   group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''

# Perform the call
service.delete_object_access_control(bucket, object, entity)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_object_access_control' method:

# * Name of a bucket.
bucket = ''

# * Name of the object. For information about how to URL encode object names to be path safe, see
#   Encoding URI Path Parts.
object = ''

# * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
#   group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''

# Perform the call
response = service.get_object_access_control(bucket, object, entity)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_object_access_control' method:

# * Name of a bucket.
bucket = ''

# * Name of the object. For information about how to URL encode object names to be path safe, see
#   Encoding URI Path Parts.
object = ''

object_access_control_object = Google::Apis::StorageV1::ObjectAccessControl.new


# Perform the call
response = service.insert_object_access_control(bucket, object, object_access_control_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_object_access_controls' method:

# * Name of a bucket.
bucket = ''

# * Name of the object. For information about how to URL encode object names to be path safe, see
#   Encoding URI Path Parts.
object = ''

# Perform the call
response = service.list_object_access_controls(bucket, object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'patch_object_access_control' method:

# * Name of a bucket.
bucket = ''

# * Name of the object. For information about how to URL encode object names to be path safe, see
#   Encoding URI Path Parts.
object = ''

# * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
#   group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''

object_access_control_object = Google::Apis::StorageV1::ObjectAccessControl.new


# Perform the call
response = service.patch_object_access_control(bucket, object, entity, object_access_control_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'update_object_access_control' method:

# * Name of a bucket.
bucket = ''

# * Name of the object. For information about how to URL encode object names to be path safe, see
#   Encoding URI Path Parts.
object = ''

# * The entity holding the permission. Can be user-userId, user-emailAddress, group-groupId,
#   group-emailAddress, allUsers, or allAuthenticatedUsers.
entity = ''

object_access_control_object = Google::Apis::StorageV1::ObjectAccessControl.new


# Perform the call
response = service.update_object_access_control(bucket, object, entity, object_access_control_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'compose_object' method:

# * Name of the bucket in which to store the new object.
destination_bucket = ''

# * Name of the new object. For information about how to URL encode object names to be path safe, see
#   Encoding URI Path Parts.
destination_object = ''

compose_request_object = Google::Apis::StorageV1::ComposeRequest.new


# Perform the call
response = service.compose_object(destination_bucket, destination_object, compose_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'copy_object' method:

# * Name of the bucket in which to find the source object.
source_bucket = ''

# * Name of the source object. For information about how to URL encode object names to be path safe,
#   see Encoding URI Path Parts.
source_object = ''

# * Name of the bucket in which to store the new object. Overrides the provided object metadata's
#   bucket value, if any.For information about how to URL encode object names to be path safe, see
#   Encoding URI Path Parts.
destination_bucket = ''

# * Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
#   object metadata's name value, if any.
destination_object = ''

object_object = Google::Apis::StorageV1::Object.new


# Perform the call
response = service.copy_object(source_bucket, source_object, destination_bucket, destination_object, object_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_object' method:

# * Name of the bucket in which the object resides.
bucket = ''

# * Name of the object. For information about how to URL encode object names to be path safe, see
#   Encoding URI Path Parts.
object = ''

# Perform the call
service.delete_object(bucket, object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_object' method:

# * Name of the bucket in which the object resides.
bucket = ''

# * Name of the object. For information about how to URL encode object names to be path safe, see
#   Encoding URI Path Parts.
object = ''

# Perform the call
response = service.get_object(bucket, object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'insert_object' method:

# * Name of the bucket in which to store the new object. Overrides the provided object metadata's
#   bucket value, if any.
bucket = ''

object_object = Google::Apis::StorageV1::Object.new


# Perform the call
response = service.insert_object(bucket, object_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_objects' method:

# * Name of the bucket in which to look for objects.
bucket = ''

# Perform the call
result_list = service.fetch_all(items: :items) { |token|
  service.list_objects(bucket, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'patch_object' method:

# * Name of the bucket in which the object resides.
bucket = ''

# * Name of the object. For information about how to URL encode object names to be path safe, see
#   Encoding URI Path Parts.
object = ''

object_object = Google::Apis::StorageV1::Object.new


# Perform the call
response = service.patch_object(bucket, object, object_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'rewrite_object' method:

# * Name of the bucket in which to find the source object.
source_bucket = ''

# * Name of the source object. For information about how to URL encode object names to be path safe,
#   see Encoding URI Path Parts.
source_object = ''

# * Name of the bucket in which to store the new object. Overrides the provided object metadata's
#   bucket value, if any.
destination_bucket = ''

# * Name of the new object. Required when the object metadata is not otherwise provided. Overrides the
#   object metadata's name value, if any. For information about how to URL encode object names to be
#   path safe, see Encoding URI Path Parts.
destination_object = ''

object_object = Google::Apis::StorageV1::Object.new


# Perform the call
response = service.rewrite_object(source_bucket, source_object, destination_bucket, destination_object, object_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'update_object' method:

# * Name of the bucket in which the object resides.
bucket = ''

# * Name of the object. For information about how to URL encode object names to be path safe, see
#   Encoding URI Path Parts.
object = ''

object_object = Google::Apis::StorageV1::Object.new


# Perform the call
response = service.update_object(bucket, object, object_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Cloud Storage JSON API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/storage
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/storage_v1'

service = Google::Apis::StorageV1::StorageService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'watch_all_objects' method:

# * Name of the bucket in which to look for objects.
bucket = ''

channel_object = Google::Apis::StorageV1::Channel.new


# Perform the call
response = service.watch_all_objects(bucket, channel_object)
