
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var pubsub = google.pubsub('v1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'acknowledge' method:

    // The subscription whose message is being acknowledged.
    subscription: "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}",
    resource: {},
    // Auth client
    auth: authClient
  };

  pubsub.projects.subscriptions.acknowledge(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var pubsub = google.pubsub('v1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'create' method:

    // The name of the subscription. It must have the format
    // `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must start with a letter, and
    // contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`), periods
    // (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters in
    // length, and it must not start with `"goog"`.
    name: "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}",
    resource: {},
    // Auth client
    auth: authClient
  };

  pubsub.projects.subscriptions.create(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var pubsub = google.pubsub('v1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

    // The subscription to delete.
    subscription: "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}",
    // Auth client
    auth: authClient
  };

  pubsub.projects.subscriptions.delete(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var pubsub = google.pubsub('v1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'get' method:

    // The name of the subscription to get.
    subscription: "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}",
    // Auth client
    auth: authClient
  };

  pubsub.projects.subscriptions.get(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var pubsub = google.pubsub('v1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'getIamPolicy' method:

    // REQUIRED: The resource for which policy is being requested. `resource` is usually specified as a
    // path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in
    // this value is resource specific and is specified in the documentation for the respective
    // GetIamPolicy rpc.
    resource_: "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}",
    // Auth client
    auth: authClient
  };

  pubsub.projects.subscriptions.getIamPolicy(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var pubsub = google.pubsub('v1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'list' method:

    // The name of the cloud project that subscriptions belong to.
    project: "projects/{MY-PROJECT}",
    // Auth client
    auth: authClient
  };


  var recur = function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      if (result.nextPageToken) {
        request.pageToken = result.nextPageToken;
        pubsub.projects.subscriptions.list(request, recur);
      }
    }
  };

  pubsub.projects.subscriptions.list(request, recur);
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var pubsub = google.pubsub('v1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'modifyAckDeadline' method:

    // The name of the subscription.
    subscription: "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}",
    resource: {},
    // Auth client
    auth: authClient
  };

  pubsub.projects.subscriptions.modifyAckDeadline(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var pubsub = google.pubsub('v1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'modifyPushConfig' method:

    // The name of the subscription.
    subscription: "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}",
    resource: {},
    // Auth client
    auth: authClient
  };

  pubsub.projects.subscriptions.modifyPushConfig(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var pubsub = google.pubsub('v1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'pull' method:

    // The subscription from which messages should be pulled.
    subscription: "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}",
    resource: {},
    // Auth client
    auth: authClient
  };

  pubsub.projects.subscriptions.pull(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var pubsub = google.pubsub('v1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'setIamPolicy' method:

    // REQUIRED: The resource for which policy is being specified. `resource` is usually specified as a
    // path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in
    // this value is resource specific and is specified in the documentation for the respective
    // SetIamPolicy rpc.
    resource_: "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}",
    resource: {},
    // Auth client
    auth: authClient
  };

  pubsub.projects.subscriptions.setIamPolicy(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var pubsub = google.pubsub('v1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'testIamPermissions' method:

    // REQUIRED: The resource for which policy detail is being requested. `resource` is usually specified
    // as a path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path
    // specified in this value is resource specific and is specified in the documentation for the
    // respective TestIamPermissions rpc.
    resource_: "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}",
    resource: {},
    // Auth client
    auth: authClient
  };

  pubsub.projects.subscriptions.testIamPermissions(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var pubsub = google.pubsub('v1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'create' method:

    // The name of the topic. It must have the format `"projects/{project}/topics/{topic}"`. `{topic}` must
    // start with a letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
    // underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be
    // between 3 and 255 characters in length, and it must not start with `"goog"`.
    name: "projects/{MY-PROJECT}/topics/{MY-TOPIC}",
    resource: {},
    // Auth client
    auth: authClient
  };

  pubsub.projects.topics.create(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var pubsub = google.pubsub('v1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

    // Name of the topic to delete.
    topic: "projects/{MY-PROJECT}/topics/{MY-TOPIC}",
    // Auth client
    auth: authClient
  };

  pubsub.projects.topics.delete(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var pubsub = google.pubsub('v1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'get' method:

    // The name of the topic to get.
    topic: "projects/{MY-PROJECT}/topics/{MY-TOPIC}",
    // Auth client
    auth: authClient
  };

  pubsub.projects.topics.get(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var pubsub = google.pubsub('v1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'getIamPolicy' method:

    // REQUIRED: The resource for which policy is being requested. `resource` is usually specified as a
    // path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in
    // this value is resource specific and is specified in the documentation for the respective
    // GetIamPolicy rpc.
    resource_: "projects/{MY-PROJECT}/topics/{MY-TOPIC}",
    // Auth client
    auth: authClient
  };

  pubsub.projects.topics.getIamPolicy(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var pubsub = google.pubsub('v1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'list' method:

    // The name of the cloud project that topics belong to.
    project: "projects/{MY-PROJECT}",
    // Auth client
    auth: authClient
  };


  var recur = function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      if (result.nextPageToken) {
        request.pageToken = result.nextPageToken;
        pubsub.projects.topics.list(request, recur);
      }
    }
  };

  pubsub.projects.topics.list(request, recur);
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var pubsub = google.pubsub('v1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'publish' method:

    // The messages in the request will be published on this topic.
    topic: "projects/{MY-PROJECT}/topics/{MY-TOPIC}",
    resource: {},
    // Auth client
    auth: authClient
  };

  pubsub.projects.topics.publish(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var pubsub = google.pubsub('v1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'setIamPolicy' method:

    // REQUIRED: The resource for which policy is being specified. `resource` is usually specified as a
    // path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in
    // this value is resource specific and is specified in the documentation for the respective
    // SetIamPolicy rpc.
    resource_: "projects/{MY-PROJECT}/topics/{MY-TOPIC}",
    resource: {},
    // Auth client
    auth: authClient
  };

  pubsub.projects.topics.setIamPolicy(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var pubsub = google.pubsub('v1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'list' method:

    // The name of the topic that subscriptions are attached to.
    topic: "projects/{MY-PROJECT}/topics/{MY-TOPIC}",
    // Auth client
    auth: authClient
  };


  var recur = function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      if (result.nextPageToken) {
        request.pageToken = result.nextPageToken;
        pubsub.projects.topics.subscriptions.list(request, recur);
      }
    }
  };

  pubsub.projects.topics.subscriptions.list(request, recur);
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var pubsub = google.pubsub('v1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'testIamPermissions' method:

    // REQUIRED: The resource for which policy detail is being requested. `resource` is usually specified
    // as a path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path
    // specified in this value is resource specific and is specified in the documentation for the
    // respective TestIamPermissions rpc.
    resource_: "projects/{MY-PROJECT}/topics/{MY-TOPIC}",
    resource: {},
    // Auth client
    auth: authClient
  };

  pubsub.projects.topics.testIamPermissions(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
