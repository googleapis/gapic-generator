
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
# * Project ID of the project that contains the instance.
project = ''
# * Cloud SQL instance ID. This does not include the project ID.
instance = ''
# * The ID of the Backup Run to delete. To find a Backup Run ID, use the list method.
id = 0L

request = service.backupRuns().delete(project, instance, id)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * Project ID of the project that contains the instance.
project = ''
# * Cloud SQL instance ID. This does not include the project ID.
instance = ''
# * The ID of this Backup Run.
id = 0L

request = service.backupRuns().get(project, instance, id)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * Project ID of the project that contains the instance.
project = ''
# * Cloud SQL instance ID. This does not include the project ID.
instance = ''

backupRuns = service.backupRuns()
request = backupRuns.list(project, instance)
while request is not None:
    response = request.execute()

    for backup_run in response['items']:
        # TODO: Add code here to process each 'backup_run' resource

    request = backupRuns.list_next(request, response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
# * Project ID of the project that contains the instance.
project = ''
# * Database instance ID. This does not include the project ID.
instance = ''
# * Name of the database to be deleted in the instance.
database = ''

request = service.databases().delete(project, instance, database)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * Project ID of the project that contains the instance.
project = ''
# * Database instance ID. This does not include the project ID.
instance = ''
# * Name of the database in the instance.
database = ''

request = service.databases().get(project, instance, database)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
# * Project ID of the project that contains the instance.
project = ''
# * Database instance ID. This does not include the project ID.
instance = ''

database = {
# TODO: Add desired entries of the 'database' dict
}

request = service.databases().insert(project, instance, database)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * Project ID of the project for which to list Cloud SQL instances.
project = ''
# * Cloud SQL instance ID. This does not include the project ID.
instance = ''

request = service.databases().list(project, instance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
# * Project ID of the project that contains the instance.
project = ''
# * Database instance ID. This does not include the project ID.
instance = ''
# * Name of the database to be updated in the instance.
database = ''

database = {
# TODO: Add desired entries of the 'database' dict to be changed
}

request = service.databases().patch(project, instance, database, database)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'update' method:
# * Project ID of the project that contains the instance.
project = ''
# * Database instance ID. This does not include the project ID.
instance = ''
# * Name of the database to be updated in the instance.
database = ''

database = {
# TODO: Add desired entries of the 'database' dict
}

request = service.databases().update(project, instance, database, database)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)



request = service.flags().list()
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'clone' method:
# * Project ID of the source as well as the clone Cloud SQL instance.
project = ''
# * The ID of the Cloud SQL instance to be cloned (source). This does not include the project ID.
instance = ''

instances_clone_request = {
# TODO: Add desired entries of the 'instances_clone_request' dict
}

request = service.instances().clone(project, instance, instances_clone_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
# * Project ID of the project that contains the instance to be deleted.
project = ''
# * Cloud SQL instance ID. This does not include the project ID.
instance = ''

request = service.instances().delete(project, instance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'export' method:
# * Project ID of the project that contains the instance to be exported.
project = ''
# * Cloud SQL instance ID. This does not include the project ID.
instance = ''

instances_export_request = {
# TODO: Add desired entries of the 'instances_export_request' dict
}

request = service.instances().export(project, instance, instances_export_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'failover' method:
# * ID of the project that contains the read replica.
project = ''
# * Cloud SQL instance ID. This does not include the project ID.
instance = ''

instances_failover_request = {
# TODO: Add desired entries of the 'instances_failover_request' dict
}

request = service.instances().failover(project, instance, instances_failover_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * Project ID of the project that contains the instance.
project = ''
# * Database instance ID. This does not include the project ID.
instance = ''

request = service.instances().get(project, instance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'import' method:
# * Project ID of the project that contains the instance.
project = ''
# * Cloud SQL instance ID. This does not include the project ID.
instance = ''

instances_import_request = {
# TODO: Add desired entries of the 'instances_import_request' dict
}

request = service.instances().import(project, instance, instances_import_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
# * Project ID of the project to which the newly created Cloud SQL instances should belong.
project = ''

database_instance = {
# TODO: Add desired entries of the 'database_instance' dict
}

request = service.instances().insert(project, database_instance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * Project ID of the project for which to list Cloud SQL instances.
project = ''

instances = service.instances()
request = instances.list(project)
while request is not None:
    response = request.execute()

    for database_instance in response['items']:
        # TODO: Add code here to process each 'database_instance' resource

    request = instances.list_next(request, response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
# * Project ID of the project that contains the instance.
project = ''
# * Cloud SQL instance ID. This does not include the project ID.
instance = ''

database_instance = {
# TODO: Add desired entries of the 'database_instance' dict to be changed
}

request = service.instances().patch(project, instance, database_instance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'promoteReplica' method:
# * ID of the project that contains the read replica.
project = ''
# * Cloud SQL read replica instance name.
instance = ''

request = service.instances().promoteReplica(project, instance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'resetSslConfig' method:
# * Project ID of the project that contains the instance.
project = ''
# * Cloud SQL instance ID. This does not include the project ID.
instance = ''

request = service.instances().resetSslConfig(project, instance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'restart' method:
# * Project ID of the project that contains the instance to be restarted.
project = ''
# * Cloud SQL instance ID. This does not include the project ID.
instance = ''

request = service.instances().restart(project, instance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'restoreBackup' method:
# * Project ID of the project that contains the instance.
project = ''
# * Cloud SQL instance ID. This does not include the project ID.
instance = ''

instances_restore_backup_request = {
# TODO: Add desired entries of the 'instances_restore_backup_request' dict
}

request = service.instances().restoreBackup(project, instance, instances_restore_backup_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'startReplica' method:
# * ID of the project that contains the read replica.
project = ''
# * Cloud SQL read replica instance name.
instance = ''

request = service.instances().startReplica(project, instance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'stopReplica' method:
# * ID of the project that contains the read replica.
project = ''
# * Cloud SQL read replica instance name.
instance = ''

request = service.instances().stopReplica(project, instance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'update' method:
# * Project ID of the project that contains the instance.
project = ''
# * Cloud SQL instance ID. This does not include the project ID.
instance = ''

database_instance = {
# TODO: Add desired entries of the 'database_instance' dict
}

request = service.instances().update(project, instance, database_instance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * Project ID of the project that contains the instance.
project = ''
# * Instance operation ID.
operation = ''

request = service.operations().get(project, operation)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * Project ID of the project that contains the instance.
project = ''
# * Cloud SQL instance ID. This does not include the project ID.
instance = ''

operations = service.operations()
request = operations.list(project, instance)
while request is not None:
    response = request.execute()

    for operation in response['items']:
        # TODO: Add code here to process each 'operation' resource

    request = operations.list_next(request, response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'createEphemeral' method:
# * Project ID of the Cloud SQL project.
project = ''
# * Cloud SQL instance ID. This does not include the project ID.
instance = ''

ssl_certs_create_ephemeral_request = {
# TODO: Add desired entries of the 'ssl_certs_create_ephemeral_request' dict
}

request = service.sslCerts().createEphemeral(project, instance, ssl_certs_create_ephemeral_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
# * Project ID of the project that contains the instance to be deleted.
project = ''
# * Cloud SQL instance ID. This does not include the project ID.
instance = ''
# * Sha1 FingerPrint.
sha1Fingerprint = ''

request = service.sslCerts().delete(project, instance, sha1Fingerprint)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * Project ID of the project that contains the instance.
project = ''
# * Cloud SQL instance ID. This does not include the project ID.
instance = ''
# * Sha1 FingerPrint.
sha1Fingerprint = ''

request = service.sslCerts().get(project, instance, sha1Fingerprint)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
# * Project ID of the project to which the newly created Cloud SQL instances should belong.
project = ''
# * Cloud SQL instance ID. This does not include the project ID.
instance = ''

ssl_certs_insert_request = {
# TODO: Add desired entries of the 'ssl_certs_insert_request' dict
}

request = service.sslCerts().insert(project, instance, ssl_certs_insert_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * Project ID of the project for which to list Cloud SQL instances.
project = ''
# * Cloud SQL instance ID. This does not include the project ID.
instance = ''

request = service.sslCerts().list(project, instance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * Project ID of the project for which to list tiers.
project = ''

request = service.tiers().list(project)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
# * Project ID of the project that contains the instance.
project = ''
# * Database instance ID. This does not include the project ID.
instance = ''
# * Host of the user in the instance.
host = ''
# * Name of the user in the instance.
name = ''

request = service.users().delete(project, instance, host, name)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
# * Project ID of the project that contains the instance.
project = ''
# * Database instance ID. This does not include the project ID.
instance = ''

user = {
# TODO: Add desired entries of the 'user' dict
}

request = service.users().insert(project, instance, user)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * Project ID of the project that contains the instance.
project = ''
# * Database instance ID. This does not include the project ID.
instance = ''

request = service.users().list(project, instance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud SQL Administration API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/sqladmin
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the sqladmin service object (version v1beta4) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('sqladmin', 'v1beta4', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'update' method:
# * Project ID of the project that contains the instance.
project = ''
# * Database instance ID. This does not include the project ID.
instance = ''
# * Host of the user in the instance.
host = ''
# * Name of the user in the instance.
name = ''

user = {
# TODO: Add desired entries of the 'user' dict
}

request = service.users().update(project, instance, host, name, user)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
