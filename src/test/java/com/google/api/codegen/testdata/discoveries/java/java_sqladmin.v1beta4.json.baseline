
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.BackupRuns.Delete;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // Cloud SQL instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the project that contains the instance.
    String project = ""; // TODO: Update field(s).

    // The ID of the Backup Run to delete. To find a Backup Run ID, use the list method.
    long id = 0L; // TODO: Update field(s).

    Sqladmin service = createService();
    Delete request = service.backupRuns().delete(instance, project, id);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.BackupRuns.Get;
import com.google.api.services.sqladmin.v1beta4.model.BackupRun;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // Cloud SQL instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the project that contains the instance.
    String project = ""; // TODO: Update field(s).

    // The ID of this Backup Run.
    long id = 0L; // TODO: Update field(s).

    Sqladmin service = createService();
    Get request = service.backupRuns().get(instance, project, id);
    BackupRun response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.BackupRuns.List;
import com.google.api.services.sqladmin.v1beta4.model.BackupRun;
import com.google.api.services.sqladmin.v1beta4.model.BackupRunsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // Cloud SQL instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the project that contains the instance.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    List request = service.backupRuns().list(instance, project);
    BackupRunsListResponse response;
    do {
      response = request.execute();
      if (response.getItems() == null) {
        continue;
      }
      for (BackupRun item : response.getItems()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Databases.Delete;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // Name of the database to be deleted in the instance.
    String database = ""; // TODO: Update field(s).

    // Database instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the project that contains the instance.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    Delete request = service.databases().delete(database, instance, project);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Databases.Get;
import com.google.api.services.sqladmin.v1beta4.model.Database;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // Name of the database in the instance.
    String database = ""; // TODO: Update field(s).

    // Database instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the project that contains the instance.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    Get request = service.databases().get(database, instance, project);
    Database response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Databases.Insert;
import com.google.api.services.sqladmin.v1beta4.model.Database;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Database requestBody = new Database();

    // Database instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the project that contains the instance.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    Insert request = service.databases().insert(instance, project, requestBody);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Databases.List;
import com.google.api.services.sqladmin.v1beta4.model.DatabasesListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // Cloud SQL instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the project for which to list Cloud SQL instances.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    List request = service.databases().list(instance, project);
    DatabasesListResponse response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Databases.Patch;
import com.google.api.services.sqladmin.v1beta4.model.Database;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Database requestBody = new Database();

    // Name of the database to be updated in the instance.
    String database = ""; // TODO: Update field(s).

    // Database instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the project that contains the instance.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    Patch request = service.databases().patch(database, instance, project, requestBody);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Databases.Update;
import com.google.api.services.sqladmin.v1beta4.model.Database;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    Database requestBody = new Database();

    // Name of the database to be updated in the instance.
    String database = ""; // TODO: Update field(s).

    // Database instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the project that contains the instance.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    Update request = service.databases().update(database, instance, project, requestBody);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Flags.List;
import com.google.api.services.sqladmin.v1beta4.model.FlagsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    Sqladmin service = createService();
    List request = service.flags().list();
    FlagsListResponse response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Instances.Clone;
import com.google.api.services.sqladmin.v1beta4.model.InstancesCloneRequest;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    InstancesCloneRequest requestBody = new InstancesCloneRequest();

    // The ID of the Cloud SQL instance to be cloned (source). This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the source as well as the clone Cloud SQL instance.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    Clone request = service.instances().clone(instance, project, requestBody);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Instances.Delete;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // Cloud SQL instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the project that contains the instance to be deleted.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    Delete request = service.instances().delete(instance, project);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Instances.Export;
import com.google.api.services.sqladmin.v1beta4.model.InstancesExportRequest;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    InstancesExportRequest requestBody = new InstancesExportRequest();

    // Cloud SQL instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the project that contains the instance to be exported.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    Export request = service.instances().export(instance, project, requestBody);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Instances.Failover;
import com.google.api.services.sqladmin.v1beta4.model.InstancesFailoverRequest;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    InstancesFailoverRequest requestBody = new InstancesFailoverRequest();

    // Cloud SQL instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // ID of the project that contains the read replica.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    Failover request = service.instances().failover(instance, project, requestBody);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Instances.Get;
import com.google.api.services.sqladmin.v1beta4.model.DatabaseInstance;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // Database instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the project that contains the instance.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    Get request = service.instances().get(instance, project);
    DatabaseInstance response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Instances.Import;
import com.google.api.services.sqladmin.v1beta4.model.InstancesImportRequest;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    InstancesImportRequest requestBody = new InstancesImportRequest();

    // Cloud SQL instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the project that contains the instance.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    Import request = service.instances().import(instance, project, requestBody);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Instances.Insert;
import com.google.api.services.sqladmin.v1beta4.model.DatabaseInstance;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    DatabaseInstance requestBody = new DatabaseInstance();

    // Project ID of the project to which the newly created Cloud SQL instances should belong.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    Insert request = service.instances().insert(project, requestBody);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Instances.List;
import com.google.api.services.sqladmin.v1beta4.model.DatabaseInstance;
import com.google.api.services.sqladmin.v1beta4.model.InstancesListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // Project ID of the project for which to list Cloud SQL instances.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    List request = service.instances().list(project);
    InstancesListResponse response;
    do {
      response = request.execute();
      if (response.getItems() == null) {
        continue;
      }
      for (DatabaseInstance item : response.getItems()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Instances.Patch;
import com.google.api.services.sqladmin.v1beta4.model.DatabaseInstance;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    DatabaseInstance requestBody = new DatabaseInstance();

    // Cloud SQL instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the project that contains the instance.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    Patch request = service.instances().patch(instance, project, requestBody);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Instances.PromoteReplica;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // Cloud SQL read replica instance name.
    String instance = ""; // TODO: Update field(s).

    // ID of the project that contains the read replica.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    PromoteReplica request = service.instances().promoteReplica(instance, project);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Instances.ResetSslConfig;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // Cloud SQL instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the project that contains the instance.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    ResetSslConfig request = service.instances().resetSslConfig(instance, project);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Instances.Restart;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // Cloud SQL instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the project that contains the instance to be restarted.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    Restart request = service.instances().restart(instance, project);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Instances.RestoreBackup;
import com.google.api.services.sqladmin.v1beta4.model.InstancesRestoreBackupRequest;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    InstancesRestoreBackupRequest requestBody = new InstancesRestoreBackupRequest();

    // Cloud SQL instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the project that contains the instance.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    RestoreBackup request = service.instances().restoreBackup(instance, project, requestBody);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Instances.StartReplica;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // Cloud SQL read replica instance name.
    String instance = ""; // TODO: Update field(s).

    // ID of the project that contains the read replica.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    StartReplica request = service.instances().startReplica(instance, project);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Instances.StopReplica;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // Cloud SQL read replica instance name.
    String instance = ""; // TODO: Update field(s).

    // ID of the project that contains the read replica.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    StopReplica request = service.instances().stopReplica(instance, project);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Instances.Update;
import com.google.api.services.sqladmin.v1beta4.model.DatabaseInstance;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    DatabaseInstance requestBody = new DatabaseInstance();

    // Cloud SQL instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the project that contains the instance.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    Update request = service.instances().update(instance, project, requestBody);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Operations.Get;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // Project ID of the project that contains the instance.
    String project = ""; // TODO: Update field(s).

    // Instance operation ID.
    String operation = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    Get request = service.operations().get(project, operation);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Operations.List;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import com.google.api.services.sqladmin.v1beta4.model.OperationsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // Cloud SQL instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the project that contains the instance.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    List request = service.operations().list(instance, project);
    OperationsListResponse response;
    do {
      response = request.execute();
      if (response.getItems() == null) {
        continue;
      }
      for (Operation item : response.getItems()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.SslCerts.CreateEphemeral;
import com.google.api.services.sqladmin.v1beta4.model.SslCert;
import com.google.api.services.sqladmin.v1beta4.model.SslCertsCreateEphemeralRequest;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    SslCertsCreateEphemeralRequest requestBody = new SslCertsCreateEphemeralRequest();

    // Cloud SQL instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the Cloud SQL project.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    CreateEphemeral request = service.sslCerts().createEphemeral(instance, project, requestBody);
    SslCert response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.SslCerts.Delete;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // Cloud SQL instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Sha1 FingerPrint.
    String sha1Fingerprint = ""; // TODO: Update field(s).

    // Project ID of the project that contains the instance to be deleted.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    Delete request = service.sslCerts().delete(instance, sha1Fingerprint, project);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.SslCerts.Get;
import com.google.api.services.sqladmin.v1beta4.model.SslCert;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // Cloud SQL instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Sha1 FingerPrint.
    String sha1Fingerprint = ""; // TODO: Update field(s).

    // Project ID of the project that contains the instance.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    Get request = service.sslCerts().get(instance, sha1Fingerprint, project);
    SslCert response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.SslCerts.Insert;
import com.google.api.services.sqladmin.v1beta4.model.SslCertsInsertRequest;
import com.google.api.services.sqladmin.v1beta4.model.SslCertsInsertResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    SslCertsInsertRequest requestBody = new SslCertsInsertRequest();

    // Cloud SQL instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the project to which the newly created Cloud SQL instances should belong.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    Insert request = service.sslCerts().insert(instance, project, requestBody);
    SslCertsInsertResponse response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.SslCerts.List;
import com.google.api.services.sqladmin.v1beta4.model.SslCertsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // Cloud SQL instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the project for which to list Cloud SQL instances.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    List request = service.sslCerts().list(instance, project);
    SslCertsListResponse response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Tiers.List;
import com.google.api.services.sqladmin.v1beta4.model.TiersListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // Project ID of the project for which to list tiers.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    List request = service.tiers().list(project);
    TiersListResponse response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Users.Delete;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // Database instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Host of the user in the instance.
    String host = ""; // TODO: Update field(s).

    // Name of the user in the instance.
    String name = ""; // TODO: Update field(s).

    // Project ID of the project that contains the instance.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    Delete request = service.users().delete(instance, host, name, project);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Users.Insert;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import com.google.api.services.sqladmin.v1beta4.model.User;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    User requestBody = new User();

    // Database instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the project that contains the instance.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    Insert request = service.users().insert(instance, project, requestBody);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Users.List;
import com.google.api.services.sqladmin.v1beta4.model.User;
import com.google.api.services.sqladmin.v1beta4.model.UsersListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // Database instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Project ID of the project that contains the instance.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    List request = service.users().list(instance, project);
    UsersListResponse response;
    do {
      response = request.execute();
      if (response.getItems() == null) {
        continue;
      }
      for (User item : response.getItems()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/**
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud SQL Administration API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/sqladmin
 * 2. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/sqladmin/v1beta4/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.sqladmin.v1beta4.Sqladmin;
import com.google.api.services.sqladmin.v1beta4.Sqladmin.Users.Update;
import com.google.api.services.sqladmin.v1beta4.model.Operation;
import com.google.api.services.sqladmin.v1beta4.model.User;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class SqladminExample {
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    User requestBody = new User();

    // Database instance ID. This does not include the project ID.
    String instance = ""; // TODO: Update field(s).

    // Host of the user in the instance.
    String host = ""; // TODO: Update field(s).

    // Name of the user in the instance.
    String name = ""; // TODO: Update field(s).

    // Project ID of the project that contains the instance.
    String project = ""; // TODO: Update field(s).

    Sqladmin service = createService();
    Update request = service.users().update(instance, host, name, project, requestBody);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Sqladmin createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Sqladmin.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new Main().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
