
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholder below to desired parameter value for the `get` method:

// The account id
$id = 0;


$response = $service->accounts->get($id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


$response = $service->accounts->listAccounts();

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listAccounts` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholder below to desired parameter value for the `patch` method:

// The account id
$id = 0;


$requestBody = new Google_Service_Adexchangebuyer_Account($client);
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->accounts->patch($id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// The account id
$id = 0;


$requestBody = new Google_Service_Adexchangebuyer_Account($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->accounts->update($id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholder below to desired parameter value for the `get` method:

// The account id.
$accountId = 0;


$response = $service->billingInfo->get($accountId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


$response = $service->billingInfo->listBillingInfo();

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listBillingInfo` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// The account id to get the budget information for.
$accountId = '0';

// The billing id to get the budget information for.
$billingId = '0';


$response = $service->budget->get($accountId, $billingId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// The account id associated with the budget being updated.
$accountId = '0';

// The billing id associated with the budget being updated.
$billingId = '0';


$requestBody = new Google_Service_Adexchangebuyer_Budget($client);
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->budget->patch($accountId, $billingId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// The account id associated with the budget being updated.
$accountId = '0';

// The billing id associated with the budget being updated.
$billingId = '0';


$requestBody = new Google_Service_Adexchangebuyer_Budget($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->budget->update($accountId, $billingId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholders below to desired parameter values for the `addDeal` method:

// The id for the account that will serve this creative.
$accountId = 0;

// The buyer-specific id for this creative.
$buyerCreativeId = '{MY-BUYER-CREATIVE-ID}';

// The id of the deal id to associate with this creative.
$dealId = '0';


$service->creatives->addDeal($accountId, $buyerCreativeId, $dealId);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `addDeal` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// The id for the account that will serve this creative.
$accountId = 0;

// The buyer-specific id for this creative.
$buyerCreativeId = '{MY-BUYER-CREATIVE-ID}';


$response = $service->creatives->get($accountId, $buyerCreativeId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


$requestBody = new Google_Service_Adexchangebuyer_Creative($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->creatives->insert($requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


$optParams = array();
do {
  $response = $service->creatives->listCreatives($optParams);

  foreach ($response['items'] as $creative) {
    // TODO: Change code below to process each `creative` resource:
    echo '<pre>', var_export($creative, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listCreatives` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholders below to desired parameter values for the `removeDeal` method:

// The id for the account that will serve this creative.
$accountId = 0;

// The buyer-specific id for this creative.
$buyerCreativeId = '{MY-BUYER-CREATIVE-ID}';

// The id of the deal id to disassociate with this creative.
$dealId = '0';


$service->creatives->removeDeal($accountId, $buyerCreativeId, $dealId);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `removeDeal` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholder below to desired parameter value for the `delete` method:

// The proposalId to delete deals from.
$proposalId = '{MY-PROPOSAL-ID}';


$requestBody = new Google_Service_Adexchangebuyer_DeleteOrderDealsRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->marketplacedeals->delete($proposalId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `delete` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// proposalId for which deals need to be added.
$proposalId = '{MY-PROPOSAL-ID}';


$requestBody = new Google_Service_Adexchangebuyer_AddOrderDealsRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->marketplacedeals->insert($proposalId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholder below to desired parameter value for the `listMarketplacedeals` method:

// The proposalId to get deals for. To search across all proposals specify order_id = '-' as part of
// the URL.
$proposalId = '{MY-PROPOSAL-ID}';


$response = $service->marketplacedeals->listMarketplacedeals($proposalId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listMarketplacedeals` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholder below to desired parameter value for the `update` method:

// The proposalId to edit deals on.
$proposalId = '{MY-PROPOSAL-ID}';


$requestBody = new Google_Service_Adexchangebuyer_EditAllOrderDealsRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->marketplacedeals->update($proposalId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// The proposalId to add notes for.
$proposalId = '{MY-PROPOSAL-ID}';


$requestBody = new Google_Service_Adexchangebuyer_AddOrderNotesRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->marketplacenotes->insert($proposalId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholder below to desired parameter value for the `listMarketplacenotes` method:

// The proposalId to get notes for. To search across all proposals specify order_id = '-' as part of
// the URL.
$proposalId = '{MY-PROPOSAL-ID}';


$response = $service->marketplacenotes->listMarketplacenotes($proposalId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listMarketplacenotes` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholder below to desired parameter value for the `updateproposal` method:

// The private auction id to be updated.
$privateAuctionId = '{MY-PRIVATE-AUCTION-ID}';


$requestBody = new Google_Service_Adexchangebuyer_UpdatePrivateAuctionProposalRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$service->marketplaceprivateauction->updateproposal($privateAuctionId, $requestBody);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `updateproposal` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholders below to desired parameter values for the `listPerformanceReport` method:

// The account id to get the reports.
$accountId = '0';

// The end time of the report in ISO 8601 timestamp format using UTC.
$endDateTime = '{MY-END-DATE-TIME}';

// The start time of the report in ISO 8601 timestamp format using UTC.
$startDateTime = '{MY-START-DATE-TIME}';


$response = $service->performanceReport->listPerformanceReport($accountId, $endDateTime, $startDateTime);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listPerformanceReport` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// The account id to delete the pretargeting config for.
$accountId = '0';

// The specific id of the configuration to delete.
$configId = '0';


$service->pretargetingConfig->delete($accountId, $configId);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `delete` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// The account id to get the pretargeting config for.
$accountId = '0';

// The specific id of the configuration to retrieve.
$configId = '0';


$response = $service->pretargetingConfig->get($accountId, $configId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// The account id to insert the pretargeting config for.
$accountId = '0';


$requestBody = new Google_Service_Adexchangebuyer_PretargetingConfig($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->pretargetingConfig->insert($accountId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholder below to desired parameter value for the `listPretargetingConfig` method:

// The account id to get the pretargeting configs for.
$accountId = '0';


$response = $service->pretargetingConfig->listPretargetingConfig($accountId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listPretargetingConfig` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// The account id to update the pretargeting config for.
$accountId = '0';

// The specific id of the configuration to update.
$configId = '0';


$requestBody = new Google_Service_Adexchangebuyer_PretargetingConfig($client);
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->pretargetingConfig->patch($accountId, $configId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// The account id to update the pretargeting config for.
$accountId = '0';

// The specific id of the configuration to update.
$configId = '0';


$requestBody = new Google_Service_Adexchangebuyer_PretargetingConfig($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->pretargetingConfig->update($accountId, $configId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholder below to desired parameter value for the `get` method:

// The id for the product to get the head revision for.
$productId = '{MY-PRODUCT-ID}';


$response = $service->products->get($productId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


$response = $service->products->search();

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `search` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholder below to desired parameter value for the `get` method:

// Id of the proposal to retrieve.
$proposalId = '{MY-PROPOSAL-ID}';


$response = $service->proposals->get($proposalId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `get` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


$requestBody = new Google_Service_Adexchangebuyer_CreateOrdersRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->proposals->insert($requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `insert` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// The proposal id to update.
$proposalId = '{MY-PROPOSAL-ID}';

// The last known revision number to update. If the head revision in the marketplace database has since
// changed, an error will be thrown. The caller should then fetch the latest proposal at head revision
// and retry the update at that revision.
$revisionNumber = '0';

// The proposed action to take on the proposal. This field is required and it must be set when updating
// a proposal.
$updateAction = '{MY-UPDATE-ACTION}';


$requestBody = new Google_Service_Adexchangebuyer_Proposal($client);
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->proposals->patch($proposalId, $revisionNumber, $updateAction, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `patch` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


$response = $service->proposals->search();

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `search` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholder below to desired parameter value for the `setupcomplete` method:

// The proposal id for which the setup is complete
$proposalId = '{MY-PROPOSAL-ID}';


$service->proposals->setupcomplete($proposalId);

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `setupcomplete` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// The proposal id to update.
$proposalId = '{MY-PROPOSAL-ID}';

// The last known revision number to update. If the head revision in the marketplace database has since
// changed, an error will be thrown. The caller should then fetch the latest proposal at head revision
// and retry the update at that revision.
$revisionNumber = '0';

// The proposed action to take on the proposal. This field is required and it must be set when updating
// a proposal.
$updateAction = '{MY-UPDATE-ACTION}';


$requestBody = new Google_Service_Adexchangebuyer_Proposal($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->proposals->update($proposalId, $revisionNumber, $updateAction, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `update` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_Adexchangebuyer($client);


// TODO: Change placeholder below to desired parameter value for the `listPubprofiles` method:

// The accountId of the publisher to get profiles for.
$accountId = 0;


$response = $service->pubprofiles->listPubprofiles($accountId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to get authentication credentials.
  // See: https://foo.com/bar
  //
  // To use the `listPubprofiles` method, authorize using one of the following scopes:
  //   https://www.googleapis.com/auth/adexchange.buyer
  return null;
}
?>
