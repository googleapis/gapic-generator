
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The account id
$id = 0;  // TODO: Update placeholder value.

$response = $service->accounts->get($id);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

$response = $service->accounts->listAccounts();

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The account id
$id = 0;  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`. Only assigned
// properties will be changed:
$requestBody = new Google_Service_AdExchangeBuyer_Account();

$response = $service->accounts->patch($id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The account id
$id = 0;  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_AdExchangeBuyer_Account();

$response = $service->accounts->update($id, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The account id.
$accountId = 0;  // TODO: Update placeholder value.

$response = $service->billingInfo->get($accountId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

$response = $service->billingInfo->listBillingInfo();

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The account id to get the budget information for.
$accountId = '0';  // TODO: Update placeholder value.

// The billing id to get the budget information for.
$billingId = '0';  // TODO: Update placeholder value.

$response = $service->budget->get($accountId, $billingId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The account id associated with the budget being updated.
$accountId = '0';  // TODO: Update placeholder value.

// The billing id associated with the budget being updated.
$billingId = '0';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`. Only assigned
// properties will be changed:
$requestBody = new Google_Service_AdExchangeBuyer_Budget();

$response = $service->budget->patch($accountId, $billingId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The account id associated with the budget being updated.
$accountId = '0';  // TODO: Update placeholder value.

// The billing id associated with the budget being updated.
$billingId = '0';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_AdExchangeBuyer_Budget();

$response = $service->budget->update($accountId, $billingId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The id for the account that will serve this creative.
$accountId = 0;  // TODO: Update placeholder value.

// The buyer-specific id for this creative.
$buyerCreativeId = '';  // TODO: Update placeholder value.

// The id of the deal id to associate with this creative.
$dealId = '0';  // TODO: Update placeholder value.

$service->creatives->addDeal($accountId, $buyerCreativeId, $dealId);

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The id for the account that will serve this creative.
$accountId = 0;  // TODO: Update placeholder value.

// The buyer-specific id for this creative.
$buyerCreativeId = '';  // TODO: Update placeholder value.

$response = $service->creatives->get($accountId, $buyerCreativeId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_AdExchangeBuyer_Creative();

$response = $service->creatives->insert($requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

$optParams = [];
do {
  $response = $service->creatives->listCreatives($optParams);

  foreach ($response['items'] as $creative) {
    // TODO: Change code below to process each `creative` resource:
    echo '<pre>', var_export($creative, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The id for the account that will serve this creative.
$accountId = 0;  // TODO: Update placeholder value.

// The buyer-specific id for this creative.
$buyerCreativeId = '';  // TODO: Update placeholder value.

$response = $service->creatives->listDeals($accountId, $buyerCreativeId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The id for the account that will serve this creative.
$accountId = 0;  // TODO: Update placeholder value.

// The buyer-specific id for this creative.
$buyerCreativeId = '';  // TODO: Update placeholder value.

// The id of the deal id to disassociate with this creative.
$dealId = '0';  // TODO: Update placeholder value.

$service->creatives->removeDeal($accountId, $buyerCreativeId, $dealId);

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The proposalId to delete deals from.
$proposalId = '';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_AdExchangeBuyer_DeleteOrderDealsRequest();

$response = $service->marketplacedeals->delete($proposalId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// proposalId for which deals need to be added.
$proposalId = '';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_AdExchangeBuyer_AddOrderDealsRequest();

$response = $service->marketplacedeals->insert($proposalId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The proposalId to get deals for. To search across all proposals specify order_id = '-' as part of
// the URL.
$proposalId = '';  // TODO: Update placeholder value.

$response = $service->marketplacedeals->listMarketplacedeals($proposalId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The proposalId to edit deals on.
$proposalId = '';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_AdExchangeBuyer_EditAllOrderDealsRequest();

$response = $service->marketplacedeals->update($proposalId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The proposalId to add notes for.
$proposalId = '';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_AdExchangeBuyer_AddOrderNotesRequest();

$response = $service->marketplacenotes->insert($proposalId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The proposalId to get notes for. To search across all proposals specify order_id = '-' as part of
// the URL.
$proposalId = '';  // TODO: Update placeholder value.

$response = $service->marketplacenotes->listMarketplacenotes($proposalId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The private auction id to be updated.
$privateAuctionId = '';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_AdExchangeBuyer_UpdatePrivateAuctionProposalRequest();

$service->marketplaceprivateauction->updateproposal($privateAuctionId, $requestBody);

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The account id to get the reports.
$accountId = '0';  // TODO: Update placeholder value.

// The end time of the report in ISO 8601 timestamp format using UTC.
$endDateTime = '';  // TODO: Update placeholder value.

// The start time of the report in ISO 8601 timestamp format using UTC.
$startDateTime = '';  // TODO: Update placeholder value.

$response = $service->performanceReport->listPerformanceReport($accountId, $endDateTime, $startDateTime);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The account id to delete the pretargeting config for.
$accountId = '0';  // TODO: Update placeholder value.

// The specific id of the configuration to delete.
$configId = '0';  // TODO: Update placeholder value.

$service->pretargetingConfig->delete($accountId, $configId);

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The account id to get the pretargeting config for.
$accountId = '0';  // TODO: Update placeholder value.

// The specific id of the configuration to retrieve.
$configId = '0';  // TODO: Update placeholder value.

$response = $service->pretargetingConfig->get($accountId, $configId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The account id to insert the pretargeting config for.
$accountId = '0';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_AdExchangeBuyer_PretargetingConfig();

$response = $service->pretargetingConfig->insert($accountId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The account id to get the pretargeting configs for.
$accountId = '0';  // TODO: Update placeholder value.

$response = $service->pretargetingConfig->listPretargetingConfig($accountId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The account id to update the pretargeting config for.
$accountId = '0';  // TODO: Update placeholder value.

// The specific id of the configuration to update.
$configId = '0';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`. Only assigned
// properties will be changed:
$requestBody = new Google_Service_AdExchangeBuyer_PretargetingConfig();

$response = $service->pretargetingConfig->patch($accountId, $configId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The account id to update the pretargeting config for.
$accountId = '0';  // TODO: Update placeholder value.

// The specific id of the configuration to update.
$configId = '0';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_AdExchangeBuyer_PretargetingConfig();

$response = $service->pretargetingConfig->update($accountId, $configId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The id for the product to get the head revision for.
$productId = '';  // TODO: Update placeholder value.

$response = $service->products->get($productId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

$response = $service->products->search();

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// Id of the proposal to retrieve.
$proposalId = '';  // TODO: Update placeholder value.

$response = $service->proposals->get($proposalId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_AdExchangeBuyer_CreateOrdersRequest();

$response = $service->proposals->insert($requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The proposal id to update.
$proposalId = '';  // TODO: Update placeholder value.

// The last known revision number to update. If the head revision in the marketplace database has
// since changed, an error will be thrown. The caller should then fetch the latest proposal at head
// revision and retry the update at that revision.
$revisionNumber = '0';  // TODO: Update placeholder value.

// The proposed action to take on the proposal. This field is required and it must be set when
// updating a proposal.
$updateAction = '';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`. Only assigned
// properties will be changed:
$requestBody = new Google_Service_AdExchangeBuyer_Proposal();

$response = $service->proposals->patch($proposalId, $revisionNumber, $updateAction, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

$response = $service->proposals->search();

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The proposal id for which the setup is complete
$proposalId = '';  // TODO: Update placeholder value.

$service->proposals->setupcomplete($proposalId);

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The proposal id to update.
$proposalId = '';  // TODO: Update placeholder value.

// The last known revision number to update. If the head revision in the marketplace database has
// since changed, an error will be thrown. The caller should then fetch the latest proposal at head
// revision and retry the update at that revision.
$revisionNumber = '0';  // TODO: Update placeholder value.

// The proposed action to take on the proposal. This field is required and it must be set when
// updating a proposal.
$updateAction = '';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_AdExchangeBuyer_Proposal();

$response = $service->proposals->update($proposalId, $revisionNumber, $updateAction, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Ad Exchange Buyer API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/adexchangebuyer
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = getClient();

$service = new Google_Service_AdExchangeBuyer($client);

// The accountId of the publisher to get profiles for.
$accountId = 0;  // TODO: Update placeholder value.

$response = $service->pubprofiles->listPubprofiles($accountId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";

function getClient() {
  // TODO: Change placeholder below to generate authentication credentials. See:
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/adexchange.buyer'
  return null;
}
?>
