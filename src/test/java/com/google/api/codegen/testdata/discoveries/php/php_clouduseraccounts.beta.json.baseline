
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_CloudUserAccounts($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the Operations resource to delete.
$operation = '{MY-OPERATION}';


$service->globalAccountsOperations->delete($project, $operation);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_CloudUserAccounts($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the Operations resource to return.
$operation = '{MY-OPERATION}';


$response = $service->globalAccountsOperations->get($project, $operation);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_CloudUserAccounts($client);


// TODO: Change placeholders below to desired parameter values for the `listGlobalAccountsOperations` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->globalAccountsOperations->listGlobalAccountsOperations($project, $optParams);

  foreach ($response['items'] as $operation) {
    // TODO: Change code below to process each `operation` resource:
    echo '<pre>', var_export($operation, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_CloudUserAccounts($client);


// TODO: Change placeholders below to desired parameter values for the `addMember` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the group for this request.
$groupName = '{MY-GROUP-NAME}';


$requestBody = new Google_Service_CloudUserAccounts_GroupsAddMemberRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->groups->addMember($project, $groupName, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_CloudUserAccounts($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the Group resource to delete.
$groupName = '{MY-GROUP-NAME}';


$response = $service->groups->delete($project, $groupName);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_CloudUserAccounts($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the Group resource to return.
$groupName = '{MY-GROUP-NAME}';


$response = $service->groups->get($project, $groupName);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_CloudUserAccounts($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$requestBody = new Google_Service_CloudUserAccounts_Group($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->groups->insert($project, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_CloudUserAccounts($client);


// TODO: Change placeholders below to desired parameter values for the `listGroups` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->groups->listGroups($project, $optParams);

  foreach ($response['items'] as $group) {
    // TODO: Change code below to process each `group` resource:
    echo '<pre>', var_export($group, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_CloudUserAccounts($client);


// TODO: Change placeholders below to desired parameter values for the `removeMember` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the group for this request.
$groupName = '{MY-GROUP-NAME}';


$requestBody = new Google_Service_CloudUserAccounts_GroupsRemoveMemberRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->groups->removeMember($project, $groupName, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_CloudUserAccounts($client);


// TODO: Change placeholders below to desired parameter values for the `getAuthorizedKeysView` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// The user account for which you want to get a list of authorized public keys.
$user = '{MY-USER}';

// The fully-qualified URL of the virtual machine requesting the view.
$instance = '{MY-INSTANCE}';


$response = $service->linux->getAuthorizedKeysView($project, $zone, $user, $instance);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_CloudUserAccounts($client);


// TODO: Change placeholders below to desired parameter values for the `getLinuxAccountViews` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// The fully-qualified URL of the virtual machine requesting the views.
$instance = '{MY-INSTANCE}';


$response = $service->linux->getLinuxAccountViews($project, $zone, $instance);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_CloudUserAccounts($client);


// TODO: Change placeholders below to desired parameter values for the `addPublicKey` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the user for this request.
$user = '{MY-USER}';


$requestBody = new Google_Service_CloudUserAccounts_PublicKey($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->users->addPublicKey($project, $user, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_CloudUserAccounts($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the user resource to delete.
$user = '{MY-USER}';


$response = $service->users->delete($project, $user);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_CloudUserAccounts($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the user resource to return.
$user = '{MY-USER}';


$response = $service->users->get($project, $user);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_CloudUserAccounts($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$requestBody = new Google_Service_CloudUserAccounts_User($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->users->insert($project, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_CloudUserAccounts($client);


// TODO: Change placeholders below to desired parameter values for the `listUsers` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->users->listUsers($project, $optParams);

  foreach ($response['items'] as $user) {
    // TODO: Change code below to process each `user` resource:
    echo '<pre>', var_export($user, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud User Accounts API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/clouduseraccounts
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_CloudUserAccounts($client);


// TODO: Change placeholders below to desired parameter values for the `removePublicKey` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the user for this request.
$user = '{MY-USER}';

// The fingerprint of the public key to delete. Public keys are identified by their fingerprint, which
// is defined by RFC4716 to be the MD5 digest of the public key.
$fingerprint = '{MY-FINGERPRINT}';


$response = $service->users->removePublicKey($project, $user, $fingerprint);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
