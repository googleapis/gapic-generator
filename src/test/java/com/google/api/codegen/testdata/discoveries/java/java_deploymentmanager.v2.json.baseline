
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Deployment Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/deploymentmanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/deploymentmanager/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.deploymentmanager.DeploymentManager;
import com.google.api.services.deploymentmanager.model.DeploymentsCancelPreviewRequest;
import com.google.api.services.deploymentmanager.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DeploymentManagerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The project ID for this request.
    String project = "my-project";  // TODO: Update placeholder value.

    // The name of the deployment for this request.
    String deployment = "my-deployment";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    DeploymentsCancelPreviewRequest requestBody = new DeploymentsCancelPreviewRequest();

    DeploymentManager deploymentManagerService = createDeploymentManagerService();
    DeploymentManager.Deployments.CancelPreview request = deploymentManagerService.deployments().cancelPreview(project, deployment, requestBody);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static DeploymentManager createDeploymentManagerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new DeploymentManager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DeploymentManagerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Deployment Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/deploymentmanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/deploymentmanager/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.deploymentmanager.DeploymentManager;
import com.google.api.services.deploymentmanager.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DeploymentManagerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The project ID for this request.
    String project = "my-project";  // TODO: Update placeholder value.

    // The name of the deployment for this request.
    String deployment = "my-deployment";  // TODO: Update placeholder value.

    DeploymentManager deploymentManagerService = createDeploymentManagerService();
    DeploymentManager.Deployments.Delete request = deploymentManagerService.deployments().delete(project, deployment);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static DeploymentManager createDeploymentManagerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new DeploymentManager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DeploymentManagerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Deployment Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/deploymentmanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/deploymentmanager/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.deploymentmanager.DeploymentManager;
import com.google.api.services.deploymentmanager.model.Deployment;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DeploymentManagerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The project ID for this request.
    String project = "my-project";  // TODO: Update placeholder value.

    // The name of the deployment for this request.
    String deployment = "my-deployment";  // TODO: Update placeholder value.

    DeploymentManager deploymentManagerService = createDeploymentManagerService();
    DeploymentManager.Deployments.Get request = deploymentManagerService.deployments().get(project, deployment);

    Deployment response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static DeploymentManager createDeploymentManagerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new DeploymentManager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DeploymentManagerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Deployment Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/deploymentmanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/deploymentmanager/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.deploymentmanager.DeploymentManager;
import com.google.api.services.deploymentmanager.model.Policy;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DeploymentManagerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Project ID for this request.
    String project = "my-project";  // TODO: Update placeholder value.

    // Name of the resource for this request.
    String resource = "my-resource";  // TODO: Update placeholder value.

    DeploymentManager deploymentManagerService = createDeploymentManagerService();
    DeploymentManager.Deployments.GetIamPolicy request = deploymentManagerService.deployments().getIamPolicy(project, resource);

    Policy response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static DeploymentManager createDeploymentManagerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new DeploymentManager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DeploymentManagerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Deployment Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/deploymentmanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/deploymentmanager/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.deploymentmanager.DeploymentManager;
import com.google.api.services.deploymentmanager.model.Deployment;
import com.google.api.services.deploymentmanager.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DeploymentManagerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The project ID for this request.
    String project = "my-project";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Deployment requestBody = new Deployment();

    DeploymentManager deploymentManagerService = createDeploymentManagerService();
    DeploymentManager.Deployments.Insert request = deploymentManagerService.deployments().insert(project, requestBody);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static DeploymentManager createDeploymentManagerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new DeploymentManager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DeploymentManagerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Deployment Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/deploymentmanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/deploymentmanager/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.deploymentmanager.DeploymentManager;
import com.google.api.services.deploymentmanager.model.Deployment;
import com.google.api.services.deploymentmanager.model.DeploymentsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DeploymentManagerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The project ID for this request.
    String project = "my-project";  // TODO: Update placeholder value.

    DeploymentManager deploymentManagerService = createDeploymentManagerService();
    DeploymentManager.Deployments.List request = deploymentManagerService.deployments().list(project);

    DeploymentsListResponse response;
    do {
      response = request.execute();
      if (response.getDeployments() == null) {
        continue;
      }
      for (Deployment deployment : response.getDeployments()) {
        // TODO: Change code below to process each `deployment` resource:
        System.out.println(deployment);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static DeploymentManager createDeploymentManagerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new DeploymentManager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DeploymentManagerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Deployment Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/deploymentmanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/deploymentmanager/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.deploymentmanager.DeploymentManager;
import com.google.api.services.deploymentmanager.model.Deployment;
import com.google.api.services.deploymentmanager.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DeploymentManagerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The project ID for this request.
    String project = "my-project";  // TODO: Update placeholder value.

    // The name of the deployment for this request.
    String deployment = "my-deployment";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. Only assigned
    // fields will be changed:
    Deployment requestBody = new Deployment();

    DeploymentManager deploymentManagerService = createDeploymentManagerService();
    DeploymentManager.Deployments.Patch request = deploymentManagerService.deployments().patch(project, deployment, requestBody);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static DeploymentManager createDeploymentManagerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new DeploymentManager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DeploymentManagerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Deployment Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/deploymentmanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/deploymentmanager/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.deploymentmanager.DeploymentManager;
import com.google.api.services.deploymentmanager.model.Policy;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DeploymentManagerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Project ID for this request.
    String project = "my-project";  // TODO: Update placeholder value.

    // Name of the resource for this request.
    String resource = "my-resource";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    Policy requestBody = new Policy();

    DeploymentManager deploymentManagerService = createDeploymentManagerService();
    DeploymentManager.Deployments.SetIamPolicy request = deploymentManagerService.deployments().setIamPolicy(project, resource, requestBody);

    Policy response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static DeploymentManager createDeploymentManagerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new DeploymentManager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DeploymentManagerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Deployment Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/deploymentmanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/deploymentmanager/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.deploymentmanager.DeploymentManager;
import com.google.api.services.deploymentmanager.model.DeploymentsStopRequest;
import com.google.api.services.deploymentmanager.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DeploymentManagerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The project ID for this request.
    String project = "my-project";  // TODO: Update placeholder value.

    // The name of the deployment for this request.
    String deployment = "my-deployment";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    DeploymentsStopRequest requestBody = new DeploymentsStopRequest();

    DeploymentManager deploymentManagerService = createDeploymentManagerService();
    DeploymentManager.Deployments.Stop request = deploymentManagerService.deployments().stop(project, deployment, requestBody);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static DeploymentManager createDeploymentManagerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new DeploymentManager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DeploymentManagerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Deployment Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/deploymentmanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/deploymentmanager/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.deploymentmanager.DeploymentManager;
import com.google.api.services.deploymentmanager.model.TestPermissionsRequest;
import com.google.api.services.deploymentmanager.model.TestPermissionsResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DeploymentManagerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // Project ID for this request.
    String project = "my-project";  // TODO: Update placeholder value.

    // Name of the resource for this request.
    String resource = "my-resource";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`:
    TestPermissionsRequest requestBody = new TestPermissionsRequest();

    DeploymentManager deploymentManagerService = createDeploymentManagerService();
    DeploymentManager.Deployments.TestIamPermissions request = deploymentManagerService.deployments().testIamPermissions(project, resource, requestBody);

    TestPermissionsResponse response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static DeploymentManager createDeploymentManagerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new DeploymentManager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DeploymentManagerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Deployment Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/deploymentmanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/deploymentmanager/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.deploymentmanager.DeploymentManager;
import com.google.api.services.deploymentmanager.model.Deployment;
import com.google.api.services.deploymentmanager.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DeploymentManagerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The project ID for this request.
    String project = "my-project";  // TODO: Update placeholder value.

    // The name of the deployment for this request.
    String deployment = "my-deployment";  // TODO: Update placeholder value.

    // TODO: Assign values to desired fields of `requestBody`. All existing
    // fields will be replaced:
    Deployment requestBody = new Deployment();

    DeploymentManager deploymentManagerService = createDeploymentManagerService();
    DeploymentManager.Deployments.Update request = deploymentManagerService.deployments().update(project, deployment, requestBody);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static DeploymentManager createDeploymentManagerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new DeploymentManager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DeploymentManagerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Deployment Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/deploymentmanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/deploymentmanager/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.deploymentmanager.DeploymentManager;
import com.google.api.services.deploymentmanager.model.Manifest;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DeploymentManagerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The project ID for this request.
    String project = "my-project";  // TODO: Update placeholder value.

    // The name of the deployment for this request.
    String deployment = "my-deployment";  // TODO: Update placeholder value.

    // The name of the manifest for this request.
    String manifest = "my-manifest";  // TODO: Update placeholder value.

    DeploymentManager deploymentManagerService = createDeploymentManagerService();
    DeploymentManager.Manifests.Get request = deploymentManagerService.manifests().get(project, deployment, manifest);

    Manifest response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static DeploymentManager createDeploymentManagerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new DeploymentManager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DeploymentManagerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Deployment Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/deploymentmanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/deploymentmanager/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.deploymentmanager.DeploymentManager;
import com.google.api.services.deploymentmanager.model.Manifest;
import com.google.api.services.deploymentmanager.model.ManifestsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DeploymentManagerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The project ID for this request.
    String project = "my-project";  // TODO: Update placeholder value.

    // The name of the deployment for this request.
    String deployment = "my-deployment";  // TODO: Update placeholder value.

    DeploymentManager deploymentManagerService = createDeploymentManagerService();
    DeploymentManager.Manifests.List request = deploymentManagerService.manifests().list(project, deployment);

    ManifestsListResponse response;
    do {
      response = request.execute();
      if (response.getManifests() == null) {
        continue;
      }
      for (Manifest manifest : response.getManifests()) {
        // TODO: Change code below to process each `manifest` resource:
        System.out.println(manifest);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static DeploymentManager createDeploymentManagerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new DeploymentManager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DeploymentManagerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Deployment Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/deploymentmanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/deploymentmanager/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.deploymentmanager.DeploymentManager;
import com.google.api.services.deploymentmanager.model.Operation;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DeploymentManagerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The project ID for this request.
    String project = "my-project";  // TODO: Update placeholder value.

    // The name of the operation for this request.
    String operation = "my-operation";  // TODO: Update placeholder value.

    DeploymentManager deploymentManagerService = createDeploymentManagerService();
    DeploymentManager.Operations.Get request = deploymentManagerService.operations().get(project, operation);

    Operation response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static DeploymentManager createDeploymentManagerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new DeploymentManager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DeploymentManagerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Deployment Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/deploymentmanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/deploymentmanager/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.deploymentmanager.DeploymentManager;
import com.google.api.services.deploymentmanager.model.Operation;
import com.google.api.services.deploymentmanager.model.OperationsListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DeploymentManagerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The project ID for this request.
    String project = "my-project";  // TODO: Update placeholder value.

    DeploymentManager deploymentManagerService = createDeploymentManagerService();
    DeploymentManager.Operations.List request = deploymentManagerService.operations().list(project);

    OperationsListResponse response;
    do {
      response = request.execute();
      if (response.getOperations() == null) {
        continue;
      }
      for (Operation operation : response.getOperations()) {
        // TODO: Change code below to process each `operation` resource:
        System.out.println(operation);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static DeploymentManager createDeploymentManagerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new DeploymentManager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DeploymentManagerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Deployment Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/deploymentmanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/deploymentmanager/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.deploymentmanager.DeploymentManager;
import com.google.api.services.deploymentmanager.model.Resource;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DeploymentManagerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The project ID for this request.
    String project = "my-project";  // TODO: Update placeholder value.

    // The name of the deployment for this request.
    String deployment = "my-deployment";  // TODO: Update placeholder value.

    // The name of the resource for this request.
    String resource = "my-resource";  // TODO: Update placeholder value.

    DeploymentManager deploymentManagerService = createDeploymentManagerService();
    DeploymentManager.Resources.Get request = deploymentManagerService.resources().get(project, deployment, resource);

    Resource response = request.execute();

    // TODO: Change code below to process the `response` object:
    System.out.println(response);
  }

  public static DeploymentManager createDeploymentManagerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new DeploymentManager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DeploymentManagerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Deployment Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/deploymentmanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/deploymentmanager/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.deploymentmanager.DeploymentManager;
import com.google.api.services.deploymentmanager.model.Resource;
import com.google.api.services.deploymentmanager.model.ResourcesListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DeploymentManagerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The project ID for this request.
    String project = "my-project";  // TODO: Update placeholder value.

    // The name of the deployment for this request.
    String deployment = "my-deployment";  // TODO: Update placeholder value.

    DeploymentManager deploymentManagerService = createDeploymentManagerService();
    DeploymentManager.Resources.List request = deploymentManagerService.resources().list(project, deployment);

    ResourcesListResponse response;
    do {
      response = request.execute();
      if (response.getResources() == null) {
        continue;
      }
      for (Resource resource : response.getResources()) {
        // TODO: Change code below to process each `resource` resource:
        System.out.println(resource);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static DeploymentManager createDeploymentManagerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new DeploymentManager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DeploymentManagerSample/0.1")
        .build();
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Deployment Manager API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/deploymentmanager
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the Java client library on Maven or Gradle. Check installation
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/deploymentmanager/v2/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.deploymentmanager.DeploymentManager;
import com.google.api.services.deploymentmanager.model.Type;
import com.google.api.services.deploymentmanager.model.TypesListResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;

public class DeploymentManagerExample {
  public static void main(String args[]) throws IOException, GeneralSecurityException {
    // The project ID for this request.
    String project = "my-project";  // TODO: Update placeholder value.

    DeploymentManager deploymentManagerService = createDeploymentManagerService();
    DeploymentManager.Types.List request = deploymentManagerService.types().list(project);

    TypesListResponse response;
    do {
      response = request.execute();
      if (response.getTypes() == null) {
        continue;
      }
      for (Type type : response.getTypes()) {
        // TODO: Change code below to process each `type` resource:
        System.out.println(type);
      }
      request.setPageToken(response.getNextPageToken());
    } while (response.getNextPageToken() != null);
  }

  public static DeploymentManager createDeploymentManagerService() throws IOException, GeneralSecurityException {
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    GoogleCredential credential = GoogleCredential.getApplicationDefault();
    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    return new DeploymentManager.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Google-DeploymentManagerSample/0.1")
        .build();
  }
}
