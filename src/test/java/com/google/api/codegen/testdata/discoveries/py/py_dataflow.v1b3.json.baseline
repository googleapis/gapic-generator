
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Dataflow API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataflow
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataflow', 'v1b3', credentials=credentials)

# The project which owns the job.
project_id = ''  # TODO: Update placeholder value.

job_body = {
    # TODO: Add desired entries of the request body.
}

request = service.projects().jobs().create(projectId=project_id, body=job_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Dataflow API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataflow
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataflow', 'v1b3', credentials=credentials)

# The project id.
project_id = ''  # TODO: Update placeholder value.

# The job id.
job_id = ''  # TODO: Update placeholder value.

get_debug_config_request_body = {
    # TODO: Add desired entries of the request body.
}

request = service.projects().jobs().debug().getConfig(projectId=project_id, jobId=job_id, body=get_debug_config_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Dataflow API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataflow
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataflow', 'v1b3', credentials=credentials)

# The project id.
project_id = ''  # TODO: Update placeholder value.

# The job id.
job_id = ''  # TODO: Update placeholder value.

send_debug_capture_request_body = {
    # TODO: Add desired entries of the request body.
}

request = service.projects().jobs().debug().sendCapture(projectId=project_id, jobId=job_id, body=send_debug_capture_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Dataflow API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataflow
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataflow', 'v1b3', credentials=credentials)

# The project which owns the job.
project_id = ''  # TODO: Update placeholder value.

# Identifies a single job.
job_id = ''  # TODO: Update placeholder value.

request = service.projects().jobs().get(projectId=project_id, jobId=job_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Dataflow API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataflow
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataflow', 'v1b3', credentials=credentials)

# A project id.
project_id = ''  # TODO: Update placeholder value.

# The job to get messages for.
job_id = ''  # TODO: Update placeholder value.

request = service.projects().jobs().getMetrics(projectId=project_id, jobId=job_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Dataflow API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataflow
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataflow', 'v1b3', credentials=credentials)

# The project which owns the jobs.
project_id = ''  # TODO: Update placeholder value.

request = service.projects().jobs().list(projectId=project_id)
while request is not None:
    response = request.execute()

    for job in response['jobs']:
        # TODO: Change code below to process each `job` resource:
        pprint(job)

    request = service.projects().jobs().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Dataflow API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataflow
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataflow', 'v1b3', credentials=credentials)

# A project id.
project_id = ''  # TODO: Update placeholder value.

# The job to get messages about.
job_id = ''  # TODO: Update placeholder value.

request = service.projects().jobs().messages().list(projectId=project_id, jobId=job_id)
while request is not None:
    response = request.execute()

    for job_message in response['jobMessages']:
        # TODO: Change code below to process each `job_message` resource:
        pprint(job_message)

    request = service.projects().jobs().messages().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Dataflow API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataflow
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataflow', 'v1b3', credentials=credentials)

# The project which owns the job.
project_id = ''  # TODO: Update placeholder value.

# Identifies a single job.
job_id = ''  # TODO: Update placeholder value.

job_body = {
    # TODO: Add desired entries of the request body.
}

request = service.projects().jobs().update(projectId=project_id, jobId=job_id, body=job_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Dataflow API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataflow
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataflow', 'v1b3', credentials=credentials)

# Identifies the project this worker belongs to.
project_id = ''  # TODO: Update placeholder value.

# Identifies the workflow job this worker belongs to.
job_id = ''  # TODO: Update placeholder value.

lease_work_item_request_body = {
    # TODO: Add desired entries of the request body.
}

request = service.projects().jobs().workItems().lease(projectId=project_id, jobId=job_id, body=lease_work_item_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Dataflow API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataflow
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataflow', 'v1b3', credentials=credentials)

# The project which owns the WorkItem's job.
project_id = ''  # TODO: Update placeholder value.

# The job which the WorkItem is part of.
job_id = ''  # TODO: Update placeholder value.

report_work_item_status_request_body = {
    # TODO: Add desired entries of the request body.
}

request = service.projects().jobs().workItems().reportStatus(projectId=project_id, jobId=job_id, body=report_work_item_status_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Dataflow API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataflow
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataflow', 'v1b3', credentials=credentials)

# The project which owns the job.
project_id = ''  # TODO: Update placeholder value.

create_job_from_template_request_body = {
    # TODO: Add desired entries of the request body.
}

request = service.projects().templates().create(projectId=project_id, body=create_job_from_template_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Dataflow API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataflow
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataflow', 'v1b3', credentials=credentials)

# The project to send the WorkerMessages to.
project_id = ''  # TODO: Update placeholder value.

send_worker_messages_request_body = {
    # TODO: Add desired entries of the request body.
}

request = service.projects().workerMessages(projectId=project_id, body=send_worker_messages_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
