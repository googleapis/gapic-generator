
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Dataflow API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataflow
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataflow', 'v1b3', credentials=credentials)

# The project which owns the job.
projectId = '{MY-PROJECT-ID}'  # {TODO()} Update placeholder value(s).

job_body = {
    # TODO: Add the desired entries.
}


request = service.projects().jobs().create(projectId=projectId, body=job_body)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Dataflow API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataflow
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataflow', 'v1b3', credentials=credentials)

# The project which owns the job.
projectId = '{MY-PROJECT-ID}'  # {TODO()} Update placeholder value(s).

# Identifies a single job.
jobId = '{MY-JOB-ID}'  # {TODO()} Update placeholder value(s).

request = service.projects().jobs().get(projectId=projectId, jobId=jobId)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Dataflow API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataflow
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataflow', 'v1b3', credentials=credentials)

# A project id.
projectId = '{MY-PROJECT-ID}'  # {TODO()} Update placeholder value(s).

# The job to get messages for.
jobId = '{MY-JOB-ID}'  # {TODO()} Update placeholder value(s).

request = service.projects().jobs().getMetrics(projectId=projectId, jobId=jobId)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Dataflow API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataflow
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataflow', 'v1b3', credentials=credentials)

# The project which owns the jobs.
projectId = '{MY-PROJECT-ID}'  # {TODO()} Update placeholder value(s).

jobs = service.projects().jobs()
request = jobs.list(projectId=projectId)
while request is not None:
    response = request.execute()

    for job in response['jobs']:
        # TODO: Use job
        pprint(job)

    request = jobs.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Dataflow API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataflow
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataflow', 'v1b3', credentials=credentials)

# A project id.
projectId = '{MY-PROJECT-ID}'  # {TODO()} Update placeholder value(s).

# The job to get messages about.
jobId = '{MY-JOB-ID}'  # {TODO()} Update placeholder value(s).

messages = service.projects().jobs().messages()
request = messages.list(projectId=projectId, jobId=jobId)
while request is not None:
    response = request.execute()

    for job_message in response['jobMessages']:
        # TODO: Use job_message
        pprint(job_message)

    request = messages.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Dataflow API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataflow
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataflow', 'v1b3', credentials=credentials)

# The project which owns the job.
projectId = '{MY-PROJECT-ID}'  # {TODO()} Update placeholder value(s).

# Identifies a single job.
jobId = '{MY-JOB-ID}'  # {TODO()} Update placeholder value(s).

job_body = {
    # TODO: Add the desired entries.
}


request = service.projects().jobs().update(projectId=projectId, jobId=jobId, body=job_body)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Dataflow API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataflow
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataflow', 'v1b3', credentials=credentials)

# Identifies the project this worker belongs to.
projectId = '{MY-PROJECT-ID}'  # {TODO()} Update placeholder value(s).

# Identifies the workflow job this worker belongs to.
jobId = '{MY-JOB-ID}'  # {TODO()} Update placeholder value(s).

lease_work_item_request_body = {
    # TODO: Add the desired entries.
}


request = service.projects().jobs().workItems().lease(projectId=projectId, jobId=jobId, body=lease_work_item_request_body)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Dataflow API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataflow
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataflow', 'v1b3', credentials=credentials)

# The project which owns the WorkItem's job.
projectId = '{MY-PROJECT-ID}'  # {TODO()} Update placeholder value(s).

# The job which the WorkItem is part of.
jobId = '{MY-JOB-ID}'  # {TODO()} Update placeholder value(s).

report_work_item_status_request_body = {
    # TODO: Add the desired entries.
}


request = service.projects().jobs().workItems().reportStatus(projectId=projectId, jobId=jobId, body=report_work_item_status_request_body)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Dataflow API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataflow
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataflow', 'v1b3', credentials=credentials)

# The project to send the WorkerMessages to.
projectId = '{MY-PROJECT-ID}'  # {TODO()} Update placeholder value(s).

send_worker_messages_request_body = {
    # TODO: Add the desired entries.
}


request = service.projects().workerMessages(projectId=projectId, body=send_worker_messages_request_body)
response = request.execute()

# TODO: Use response
pprint(response)
