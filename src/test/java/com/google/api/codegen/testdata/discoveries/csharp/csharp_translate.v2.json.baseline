
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Translate API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/translate
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Services;
using Google.Apis.Translate.v2;
using System;
using System.Collections.Generic;

using Data = Google.Apis.Translate.v2.Data;

namespace TranslateSample
{
    public class TranslateServiceExample
    {
        public static void Main(string[] args)
        {
            TranslateService translateService = new TranslateService(new BaseClientService.Initializer
            {
                ApiKey = "",  // Update placeholder with desired API key.

                ApplicationName = "Google-TranslateSample/0.1",
            });

            // The text to detect
            List<string> q = new List<string>();  // TODO: Update placeholder value.

            DetectionsResource.ListRequest request = translateService.Detections.List(q);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.DetectionsListResponse response = request.Execute();
            // Data.DetectionsListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Translate API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/translate
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Services;
using Google.Apis.Translate.v2;
using System;

using Data = Google.Apis.Translate.v2.Data;

namespace TranslateSample
{
    public class TranslateServiceExample
    {
        public static void Main(string[] args)
        {
            TranslateService translateService = new TranslateService(new BaseClientService.Initializer
            {
                ApiKey = "",  // Update placeholder with desired API key.

                ApplicationName = "Google-TranslateSample/0.1",
            });

            LanguagesResource.ListRequest request = translateService.Languages.List();

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.LanguagesListResponse response = request.Execute();
            // Data.LanguagesListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Translate API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/translate
// 2. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Services;
using Google.Apis.Translate.v2;
using System;
using System.Collections.Generic;

using Data = Google.Apis.Translate.v2.Data;

namespace TranslateSample
{
    public class TranslateServiceExample
    {
        public static void Main(string[] args)
        {
            TranslateService translateService = new TranslateService(new BaseClientService.Initializer
            {
                ApiKey = "",  // Update placeholder with desired API key.

                ApplicationName = "Google-TranslateSample/0.1",
            });

            // The text to translate
            List<string> q = new List<string>();  // TODO: Update placeholder value.

            // The target language into which the text should be translated
            string target = "";  // TODO: Update placeholder value.

            TranslationsResource.ListRequest request = translateService.Translations.List(q, target);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.TranslationsListResponse response = request.Execute();
            // Data.TranslationsListResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
