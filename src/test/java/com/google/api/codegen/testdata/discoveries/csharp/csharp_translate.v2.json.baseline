
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Translate API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/translate
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Translate.v2;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Translate.v2.Data;


namespace TranslateSample
{
    public class TranslateServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            TranslateService translateService = new TranslateService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The text to detect
            List<string> q = new List<string>(); // TODO: Update placeholder value(s).

            DetectionsResource.ListRequest request = translateService.Detections.List(q);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.DetectionsListResponse response = request.Execute();
            // Data.DetectionsListResponse response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Translate API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/translate
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Translate.v2;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Translate.v2.Data;


namespace TranslateSample
{
    public class TranslateServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            TranslateService translateService = new TranslateService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            LanguagesResource.ListRequest request = translateService.Languages.List();

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.LanguagesListResponse response = request.Execute();
            // Data.LanguagesListResponse response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Translate API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/translate
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Translate.v2;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Translate.v2.Data;


namespace TranslateSample
{
    public class TranslateServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            TranslateService translateService = new TranslateService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The text to translate
            List<string> q = new List<string>(); // TODO: Update placeholder value(s).

            // The target language into which the text should be translated
            string target = "{MY-TARGET}"; // TODO: Update placeholder value(s).

            TranslationsResource.ListRequest request = translateService.Translations.List(q, target);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.TranslationsListResponse response = request.Execute();
            // Data.TranslationsListResponse response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
