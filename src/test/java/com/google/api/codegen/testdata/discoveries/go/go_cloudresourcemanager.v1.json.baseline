
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudresourcemanager/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudresourcemanagerService, err := cloudresourcemanager.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the operation resource.
  name := ""  // TODO: Update placeholder value.

  resp, err := cloudresourcemanagerService.Operations.Get(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudresourcemanager/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudresourcemanagerService, err := cloudresourcemanager.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the Organization to fetch, e.g. "organizations/1234".
  name := ""  // TODO: Update placeholder value.

  resp, err := cloudresourcemanagerService.Organizations.Get(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudresourcemanager/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudresourcemanagerService, err := cloudresourcemanager.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy is being requested.
  // `resource` is usually specified as a path. For example, a Project
  // resource is specified as `projects/{project}`.
  resource := ""  // TODO: Update placeholder value.

  rb := &cloudresourcemanager.GetIamPolicyRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := cloudresourcemanagerService.Organizations.GetIamPolicy(resource, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudresourcemanager/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudresourcemanagerService, err := cloudresourcemanager.New(c)
  if err != nil {
    log.Fatal(err)
  }

  rb := &cloudresourcemanager.SearchOrganizationsRequest{
    // TODO: Add desired fields of the request body.
  }

  req := cloudresourcemanagerService.Organizations.Search(rb)
  if err := req.Pages(ctx, func(page *cloudresourcemanager.SearchOrganizationsResponse) error {
    for _, organization := range page.Organizations {
      // TODO: Change code below to process each `organization` resource:
      fmt.Printf("%#v\n", organization)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudresourcemanager/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudresourcemanagerService, err := cloudresourcemanager.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy is being specified.
  // `resource` is usually specified as a path. For example, a Project
  // resource is specified as `projects/{project}`.
  resource := ""  // TODO: Update placeholder value.

  rb := &cloudresourcemanager.SetIamPolicyRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := cloudresourcemanagerService.Organizations.SetIamPolicy(resource, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudresourcemanager/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudresourcemanagerService, err := cloudresourcemanager.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy detail is being requested.
  // `resource` is usually specified as a path. For example, a Project
  // resource is specified as `projects/{project}`.
  resource := ""  // TODO: Update placeholder value.

  rb := &cloudresourcemanager.TestIamPermissionsRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := cloudresourcemanagerService.Organizations.TestIamPermissions(resource, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudresourcemanager/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudresourcemanagerService, err := cloudresourcemanager.New(c)
  if err != nil {
    log.Fatal(err)
  }

  rb := &cloudresourcemanager.Project{
    // TODO: Add desired fields of the request body.
  }

  resp, err := cloudresourcemanagerService.Projects.Create(rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudresourcemanager/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudresourcemanagerService, err := cloudresourcemanager.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Project ID (for example, `foo-bar-123`).
  // Required.
  projectId := ""  // TODO: Update placeholder value.

  resp, err := cloudresourcemanagerService.Projects.Delete(projectId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudresourcemanager/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudresourcemanagerService, err := cloudresourcemanager.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Project ID (for example, `my-project-123`).
  // Required.
  projectId := ""  // TODO: Update placeholder value.

  resp, err := cloudresourcemanagerService.Projects.Get(projectId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudresourcemanager/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudresourcemanagerService, err := cloudresourcemanager.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Project ID (for example, `my-project-123`).
  // Required.
  projectId := ""  // TODO: Update placeholder value.

  rb := &cloudresourcemanager.GetAncestryRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := cloudresourcemanagerService.Projects.GetAncestry(projectId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudresourcemanager/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudresourcemanagerService, err := cloudresourcemanager.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy is being requested.
  // `resource` is usually specified as a path. For example, a Project
  // resource is specified as `projects/{project}`.
  resource := ""  // TODO: Update placeholder value.

  rb := &cloudresourcemanager.GetIamPolicyRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := cloudresourcemanagerService.Projects.GetIamPolicy(resource, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudresourcemanager/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudresourcemanagerService, err := cloudresourcemanager.New(c)
  if err != nil {
    log.Fatal(err)
  }

  req := cloudresourcemanagerService.Projects.List()
  if err := req.Pages(ctx, func(page *cloudresourcemanager.ListProjectsResponse) error {
    for _, project := range page.Projects {
      // TODO: Change code below to process each `project` resource:
      fmt.Printf("%#v\n", project)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudresourcemanager/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudresourcemanagerService, err := cloudresourcemanager.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy is being specified.
  // `resource` is usually specified as a path. For example, a Project
  // resource is specified as `projects/{project}`.
  resource := ""  // TODO: Update placeholder value.

  rb := &cloudresourcemanager.SetIamPolicyRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := cloudresourcemanagerService.Projects.SetIamPolicy(resource, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudresourcemanager/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudresourcemanagerService, err := cloudresourcemanager.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy detail is being requested.
  // `resource` is usually specified as a path. For example, a Project
  // resource is specified as `projects/{project}`.
  resource := ""  // TODO: Update placeholder value.

  rb := &cloudresourcemanager.TestIamPermissionsRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := cloudresourcemanagerService.Projects.TestIamPermissions(resource, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudresourcemanager/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudresourcemanagerService, err := cloudresourcemanager.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID (for example, `foo-bar-123`).
  // Required.
  projectId := ""  // TODO: Update placeholder value.

  rb := &cloudresourcemanager.UndeleteProjectRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := cloudresourcemanagerService.Projects.Undelete(projectId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudresourcemanager/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudresourcemanagerService, err := cloudresourcemanager.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID (for example, `my-project-123`).
  // Required.
  projectId := ""  // TODO: Update placeholder value.

  rb := &cloudresourcemanager.Project{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := cloudresourcemanagerService.Projects.Update(projectId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
