
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Trace API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudtrace
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudTrace.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudTrace.v1.Data;


namespace CloudTraceSample
{
    public class CloudTraceServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudTraceService cloudTraceService = new CloudTraceService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `PatchTraces` method:

            // ID of the Cloud project where the trace data is stored.
            string projectId = "{MY-PROJECT-ID}";


            Data.Traces requestBody = new Data.Traces();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            ProjectsResource.PatchTracesRequest request = cloudTraceService.Projects.PatchTraces(requestBody, projectId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Empty response = request.Execute();
            // Data.Empty response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Trace API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudtrace
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudTrace.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudTrace.v1.Data;


namespace CloudTraceSample
{
    public class CloudTraceServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudTraceService cloudTraceService = new CloudTraceService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // ID of the Cloud project where the trace data is stored.
            string projectId = "{MY-PROJECT-ID}";

            // ID of the trace to return.
            string traceId = "{MY-TRACE-ID}";


            ProjectsResource.TracesResource.GetRequest request = cloudTraceService.Projects.Traces.Get(projectId, traceId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Trace response = request.Execute();
            // Data.Trace response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Trace API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudtrace
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudTrace.v1;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.CloudTrace.v1.Data;


namespace CloudTraceSample
{
    public class CloudTraceServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudTraceService cloudTraceService = new CloudTraceService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // ID of the Cloud project where the trace data is stored.
            string projectId = "{MY-PROJECT-ID}";


            ProjectsResource.TracesResource.ListRequest request = cloudTraceService.Projects.Traces.List(projectId);

            Data.ListTracesResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Traces == null)
                {
                    continue;
                }
                foreach (Data.Trace trace in response.Traces)
                {
                    // TODO: Change code below to process each `trace` resource:
                    Console.WriteLine(trace);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
