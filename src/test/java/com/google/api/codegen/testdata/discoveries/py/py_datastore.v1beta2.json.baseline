
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Datastore API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/datastore
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the datastore service object (version v1beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('datastore', 'v1beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'allocateIds' method:

# * Identifies the dataset.
datasetId = ''

allocate_ids_request_body = {
# TODO: Add desired entries of the 'allocate_ids_request_body' dict
}

request = service.datasets().allocateIds(datasetId=datasetId, body=allocate_ids_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Datastore API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/datastore
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the datastore service object (version v1beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('datastore', 'v1beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'beginTransaction' method:

# * Identifies the dataset.
datasetId = ''

begin_transaction_request_body = {
# TODO: Add desired entries of the 'begin_transaction_request_body' dict
}

request = service.datasets().beginTransaction(datasetId=datasetId, body=begin_transaction_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Datastore API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/datastore
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the datastore service object (version v1beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('datastore', 'v1beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'commit' method:

# * Identifies the dataset.
datasetId = ''

commit_request_body = {
# TODO: Add desired entries of the 'commit_request_body' dict
}

request = service.datasets().commit(datasetId=datasetId, body=commit_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Datastore API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/datastore
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the datastore service object (version v1beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('datastore', 'v1beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'lookup' method:

# * Identifies the dataset.
datasetId = ''

lookup_request_body = {
# TODO: Add desired entries of the 'lookup_request_body' dict
}

request = service.datasets().lookup(datasetId=datasetId, body=lookup_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Datastore API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/datastore
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the datastore service object (version v1beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('datastore', 'v1beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'rollback' method:

# * Identifies the dataset.
datasetId = ''

rollback_request_body = {
# TODO: Add desired entries of the 'rollback_request_body' dict
}

request = service.datasets().rollback(datasetId=datasetId, body=rollback_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Datastore API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/datastore
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the datastore service object (version v1beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('datastore', 'v1beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'runQuery' method:

# * Identifies the dataset.
datasetId = ''

run_query_request_body = {
# TODO: Add desired entries of the 'run_query_request_body' dict
}

request = service.datasets().runQuery(datasetId=datasetId, body=run_query_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
