
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Datastore API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/datastore
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('datastore', 'v1beta2', credentials=credentials)

# Identifies the dataset.
datasetId = '{MY-DATASET-ID}'  # {TODO()} Update placeholder value(s).

allocate_ids_request_body = {
    # TODO: Add the desired entries.
}


request = service.datasets().allocateIds(datasetId=datasetId, body=allocate_ids_request_body)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Datastore API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/datastore
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('datastore', 'v1beta2', credentials=credentials)

# Identifies the dataset.
datasetId = '{MY-DATASET-ID}'  # {TODO()} Update placeholder value(s).

begin_transaction_request_body = {
    # TODO: Add the desired entries.
}


request = service.datasets().beginTransaction(datasetId=datasetId, body=begin_transaction_request_body)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Datastore API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/datastore
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('datastore', 'v1beta2', credentials=credentials)

# Identifies the dataset.
datasetId = '{MY-DATASET-ID}'  # {TODO()} Update placeholder value(s).

commit_request_body = {
    # TODO: Add the desired entries.
}


request = service.datasets().commit(datasetId=datasetId, body=commit_request_body)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Datastore API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/datastore
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('datastore', 'v1beta2', credentials=credentials)

# Identifies the dataset.
datasetId = '{MY-DATASET-ID}'  # {TODO()} Update placeholder value(s).

lookup_request_body = {
    # TODO: Add the desired entries.
}


request = service.datasets().lookup(datasetId=datasetId, body=lookup_request_body)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Datastore API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/datastore
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('datastore', 'v1beta2', credentials=credentials)

# Identifies the dataset.
datasetId = '{MY-DATASET-ID}'  # {TODO()} Update placeholder value(s).

rollback_request_body = {
    # TODO: Add the desired entries.
}


request = service.datasets().rollback(datasetId=datasetId, body=rollback_request_body)
response = request.execute()

# TODO: Use response
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Datastore API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/datastore
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('datastore', 'v1beta2', credentials=credentials)

# Identifies the dataset.
datasetId = '{MY-DATASET-ID}'  # {TODO()} Update placeholder value(s).

run_query_request_body = {
    # TODO: Add the desired entries.
}


request = service.datasets().runQuery(datasetId=datasetId, body=run_query_request_body)
response = request.execute()

# TODO: Use response
pprint(response)
