
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Datastore API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/datastore
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the datastore service object (version v1beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('datastore', 'v1beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'allocateIds' method:
# * Identifies the dataset.
datasetId = ''

allocate_ids_request = {
# TODO: Add desired entries of the 'allocate_ids_request' dict
}

request = service.datasets().allocateIds(datasetId, allocate_ids_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Datastore API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/datastore
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the datastore service object (version v1beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('datastore', 'v1beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'beginTransaction' method:
# * Identifies the dataset.
datasetId = ''

begin_transaction_request = {
# TODO: Add desired entries of the 'begin_transaction_request' dict
}

request = service.datasets().beginTransaction(datasetId, begin_transaction_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Datastore API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/datastore
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the datastore service object (version v1beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('datastore', 'v1beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'commit' method:
# * Identifies the dataset.
datasetId = ''

commit_request = {
# TODO: Add desired entries of the 'commit_request' dict
}

request = service.datasets().commit(datasetId, commit_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Datastore API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/datastore
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the datastore service object (version v1beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('datastore', 'v1beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'lookup' method:
# * Identifies the dataset.
datasetId = ''

lookup_request = {
# TODO: Add desired entries of the 'lookup_request' dict
}

request = service.datasets().lookup(datasetId, lookup_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Datastore API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/datastore
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the datastore service object (version v1beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('datastore', 'v1beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'rollback' method:
# * Identifies the dataset.
datasetId = ''

rollback_request = {
# TODO: Add desired entries of the 'rollback_request' dict
}

request = service.datasets().rollback(datasetId, rollback_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Datastore API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/datastore
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the datastore service object (version v1beta2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('datastore', 'v1beta2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'runQuery' method:
# * Identifies the dataset.
datasetId = ''

run_query_request = {
# TODO: Add desired entries of the 'run_query_request' dict
}

request = service.datasets().runQuery(datasetId, run_query_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
