
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := cloudresourcemanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The id of the Organization resource to fetch.
  organizationId := "{MY-ORGANIZATION-ID}" // TODO: Update placeholder value(s).

  resp, err := s.Organizations.Get(organizationId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := cloudresourcemanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as a
  // path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
  // this value is resource specific and is specified in the `getIamPolicy` documentation.
  resource := "{MY-RESOURCE}" // TODO: Update placeholder value(s).

  getIamPolicyRequest := &cloudresourcemanager.GetIamPolicyRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Organizations.GetIamPolicy(resource, &getIamPolicyRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := cloudresourcemanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  call := s.Organizations.List()
  if err := call.Pages(ctx, func(page *cloudresourcemanager.ListOrganizationsResponse) error {
    for _, organization := range page.Organizations {
      // TODO: Use organization
      fmt.Printf("%#v\n", organization)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := cloudresourcemanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as a
  // path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
  // this value is resource specific and is specified in the `setIamPolicy` documentation.
  resource := "{MY-RESOURCE}" // TODO: Update placeholder value(s).

  setIamPolicyRequest := &cloudresourcemanager.SetIamPolicyRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Organizations.SetIamPolicy(resource, &setIamPolicyRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := cloudresourcemanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
  // specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path
  // specified in this value is resource specific and is specified in the `testIamPermissions`
  // documentation.
  resource := "{MY-RESOURCE}" // TODO: Update placeholder value(s).

  testIamPermissionsRequest := &cloudresourcemanager.TestIamPermissionsRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Organizations.TestIamPermissions(resource, &testIamPermissionsRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := cloudresourcemanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // An immutable id for the Organization that is assigned on creation. This should be omitted when
  // creating a new Organization. This field is read-only.
  organizationId := "{MY-ORGANIZATION-ID}" // TODO: Update placeholder value(s).

  organization := &cloudresourcemanager.Organization{
    // TODO: Add the desired fields.
  }

  resp, err := s.Organizations.Update(organizationId, &organization).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := cloudresourcemanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  project := &cloudresourcemanager.Project{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Create(project).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := cloudresourcemanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The Project ID (for example, `foo-bar-123`). Required.
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Delete(projectId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := cloudresourcemanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The Project ID (for example, `my-project-123`). Required.
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Get(projectId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := cloudresourcemanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as a
  // path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
  // this value is resource specific and is specified in the `getIamPolicy` documentation.
  resource := "{MY-RESOURCE}" // TODO: Update placeholder value(s).

  getIamPolicyRequest := &cloudresourcemanager.GetIamPolicyRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.GetIamPolicy(resource, &getIamPolicyRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := cloudresourcemanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  call := s.Projects.List()
  if err := call.Pages(ctx, func(page *cloudresourcemanager.ListProjectsResponse) error {
    for _, project := range page.Projects {
      // TODO: Use project
      fmt.Printf("%#v\n", project)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := cloudresourcemanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as a
  // path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
  // this value is resource specific and is specified in the `setIamPolicy` documentation.
  resource := "{MY-RESOURCE}" // TODO: Update placeholder value(s).

  setIamPolicyRequest := &cloudresourcemanager.SetIamPolicyRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.SetIamPolicy(resource, &setIamPolicyRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := cloudresourcemanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
  // specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path
  // specified in this value is resource specific and is specified in the `testIamPermissions`
  // documentation.
  resource := "{MY-RESOURCE}" // TODO: Update placeholder value(s).

  testIamPermissionsRequest := &cloudresourcemanager.TestIamPermissionsRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.TestIamPermissions(resource, &testIamPermissionsRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := cloudresourcemanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID (for example, `foo-bar-123`). Required.
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  undeleteProjectRequest := &cloudresourcemanager.UndeleteProjectRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Undelete(projectId, &undeleteProjectRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := cloudresourcemanager.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID (for example, `my-project-123`). Required.
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  project := &cloudresourcemanager.Project{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Update(projectId, &project).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
