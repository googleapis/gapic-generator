
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/cloudresourcemanager/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := cloudresourcemanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // The id of the Organization resource to fetch.
    organizationId = ""
  )

  callResult, err := client.Organizations.Get(organizationId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/cloudresourcemanager/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := cloudresourcemanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'getIamPolicy' method:
  var (
    // REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in this value is resource specific and is specified in the `getIamPolicy` documentation.
    resource = ""

    requestBody = &cloudresourcemanager.GetIamPolicyRequest{}
  )

  callResult, err := client.Organizations.GetIamPolicy(resource, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/cloudresourcemanager/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := cloudresourcemanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  var (
  )

  fn := func(page *cloudresourcemanager.ListOrganizationsResponse) error {
    // doThingsWith(page)
    for i, element := range page.Organizations {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Organizations.List().Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/cloudresourcemanager/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := cloudresourcemanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'setIamPolicy' method:
  var (
    // REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in this value is resource specific and is specified in the `setIamPolicy` documentation.
    resource = ""

    requestBody = &cloudresourcemanager.SetIamPolicyRequest{}
  )

  callResult, err := client.Organizations.SetIamPolicy(resource, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/cloudresourcemanager/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := cloudresourcemanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'testIamPermissions' method:
  var (
    // REQUIRED: The resource for which the policy detail is being requested. `resource` is usually specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in this value is resource specific and is specified in the `testIamPermissions` documentation.
    resource = ""

    requestBody = &cloudresourcemanager.TestIamPermissionsRequest{}
  )

  callResult, err := client.Organizations.TestIamPermissions(resource, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/cloudresourcemanager/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := cloudresourcemanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'update' method:
  var (
    // An immutable id for the Organization that is assigned on creation. This should be omitted when creating a new Organization. This field is read-only.
    organizationId = ""

    requestBody = &cloudresourcemanager.Organization{}
  )

  callResult, err := client.Organizations.Update(organizationId, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/cloudresourcemanager/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := cloudresourcemanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'create' method:
  var (

    requestBody = &cloudresourcemanager.Project{}
  )

  callResult, err := client.Projects.Create(requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/cloudresourcemanager/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := cloudresourcemanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // The Project ID (for example, `foo-bar-123`). Required.
    projectId = ""
  )

  callResult, err := client.Projects.Delete(projectId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/cloudresourcemanager/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := cloudresourcemanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // The Project ID (for example, `my-project-123`). Required.
    projectId = ""
  )

  callResult, err := client.Projects.Get(projectId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/cloudresourcemanager/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := cloudresourcemanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'getIamPolicy' method:
  var (
    // REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in this value is resource specific and is specified in the `getIamPolicy` documentation.
    resource = ""

    requestBody = &cloudresourcemanager.GetIamPolicyRequest{}
  )

  callResult, err := client.Projects.GetIamPolicy(resource, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/cloudresourcemanager/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := cloudresourcemanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  var (
  )

  fn := func(page *cloudresourcemanager.ListProjectsResponse) error {
    // doThingsWith(page)
    for i, element := range page.Projects {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Projects.List().Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/cloudresourcemanager/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := cloudresourcemanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'setIamPolicy' method:
  var (
    // REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in this value is resource specific and is specified in the `setIamPolicy` documentation.
    resource = ""

    requestBody = &cloudresourcemanager.SetIamPolicyRequest{}
  )

  callResult, err := client.Projects.SetIamPolicy(resource, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/cloudresourcemanager/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := cloudresourcemanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'testIamPermissions' method:
  var (
    // REQUIRED: The resource for which the policy detail is being requested. `resource` is usually specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in this value is resource specific and is specified in the `testIamPermissions` documentation.
    resource = ""

    requestBody = &cloudresourcemanager.TestIamPermissionsRequest{}
  )

  callResult, err := client.Projects.TestIamPermissions(resource, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/cloudresourcemanager/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := cloudresourcemanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'undelete' method:
  var (
    // The project ID (for example, `foo-bar-123`). Required.
    projectId = ""

    requestBody = &cloudresourcemanager.UndeleteProjectRequest{}
  )

  callResult, err := client.Projects.Undelete(projectId, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/cloudresourcemanager/v1beta1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := cloudresourcemanager.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'update' method:
  var (
    // The project ID (for example, `my-project-123`). Required.
    projectId = ""

    requestBody = &cloudresourcemanager.Project{}
  )

  callResult, err := client.Projects.Update(projectId, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
