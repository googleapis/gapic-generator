
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudresourcemanager/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudresourcemanager.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The id of the Organization resource to fetch.
  organizationId := "" // TODO: Update placeholder value.

  resp, err := c.Organizations.Get(organizationId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudresourcemanager/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudresourcemanager.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as a
  // path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
  // this value is resource specific and is specified in the `getIamPolicy` documentation.
  resource := "" // TODO: Update placeholder value.

  resp, err := c.Organizations.GetIamPolicy(resource, &cloudresourcemanager.GetIamPolicyRequest{
                                              // TODO: Fill required fields.
                                            }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudresourcemanager/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudresourcemanager.New(hc)
  if err != nil {
    // TODO: Handle error.
  }




  call := c.Organizations.List()
  if err := call.Pages(ctx, func(page *cloudresourcemanager.ListOrganizationsResponse) error {
    for _, v := range page.Organizations {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudresourcemanager/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudresourcemanager.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as a
  // path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
  // this value is resource specific and is specified in the `setIamPolicy` documentation.
  resource := "" // TODO: Update placeholder value.

  resp, err := c.Organizations.SetIamPolicy(resource, &cloudresourcemanager.SetIamPolicyRequest{
                                              // TODO: Fill required fields.
                                            }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudresourcemanager/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudresourcemanager.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
  // specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path
  // specified in this value is resource specific and is specified in the `testIamPermissions`
  // documentation.
  resource := "" // TODO: Update placeholder value.

  resp, err := c.Organizations.TestIamPermissions(resource, &cloudresourcemanager.TestIamPermissionsRequest{
                                                    // TODO: Fill required fields.
                                                  }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudresourcemanager/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudresourcemanager.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // An immutable id for the Organization that is assigned on creation. This should be omitted when
  // creating a new Organization. This field is read-only.
  organizationId := "" // TODO: Update placeholder value.

  resp, err := c.Organizations.Update(organizationId, &cloudresourcemanager.Organization{
                                        // TODO: Fill required fields.
                                      }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudresourcemanager/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudresourcemanager.New(hc)
  if err != nil {
    // TODO: Handle error.
  }



  resp, err := c.Projects.Create(&cloudresourcemanager.Project{
                                   // TODO: Fill required fields.
                                 }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudresourcemanager/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudresourcemanager.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The Project ID (for example, `foo-bar-123`). Required.
  projectId := "" // TODO: Update placeholder value.

  resp, err := c.Projects.Delete(projectId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudresourcemanager/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudresourcemanager.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The Project ID (for example, `my-project-123`). Required.
  projectId := "" // TODO: Update placeholder value.

  resp, err := c.Projects.Get(projectId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudresourcemanager/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudresourcemanager.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // REQUIRED: The resource for which the policy is being requested. `resource` is usually specified as a
  // path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
  // this value is resource specific and is specified in the `getIamPolicy` documentation.
  resource := "" // TODO: Update placeholder value.

  resp, err := c.Projects.GetIamPolicy(resource, &cloudresourcemanager.GetIamPolicyRequest{
                                         // TODO: Fill required fields.
                                       }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudresourcemanager/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudresourcemanager.New(hc)
  if err != nil {
    // TODO: Handle error.
  }




  call := c.Projects.List()
  if err := call.Pages(ctx, func(page *cloudresourcemanager.ListProjectsResponse) error {
    for _, v := range page.Projects {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudresourcemanager/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudresourcemanager.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // REQUIRED: The resource for which the policy is being specified. `resource` is usually specified as a
  // path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path specified in
  // this value is resource specific and is specified in the `setIamPolicy` documentation.
  resource := "" // TODO: Update placeholder value.

  resp, err := c.Projects.SetIamPolicy(resource, &cloudresourcemanager.SetIamPolicyRequest{
                                         // TODO: Fill required fields.
                                       }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudresourcemanager/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudresourcemanager.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // REQUIRED: The resource for which the policy detail is being requested. `resource` is usually
  // specified as a path, such as `projects/*project*/zones/*zone*/disks/*disk*`. The format for the path
  // specified in this value is resource specific and is specified in the `testIamPermissions`
  // documentation.
  resource := "" // TODO: Update placeholder value.

  resp, err := c.Projects.TestIamPermissions(resource, &cloudresourcemanager.TestIamPermissionsRequest{
                                               // TODO: Fill required fields.
                                             }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudresourcemanager/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudresourcemanager.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The project ID (for example, `foo-bar-123`). Required.
  projectId := "" // TODO: Update placeholder value.

  resp, err := c.Projects.Undelete(projectId, &cloudresourcemanager.UndeleteProjectRequest{
                                     // TODO: Fill required fields.
                                   }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Resource Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudresourcemanager
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudresourcemanager/v1beta1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudresourcemanager/v1beta1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudresourcemanager.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudresourcemanager.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The project ID (for example, `my-project-123`). Required.
  projectId := "" // TODO: Update placeholder value.

  resp, err := c.Projects.Update(projectId, &cloudresourcemanager.Project{
                                   // TODO: Fill required fields.
                                 }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
