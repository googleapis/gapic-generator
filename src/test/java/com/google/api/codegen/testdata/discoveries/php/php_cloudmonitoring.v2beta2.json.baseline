
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Monitoring API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudmonitoring
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the CloudMonitoring service object for interacting with the API.
$service = new Google_Service_CloudMonitoring($client);


// TODO: Change placeholders below to desired parameter values for the `create` method:

// * The project id. The value can be the numeric project ID or string-based project name.
$project = '';


$Google_Service_CloudMonitoring_MetricDescriptorBody = new Google_Service_CloudMonitoring_MetricDescriptor($client);
// TODO: Assign values to desired properties of the `$Google_Service_CloudMonitoring_MetricDescriptorBody` object.


$response = $service->metricDescriptors->create($project, $Google_Service_CloudMonitoring_MetricDescriptorBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Monitoring API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudmonitoring
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the CloudMonitoring service object for interacting with the API.
$service = new Google_Service_CloudMonitoring($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// * The project ID to which the metric belongs.
$project = '';

// * Name of the metric.
$metric = '';


$response = $service->metricDescriptors->delete($project, $metric);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Monitoring API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudmonitoring
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the CloudMonitoring service object for interacting with the API.
$service = new Google_Service_CloudMonitoring($client);


// TODO: Change placeholders below to desired parameter values for the `listMetricDescriptors` method:

// * The project id. The value can be the numeric project ID or string-based project name.
$project = '';


$Google_Service_CloudMonitoring_ListMetricDescriptorsRequestBody = new Google_Service_CloudMonitoring_ListMetricDescriptorsRequest($client);
// TODO: Assign values to desired properties of the `$Google_Service_CloudMonitoring_ListMetricDescriptorsRequestBody` object.


$optParams = array();
do {
  $response = $service->metricDescriptors->listMetricDescriptors($project, $Google_Service_CloudMonitoring_ListMetricDescriptorsRequestBody, $optParams);

  foreach ($response['metrics'] as $metric_descriptor) {
    // TODO: Change code below to process each `metric_descriptor` resource:
    echo '<pre>', var_export($metric_descriptor, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Monitoring API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudmonitoring
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the CloudMonitoring service object for interacting with the API.
$service = new Google_Service_CloudMonitoring($client);


// TODO: Change placeholders below to desired parameter values for the `listTimeseries` method:

// * The project ID to which this time series belongs. The value can be the numeric project ID or
//   string-based project name.
$project = '';

// * Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
//   compute.googleapis.com/instance/disk/read_ops_count.
$metric = '';

// * End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
$youngest = '';


$Google_Service_CloudMonitoring_ListTimeseriesRequestBody = new Google_Service_CloudMonitoring_ListTimeseriesRequest($client);
// TODO: Assign values to desired properties of the `$Google_Service_CloudMonitoring_ListTimeseriesRequestBody` object.


$optParams = array();
do {
  $response = $service->timeseries->listTimeseries($project, $metric, $youngest, $Google_Service_CloudMonitoring_ListTimeseriesRequestBody, $optParams);

  foreach ($response['timeseries'] as $timeseries) {
    // TODO: Change code below to process each `timeseries` resource:
    echo '<pre>', var_export($timeseries, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Monitoring API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudmonitoring
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the CloudMonitoring service object for interacting with the API.
$service = new Google_Service_CloudMonitoring($client);


// TODO: Change placeholders below to desired parameter values for the `write` method:

// * The project ID. The value can be the numeric project ID or string-based project name.
$project = '';


$Google_Service_CloudMonitoring_WriteTimeseriesRequestBody = new Google_Service_CloudMonitoring_WriteTimeseriesRequest($client);
// TODO: Assign values to desired properties of the `$Google_Service_CloudMonitoring_WriteTimeseriesRequestBody` object.


$response = $service->timeseries->write($project, $Google_Service_CloudMonitoring_WriteTimeseriesRequestBody);

// TODO: Change code below to process the `$response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Cloud Monitoring API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudmonitoring
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

// Construct the CloudMonitoring service object for interacting with the API.
$service = new Google_Service_CloudMonitoring($client);


// TODO: Change placeholders below to desired parameter values for the `listTimeseriesDescriptors` method:

// * The project ID to which this time series belongs. The value can be the numeric project ID or
//   string-based project name.
$project = '';

// * Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
//   compute.googleapis.com/instance/disk/read_ops_count.
$metric = '';

// * End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
$youngest = '';


$Google_Service_CloudMonitoring_ListTimeseriesDescriptorsRequestBody = new Google_Service_CloudMonitoring_ListTimeseriesDescriptorsRequest($client);
// TODO: Assign values to desired properties of the `$Google_Service_CloudMonitoring_ListTimeseriesDescriptorsRequestBody` object.


$optParams = array();
do {
  $response = $service->timeseriesDescriptors->listTimeseriesDescriptors($project, $metric, $youngest, $Google_Service_CloudMonitoring_ListTimeseriesDescriptorsRequestBody, $optParams);

  foreach ($response['timeseries'] as $timeseries_descriptor) {
    // TODO: Change code below to process each `timeseries_descriptor` resource:
    echo '<pre>', var_export($timeseries_descriptor, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
