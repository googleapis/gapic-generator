
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  dnsService, err := dns.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the project addressed by this request.
  project := ""  // TODO: Update placeholder value.

  // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
  managedZone := ""  // TODO: Update placeholder value.

  rb := &dns.Change{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dnsService.Changes.Create(project, managedZone, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  dnsService, err := dns.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the project addressed by this request.
  project := ""  // TODO: Update placeholder value.

  // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
  managedZone := ""  // TODO: Update placeholder value.

  // The identifier of the requested change, from a previous ResourceRecordSetsChangeResponse.
  changeId := ""  // TODO: Update placeholder value.

  resp, err := dnsService.Changes.Get(project, managedZone, changeId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  dnsService, err := dns.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the project addressed by this request.
  project := ""  // TODO: Update placeholder value.

  // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
  managedZone := ""  // TODO: Update placeholder value.

  req := dnsService.Changes.List(project, managedZone)
  if err := req.Pages(ctx, func(page *dns.ChangesListResponse) error {
    for _, change := range page.Changes {
      // TODO: Change code below to process each `change` resource:
      fmt.Printf("%#v\n", change)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  dnsService, err := dns.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the project addressed by this request.
  project := ""  // TODO: Update placeholder value.

  rb := &dns.ManagedZone{
    // TODO: Add desired fields of the request body.
  }

  resp, err := dnsService.ManagedZones.Create(project, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  dnsService, err := dns.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the project addressed by this request.
  project := ""  // TODO: Update placeholder value.

  // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
  managedZone := ""  // TODO: Update placeholder value.

  if err := dnsService.ManagedZones.Delete(project, managedZone).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  dnsService, err := dns.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the project addressed by this request.
  project := ""  // TODO: Update placeholder value.

  // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
  managedZone := ""  // TODO: Update placeholder value.

  resp, err := dnsService.ManagedZones.Get(project, managedZone).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  dnsService, err := dns.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the project addressed by this request.
  project := ""  // TODO: Update placeholder value.

  req := dnsService.ManagedZones.List(project)
  if err := req.Pages(ctx, func(page *dns.ManagedZonesListResponse) error {
    for _, managedZone := range page.ManagedZones {
      // TODO: Change code below to process each `managedZone` resource:
      fmt.Printf("%#v\n", managedZone)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  dnsService, err := dns.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the project addressed by this request.
  project := ""  // TODO: Update placeholder value.

  resp, err := dnsService.Projects.Get(project).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  dnsService, err := dns.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the project addressed by this request.
  project := ""  // TODO: Update placeholder value.

  // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
  managedZone := ""  // TODO: Update placeholder value.

  req := dnsService.ResourceRecordSets.List(project, managedZone)
  if err := req.Pages(ctx, func(page *dns.ResourceRecordSetsListResponse) error {
    for _, resourceRecordSet := range page.Rrsets {
      // TODO: Change code below to process each `resourceRecordSet` resource:
      fmt.Printf("%#v\n", resourceRecordSet)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
