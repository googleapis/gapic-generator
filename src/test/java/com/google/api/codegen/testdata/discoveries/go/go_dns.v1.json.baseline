
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dns.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the project addressed by this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
  managedZone := "{MY-MANAGED-ZONE}" // TODO: Update placeholder value(s).

  change := &dns.Change{
    // TODO: Add the desired fields.
  }

  resp, err := s.Changes.Create(project, managedZone, &change).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dns.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the project addressed by this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
  managedZone := "{MY-MANAGED-ZONE}" // TODO: Update placeholder value(s).

  // The identifier of the requested change, from a previous ResourceRecordSetsChangeResponse.
  changeId := "{MY-CHANGE-ID}" // TODO: Update placeholder value(s).

  resp, err := s.Changes.Get(project, managedZone, changeId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dns.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the project addressed by this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
  managedZone := "{MY-MANAGED-ZONE}" // TODO: Update placeholder value(s).

  call := s.Changes.List(project, managedZone)
  if err := call.Pages(ctx, func(page *dns.ChangesListResponse) error {
    for _, change := range page.Changes {
      // TODO: Use change
      fmt.Printf("%#v\n", change)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dns.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the project addressed by this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  managedZone := &dns.ManagedZone{
    // TODO: Add the desired fields.
  }

  resp, err := s.ManagedZones.Create(project, &managedZone).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dns.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the project addressed by this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
  managedZone := "{MY-MANAGED-ZONE}" // TODO: Update placeholder value(s).

  if err := s.ManagedZones.Delete(project, managedZone).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dns.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the project addressed by this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
  managedZone := "{MY-MANAGED-ZONE}" // TODO: Update placeholder value(s).

  resp, err := s.ManagedZones.Get(project, managedZone).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dns.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the project addressed by this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.ManagedZones.List(project)
  if err := call.Pages(ctx, func(page *dns.ManagedZonesListResponse) error {
    for _, managedZone := range page.ManagedZones {
      // TODO: Use managedZone
      fmt.Printf("%#v\n", managedZone)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dns.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the project addressed by this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Get(project).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := dns.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Identifies the project addressed by this request.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
  managedZone := "{MY-MANAGED-ZONE}" // TODO: Update placeholder value(s).

  call := s.ResourceRecordSets.List(project, managedZone)
  if err := call.Pages(ctx, func(page *dns.ResourceRecordSetsListResponse) error {
    for _, resourceRecordSet := range page.Rrsets {
      // TODO: Use resourceRecordSet
      fmt.Printf("%#v\n", resourceRecordSet)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
