
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dns/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dns.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'create' method:
  var (
    // Identifies the project addressed by this request.
    project = ""

    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    managedZone = ""


    requestBody = &dns.Change{}
  )

  callResult, err := client.Changes.Create(project, managedZone, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dns/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dns.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Identifies the project addressed by this request.
    project = ""

    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    managedZone = ""

    // The identifier of the requested change, from a previous ResourceRecordSetsChangeResponse.
    changeId = ""

  )

  callResult, err := client.Changes.Get(project, managedZone, changeId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dns/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dns.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Identifies the project addressed by this request.
    project = ""

    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    managedZone = ""

  )

  fn := func(page *dns.ChangesListResponse) error {
    // doThingsWith(page)
    for i, element := range page.Changes {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Changes.List(project, managedZone).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dns/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dns.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'create' method:
  var (
    // Identifies the project addressed by this request.
    project = ""


    requestBody = &dns.ManagedZone{}
  )

  callResult, err := client.ManagedZones.Create(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dns/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dns.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Identifies the project addressed by this request.
    project = ""

    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    managedZone = ""

  )

  if err = client.ManagedZones.Delete(project, managedZone).Context(ctx).Do(); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dns/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dns.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Identifies the project addressed by this request.
    project = ""

    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    managedZone = ""

  )

  callResult, err := client.ManagedZones.Get(project, managedZone).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dns/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dns.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Identifies the project addressed by this request.
    project = ""

  )

  fn := func(page *dns.ManagedZonesListResponse) error {
    // doThingsWith(page)
    for i, element := range page.ManagedZones {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.ManagedZones.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dns/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dns.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Identifies the project addressed by this request.
    project = ""

  )

  callResult, err := client.Projects.Get(project).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/dns/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dns.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Identifies the project addressed by this request.
    project = ""

    // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
    managedZone = ""

  )

  fn := func(page *dns.ResourceRecordSetsListResponse) error {
    // doThingsWith(page)
    for i, element := range page.Rrsets {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.ResourceRecordSets.List(project, managedZone).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
