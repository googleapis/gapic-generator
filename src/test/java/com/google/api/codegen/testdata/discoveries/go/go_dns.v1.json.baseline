
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/dns/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dns.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Identifies the project addressed by this request.
  project := "" // TODO: Update placeholder value.

  // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
  managedZone := "" // TODO: Update placeholder value.

  resp, err := client.Changes.Create(project, managedZone, &dns.Change{
                                       // TODO: Fill required fields.
                                     }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/dns/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dns.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Identifies the project addressed by this request.
  project := "" // TODO: Update placeholder value.

  // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
  managedZone := "" // TODO: Update placeholder value.

  // The identifier of the requested change, from a previous ResourceRecordSetsChangeResponse.
  changeId := "" // TODO: Update placeholder value.

  resp, err := client.Changes.Get(project, managedZone, changeId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/dns/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dns.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Identifies the project addressed by this request.
  project := "" // TODO: Update placeholder value.

  // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
  managedZone := "" // TODO: Update placeholder value.


  call := client.Changes.List(project, managedZone)
  if err := call.Pages(ctx, func(page *dns.ChangesListResponse) error {
    for _, v := range page.Changes {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/dns/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dns.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Identifies the project addressed by this request.
  project := "" // TODO: Update placeholder value.

  resp, err := client.ManagedZones.Create(project, &dns.ManagedZone{
                                            // TODO: Fill required fields.
                                          }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/dns/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dns.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Identifies the project addressed by this request.
  project := "" // TODO: Update placeholder value.

  // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
  managedZone := "" // TODO: Update placeholder value.

  if err := client.ManagedZones.Delete(project, managedZone).Context(ctx).Do(); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/dns/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dns.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Identifies the project addressed by this request.
  project := "" // TODO: Update placeholder value.

  // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
  managedZone := "" // TODO: Update placeholder value.

  resp, err := client.ManagedZones.Get(project, managedZone).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/dns/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dns.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Identifies the project addressed by this request.
  project := "" // TODO: Update placeholder value.


  call := client.ManagedZones.List(project)
  if err := call.Pages(ctx, func(page *dns.ManagedZonesListResponse) error {
    for _, v := range page.ManagedZones {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/dns/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dns.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Identifies the project addressed by this request.
  project := "" // TODO: Update placeholder value.

  resp, err := client.Projects.Get(project).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud DNS API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dns_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/dns/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/dns/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, dns.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := dns.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // Identifies the project addressed by this request.
  project := "" // TODO: Update placeholder value.

  // Identifies the managed zone addressed by this request. Can be the managed zone name or id.
  managedZone := "" // TODO: Update placeholder value.


  call := client.ResourceRecordSets.List(project, managedZone)
  if err := call.Pages(ctx, func(page *dns.ResourceRecordSetsListResponse) error {
    for _, v := range page.Rrsets {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
