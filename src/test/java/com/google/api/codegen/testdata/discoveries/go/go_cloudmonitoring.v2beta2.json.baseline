
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/cloudmonitoring/v2beta2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := cloudmonitoring.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'create' method:
  var (
    // The project id. The value can be the numeric project ID or string-based project name.
    project = ""

    requestBody = &cloudmonitoring.MetricDescriptor{}
  )

  response, err := client.MetricDescriptors.Create(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/cloudmonitoring/v2beta2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := cloudmonitoring.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // The project ID to which the metric belongs.
    project = ""

    // Name of the metric.
    metric = ""
  )

  response, err := client.MetricDescriptors.Delete(project, metric).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/cloudmonitoring/v2beta2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := cloudmonitoring.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // The project id. The value can be the numeric project ID or string-based project name.
    project = ""

    requestBody = &cloudmonitoring.ListMetricDescriptorsRequest{}
  )

  response, err := client.MetricDescriptors.List(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/cloudmonitoring/v2beta2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := cloudmonitoring.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // The project ID to which this time series belongs. The value can be the numeric project ID or
    // string-based project name.
    project = ""

    // Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
    // compute.googleapis.com/instance/disk/read_ops_count.
    metric = ""

    // End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
    youngest = ""

    requestBody = &cloudmonitoring.ListTimeseriesRequest{}
  )

  response, err := client.Timeseries.List(project, metric, youngest, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/cloudmonitoring/v2beta2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := cloudmonitoring.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'write' method:
  var (
    // The project ID. The value can be the numeric project ID or string-based project name.
    project = ""

    requestBody = &cloudmonitoring.WriteTimeseriesRequest{}
  )

  response, err := client.Timeseries.Write(project, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/cloudmonitoring/v2beta2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := cloudmonitoring.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // The project ID to which this time series belongs. The value can be the numeric project ID or
    // string-based project name.
    project = ""

    // Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
    // compute.googleapis.com/instance/disk/read_ops_count.
    metric = ""

    // End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
    youngest = ""

    requestBody = &cloudmonitoring.ListTimeseriesDescriptorsRequest{}
  )

  response, err := client.TimeseriesDescriptors.List(project, metric, youngest, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
