
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudmonitoringService, err := cloudmonitoring.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project id. The value can be the numeric project ID or string-based project name.
  project := ""  // TODO: Update placeholder value.

  rb := &cloudmonitoring.MetricDescriptor{
    // TODO: Add desired fields of the request body.
  }

  resp, err := cloudmonitoringService.MetricDescriptors.Create(project, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudmonitoringService, err := cloudmonitoring.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID to which the metric belongs.
  project := ""  // TODO: Update placeholder value.

  // Name of the metric.
  metric := ""  // TODO: Update placeholder value.

  resp, err := cloudmonitoringService.MetricDescriptors.Delete(project, metric).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudmonitoringService, err := cloudmonitoring.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project id. The value can be the numeric project ID or string-based project name.
  project := ""  // TODO: Update placeholder value.

  rb := &cloudmonitoring.ListMetricDescriptorsRequest{
    // TODO: Add desired fields of the request body.
  }

  req := cloudmonitoringService.MetricDescriptors.List(project, rb)
  if err := req.Pages(ctx, func(page *cloudmonitoring.ListMetricDescriptorsResponse) error {
    for _, metricDescriptor := range page.Metrics {
      // TODO: Change code below to process each `metricDescriptor` resource:
      fmt.Printf("%#v\n", metricDescriptor)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudmonitoringService, err := cloudmonitoring.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID to which this time series belongs. The value can be the numeric project ID or
  // string-based project name.
  project := ""  // TODO: Update placeholder value.

  // Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
  // compute.googleapis.com/instance/disk/read_ops_count.
  metric := ""  // TODO: Update placeholder value.

  // End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
  youngest := ""  // TODO: Update placeholder value.

  rb := &cloudmonitoring.ListTimeseriesRequest{
    // TODO: Add desired fields of the request body.
  }

  req := cloudmonitoringService.Timeseries.List(project, metric, youngest, rb)
  if err := req.Pages(ctx, func(page *cloudmonitoring.ListTimeseriesResponse) error {
    for _, timeseries := range page.Timeseries {
      // TODO: Change code below to process each `timeseries` resource:
      fmt.Printf("%#v\n", timeseries)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudmonitoringService, err := cloudmonitoring.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID. The value can be the numeric project ID or string-based project name.
  project := ""  // TODO: Update placeholder value.

  rb := &cloudmonitoring.WriteTimeseriesRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := cloudmonitoringService.Timeseries.Write(project, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudmonitoringService, err := cloudmonitoring.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID to which this time series belongs. The value can be the numeric project ID or
  // string-based project name.
  project := ""  // TODO: Update placeholder value.

  // Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
  // compute.googleapis.com/instance/disk/read_ops_count.
  metric := ""  // TODO: Update placeholder value.

  // End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
  youngest := ""  // TODO: Update placeholder value.

  rb := &cloudmonitoring.ListTimeseriesDescriptorsRequest{
    // TODO: Add desired fields of the request body.
  }

  req := cloudmonitoringService.TimeseriesDescriptors.List(project, metric, youngest, rb)
  if err := req.Pages(ctx, func(page *cloudmonitoring.ListTimeseriesDescriptorsResponse) error {
    for _, timeseriesDescriptor := range page.Timeseries {
      // TODO: Change code below to process each `timeseriesDescriptor` resource:
      fmt.Printf("%#v\n", timeseriesDescriptor)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
