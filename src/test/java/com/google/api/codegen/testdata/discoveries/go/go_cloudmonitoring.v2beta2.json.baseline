
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the cloudmonitoring service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := cloudmonitoring.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Create` method:

  // * The project id. The value can be the numeric project ID or string-based project name.
  project := ""

  metricDescriptorBody := cloudmonitoring.MetricDescriptor{
    // TODO: Add desired fields of the `metricDescriptorBody` variable.
  }

  res, err := service.MetricDescriptors.Create(project, &metricDescriptorBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the cloudmonitoring service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := cloudmonitoring.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * The project ID to which the metric belongs.
  project := ""

  // * Name of the metric.
  metric := ""

  res, err := service.MetricDescriptors.Delete(project, metric).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the cloudmonitoring service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := cloudmonitoring.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * The project id. The value can be the numeric project ID or string-based project name.
  project := ""

  listMetricDescriptorsRequestBody := cloudmonitoring.ListMetricDescriptorsRequest{
    // TODO: Add desired fields of the `listMetricDescriptorsRequestBody` variable.
  }

  res, err := service.MetricDescriptors.List(project, &listMetricDescriptorsRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the cloudmonitoring service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := cloudmonitoring.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * The project ID to which this time series belongs. The value can be the numeric project ID or
  //   string-based project name.
  project := ""

  // * Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
  //   compute.googleapis.com/instance/disk/read_ops_count.
  metric := ""

  // * End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
  youngest := ""

  listTimeseriesRequestBody := cloudmonitoring.ListTimeseriesRequest{
    // TODO: Add desired fields of the `listTimeseriesRequestBody` variable.
  }

  res, err := service.Timeseries.List(project, metric, youngest, &listTimeseriesRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the cloudmonitoring service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := cloudmonitoring.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Write` method:

  // * The project ID. The value can be the numeric project ID or string-based project name.
  project := ""

  writeTimeseriesRequestBody := cloudmonitoring.WriteTimeseriesRequest{
    // TODO: Add desired fields of the `writeTimeseriesRequestBody` variable.
  }

  res, err := service.Timeseries.Write(project, &writeTimeseriesRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the cloudmonitoring service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := cloudmonitoring.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * The project ID to which this time series belongs. The value can be the numeric project ID or
  //   string-based project name.
  project := ""

  // * Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
  //   compute.googleapis.com/instance/disk/read_ops_count.
  metric := ""

  // * End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
  youngest := ""

  listTimeseriesDescriptorsRequestBody := cloudmonitoring.ListTimeseriesDescriptorsRequest{
    // TODO: Add desired fields of the `listTimeseriesDescriptorsRequestBody` variable.
  }

  res, err := service.TimeseriesDescriptors.List(project, metric, youngest, &listTimeseriesDescriptorsRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
