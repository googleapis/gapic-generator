
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudmonitoring/v2beta2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudmonitoring.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The project id. The value can be the numeric project ID or string-based project name.
  project := "" // TODO: Update placeholder value.

  resp, err := c.MetricDescriptors.Create(project, &cloudmonitoring.MetricDescriptor{
                                            // TODO: Fill required fields.
                                          }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudmonitoring/v2beta2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudmonitoring.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The project ID to which the metric belongs.
  project := "" // TODO: Update placeholder value.

  // Name of the metric.
  metric := "" // TODO: Update placeholder value.

  resp, err := c.MetricDescriptors.Delete(project, metric).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudmonitoring/v2beta2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudmonitoring.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The project id. The value can be the numeric project ID or string-based project name.
  project := "" // TODO: Update placeholder value.

  resp, err := c.MetricDescriptors.List(project, &cloudmonitoring.ListMetricDescriptorsRequest{
                                          // TODO: Fill required fields.
                                        }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudmonitoring/v2beta2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudmonitoring.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The project ID to which this time series belongs. The value can be the numeric project ID or
  // string-based project name.
  project := "" // TODO: Update placeholder value.

  // Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
  // compute.googleapis.com/instance/disk/read_ops_count.
  metric := "" // TODO: Update placeholder value.

  // End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
  youngest := "" // TODO: Update placeholder value.

  resp, err := c.Timeseries.List(project, metric, youngest, &cloudmonitoring.ListTimeseriesRequest{
                                   // TODO: Fill required fields.
                                 }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudmonitoring/v2beta2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudmonitoring.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The project ID. The value can be the numeric project ID or string-based project name.
  project := "" // TODO: Update placeholder value.

  resp, err := c.Timeseries.Write(project, &cloudmonitoring.WriteTimeseriesRequest{
                                    // TODO: Fill required fields.
                                  }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudmonitoring/v2beta2

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudmonitoring.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The project ID to which this time series belongs. The value can be the numeric project ID or
  // string-based project name.
  project := "" // TODO: Update placeholder value.

  // Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
  // compute.googleapis.com/instance/disk/read_ops_count.
  metric := "" // TODO: Update placeholder value.

  // End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
  youngest := "" // TODO: Update placeholder value.

  resp, err := c.TimeseriesDescriptors.List(project, metric, youngest, &cloudmonitoring.ListTimeseriesDescriptorsRequest{
                                              // TODO: Fill required fields.
                                            }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
