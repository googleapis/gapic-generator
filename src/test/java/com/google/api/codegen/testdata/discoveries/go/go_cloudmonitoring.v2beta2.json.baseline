
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := cloudmonitoring.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project id. The value can be the numeric project ID or string-based project name.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  metricDescriptor := &cloudmonitoring.MetricDescriptor{
    // TODO: Add the desired fields.
  }

  resp, err := s.MetricDescriptors.Create(project, &metricDescriptor).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := cloudmonitoring.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID to which the metric belongs.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Name of the metric.
  metric := "{MY-METRIC}" // TODO: Update placeholder value(s).

  resp, err := s.MetricDescriptors.Delete(project, metric).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := cloudmonitoring.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project id. The value can be the numeric project ID or string-based project name.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  listMetricDescriptorsRequest := &cloudmonitoring.ListMetricDescriptorsRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.MetricDescriptors.List(project, &listMetricDescriptorsRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := cloudmonitoring.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID to which this time series belongs. The value can be the numeric project ID or
  // string-based project name.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
  // compute.googleapis.com/instance/disk/read_ops_count.
  metric := "{MY-METRIC}" // TODO: Update placeholder value(s).

  // End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
  youngest := "{MY-YOUNGEST}" // TODO: Update placeholder value(s).

  listTimeseriesRequest := &cloudmonitoring.ListTimeseriesRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Timeseries.List(project, metric, youngest, &listTimeseriesRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := cloudmonitoring.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID. The value can be the numeric project ID or string-based project name.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  writeTimeseriesRequest := &cloudmonitoring.WriteTimeseriesRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Timeseries.Write(project, &writeTimeseriesRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Monitoring API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudmonitoring
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudmonitoring/v2beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, cloudmonitoring.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := cloudmonitoring.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The project ID to which this time series belongs. The value can be the numeric project ID or
  // string-based project name.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Metric names are protocol-free URLs as listed in the Supported Metrics page. For example,
  // compute.googleapis.com/instance/disk/read_ops_count.
  metric := "{MY-METRIC}" // TODO: Update placeholder value(s).

  // End of the time interval (inclusive), which is expressed as an RFC 3339 timestamp.
  youngest := "{MY-YOUNGEST}" // TODO: Update placeholder value(s).

  listTimeseriesDescriptorsRequest := &cloudmonitoring.ListTimeseriesDescriptorsRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.TimeseriesDescriptors.List(project, metric, youngest, &listTimeseriesDescriptorsRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
