
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->addresses->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $addresses_scoped_list) {
    // TODO: Change code below to process each ($name => $addresses_scoped_list) element:
    echo '<pre>', $name, ' => ', var_export($addresses_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region for this request.
$region = '{MY-REGION}';

// Name of the address resource to delete.
$address = '{MY-ADDRESS}';


$response = $service->addresses->delete($project, $region, $address);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region for this request.
$region = '{MY-REGION}';

// Name of the address resource to return.
$address = '{MY-ADDRESS}';


$response = $service->addresses->get($project, $region, $address);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region for this request.
$region = '{MY-REGION}';


$requestBody = new Google_Service_Compute_Address($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->addresses->insert($project, $region, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `listAddresses` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region for this request.
$region = '{MY-REGION}';


$optParams = array();
do {
  $response = $service->addresses->listAddresses($project, $region, $optParams);

  foreach ($response['items'] as $address) {
    // TODO: Change code below to process each `address` resource:
    echo '<pre>', var_export($address, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->autoscalers->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $autoscalers_scoped_list) {
    // TODO: Change code below to process each ($name => $autoscalers_scoped_list) element:
    echo '<pre>', $name, ' => ', var_export($autoscalers_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// Name of the autoscaler to delete.
$autoscaler = '{MY-AUTOSCALER}';


$response = $service->autoscalers->delete($project, $zone, $autoscaler);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// Name of the autoscaler to return.
$autoscaler = '{MY-AUTOSCALER}';


$response = $service->autoscalers->get($project, $zone, $autoscaler);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'


$requestBody = new Google_Service_Compute_Autoscaler($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->autoscalers->insert($project, $zone, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `listAutoscalers` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'


$optParams = array();
do {
  $response = $service->autoscalers->listAutoscalers($project, $zone, $optParams);

  foreach ($response['items'] as $autoscaler) {
    // TODO: Change code below to process each `autoscaler` resource:
    echo '<pre>', var_export($autoscaler, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// Name of the autoscaler to update.
$autoscaler = '{MY-AUTOSCALER}';


$requestBody = new Google_Service_Compute_Autoscaler($client);
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->autoscalers->patch($project, $zone, $autoscaler, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'


$requestBody = new Google_Service_Compute_Autoscaler($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->autoscalers->update($project, $zone, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the BackendService resource to delete.
$backendService = '{MY-BACKEND-SERVICE}';


$response = $service->backendServices->delete($project, $backendService);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the BackendService resource to return.
$backendService = '{MY-BACKEND-SERVICE}';


$response = $service->backendServices->get($project, $backendService);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `getHealth` method:

// project
$project = '{MY-PROJECT}';

// Name of the BackendService resource to which the queried instance belongs.
$backendService = '{MY-BACKEND-SERVICE}';


$requestBody = new Google_Service_Compute_ResourceGroupReference($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->backendServices->getHealth($project, $backendService, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$requestBody = new Google_Service_Compute_BackendService($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->backendServices->insert($project, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `listBackendServices` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->backendServices->listBackendServices($project, $optParams);

  foreach ($response['items'] as $backend_service) {
    // TODO: Change code below to process each `backend_service` resource:
    echo '<pre>', var_export($backend_service, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the BackendService resource to update.
$backendService = '{MY-BACKEND-SERVICE}';


$requestBody = new Google_Service_Compute_BackendService($client);
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->backendServices->patch($project, $backendService, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the BackendService resource to update.
$backendService = '{MY-BACKEND-SERVICE}';


$requestBody = new Google_Service_Compute_BackendService($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->backendServices->update($project, $backendService, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->diskTypes->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $disk_types_scoped_list) {
    // TODO: Change code below to process each ($name => $disk_types_scoped_list) element:
    echo '<pre>', $name, ' => ', var_export($disk_types_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// Name of the disk type to return.
$diskType = '{MY-DISK-TYPE}';


$response = $service->diskTypes->get($project, $zone, $diskType);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `listDiskTypes` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'


$optParams = array();
do {
  $response = $service->diskTypes->listDiskTypes($project, $zone, $optParams);

  foreach ($response['items'] as $disk_type) {
    // TODO: Change code below to process each `disk_type` resource:
    echo '<pre>', var_export($disk_type, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->disks->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $disks_scoped_list) {
    // TODO: Change code below to process each ($name => $disks_scoped_list) element:
    echo '<pre>', $name, ' => ', var_export($disks_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `createSnapshot` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// Name of the persistent disk to snapshot.
$disk = '{MY-DISK}';


$requestBody = new Google_Service_Compute_Snapshot($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->disks->createSnapshot($project, $zone, $disk, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// Name of the persistent disk to delete.
$disk = '{MY-DISK}';


$response = $service->disks->delete($project, $zone, $disk);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// Name of the persistent disk to return.
$disk = '{MY-DISK}';


$response = $service->disks->get($project, $zone, $disk);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'


$requestBody = new Google_Service_Compute_Disk($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->disks->insert($project, $zone, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `listDisks` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'


$optParams = array();
do {
  $response = $service->disks->listDisks($project, $zone, $optParams);

  foreach ($response['items'] as $disk) {
    // TODO: Change code below to process each `disk` resource:
    echo '<pre>', var_export($disk, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `resize` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// The name of the persistent disk.
$disk = '{MY-DISK}';


$requestBody = new Google_Service_Compute_DisksResizeRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->disks->resize($project, $zone, $disk, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the firewall rule to delete.
$firewall = '{MY-FIREWALL}';


$response = $service->firewalls->delete($project, $firewall);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the firewall rule to return.
$firewall = '{MY-FIREWALL}';


$response = $service->firewalls->get($project, $firewall);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$requestBody = new Google_Service_Compute_Firewall($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->firewalls->insert($project, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `listFirewalls` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->firewalls->listFirewalls($project, $optParams);

  foreach ($response['items'] as $firewall) {
    // TODO: Change code below to process each `firewall` resource:
    echo '<pre>', var_export($firewall, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the firewall rule to update.
$firewall = '{MY-FIREWALL}';


$requestBody = new Google_Service_Compute_Firewall($client);
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->firewalls->patch($project, $firewall, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the firewall rule to update.
$firewall = '{MY-FIREWALL}';


$requestBody = new Google_Service_Compute_Firewall($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->firewalls->update($project, $firewall, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->forwardingRules->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $forwarding_rules_scoped_list) {
    // TODO: Change code below to process each ($name => $forwarding_rules_scoped_list) element:
    echo '<pre>', $name, ' => ', var_export($forwarding_rules_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region scoping this request.
$region = '{MY-REGION}';

// Name of the ForwardingRule resource to delete.
$forwardingRule = '{MY-FORWARDING-RULE}';


$response = $service->forwardingRules->delete($project, $region, $forwardingRule);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region scoping this request.
$region = '{MY-REGION}';

// Name of the ForwardingRule resource to return.
$forwardingRule = '{MY-FORWARDING-RULE}';


$response = $service->forwardingRules->get($project, $region, $forwardingRule);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region scoping this request.
$region = '{MY-REGION}';


$requestBody = new Google_Service_Compute_ForwardingRule($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->forwardingRules->insert($project, $region, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `listForwardingRules` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region scoping this request.
$region = '{MY-REGION}';


$optParams = array();
do {
  $response = $service->forwardingRules->listForwardingRules($project, $region, $optParams);

  foreach ($response['items'] as $forwarding_rule) {
    // TODO: Change code below to process each `forwarding_rule` resource:
    echo '<pre>', var_export($forwarding_rule, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `setTarget` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region scoping this request.
$region = '{MY-REGION}';

// Name of the ForwardingRule resource in which target is to be set.
$forwardingRule = '{MY-FORWARDING-RULE}';


$requestBody = new Google_Service_Compute_TargetReference($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->forwardingRules->setTarget($project, $region, $forwardingRule, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the address resource to delete.
$address = '{MY-ADDRESS}';


$response = $service->globalAddresses->delete($project, $address);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the address resource to return.
$address = '{MY-ADDRESS}';


$response = $service->globalAddresses->get($project, $address);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$requestBody = new Google_Service_Compute_Address($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->globalAddresses->insert($project, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `listGlobalAddresses` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->globalAddresses->listGlobalAddresses($project, $optParams);

  foreach ($response['items'] as $address) {
    // TODO: Change code below to process each `address` resource:
    echo '<pre>', var_export($address, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the ForwardingRule resource to delete.
$forwardingRule = '{MY-FORWARDING-RULE}';


$response = $service->globalForwardingRules->delete($project, $forwardingRule);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the ForwardingRule resource to return.
$forwardingRule = '{MY-FORWARDING-RULE}';


$response = $service->globalForwardingRules->get($project, $forwardingRule);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$requestBody = new Google_Service_Compute_ForwardingRule($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->globalForwardingRules->insert($project, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `listGlobalForwardingRules` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->globalForwardingRules->listGlobalForwardingRules($project, $optParams);

  foreach ($response['items'] as $forwarding_rule) {
    // TODO: Change code below to process each `forwarding_rule` resource:
    echo '<pre>', var_export($forwarding_rule, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `setTarget` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the ForwardingRule resource in which target is to be set.
$forwardingRule = '{MY-FORWARDING-RULE}';


$requestBody = new Google_Service_Compute_TargetReference($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->globalForwardingRules->setTarget($project, $forwardingRule, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->globalOperations->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $operations_scoped_list) {
    // TODO: Change code below to process each ($name => $operations_scoped_list) element:
    echo '<pre>', $name, ' => ', var_export($operations_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the Operations resource to delete.
$operation = '{MY-OPERATION}';


$service->globalOperations->delete($project, $operation);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the Operations resource to return.
$operation = '{MY-OPERATION}';


$response = $service->globalOperations->get($project, $operation);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `listGlobalOperations` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->globalOperations->listGlobalOperations($project, $optParams);

  foreach ($response['items'] as $operation) {
    // TODO: Change code below to process each `operation` resource:
    echo '<pre>', var_export($operation, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the HealthCheck resource to delete.
$healthCheck = '{MY-HEALTH-CHECK}';


$response = $service->healthChecks->delete($project, $healthCheck);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the HealthCheck resource to return.
$healthCheck = '{MY-HEALTH-CHECK}';


$response = $service->healthChecks->get($project, $healthCheck);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$requestBody = new Google_Service_Compute_HealthCheck($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->healthChecks->insert($project, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `listHealthChecks` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->healthChecks->listHealthChecks($project, $optParams);

  foreach ($response['items'] as $health_check) {
    // TODO: Change code below to process each `health_check` resource:
    echo '<pre>', var_export($health_check, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the HealthCheck resource to update.
$healthCheck = '{MY-HEALTH-CHECK}';


$requestBody = new Google_Service_Compute_HealthCheck($client);
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->healthChecks->patch($project, $healthCheck, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the HealthCheck resource to update.
$healthCheck = '{MY-HEALTH-CHECK}';


$requestBody = new Google_Service_Compute_HealthCheck($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->healthChecks->update($project, $healthCheck, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the HttpHealthCheck resource to delete.
$httpHealthCheck = '{MY-HTTP-HEALTH-CHECK}';


$response = $service->httpHealthChecks->delete($project, $httpHealthCheck);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the HttpHealthCheck resource to return.
$httpHealthCheck = '{MY-HTTP-HEALTH-CHECK}';


$response = $service->httpHealthChecks->get($project, $httpHealthCheck);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$requestBody = new Google_Service_Compute_HttpHealthCheck($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->httpHealthChecks->insert($project, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `listHttpHealthChecks` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->httpHealthChecks->listHttpHealthChecks($project, $optParams);

  foreach ($response['items'] as $http_health_check) {
    // TODO: Change code below to process each `http_health_check` resource:
    echo '<pre>', var_export($http_health_check, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the HttpHealthCheck resource to update.
$httpHealthCheck = '{MY-HTTP-HEALTH-CHECK}';


$requestBody = new Google_Service_Compute_HttpHealthCheck($client);
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->httpHealthChecks->patch($project, $httpHealthCheck, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the HttpHealthCheck resource to update.
$httpHealthCheck = '{MY-HTTP-HEALTH-CHECK}';


$requestBody = new Google_Service_Compute_HttpHealthCheck($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->httpHealthChecks->update($project, $httpHealthCheck, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the HttpsHealthCheck resource to delete.
$httpsHealthCheck = '{MY-HTTPS-HEALTH-CHECK}';


$response = $service->httpsHealthChecks->delete($project, $httpsHealthCheck);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the HttpsHealthCheck resource to return.
$httpsHealthCheck = '{MY-HTTPS-HEALTH-CHECK}';


$response = $service->httpsHealthChecks->get($project, $httpsHealthCheck);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$requestBody = new Google_Service_Compute_HttpsHealthCheck($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->httpsHealthChecks->insert($project, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `listHttpsHealthChecks` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->httpsHealthChecks->listHttpsHealthChecks($project, $optParams);

  foreach ($response['items'] as $https_health_check) {
    // TODO: Change code below to process each `https_health_check` resource:
    echo '<pre>', var_export($https_health_check, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the HttpsHealthCheck resource to update.
$httpsHealthCheck = '{MY-HTTPS-HEALTH-CHECK}';


$requestBody = new Google_Service_Compute_HttpsHealthCheck($client);
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->httpsHealthChecks->patch($project, $httpsHealthCheck, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the HttpsHealthCheck resource to update.
$httpsHealthCheck = '{MY-HTTPS-HEALTH-CHECK}';


$requestBody = new Google_Service_Compute_HttpsHealthCheck($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->httpsHealthChecks->update($project, $httpsHealthCheck, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the image resource to delete.
$image = '{MY-IMAGE}';


$response = $service->images->delete($project, $image);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `deprecate` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Image name.
$image = '{MY-IMAGE}';


$requestBody = new Google_Service_Compute_DeprecationStatus($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->images->deprecate($project, $image, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the image resource to return.
$image = '{MY-IMAGE}';


$response = $service->images->get($project, $image);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `getFromFamily` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the image family to search for.
$family = '{MY-FAMILY}';


$response = $service->images->getFromFamily($project, $family);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$requestBody = new Google_Service_Compute_Image($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->images->insert($project, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `listImages` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->images->listImages($project, $optParams);

  foreach ($response['items'] as $image) {
    // TODO: Change code below to process each `image` resource:
    echo '<pre>', var_export($image, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `abandonInstances` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone where the managed instance group is located.
$zone = '{MY-ZONE}';

// The name of the managed instance group.
$instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}';


$requestBody = new Google_Service_Compute_InstanceGroupManagersAbandonInstancesRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->instanceGroupManagers->abandonInstances($project, $zone, $instanceGroupManager, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->instanceGroupManagers->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $instance_group_managers_scoped_list) {
    // TODO: Change code below to process each ($name => $instance_group_managers_scoped_list) element:
    echo '<pre>', $name, ' => ', var_export($instance_group_managers_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone where the managed instance group is located.
$zone = '{MY-ZONE}';

// The name of the managed instance group to delete.
$instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}';


$response = $service->instanceGroupManagers->delete($project, $zone, $instanceGroupManager);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `deleteInstances` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone where the managed instance group is located.
$zone = '{MY-ZONE}';

// The name of the managed instance group.
$instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}';


$requestBody = new Google_Service_Compute_InstanceGroupManagersDeleteInstancesRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->instanceGroupManagers->deleteInstances($project, $zone, $instanceGroupManager, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone where the managed instance group is located.
$zone = '{MY-ZONE}';

// The name of the managed instance group.
$instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}';


$response = $service->instanceGroupManagers->get($project, $zone, $instanceGroupManager);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone where you want to create the managed instance group.
$zone = '{MY-ZONE}';


$requestBody = new Google_Service_Compute_InstanceGroupManager($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->instanceGroupManagers->insert($project, $zone, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `listInstanceGroupManagers` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone where the managed instance group is located.
$zone = '{MY-ZONE}';


$optParams = array();
do {
  $response = $service->instanceGroupManagers->listInstanceGroupManagers($project, $zone, $optParams);

  foreach ($response['items'] as $instance_group_manager) {
    // TODO: Change code below to process each `instance_group_manager` resource:
    echo '<pre>', var_export($instance_group_manager, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `listManagedInstances` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone where the managed instance group is located.
$zone = '{MY-ZONE}';

// The name of the managed instance group.
$instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}';


$response = $service->instanceGroupManagers->listManagedInstances($project, $zone, $instanceGroupManager);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `recreateInstances` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone where the managed instance group is located.
$zone = '{MY-ZONE}';

// The name of the managed instance group.
$instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}';


$requestBody = new Google_Service_Compute_InstanceGroupManagersRecreateInstancesRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->instanceGroupManagers->recreateInstances($project, $zone, $instanceGroupManager, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `resize` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone where the managed instance group is located.
$zone = '{MY-ZONE}';

// The name of the managed instance group.
$instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}';

// The number of running instances that the managed instance group should maintain at any given time.
// The group automatically adds or removes instances to maintain the number of instances specified by
// this parameter.
$size = 0;


$response = $service->instanceGroupManagers->resize($project, $zone, $instanceGroupManager, $size);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `setInstanceTemplate` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone where the managed instance group is located.
$zone = '{MY-ZONE}';

// The name of the managed instance group.
$instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}';


$requestBody = new Google_Service_Compute_InstanceGroupManagersSetInstanceTemplateRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->instanceGroupManagers->setInstanceTemplate($project, $zone, $instanceGroupManager, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `setTargetPools` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone where the managed instance group is located.
$zone = '{MY-ZONE}';

// The name of the managed instance group.
$instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}';


$requestBody = new Google_Service_Compute_InstanceGroupManagersSetTargetPoolsRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->instanceGroupManagers->setTargetPools($project, $zone, $instanceGroupManager, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `addInstances` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone where the instance group is located.
$zone = '{MY-ZONE}';

// The name of the instance group where you are adding instances.
$instanceGroup = '{MY-INSTANCE-GROUP}';


$requestBody = new Google_Service_Compute_InstanceGroupsAddInstancesRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->instanceGroups->addInstances($project, $zone, $instanceGroup, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->instanceGroups->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $instance_groups_scoped_list) {
    // TODO: Change code below to process each ($name => $instance_groups_scoped_list) element:
    echo '<pre>', $name, ' => ', var_export($instance_groups_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone where the instance group is located.
$zone = '{MY-ZONE}';

// The name of the instance group to delete.
$instanceGroup = '{MY-INSTANCE-GROUP}';


$response = $service->instanceGroups->delete($project, $zone, $instanceGroup);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone where the instance group is located.
$zone = '{MY-ZONE}';

// The name of the instance group.
$instanceGroup = '{MY-INSTANCE-GROUP}';


$response = $service->instanceGroups->get($project, $zone, $instanceGroup);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone where you want to create the instance group.
$zone = '{MY-ZONE}';


$requestBody = new Google_Service_Compute_InstanceGroup($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->instanceGroups->insert($project, $zone, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `listInstanceGroups` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone where the instance group is located.
$zone = '{MY-ZONE}';


$optParams = array();
do {
  $response = $service->instanceGroups->listInstanceGroups($project, $zone, $optParams);

  foreach ($response['items'] as $instance_group) {
    // TODO: Change code below to process each `instance_group` resource:
    echo '<pre>', var_export($instance_group, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `listInstances` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone where the instance group is located.
$zone = '{MY-ZONE}';

// The name of the instance group from which you want to generate a list of included instances.
$instanceGroup = '{MY-INSTANCE-GROUP}';


$requestBody = new Google_Service_Compute_InstanceGroupsListInstancesRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$optParams = array();
do {
  $response = $service->instanceGroups->listInstances($project, $zone, $instanceGroup, $requestBody, $optParams);

  foreach ($response['items'] as $instance_with_named_ports) {
    // TODO: Change code below to process each `instance_with_named_ports` resource:
    echo '<pre>', var_export($instance_with_named_ports, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `removeInstances` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone where the instance group is located.
$zone = '{MY-ZONE}';

// The name of the instance group where the specified instances will be removed.
$instanceGroup = '{MY-INSTANCE-GROUP}';


$requestBody = new Google_Service_Compute_InstanceGroupsRemoveInstancesRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->instanceGroups->removeInstances($project, $zone, $instanceGroup, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `setNamedPorts` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone where the instance group is located.
$zone = '{MY-ZONE}';

// The name of the instance group where the named ports are updated.
$instanceGroup = '{MY-INSTANCE-GROUP}';


$requestBody = new Google_Service_Compute_InstanceGroupsSetNamedPortsRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->instanceGroups->setNamedPorts($project, $zone, $instanceGroup, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the instance template to delete.
$instanceTemplate = '{MY-INSTANCE-TEMPLATE}';


$response = $service->instanceTemplates->delete($project, $instanceTemplate);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the instance template.
$instanceTemplate = '{MY-INSTANCE-TEMPLATE}';


$response = $service->instanceTemplates->get($project, $instanceTemplate);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$requestBody = new Google_Service_Compute_InstanceTemplate($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->instanceTemplates->insert($project, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `listInstanceTemplates` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->instanceTemplates->listInstanceTemplates($project, $optParams);

  foreach ($response['items'] as $instance_template) {
    // TODO: Change code below to process each `instance_template` resource:
    echo '<pre>', var_export($instance_template, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `addAccessConfig` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// The instance name for this request.
$instance = '{MY-INSTANCE}';

// The name of the network interface to add to this instance.
$networkInterface = '{MY-NETWORK-INTERFACE}';


$requestBody = new Google_Service_Compute_AccessConfig($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->instances->addAccessConfig($project, $zone, $instance, $networkInterface, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->instances->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $instances_scoped_list) {
    // TODO: Change code below to process each ($name => $instances_scoped_list) element:
    echo '<pre>', $name, ' => ', var_export($instances_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `attachDisk` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// The instance name for this request.
$instance = '{MY-INSTANCE}';


$requestBody = new Google_Service_Compute_AttachedDisk($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->instances->attachDisk($project, $zone, $instance, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// Name of the instance resource to delete.
$instance = '{MY-INSTANCE}';


$response = $service->instances->delete($project, $zone, $instance);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `deleteAccessConfig` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// The instance name for this request.
$instance = '{MY-INSTANCE}';

// The name of the access config to delete.
$accessConfig = '{MY-ACCESS-CONFIG}';

// The name of the network interface.
$networkInterface = '{MY-NETWORK-INTERFACE}';


$response = $service->instances->deleteAccessConfig($project, $zone, $instance, $accessConfig, $networkInterface);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `detachDisk` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// Instance name.
$instance = '{MY-INSTANCE}';

// Disk device name to detach.
$deviceName = '{MY-DEVICE-NAME}';


$response = $service->instances->detachDisk($project, $zone, $instance, $deviceName);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// Name of the instance resource to return.
$instance = '{MY-INSTANCE}';


$response = $service->instances->get($project, $zone, $instance);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `getSerialPortOutput` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// Name of the instance scoping this request.
$instance = '{MY-INSTANCE}';


$response = $service->instances->getSerialPortOutput($project, $zone, $instance);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'


$requestBody = new Google_Service_Compute_Instance($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->instances->insert($project, $zone, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `listInstances` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'


$optParams = array();
do {
  $response = $service->instances->listInstances($project, $zone, $optParams);

  foreach ($response['items'] as $instance) {
    // TODO: Change code below to process each `instance` resource:
    echo '<pre>', var_export($instance, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `reset` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// Name of the instance scoping this request.
$instance = '{MY-INSTANCE}';


$response = $service->instances->reset($project, $zone, $instance);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `setDiskAutoDelete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// The instance name.
$instance = '{MY-INSTANCE}';

// Whether to auto-delete the disk when the instance is deleted.
$autoDelete = false;

// The device name of the disk to modify.
$deviceName = '{MY-DEVICE-NAME}';


$response = $service->instances->setDiskAutoDelete($project, $zone, $instance, $autoDelete, $deviceName);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `setMachineType` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// Name of the instance scoping this request.
$instance = '{MY-INSTANCE}';


$requestBody = new Google_Service_Compute_InstancesSetMachineTypeRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->instances->setMachineType($project, $zone, $instance, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `setMetadata` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// Name of the instance scoping this request.
$instance = '{MY-INSTANCE}';


$requestBody = new Google_Service_Compute_Metadata($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->instances->setMetadata($project, $zone, $instance, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `setScheduling` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// Instance name.
$instance = '{MY-INSTANCE}';


$requestBody = new Google_Service_Compute_Scheduling($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->instances->setScheduling($project, $zone, $instance, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `setTags` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// Name of the instance scoping this request.
$instance = '{MY-INSTANCE}';


$requestBody = new Google_Service_Compute_Tags($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->instances->setTags($project, $zone, $instance, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `start` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// Name of the instance resource to start.
$instance = '{MY-INSTANCE}';


$response = $service->instances->start($project, $zone, $instance);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `startWithEncryptionKey` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// Name of the instance resource to start.
$instance = '{MY-INSTANCE}';


$requestBody = new Google_Service_Compute_InstancesStartWithEncryptionKeyRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->instances->startWithEncryptionKey($project, $zone, $instance, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `stop` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// Name of the instance resource to stop.
$instance = '{MY-INSTANCE}';


$response = $service->instances->stop($project, $zone, $instance);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the License resource to return.
$license = '{MY-LICENSE}';


$response = $service->licenses->get($project, $license);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->machineTypes->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $machine_types_scoped_list) {
    // TODO: Change code below to process each ($name => $machine_types_scoped_list) element:
    echo '<pre>', $name, ' => ', var_export($machine_types_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// Name of the machine type to return.
$machineType = '{MY-MACHINE-TYPE}';


$response = $service->machineTypes->get($project, $zone, $machineType);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `listMachineTypes` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// The name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'


$optParams = array();
do {
  $response = $service->machineTypes->listMachineTypes($project, $zone, $optParams);

  foreach ($response['items'] as $machine_type) {
    // TODO: Change code below to process each `machine_type` resource:
    echo '<pre>', var_export($machine_type, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the network to delete.
$network = '{MY-NETWORK}';


$response = $service->networks->delete($project, $network);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the network to return.
$network = '{MY-NETWORK}';


$response = $service->networks->get($project, $network);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$requestBody = new Google_Service_Compute_Network($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->networks->insert($project, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `listNetworks` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->networks->listNetworks($project, $optParams);

  foreach ($response['items'] as $network) {
    // TODO: Change code below to process each `network` resource:
    echo '<pre>', var_export($network, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$response = $service->projects->get($project);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `moveDisk` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$requestBody = new Google_Service_Compute_DiskMoveRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->projects->moveDisk($project, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `moveInstance` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$requestBody = new Google_Service_Compute_InstanceMoveRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->projects->moveInstance($project, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `setCommonInstanceMetadata` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$requestBody = new Google_Service_Compute_Metadata($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->projects->setCommonInstanceMetadata($project, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `setUsageExportBucket` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$requestBody = new Google_Service_Compute_UsageExportLocation($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->projects->setUsageExportBucket($project, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region for this request.
$region = '{MY-REGION}';

// Name of the Operations resource to delete.
$operation = '{MY-OPERATION}';


$service->regionOperations->delete($project, $region, $operation);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region for this request.
$region = '{MY-REGION}';

// Name of the Operations resource to return.
$operation = '{MY-OPERATION}';


$response = $service->regionOperations->get($project, $region, $operation);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `listRegionOperations` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region for this request.
$region = '{MY-REGION}';


$optParams = array();
do {
  $response = $service->regionOperations->listRegionOperations($project, $region, $optParams);

  foreach ($response['items'] as $operation) {
    // TODO: Change code below to process each `operation` resource:
    echo '<pre>', var_export($operation, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region resource to return.
$region = '{MY-REGION}';


$response = $service->regions->get($project, $region);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `listRegions` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->regions->listRegions($project, $optParams);

  foreach ($response['items'] as $region) {
    // TODO: Change code below to process each `region` resource:
    echo '<pre>', var_export($region, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->routers->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $routers_scoped_list) {
    // TODO: Change code below to process each ($name => $routers_scoped_list) element:
    echo '<pre>', $name, ' => ', var_export($routers_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region for this request.
$region = '{MY-REGION}';

// Name of the Router resource to delete.
$router = '{MY-ROUTER}';


$response = $service->routers->delete($project, $region, $router);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region for this request.
$region = '{MY-REGION}';

// Name of the Router resource to return.
$router = '{MY-ROUTER}';


$response = $service->routers->get($project, $region, $router);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `getRouterStatus` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region for this request.
$region = '{MY-REGION}';

// Name of the Router resource to query.
$router = '{MY-ROUTER}';


$response = $service->routers->getRouterStatus($project, $region, $router);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region for this request.
$region = '{MY-REGION}';


$requestBody = new Google_Service_Compute_Router($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->routers->insert($project, $region, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `listRouters` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region for this request.
$region = '{MY-REGION}';


$optParams = array();
do {
  $response = $service->routers->listRouters($project, $region, $optParams);

  foreach ($response['items'] as $router) {
    // TODO: Change code below to process each `router` resource:
    echo '<pre>', var_export($router, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region for this request.
$region = '{MY-REGION}';

// Name of the Router resource to update.
$router = '{MY-ROUTER}';


$requestBody = new Google_Service_Compute_Router($client);
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->routers->patch($project, $region, $router, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `preview` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region for this request.
$region = '{MY-REGION}';

// Name of the Router resource to query.
$router = '{MY-ROUTER}';


$requestBody = new Google_Service_Compute_Router($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->routers->preview($project, $region, $router, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region for this request.
$region = '{MY-REGION}';

// Name of the Router resource to update.
$router = '{MY-ROUTER}';


$requestBody = new Google_Service_Compute_Router($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->routers->update($project, $region, $router, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the Route resource to delete.
$route = '{MY-ROUTE}';


$response = $service->routes->delete($project, $route);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the Route resource to return.
$route = '{MY-ROUTE}';


$response = $service->routes->get($project, $route);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$requestBody = new Google_Service_Compute_Route($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->routes->insert($project, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `listRoutes` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->routes->listRoutes($project, $optParams);

  foreach ($response['items'] as $route) {
    // TODO: Change code below to process each `route` resource:
    echo '<pre>', var_export($route, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the Snapshot resource to delete.
$snapshot = '{MY-SNAPSHOT}';


$response = $service->snapshots->delete($project, $snapshot);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the Snapshot resource to return.
$snapshot = '{MY-SNAPSHOT}';


$response = $service->snapshots->get($project, $snapshot);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `listSnapshots` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->snapshots->listSnapshots($project, $optParams);

  foreach ($response['items'] as $snapshot) {
    // TODO: Change code below to process each `snapshot` resource:
    echo '<pre>', var_export($snapshot, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the SslCertificate resource to delete.
$sslCertificate = '{MY-SSL-CERTIFICATE}';


$response = $service->sslCertificates->delete($project, $sslCertificate);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the SslCertificate resource to return.
$sslCertificate = '{MY-SSL-CERTIFICATE}';


$response = $service->sslCertificates->get($project, $sslCertificate);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$requestBody = new Google_Service_Compute_SslCertificate($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->sslCertificates->insert($project, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `listSslCertificates` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->sslCertificates->listSslCertificates($project, $optParams);

  foreach ($response['items'] as $ssl_certificate) {
    // TODO: Change code below to process each `ssl_certificate` resource:
    echo '<pre>', var_export($ssl_certificate, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->subnetworks->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $subnetworks_scoped_list) {
    // TODO: Change code below to process each ($name => $subnetworks_scoped_list) element:
    echo '<pre>', $name, ' => ', var_export($subnetworks_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region scoping this request.
$region = '{MY-REGION}';

// Name of the Subnetwork resource to delete.
$subnetwork = '{MY-SUBNETWORK}';


$response = $service->subnetworks->delete($project, $region, $subnetwork);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region scoping this request.
$region = '{MY-REGION}';

// Name of the Subnetwork resource to return.
$subnetwork = '{MY-SUBNETWORK}';


$response = $service->subnetworks->get($project, $region, $subnetwork);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region scoping this request.
$region = '{MY-REGION}';


$requestBody = new Google_Service_Compute_Subnetwork($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->subnetworks->insert($project, $region, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `listSubnetworks` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region scoping this request.
$region = '{MY-REGION}';


$optParams = array();
do {
  $response = $service->subnetworks->listSubnetworks($project, $region, $optParams);

  foreach ($response['items'] as $subnetwork) {
    // TODO: Change code below to process each `subnetwork` resource:
    echo '<pre>', var_export($subnetwork, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the TargetHttpProxy resource to delete.
$targetHttpProxy = '{MY-TARGET-HTTP-PROXY}';


$response = $service->targetHttpProxies->delete($project, $targetHttpProxy);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the TargetHttpProxy resource to return.
$targetHttpProxy = '{MY-TARGET-HTTP-PROXY}';


$response = $service->targetHttpProxies->get($project, $targetHttpProxy);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$requestBody = new Google_Service_Compute_TargetHttpProxy($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->targetHttpProxies->insert($project, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `listTargetHttpProxies` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->targetHttpProxies->listTargetHttpProxies($project, $optParams);

  foreach ($response['items'] as $target_http_proxy) {
    // TODO: Change code below to process each `target_http_proxy` resource:
    echo '<pre>', var_export($target_http_proxy, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `setUrlMap` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the TargetHttpProxy to set a URL map for.
$targetHttpProxy = '{MY-TARGET-HTTP-PROXY}';


$requestBody = new Google_Service_Compute_UrlMapReference($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->targetHttpProxies->setUrlMap($project, $targetHttpProxy, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the TargetHttpsProxy resource to delete.
$targetHttpsProxy = '{MY-TARGET-HTTPS-PROXY}';


$response = $service->targetHttpsProxies->delete($project, $targetHttpsProxy);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the TargetHttpsProxy resource to return.
$targetHttpsProxy = '{MY-TARGET-HTTPS-PROXY}';


$response = $service->targetHttpsProxies->get($project, $targetHttpsProxy);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$requestBody = new Google_Service_Compute_TargetHttpsProxy($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->targetHttpsProxies->insert($project, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `listTargetHttpsProxies` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->targetHttpsProxies->listTargetHttpsProxies($project, $optParams);

  foreach ($response['items'] as $target_https_proxy) {
    // TODO: Change code below to process each `target_https_proxy` resource:
    echo '<pre>', var_export($target_https_proxy, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `setSslCertificates` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the TargetHttpsProxy resource to set an SslCertificates resource for.
$targetHttpsProxy = '{MY-TARGET-HTTPS-PROXY}';


$requestBody = new Google_Service_Compute_TargetHttpsProxiesSetSslCertificatesRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->targetHttpsProxies->setSslCertificates($project, $targetHttpsProxy, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `setUrlMap` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the TargetHttpsProxy resource whose URL map is to be set.
$targetHttpsProxy = '{MY-TARGET-HTTPS-PROXY}';


$requestBody = new Google_Service_Compute_UrlMapReference($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->targetHttpsProxies->setUrlMap($project, $targetHttpsProxy, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->targetInstances->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $target_instances_scoped_list) {
    // TODO: Change code below to process each ($name => $target_instances_scoped_list) element:
    echo '<pre>', $name, ' => ', var_export($target_instances_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the zone scoping this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// Name of the TargetInstance resource to delete.
$targetInstance = '{MY-TARGET-INSTANCE}';


$response = $service->targetInstances->delete($project, $zone, $targetInstance);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the zone scoping this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// Name of the TargetInstance resource to return.
$targetInstance = '{MY-TARGET-INSTANCE}';


$response = $service->targetInstances->get($project, $zone, $targetInstance);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the zone scoping this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'


$requestBody = new Google_Service_Compute_TargetInstance($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->targetInstances->insert($project, $zone, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `listTargetInstances` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the zone scoping this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'


$optParams = array();
do {
  $response = $service->targetInstances->listTargetInstances($project, $zone, $optParams);

  foreach ($response['items'] as $target_instance) {
    // TODO: Change code below to process each `target_instance` resource:
    echo '<pre>', var_export($target_instance, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `addHealthCheck` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region scoping this request.
$region = '{MY-REGION}';

// Name of the target pool to add a health check to.
$targetPool = '{MY-TARGET-POOL}';


$requestBody = new Google_Service_Compute_TargetPoolsAddHealthCheckRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->targetPools->addHealthCheck($project, $region, $targetPool, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `addInstance` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region scoping this request.
$region = '{MY-REGION}';

// Name of the TargetPool resource to add instances to.
$targetPool = '{MY-TARGET-POOL}';


$requestBody = new Google_Service_Compute_TargetPoolsAddInstanceRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->targetPools->addInstance($project, $region, $targetPool, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->targetPools->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $target_pools_scoped_list) {
    // TODO: Change code below to process each ($name => $target_pools_scoped_list) element:
    echo '<pre>', $name, ' => ', var_export($target_pools_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region scoping this request.
$region = '{MY-REGION}';

// Name of the TargetPool resource to delete.
$targetPool = '{MY-TARGET-POOL}';


$response = $service->targetPools->delete($project, $region, $targetPool);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region scoping this request.
$region = '{MY-REGION}';

// Name of the TargetPool resource to return.
$targetPool = '{MY-TARGET-POOL}';


$response = $service->targetPools->get($project, $region, $targetPool);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `getHealth` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region scoping this request.
$region = '{MY-REGION}';

// Name of the TargetPool resource to which the queried instance belongs.
$targetPool = '{MY-TARGET-POOL}';


$requestBody = new Google_Service_Compute_InstanceReference($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->targetPools->getHealth($project, $region, $targetPool, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region scoping this request.
$region = '{MY-REGION}';


$requestBody = new Google_Service_Compute_TargetPool($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->targetPools->insert($project, $region, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `listTargetPools` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region scoping this request.
$region = '{MY-REGION}';


$optParams = array();
do {
  $response = $service->targetPools->listTargetPools($project, $region, $optParams);

  foreach ($response['items'] as $target_pool) {
    // TODO: Change code below to process each `target_pool` resource:
    echo '<pre>', var_export($target_pool, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `removeHealthCheck` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region for this request.
$region = '{MY-REGION}';

// Name of the target pool to remove health checks from.
$targetPool = '{MY-TARGET-POOL}';


$requestBody = new Google_Service_Compute_TargetPoolsRemoveHealthCheckRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->targetPools->removeHealthCheck($project, $region, $targetPool, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `removeInstance` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region scoping this request.
$region = '{MY-REGION}';

// Name of the TargetPool resource to remove instances from.
$targetPool = '{MY-TARGET-POOL}';


$requestBody = new Google_Service_Compute_TargetPoolsRemoveInstanceRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->targetPools->removeInstance($project, $region, $targetPool, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `setBackup` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region scoping this request.
$region = '{MY-REGION}';

// Name of the TargetPool resource to set a backup pool for.
$targetPool = '{MY-TARGET-POOL}';


$requestBody = new Google_Service_Compute_TargetReference($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->targetPools->setBackup($project, $region, $targetPool, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the TargetSslProxy resource to delete.
$targetSslProxy = '{MY-TARGET-SSL-PROXY}';


$response = $service->targetSslProxies->delete($project, $targetSslProxy);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the TargetSslProxy resource to return.
$targetSslProxy = '{MY-TARGET-SSL-PROXY}';


$response = $service->targetSslProxies->get($project, $targetSslProxy);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$requestBody = new Google_Service_Compute_TargetSslProxy($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->targetSslProxies->insert($project, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `listTargetSslProxies` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->targetSslProxies->listTargetSslProxies($project, $optParams);

  foreach ($response['items'] as $target_ssl_proxy) {
    // TODO: Change code below to process each `target_ssl_proxy` resource:
    echo '<pre>', var_export($target_ssl_proxy, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `setBackendService` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the TargetSslProxy resource whose BackendService resource is to be set.
$targetSslProxy = '{MY-TARGET-SSL-PROXY}';


$requestBody = new Google_Service_Compute_TargetSslProxiesSetBackendServiceRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->targetSslProxies->setBackendService($project, $targetSslProxy, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `setProxyHeader` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the TargetSslProxy resource whose ProxyHeader is to be set.
$targetSslProxy = '{MY-TARGET-SSL-PROXY}';


$requestBody = new Google_Service_Compute_TargetSslProxiesSetProxyHeaderRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->targetSslProxies->setProxyHeader($project, $targetSslProxy, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `setSslCertificates` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the TargetSslProxy resource whose SslCertificate resource is to be set.
$targetSslProxy = '{MY-TARGET-SSL-PROXY}';


$requestBody = new Google_Service_Compute_TargetSslProxiesSetSslCertificatesRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->targetSslProxies->setSslCertificates($project, $targetSslProxy, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->targetVpnGateways->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $target_vpn_gateways_scoped_list) {
    // TODO: Change code below to process each ($name => $target_vpn_gateways_scoped_list) element:
    echo '<pre>', $name, ' => ', var_export($target_vpn_gateways_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region for this request.
$region = '{MY-REGION}';

// Name of the target VPN gateway to delete.
$targetVpnGateway = '{MY-TARGET-VPN-GATEWAY}';


$response = $service->targetVpnGateways->delete($project, $region, $targetVpnGateway);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region for this request.
$region = '{MY-REGION}';

// Name of the target VPN gateway to return.
$targetVpnGateway = '{MY-TARGET-VPN-GATEWAY}';


$response = $service->targetVpnGateways->get($project, $region, $targetVpnGateway);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region for this request.
$region = '{MY-REGION}';


$requestBody = new Google_Service_Compute_TargetVpnGateway($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->targetVpnGateways->insert($project, $region, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `listTargetVpnGateways` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region for this request.
$region = '{MY-REGION}';


$optParams = array();
do {
  $response = $service->targetVpnGateways->listTargetVpnGateways($project, $region, $optParams);

  foreach ($response['items'] as $target_vpn_gateway) {
    // TODO: Change code below to process each `target_vpn_gateway` resource:
    echo '<pre>', var_export($target_vpn_gateway, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the UrlMap resource to delete.
$urlMap = '{MY-URL-MAP}';


$response = $service->urlMaps->delete($project, $urlMap);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the UrlMap resource to return.
$urlMap = '{MY-URL-MAP}';


$response = $service->urlMaps->get($project, $urlMap);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$requestBody = new Google_Service_Compute_UrlMap($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->urlMaps->insert($project, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `invalidateCache` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the UrlMap scoping this request.
$urlMap = '{MY-URL-MAP}';


$requestBody = new Google_Service_Compute_CacheInvalidationRule($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->urlMaps->invalidateCache($project, $urlMap, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `listUrlMaps` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->urlMaps->listUrlMaps($project, $optParams);

  foreach ($response['items'] as $url_map) {
    // TODO: Change code below to process each `url_map` resource:
    echo '<pre>', var_export($url_map, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `patch` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the UrlMap resource to update.
$urlMap = '{MY-URL-MAP}';


$requestBody = new Google_Service_Compute_UrlMap($client);
// TODO: Assign values to desired properties of the `requestBody` object to be changed.


$response = $service->urlMaps->patch($project, $urlMap, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `update` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the UrlMap resource to update.
$urlMap = '{MY-URL-MAP}';


$requestBody = new Google_Service_Compute_UrlMap($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->urlMaps->update($project, $urlMap, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `validate` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the UrlMap resource to be validated as.
$urlMap = '{MY-URL-MAP}';


$requestBody = new Google_Service_Compute_UrlMapsValidateRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->urlMaps->validate($project, $urlMap, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `aggregatedList` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->vpnTunnels->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $vpn_tunnels_scoped_list) {
    // TODO: Change code below to process each ($name => $vpn_tunnels_scoped_list) element:
    echo '<pre>', $name, ' => ', var_export($vpn_tunnels_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region for this request.
$region = '{MY-REGION}';

// Name of the VpnTunnel resource to delete.
$vpnTunnel = '{MY-VPN-TUNNEL}';


$response = $service->vpnTunnels->delete($project, $region, $vpnTunnel);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region for this request.
$region = '{MY-REGION}';

// Name of the VpnTunnel resource to return.
$vpnTunnel = '{MY-VPN-TUNNEL}';


$response = $service->vpnTunnels->get($project, $region, $vpnTunnel);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `insert` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region for this request.
$region = '{MY-REGION}';


$requestBody = new Google_Service_Compute_VpnTunnel($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->vpnTunnels->insert($project, $region, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `listVpnTunnels` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the region for this request.
$region = '{MY-REGION}';


$optParams = array();
do {
  $response = $service->vpnTunnels->listVpnTunnels($project, $region, $optParams);

  foreach ($response['items'] as $vpn_tunnel) {
    // TODO: Change code below to process each `vpn_tunnel` resource:
    echo '<pre>', var_export($vpn_tunnel, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `delete` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// Name of the Operations resource to delete.
$operation = '{MY-OPERATION}';


$service->zoneOperations->delete($project, $zone, $operation);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the zone for this request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'

// Name of the Operations resource to return.
$operation = '{MY-OPERATION}';


$response = $service->zoneOperations->get($project, $zone, $operation);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `listZoneOperations` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the zone for request.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'


$optParams = array();
do {
  $response = $service->zoneOperations->listZoneOperations($project, $zone, $optParams);

  foreach ($response['items'] as $operation) {
    // TODO: Change code below to process each `operation` resource:
    echo '<pre>', var_export($operation, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholders below to desired parameter values for the `get` method:

// Project ID for this request.
$project = '{MY-PROJECT}';

// Name of the zone resource to return.
$zone = '{MY-ZONE}';  // ex: 'us-central1-f'


$response = $service->zones->get($project, $zone);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


// TODO: Change placeholder below to desired parameter value for the `listZones` method:

// Project ID for this request.
$project = '{MY-PROJECT}';


$optParams = array();
do {
  $response = $service->zones->listZones($project, $optParams);

  foreach ($response['items'] as $zone) {
    // TODO: Change code below to process each `zone` resource:
    echo '<pre>', var_export($zone, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
