
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->addresses->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $addresses_scoped_list) {
    // TODO: Use $name, $addresses_scoped_list
    echo '<pre>', $name, ' => ', var_export($addresses_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region for this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// Name of the address resource to delete.
$address = '{MY-ADDRESS}'; // TODO: Update placeholder value(s).

$response = $service->addresses->delete($project, $region, $address);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region for this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// Name of the address resource to return.
$address = '{MY-ADDRESS}'; // TODO: Update placeholder value(s).

$response = $service->addresses->get($project, $region, $address);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region for this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_Address($client);

$response = $service->addresses->insert($project, $region, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region for this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->addresses->listAddresses($project, $region, $optParams);

  foreach ($response['items'] as $address) {
    // TODO: Use address
    echo '<pre>', var_export($address, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->autoscalers->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $autoscalers_scoped_list) {
    // TODO: Use $name, $autoscalers_scoped_list
    echo '<pre>', $name, ' => ', var_export($autoscalers_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// Name of the autoscaler to delete.
$autoscaler = '{MY-AUTOSCALER}'; // TODO: Update placeholder value(s).

$response = $service->autoscalers->delete($project, $zone, $autoscaler);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// Name of the autoscaler to return.
$autoscaler = '{MY-AUTOSCALER}'; // TODO: Update placeholder value(s).

$response = $service->autoscalers->get($project, $zone, $autoscaler);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_Autoscaler($client);

$response = $service->autoscalers->insert($project, $zone, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

$optParams = array();
do {
  $response = $service->autoscalers->listAutoscalers($project, $zone, $optParams);

  foreach ($response['items'] as $autoscaler) {
    // TODO: Use autoscaler
    echo '<pre>', var_export($autoscaler, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// Name of the autoscaler to update.
$autoscaler = '{MY-AUTOSCALER}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties to be changed.
$postBody = new Google_Service_Compute_Autoscaler($client);

$response = $service->autoscalers->patch($project, $zone, $autoscaler, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_Autoscaler($client);

$response = $service->autoscalers->update($project, $zone, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the BackendService resource to delete.
$backendService = '{MY-BACKEND-SERVICE}'; // TODO: Update placeholder value(s).

$response = $service->backendServices->delete($project, $backendService);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the BackendService resource to return.
$backendService = '{MY-BACKEND-SERVICE}'; // TODO: Update placeholder value(s).

$response = $service->backendServices->get($project, $backendService);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);


$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the BackendService resource to which the queried instance belongs.
$backendService = '{MY-BACKEND-SERVICE}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_ResourceGroupReference($client);

$response = $service->backendServices->getHealth($project, $backendService, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_BackendService($client);

$response = $service->backendServices->insert($project, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->backendServices->listBackendServices($project, $optParams);

  foreach ($response['items'] as $backend_service) {
    // TODO: Use backend_service
    echo '<pre>', var_export($backend_service, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the BackendService resource to update.
$backendService = '{MY-BACKEND-SERVICE}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties to be changed.
$postBody = new Google_Service_Compute_BackendService($client);

$response = $service->backendServices->patch($project, $backendService, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the BackendService resource to update.
$backendService = '{MY-BACKEND-SERVICE}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_BackendService($client);

$response = $service->backendServices->update($project, $backendService, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->diskTypes->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $disk_types_scoped_list) {
    // TODO: Use $name, $disk_types_scoped_list
    echo '<pre>', $name, ' => ', var_export($disk_types_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// Name of the disk type to return.
$diskType = '{MY-DISK-TYPE}'; // TODO: Update placeholder value(s).

$response = $service->diskTypes->get($project, $zone, $diskType);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

$optParams = array();
do {
  $response = $service->diskTypes->listDiskTypes($project, $zone, $optParams);

  foreach ($response['items'] as $disk_type) {
    // TODO: Use disk_type
    echo '<pre>', var_export($disk_type, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->disks->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $disks_scoped_list) {
    // TODO: Use $name, $disks_scoped_list
    echo '<pre>', $name, ' => ', var_export($disks_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// Name of the persistent disk to snapshot.
$disk = '{MY-DISK}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_Snapshot($client);

$response = $service->disks->createSnapshot($project, $zone, $disk, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// Name of the persistent disk to delete.
$disk = '{MY-DISK}'; // TODO: Update placeholder value(s).

$response = $service->disks->delete($project, $zone, $disk);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// Name of the persistent disk to return.
$disk = '{MY-DISK}'; // TODO: Update placeholder value(s).

$response = $service->disks->get($project, $zone, $disk);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_Disk($client);

$response = $service->disks->insert($project, $zone, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

$optParams = array();
do {
  $response = $service->disks->listDisks($project, $zone, $optParams);

  foreach ($response['items'] as $disk) {
    // TODO: Use disk
    echo '<pre>', var_export($disk, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the firewall rule to delete.
$firewall = '{MY-FIREWALL}'; // TODO: Update placeholder value(s).

$response = $service->firewalls->delete($project, $firewall);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the firewall rule to return.
$firewall = '{MY-FIREWALL}'; // TODO: Update placeholder value(s).

$response = $service->firewalls->get($project, $firewall);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_Firewall($client);

$response = $service->firewalls->insert($project, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->firewalls->listFirewalls($project, $optParams);

  foreach ($response['items'] as $firewall) {
    // TODO: Use firewall
    echo '<pre>', var_export($firewall, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the firewall rule to update.
$firewall = '{MY-FIREWALL}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties to be changed.
$postBody = new Google_Service_Compute_Firewall($client);

$response = $service->firewalls->patch($project, $firewall, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the firewall rule to update.
$firewall = '{MY-FIREWALL}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_Firewall($client);

$response = $service->firewalls->update($project, $firewall, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->forwardingRules->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $forwarding_rules_scoped_list) {
    // TODO: Use $name, $forwarding_rules_scoped_list
    echo '<pre>', $name, ' => ', var_export($forwarding_rules_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region scoping this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// Name of the ForwardingRule resource to delete.
$forwardingRule = '{MY-FORWARDING-RULE}'; // TODO: Update placeholder value(s).

$response = $service->forwardingRules->delete($project, $region, $forwardingRule);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region scoping this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// Name of the ForwardingRule resource to return.
$forwardingRule = '{MY-FORWARDING-RULE}'; // TODO: Update placeholder value(s).

$response = $service->forwardingRules->get($project, $region, $forwardingRule);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region scoping this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_ForwardingRule($client);

$response = $service->forwardingRules->insert($project, $region, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region scoping this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->forwardingRules->listForwardingRules($project, $region, $optParams);

  foreach ($response['items'] as $forwarding_rule) {
    // TODO: Use forwarding_rule
    echo '<pre>', var_export($forwarding_rule, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region scoping this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// Name of the ForwardingRule resource in which target is to be set.
$forwardingRule = '{MY-FORWARDING-RULE}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_TargetReference($client);

$response = $service->forwardingRules->setTarget($project, $region, $forwardingRule, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the address resource to delete.
$address = '{MY-ADDRESS}'; // TODO: Update placeholder value(s).

$response = $service->globalAddresses->delete($project, $address);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the address resource to return.
$address = '{MY-ADDRESS}'; // TODO: Update placeholder value(s).

$response = $service->globalAddresses->get($project, $address);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_Address($client);

$response = $service->globalAddresses->insert($project, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->globalAddresses->listGlobalAddresses($project, $optParams);

  foreach ($response['items'] as $address) {
    // TODO: Use address
    echo '<pre>', var_export($address, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the ForwardingRule resource to delete.
$forwardingRule = '{MY-FORWARDING-RULE}'; // TODO: Update placeholder value(s).

$response = $service->globalForwardingRules->delete($project, $forwardingRule);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the ForwardingRule resource to return.
$forwardingRule = '{MY-FORWARDING-RULE}'; // TODO: Update placeholder value(s).

$response = $service->globalForwardingRules->get($project, $forwardingRule);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_ForwardingRule($client);

$response = $service->globalForwardingRules->insert($project, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->globalForwardingRules->listGlobalForwardingRules($project, $optParams);

  foreach ($response['items'] as $forwarding_rule) {
    // TODO: Use forwarding_rule
    echo '<pre>', var_export($forwarding_rule, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the ForwardingRule resource in which target is to be set.
$forwardingRule = '{MY-FORWARDING-RULE}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_TargetReference($client);

$response = $service->globalForwardingRules->setTarget($project, $forwardingRule, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->globalOperations->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $operations_scoped_list) {
    // TODO: Use $name, $operations_scoped_list
    echo '<pre>', $name, ' => ', var_export($operations_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the Operations resource to delete.
$operation = '{MY-OPERATION}'; // TODO: Update placeholder value(s).

$service->globalOperations->delete($project, $operation);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the Operations resource to return.
$operation = '{MY-OPERATION}'; // TODO: Update placeholder value(s).

$response = $service->globalOperations->get($project, $operation);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->globalOperations->listGlobalOperations($project, $optParams);

  foreach ($response['items'] as $operation) {
    // TODO: Use operation
    echo '<pre>', var_export($operation, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the HttpHealthCheck resource to delete.
$httpHealthCheck = '{MY-HTTP-HEALTH-CHECK}'; // TODO: Update placeholder value(s).

$response = $service->httpHealthChecks->delete($project, $httpHealthCheck);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the HttpHealthCheck resource to return.
$httpHealthCheck = '{MY-HTTP-HEALTH-CHECK}'; // TODO: Update placeholder value(s).

$response = $service->httpHealthChecks->get($project, $httpHealthCheck);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_HttpHealthCheck($client);

$response = $service->httpHealthChecks->insert($project, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->httpHealthChecks->listHttpHealthChecks($project, $optParams);

  foreach ($response['items'] as $http_health_check) {
    // TODO: Use http_health_check
    echo '<pre>', var_export($http_health_check, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the HttpHealthCheck resource to update.
$httpHealthCheck = '{MY-HTTP-HEALTH-CHECK}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties to be changed.
$postBody = new Google_Service_Compute_HttpHealthCheck($client);

$response = $service->httpHealthChecks->patch($project, $httpHealthCheck, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the HttpHealthCheck resource to update.
$httpHealthCheck = '{MY-HTTP-HEALTH-CHECK}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_HttpHealthCheck($client);

$response = $service->httpHealthChecks->update($project, $httpHealthCheck, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the HttpsHealthCheck resource to delete.
$httpsHealthCheck = '{MY-HTTPS-HEALTH-CHECK}'; // TODO: Update placeholder value(s).

$response = $service->httpsHealthChecks->delete($project, $httpsHealthCheck);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the HttpsHealthCheck resource to return.
$httpsHealthCheck = '{MY-HTTPS-HEALTH-CHECK}'; // TODO: Update placeholder value(s).

$response = $service->httpsHealthChecks->get($project, $httpsHealthCheck);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_HttpsHealthCheck($client);

$response = $service->httpsHealthChecks->insert($project, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->httpsHealthChecks->listHttpsHealthChecks($project, $optParams);

  foreach ($response['items'] as $https_health_check) {
    // TODO: Use https_health_check
    echo '<pre>', var_export($https_health_check, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the HttpsHealthCheck resource to update.
$httpsHealthCheck = '{MY-HTTPS-HEALTH-CHECK}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties to be changed.
$postBody = new Google_Service_Compute_HttpsHealthCheck($client);

$response = $service->httpsHealthChecks->patch($project, $httpsHealthCheck, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the HttpsHealthCheck resource to update.
$httpsHealthCheck = '{MY-HTTPS-HEALTH-CHECK}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_HttpsHealthCheck($client);

$response = $service->httpsHealthChecks->update($project, $httpsHealthCheck, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the image resource to delete.
$image = '{MY-IMAGE}'; // TODO: Update placeholder value(s).

$response = $service->images->delete($project, $image);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Image name.
$image = '{MY-IMAGE}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_DeprecationStatus($client);

$response = $service->images->deprecate($project, $image, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the image resource to return.
$image = '{MY-IMAGE}'; // TODO: Update placeholder value(s).

$response = $service->images->get($project, $image);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_Image($client);

$response = $service->images->insert($project, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->images->listImages($project, $optParams);

  foreach ($response['items'] as $image) {
    // TODO: Use image
    echo '<pre>', var_export($image, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone where the managed instance group is located.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s).

// The name of the managed instance group.
$instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_InstanceGroupManagersAbandonInstancesRequest($client);

$response = $service->instanceGroupManagers->abandonInstances($project, $zone, $instanceGroupManager, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->instanceGroupManagers->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $instance_group_managers_scoped_list) {
    // TODO: Use $name, $instance_group_managers_scoped_list
    echo '<pre>', $name, ' => ', var_export($instance_group_managers_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone where the managed instance group is located.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s).

// The name of the managed instance group to delete.
$instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}'; // TODO: Update placeholder value(s).

$response = $service->instanceGroupManagers->delete($project, $zone, $instanceGroupManager);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone where the managed instance group is located.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s).

// The name of the managed instance group.
$instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_InstanceGroupManagersDeleteInstancesRequest($client);

$response = $service->instanceGroupManagers->deleteInstances($project, $zone, $instanceGroupManager, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone where the managed instance group is located.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s).

// The name of the managed instance group.
$instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}'; // TODO: Update placeholder value(s).

$response = $service->instanceGroupManagers->get($project, $zone, $instanceGroupManager);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone where you want to create the managed instance group.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_InstanceGroupManager($client);

$response = $service->instanceGroupManagers->insert($project, $zone, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone where the managed instance group is located.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->instanceGroupManagers->listInstanceGroupManagers($project, $zone, $optParams);

  foreach ($response['items'] as $instance_group_manager) {
    // TODO: Use instance_group_manager
    echo '<pre>', var_export($instance_group_manager, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone where the managed instance group is located.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s).

// The name of the managed instance group.
$instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}'; // TODO: Update placeholder value(s).

$response = $service->instanceGroupManagers->listManagedInstances($project, $zone, $instanceGroupManager);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone where the managed instance group is located.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s).

// The name of the managed instance group.
$instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_InstanceGroupManagersRecreateInstancesRequest($client);

$response = $service->instanceGroupManagers->recreateInstances($project, $zone, $instanceGroupManager, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone where the managed instance group is located.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s).

// The name of the managed instance group.
$instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}'; // TODO: Update placeholder value(s).

// The number of running instances that the managed instance group should maintain at any given time.
// The group automatically adds or removes instances to maintain the number of instances specified by
// this parameter.
$size = 0; // TODO: Update placeholder value(s).

$response = $service->instanceGroupManagers->resize($project, $zone, $instanceGroupManager, $size);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone where the managed instance group is located.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s).

// The name of the managed instance group.
$instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_InstanceGroupManagersSetInstanceTemplateRequest($client);

$response = $service->instanceGroupManagers->setInstanceTemplate($project, $zone, $instanceGroupManager, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone where the managed instance group is located.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s).

// The name of the managed instance group.
$instanceGroupManager = '{MY-INSTANCE-GROUP-MANAGER}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_InstanceGroupManagersSetTargetPoolsRequest($client);

$response = $service->instanceGroupManagers->setTargetPools($project, $zone, $instanceGroupManager, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone where the instance group is located.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s).

// The name of the instance group where you are adding instances.
$instanceGroup = '{MY-INSTANCE-GROUP}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_InstanceGroupsAddInstancesRequest($client);

$response = $service->instanceGroups->addInstances($project, $zone, $instanceGroup, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->instanceGroups->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $instance_groups_scoped_list) {
    // TODO: Use $name, $instance_groups_scoped_list
    echo '<pre>', $name, ' => ', var_export($instance_groups_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone where the instance group is located.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s).

// The name of the instance group to delete.
$instanceGroup = '{MY-INSTANCE-GROUP}'; // TODO: Update placeholder value(s).

$response = $service->instanceGroups->delete($project, $zone, $instanceGroup);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone where the instance group is located.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s).

// The name of the instance group.
$instanceGroup = '{MY-INSTANCE-GROUP}'; // TODO: Update placeholder value(s).

$response = $service->instanceGroups->get($project, $zone, $instanceGroup);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone where you want to create the instance group.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_InstanceGroup($client);

$response = $service->instanceGroups->insert($project, $zone, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone where the instance group is located.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->instanceGroups->listInstanceGroups($project, $zone, $optParams);

  foreach ($response['items'] as $instance_group) {
    // TODO: Use instance_group
    echo '<pre>', var_export($instance_group, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone where the instance group is located.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s).

// The name of the instance group from which you want to generate a list of included instances.
$instanceGroup = '{MY-INSTANCE-GROUP}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_InstanceGroupsListInstancesRequest($client);

$optParams = array();
do {
  $response = $service->instanceGroups->listInstances($project, $zone, $instanceGroup, $postBody, $optParams);

  foreach ($response['items'] as $instance_with_named_ports) {
    // TODO: Use instance_with_named_ports
    echo '<pre>', var_export($instance_with_named_ports, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone where the instance group is located.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s).

// The name of the instance group where the specified instances will be removed.
$instanceGroup = '{MY-INSTANCE-GROUP}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_InstanceGroupsRemoveInstancesRequest($client);

$response = $service->instanceGroups->removeInstances($project, $zone, $instanceGroup, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone where the instance group is located.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s).

// The name of the instance group where the named ports are updated.
$instanceGroup = '{MY-INSTANCE-GROUP}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_InstanceGroupsSetNamedPortsRequest($client);

$response = $service->instanceGroups->setNamedPorts($project, $zone, $instanceGroup, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the instance template to delete.
$instanceTemplate = '{MY-INSTANCE-TEMPLATE}'; // TODO: Update placeholder value(s).

$response = $service->instanceTemplates->delete($project, $instanceTemplate);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the instance template.
$instanceTemplate = '{MY-INSTANCE-TEMPLATE}'; // TODO: Update placeholder value(s).

$response = $service->instanceTemplates->get($project, $instanceTemplate);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_InstanceTemplate($client);

$response = $service->instanceTemplates->insert($project, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->instanceTemplates->listInstanceTemplates($project, $optParams);

  foreach ($response['items'] as $instance_template) {
    // TODO: Use instance_template
    echo '<pre>', var_export($instance_template, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// The instance name for this request.
$instance = '{MY-INSTANCE}'; // TODO: Update placeholder value(s).

// The name of the network interface to add to this instance.
$networkInterface = '{MY-NETWORK-INTERFACE}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_AccessConfig($client);

$response = $service->instances->addAccessConfig($project, $zone, $instance, $networkInterface, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->instances->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $instances_scoped_list) {
    // TODO: Use $name, $instances_scoped_list
    echo '<pre>', $name, ' => ', var_export($instances_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// The instance name for this request.
$instance = '{MY-INSTANCE}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_AttachedDisk($client);

$response = $service->instances->attachDisk($project, $zone, $instance, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// Name of the instance resource to delete.
$instance = '{MY-INSTANCE}'; // TODO: Update placeholder value(s).

$response = $service->instances->delete($project, $zone, $instance);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// The instance name for this request.
$instance = '{MY-INSTANCE}'; // TODO: Update placeholder value(s).

// The name of the access config to delete.
$accessConfig = '{MY-ACCESS-CONFIG}'; // TODO: Update placeholder value(s).

// The name of the network interface.
$networkInterface = '{MY-NETWORK-INTERFACE}'; // TODO: Update placeholder value(s).

$response = $service->instances->deleteAccessConfig($project, $zone, $instance, $accessConfig, $networkInterface);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// Instance name.
$instance = '{MY-INSTANCE}'; // TODO: Update placeholder value(s).

// Disk device name to detach.
$deviceName = '{MY-DEVICE-NAME}'; // TODO: Update placeholder value(s).

$response = $service->instances->detachDisk($project, $zone, $instance, $deviceName);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// Name of the instance resource to return.
$instance = '{MY-INSTANCE}'; // TODO: Update placeholder value(s).

$response = $service->instances->get($project, $zone, $instance);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// Name of the instance scoping this request.
$instance = '{MY-INSTANCE}'; // TODO: Update placeholder value(s).

$response = $service->instances->getSerialPortOutput($project, $zone, $instance);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_Instance($client);

$response = $service->instances->insert($project, $zone, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

$optParams = array();
do {
  $response = $service->instances->listInstances($project, $zone, $optParams);

  foreach ($response['items'] as $instance) {
    // TODO: Use instance
    echo '<pre>', var_export($instance, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// Name of the instance scoping this request.
$instance = '{MY-INSTANCE}'; // TODO: Update placeholder value(s).

$response = $service->instances->reset($project, $zone, $instance);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// The instance name.
$instance = '{MY-INSTANCE}'; // TODO: Update placeholder value(s).

// Whether to auto-delete the disk when the instance is deleted.
$autoDelete = false; // TODO: Update placeholder value(s).

// The device name of the disk to modify.
$deviceName = '{MY-DEVICE-NAME}'; // TODO: Update placeholder value(s).

$response = $service->instances->setDiskAutoDelete($project, $zone, $instance, $autoDelete, $deviceName);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// Name of the instance scoping this request.
$instance = '{MY-INSTANCE}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_InstancesSetMachineTypeRequest($client);

$response = $service->instances->setMachineType($project, $zone, $instance, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// Name of the instance scoping this request.
$instance = '{MY-INSTANCE}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_Metadata($client);

$response = $service->instances->setMetadata($project, $zone, $instance, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// Instance name.
$instance = '{MY-INSTANCE}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_Scheduling($client);

$response = $service->instances->setScheduling($project, $zone, $instance, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// Name of the instance scoping this request.
$instance = '{MY-INSTANCE}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_Tags($client);

$response = $service->instances->setTags($project, $zone, $instance, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// Name of the instance resource to start.
$instance = '{MY-INSTANCE}'; // TODO: Update placeholder value(s).

$response = $service->instances->start($project, $zone, $instance);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// Name of the instance resource to stop.
$instance = '{MY-INSTANCE}'; // TODO: Update placeholder value(s).

$response = $service->instances->stop($project, $zone, $instance);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the License resource to return.
$license = '{MY-LICENSE}'; // TODO: Update placeholder value(s).

$response = $service->licenses->get($project, $license);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->machineTypes->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $machine_types_scoped_list) {
    // TODO: Use $name, $machine_types_scoped_list
    echo '<pre>', $name, ' => ', var_export($machine_types_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// Name of the machine type to return.
$machineType = '{MY-MACHINE-TYPE}'; // TODO: Update placeholder value(s).

$response = $service->machineTypes->get($project, $zone, $machineType);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// The name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

$optParams = array();
do {
  $response = $service->machineTypes->listMachineTypes($project, $zone, $optParams);

  foreach ($response['items'] as $machine_type) {
    // TODO: Use machine_type
    echo '<pre>', var_export($machine_type, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the network to delete.
$network = '{MY-NETWORK}'; // TODO: Update placeholder value(s).

$response = $service->networks->delete($project, $network);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the network to return.
$network = '{MY-NETWORK}'; // TODO: Update placeholder value(s).

$response = $service->networks->get($project, $network);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_Network($client);

$response = $service->networks->insert($project, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->networks->listNetworks($project, $optParams);

  foreach ($response['items'] as $network) {
    // TODO: Use network
    echo '<pre>', var_export($network, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$response = $service->projects->get($project);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_DiskMoveRequest($client);

$response = $service->projects->moveDisk($project, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_InstanceMoveRequest($client);

$response = $service->projects->moveInstance($project, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_Metadata($client);

$response = $service->projects->setCommonInstanceMetadata($project, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_UsageExportLocation($client);

$response = $service->projects->setUsageExportBucket($project, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region for this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// Name of the Operations resource to delete.
$operation = '{MY-OPERATION}'; // TODO: Update placeholder value(s).

$service->regionOperations->delete($project, $region, $operation);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region for this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// Name of the Operations resource to return.
$operation = '{MY-OPERATION}'; // TODO: Update placeholder value(s).

$response = $service->regionOperations->get($project, $region, $operation);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region for this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->regionOperations->listRegionOperations($project, $region, $optParams);

  foreach ($response['items'] as $operation) {
    // TODO: Use operation
    echo '<pre>', var_export($operation, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region resource to return.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

$response = $service->regions->get($project, $region);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->regions->listRegions($project, $optParams);

  foreach ($response['items'] as $region) {
    // TODO: Use region
    echo '<pre>', var_export($region, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the Route resource to delete.
$route = '{MY-ROUTE}'; // TODO: Update placeholder value(s).

$response = $service->routes->delete($project, $route);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the Route resource to return.
$route = '{MY-ROUTE}'; // TODO: Update placeholder value(s).

$response = $service->routes->get($project, $route);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_Route($client);

$response = $service->routes->insert($project, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->routes->listRoutes($project, $optParams);

  foreach ($response['items'] as $route) {
    // TODO: Use route
    echo '<pre>', var_export($route, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the Snapshot resource to delete.
$snapshot = '{MY-SNAPSHOT}'; // TODO: Update placeholder value(s).

$response = $service->snapshots->delete($project, $snapshot);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the Snapshot resource to return.
$snapshot = '{MY-SNAPSHOT}'; // TODO: Update placeholder value(s).

$response = $service->snapshots->get($project, $snapshot);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->snapshots->listSnapshots($project, $optParams);

  foreach ($response['items'] as $snapshot) {
    // TODO: Use snapshot
    echo '<pre>', var_export($snapshot, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the SslCertificate resource to delete.
$sslCertificate = '{MY-SSL-CERTIFICATE}'; // TODO: Update placeholder value(s).

$response = $service->sslCertificates->delete($project, $sslCertificate);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the SslCertificate resource to return.
$sslCertificate = '{MY-SSL-CERTIFICATE}'; // TODO: Update placeholder value(s).

$response = $service->sslCertificates->get($project, $sslCertificate);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_SslCertificate($client);

$response = $service->sslCertificates->insert($project, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->sslCertificates->listSslCertificates($project, $optParams);

  foreach ($response['items'] as $ssl_certificate) {
    // TODO: Use ssl_certificate
    echo '<pre>', var_export($ssl_certificate, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->subnetworks->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $subnetworks_scoped_list) {
    // TODO: Use $name, $subnetworks_scoped_list
    echo '<pre>', $name, ' => ', var_export($subnetworks_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region scoping this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// Name of the Subnetwork resource to delete.
$subnetwork = '{MY-SUBNETWORK}'; // TODO: Update placeholder value(s).

$response = $service->subnetworks->delete($project, $region, $subnetwork);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region scoping this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// Name of the Subnetwork resource to return.
$subnetwork = '{MY-SUBNETWORK}'; // TODO: Update placeholder value(s).

$response = $service->subnetworks->get($project, $region, $subnetwork);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region scoping this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_Subnetwork($client);

$response = $service->subnetworks->insert($project, $region, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region scoping this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->subnetworks->listSubnetworks($project, $region, $optParams);

  foreach ($response['items'] as $subnetwork) {
    // TODO: Use subnetwork
    echo '<pre>', var_export($subnetwork, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the TargetHttpProxy resource to delete.
$targetHttpProxy = '{MY-TARGET-HTTP-PROXY}'; // TODO: Update placeholder value(s).

$response = $service->targetHttpProxies->delete($project, $targetHttpProxy);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the TargetHttpProxy resource to return.
$targetHttpProxy = '{MY-TARGET-HTTP-PROXY}'; // TODO: Update placeholder value(s).

$response = $service->targetHttpProxies->get($project, $targetHttpProxy);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_TargetHttpProxy($client);

$response = $service->targetHttpProxies->insert($project, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->targetHttpProxies->listTargetHttpProxies($project, $optParams);

  foreach ($response['items'] as $target_http_proxy) {
    // TODO: Use target_http_proxy
    echo '<pre>', var_export($target_http_proxy, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the TargetHttpProxy to set a URL map for.
$targetHttpProxy = '{MY-TARGET-HTTP-PROXY}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_UrlMapReference($client);

$response = $service->targetHttpProxies->setUrlMap($project, $targetHttpProxy, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the TargetHttpsProxy resource to delete.
$targetHttpsProxy = '{MY-TARGET-HTTPS-PROXY}'; // TODO: Update placeholder value(s).

$response = $service->targetHttpsProxies->delete($project, $targetHttpsProxy);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the TargetHttpsProxy resource to return.
$targetHttpsProxy = '{MY-TARGET-HTTPS-PROXY}'; // TODO: Update placeholder value(s).

$response = $service->targetHttpsProxies->get($project, $targetHttpsProxy);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_TargetHttpsProxy($client);

$response = $service->targetHttpsProxies->insert($project, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->targetHttpsProxies->listTargetHttpsProxies($project, $optParams);

  foreach ($response['items'] as $target_https_proxy) {
    // TODO: Use target_https_proxy
    echo '<pre>', var_export($target_https_proxy, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the TargetHttpsProxy resource to set an SslCertificates resource for.
$targetHttpsProxy = '{MY-TARGET-HTTPS-PROXY}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_TargetHttpsProxiesSetSslCertificatesRequest($client);

$response = $service->targetHttpsProxies->setSslCertificates($project, $targetHttpsProxy, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the TargetHttpsProxy resource whose URL map is to be set.
$targetHttpsProxy = '{MY-TARGET-HTTPS-PROXY}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_UrlMapReference($client);

$response = $service->targetHttpsProxies->setUrlMap($project, $targetHttpsProxy, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->targetInstances->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $target_instances_scoped_list) {
    // TODO: Use $name, $target_instances_scoped_list
    echo '<pre>', $name, ' => ', var_export($target_instances_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the zone scoping this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// Name of the TargetInstance resource to delete.
$targetInstance = '{MY-TARGET-INSTANCE}'; // TODO: Update placeholder value(s).

$response = $service->targetInstances->delete($project, $zone, $targetInstance);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the zone scoping this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// Name of the TargetInstance resource to return.
$targetInstance = '{MY-TARGET-INSTANCE}'; // TODO: Update placeholder value(s).

$response = $service->targetInstances->get($project, $zone, $targetInstance);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the zone scoping this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_TargetInstance($client);

$response = $service->targetInstances->insert($project, $zone, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the zone scoping this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

$optParams = array();
do {
  $response = $service->targetInstances->listTargetInstances($project, $zone, $optParams);

  foreach ($response['items'] as $target_instance) {
    // TODO: Use target_instance
    echo '<pre>', var_export($target_instance, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region scoping this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// Name of the target pool to add a health check to.
$targetPool = '{MY-TARGET-POOL}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_TargetPoolsAddHealthCheckRequest($client);

$response = $service->targetPools->addHealthCheck($project, $region, $targetPool, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region scoping this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// Name of the TargetPool resource to add instances to.
$targetPool = '{MY-TARGET-POOL}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_TargetPoolsAddInstanceRequest($client);

$response = $service->targetPools->addInstance($project, $region, $targetPool, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->targetPools->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $target_pools_scoped_list) {
    // TODO: Use $name, $target_pools_scoped_list
    echo '<pre>', $name, ' => ', var_export($target_pools_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region scoping this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// Name of the TargetPool resource to delete.
$targetPool = '{MY-TARGET-POOL}'; // TODO: Update placeholder value(s).

$response = $service->targetPools->delete($project, $region, $targetPool);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region scoping this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// Name of the TargetPool resource to return.
$targetPool = '{MY-TARGET-POOL}'; // TODO: Update placeholder value(s).

$response = $service->targetPools->get($project, $region, $targetPool);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region scoping this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// Name of the TargetPool resource to which the queried instance belongs.
$targetPool = '{MY-TARGET-POOL}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_InstanceReference($client);

$response = $service->targetPools->getHealth($project, $region, $targetPool, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region scoping this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_TargetPool($client);

$response = $service->targetPools->insert($project, $region, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region scoping this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->targetPools->listTargetPools($project, $region, $optParams);

  foreach ($response['items'] as $target_pool) {
    // TODO: Use target_pool
    echo '<pre>', var_export($target_pool, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region for this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// Name of the target pool to remove health checks from.
$targetPool = '{MY-TARGET-POOL}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_TargetPoolsRemoveHealthCheckRequest($client);

$response = $service->targetPools->removeHealthCheck($project, $region, $targetPool, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region scoping this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// Name of the TargetPool resource to remove instances from.
$targetPool = '{MY-TARGET-POOL}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_TargetPoolsRemoveInstanceRequest($client);

$response = $service->targetPools->removeInstance($project, $region, $targetPool, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region scoping this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// Name of the TargetPool resource to set a backup pool for.
$targetPool = '{MY-TARGET-POOL}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_TargetReference($client);

$response = $service->targetPools->setBackup($project, $region, $targetPool, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->targetVpnGateways->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $target_vpn_gateways_scoped_list) {
    // TODO: Use $name, $target_vpn_gateways_scoped_list
    echo '<pre>', $name, ' => ', var_export($target_vpn_gateways_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region for this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// Name of the target VPN gateway to delete.
$targetVpnGateway = '{MY-TARGET-VPN-GATEWAY}'; // TODO: Update placeholder value(s).

$response = $service->targetVpnGateways->delete($project, $region, $targetVpnGateway);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region for this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// Name of the target VPN gateway to return.
$targetVpnGateway = '{MY-TARGET-VPN-GATEWAY}'; // TODO: Update placeholder value(s).

$response = $service->targetVpnGateways->get($project, $region, $targetVpnGateway);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region for this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_TargetVpnGateway($client);

$response = $service->targetVpnGateways->insert($project, $region, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region for this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->targetVpnGateways->listTargetVpnGateways($project, $region, $optParams);

  foreach ($response['items'] as $target_vpn_gateway) {
    // TODO: Use target_vpn_gateway
    echo '<pre>', var_export($target_vpn_gateway, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the UrlMap resource to delete.
$urlMap = '{MY-URL-MAP}'; // TODO: Update placeholder value(s).

$response = $service->urlMaps->delete($project, $urlMap);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the UrlMap resource to return.
$urlMap = '{MY-URL-MAP}'; // TODO: Update placeholder value(s).

$response = $service->urlMaps->get($project, $urlMap);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_UrlMap($client);

$response = $service->urlMaps->insert($project, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->urlMaps->listUrlMaps($project, $optParams);

  foreach ($response['items'] as $url_map) {
    // TODO: Use url_map
    echo '<pre>', var_export($url_map, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the UrlMap resource to update.
$urlMap = '{MY-URL-MAP}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties to be changed.
$postBody = new Google_Service_Compute_UrlMap($client);

$response = $service->urlMaps->patch($project, $urlMap, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the UrlMap resource to update.
$urlMap = '{MY-URL-MAP}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_UrlMap($client);

$response = $service->urlMaps->update($project, $urlMap, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the UrlMap resource to be validated as.
$urlMap = '{MY-URL-MAP}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_UrlMapsValidateRequest($client);

$response = $service->urlMaps->validate($project, $urlMap, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->vpnTunnels->aggregatedList($project, $optParams);

  foreach ($response['items'] as $name => $vpn_tunnels_scoped_list) {
    // TODO: Use $name, $vpn_tunnels_scoped_list
    echo '<pre>', $name, ' => ', var_export($vpn_tunnels_scoped_list, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region for this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// Name of the VpnTunnel resource to delete.
$vpnTunnel = '{MY-VPN-TUNNEL}'; // TODO: Update placeholder value(s).

$response = $service->vpnTunnels->delete($project, $region, $vpnTunnel);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region for this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// Name of the VpnTunnel resource to return.
$vpnTunnel = '{MY-VPN-TUNNEL}'; // TODO: Update placeholder value(s).

$response = $service->vpnTunnels->get($project, $region, $vpnTunnel);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region for this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

// TODO: Assign values to the desired properties.
$postBody = new Google_Service_Compute_VpnTunnel($client);

$response = $service->vpnTunnels->insert($project, $region, $postBody);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the region for this request.
$region = '{MY-REGION}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->vpnTunnels->listVpnTunnels($project, $region, $optParams);

  foreach ($response['items'] as $vpn_tunnel) {
    // TODO: Use vpn_tunnel
    echo '<pre>', var_export($vpn_tunnel, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// Name of the Operations resource to delete.
$operation = '{MY-OPERATION}'; // TODO: Update placeholder value(s).

$service->zoneOperations->delete($project, $zone, $operation);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the zone for this request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

// Name of the Operations resource to return.
$operation = '{MY-OPERATION}'; // TODO: Update placeholder value(s).

$response = $service->zoneOperations->get($project, $zone, $operation);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the zone for request.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

$optParams = array();
do {
  $response = $service->zoneOperations->listZoneOperations($project, $zone, $optParams);

  foreach ($response['items'] as $operation) {
    // TODO: Use operation
    echo '<pre>', var_export($operation, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

// Name of the zone resource to return.
$zone = '{MY-ZONE}'; // TODO: Update placeholder value(s). eg. 'us-central1-f'

$response = $service->zones->get($project, $zone);

// TODO: Use $response
echo '<pre>', var_export($response, true), '</pre>', "\n";
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Compute Engine API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/compute
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Compute($client);

// Project ID for this request.
$project = '{MY-PROJECT}'; // TODO: Update placeholder value(s).

$optParams = array();
do {
  $response = $service->zones->listZones($project, $optParams);

  foreach ($response['items'] as $zone) {
    // TODO: Use zone
    echo '<pre>', var_export($zone, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
