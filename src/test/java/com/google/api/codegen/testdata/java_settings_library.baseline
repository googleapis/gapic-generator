============== file: src/main/java/com/google/gcloud/pubsub/spi/LibraryServiceSettings.java ==============
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

/*
 * EDITING INSTRUCTIONS
 * This file was generated from the file
 * https://github.com/google/googleapis/blob/master/library.proto
 * and updates to that file get reflected here through a refresh process.
 * For the short term, the refresh process will only be runnable by Google engineers.
 * Manual additions are allowed because the refresh process performs
 * a 3-way merge in order to preserve those manual additions. In order to not
 * break the refresh process, only certain types of modifications are
 * allowed.
 *
 * Allowed modifications - currently these are the only types allowed:
 * 1. New methods (these should be added to the end of the class)
 * 2. New imports
 * 3. Additional documentation between "manual edit" demarcations
 *
 * Happy editing!
 */

package com.google.gcloud.pubsub.spi;

import com.google.api.gax.core.ConnectionSettings;
import com.google.api.gax.core.RetrySettings;
import com.google.api.gax.grpc.ApiCallSettings;
import com.google.api.gax.grpc.BundlingCallSettings;
import com.google.api.gax.grpc.BundlingDescriptor;
import com.google.api.gax.grpc.BundlingSettings;
import com.google.api.gax.grpc.PageStreamingCallSettings;
import com.google.api.gax.grpc.PageStreamingDescriptor;
import com.google.api.gax.grpc.RequestIssuer;
import com.google.api.gax.grpc.ServiceApiSettings;
import com.google.api.gax.grpc.SimpleCallSettings;
import com.google.auth.Credentials;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.google.example.library.v1.AddCommentsRequest;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.CreateBookRequest;
import com.google.example.library.v1.CreateShelfRequest;
import com.google.example.library.v1.DeleteBookRequest;
import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.GetBookFromArchiveRequest;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.GetShelfRequest;
import com.google.example.library.v1.LibraryServiceGrpc;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.ListStringsRequest;
import com.google.example.library.v1.ListStringsResponse;
import com.google.example.library.v1.MergeShelvesRequest;
import com.google.example.library.v1.MoveBookRequest;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.Shelf;
import com.google.example.library.v1.UpdateBookIndexRequest;
import com.google.example.library.v1.UpdateBookRequest;
import com.google.protobuf.Empty;
import io.grpc.ManagedChannel;
import io.grpc.Status;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.ScheduledExecutorService;
import org.joda.time.Duration;

// Manually-added imports: add custom (non-generated) imports after this point.



// AUTO-GENERATED DOCUMENTATION AND CLASS - see instructions at the top of the file for editing.
/**
 * Settings class to configure an instance of {@link LibraryServiceApi}.
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 * <li>The default service address (library-example.googleapis.com) and default port (443)
 * are used.
 * <li>Credentials are acquired automatically through Application Default Credentials.
 * <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 *
 * <p>The builder of this class is recursive, so contained classes are themselves builders.
 * When build() is called, the tree of builders is called to create the complete settings
 * object. For example, to set the total timeout of CreateShelf to 30 seconds:
 *
 * <pre>
 * <code>
 * LibraryServiceSettings.Builder libraryServiceSettingsBuilder =
 *     LibraryServiceSettings.defaultBuilder();
 * libraryServiceSettingsBuilder.CreateShelfSettings().getRetrySettingsBuilder()
 *     .setTotalTimeout(Duration.standardSeconds(30));
 * LibraryServiceSettings libraryServiceSettings = libraryServiceSettingsBuilder.build();
 * </code>
 * </pre>
 */
@javax.annotation.Generated("by GAPIC")
public class LibraryServiceSettings extends ServiceApiSettings {

  /**
   * The default address of the service.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public static final String DEFAULT_SERVICE_ADDRESS = "library-example.googleapis.com";

  /**
   * The default port of the service.
   *
   * <!-- manual edit -->
   * <!-- end manual edit -->
   */
  public static final int DEFAULT_SERVICE_PORT = 443;

  /**
   * The default scopes of the service.
   */
  public static final ImmutableList<String> DEFAULT_SERVICE_SCOPES = ImmutableList.<String>builder()
      .add("https://www.googleapis.com/auth/library")
      .add("https://www.googleapis.com/auth/cloud-platform")
      .build();

  /**
   * The default connection settings of the service.
   */
  public static final ConnectionSettings DEFAULT_CONNECTION_SETTINGS =
      ConnectionSettings.newBuilder()
          .setServiceAddress(DEFAULT_SERVICE_ADDRESS)
          .setPort(DEFAULT_SERVICE_PORT)
          .provideCredentialsWith(DEFAULT_SERVICE_SCOPES)
          .build();

  private final SimpleCallSettings<CreateShelfRequest, Shelf> createShelfSettings;
  private final SimpleCallSettings<GetShelfRequest, Shelf> getShelfSettings;
  private final PageStreamingCallSettings<ListShelvesRequest, ListShelvesResponse, Shelf>
      listShelvesSettings;

  private final SimpleCallSettings<DeleteShelfRequest, Empty> deleteShelfSettings;
  private final SimpleCallSettings<MergeShelvesRequest, Shelf> mergeShelvesSettings;
  private final SimpleCallSettings<CreateBookRequest, Book> createBookSettings;
  private final BundlingCallSettings<PublishSeriesRequest, PublishSeriesResponse> publishSeriesSettings;
  private final SimpleCallSettings<GetBookRequest, Book> getBookSettings;
  private final PageStreamingCallSettings<ListBooksRequest, ListBooksResponse, Book>
      listBooksSettings;

  private final SimpleCallSettings<DeleteBookRequest, Empty> deleteBookSettings;
  private final SimpleCallSettings<UpdateBookRequest, Book> updateBookSettings;
  private final SimpleCallSettings<MoveBookRequest, Book> moveBookSettings;
  private final PageStreamingCallSettings<ListStringsRequest, ListStringsResponse, String>
      listStringsSettings;

  private final SimpleCallSettings<AddCommentsRequest, Empty> addCommentsSettings;
  private final SimpleCallSettings<GetBookFromArchiveRequest, Book> getBookFromArchiveSettings;
  private final SimpleCallSettings<UpdateBookIndexRequest, Empty> updateBookIndexSettings;

  /**
   * Returns the object with the settings used for calls to createShelf.
   */
  public SimpleCallSettings<CreateShelfRequest, Shelf> createShelfSettings() {
    return createShelfSettings;
  }

  /**
   * Returns the object with the settings used for calls to getShelf.
   */
  public SimpleCallSettings<GetShelfRequest, Shelf> getShelfSettings() {
    return getShelfSettings;
  }

  /**
   * Returns the object with the settings used for calls to listShelves.
   */
  public PageStreamingCallSettings<ListShelvesRequest, ListShelvesResponse, Shelf>
      listShelvesSettings() {
    return listShelvesSettings;
  }

  /**
   * Returns the object with the settings used for calls to deleteShelf.
   */
  public SimpleCallSettings<DeleteShelfRequest, Empty> deleteShelfSettings() {
    return deleteShelfSettings;
  }

  /**
   * Returns the object with the settings used for calls to mergeShelves.
   */
  public SimpleCallSettings<MergeShelvesRequest, Shelf> mergeShelvesSettings() {
    return mergeShelvesSettings;
  }

  /**
   * Returns the object with the settings used for calls to createBook.
   */
  public SimpleCallSettings<CreateBookRequest, Book> createBookSettings() {
    return createBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to publishSeries.
   */
  public BundlingCallSettings<PublishSeriesRequest, PublishSeriesResponse> publishSeriesSettings() {
    return publishSeriesSettings;
  }

  /**
   * Returns the object with the settings used for calls to getBook.
   */
  public SimpleCallSettings<GetBookRequest, Book> getBookSettings() {
    return getBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to listBooks.
   */
  public PageStreamingCallSettings<ListBooksRequest, ListBooksResponse, Book>
      listBooksSettings() {
    return listBooksSettings;
  }

  /**
   * Returns the object with the settings used for calls to deleteBook.
   */
  public SimpleCallSettings<DeleteBookRequest, Empty> deleteBookSettings() {
    return deleteBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to updateBook.
   */
  public SimpleCallSettings<UpdateBookRequest, Book> updateBookSettings() {
    return updateBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to moveBook.
   */
  public SimpleCallSettings<MoveBookRequest, Book> moveBookSettings() {
    return moveBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to listStrings.
   */
  public PageStreamingCallSettings<ListStringsRequest, ListStringsResponse, String>
      listStringsSettings() {
    return listStringsSettings;
  }

  /**
   * Returns the object with the settings used for calls to addComments.
   */
  public SimpleCallSettings<AddCommentsRequest, Empty> addCommentsSettings() {
    return addCommentsSettings;
  }

  /**
   * Returns the object with the settings used for calls to getBookFromArchive.
   */
  public SimpleCallSettings<GetBookFromArchiveRequest, Book> getBookFromArchiveSettings() {
    return getBookFromArchiveSettings;
  }

  /**
   * Returns the object with the settings used for calls to updateBookIndex.
   */
  public SimpleCallSettings<UpdateBookIndexRequest, Empty> updateBookIndexSettings() {
    return updateBookIndexSettings;
  }


  /**
   * Returns a builder for this class with recommended defaults.
   */
  public static Builder defaultBuilder() {
    return Builder.createDefault();
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Returns a builder containing all the values of this settings class.
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  private LibraryServiceSettings(Builder settingsBuilder) throws IOException {
    super(settingsBuilder.getChannelProvider(),
          settingsBuilder.getExecutorProvider(),
          settingsBuilder.getGeneratorName(),
          settingsBuilder.getGeneratorVersion(),
          settingsBuilder.getClientLibName(),
          settingsBuilder.getClientLibVersion());

    createShelfSettings = settingsBuilder.createShelfSettings().build();
    getShelfSettings = settingsBuilder.getShelfSettings().build();
    listShelvesSettings = settingsBuilder.listShelvesSettings().build();
    deleteShelfSettings = settingsBuilder.deleteShelfSettings().build();
    mergeShelvesSettings = settingsBuilder.mergeShelvesSettings().build();
    createBookSettings = settingsBuilder.createBookSettings().build();
    publishSeriesSettings = settingsBuilder.publishSeriesSettings().build();
    getBookSettings = settingsBuilder.getBookSettings().build();
    listBooksSettings = settingsBuilder.listBooksSettings().build();
    deleteBookSettings = settingsBuilder.deleteBookSettings().build();
    updateBookSettings = settingsBuilder.updateBookSettings().build();
    moveBookSettings = settingsBuilder.moveBookSettings().build();
    listStringsSettings = settingsBuilder.listStringsSettings().build();
    addCommentsSettings = settingsBuilder.addCommentsSettings().build();
    getBookFromArchiveSettings = settingsBuilder.getBookFromArchiveSettings().build();
    updateBookIndexSettings = settingsBuilder.updateBookIndexSettings().build();
  }

  private static PageStreamingDescriptor<ListShelvesRequest, ListShelvesResponse, Shelf> LIST_SHELVES_PAGE_STR_DESC =
      new PageStreamingDescriptor<ListShelvesRequest, ListShelvesResponse, Shelf>() {
        @Override
        public Object emptyToken() {
          return "";
        }
        @Override
        public ListShelvesRequest injectToken(
            ListShelvesRequest payload, Object token) {
          return ListShelvesRequest
            .newBuilder(payload)
            .setPageToken((String) token)
            .build();
        }
        @Override
        public Object extractNextToken(ListShelvesResponse payload) {
          return payload.getNextPageToken();
        }
        @Override
        public Iterable<Shelf> extractResources(ListShelvesResponse payload) {
          return payload.getShelvesList();
        }
      };

  private static PageStreamingDescriptor<ListBooksRequest, ListBooksResponse, Book> LIST_BOOKS_PAGE_STR_DESC =
      new PageStreamingDescriptor<ListBooksRequest, ListBooksResponse, Book>() {
        @Override
        public Object emptyToken() {
          return "";
        }
        @Override
        public ListBooksRequest injectToken(
            ListBooksRequest payload, Object token) {
          return ListBooksRequest
            .newBuilder(payload)
            .setPageToken((String) token)
            .build();
        }
        @Override
        public Object extractNextToken(ListBooksResponse payload) {
          return payload.getNextPageToken();
        }
        @Override
        public Iterable<Book> extractResources(ListBooksResponse payload) {
          return payload.getBooksList();
        }
      };

  private static PageStreamingDescriptor<ListStringsRequest, ListStringsResponse, String> LIST_STRINGS_PAGE_STR_DESC =
      new PageStreamingDescriptor<ListStringsRequest, ListStringsResponse, String>() {
        @Override
        public Object emptyToken() {
          return "";
        }
        @Override
        public ListStringsRequest injectToken(
            ListStringsRequest payload, Object token) {
          return ListStringsRequest
            .newBuilder(payload)
            .setPageToken((String) token)
            .build();
        }
        @Override
        public Object extractNextToken(ListStringsResponse payload) {
          return payload.getNextPageToken();
        }
        @Override
        public Iterable<String> extractResources(ListStringsResponse payload) {
          return payload.getStringsList();
        }
      };

  private static BundlingDescriptor<PublishSeriesRequest, PublishSeriesResponse> PUBLISH_SERIES_BUNDLING_DESC =
      new BundlingDescriptor<PublishSeriesRequest, PublishSeriesResponse>() {
        @Override
        public String getBundlePartitionKey(PublishSeriesRequest request) {
          return request.getEdition() + "|" + request.getName();
        }

        @Override
        public PublishSeriesRequest mergeRequests(Collection<PublishSeriesRequest> requests) {
          PublishSeriesRequest firstRequest = requests.iterator().next();

          List<Book> elements = new ArrayList<>();
          for (PublishSeriesRequest request : requests) {
            elements.addAll(request.getBooksList());
          }

          PublishSeriesRequest bundleRequest =
              PublishSeriesRequest.newBuilder()
                  .setEdition(firstRequest.getEdition())
                  .setName(firstRequest.getName())
                  .addAllBooks(elements)
                  .build();
          return bundleRequest;
        }

        @Override
        public void splitResponse(
            PublishSeriesResponse bundleResponse,
            Collection<? extends RequestIssuer<PublishSeriesRequest, PublishSeriesResponse>> bundle) {
          int bundleMessageIndex = 0;
          for (RequestIssuer<PublishSeriesRequest, PublishSeriesResponse> responder : bundle) {
            List<String> subresponseElements = new ArrayList<>();
            int subresponseCount = responder.getRequest().getBooksCount();
            for (int i = 0; i < subresponseCount; i++) {
              subresponseElements.add(bundleResponse.getBookNames(bundleMessageIndex));
              bundleMessageIndex += 1;
            }
            PublishSeriesResponse response =
                PublishSeriesResponse.newBuilder().addAllBookNames(subresponseElements).build();
            responder.setResponse(response);
          }
        }

        @Override
        public void splitException(
            Throwable throwable,
            Collection<? extends RequestIssuer<PublishSeriesRequest, PublishSeriesResponse>> bundle) {
          for (RequestIssuer<PublishSeriesRequest, PublishSeriesResponse> responder : bundle) {
            responder.setException(throwable);
          }
        }

        @Override
        public long countElements(PublishSeriesRequest request) {
          return request.getBooksCount();
        }

        @Override
        public long countBytes(PublishSeriesRequest request) {
          return request.getSerializedSize();
        }
      };


  /**
   * Builder for LibraryServiceSettings.
   */
  public static class Builder extends ServiceApiSettings.Builder {
    private final ImmutableList<ApiCallSettings.Builder> methodSettingsBuilders;

    private SimpleCallSettings.Builder<CreateShelfRequest, Shelf> createShelfSettings;
    private SimpleCallSettings.Builder<GetShelfRequest, Shelf> getShelfSettings;
    private PageStreamingCallSettings.Builder<ListShelvesRequest, ListShelvesResponse, Shelf>
        listShelvesSettings;
    private SimpleCallSettings.Builder<DeleteShelfRequest, Empty> deleteShelfSettings;
    private SimpleCallSettings.Builder<MergeShelvesRequest, Shelf> mergeShelvesSettings;
    private SimpleCallSettings.Builder<CreateBookRequest, Book> createBookSettings;
    private BundlingCallSettings.Builder<PublishSeriesRequest, PublishSeriesResponse> publishSeriesSettings;
    private SimpleCallSettings.Builder<GetBookRequest, Book> getBookSettings;
    private PageStreamingCallSettings.Builder<ListBooksRequest, ListBooksResponse, Book>
        listBooksSettings;
    private SimpleCallSettings.Builder<DeleteBookRequest, Empty> deleteBookSettings;
    private SimpleCallSettings.Builder<UpdateBookRequest, Book> updateBookSettings;
    private SimpleCallSettings.Builder<MoveBookRequest, Book> moveBookSettings;
    private PageStreamingCallSettings.Builder<ListStringsRequest, ListStringsResponse, String>
        listStringsSettings;
    private SimpleCallSettings.Builder<AddCommentsRequest, Empty> addCommentsSettings;
    private SimpleCallSettings.Builder<GetBookFromArchiveRequest, Book> getBookFromArchiveSettings;
    private SimpleCallSettings.Builder<UpdateBookIndexRequest, Empty> updateBookIndexSettings;

    private static final ImmutableMap<String, ImmutableSet<Status.Code>> RETRYABLE_CODE_DEFINITIONS;

    static {
      ImmutableMap.Builder<String, ImmutableSet<Status.Code>> definitions = ImmutableMap.builder();
      definitions.put(
          "idempotent",
          Sets.immutableEnumSet(Lists.<Status.Code>newArrayList(Status.Code.DEADLINE_EXCEEDED, Status.Code.UNAVAILABLE)));
      definitions.put(
          "non_idempotent",
          Sets.immutableEnumSet(Lists.<Status.Code>newArrayList()));
      RETRYABLE_CODE_DEFINITIONS = definitions.build();
    }

    private static final ImmutableMap<String, RetrySettings.Builder> RETRY_PARAM_DEFINITIONS;

    static {
      ImmutableMap.Builder<String, RetrySettings.Builder> definitions = ImmutableMap.builder();
      RetrySettings.Builder settingsBuilder = null;
      settingsBuilder = RetrySettings.newBuilder()
          .setInitialRetryDelay(Duration.millis(100L))
          .setRetryDelayMultiplier(1.2)
          .setMaxRetryDelay(Duration.millis(1000L))
          .setInitialRpcTimeout(Duration.millis(300L))
          .setRpcTimeoutMultiplier(1.3)
          .setMaxRpcTimeout(Duration.millis(3000L))
          .setTotalTimeout(Duration.millis(30000L));
      definitions.put("default", settingsBuilder);
      RETRY_PARAM_DEFINITIONS = definitions.build();
    }

    private Builder() {
      super(DEFAULT_CONNECTION_SETTINGS);

      createShelfSettings = SimpleCallSettings.newBuilder(LibraryServiceGrpc.METHOD_CREATE_SHELF);

      getShelfSettings = SimpleCallSettings.newBuilder(LibraryServiceGrpc.METHOD_GET_SHELF);

      listShelvesSettings = PageStreamingCallSettings.newBuilder(
          LibraryServiceGrpc.METHOD_LIST_SHELVES,
          LIST_SHELVES_PAGE_STR_DESC);

      deleteShelfSettings = SimpleCallSettings.newBuilder(LibraryServiceGrpc.METHOD_DELETE_SHELF);

      mergeShelvesSettings = SimpleCallSettings.newBuilder(LibraryServiceGrpc.METHOD_MERGE_SHELVES);

      createBookSettings = SimpleCallSettings.newBuilder(LibraryServiceGrpc.METHOD_CREATE_BOOK);

      publishSeriesSettings = BundlingCallSettings.newBuilder(
          LibraryServiceGrpc.METHOD_PUBLISH_SERIES,
          PUBLISH_SERIES_BUNDLING_DESC)
              .setBundlingSettingsBuilder(BundlingSettings.newBuilder());

      getBookSettings = SimpleCallSettings.newBuilder(LibraryServiceGrpc.METHOD_GET_BOOK);

      listBooksSettings = PageStreamingCallSettings.newBuilder(
          LibraryServiceGrpc.METHOD_LIST_BOOKS,
          LIST_BOOKS_PAGE_STR_DESC);

      deleteBookSettings = SimpleCallSettings.newBuilder(LibraryServiceGrpc.METHOD_DELETE_BOOK);

      updateBookSettings = SimpleCallSettings.newBuilder(LibraryServiceGrpc.METHOD_UPDATE_BOOK);

      moveBookSettings = SimpleCallSettings.newBuilder(LibraryServiceGrpc.METHOD_MOVE_BOOK);

      listStringsSettings = PageStreamingCallSettings.newBuilder(
          LibraryServiceGrpc.METHOD_LIST_STRINGS,
          LIST_STRINGS_PAGE_STR_DESC);

      addCommentsSettings = SimpleCallSettings.newBuilder(LibraryServiceGrpc.METHOD_ADD_COMMENTS);

      getBookFromArchiveSettings = SimpleCallSettings.newBuilder(LibraryServiceGrpc.METHOD_GET_BOOK_FROM_ARCHIVE);

      updateBookIndexSettings = SimpleCallSettings.newBuilder(LibraryServiceGrpc.METHOD_UPDATE_BOOK_INDEX);

      methodSettingsBuilders = ImmutableList.<ApiCallSettings.Builder>of(
          createShelfSettings,
          getShelfSettings,
          listShelvesSettings,
          deleteShelfSettings,
          mergeShelvesSettings,
          createBookSettings,
          publishSeriesSettings,
          getBookSettings,
          listBooksSettings,
          deleteBookSettings,
          updateBookSettings,
          moveBookSettings,
          listStringsSettings,
          addCommentsSettings,
          getBookFromArchiveSettings,
          updateBookIndexSettings
      );
    }

    private static Builder createDefault() {
      Builder builder = new Builder();
      builder.createShelfSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.getShelfSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.listShelvesSettings()
              .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
              .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.deleteShelfSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.mergeShelvesSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.createBookSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.publishSeriesSettings().getBundlingSettingsBuilder()
              .setElementCountThreshold(6)
              .setElementCountLimit(7)
              .setRequestByteThreshold(100000)
              .setRequestByteLimit(150000)
              .setDelayThreshold(Duration.millis(500))
              .setBlockingCallCountThreshold(1);
      builder.publishSeriesSettings()
              .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
              .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.getBookSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.listBooksSettings()
              .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
              .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.deleteBookSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.updateBookSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.moveBookSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.listStringsSettings()
              .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
              .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.addCommentsSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.getBookFromArchiveSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.updateBookIndexSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      return builder;
    }

    private Builder(LibraryServiceSettings settings) {
      super(settings);

      createShelfSettings = settings.createShelfSettings.toBuilder();
      getShelfSettings = settings.getShelfSettings.toBuilder();
      listShelvesSettings = settings.listShelvesSettings.toBuilder();
      deleteShelfSettings = settings.deleteShelfSettings.toBuilder();
      mergeShelvesSettings = settings.mergeShelvesSettings.toBuilder();
      createBookSettings = settings.createBookSettings.toBuilder();
      publishSeriesSettings = settings.publishSeriesSettings.toBuilder();
      getBookSettings = settings.getBookSettings.toBuilder();
      listBooksSettings = settings.listBooksSettings.toBuilder();
      deleteBookSettings = settings.deleteBookSettings.toBuilder();
      updateBookSettings = settings.updateBookSettings.toBuilder();
      moveBookSettings = settings.moveBookSettings.toBuilder();
      listStringsSettings = settings.listStringsSettings.toBuilder();
      addCommentsSettings = settings.addCommentsSettings.toBuilder();
      getBookFromArchiveSettings = settings.getBookFromArchiveSettings.toBuilder();
      updateBookIndexSettings = settings.updateBookIndexSettings.toBuilder();

      methodSettingsBuilders = ImmutableList.<ApiCallSettings.Builder>of(
          createShelfSettings,
          getShelfSettings,
          listShelvesSettings,
          deleteShelfSettings,
          mergeShelvesSettings,
          createBookSettings,
          publishSeriesSettings,
          getBookSettings,
          listBooksSettings,
          deleteBookSettings,
          updateBookSettings,
          moveBookSettings,
          listStringsSettings,
          addCommentsSettings,
          getBookFromArchiveSettings,
          updateBookIndexSettings
      );
    }

    @Override
    protected ConnectionSettings getDefaultConnectionSettings() {
      return DEFAULT_CONNECTION_SETTINGS;
    }
    @Override
    public Builder provideExecutorWith(ScheduledExecutorService executor, boolean shouldAutoClose) {
      super.provideExecutorWith(executor, shouldAutoClose);
      return this;
    }
    @Override
    public Builder provideChannelWith(ManagedChannel channel, boolean shouldAutoClose) {
      super.provideChannelWith(channel, shouldAutoClose);
      return this;
    }
    @Override
    public Builder provideChannelWith(ConnectionSettings settings) {
      super.provideChannelWith(settings);
      return this;
    }
    @Override
    public Builder provideChannelWith(Credentials credentials) {
      super.provideChannelWith(credentials);
      return this;
    }
    @Override
    public Builder provideChannelWith(List<String> scopes) {
      super.provideChannelWith(scopes);
      return this;
    }
    @Override
    public Builder setGeneratorHeader(String name, String version) {
      super.setGeneratorHeader(name, version);
      return this;
    }
    @Override
    public Builder setClientLibHeader(String name, String version) {
      super.setClientLibHeader(name, version);
      return this;
    }

    /**
     * Applies the given settings to all of the API methods in this service. Only
     * values that are non-null will be applied, so this method is not capable
     * of un-setting any values.
     */
    public Builder applyToAllApiMethods(ApiCallSettings.Builder apiCallSettings) throws Exception {
      super.applyToAllApiMethods(methodSettingsBuilders, apiCallSettings);
      return this;
    }

    /**
     * Returns the builder for the settings used for calls to createShelf.
     */
    public SimpleCallSettings.Builder<CreateShelfRequest, Shelf> createShelfSettings() {
      return createShelfSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getShelf.
     */
    public SimpleCallSettings.Builder<GetShelfRequest, Shelf> getShelfSettings() {
      return getShelfSettings;
    }

    /**
     * Returns the builder for the settings used for calls to listShelves.
     */
    public PageStreamingCallSettings.Builder<ListShelvesRequest, ListShelvesResponse, Shelf>
        listShelvesSettings() {
      return listShelvesSettings;
    }

    /**
     * Returns the builder for the settings used for calls to deleteShelf.
     */
    public SimpleCallSettings.Builder<DeleteShelfRequest, Empty> deleteShelfSettings() {
      return deleteShelfSettings;
    }

    /**
     * Returns the builder for the settings used for calls to mergeShelves.
     */
    public SimpleCallSettings.Builder<MergeShelvesRequest, Shelf> mergeShelvesSettings() {
      return mergeShelvesSettings;
    }

    /**
     * Returns the builder for the settings used for calls to createBook.
     */
    public SimpleCallSettings.Builder<CreateBookRequest, Book> createBookSettings() {
      return createBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to publishSeries.
     */
    public BundlingCallSettings.Builder<PublishSeriesRequest, PublishSeriesResponse> publishSeriesSettings() {
      return publishSeriesSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getBook.
     */
    public SimpleCallSettings.Builder<GetBookRequest, Book> getBookSettings() {
      return getBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to listBooks.
     */
    public PageStreamingCallSettings.Builder<ListBooksRequest, ListBooksResponse, Book>
        listBooksSettings() {
      return listBooksSettings;
    }

    /**
     * Returns the builder for the settings used for calls to deleteBook.
     */
    public SimpleCallSettings.Builder<DeleteBookRequest, Empty> deleteBookSettings() {
      return deleteBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to updateBook.
     */
    public SimpleCallSettings.Builder<UpdateBookRequest, Book> updateBookSettings() {
      return updateBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to moveBook.
     */
    public SimpleCallSettings.Builder<MoveBookRequest, Book> moveBookSettings() {
      return moveBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to listStrings.
     */
    public PageStreamingCallSettings.Builder<ListStringsRequest, ListStringsResponse, String>
        listStringsSettings() {
      return listStringsSettings;
    }

    /**
     * Returns the builder for the settings used for calls to addComments.
     */
    public SimpleCallSettings.Builder<AddCommentsRequest, Empty> addCommentsSettings() {
      return addCommentsSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getBookFromArchive.
     */
    public SimpleCallSettings.Builder<GetBookFromArchiveRequest, Book> getBookFromArchiveSettings() {
      return getBookFromArchiveSettings;
    }

    /**
     * Returns the builder for the settings used for calls to updateBookIndex.
     */
    public SimpleCallSettings.Builder<UpdateBookIndexRequest, Empty> updateBookIndexSettings() {
      return updateBookIndexSettings;
    }

    @Override
    public LibraryServiceSettings build() throws IOException {
      return new LibraryServiceSettings(this);
    }
  }
}
