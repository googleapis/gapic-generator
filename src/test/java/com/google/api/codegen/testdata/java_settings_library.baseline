============== file: src/main/java/com/google/gcloud/pubsub/v1/LibrarySettings.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.gcloud.pubsub.v1;

import com.google.api.core.ApiFuture;
import com.google.api.core.BetaApi;
import com.google.api.gax.batching.BatchingSettings;
import com.google.api.gax.batching.FlowControlSettings;
import com.google.api.gax.batching.FlowController;
import com.google.api.gax.batching.FlowController.LimitExceededBehavior;
import com.google.api.gax.batching.PartitionKey;
import com.google.api.gax.batching.RequestBuilder;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.GoogleCredentialsProvider;
import com.google.api.gax.core.PropertiesProvider;
import com.google.api.gax.grpc.ApiExceptions;
import com.google.api.gax.grpc.BatchedRequestIssuer;
import com.google.api.gax.grpc.BatchingCallSettings;
import com.google.api.gax.grpc.BatchingDescriptor;
import com.google.api.gax.grpc.CallContext;
import com.google.api.gax.grpc.ChannelProvider;
import com.google.api.gax.grpc.ClientSettings;
import com.google.api.gax.grpc.ExecutorProvider;
import com.google.api.gax.grpc.InstantiatingChannelProvider;
import com.google.api.gax.grpc.InstantiatingExecutorProvider;
import com.google.api.gax.grpc.OperationCallSettings;
import com.google.api.gax.grpc.PageContext;
import com.google.api.gax.grpc.PagedCallSettings;
import com.google.api.gax.grpc.PagedListDescriptor;
import com.google.api.gax.grpc.PagedListResponseFactory;
import com.google.api.gax.grpc.RequestIssuer;
import com.google.api.gax.grpc.SimpleCallSettings;
import com.google.api.gax.grpc.StreamingCallSettings;
import com.google.api.gax.grpc.UnaryCallSettings;
import com.google.api.gax.grpc.UnaryCallable;
import com.google.api.gax.retrying.RetrySettings;
import com.google.auth.Credentials;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.google.example.library.v1.AddCommentsRequest;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookFromAnywhere;
import com.google.example.library.v1.BookFromArchive;
import com.google.example.library.v1.Comment;
import com.google.example.library.v1.CreateBookRequest;
import com.google.example.library.v1.CreateShelfRequest;
import com.google.example.library.v1.DeleteBookRequest;
import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.DiscussBookRequest;
import com.google.example.library.v1.FindRelatedBooksRequest;
import com.google.example.library.v1.FindRelatedBooksResponse;
import com.google.example.library.v1.GetBookFromAnywhereRequest;
import com.google.example.library.v1.GetBookFromArchiveRequest;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.GetShelfRequest;
import com.google.example.library.v1.LibraryServiceGrpc;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.ListStringsRequest;
import com.google.example.library.v1.ListStringsResponse;
import com.google.example.library.v1.MergeShelvesRequest;
import com.google.example.library.v1.MoveBookRequest;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.Shelf;
import com.google.example.library.v1.StreamBooksRequest;
import com.google.example.library.v1.StreamShelvesRequest;
import com.google.example.library.v1.StreamShelvesResponse;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsResponse;
import com.google.example.library.v1.UpdateBookIndexRequest;
import com.google.example.library.v1.UpdateBookRequest;
import static com.google.gcloud.pubsub.v1.PagedResponseWrappers.FindRelatedBooksPagedResponse;
import static com.google.gcloud.pubsub.v1.PagedResponseWrappers.ListBooksPagedResponse;
import static com.google.gcloud.pubsub.v1.PagedResponseWrappers.ListShelvesPagedResponse;
import static com.google.gcloud.pubsub.v1.PagedResponseWrappers.ListStringsPagedResponse;
import com.google.longrunning.Operation;
import com.google.protobuf.Empty;
import com.google.tagger.v1.AddLabelRequest;
import com.google.tagger.v1.AddLabelResponse;
import com.google.tagger.v1.AddTagRequest;
import com.google.tagger.v1.AddTagResponse;
import com.google.tagger.v1.LabelerGrpc;
import io.grpc.ManagedChannel;
import io.grpc.Status;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.ScheduledExecutorService;
import javax.annotation.Generated;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * Settings class to configure an instance of {@link LibraryClient}.
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 * <li>The default service address (library-example.googleapis.com) and default port (443)
 * are used.
 * <li>Credentials are acquired automatically through Application Default Credentials.
 * <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 *
 * <p>The builder of this class is recursive, so contained classes are themselves builders.
 * When build() is called, the tree of builders is called to create the complete settings
 * object. For example, to set the total timeout of createShelf to 30 seconds:
 *
 * <pre>
 * <code>
 * LibrarySettings.Builder librarySettingsBuilder =
 *     LibrarySettings.defaultBuilder();
 * librarySettingsBuilder.createShelfSettings().getRetrySettingsBuilder()
 *     .setTotalTimeout(Duration.ofSeconds(30));
 * LibrarySettings librarySettings = librarySettingsBuilder.build();
 * </code>
 * </pre>
 */
@Generated("by GAPIC v0.0.5")
public class LibrarySettings extends ClientSettings {
  /**
   * The default scopes of the service.
   */
  private static final ImmutableList<String> DEFAULT_SERVICE_SCOPES = ImmutableList.<String>builder()
      .add("https://www.googleapis.com/auth/cloud-platform")
      .add("https://www.googleapis.com/auth/library")
      .build();

  private static final String DEFAULT_GAPIC_NAME = "gapic";
  private static final String DEFAULT_GAPIC_VERSION = "";

  private static final String PROPERTIES_FILE = "/com/google/gcloud/pubsub/project.properties";
  private static final String META_VERSION_KEY = "artifact.version";

  private static String gapicVersion;

  private static final io.grpc.MethodDescriptor<CreateShelfRequest, Shelf> METHOD_CREATE_SHELF =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.UNARY,
            "google.example.library.v1.LibraryService/CreateShelf",
            io.grpc.protobuf.ProtoUtils.marshaller(CreateShelfRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(Shelf.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<GetShelfRequest, Shelf> METHOD_GET_SHELF =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.UNARY,
            "google.example.library.v1.LibraryService/GetShelf",
            io.grpc.protobuf.ProtoUtils.marshaller(GetShelfRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(Shelf.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<ListShelvesRequest, ListShelvesResponse> METHOD_LIST_SHELVES =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.UNARY,
            "google.example.library.v1.LibraryService/ListShelves",
            io.grpc.protobuf.ProtoUtils.marshaller(ListShelvesRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(ListShelvesResponse.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<DeleteShelfRequest, Empty> METHOD_DELETE_SHELF =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.UNARY,
            "google.example.library.v1.LibraryService/DeleteShelf",
            io.grpc.protobuf.ProtoUtils.marshaller(DeleteShelfRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(Empty.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<MergeShelvesRequest, Shelf> METHOD_MERGE_SHELVES =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.UNARY,
            "google.example.library.v1.LibraryService/MergeShelves",
            io.grpc.protobuf.ProtoUtils.marshaller(MergeShelvesRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(Shelf.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<CreateBookRequest, Book> METHOD_CREATE_BOOK =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.UNARY,
            "google.example.library.v1.LibraryService/CreateBook",
            io.grpc.protobuf.ProtoUtils.marshaller(CreateBookRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(Book.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<PublishSeriesRequest, PublishSeriesResponse> METHOD_PUBLISH_SERIES =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.UNARY,
            "google.example.library.v1.LibraryService/PublishSeries",
            io.grpc.protobuf.ProtoUtils.marshaller(PublishSeriesRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(PublishSeriesResponse.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<GetBookRequest, Book> METHOD_GET_BOOK =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.UNARY,
            "google.example.library.v1.LibraryService/GetBook",
            io.grpc.protobuf.ProtoUtils.marshaller(GetBookRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(Book.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<ListBooksRequest, ListBooksResponse> METHOD_LIST_BOOKS =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.UNARY,
            "google.example.library.v1.LibraryService/ListBooks",
            io.grpc.protobuf.ProtoUtils.marshaller(ListBooksRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(ListBooksResponse.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<DeleteBookRequest, Empty> METHOD_DELETE_BOOK =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.UNARY,
            "google.example.library.v1.LibraryService/DeleteBook",
            io.grpc.protobuf.ProtoUtils.marshaller(DeleteBookRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(Empty.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<UpdateBookRequest, Book> METHOD_UPDATE_BOOK =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.UNARY,
            "google.example.library.v1.LibraryService/UpdateBook",
            io.grpc.protobuf.ProtoUtils.marshaller(UpdateBookRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(Book.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<MoveBookRequest, Book> METHOD_MOVE_BOOK =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.UNARY,
            "google.example.library.v1.LibraryService/MoveBook",
            io.grpc.protobuf.ProtoUtils.marshaller(MoveBookRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(Book.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<ListStringsRequest, ListStringsResponse> METHOD_LIST_STRINGS =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.UNARY,
            "google.example.library.v1.LibraryService/ListStrings",
            io.grpc.protobuf.ProtoUtils.marshaller(ListStringsRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(ListStringsResponse.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<AddCommentsRequest, Empty> METHOD_ADD_COMMENTS =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.UNARY,
            "google.example.library.v1.LibraryService/AddComments",
            io.grpc.protobuf.ProtoUtils.marshaller(AddCommentsRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(Empty.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<GetBookFromArchiveRequest, BookFromArchive> METHOD_GET_BOOK_FROM_ARCHIVE =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.UNARY,
            "google.example.library.v1.LibraryService/GetBookFromArchive",
            io.grpc.protobuf.ProtoUtils.marshaller(GetBookFromArchiveRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(BookFromArchive.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<GetBookFromAnywhereRequest, BookFromAnywhere> METHOD_GET_BOOK_FROM_ANYWHERE =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.UNARY,
            "google.example.library.v1.LibraryService/GetBookFromAnywhere",
            io.grpc.protobuf.ProtoUtils.marshaller(GetBookFromAnywhereRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(BookFromAnywhere.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<UpdateBookIndexRequest, Empty> METHOD_UPDATE_BOOK_INDEX =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.UNARY,
            "google.example.library.v1.LibraryService/UpdateBookIndex",
            io.grpc.protobuf.ProtoUtils.marshaller(UpdateBookIndexRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(Empty.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<StreamShelvesRequest, StreamShelvesResponse> METHOD_STREAM_SHELVES =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING,
            "google.example.library.v1.LibraryService/StreamShelves",
            io.grpc.protobuf.ProtoUtils.marshaller(StreamShelvesRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(StreamShelvesResponse.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<StreamBooksRequest, Book> METHOD_STREAM_BOOKS =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING,
            "google.example.library.v1.LibraryService/StreamBooks",
            io.grpc.protobuf.ProtoUtils.marshaller(StreamBooksRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(Book.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<DiscussBookRequest, Comment> METHOD_DISCUSS_BOOK =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.BIDI_STREAMING,
            "google.example.library.v1.LibraryService/DiscussBook",
            io.grpc.protobuf.ProtoUtils.marshaller(DiscussBookRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(Comment.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<DiscussBookRequest, Comment> METHOD_MONOLOG_ABOUT_BOOK =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.CLIENT_STREAMING,
            "google.example.library.v1.LibraryService/MonologAboutBook",
            io.grpc.protobuf.ProtoUtils.marshaller(DiscussBookRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(Comment.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<FindRelatedBooksRequest, FindRelatedBooksResponse> METHOD_FIND_RELATED_BOOKS =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.UNARY,
            "google.example.library.v1.LibraryService/FindRelatedBooks",
            io.grpc.protobuf.ProtoUtils.marshaller(FindRelatedBooksRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(FindRelatedBooksResponse.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<AddTagRequest, AddTagResponse> METHOD_ADD_TAG =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.UNARY,
            "google.example.library.v1.LibraryService/AddTag",
            io.grpc.protobuf.ProtoUtils.marshaller(AddTagRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(AddTagResponse.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<AddLabelRequest, AddLabelResponse> METHOD_ADD_LABEL =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.UNARY,
            "google.tagger.v1.Labeler/AddLabel",
            io.grpc.protobuf.ProtoUtils.marshaller(AddLabelRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(AddLabelResponse.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<GetBookRequest, Operation> METHOD_GET_BIG_BOOK =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.UNARY,
            "google.example.library.v1.LibraryService/GetBigBook",
            io.grpc.protobuf.ProtoUtils.marshaller(GetBookRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(Operation.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<GetBookRequest, Operation> METHOD_GET_BIG_NOTHING =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.UNARY,
            "google.example.library.v1.LibraryService/GetBigNothing",
            io.grpc.protobuf.ProtoUtils.marshaller(GetBookRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(Operation.getDefaultInstance()));
  private static final io.grpc.MethodDescriptor<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> METHOD_TEST_OPTIONAL_REQUIRED_FLATTENING_PARAMS =
        io.grpc.MethodDescriptor.create(
            io.grpc.MethodDescriptor.MethodType.UNARY,
            "google.example.library.v1.LibraryService/TestOptionalRequiredFlatteningParams",
            io.grpc.protobuf.ProtoUtils.marshaller(TestOptionalRequiredFlatteningParamsRequest.getDefaultInstance()),
            io.grpc.protobuf.ProtoUtils.marshaller(TestOptionalRequiredFlatteningParamsResponse.getDefaultInstance()));

  private final SimpleCallSettings<CreateShelfRequest, Shelf> createShelfSettings;
  private final SimpleCallSettings<GetShelfRequest, Shelf> getShelfSettings;
  private final PagedCallSettings<ListShelvesRequest, ListShelvesResponse, ListShelvesPagedResponse> listShelvesSettings;
  private final SimpleCallSettings<DeleteShelfRequest, Empty> deleteShelfSettings;
  private final SimpleCallSettings<MergeShelvesRequest, Shelf> mergeShelvesSettings;
  private final SimpleCallSettings<CreateBookRequest, Book> createBookSettings;
  private final BatchingCallSettings<PublishSeriesRequest, PublishSeriesResponse> publishSeriesSettings;
  private final SimpleCallSettings<GetBookRequest, Book> getBookSettings;
  private final PagedCallSettings<ListBooksRequest, ListBooksResponse, ListBooksPagedResponse> listBooksSettings;
  private final SimpleCallSettings<DeleteBookRequest, Empty> deleteBookSettings;
  private final SimpleCallSettings<UpdateBookRequest, Book> updateBookSettings;
  private final SimpleCallSettings<MoveBookRequest, Book> moveBookSettings;
  private final PagedCallSettings<ListStringsRequest, ListStringsResponse, ListStringsPagedResponse> listStringsSettings;
  private final BatchingCallSettings<AddCommentsRequest, Empty> addCommentsSettings;
  private final SimpleCallSettings<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveSettings;
  private final SimpleCallSettings<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereSettings;
  private final SimpleCallSettings<UpdateBookIndexRequest, Empty> updateBookIndexSettings;
  private final StreamingCallSettings<StreamShelvesRequest, StreamShelvesResponse> streamShelvesSettings;
  private final StreamingCallSettings<StreamBooksRequest, Book> streamBooksSettings;
  private final StreamingCallSettings<DiscussBookRequest, Comment> discussBookSettings;
  private final StreamingCallSettings<DiscussBookRequest, Comment> monologAboutBookSettings;
  private final PagedCallSettings<FindRelatedBooksRequest, FindRelatedBooksResponse, FindRelatedBooksPagedResponse> findRelatedBooksSettings;
  private final SimpleCallSettings<AddTagRequest, AddTagResponse> addTagSettings;
  private final SimpleCallSettings<AddLabelRequest, AddLabelResponse> addLabelSettings;
  private final OperationCallSettings<GetBookRequest, Book> getBigBookSettings;
  private final OperationCallSettings<GetBookRequest, Empty> getBigNothingSettings;
  private final SimpleCallSettings<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsSettings;

  /**
   * Returns the object with the settings used for calls to createShelf.
   */
  public SimpleCallSettings<CreateShelfRequest, Shelf> createShelfSettings() {
    return createShelfSettings;
  }

  /**
   * Returns the object with the settings used for calls to getShelf.
   */
  public SimpleCallSettings<GetShelfRequest, Shelf> getShelfSettings() {
    return getShelfSettings;
  }

  /**
   * Returns the object with the settings used for calls to listShelves.
   */
  public PagedCallSettings<ListShelvesRequest, ListShelvesResponse, ListShelvesPagedResponse> listShelvesSettings() {
    return listShelvesSettings;
  }

  /**
   * Returns the object with the settings used for calls to deleteShelf.
   */
  public SimpleCallSettings<DeleteShelfRequest, Empty> deleteShelfSettings() {
    return deleteShelfSettings;
  }

  /**
   * Returns the object with the settings used for calls to mergeShelves.
   */
  public SimpleCallSettings<MergeShelvesRequest, Shelf> mergeShelvesSettings() {
    return mergeShelvesSettings;
  }

  /**
   * Returns the object with the settings used for calls to createBook.
   */
  public SimpleCallSettings<CreateBookRequest, Book> createBookSettings() {
    return createBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to publishSeries.
   */
  public BatchingCallSettings<PublishSeriesRequest, PublishSeriesResponse> publishSeriesSettings() {
    return publishSeriesSettings;
  }

  /**
   * Returns the object with the settings used for calls to getBook.
   */
  public SimpleCallSettings<GetBookRequest, Book> getBookSettings() {
    return getBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to listBooks.
   */
  public PagedCallSettings<ListBooksRequest, ListBooksResponse, ListBooksPagedResponse> listBooksSettings() {
    return listBooksSettings;
  }

  /**
   * Returns the object with the settings used for calls to deleteBook.
   */
  public SimpleCallSettings<DeleteBookRequest, Empty> deleteBookSettings() {
    return deleteBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to updateBook.
   */
  public SimpleCallSettings<UpdateBookRequest, Book> updateBookSettings() {
    return updateBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to moveBook.
   */
  public SimpleCallSettings<MoveBookRequest, Book> moveBookSettings() {
    return moveBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to listStrings.
   */
  public PagedCallSettings<ListStringsRequest, ListStringsResponse, ListStringsPagedResponse> listStringsSettings() {
    return listStringsSettings;
  }

  /**
   * Returns the object with the settings used for calls to addComments.
   */
  public BatchingCallSettings<AddCommentsRequest, Empty> addCommentsSettings() {
    return addCommentsSettings;
  }

  /**
   * Returns the object with the settings used for calls to getBookFromArchive.
   */
  public SimpleCallSettings<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveSettings() {
    return getBookFromArchiveSettings;
  }

  /**
   * Returns the object with the settings used for calls to getBookFromAnywhere.
   */
  public SimpleCallSettings<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereSettings() {
    return getBookFromAnywhereSettings;
  }

  /**
   * Returns the object with the settings used for calls to updateBookIndex.
   */
  public SimpleCallSettings<UpdateBookIndexRequest, Empty> updateBookIndexSettings() {
    return updateBookIndexSettings;
  }

  /**
   * Returns the object with the settings used for calls to streamShelves.
   */
  public StreamingCallSettings<StreamShelvesRequest, StreamShelvesResponse> streamShelvesSettings() {
    return streamShelvesSettings;
  }

  /**
   * Returns the object with the settings used for calls to streamBooks.
   */
  public StreamingCallSettings<StreamBooksRequest, Book> streamBooksSettings() {
    return streamBooksSettings;
  }

  /**
   * Returns the object with the settings used for calls to discussBook.
   */
  public StreamingCallSettings<DiscussBookRequest, Comment> discussBookSettings() {
    return discussBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to monologAboutBook.
   */
  public StreamingCallSettings<DiscussBookRequest, Comment> monologAboutBookSettings() {
    return monologAboutBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to findRelatedBooks.
   */
  public PagedCallSettings<FindRelatedBooksRequest, FindRelatedBooksResponse, FindRelatedBooksPagedResponse> findRelatedBooksSettings() {
    return findRelatedBooksSettings;
  }

  /**
   * Returns the object with the settings used for calls to addTag.
   */
  public SimpleCallSettings<AddTagRequest, AddTagResponse> addTagSettings() {
    return addTagSettings;
  }

  /**
   * Returns the object with the settings used for calls to addLabel.
   */
  public SimpleCallSettings<AddLabelRequest, AddLabelResponse> addLabelSettings() {
    return addLabelSettings;
  }

  /**
   * Returns the object with the settings used for calls to getBigBook.
   */
  public OperationCallSettings<GetBookRequest, Book> getBigBookSettings() {
    return getBigBookSettings;
  }

  /**
   * Returns the object with the settings used for calls to getBigNothing.
   */
  public OperationCallSettings<GetBookRequest, Empty> getBigNothingSettings() {
    return getBigNothingSettings;
  }

  /**
   * Returns the object with the settings used for calls to testOptionalRequiredFlatteningParams.
   */
  public SimpleCallSettings<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsSettings() {
    return testOptionalRequiredFlatteningParamsSettings;
  }


  /**
   * Returns a builder for the default ExecutorProvider for this service.
   */
  public static InstantiatingExecutorProvider.Builder defaultExecutorProviderBuilder() {
    return InstantiatingExecutorProvider.newBuilder();
  }

  /**
   * Returns the default service endpoint.
   */
  public static String getDefaultEndpoint() {
    return "library-example.googleapis.com:443";
  }


  /**
   * Returns the default service scopes.
   */
  public static List<String> getDefaultServiceScopes() {
    return DEFAULT_SERVICE_SCOPES;
  }


  /**
   * Returns a builder for the default credentials for this service.
   */
  public static GoogleCredentialsProvider.Builder defaultCredentialsProviderBuilder() {
    return GoogleCredentialsProvider.newBuilder()
        .setScopesToApply(DEFAULT_SERVICE_SCOPES)
        ;
  }

  /** Returns a builder for the default ChannelProvider for this service. */
  public static InstantiatingChannelProvider.Builder defaultChannelProviderBuilder() {
    return InstantiatingChannelProvider.newBuilder()
        .setEndpoint(getDefaultEndpoint())
        .setGeneratorHeader(DEFAULT_GAPIC_NAME, getGapicVersion());
  }

  private static String getGapicVersion() {
    if (gapicVersion == null) {
      gapicVersion = PropertiesProvider.loadProperty(
          LibrarySettings.class, PROPERTIES_FILE, META_VERSION_KEY);
      gapicVersion = gapicVersion == null ? DEFAULT_GAPIC_VERSION : gapicVersion;
    }
    return gapicVersion;
  }

  /**
   * Returns a builder for this class with recommended defaults.
   */
  public static Builder defaultBuilder() {
    return Builder.createDefault();
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Returns a builder containing all the values of this settings class.
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  private LibrarySettings(Builder settingsBuilder) throws IOException {
    super(settingsBuilder.getExecutorProvider(),
          settingsBuilder.getChannelProvider(),
          settingsBuilder.getCredentialsProvider());

    createShelfSettings = settingsBuilder.createShelfSettings().build();
    getShelfSettings = settingsBuilder.getShelfSettings().build();
    listShelvesSettings = settingsBuilder.listShelvesSettings().build();
    deleteShelfSettings = settingsBuilder.deleteShelfSettings().build();
    mergeShelvesSettings = settingsBuilder.mergeShelvesSettings().build();
    createBookSettings = settingsBuilder.createBookSettings().build();
    publishSeriesSettings = settingsBuilder.publishSeriesSettings().build();
    getBookSettings = settingsBuilder.getBookSettings().build();
    listBooksSettings = settingsBuilder.listBooksSettings().build();
    deleteBookSettings = settingsBuilder.deleteBookSettings().build();
    updateBookSettings = settingsBuilder.updateBookSettings().build();
    moveBookSettings = settingsBuilder.moveBookSettings().build();
    listStringsSettings = settingsBuilder.listStringsSettings().build();
    addCommentsSettings = settingsBuilder.addCommentsSettings().build();
    getBookFromArchiveSettings = settingsBuilder.getBookFromArchiveSettings().build();
    getBookFromAnywhereSettings = settingsBuilder.getBookFromAnywhereSettings().build();
    updateBookIndexSettings = settingsBuilder.updateBookIndexSettings().build();
    streamShelvesSettings = settingsBuilder.streamShelvesSettings().build();
    streamBooksSettings = settingsBuilder.streamBooksSettings().build();
    discussBookSettings = settingsBuilder.discussBookSettings().build();
    monologAboutBookSettings = settingsBuilder.monologAboutBookSettings().build();
    findRelatedBooksSettings = settingsBuilder.findRelatedBooksSettings().build();
    addTagSettings = settingsBuilder.addTagSettings().build();
    addLabelSettings = settingsBuilder.addLabelSettings().build();
    getBigBookSettings = settingsBuilder.getBigBookSettings().build();
    getBigNothingSettings = settingsBuilder.getBigNothingSettings().build();
    testOptionalRequiredFlatteningParamsSettings = settingsBuilder.testOptionalRequiredFlatteningParamsSettings().build();
  }

  private static final PagedListDescriptor<ListShelvesRequest, ListShelvesResponse, Shelf> LIST_SHELVES_PAGE_STR_DESC =
      new PagedListDescriptor<ListShelvesRequest, ListShelvesResponse, Shelf>() {
        @Override
        public String emptyToken() {
          return "";
        }
        @Override
        public ListShelvesRequest injectToken(ListShelvesRequest payload, String token) {
          return ListShelvesRequest
            .newBuilder(payload)
            .setPageToken(token)
            .build();
        }
        @Override
        public ListShelvesRequest injectPageSize(ListShelvesRequest payload, int pageSize) {
          throw new UnsupportedOperationException("page size is not supported by this API method");
        }
        @Override
        public Integer extractPageSize(ListShelvesRequest payload) {
          throw new UnsupportedOperationException("page size is not supported by this API method");
        }
        @Override
        public String extractNextToken(ListShelvesResponse payload) {
          return payload.getNextPageToken();
        }
        @Override
        public Iterable<Shelf> extractResources(ListShelvesResponse payload) {
          return payload.getShelvesList();
        }
      };

  private static final PagedListDescriptor<ListBooksRequest, ListBooksResponse, Book> LIST_BOOKS_PAGE_STR_DESC =
      new PagedListDescriptor<ListBooksRequest, ListBooksResponse, Book>() {
        @Override
        public String emptyToken() {
          return "";
        }
        @Override
        public ListBooksRequest injectToken(ListBooksRequest payload, String token) {
          return ListBooksRequest
            .newBuilder(payload)
            .setPageToken(token)
            .build();
        }
        @Override
        public ListBooksRequest injectPageSize(ListBooksRequest payload, int pageSize) {
          return ListBooksRequest
            .newBuilder(payload)
            .setPageSize(pageSize)
            .build();
        }
        @Override
        public Integer extractPageSize(ListBooksRequest payload) {
          return payload.getPageSize();
        }
        @Override
        public String extractNextToken(ListBooksResponse payload) {
          return payload.getNextPageToken();
        }
        @Override
        public Iterable<Book> extractResources(ListBooksResponse payload) {
          return payload.getBooksList();
        }
      };

  private static final PagedListDescriptor<ListStringsRequest, ListStringsResponse, String> LIST_STRINGS_PAGE_STR_DESC =
      new PagedListDescriptor<ListStringsRequest, ListStringsResponse, String>() {
        @Override
        public String emptyToken() {
          return "";
        }
        @Override
        public ListStringsRequest injectToken(ListStringsRequest payload, String token) {
          return ListStringsRequest
            .newBuilder(payload)
            .setPageToken(token)
            .build();
        }
        @Override
        public ListStringsRequest injectPageSize(ListStringsRequest payload, int pageSize) {
          return ListStringsRequest
            .newBuilder(payload)
            .setPageSize(pageSize)
            .build();
        }
        @Override
        public Integer extractPageSize(ListStringsRequest payload) {
          return payload.getPageSize();
        }
        @Override
        public String extractNextToken(ListStringsResponse payload) {
          return payload.getNextPageToken();
        }
        @Override
        public Iterable<String> extractResources(ListStringsResponse payload) {
          return payload.getStringsList();
        }
      };

  private static final PagedListDescriptor<FindRelatedBooksRequest, FindRelatedBooksResponse, String> FIND_RELATED_BOOKS_PAGE_STR_DESC =
      new PagedListDescriptor<FindRelatedBooksRequest, FindRelatedBooksResponse, String>() {
        @Override
        public String emptyToken() {
          return "";
        }
        @Override
        public FindRelatedBooksRequest injectToken(FindRelatedBooksRequest payload, String token) {
          return FindRelatedBooksRequest
            .newBuilder(payload)
            .setPageToken(token)
            .build();
        }
        @Override
        public FindRelatedBooksRequest injectPageSize(FindRelatedBooksRequest payload, int pageSize) {
          return FindRelatedBooksRequest
            .newBuilder(payload)
            .setPageSize(pageSize)
            .build();
        }
        @Override
        public Integer extractPageSize(FindRelatedBooksRequest payload) {
          return payload.getPageSize();
        }
        @Override
        public String extractNextToken(FindRelatedBooksResponse payload) {
          return payload.getNextPageToken();
        }
        @Override
        public Iterable<String> extractResources(FindRelatedBooksResponse payload) {
          return payload.getNamesList();
        }
      };

  private static final PagedListResponseFactory<ListShelvesRequest, ListShelvesResponse, ListShelvesPagedResponse> LIST_SHELVES_PAGE_STR_FACT =
      new PagedListResponseFactory<ListShelvesRequest, ListShelvesResponse, ListShelvesPagedResponse>() {
        @Override
        public ApiFuture<ListShelvesPagedResponse> getFuturePagedResponse(
            UnaryCallable<ListShelvesRequest, ListShelvesResponse> callable,
            ListShelvesRequest request,
            CallContext context,
            ApiFuture<ListShelvesResponse> futureResponse) {
          PageContext<ListShelvesRequest, ListShelvesResponse, Shelf> pageContext =
              PageContext.create(callable, LIST_SHELVES_PAGE_STR_DESC, request, context);
          return ListShelvesPagedResponse.createAsync(pageContext, futureResponse);
        }
      };

  private static final PagedListResponseFactory<ListBooksRequest, ListBooksResponse, ListBooksPagedResponse> LIST_BOOKS_PAGE_STR_FACT =
      new PagedListResponseFactory<ListBooksRequest, ListBooksResponse, ListBooksPagedResponse>() {
        @Override
        public ApiFuture<ListBooksPagedResponse> getFuturePagedResponse(
            UnaryCallable<ListBooksRequest, ListBooksResponse> callable,
            ListBooksRequest request,
            CallContext context,
            ApiFuture<ListBooksResponse> futureResponse) {
          PageContext<ListBooksRequest, ListBooksResponse, Book> pageContext =
              PageContext.create(callable, LIST_BOOKS_PAGE_STR_DESC, request, context);
          return ListBooksPagedResponse.createAsync(pageContext, futureResponse);
        }
      };

  private static final PagedListResponseFactory<ListStringsRequest, ListStringsResponse, ListStringsPagedResponse> LIST_STRINGS_PAGE_STR_FACT =
      new PagedListResponseFactory<ListStringsRequest, ListStringsResponse, ListStringsPagedResponse>() {
        @Override
        public ApiFuture<ListStringsPagedResponse> getFuturePagedResponse(
            UnaryCallable<ListStringsRequest, ListStringsResponse> callable,
            ListStringsRequest request,
            CallContext context,
            ApiFuture<ListStringsResponse> futureResponse) {
          PageContext<ListStringsRequest, ListStringsResponse, String> pageContext =
              PageContext.create(callable, LIST_STRINGS_PAGE_STR_DESC, request, context);
          return ListStringsPagedResponse.createAsync(pageContext, futureResponse);
        }
      };

  private static final PagedListResponseFactory<FindRelatedBooksRequest, FindRelatedBooksResponse, FindRelatedBooksPagedResponse> FIND_RELATED_BOOKS_PAGE_STR_FACT =
      new PagedListResponseFactory<FindRelatedBooksRequest, FindRelatedBooksResponse, FindRelatedBooksPagedResponse>() {
        @Override
        public ApiFuture<FindRelatedBooksPagedResponse> getFuturePagedResponse(
            UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksResponse> callable,
            FindRelatedBooksRequest request,
            CallContext context,
            ApiFuture<FindRelatedBooksResponse> futureResponse) {
          PageContext<FindRelatedBooksRequest, FindRelatedBooksResponse, String> pageContext =
              PageContext.create(callable, FIND_RELATED_BOOKS_PAGE_STR_DESC, request, context);
          return FindRelatedBooksPagedResponse.createAsync(pageContext, futureResponse);
        }
      };

  private static final BatchingDescriptor<PublishSeriesRequest, PublishSeriesResponse> PUBLISH_SERIES_BATCHING_DESC =
      new BatchingDescriptor<PublishSeriesRequest, PublishSeriesResponse>() {
        @Override
        public PartitionKey getBatchPartitionKey(PublishSeriesRequest request) {
          return new PartitionKey(request.getEdition(), request.getName());
        }

        @Override
        public RequestBuilder<PublishSeriesRequest> getRequestBuilder() {
          return new RequestBuilder<PublishSeriesRequest>() {
            private PublishSeriesRequest.Builder builder;
            @Override
            public void appendRequest(PublishSeriesRequest request) {
              if (builder == null) {
                builder = request.toBuilder();
              } else {
                builder.addAllBooks(request.getBooksList());
              }
            }
            @Override
            public PublishSeriesRequest build() {
              return builder.build();
            }
          };
        }

        @Override
        public void splitResponse(
            PublishSeriesResponse batchResponse,
            Collection<? extends BatchedRequestIssuer<PublishSeriesResponse>> batch) {
          int batchMessageIndex = 0;
          for (BatchedRequestIssuer<PublishSeriesResponse> responder : batch) {
            List<String> subresponseElements = new ArrayList<>();
            long subresponseCount = responder.getMessageCount();
            for (int i = 0; i < subresponseCount; i++) {
              subresponseElements.add(batchResponse.getBookNames(batchMessageIndex));
              batchMessageIndex += 1;
            }
            PublishSeriesResponse response =
                PublishSeriesResponse.newBuilder().addAllBookNames(subresponseElements).build();
            responder.setResponse(response);
          }
        }

        @Override
        public void splitException(
            Throwable throwable,
            Collection<? extends BatchedRequestIssuer<PublishSeriesResponse>> batch) {
          for (BatchedRequestIssuer<PublishSeriesResponse> responder : batch) {
            responder.setException(throwable);
          }
        }

        @Override
        public long countElements(PublishSeriesRequest request) {
          return request.getBooksCount();
        }

        @Override
        public long countBytes(PublishSeriesRequest request) {
          return request.getSerializedSize();
        }
      };

  private static final BatchingDescriptor<AddCommentsRequest, Empty> ADD_COMMENTS_BATCHING_DESC =
      new BatchingDescriptor<AddCommentsRequest, Empty>() {
        @Override
        public PartitionKey getBatchPartitionKey(AddCommentsRequest request) {
          return new PartitionKey(request.getName());
        }

        @Override
        public RequestBuilder<AddCommentsRequest> getRequestBuilder() {
          return new RequestBuilder<AddCommentsRequest>() {
            private AddCommentsRequest.Builder builder;
            @Override
            public void appendRequest(AddCommentsRequest request) {
              if (builder == null) {
                builder = request.toBuilder();
              } else {
                builder.addAllComments(request.getCommentsList());
              }
            }
            @Override
            public AddCommentsRequest build() {
              return builder.build();
            }
          };
        }

        @Override
        public void splitResponse(
            Empty batchResponse,
            Collection<? extends BatchedRequestIssuer<Empty>> batch) {
          int batchMessageIndex = 0;
          for (BatchedRequestIssuer<Empty> responder : batch) {
            Empty response =
                Empty.newBuilder().build();
            responder.setResponse(response);
          }
        }

        @Override
        public void splitException(
            Throwable throwable,
            Collection<? extends BatchedRequestIssuer<Empty>> batch) {
          for (BatchedRequestIssuer<Empty> responder : batch) {
            responder.setException(throwable);
          }
        }

        @Override
        public long countElements(AddCommentsRequest request) {
          return request.getCommentsCount();
        }

        @Override
        public long countBytes(AddCommentsRequest request) {
          return request.getSerializedSize();
        }
      };

  /**
   * Builder for LibrarySettings.
   */
  public static class Builder extends ClientSettings.Builder {
    private final ImmutableList<UnaryCallSettings.Builder> unaryMethodSettingsBuilders;

    private final SimpleCallSettings.Builder<CreateShelfRequest, Shelf> createShelfSettings;
    private final SimpleCallSettings.Builder<GetShelfRequest, Shelf> getShelfSettings;
    private final PagedCallSettings.Builder<ListShelvesRequest, ListShelvesResponse, ListShelvesPagedResponse> listShelvesSettings;
    private final SimpleCallSettings.Builder<DeleteShelfRequest, Empty> deleteShelfSettings;
    private final SimpleCallSettings.Builder<MergeShelvesRequest, Shelf> mergeShelvesSettings;
    private final SimpleCallSettings.Builder<CreateBookRequest, Book> createBookSettings;
    private final BatchingCallSettings.Builder<PublishSeriesRequest, PublishSeriesResponse> publishSeriesSettings;
    private final SimpleCallSettings.Builder<GetBookRequest, Book> getBookSettings;
    private final PagedCallSettings.Builder<ListBooksRequest, ListBooksResponse, ListBooksPagedResponse> listBooksSettings;
    private final SimpleCallSettings.Builder<DeleteBookRequest, Empty> deleteBookSettings;
    private final SimpleCallSettings.Builder<UpdateBookRequest, Book> updateBookSettings;
    private final SimpleCallSettings.Builder<MoveBookRequest, Book> moveBookSettings;
    private final PagedCallSettings.Builder<ListStringsRequest, ListStringsResponse, ListStringsPagedResponse> listStringsSettings;
    private final BatchingCallSettings.Builder<AddCommentsRequest, Empty> addCommentsSettings;
    private final SimpleCallSettings.Builder<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveSettings;
    private final SimpleCallSettings.Builder<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereSettings;
    private final SimpleCallSettings.Builder<UpdateBookIndexRequest, Empty> updateBookIndexSettings;
    private final StreamingCallSettings.Builder<StreamShelvesRequest, StreamShelvesResponse> streamShelvesSettings;
    private final StreamingCallSettings.Builder<StreamBooksRequest, Book> streamBooksSettings;
    private final StreamingCallSettings.Builder<DiscussBookRequest, Comment> discussBookSettings;
    private final StreamingCallSettings.Builder<DiscussBookRequest, Comment> monologAboutBookSettings;
    private final PagedCallSettings.Builder<FindRelatedBooksRequest, FindRelatedBooksResponse, FindRelatedBooksPagedResponse> findRelatedBooksSettings;
    private final SimpleCallSettings.Builder<AddTagRequest, AddTagResponse> addTagSettings;
    private final SimpleCallSettings.Builder<AddLabelRequest, AddLabelResponse> addLabelSettings;
    private final OperationCallSettings.Builder<GetBookRequest, Book> getBigBookSettings;
    private final OperationCallSettings.Builder<GetBookRequest, Empty> getBigNothingSettings;
    private final SimpleCallSettings.Builder<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsSettings;

    private static final ImmutableMap<String, ImmutableSet<Status.Code>> RETRYABLE_CODE_DEFINITIONS;

    static {
      ImmutableMap.Builder<String, ImmutableSet<Status.Code>> definitions = ImmutableMap.builder();
      definitions.put(
          "idempotent",
          Sets.immutableEnumSet(Lists.<Status.Code>newArrayList(Status.Code.DEADLINE_EXCEEDED, Status.Code.UNAVAILABLE)));
      definitions.put(
          "non_idempotent",
          Sets.immutableEnumSet(Lists.<Status.Code>newArrayList()));
      RETRYABLE_CODE_DEFINITIONS = definitions.build();
    }

    private static final ImmutableMap<String, RetrySettings.Builder> RETRY_PARAM_DEFINITIONS;

    static {
      ImmutableMap.Builder<String, RetrySettings.Builder> definitions = ImmutableMap.builder();
      RetrySettings.Builder settingsBuilder = null;
      settingsBuilder = RetrySettings.newBuilder()
          .setInitialRetryDelay(Duration.ofMillis(100L))
          .setRetryDelayMultiplier(1.2)
          .setMaxRetryDelay(Duration.ofMillis(1000L))
          .setInitialRpcTimeout(Duration.ofMillis(300L))
          .setRpcTimeoutMultiplier(1.3)
          .setMaxRpcTimeout(Duration.ofMillis(3000L))
          .setTotalTimeout(Duration.ofMillis(30000L));
      definitions.put("default", settingsBuilder);
      RETRY_PARAM_DEFINITIONS = definitions.build();
    }

    private Builder() {
      super(defaultChannelProviderBuilder().build());
      setCredentialsProvider(defaultCredentialsProviderBuilder().build());

      createShelfSettings = SimpleCallSettings.newBuilder(METHOD_CREATE_SHELF);

      getShelfSettings = SimpleCallSettings.newBuilder(METHOD_GET_SHELF);

      listShelvesSettings = PagedCallSettings.newBuilder(
          METHOD_LIST_SHELVES,
          LIST_SHELVES_PAGE_STR_FACT);

      deleteShelfSettings = SimpleCallSettings.newBuilder(METHOD_DELETE_SHELF);

      mergeShelvesSettings = SimpleCallSettings.newBuilder(METHOD_MERGE_SHELVES);

      createBookSettings = SimpleCallSettings.newBuilder(METHOD_CREATE_BOOK);

      publishSeriesSettings = BatchingCallSettings.newBuilder(
          METHOD_PUBLISH_SERIES,
          PUBLISH_SERIES_BATCHING_DESC)
              .setBatchingSettingsBuilder(BatchingSettings.newBuilder());

      getBookSettings = SimpleCallSettings.newBuilder(METHOD_GET_BOOK);

      listBooksSettings = PagedCallSettings.newBuilder(
          METHOD_LIST_BOOKS,
          LIST_BOOKS_PAGE_STR_FACT);

      deleteBookSettings = SimpleCallSettings.newBuilder(METHOD_DELETE_BOOK);

      updateBookSettings = SimpleCallSettings.newBuilder(METHOD_UPDATE_BOOK);

      moveBookSettings = SimpleCallSettings.newBuilder(METHOD_MOVE_BOOK);

      listStringsSettings = PagedCallSettings.newBuilder(
          METHOD_LIST_STRINGS,
          LIST_STRINGS_PAGE_STR_FACT);

      addCommentsSettings = BatchingCallSettings.newBuilder(
          METHOD_ADD_COMMENTS,
          ADD_COMMENTS_BATCHING_DESC)
              .setBatchingSettingsBuilder(BatchingSettings.newBuilder());

      getBookFromArchiveSettings = SimpleCallSettings.newBuilder(METHOD_GET_BOOK_FROM_ARCHIVE);

      getBookFromAnywhereSettings = SimpleCallSettings.newBuilder(METHOD_GET_BOOK_FROM_ANYWHERE);

      updateBookIndexSettings = SimpleCallSettings.newBuilder(METHOD_UPDATE_BOOK_INDEX);

      streamShelvesSettings = StreamingCallSettings.newBuilder(METHOD_STREAM_SHELVES);

      streamBooksSettings = StreamingCallSettings.newBuilder(METHOD_STREAM_BOOKS);

      discussBookSettings = StreamingCallSettings.newBuilder(METHOD_DISCUSS_BOOK);

      monologAboutBookSettings = StreamingCallSettings.newBuilder(METHOD_MONOLOG_ABOUT_BOOK);

      findRelatedBooksSettings = PagedCallSettings.newBuilder(
          METHOD_FIND_RELATED_BOOKS,
          FIND_RELATED_BOOKS_PAGE_STR_FACT);

      addTagSettings = SimpleCallSettings.newBuilder(METHOD_ADD_TAG);

      addLabelSettings = SimpleCallSettings.newBuilder(METHOD_ADD_LABEL);

      getBigBookSettings = OperationCallSettings.newBuilder(
          METHOD_GET_BIG_BOOK,
          Book.class);
      getBigBookSettings.setPollingInterval(Duration.ofMillis(300000));


      getBigNothingSettings = OperationCallSettings.newBuilder(
          METHOD_GET_BIG_NOTHING,
          Empty.class);


      testOptionalRequiredFlatteningParamsSettings = SimpleCallSettings.newBuilder(METHOD_TEST_OPTIONAL_REQUIRED_FLATTENING_PARAMS);

      unaryMethodSettingsBuilders = ImmutableList.<UnaryCallSettings.Builder>of(
          createShelfSettings,
          getShelfSettings,
          listShelvesSettings,
          deleteShelfSettings,
          mergeShelvesSettings,
          createBookSettings,
          publishSeriesSettings,
          getBookSettings,
          listBooksSettings,
          deleteBookSettings,
          updateBookSettings,
          moveBookSettings,
          listStringsSettings,
          addCommentsSettings,
          getBookFromArchiveSettings,
          getBookFromAnywhereSettings,
          updateBookIndexSettings,
          findRelatedBooksSettings,
          addTagSettings,
          addLabelSettings,
          testOptionalRequiredFlatteningParamsSettings
      );
    }

    private static Builder createDefault() {
      Builder builder = new Builder();

      builder.createShelfSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.getShelfSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.listShelvesSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.deleteShelfSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.mergeShelvesSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.createBookSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.publishSeriesSettings().getBatchingSettingsBuilder()
          .setElementCountThreshold(6L)
          .setRequestByteThreshold(100000L)
          .setDelayThreshold(Duration.ofMillis(500))
          .setFlowControlSettings(
            FlowControlSettings.newBuilder()
              .setLimitExceededBehavior(LimitExceededBehavior.Ignore)
              .build());
      builder.publishSeriesSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.getBookSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.listBooksSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.deleteBookSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.updateBookSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.moveBookSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.listStringsSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.addCommentsSettings().getBatchingSettingsBuilder()
          .setElementCountThreshold(6L)
          .setRequestByteThreshold(100000L)
          .setDelayThreshold(Duration.ofMillis(500))
          .setFlowControlSettings(
            FlowControlSettings.newBuilder()
              .setLimitExceededBehavior(LimitExceededBehavior.Ignore)
              .build());
      builder.addCommentsSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.getBookFromArchiveSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.getBookFromAnywhereSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.updateBookIndexSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.findRelatedBooksSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.addTagSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.addLabelSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.testOptionalRequiredFlatteningParamsSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));
      builder.getBigBookSettings().getInitialCallSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));
      builder.getBigNothingSettings().getInitialCallSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("non_idempotent"))
          .setRetrySettingsBuilder(RETRY_PARAM_DEFINITIONS.get("default"));

      return builder;
    }

    private Builder(LibrarySettings settings) {
      super(settings);

      createShelfSettings = settings.createShelfSettings.toBuilder();
      getShelfSettings = settings.getShelfSettings.toBuilder();
      listShelvesSettings = settings.listShelvesSettings.toBuilder();
      deleteShelfSettings = settings.deleteShelfSettings.toBuilder();
      mergeShelvesSettings = settings.mergeShelvesSettings.toBuilder();
      createBookSettings = settings.createBookSettings.toBuilder();
      publishSeriesSettings = settings.publishSeriesSettings.toBuilder();
      getBookSettings = settings.getBookSettings.toBuilder();
      listBooksSettings = settings.listBooksSettings.toBuilder();
      deleteBookSettings = settings.deleteBookSettings.toBuilder();
      updateBookSettings = settings.updateBookSettings.toBuilder();
      moveBookSettings = settings.moveBookSettings.toBuilder();
      listStringsSettings = settings.listStringsSettings.toBuilder();
      addCommentsSettings = settings.addCommentsSettings.toBuilder();
      getBookFromArchiveSettings = settings.getBookFromArchiveSettings.toBuilder();
      getBookFromAnywhereSettings = settings.getBookFromAnywhereSettings.toBuilder();
      updateBookIndexSettings = settings.updateBookIndexSettings.toBuilder();
      streamShelvesSettings = settings.streamShelvesSettings.toBuilder();
      streamBooksSettings = settings.streamBooksSettings.toBuilder();
      discussBookSettings = settings.discussBookSettings.toBuilder();
      monologAboutBookSettings = settings.monologAboutBookSettings.toBuilder();
      findRelatedBooksSettings = settings.findRelatedBooksSettings.toBuilder();
      addTagSettings = settings.addTagSettings.toBuilder();
      addLabelSettings = settings.addLabelSettings.toBuilder();
      getBigBookSettings = settings.getBigBookSettings.toBuilder();
      getBigNothingSettings = settings.getBigNothingSettings.toBuilder();
      testOptionalRequiredFlatteningParamsSettings = settings.testOptionalRequiredFlatteningParamsSettings.toBuilder();

      unaryMethodSettingsBuilders = ImmutableList.<UnaryCallSettings.Builder>of(
          createShelfSettings,
          getShelfSettings,
          listShelvesSettings,
          deleteShelfSettings,
          mergeShelvesSettings,
          createBookSettings,
          publishSeriesSettings,
          getBookSettings,
          listBooksSettings,
          deleteBookSettings,
          updateBookSettings,
          moveBookSettings,
          listStringsSettings,
          addCommentsSettings,
          getBookFromArchiveSettings,
          getBookFromAnywhereSettings,
          updateBookIndexSettings,
          findRelatedBooksSettings,
          addTagSettings,
          addLabelSettings,
          testOptionalRequiredFlatteningParamsSettings
      );
    }

    @Override
    public Builder setExecutorProvider(ExecutorProvider executorProvider) {
      super.setExecutorProvider(executorProvider);
      return this;
    }

    @Override
    public Builder setChannelProvider(ChannelProvider channelProvider) {
      super.setChannelProvider(channelProvider);
      return this;
    }

    @Override
    public Builder setCredentialsProvider(CredentialsProvider credentialsProvider) {
      super.setCredentialsProvider(credentialsProvider);
      return this;
    }

    /**
     * Applies the given settings to all of the unary API methods in this service. Only
     * values that are non-null will be applied, so this method is not capable
     * of un-setting any values.
     *
     * Note: This method does not support applying settings to streaming methods.
     */
    public Builder applyToAllUnaryMethods(UnaryCallSettings.Builder unaryCallSettings) throws Exception {
      super.applyToAllUnaryMethods(unaryMethodSettingsBuilders, unaryCallSettings);
      return this;
    }

    /**
     * Returns the builder for the settings used for calls to createShelf.
     */
    public SimpleCallSettings.Builder<CreateShelfRequest, Shelf> createShelfSettings() {
      return createShelfSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getShelf.
     */
    public SimpleCallSettings.Builder<GetShelfRequest, Shelf> getShelfSettings() {
      return getShelfSettings;
    }

    /**
     * Returns the builder for the settings used for calls to listShelves.
     */
    public PagedCallSettings.Builder<ListShelvesRequest, ListShelvesResponse, ListShelvesPagedResponse> listShelvesSettings() {
      return listShelvesSettings;
    }

    /**
     * Returns the builder for the settings used for calls to deleteShelf.
     */
    public SimpleCallSettings.Builder<DeleteShelfRequest, Empty> deleteShelfSettings() {
      return deleteShelfSettings;
    }

    /**
     * Returns the builder for the settings used for calls to mergeShelves.
     */
    public SimpleCallSettings.Builder<MergeShelvesRequest, Shelf> mergeShelvesSettings() {
      return mergeShelvesSettings;
    }

    /**
     * Returns the builder for the settings used for calls to createBook.
     */
    public SimpleCallSettings.Builder<CreateBookRequest, Book> createBookSettings() {
      return createBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to publishSeries.
     */
    public BatchingCallSettings.Builder<PublishSeriesRequest, PublishSeriesResponse> publishSeriesSettings() {
      return publishSeriesSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getBook.
     */
    public SimpleCallSettings.Builder<GetBookRequest, Book> getBookSettings() {
      return getBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to listBooks.
     */
    public PagedCallSettings.Builder<ListBooksRequest, ListBooksResponse, ListBooksPagedResponse> listBooksSettings() {
      return listBooksSettings;
    }

    /**
     * Returns the builder for the settings used for calls to deleteBook.
     */
    public SimpleCallSettings.Builder<DeleteBookRequest, Empty> deleteBookSettings() {
      return deleteBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to updateBook.
     */
    public SimpleCallSettings.Builder<UpdateBookRequest, Book> updateBookSettings() {
      return updateBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to moveBook.
     */
    public SimpleCallSettings.Builder<MoveBookRequest, Book> moveBookSettings() {
      return moveBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to listStrings.
     */
    public PagedCallSettings.Builder<ListStringsRequest, ListStringsResponse, ListStringsPagedResponse> listStringsSettings() {
      return listStringsSettings;
    }

    /**
     * Returns the builder for the settings used for calls to addComments.
     */
    public BatchingCallSettings.Builder<AddCommentsRequest, Empty> addCommentsSettings() {
      return addCommentsSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getBookFromArchive.
     */
    public SimpleCallSettings.Builder<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveSettings() {
      return getBookFromArchiveSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getBookFromAnywhere.
     */
    public SimpleCallSettings.Builder<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereSettings() {
      return getBookFromAnywhereSettings;
    }

    /**
     * Returns the builder for the settings used for calls to updateBookIndex.
     */
    public SimpleCallSettings.Builder<UpdateBookIndexRequest, Empty> updateBookIndexSettings() {
      return updateBookIndexSettings;
    }

    /**
     * Returns the builder for the settings used for calls to streamShelves.
     */
    public StreamingCallSettings.Builder<StreamShelvesRequest, StreamShelvesResponse> streamShelvesSettings() {
      return streamShelvesSettings;
    }

    /**
     * Returns the builder for the settings used for calls to streamBooks.
     */
    public StreamingCallSettings.Builder<StreamBooksRequest, Book> streamBooksSettings() {
      return streamBooksSettings;
    }

    /**
     * Returns the builder for the settings used for calls to discussBook.
     */
    public StreamingCallSettings.Builder<DiscussBookRequest, Comment> discussBookSettings() {
      return discussBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to monologAboutBook.
     */
    public StreamingCallSettings.Builder<DiscussBookRequest, Comment> monologAboutBookSettings() {
      return monologAboutBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to findRelatedBooks.
     */
    public PagedCallSettings.Builder<FindRelatedBooksRequest, FindRelatedBooksResponse, FindRelatedBooksPagedResponse> findRelatedBooksSettings() {
      return findRelatedBooksSettings;
    }

    /**
     * Returns the builder for the settings used for calls to addTag.
     */
    public SimpleCallSettings.Builder<AddTagRequest, AddTagResponse> addTagSettings() {
      return addTagSettings;
    }

    /**
     * Returns the builder for the settings used for calls to addLabel.
     */
    public SimpleCallSettings.Builder<AddLabelRequest, AddLabelResponse> addLabelSettings() {
      return addLabelSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getBigBook.
     */
    public OperationCallSettings.Builder<GetBookRequest, Book> getBigBookSettings() {
      return getBigBookSettings;
    }

    /**
     * Returns the builder for the settings used for calls to getBigNothing.
     */
    public OperationCallSettings.Builder<GetBookRequest, Empty> getBigNothingSettings() {
      return getBigNothingSettings;
    }

    /**
     * Returns the builder for the settings used for calls to testOptionalRequiredFlatteningParams.
     */
    public SimpleCallSettings.Builder<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsSettings() {
      return testOptionalRequiredFlatteningParamsSettings;
    }

    @Override
    public LibrarySettings build() throws IOException {
      return new LibrarySettings(this);
    }
  }
}
