
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/autoscaler/v1beta2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := autoscaler.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Project ID of Autoscaler resource.
    project = ""

    // Zone name of Autoscaler resource.
    zone = ""

    // Name of the Autoscaler resource.
    autoscaler_ = ""
  )

  response, err := client.Autoscalers.Delete(project, zone, autoscaler_).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/autoscaler/v1beta2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := autoscaler.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // Project ID of Autoscaler resource.
    project = ""

    // Zone name of Autoscaler resource.
    zone = ""

    // Name of the Autoscaler resource.
    autoscaler_ = ""
  )

  response, err := client.Autoscalers.Get(project, zone, autoscaler_).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/autoscaler/v1beta2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := autoscaler.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
  var (
    // Project ID of Autoscaler resource.
    project = ""

    // Zone name of Autoscaler resource.
    zone = ""

    requestBody = &autoscaler.Autoscaler{}
  )

  response, err := client.Autoscalers.Insert(project, zone, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/autoscaler/v1beta2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := autoscaler.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Project ID of Autoscaler resource.
    project = ""

    // Zone name of Autoscaler resource.
    zone = ""
  )

  fn := func(page *autoscaler.AutoscalerListResponse) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Autoscalers.List(project, zone).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/autoscaler/v1beta2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := autoscaler.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
  var (
    // Project ID of Autoscaler resource.
    project = ""

    // Zone name of Autoscaler resource.
    zone = ""

    // Name of the Autoscaler resource.
    autoscaler_ = ""

    requestBody = &autoscaler.Autoscaler{}
  )

  response, err := client.Autoscalers.Patch(project, zone, autoscaler_, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/autoscaler/v1beta2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := autoscaler.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'update' method:
  var (
    // Project ID of Autoscaler resource.
    project = ""

    // Zone name of Autoscaler resource.
    zone = ""

    // Name of the Autoscaler resource.
    autoscaler_ = ""

    requestBody = &autoscaler.Autoscaler{}
  )

  response, err := client.Autoscalers.Update(project, zone, autoscaler_, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/autoscaler/v1beta2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := autoscaler.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (

    project = ""


    zone = ""


    operation = ""
  )

  if err = client.ZoneOperations.Delete(project, zone, operation).Context(ctx).Do(); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/autoscaler/v1beta2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := autoscaler.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (

    project = ""


    zone = ""


    operation = ""
  )

  response, err := client.ZoneOperations.Get(project, zone, operation).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/autoscaler/v1beta2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := autoscaler.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (

    project = ""


    zone = ""
  )

  fn := func(page *autoscaler.OperationList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.ZoneOperations.List(project, zone).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/autoscaler/v1beta2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := autoscaler.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (

    project = ""
  )

  fn := func(page *autoscaler.ZoneList) error {
    // doThingsWith(page)
    for i, element := range page.Items {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Zones.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
