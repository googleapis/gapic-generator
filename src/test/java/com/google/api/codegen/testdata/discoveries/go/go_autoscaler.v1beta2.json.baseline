
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := autoscaler.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of Autoscaler resource.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Zone name of Autoscaler resource.
  // TODO: Update placeholder value.
  zone := "{MY-ZONE}"

  // Name of the Autoscaler resource.
  // TODO: Update placeholder value.
  autoscaler2 := "{MY-AUTOSCALER}"

  resp, err := c.Autoscalers.Delete(project, zone, autoscaler2).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := autoscaler.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of Autoscaler resource.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Zone name of Autoscaler resource.
  // TODO: Update placeholder value.
  zone := "{MY-ZONE}"

  // Name of the Autoscaler resource.
  // TODO: Update placeholder value.
  autoscaler2 := "{MY-AUTOSCALER}"

  resp, err := c.Autoscalers.Get(project, zone, autoscaler2).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := autoscaler.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of Autoscaler resource.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Zone name of Autoscaler resource.
  // TODO: Update placeholder value.
  zone := "{MY-ZONE}"

  resp, err := c.Autoscalers.Insert(project, zone, &autoscaler.Autoscaler{
                                      // TODO: Fill required fields.
                                    }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := autoscaler.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of Autoscaler resource.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Zone name of Autoscaler resource.
  // TODO: Update placeholder value.
  zone := "{MY-ZONE}"


  call := c.Autoscalers.List(project, zone)
  if err := call.Pages(ctx, func(page *autoscaler.AutoscalerListResponse) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := autoscaler.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of Autoscaler resource.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Zone name of Autoscaler resource.
  // TODO: Update placeholder value.
  zone := "{MY-ZONE}"

  // Name of the Autoscaler resource.
  // TODO: Update placeholder value.
  autoscaler2 := "{MY-AUTOSCALER}"

  resp, err := c.Autoscalers.Patch(project, zone, autoscaler2, &autoscaler.Autoscaler{
                                     // TODO: Fill required fields.
                                   }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := autoscaler.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of Autoscaler resource.
  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"

  // Zone name of Autoscaler resource.
  // TODO: Update placeholder value.
  zone := "{MY-ZONE}"

  // Name of the Autoscaler resource.
  // TODO: Update placeholder value.
  autoscaler2 := "{MY-AUTOSCALER}"

  resp, err := c.Autoscalers.Update(project, zone, autoscaler2, &autoscaler.Autoscaler{
                                      // TODO: Fill required fields.
                                    }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := autoscaler.New(hc)
  if err != nil {
    // TODO: Handle error.
  }


  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"


  // TODO: Update placeholder value.
  zone := "{MY-ZONE}"  // eg. "us-central1-f"


  // TODO: Update placeholder value.
  operation := "{MY-OPERATION}"

  if err := c.ZoneOperations.Delete(project, zone, operation).Context(ctx).Do(); err != nil {
    // TODO: Handle error.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := autoscaler.New(hc)
  if err != nil {
    // TODO: Handle error.
  }


  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"


  // TODO: Update placeholder value.
  zone := "{MY-ZONE}"  // eg. "us-central1-f"


  // TODO: Update placeholder value.
  operation := "{MY-OPERATION}"

  resp, err := c.ZoneOperations.Get(project, zone, operation).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := autoscaler.New(hc)
  if err != nil {
    // TODO: Handle error.
  }


  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"


  // TODO: Update placeholder value.
  zone := "{MY-ZONE}"  // eg. "us-central1-f"


  call := c.ZoneOperations.List(project, zone)
  if err := call.Pages(ctx, func(page *autoscaler.OperationList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := autoscaler.New(hc)
  if err != nil {
    // TODO: Handle error.
  }


  // TODO: Update placeholder value.
  project := "{MY-PROJECT}"


  call := c.Zones.List(project)
  if err := call.Pages(ctx, func(page *autoscaler.ZoneList) error {
    for _, v := range page.Items {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
