
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := autoscaler.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of Autoscaler resource.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Zone name of Autoscaler resource.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // Name of the Autoscaler resource.
  autoscaler2 := "{MY-AUTOSCALER}" // TODO: Update placeholder value(s).

  resp, err := s.Autoscalers.Delete(project, zone, autoscaler2).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := autoscaler.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of Autoscaler resource.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Zone name of Autoscaler resource.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // Name of the Autoscaler resource.
  autoscaler2 := "{MY-AUTOSCALER}" // TODO: Update placeholder value(s).

  resp, err := s.Autoscalers.Get(project, zone, autoscaler2).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := autoscaler.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of Autoscaler resource.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Zone name of Autoscaler resource.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  resource := &autoscaler.Autoscaler{
    // TODO: Add the desired fields.
  }

  resp, err := s.Autoscalers.Insert(project, zone, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := autoscaler.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of Autoscaler resource.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Zone name of Autoscaler resource.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  call := s.Autoscalers.List(project, zone)
  if err := call.Pages(ctx, func(page *autoscaler.AutoscalerListResponse) error {
    for _, autoscaler := range page.Items {
      // TODO: Use autoscaler
      log.Printf("%#v\n", autoscaler)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := autoscaler.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of Autoscaler resource.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Zone name of Autoscaler resource.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // Name of the Autoscaler resource.
  autoscaler2 := "{MY-AUTOSCALER}" // TODO: Update placeholder value(s).

  resource := &autoscaler.Autoscaler{
    // TODO: Add the desired fields to be changed.
  }

  resp, err := s.Autoscalers.Patch(project, zone, autoscaler2, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := autoscaler.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of Autoscaler resource.
  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  // Zone name of Autoscaler resource.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // Name of the Autoscaler resource.
  autoscaler2 := "{MY-AUTOSCALER}" // TODO: Update placeholder value(s).

  resource := &autoscaler.Autoscaler{
    // TODO: Add the desired fields.
  }

  resp, err := s.Autoscalers.Update(project, zone, autoscaler2, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := autoscaler.New(hc)
  if err != nil {
    log.Fatal(err)
  }


  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).


  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"


  operation := "{MY-OPERATION}" // TODO: Update placeholder value(s).

  if err := s.ZoneOperations.Delete(project, zone, operation).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := autoscaler.New(hc)
  if err != nil {
    log.Fatal(err)
  }


  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).


  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"


  operation := "{MY-OPERATION}" // TODO: Update placeholder value(s).

  resp, err := s.ZoneOperations.Get(project, zone, operation).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := autoscaler.New(hc)
  if err != nil {
    log.Fatal(err)
  }


  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).


  zone := "{MY-ZONE}" // TODO: Update placeholder value(s). eg. "us-central1-f"

  call := s.ZoneOperations.List(project, zone)
  if err := call.Pages(ctx, func(page *autoscaler.OperationList) error {
    for _, operation := range page.Items {
      // TODO: Use operation
      log.Printf("%#v\n", operation)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Compute Engine Autoscaler API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/autoscaler
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/autoscaler/v1beta2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, autoscaler.ComputeScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := autoscaler.New(hc)
  if err != nil {
    log.Fatal(err)
  }


  project := "{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.Zones.List(project)
  if err := call.Pages(ctx, func(page *autoscaler.ZoneList) error {
    for _, zone := range page.Items {
      // TODO: Use zone
      log.Printf("%#v\n", zone)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
