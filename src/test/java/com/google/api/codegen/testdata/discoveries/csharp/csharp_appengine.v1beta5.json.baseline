
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Appengine.v1beta5;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Appengine.v1beta5.Data;

namespace AppengineSample
{
    public class AppengineExample
    {
        public static void Main(string[] args)
        {
            AppengineService appengineService = new AppengineService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AppengineSample/0.1",
            });

            // TODO: Assign values to desired properties of `requestBody`:
            Data.Application requestBody = new Data.Application();

            AppsResource.CreateRequest request = appengineService.Apps.Create(requestBody);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Appengine.v1beta5;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Appengine.v1beta5.Data;

namespace AppengineSample
{
    public class AppengineExample
    {
        public static void Main(string[] args)
        {
            AppengineService appengineService = new AppengineService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AppengineSample/0.1",
            });

            // Part of `name`. Name of the application to get. Example: apps/myapp.
            string appsId = "";  // TODO: Update placeholder value.

            AppsResource.GetRequest request = appengineService.Apps.Get(appsId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Application response = request.Execute();
            // Data.Application response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Appengine.v1beta5;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Appengine.v1beta5.Data;

namespace AppengineSample
{
    public class AppengineExample
    {
        public static void Main(string[] args)
        {
            AppengineService appengineService = new AppengineService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AppengineSample/0.1",
            });

            // Part of `name`. Resource name for the location.
            string appsId = "";  // TODO: Update placeholder value.

            // Part of `name`. See documentation of `appsId`.
            string locationsId = "";  // TODO: Update placeholder value.

            AppsResource.LocationsResource.GetRequest request = appengineService.Apps.Locations.Get(appsId, locationsId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Location response = request.Execute();
            // Data.Location response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Appengine.v1beta5;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Appengine.v1beta5.Data;

namespace AppengineSample
{
    public class AppengineExample
    {
        public static void Main(string[] args)
        {
            AppengineService appengineService = new AppengineService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AppengineSample/0.1",
            });

            // Part of `name`. The resource that owns the locations collection, if applicable.
            string appsId = "";  // TODO: Update placeholder value.

            AppsResource.LocationsResource.ListRequest request = appengineService.Apps.Locations.List(appsId);

            Data.ListLocationsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Locations == null)
                {
                    continue;
                }
                foreach (Data.Location location in response.Locations)
                {
                    // TODO: Change code below to process each `location` resource:
                    Console.WriteLine(JsonConvert.SerializeObject(location));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Appengine.v1beta5;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Appengine.v1beta5.Data;

namespace AppengineSample
{
    public class AppengineExample
    {
        public static void Main(string[] args)
        {
            AppengineService appengineService = new AppengineService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AppengineSample/0.1",
            });

            // Part of `name`. The name of the operation resource.
            string appsId = "";  // TODO: Update placeholder value.

            // Part of `name`. See documentation of `appsId`.
            string operationsId = "";  // TODO: Update placeholder value.

            AppsResource.OperationsResource.GetRequest request = appengineService.Apps.Operations.Get(appsId, operationsId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Appengine.v1beta5;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Appengine.v1beta5.Data;

namespace AppengineSample
{
    public class AppengineExample
    {
        public static void Main(string[] args)
        {
            AppengineService appengineService = new AppengineService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AppengineSample/0.1",
            });

            // Part of `name`. The name of the operation collection.
            string appsId = "";  // TODO: Update placeholder value.

            AppsResource.OperationsResource.ListRequest request = appengineService.Apps.Operations.List(appsId);

            Data.ListOperationsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Operations == null)
                {
                    continue;
                }
                foreach (Data.Operation operation in response.Operations)
                {
                    // TODO: Change code below to process each `operation` resource:
                    Console.WriteLine(JsonConvert.SerializeObject(operation));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Appengine.v1beta5;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Appengine.v1beta5.Data;

namespace AppengineSample
{
    public class AppengineExample
    {
        public static void Main(string[] args)
        {
            AppengineService appengineService = new AppengineService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AppengineSample/0.1",
            });

            // Part of `name`. Name of the Application resource to update. Example: apps/myapp.
            string appsId = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. Only assigned
            // properties will be changed:
            Data.Application requestBody = new Data.Application();

            AppsResource.PatchRequest request = appengineService.Apps.Patch(requestBody, appsId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Appengine.v1beta5;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Appengine.v1beta5.Data;

namespace AppengineSample
{
    public class AppengineExample
    {
        public static void Main(string[] args)
        {
            AppengineService appengineService = new AppengineService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AppengineSample/0.1",
            });

            // Part of `name`. Name of the resource requested. Example: apps/myapp/services/default.
            string appsId = "";  // TODO: Update placeholder value.

            // Part of `name`. See documentation of `appsId`.
            string servicesId = "";  // TODO: Update placeholder value.

            AppsResource.ServicesResource.DeleteRequest request = appengineService.Apps.Services.Delete(appsId, servicesId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Appengine.v1beta5;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Appengine.v1beta5.Data;

namespace AppengineSample
{
    public class AppengineExample
    {
        public static void Main(string[] args)
        {
            AppengineService appengineService = new AppengineService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AppengineSample/0.1",
            });

            // Part of `name`. Name of the resource requested. Example: apps/myapp/services/default.
            string appsId = "";  // TODO: Update placeholder value.

            // Part of `name`. See documentation of `appsId`.
            string servicesId = "";  // TODO: Update placeholder value.

            AppsResource.ServicesResource.GetRequest request = appengineService.Apps.Services.Get(appsId, servicesId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Service response = request.Execute();
            // Data.Service response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Appengine.v1beta5;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Appengine.v1beta5.Data;

namespace AppengineSample
{
    public class AppengineExample
    {
        public static void Main(string[] args)
        {
            AppengineService appengineService = new AppengineService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AppengineSample/0.1",
            });

            // Part of `name`. Name of the resource requested. Example: apps/myapp.
            string appsId = "";  // TODO: Update placeholder value.

            AppsResource.ServicesResource.ListRequest request = appengineService.Apps.Services.List(appsId);

            Data.ListServicesResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Services == null)
                {
                    continue;
                }
                foreach (Data.Service service in response.Services)
                {
                    // TODO: Change code below to process each `service` resource:
                    Console.WriteLine(JsonConvert.SerializeObject(service));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Appengine.v1beta5;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Appengine.v1beta5.Data;

namespace AppengineSample
{
    public class AppengineExample
    {
        public static void Main(string[] args)
        {
            AppengineService appengineService = new AppengineService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AppengineSample/0.1",
            });

            // Part of `name`. Name of the resource to update. Example: apps/myapp/services/default.
            string appsId = "";  // TODO: Update placeholder value.

            // Part of `name`. See documentation of `appsId`.
            string servicesId = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. Only assigned
            // properties will be changed:
            Data.Service requestBody = new Data.Service();

            AppsResource.ServicesResource.PatchRequest request = appengineService.Apps.Services.Patch(requestBody, appsId, servicesId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Appengine.v1beta5;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Appengine.v1beta5.Data;

namespace AppengineSample
{
    public class AppengineExample
    {
        public static void Main(string[] args)
        {
            AppengineService appengineService = new AppengineService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AppengineSample/0.1",
            });

            // Part of `name`. Name of the resource to update. For example: "apps/myapp/services/default".
            string appsId = "";  // TODO: Update placeholder value.

            // Part of `name`. See documentation of `appsId`.
            string servicesId = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.Version requestBody = new Data.Version();

            AppsResource.ServicesResource.VersionsResource.CreateRequest request = appengineService.Apps.Services.Versions.Create(requestBody, appsId, servicesId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Appengine.v1beta5;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Appengine.v1beta5.Data;

namespace AppengineSample
{
    public class AppengineExample
    {
        public static void Main(string[] args)
        {
            AppengineService appengineService = new AppengineService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AppengineSample/0.1",
            });

            // Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1.
            string appsId = "";  // TODO: Update placeholder value.

            // Part of `name`. See documentation of `appsId`.
            string servicesId = "";  // TODO: Update placeholder value.

            // Part of `name`. See documentation of `appsId`.
            string versionsId = "";  // TODO: Update placeholder value.

            AppsResource.ServicesResource.VersionsResource.DeleteRequest request = appengineService.Apps.Services.Versions.Delete(appsId, servicesId, versionsId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Appengine.v1beta5;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Appengine.v1beta5.Data;

namespace AppengineSample
{
    public class AppengineExample
    {
        public static void Main(string[] args)
        {
            AppengineService appengineService = new AppengineService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AppengineSample/0.1",
            });

            // Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1.
            string appsId = "";  // TODO: Update placeholder value.

            // Part of `name`. See documentation of `appsId`.
            string servicesId = "";  // TODO: Update placeholder value.

            // Part of `name`. See documentation of `appsId`.
            string versionsId = "";  // TODO: Update placeholder value.

            AppsResource.ServicesResource.VersionsResource.GetRequest request = appengineService.Apps.Services.Versions.Get(appsId, servicesId, versionsId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Version response = request.Execute();
            // Data.Version response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Appengine.v1beta5;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Appengine.v1beta5.Data;

namespace AppengineSample
{
    public class AppengineExample
    {
        public static void Main(string[] args)
        {
            AppengineService appengineService = new AppengineService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AppengineSample/0.1",
            });

            // Part of `name`. Name of the resource requested. Example:
            // apps/myapp/services/default/versions/v1/instances/instance-1.
            string appsId = "";  // TODO: Update placeholder value.

            // Part of `name`. See documentation of `appsId`.
            string servicesId = "";  // TODO: Update placeholder value.

            // Part of `name`. See documentation of `appsId`.
            string versionsId = "";  // TODO: Update placeholder value.

            // Part of `name`. See documentation of `appsId`.
            string instancesId = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`:
            Data.DebugInstanceRequest requestBody = new Data.DebugInstanceRequest();

            AppsResource.ServicesResource.VersionsResource.InstancesResource.DebugRequest request = appengineService.Apps.Services.Versions.Instances.Debug(requestBody, appsId, servicesId, versionsId, instancesId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Appengine.v1beta5;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Appengine.v1beta5.Data;

namespace AppengineSample
{
    public class AppengineExample
    {
        public static void Main(string[] args)
        {
            AppengineService appengineService = new AppengineService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AppengineSample/0.1",
            });

            // Part of `name`. Name of the resource requested. For example:
            // "apps/myapp/services/default/versions/v1/instances/instance-1".
            string appsId = "";  // TODO: Update placeholder value.

            // Part of `name`. See documentation of `appsId`.
            string servicesId = "";  // TODO: Update placeholder value.

            // Part of `name`. See documentation of `appsId`.
            string versionsId = "";  // TODO: Update placeholder value.

            // Part of `name`. See documentation of `appsId`.
            string instancesId = "";  // TODO: Update placeholder value.

            AppsResource.ServicesResource.VersionsResource.InstancesResource.DeleteRequest request = appengineService.Apps.Services.Versions.Instances.Delete(appsId, servicesId, versionsId, instancesId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Appengine.v1beta5;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Appengine.v1beta5.Data;

namespace AppengineSample
{
    public class AppengineExample
    {
        public static void Main(string[] args)
        {
            AppengineService appengineService = new AppengineService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AppengineSample/0.1",
            });

            // Part of `name`. Name of the resource requested. Example:
            // apps/myapp/services/default/versions/v1/instances/instance-1.
            string appsId = "";  // TODO: Update placeholder value.

            // Part of `name`. See documentation of `appsId`.
            string servicesId = "";  // TODO: Update placeholder value.

            // Part of `name`. See documentation of `appsId`.
            string versionsId = "";  // TODO: Update placeholder value.

            // Part of `name`. See documentation of `appsId`.
            string instancesId = "";  // TODO: Update placeholder value.

            AppsResource.ServicesResource.VersionsResource.InstancesResource.GetRequest request = appengineService.Apps.Services.Versions.Instances.Get(appsId, servicesId, versionsId, instancesId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Instance response = request.Execute();
            // Data.Instance response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Appengine.v1beta5;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Appengine.v1beta5.Data;

namespace AppengineSample
{
    public class AppengineExample
    {
        public static void Main(string[] args)
        {
            AppengineService appengineService = new AppengineService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AppengineSample/0.1",
            });

            // Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1.
            string appsId = "";  // TODO: Update placeholder value.

            // Part of `name`. See documentation of `appsId`.
            string servicesId = "";  // TODO: Update placeholder value.

            // Part of `name`. See documentation of `appsId`.
            string versionsId = "";  // TODO: Update placeholder value.

            AppsResource.ServicesResource.VersionsResource.InstancesResource.ListRequest request = appengineService.Apps.Services.Versions.Instances.List(appsId, servicesId, versionsId);

            Data.ListInstancesResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Instances == null)
                {
                    continue;
                }
                foreach (Data.Instance instance in response.Instances)
                {
                    // TODO: Change code below to process each `instance` resource:
                    Console.WriteLine(JsonConvert.SerializeObject(instance));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Appengine.v1beta5;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Appengine.v1beta5.Data;

namespace AppengineSample
{
    public class AppengineExample
    {
        public static void Main(string[] args)
        {
            AppengineService appengineService = new AppengineService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AppengineSample/0.1",
            });

            // Part of `name`. Name of the resource requested. Example: apps/myapp/services/default.
            string appsId = "";  // TODO: Update placeholder value.

            // Part of `name`. See documentation of `appsId`.
            string servicesId = "";  // TODO: Update placeholder value.

            AppsResource.ServicesResource.VersionsResource.ListRequest request = appengineService.Apps.Services.Versions.List(appsId, servicesId);

            Data.ListVersionsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Versions == null)
                {
                    continue;
                }
                foreach (Data.Version version in response.Versions)
                {
                    // TODO: Change code below to process each `version` resource:
                    Console.WriteLine(JsonConvert.SerializeObject(version));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Appengine.v1beta5;
using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Newtonsoft.Json;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Appengine.v1beta5.Data;

namespace AppengineSample
{
    public class AppengineExample
    {
        public static void Main(string[] args)
        {
            AppengineService appengineService = new AppengineService(new BaseClientService.Initializer
            {
                HttpClientInitializer = GetCredential(),
                ApplicationName = "Google-AppengineSample/0.1",
            });

            // Part of `name`. Name of the resource to update. Example: apps/myapp/services/default/versions/1.
            string appsId = "";  // TODO: Update placeholder value.

            // Part of `name`. See documentation of `appsId`.
            string servicesId = "";  // TODO: Update placeholder value.

            // Part of `name`. See documentation of `appsId`.
            string versionsId = "";  // TODO: Update placeholder value.

            // TODO: Assign values to desired properties of `requestBody`. Only assigned
            // properties will be changed:
            Data.Version requestBody = new Data.Version();

            AppsResource.ServicesResource.VersionsResource.PatchRequest request = appengineService.Apps.Services.Versions.Patch(requestBody, appsId, servicesId, versionsId);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(JsonConvert.SerializeObject(response));
        }

        public static GoogleCredential GetCredential()
        {
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }
           return credential;
        }
    }
}
