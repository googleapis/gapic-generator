
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Account ID.
    summaryAccountId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.accountActiveAdSummaries.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Account permission group ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.accountPermissionGroups.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.accountPermissionGroups.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Account permission ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.accountPermissions.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.accountPermissions.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // User profile ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.accountUserProfiles.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.accountUserProfiles.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var accountUserProfilesPage = response['accountUserProfiles'];
    if (!accountUserProfilesPage) {
      return;
    }
    for (var i = 0; i < accountUserProfilesPage.length; i++) {
      // TODO: Change code below to process each resource in `accountUserProfilesPage`:
      console.log(JSON.stringify(accountUserProfilesPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.accountUserProfiles.list(request, handlePage);
    }
  };

  dfareporting.accountUserProfiles.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // User profile ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.accountUserProfiles.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.accountUserProfiles.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Account ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.accounts.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var accountsPage = response['accounts'];
    if (!accountsPage) {
      return;
    }
    for (var i = 0; i < accountsPage.length; i++) {
      // TODO: Change code below to process each resource in `accountsPage`:
      console.log(JSON.stringify(accountsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.accounts.list(request, handlePage);
    }
  };

  dfareporting.accounts.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Account ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.accounts.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.accounts.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Ad ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.ads.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.ads.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var adsPage = response['ads'];
    if (!adsPage) {
      return;
    }
    for (var i = 0; i < adsPage.length; i++) {
      // TODO: Change code below to process each resource in `adsPage`:
      console.log(JSON.stringify(adsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.ads.list(request, handlePage);
    }
  };

  dfareporting.ads.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Ad ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.ads.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.ads.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Advertiser group ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.advertiserGroups.delete(request, function(err) {
    if (err) {
      console.error(err);
      return;
    }
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Advertiser group ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.advertiserGroups.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.advertiserGroups.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var advertiserGroupsPage = response['advertiserGroups'];
    if (!advertiserGroupsPage) {
      return;
    }
    for (var i = 0; i < advertiserGroupsPage.length; i++) {
      // TODO: Change code below to process each resource in `advertiserGroupsPage`:
      console.log(JSON.stringify(advertiserGroupsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.advertiserGroups.list(request, handlePage);
    }
  };

  dfareporting.advertiserGroups.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Advertiser group ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.advertiserGroups.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.advertiserGroups.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Advertiser ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.advertisers.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.advertisers.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var advertisersPage = response['advertisers'];
    if (!advertisersPage) {
      return;
    }
    for (var i = 0; i < advertisersPage.length; i++) {
      // TODO: Change code below to process each resource in `advertisersPage`:
      console.log(JSON.stringify(advertisersPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.advertisers.list(request, handlePage);
    }
  };

  dfareporting.advertisers.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Advertiser ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.advertisers.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.advertisers.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.browsers.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Campaign ID in this association.
    campaignId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.campaignCreativeAssociations.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Campaign ID in this association.
    campaignId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var campaignCreativeAssociationsPage = response['campaignCreativeAssociations'];
    if (!campaignCreativeAssociationsPage) {
      return;
    }
    for (var i = 0; i < campaignCreativeAssociationsPage.length; i++) {
      // TODO: Change code below to process each resource in `campaignCreativeAssociationsPage`:
      console.log(JSON.stringify(campaignCreativeAssociationsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.campaignCreativeAssociations.list(request, handlePage);
    }
  };

  dfareporting.campaignCreativeAssociations.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Campaign ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.campaigns.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Default landing page name for this new campaign. Must be less than 256 characters long.
    defaultLandingPageName: '',  // TODO: Update placeholder value.

    // Default landing page URL for this new campaign.
    defaultLandingPageUrl: '',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.campaigns.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var campaignsPage = response['campaigns'];
    if (!campaignsPage) {
      return;
    }
    for (var i = 0; i < campaignsPage.length; i++) {
      // TODO: Change code below to process each resource in `campaignsPage`:
      console.log(JSON.stringify(campaignsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.campaigns.list(request, handlePage);
    }
  };

  dfareporting.campaigns.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Campaign ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.campaigns.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.campaigns.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Change log ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.changeLogs.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var changeLogsPage = response['changeLogs'];
    if (!changeLogsPage) {
      return;
    }
    for (var i = 0; i < changeLogsPage.length; i++) {
      // TODO: Change code below to process each resource in `changeLogsPage`:
      console.log(JSON.stringify(changeLogsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.changeLogs.list(request, handlePage);
    }
  };

  dfareporting.changeLogs.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.cities.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Connection type ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.connectionTypes.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.connectionTypes.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Content category ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.contentCategories.delete(request, function(err) {
    if (err) {
      console.error(err);
      return;
    }
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Content category ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.contentCategories.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.contentCategories.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var contentCategoriesPage = response['contentCategories'];
    if (!contentCategoriesPage) {
      return;
    }
    for (var i = 0; i < contentCategoriesPage.length; i++) {
      // TODO: Change code below to process each resource in `contentCategoriesPage`:
      console.log(JSON.stringify(contentCategoriesPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.contentCategories.list(request, handlePage);
    }
  };

  dfareporting.contentCategories.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Content category ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.contentCategories.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.contentCategories.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.conversions.batchinsert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/ddmconversions'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Country DART ID.
    dartId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.countries.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.countries.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Advertiser ID of this creative. This is a required field.
    advertiserId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    media: {
      // TODO: Add desired media content for upload. See
      // https://github.com/google/google-api-nodejs-client#media-uploads
      mimeType: '',  // See https://www.w3.org/Protocols/rfc1341/4_Content-Type.html
      body: '',
    },

    auth: authClient,
  };

  dfareporting.creativeAssets.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative field ID for this creative field value.
    creativeFieldId: '0',  // TODO: Update placeholder value.

    // Creative Field Value ID
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.creativeFieldValues.delete(request, function(err) {
    if (err) {
      console.error(err);
      return;
    }
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative field ID for this creative field value.
    creativeFieldId: '0',  // TODO: Update placeholder value.

    // Creative Field Value ID
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.creativeFieldValues.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative field ID for this creative field value.
    creativeFieldId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.creativeFieldValues.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative field ID for this creative field value.
    creativeFieldId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var creativeFieldValuesPage = response['creativeFieldValues'];
    if (!creativeFieldValuesPage) {
      return;
    }
    for (var i = 0; i < creativeFieldValuesPage.length; i++) {
      // TODO: Change code below to process each resource in `creativeFieldValuesPage`:
      console.log(JSON.stringify(creativeFieldValuesPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.creativeFieldValues.list(request, handlePage);
    }
  };

  dfareporting.creativeFieldValues.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative field ID for this creative field value.
    creativeFieldId: '0',  // TODO: Update placeholder value.

    // Creative Field Value ID
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.creativeFieldValues.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative field ID for this creative field value.
    creativeFieldId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.creativeFieldValues.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative Field ID
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.creativeFields.delete(request, function(err) {
    if (err) {
      console.error(err);
      return;
    }
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative Field ID
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.creativeFields.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.creativeFields.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var creativeFieldsPage = response['creativeFields'];
    if (!creativeFieldsPage) {
      return;
    }
    for (var i = 0; i < creativeFieldsPage.length; i++) {
      // TODO: Change code below to process each resource in `creativeFieldsPage`:
      console.log(JSON.stringify(creativeFieldsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.creativeFields.list(request, handlePage);
    }
  };

  dfareporting.creativeFields.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative Field ID
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.creativeFields.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.creativeFields.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative group ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.creativeGroups.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.creativeGroups.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var creativeGroupsPage = response['creativeGroups'];
    if (!creativeGroupsPage) {
      return;
    }
    for (var i = 0; i < creativeGroupsPage.length; i++) {
      // TODO: Change code below to process each resource in `creativeGroupsPage`:
      console.log(JSON.stringify(creativeGroupsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.creativeGroups.list(request, handlePage);
    }
  };

  dfareporting.creativeGroups.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative group ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.creativeGroups.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.creativeGroups.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.creatives.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.creatives.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var creativesPage = response['creatives'];
    if (!creativesPage) {
      return;
    }
    for (var i = 0; i < creativesPage.length; i++) {
      // TODO: Change code below to process each resource in `creativesPage`:
      console.log(JSON.stringify(creativesPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.creatives.list(request, handlePage);
    }
  };

  dfareporting.creatives.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Creative ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.creatives.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.creatives.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // The DFA user profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var itemsPage = response['items'];
    if (!itemsPage) {
      return;
    }
    for (var i = 0; i < itemsPage.length; i++) {
      // TODO: Change code below to process each resource in `itemsPage`:
      console.log(JSON.stringify(itemsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.dimensionValues.query(request, handlePage);
    }
  };

  dfareporting.dimensionValues.query(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Directory site contact ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.directorySiteContacts.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var directorySiteContactsPage = response['directorySiteContacts'];
    if (!directorySiteContactsPage) {
      return;
    }
    for (var i = 0; i < directorySiteContactsPage.length; i++) {
      // TODO: Change code below to process each resource in `directorySiteContactsPage`:
      console.log(JSON.stringify(directorySiteContactsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.directorySiteContacts.list(request, handlePage);
    }
  };

  dfareporting.directorySiteContacts.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Directory site ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.directorySites.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.directorySites.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var directorySitesPage = response['directorySites'];
    if (!directorySitesPage) {
      return;
    }
    for (var i = 0; i < directorySitesPage.length; i++) {
      // TODO: Change code below to process each resource in `directorySitesPage`:
      console.log(JSON.stringify(directorySitesPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.directorySites.list(request, handlePage);
    }
  };

  dfareporting.directorySites.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // ID of the object of this dynamic targeting key. This is a required field.
    objectId: '0',  // TODO: Update placeholder value.

    // Name of this dynamic targeting key. This is a required field. Must be less than 256 characters long
    // and cannot contain commas. All characters are converted to lowercase.
    name: '',  // TODO: Update placeholder value.

    // Type of the object of this dynamic targeting key. This is a required field.
    objectType: '',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.dynamicTargetingKeys.delete(request, function(err) {
    if (err) {
      console.error(err);
      return;
    }
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.dynamicTargetingKeys.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.dynamicTargetingKeys.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Event tag ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.eventTags.delete(request, function(err) {
    if (err) {
      console.error(err);
      return;
    }
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Event tag ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.eventTags.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.eventTags.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.eventTags.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Event tag ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.eventTags.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.eventTags.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // The ID of the report.
    reportId: '0',  // TODO: Update placeholder value.

    // The ID of the report file.
    fileId: '0',  // TODO: Update placeholder value.

    // TODO: To download media content, use:
    //
    // alt: 'media',

    auth: authClient,
  };

  dfareporting.files.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // The DFA profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var itemsPage = response['items'];
    if (!itemsPage) {
      return;
    }
    for (var i = 0; i < itemsPage.length; i++) {
      // TODO: Change code below to process each resource in `itemsPage`:
      console.log(JSON.stringify(itemsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.files.list(request, handlePage);
    }
  };

  dfareporting.files.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Floodlight activity ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.floodlightActivities.delete(request, function(err) {
    if (err) {
      console.error(err);
      return;
    }
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.floodlightActivities.generatetag(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Floodlight activity ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.floodlightActivities.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.floodlightActivities.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var floodlightActivitiesPage = response['floodlightActivities'];
    if (!floodlightActivitiesPage) {
      return;
    }
    for (var i = 0; i < floodlightActivitiesPage.length; i++) {
      // TODO: Change code below to process each resource in `floodlightActivitiesPage`:
      console.log(JSON.stringify(floodlightActivitiesPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.floodlightActivities.list(request, handlePage);
    }
  };

  dfareporting.floodlightActivities.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Floodlight activity ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.floodlightActivities.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.floodlightActivities.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Floodlight activity Group ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.floodlightActivityGroups.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.floodlightActivityGroups.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var floodlightActivityGroupsPage = response['floodlightActivityGroups'];
    if (!floodlightActivityGroupsPage) {
      return;
    }
    for (var i = 0; i < floodlightActivityGroupsPage.length; i++) {
      // TODO: Change code below to process each resource in `floodlightActivityGroupsPage`:
      console.log(JSON.stringify(floodlightActivityGroupsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.floodlightActivityGroups.list(request, handlePage);
    }
  };

  dfareporting.floodlightActivityGroups.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Floodlight activity Group ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.floodlightActivityGroups.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.floodlightActivityGroups.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Floodlight configuration ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.floodlightConfigurations.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.floodlightConfigurations.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Floodlight configuration ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.floodlightConfigurations.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.floodlightConfigurations.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Project ID for order documents.
    projectId: '0',  // TODO: Update placeholder value.

    // Inventory item ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.inventoryItems.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Project ID for order documents.
    projectId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var inventoryItemsPage = response['inventoryItems'];
    if (!inventoryItemsPage) {
      return;
    }
    for (var i = 0; i < inventoryItemsPage.length; i++) {
      // TODO: Change code below to process each resource in `inventoryItemsPage`:
      console.log(JSON.stringify(inventoryItemsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.inventoryItems.list(request, handlePage);
    }
  };

  dfareporting.inventoryItems.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Landing page campaign ID.
    campaignId: '0',  // TODO: Update placeholder value.

    // Landing page ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.landingPages.delete(request, function(err) {
    if (err) {
      console.error(err);
      return;
    }
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Landing page campaign ID.
    campaignId: '0',  // TODO: Update placeholder value.

    // Landing page ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.landingPages.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Landing page campaign ID.
    campaignId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.landingPages.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Landing page campaign ID.
    campaignId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.landingPages.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Landing page campaign ID.
    campaignId: '0',  // TODO: Update placeholder value.

    // Landing page ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.landingPages.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Landing page campaign ID.
    campaignId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.landingPages.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.languages.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.metros.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Mobile carrier ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.mobileCarriers.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.mobileCarriers.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Operating system version ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.operatingSystemVersions.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.operatingSystemVersions.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Operating system DART ID.
    dartId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.operatingSystems.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.operatingSystems.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Project ID for order documents.
    projectId: '0',  // TODO: Update placeholder value.

    // Order document ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.orderDocuments.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Project ID for order documents.
    projectId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var orderDocumentsPage = response['orderDocuments'];
    if (!orderDocumentsPage) {
      return;
    }
    for (var i = 0; i < orderDocumentsPage.length; i++) {
      // TODO: Change code below to process each resource in `orderDocumentsPage`:
      console.log(JSON.stringify(orderDocumentsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.orderDocuments.list(request, handlePage);
    }
  };

  dfareporting.orderDocuments.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Project ID for orders.
    projectId: '0',  // TODO: Update placeholder value.

    // Order ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.orders.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Project ID for orders.
    projectId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var ordersPage = response['orders'];
    if (!ordersPage) {
      return;
    }
    for (var i = 0; i < ordersPage.length; i++) {
      // TODO: Change code below to process each resource in `ordersPage`:
      console.log(JSON.stringify(ordersPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.orders.list(request, handlePage);
    }
  };

  dfareporting.orders.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Placement group ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.placementGroups.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.placementGroups.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var placementGroupsPage = response['placementGroups'];
    if (!placementGroupsPage) {
      return;
    }
    for (var i = 0; i < placementGroupsPage.length; i++) {
      // TODO: Change code below to process each resource in `placementGroupsPage`:
      console.log(JSON.stringify(placementGroupsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.placementGroups.list(request, handlePage);
    }
  };

  dfareporting.placementGroups.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Placement group ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.placementGroups.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.placementGroups.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Placement strategy ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.placementStrategies.delete(request, function(err) {
    if (err) {
      console.error(err);
      return;
    }
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Placement strategy ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.placementStrategies.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.placementStrategies.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var placementStrategiesPage = response['placementStrategies'];
    if (!placementStrategiesPage) {
      return;
    }
    for (var i = 0; i < placementStrategiesPage.length; i++) {
      // TODO: Change code below to process each resource in `placementStrategiesPage`:
      console.log(JSON.stringify(placementStrategiesPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.placementStrategies.list(request, handlePage);
    }
  };

  dfareporting.placementStrategies.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Placement strategy ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.placementStrategies.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.placementStrategies.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.placements.generatetags(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Placement ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.placements.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.placements.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var placementsPage = response['placements'];
    if (!placementsPage) {
      return;
    }
    for (var i = 0; i < placementsPage.length; i++) {
      // TODO: Change code below to process each resource in `placementsPage`:
      console.log(JSON.stringify(placementsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.placements.list(request, handlePage);
    }
  };

  dfareporting.placements.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Placement ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.placements.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.placements.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Platform type ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.platformTypes.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.platformTypes.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Postal code ID.
    code: 'my-code',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.postalCodes.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.postalCodes.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Project ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.projects.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var projectsPage = response['projects'];
    if (!projectsPage) {
      return;
    }
    for (var i = 0; i < projectsPage.length; i++) {
      // TODO: Change code below to process each resource in `projectsPage`:
      console.log(JSON.stringify(projectsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.projects.list(request, handlePage);
    }
  };

  dfareporting.projects.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.regions.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Remarketing list ID.
    remarketingListId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.remarketingListShares.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Remarketing list ID.
    remarketingListId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.remarketingListShares.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.remarketingListShares.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Remarketing list ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.remarketingLists.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.remarketingLists.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Select only remarketing lists owned by this advertiser.
    advertiserId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var remarketingListsPage = response['remarketingLists'];
    if (!remarketingListsPage) {
      return;
    }
    for (var i = 0; i < remarketingListsPage.length; i++) {
      // TODO: Change code below to process each resource in `remarketingListsPage`:
      console.log(JSON.stringify(remarketingListsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.remarketingLists.list(request, handlePage);
    }
  };

  dfareporting.remarketingLists.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Remarketing list ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.remarketingLists.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.remarketingLists.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // The DFA user profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.reports.compatibleFields.query(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // The DFA user profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    // The ID of the report.
    reportId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.reports.delete(request, function(err) {
    if (err) {
      console.error(err);
      return;
    }
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // The DFA profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    // The ID of the report.
    reportId: '0',  // TODO: Update placeholder value.

    // The ID of the report file.
    fileId: '0',  // TODO: Update placeholder value.

    // TODO: To download media content, use:
    //
    // alt: 'media',

    auth: authClient,
  };

  dfareporting.reports.files.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // The DFA profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    // The ID of the parent report.
    reportId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var itemsPage = response['items'];
    if (!itemsPage) {
      return;
    }
    for (var i = 0; i < itemsPage.length; i++) {
      // TODO: Change code below to process each resource in `itemsPage`:
      console.log(JSON.stringify(itemsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.reports.files.list(request, handlePage);
    }
  };

  dfareporting.reports.files.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // The DFA user profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    // The ID of the report.
    reportId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.reports.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // The DFA user profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.reports.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // The DFA user profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var itemsPage = response['items'];
    if (!itemsPage) {
      return;
    }
    for (var i = 0; i < itemsPage.length; i++) {
      // TODO: Change code below to process each resource in `itemsPage`:
      console.log(JSON.stringify(itemsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.reports.list(request, handlePage);
    }
  };

  dfareporting.reports.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // The DFA user profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    // The ID of the report.
    reportId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.reports.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // The DFA profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    // The ID of the report.
    reportId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.reports.run(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // The DFA user profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    // The ID of the report.
    reportId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.reports.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfareporting'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Site ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.sites.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.sites.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var sitesPage = response['sites'];
    if (!sitesPage) {
      return;
    }
    for (var i = 0; i < sitesPage.length; i++) {
      // TODO: Change code below to process each resource in `sitesPage`:
      console.log(JSON.stringify(sitesPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.sites.list(request, handlePage);
    }
  };

  dfareporting.sites.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Site ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.sites.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.sites.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Size ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.sizes.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.sizes.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.sizes.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Subaccount ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.subaccounts.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.subaccounts.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var subaccountsPage = response['subaccounts'];
    if (!subaccountsPage) {
      return;
    }
    for (var i = 0; i < subaccountsPage.length; i++) {
      // TODO: Change code below to process each resource in `subaccountsPage`:
      console.log(JSON.stringify(subaccountsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.subaccounts.list(request, handlePage);
    }
  };

  dfareporting.subaccounts.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Subaccount ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.subaccounts.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.subaccounts.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Remarketing list ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.targetableRemarketingLists.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Select only targetable remarketing lists targetable by these advertisers.
    advertiserId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var targetableRemarketingListsPage = response['targetableRemarketingLists'];
    if (!targetableRemarketingListsPage) {
      return;
    }
    for (var i = 0; i < targetableRemarketingListsPage.length; i++) {
      // TODO: Change code below to process each resource in `targetableRemarketingListsPage`:
      console.log(JSON.stringify(targetableRemarketingListsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.targetableRemarketingLists.list(request, handlePage);
    }
  };

  dfareporting.targetableRemarketingLists.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Targeting template ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.targetingTemplates.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.targetingTemplates.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var targetingTemplatesPage = response['targetingTemplates'];
    if (!targetingTemplatesPage) {
      return;
    }
    for (var i = 0; i < targetingTemplatesPage.length; i++) {
      // TODO: Change code below to process each resource in `targetingTemplatesPage`:
      console.log(JSON.stringify(targetingTemplatesPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.targetingTemplates.list(request, handlePage);
    }
  };

  dfareporting.targetingTemplates.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // Targeting template ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.targetingTemplates.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.targetingTemplates.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // The user profile ID.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.userProfiles.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using one of the following scopes:
  //   'https://www.googleapis.com/auth/dfareporting'
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    auth: authClient,
  };

  dfareporting.userProfiles.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using one of the following scopes:
  //   'https://www.googleapis.com/auth/dfareporting'
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // User role permission group ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.userRolePermissionGroups.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.userRolePermissionGroups.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // User role permission ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.userRolePermissions.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.userRolePermissions.list(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // User role ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.userRoles.delete(request, function(err) {
    if (err) {
      console.error(err);
      return;
    }
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // User role ID.
    id: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  dfareporting.userRoles.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  dfareporting.userRoles.insert(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var userRolesPage = response['userRoles'];
    if (!userRolesPage) {
      return;
    }
    for (var i = 0; i < userRolesPage.length; i++) {
      // TODO: Change code below to process each resource in `userRolesPage`:
      console.log(JSON.stringify(userRolesPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      dfareporting.userRoles.list(request, handlePage);
    }
  };

  dfareporting.userRoles.list(request, handlePage);
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    // User role ID.
    id: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. Only these properties
      // will be changed.
    },

    auth: authClient,
  };

  dfareporting.userRoles.patch(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the DCM/DFA Reporting And Trafficking API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/dfareporting
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var dfareporting = google.dfareporting('v2.6');

authorize(function(authClient) {
  var request = {
    // User profile ID associated with this request.
    profileId: '0',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  dfareporting.userRoles.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  // TODO: Change placeholder below to generate authentication credentials. See
  // https://foo.com/bar
  //
  // Authorize using the following scope:
  //   'https://www.googleapis.com/auth/dfatrafficking'
  var authClient = null;

  if (authClient == null) {
    console.log('authentication failed');
    return;
  }
  callback(authClient);
}
