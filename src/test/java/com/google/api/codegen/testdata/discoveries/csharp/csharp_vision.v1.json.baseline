
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud Vision API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/vision
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Vision.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Vision.v1.Data;


namespace VisionSample
{
    public class VisionServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the vision service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            VisionService visionService = new VisionService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            Data.BatchAnnotateImagesRequest requestBody = new Data.BatchAnnotateImagesRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ImagesResource.AnnotateRequest request = visionService.Images.Annotate(requestBody);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.BatchAnnotateImagesResponse response = request.Execute();
            // Data.BatchAnnotateImagesResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
