
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Vision API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/vision
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Vision.v1;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Vision.v1.Data;


namespace VisionSample
{
    public class VisionServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            VisionService visionService = new VisionService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-VisionSample/0.1",
            });

            Data.BatchAnnotateImagesRequest requestBody = new Data.BatchAnnotateImagesRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            ImagesResource.AnnotateRequest request = visionService.Images.Annotate(requestBody);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.BatchAnnotateImagesResponse response = request.Execute();
            // Data.BatchAnnotateImagesResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
