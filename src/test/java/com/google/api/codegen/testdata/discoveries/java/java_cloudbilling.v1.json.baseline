
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Billing API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudbilling
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    'gcloud beta auth application-default login'
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudbilling/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudbilling.Cloudbilling;
import com.google.api.services.cloudbilling.Cloudbilling.BillingAccounts.Get;
import com.google.api.services.cloudbilling.model.BillingAccount;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;


public class CloudbillingExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // The resource name of the billing account to retrieve. For example,
    // `billingAccounts/012345-567890-ABCDEF`.
    String name = ""; // TODO: Update field(s).

    Cloudbilling service = createService();
    Get request = service.billingAccounts().get(name);
    BillingAccount response = request.execute();
    System.out.println(response);
  }

  public Cloudbilling createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {

    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35

    return new Cloudbilling.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new CloudbillingExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
    Cloudbilling cloudbillingService = new Cloudbilling.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // TODO: Change placeholders below to appropriate parameter values for the 'get' method:

    // * The resource name of the billing account to retrieve. For example,
    //   `billingAccounts/012345-567890-ABCDEF`.
    String name = "billingAccounts/{MY-BILLINGACCOUNT}";

    Cloudbilling.BillingAccounts.Get request = cloudbillingService.billingAccounts().get(name);
    BillingAccount response = request.execute();

    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Billing API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudbilling
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    'gcloud beta auth application-default login'
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudbilling/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudbilling.Cloudbilling;
import com.google.api.services.cloudbilling.Cloudbilling.BillingAccounts.List;
import com.google.api.services.cloudbilling.model.BillingAccount;
import com.google.api.services.cloudbilling.model.ListBillingAccountsResponse;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;


public class CloudbillingExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    Cloudbilling service = createService();
    List request = service.billingAccounts().list();
    ListBillingAccountsResponse response;
    do {
      response = request.execute();
      if (response.getBillingAccounts() == null) {
        continue;
      }
      for (BillingAccount item : response.getBillingAccounts()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Cloudbilling createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {

    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35

    return new Cloudbilling.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }
=======
    Cloudbilling cloudbillingService = new Cloudbilling.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();


    Cloudbilling.BillingAccounts.List request = cloudbillingService.billingAccounts().list();
    ListBillingAccountsResponse response;
    do {
      response = request.execute();
      if (response.getBillingAccounts() == null)
        continue;

      for (BillingAccount billingAccount : response.getBillingAccounts()) {
        // TODO: Add code here to process each 'billingAccount' resource
      }
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new CloudbillingExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Billing API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudbilling
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    'gcloud beta auth application-default login'
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudbilling/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudbilling.Cloudbilling;
import com.google.api.services.cloudbilling.Cloudbilling.BillingAccounts.Projects.List;
import com.google.api.services.cloudbilling.model.ListProjectBillingInfoResponse;
import com.google.api.services.cloudbilling.model.ProjectBillingInfo;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;


public class CloudbillingExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // The resource name of the billing account associated with the projects that you want to list. For
    // example, `billingAccounts/012345-567890-ABCDEF`.
    String name = ""; // TODO: Update field(s).

    Cloudbilling service = createService();
    List request = service.billingAccounts().projects().list(name);
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {

    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    // The createScopedRequired method returns true when running on GAE or a local developer
    // machine. In that case, the desired scopes must be passed in manually. When the code is
    // running in GCE, GKE or a Managed VM, the scopes are pulled from the GCE metadata server.
    // For more information, see
    // https://developers.google.com/identity/protocols/application-default-credentials
    if (credential.createScopedRequired()) {
      credential = credential.createScoped(Collections.singletonList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
    Cloudbilling cloudbillingService = new Cloudbilling.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // TODO: Change placeholders below to appropriate parameter values for the 'list' method:

    // * The resource name of the billing account associated with the projects that you want to list. For
    //   example, `billingAccounts/012345-567890-ABCDEF`.
    String name = "billingAccounts/{MY-BILLINGACCOUNT}";

    Cloudbilling.BillingAccounts.Projects.List request = cloudbillingService.billingAccounts().projects().list(name);
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    ListProjectBillingInfoResponse response;
    do {
      response = request.execute();
      if (response.getProjectBillingInfo() == null) {
        continue;
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
=======

      for (ProjectBillingInfo projectBillingInfo : response.getProjectBillingInfo()) {
        // TODO: Add code here to process each 'projectBillingInfo' resource
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
      }
      for (ProjectBillingInfo item : response.getProjectBillingInfo()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Cloudbilling createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Cloudbilling.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new CloudbillingExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Billing API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudbilling
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    'gcloud beta auth application-default login'
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudbilling/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudbilling.Cloudbilling;
import com.google.api.services.cloudbilling.Cloudbilling.Projects.GetBillingInfo;
import com.google.api.services.cloudbilling.model.ProjectBillingInfo;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;


public class CloudbillingExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // The resource name of the project for which billing information is retrieved. For example,
    // `projects/tokyo-rain-123`.
    String name = ""; // TODO: Update field(s).

    Cloudbilling service = createService();
    GetBillingInfo request = service.projects().getBillingInfo(name);
    ProjectBillingInfo response = request.execute();
    System.out.println(response);
  }

  public Cloudbilling createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {

    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35

    return new Cloudbilling.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new CloudbillingExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
    Cloudbilling cloudbillingService = new Cloudbilling.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // TODO: Change placeholders below to appropriate parameter values for the 'getBillingInfo' method:

    // * The resource name of the project for which billing information is retrieved. For example,
    //   `projects/tokyo-rain-123`.
    String name = "projects/{MY-PROJECT}";

    Cloudbilling.Projects.GetBillingInfo request = cloudbillingService.projects().getBillingInfo(name);
    ProjectBillingInfo response = request.execute();

    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Billing API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudbilling
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    'gcloud beta auth application-default login'
 * 3. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/cloudbilling/v1/java
 */
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.cloudbilling.Cloudbilling;
import com.google.api.services.cloudbilling.Cloudbilling.Projects.UpdateBillingInfo;
import com.google.api.services.cloudbilling.model.ProjectBillingInfo;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;


public class CloudbillingExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    ProjectBillingInfo requestBody = new ProjectBillingInfo();

    // The resource name of the project associated with the billing information that you want to update.
    // For example, `projects/tokyo-rain-123`.
    String name = ""; // TODO: Update field(s).

    Cloudbilling service = createService();
    UpdateBillingInfo request = service.projects().updateBillingInfo(name, requestBody);
    ProjectBillingInfo response = request.execute();
    System.out.println(response);
  }

  public Cloudbilling createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {

    // Authentication is provided by the 'gcloud' tool when running locally
    // and by built-in service accounts when running on GAE, GCE, or GKE.
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35

    return new Cloudbilling.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new CloudbillingExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
    Cloudbilling cloudbillingService = new Cloudbilling.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // TODO: Change placeholders below to appropriate parameter values for the 'updateBillingInfo' method:

    // * The resource name of the project associated with the billing information that you want to update.
    //   For example, `projects/tokyo-rain-123`.
    String name = "projects/{MY-PROJECT}";

    ProjectBillingInfo content = new ProjectBillingInfo();
    // TODO: Add code here to assign values to desired fields of the 'content' object

    Cloudbilling.Projects.UpdateBillingInfo request = cloudbillingService.projects().updateBillingInfo(name, content);
    ProjectBillingInfo response = request.execute();

    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
  }
}
