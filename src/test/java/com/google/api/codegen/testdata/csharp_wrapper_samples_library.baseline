============== file: Google/Example/Library/V1/LibraryServiceSnippets.g.cs ==============
// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Generated code. DO NOT EDIT!

using Google.Protobuf.WellKnownTypes;
using Google.Tagger.V1;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Google.Example.Library.V1.Snippets
{

    public class LibraryServiceClientSnippets
    {
        public async Task CreateShelfAsync()
        {
            // Snippet: CreateShelfAsync(Shelf,CallSettings)
            // Additional: CreateShelfAsync(Shelf,CancellationToken)
            LibraryServiceClient client = await LibraryServiceClient.CreateAsync();
            Shelf shelf = new Shelf();
            Shelf response = await client.CreateShelfAsync(
                shelf);
            // End snippet
        }

        public void CreateShelf()
        {
            // Snippet: CreateShelf(Shelf,CallSettings)
            LibraryServiceClient client = LibraryServiceClient.Create();
            Shelf shelf = new Shelf();
            Shelf response = client.CreateShelf(
                shelf);
            // End snippet
        }

        public async Task GetShelfAsync()
        {
            // Snippet: GetShelfAsync(string,CallSettings)
            // Additional: GetShelfAsync(string,CancellationToken)
            LibraryServiceClient client = await LibraryServiceClient.CreateAsync();
            string name = "";
            Shelf response = await client.GetShelfAsync(
                name);
            // End snippet
        }

        public void GetShelf()
        {
            // Snippet: GetShelf(string,CallSettings)
            LibraryServiceClient client = LibraryServiceClient.Create();
            string name = "";
            Shelf response = client.GetShelf(
                name);
            // End snippet
        }

        public async Task GetShelfAsync()
        {
            // Snippet: GetShelfAsync(string,SomeMessage,CallSettings)
            // Additional: GetShelfAsync(string,SomeMessage,CancellationToken)
            LibraryServiceClient client = await LibraryServiceClient.CreateAsync();
            string name = "";
            SomeMessage message = new SomeMessage();
            Shelf response = await client.GetShelfAsync(
                name, message);
            // End snippet
        }

        public void GetShelf()
        {
            // Snippet: GetShelf(string,SomeMessage,CallSettings)
            LibraryServiceClient client = LibraryServiceClient.Create();
            string name = "";
            SomeMessage message = new SomeMessage();
            Shelf response = client.GetShelf(
                name, message);
            // End snippet
        }

        public async Task GetShelfAsync()
        {
            // Snippet: GetShelfAsync(string,SomeMessage,StringBuilder,CallSettings)
            // Additional: GetShelfAsync(string,SomeMessage,StringBuilder,CancellationToken)
            LibraryServiceClient client = await LibraryServiceClient.CreateAsync();
            string name = "";
            SomeMessage message = new SomeMessage();
            StringBuilder stringBuilder = new StringBuilder();
            Shelf response = await client.GetShelfAsync(
                name, message, stringBuilder);
            // End snippet
        }

        public void GetShelf()
        {
            // Snippet: GetShelf(string,SomeMessage,StringBuilder,CallSettings)
            LibraryServiceClient client = LibraryServiceClient.Create();
            string name = "";
            SomeMessage message = new SomeMessage();
            StringBuilder stringBuilder = new StringBuilder();
            Shelf response = client.GetShelf(
                name, message, stringBuilder);
            // End snippet
        }

        public async Task ListShelvesAsync()
        {
            // Snippet: ListShelvesAsync(string,int?,CallSettings)
            // Additional: ListShelvesAsync(string,int?,CancellationToken)
            LibraryServiceClient client = await LibraryServiceClient.CreateAsync();
            string pageToken = null;
            int? pageSize = null;
            IPagedEnumerable<ListShelvesResponse, Shelf> response = await client.ListShelvesAsync(
                pageToken, pageSize);
            // End snippet
        }

        public void ListShelves()
        {
            // Snippet: ListShelves(string,int?,CallSettings)
            LibraryServiceClient client = LibraryServiceClient.Create();
            string pageToken = null;
            int? pageSize = null;
            IPagedEnumerable<ListShelvesResponse, Shelf> response = client.ListShelves(
                pageToken, pageSize);
            // End snippet
        }

        public async Task DeleteShelfAsync()
        {
            // Snippet: DeleteShelfAsync(string,CallSettings)
            // Additional: DeleteShelfAsync(string,CancellationToken)
            LibraryServiceClient client = await LibraryServiceClient.CreateAsync();
            string name = "";
            void response = await client.DeleteShelfAsync(
                name);
            // End snippet
        }

        public void DeleteShelf()
        {
            // Snippet: DeleteShelf(string,CallSettings)
            LibraryServiceClient client = LibraryServiceClient.Create();
            string name = "";
            void response = client.DeleteShelf(
                name);
            // End snippet
        }

        public async Task MergeShelvesAsync()
        {
            // Snippet: MergeShelvesAsync(string,string,CallSettings)
            // Additional: MergeShelvesAsync(string,string,CancellationToken)
            LibraryServiceClient client = await LibraryServiceClient.CreateAsync();
            string name = "";
            string otherShelfName = "";
            Shelf response = await client.MergeShelvesAsync(
                name, otherShelfName);
            // End snippet
        }

        public void MergeShelves()
        {
            // Snippet: MergeShelves(string,string,CallSettings)
            LibraryServiceClient client = LibraryServiceClient.Create();
            string name = "";
            string otherShelfName = "";
            Shelf response = client.MergeShelves(
                name, otherShelfName);
            // End snippet
        }

        public async Task CreateBookAsync()
        {
            // Snippet: CreateBookAsync(string,Book,CallSettings)
            // Additional: CreateBookAsync(string,Book,CancellationToken)
            LibraryServiceClient client = await LibraryServiceClient.CreateAsync();
            string name = "";
            Book book = new Book();
            Book response = await client.CreateBookAsync(
                name, book);
            // End snippet
        }

        public void CreateBook()
        {
            // Snippet: CreateBook(string,Book,CallSettings)
            LibraryServiceClient client = LibraryServiceClient.Create();
            string name = "";
            Book book = new Book();
            Book response = client.CreateBook(
                name, book);
            // End snippet
        }

        public async Task PublishSeriesAsync()
        {
            // Snippet: PublishSeriesAsync(Shelf,IEnumerable<Book>,uint,CallSettings)
            // Additional: PublishSeriesAsync(Shelf,IEnumerable<Book>,uint,CancellationToken)
            LibraryServiceClient client = await LibraryServiceClient.CreateAsync();
            Shelf shelf = new Shelf();
            IEnumerable<Book> books = new List<Book>();
            uint edition = 0;
            PublishSeriesResponse response = await client.PublishSeriesAsync(
                shelf, books, edition);
            // End snippet
        }

        public void PublishSeries()
        {
            // Snippet: PublishSeries(Shelf,IEnumerable<Book>,uint,CallSettings)
            LibraryServiceClient client = LibraryServiceClient.Create();
            Shelf shelf = new Shelf();
            IEnumerable<Book> books = new List<Book>();
            uint edition = 0;
            PublishSeriesResponse response = client.PublishSeries(
                shelf, books, edition);
            // End snippet
        }

        public async Task GetBookAsync()
        {
            // Snippet: GetBookAsync(string,CallSettings)
            // Additional: GetBookAsync(string,CancellationToken)
            LibraryServiceClient client = await LibraryServiceClient.CreateAsync();
            string name = "";
            Book response = await client.GetBookAsync(
                name);
            // End snippet
        }

        public void GetBook()
        {
            // Snippet: GetBook(string,CallSettings)
            LibraryServiceClient client = LibraryServiceClient.Create();
            string name = "";
            Book response = client.GetBook(
                name);
            // End snippet
        }

        public async Task ListBooksAsync()
        {
            // Snippet: ListBooksAsync(string,string,string,int?,CallSettings)
            // Additional: ListBooksAsync(string,string,string,int?,CancellationToken)
            LibraryServiceClient client = await LibraryServiceClient.CreateAsync();
            string name = "";
            string filter = "";
            string pageToken = null;
            int? pageSize = null;
            IPagedEnumerable<ListBooksResponse, Book> response = await client.ListBooksAsync(
                name, filter, pageToken, pageSize);
            // End snippet
        }

        public void ListBooks()
        {
            // Snippet: ListBooks(string,string,string,int?,CallSettings)
            LibraryServiceClient client = LibraryServiceClient.Create();
            string name = "";
            string filter = "";
            string pageToken = null;
            int? pageSize = null;
            IPagedEnumerable<ListBooksResponse, Book> response = client.ListBooks(
                name, filter, pageToken, pageSize);
            // End snippet
        }

        public async Task DeleteBookAsync()
        {
            // Snippet: DeleteBookAsync(string,CallSettings)
            // Additional: DeleteBookAsync(string,CancellationToken)
            LibraryServiceClient client = await LibraryServiceClient.CreateAsync();
            string name = "";
            void response = await client.DeleteBookAsync(
                name);
            // End snippet
        }

        public void DeleteBook()
        {
            // Snippet: DeleteBook(string,CallSettings)
            LibraryServiceClient client = LibraryServiceClient.Create();
            string name = "";
            void response = client.DeleteBook(
                name);
            // End snippet
        }

        public async Task UpdateBookAsync()
        {
            // Snippet: UpdateBookAsync(string,Book,CallSettings)
            // Additional: UpdateBookAsync(string,Book,CancellationToken)
            LibraryServiceClient client = await LibraryServiceClient.CreateAsync();
            string name = "";
            Book book = new Book();
            Book response = await client.UpdateBookAsync(
                name, book);
            // End snippet
        }

        public void UpdateBook()
        {
            // Snippet: UpdateBook(string,Book,CallSettings)
            LibraryServiceClient client = LibraryServiceClient.Create();
            string name = "";
            Book book = new Book();
            Book response = client.UpdateBook(
                name, book);
            // End snippet
        }

        public async Task UpdateBookAsync()
        {
            // Snippet: UpdateBookAsync(string,Book,FieldMask,FieldMask,CallSettings)
            // Additional: UpdateBookAsync(string,Book,FieldMask,FieldMask,CancellationToken)
            LibraryServiceClient client = await LibraryServiceClient.CreateAsync();
            string name = "";
            Book book = new Book();
            FieldMask updateMask = new FieldMask();
            FieldMask physicalMask = new FieldMask();
            Book response = await client.UpdateBookAsync(
                name, book, updateMask, physicalMask);
            // End snippet
        }

        public void UpdateBook()
        {
            // Snippet: UpdateBook(string,Book,FieldMask,FieldMask,CallSettings)
            LibraryServiceClient client = LibraryServiceClient.Create();
            string name = "";
            Book book = new Book();
            FieldMask updateMask = new FieldMask();
            FieldMask physicalMask = new FieldMask();
            Book response = client.UpdateBook(
                name, book, updateMask, physicalMask);
            // End snippet
        }

        public async Task MoveBookAsync()
        {
            // Snippet: MoveBookAsync(string,string,CallSettings)
            // Additional: MoveBookAsync(string,string,CancellationToken)
            LibraryServiceClient client = await LibraryServiceClient.CreateAsync();
            string name = "";
            string otherShelfName = "";
            Book response = await client.MoveBookAsync(
                name, otherShelfName);
            // End snippet
        }

        public void MoveBook()
        {
            // Snippet: MoveBook(string,string,CallSettings)
            LibraryServiceClient client = LibraryServiceClient.Create();
            string name = "";
            string otherShelfName = "";
            Book response = client.MoveBook(
                name, otherShelfName);
            // End snippet
        }

        public async Task ListStringsAsync()
        {
            // Snippet: ListStringsAsync(string,int?,CallSettings)
            // Additional: ListStringsAsync(string,int?,CancellationToken)
            LibraryServiceClient client = await LibraryServiceClient.CreateAsync();
            string pageToken = null;
            int? pageSize = null;
            IPagedEnumerable<ListStringsResponse, string> response = await client.ListStringsAsync(
                pageToken, pageSize);
            // End snippet
        }

        public void ListStrings()
        {
            // Snippet: ListStrings(string,int?,CallSettings)
            LibraryServiceClient client = LibraryServiceClient.Create();
            string pageToken = null;
            int? pageSize = null;
            IPagedEnumerable<ListStringsResponse, string> response = client.ListStrings(
                pageToken, pageSize);
            // End snippet
        }

        public async Task AddCommentsAsync()
        {
            // Snippet: AddCommentsAsync(string,IEnumerable<Comment>,CallSettings)
            // Additional: AddCommentsAsync(string,IEnumerable<Comment>,CancellationToken)
            LibraryServiceClient client = await LibraryServiceClient.CreateAsync();
            string name = "";
            IEnumerable<Comment> comments = new List<Comment>();
            void response = await client.AddCommentsAsync(
                name, comments);
            // End snippet
        }

        public void AddComments()
        {
            // Snippet: AddComments(string,IEnumerable<Comment>,CallSettings)
            LibraryServiceClient client = LibraryServiceClient.Create();
            string name = "";
            IEnumerable<Comment> comments = new List<Comment>();
            void response = client.AddComments(
                name, comments);
            // End snippet
        }

        public async Task GetBookFromArchiveAsync()
        {
            // Snippet: GetBookFromArchiveAsync(string,CallSettings)
            // Additional: GetBookFromArchiveAsync(string,CancellationToken)
            LibraryServiceClient client = await LibraryServiceClient.CreateAsync();
            string name = "";
            Book response = await client.GetBookFromArchiveAsync(
                name);
            // End snippet
        }

        public void GetBookFromArchive()
        {
            // Snippet: GetBookFromArchive(string,CallSettings)
            LibraryServiceClient client = LibraryServiceClient.Create();
            string name = "";
            Book response = client.GetBookFromArchive(
                name);
            // End snippet
        }

        public async Task UpdateBookIndexAsync()
        {
            // Snippet: UpdateBookIndexAsync(string,string,IDictionary<string, string>,CallSettings)
            // Additional: UpdateBookIndexAsync(string,string,IDictionary<string, string>,CancellationToken)
            LibraryServiceClient client = await LibraryServiceClient.CreateAsync();
            string name = "";
            string indexName = "";
            IDictionary<string, string> indexMap = new Dictionary<string, string>();
            void response = await client.UpdateBookIndexAsync(
                name, indexName, indexMap);
            // End snippet
        }

        public void UpdateBookIndex()
        {
            // Snippet: UpdateBookIndex(string,string,IDictionary<string, string>,CallSettings)
            LibraryServiceClient client = LibraryServiceClient.Create();
            string name = "";
            string indexName = "";
            IDictionary<string, string> indexMap = new Dictionary<string, string>();
            void response = client.UpdateBookIndex(
                name, indexName, indexMap);
            // End snippet
        }

        public async Task AddTagAsync()
        {
            // Snippet: AddTagAsync(string,string,CallSettings)
            // Additional: AddTagAsync(string,string,CancellationToken)
            LibraryServiceClient client = await LibraryServiceClient.CreateAsync();
            string resource = "";
            string tag = "";
            AddTagResponse response = await client.AddTagAsync(
                resource, tag);
            // End snippet
        }

        public void AddTag()
        {
            // Snippet: AddTag(string,string,CallSettings)
            LibraryServiceClient client = LibraryServiceClient.Create();
            string resource = "";
            string tag = "";
            AddTagResponse response = client.AddTag(
                resource, tag);
            // End snippet
        }

    }

}
