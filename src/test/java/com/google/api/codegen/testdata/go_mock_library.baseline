============== file: cloud.google.com/go/library/apiv1/mock_test.go ==============
// Copyright 2016, Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// AUTO-GENERATED CODE. DO NOT EDIT.

package library

import (
    google_protobuf "github.com/golang/protobuf/ptypes/empty"
    librarypb "google.golang.org/genproto/googleapis/example/library/v1"
    longrunningpb "google.golang.org/genproto/googleapis/longrunning"
    taggerpb "google.golang.org/genproto/googleapis/tagger/v1"
)

import (
    "flag"
    "io"
    "log"
    "net"
    "os"
    "reflect"
    "testing"

    "golang.org/x/net/context"
    "google.golang.org/api/option"
    "google.golang.org/grpc"
    "google.golang.org/grpc/codes"
)

var _ = io.EOF

type mockLibraryServer struct {
    reqs []interface{}

    // If set, all calls return this error.
    err error

    // responses to return if err == nil
    resps []interface{}
}

func (s *mockLibraryServer) CreateShelf(_ context.Context, req *librarypb.CreateShelfRequest) (*librarypb.Shelf, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.Shelf), nil
}

func (s *mockLibraryServer) GetShelf(_ context.Context, req *librarypb.GetShelfRequest) (*librarypb.Shelf, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.Shelf), nil
}

func (s *mockLibraryServer) ListShelves(_ context.Context, req *librarypb.ListShelvesRequest) (*librarypb.ListShelvesResponse, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.ListShelvesResponse), nil
}

func (s *mockLibraryServer) DeleteShelf(_ context.Context, req *librarypb.DeleteShelfRequest) (*google_protobuf.Empty, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*google_protobuf.Empty), nil
}

func (s *mockLibraryServer) MergeShelves(_ context.Context, req *librarypb.MergeShelvesRequest) (*librarypb.Shelf, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.Shelf), nil
}

func (s *mockLibraryServer) CreateBook(_ context.Context, req *librarypb.CreateBookRequest) (*librarypb.Book, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.Book), nil
}

func (s *mockLibraryServer) PublishSeries(_ context.Context, req *librarypb.PublishSeriesRequest) (*librarypb.PublishSeriesResponse, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.PublishSeriesResponse), nil
}

func (s *mockLibraryServer) GetBook(_ context.Context, req *librarypb.GetBookRequest) (*librarypb.Book, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.Book), nil
}

func (s *mockLibraryServer) ListBooks(_ context.Context, req *librarypb.ListBooksRequest) (*librarypb.ListBooksResponse, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.ListBooksResponse), nil
}

func (s *mockLibraryServer) DeleteBook(_ context.Context, req *librarypb.DeleteBookRequest) (*google_protobuf.Empty, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*google_protobuf.Empty), nil
}

func (s *mockLibraryServer) UpdateBook(_ context.Context, req *librarypb.UpdateBookRequest) (*librarypb.Book, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.Book), nil
}

func (s *mockLibraryServer) MoveBook(_ context.Context, req *librarypb.MoveBookRequest) (*librarypb.Book, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.Book), nil
}

func (s *mockLibraryServer) ListStrings(_ context.Context, req *librarypb.ListStringsRequest) (*librarypb.ListStringsResponse, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.ListStringsResponse), nil
}

func (s *mockLibraryServer) AddComments(_ context.Context, req *librarypb.AddCommentsRequest) (*google_protobuf.Empty, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*google_protobuf.Empty), nil
}

func (s *mockLibraryServer) GetBookFromArchive(_ context.Context, req *librarypb.GetBookFromArchiveRequest) (*librarypb.BookFromArchive, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.BookFromArchive), nil
}

func (s *mockLibraryServer) GetBookFromAnywhere(_ context.Context, req *librarypb.GetBookFromAnywhereRequest) (*librarypb.BookFromAnywhere, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.BookFromAnywhere), nil
}

func (s *mockLibraryServer) UpdateBookIndex(_ context.Context, req *librarypb.UpdateBookIndexRequest) (*google_protobuf.Empty, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*google_protobuf.Empty), nil
}

func (s *mockLibraryServer) StreamShelves(req *librarypb.StreamShelvesRequest, stream librarypb.LibraryService_StreamShelvesServer) error {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return s.err
    }
    for _, v := range s.resps {
        if err := stream.Send(v.(*librarypb.StreamShelvesResponse)); err != nil {
            return err
        }
    }
    return nil
}

func (s *mockLibraryServer) StreamBooks(req *librarypb.StreamBooksRequest, stream librarypb.LibraryService_StreamBooksServer) error {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return s.err
    }
    for _, v := range s.resps {
        if err := stream.Send(v.(*librarypb.Book)); err != nil {
            return err
        }
    }
    return nil
}

func (s *mockLibraryServer) DiscussBook(stream librarypb.LibraryService_DiscussBookServer) error {
    if s.err != nil {
        return s.err
    }

    ch := make(chan error, 2)
    go func() {
        for {
            if req, err := stream.Recv(); err == io.EOF {
                ch <- nil
                return
            } else if err != nil {
                ch <- err
                return
            } else {
                s.reqs = append(s.reqs, req)
            }
        }
    }()
    go func() {
        for _, v := range s.resps {
            if err := stream.Send(v.(*librarypb.Comment)); err != nil {
                ch <- err
                return
            }
        }
        ch <- nil
    }()

    // Doesn't really matter which one we get.
    err := <-ch
    if err2 := <-ch; err == nil {
        err = err2
    }
    return err
}

func (s *mockLibraryServer) FindRelatedBooks(_ context.Context, req *librarypb.FindRelatedBooksRequest) (*librarypb.FindRelatedBooksResponse, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.FindRelatedBooksResponse), nil
}

func (s *mockLibraryServer) AddTag(_ context.Context, req *taggerpb.AddTagRequest) (*taggerpb.AddTagResponse, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*taggerpb.AddTagResponse), nil
}

func (s *mockLibraryServer) GetBigBook(_ context.Context, req *librarypb.GetBookRequest) (*longrunningpb.Operation, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*longrunningpb.Operation), nil
}

type mockLabelerServer struct {
    reqs []interface{}

    // If set, all calls return this error.
    err error

    // responses to return if err == nil
    resps []interface{}
}

func (s *mockLabelerServer) AddLabel(_ context.Context, req *taggerpb.AddLabelRequest) (*taggerpb.AddLabelResponse, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*taggerpb.AddLabelResponse), nil
}


// clientOpt is the option tests should use to connect to the test server.
// It is initialized by TestMain.
var clientOpt option.ClientOption

var (
    mockLibrary mockLibraryServer
    mockLabeler mockLabelerServer
)

func TestMain(m *testing.M) {
    flag.Parse()

    serv := grpc.NewServer()
    librarypb.RegisterLibraryServiceServer(serv, &mockLibrary)
    taggerpb.RegisterLabelerServer(serv, &mockLabeler)

    lis, err := net.Listen("tcp", "localhost:0")
    if err != nil {
        log.Fatal(err)
    }
    go serv.Serve(lis)

    conn, err := grpc.Dial(lis.Addr().String(), grpc.WithInsecure())
    if err != nil {
        log.Fatal(err)
    }
    clientOpt = option.WithGRPCConn(conn)

    os.Exit(m.Run())
}

func TestLibraryServiceCreateShelfError(t *testing.T) {
    errCode := codes.Internal
    mockLibrary.err = grpc.Errorf(errCode, "test error")

    c, err := NewClient(context.Background(), clientOpt)
    if err != nil {
        t.Fatal(err)
    }

    var req *librarypb.CreateShelfRequest

    reflect.ValueOf(&req).Elem().Set(reflect.New(reflect.TypeOf(req).Elem()))

    _, err = c.CreateShelf(context.Background(), req)

    if c := grpc.Code(err); c != errCode {
        t.Errorf("got error code %q, want %q", c, errCode)
    }
}
func TestLibraryServiceGetShelfError(t *testing.T) {
    errCode := codes.Internal
    mockLibrary.err = grpc.Errorf(errCode, "test error")

    c, err := NewClient(context.Background(), clientOpt)
    if err != nil {
        t.Fatal(err)
    }

    var req *librarypb.GetShelfRequest

    reflect.ValueOf(&req).Elem().Set(reflect.New(reflect.TypeOf(req).Elem()))

    _, err = c.GetShelf(context.Background(), req)

    if c := grpc.Code(err); c != errCode {
        t.Errorf("got error code %q, want %q", c, errCode)
    }
}
func TestLibraryServiceListShelvesError(t *testing.T) {
    errCode := codes.Internal
    mockLibrary.err = grpc.Errorf(errCode, "test error")

    c, err := NewClient(context.Background(), clientOpt)
    if err != nil {
        t.Fatal(err)
    }

    var req *librarypb.ListShelvesRequest

    reflect.ValueOf(&req).Elem().Set(reflect.New(reflect.TypeOf(req).Elem()))

    _, err = c.ListShelves(context.Background(), req).Next()

    if c := grpc.Code(err); c != errCode {
        t.Errorf("got error code %q, want %q", c, errCode)
    }
}
func TestLibraryServiceDeleteShelfError(t *testing.T) {
    errCode := codes.Internal
    mockLibrary.err = grpc.Errorf(errCode, "test error")

    c, err := NewClient(context.Background(), clientOpt)
    if err != nil {
        t.Fatal(err)
    }

    var req *librarypb.DeleteShelfRequest

    reflect.ValueOf(&req).Elem().Set(reflect.New(reflect.TypeOf(req).Elem()))

    err = c.DeleteShelf(context.Background(), req)

    if c := grpc.Code(err); c != errCode {
        t.Errorf("got error code %q, want %q", c, errCode)
    }
}
func TestLibraryServiceMergeShelvesError(t *testing.T) {
    errCode := codes.Internal
    mockLibrary.err = grpc.Errorf(errCode, "test error")

    c, err := NewClient(context.Background(), clientOpt)
    if err != nil {
        t.Fatal(err)
    }

    var req *librarypb.MergeShelvesRequest

    reflect.ValueOf(&req).Elem().Set(reflect.New(reflect.TypeOf(req).Elem()))

    _, err = c.MergeShelves(context.Background(), req)

    if c := grpc.Code(err); c != errCode {
        t.Errorf("got error code %q, want %q", c, errCode)
    }
}
func TestLibraryServiceCreateBookError(t *testing.T) {
    errCode := codes.Internal
    mockLibrary.err = grpc.Errorf(errCode, "test error")

    c, err := NewClient(context.Background(), clientOpt)
    if err != nil {
        t.Fatal(err)
    }

    var req *librarypb.CreateBookRequest

    reflect.ValueOf(&req).Elem().Set(reflect.New(reflect.TypeOf(req).Elem()))

    _, err = c.CreateBook(context.Background(), req)

    if c := grpc.Code(err); c != errCode {
        t.Errorf("got error code %q, want %q", c, errCode)
    }
}
func TestLibraryServicePublishSeriesError(t *testing.T) {
    errCode := codes.Internal
    mockLibrary.err = grpc.Errorf(errCode, "test error")

    c, err := NewClient(context.Background(), clientOpt)
    if err != nil {
        t.Fatal(err)
    }

    var req *librarypb.PublishSeriesRequest

    reflect.ValueOf(&req).Elem().Set(reflect.New(reflect.TypeOf(req).Elem()))

    _, err = c.PublishSeries(context.Background(), req)

    if c := grpc.Code(err); c != errCode {
        t.Errorf("got error code %q, want %q", c, errCode)
    }
}
func TestLibraryServiceGetBookError(t *testing.T) {
    errCode := codes.Internal
    mockLibrary.err = grpc.Errorf(errCode, "test error")

    c, err := NewClient(context.Background(), clientOpt)
    if err != nil {
        t.Fatal(err)
    }

    var req *librarypb.GetBookRequest

    reflect.ValueOf(&req).Elem().Set(reflect.New(reflect.TypeOf(req).Elem()))

    _, err = c.GetBook(context.Background(), req)

    if c := grpc.Code(err); c != errCode {
        t.Errorf("got error code %q, want %q", c, errCode)
    }
}
func TestLibraryServiceListBooksError(t *testing.T) {
    errCode := codes.Internal
    mockLibrary.err = grpc.Errorf(errCode, "test error")

    c, err := NewClient(context.Background(), clientOpt)
    if err != nil {
        t.Fatal(err)
    }

    var req *librarypb.ListBooksRequest

    reflect.ValueOf(&req).Elem().Set(reflect.New(reflect.TypeOf(req).Elem()))

    _, err = c.ListBooks(context.Background(), req).Next()

    if c := grpc.Code(err); c != errCode {
        t.Errorf("got error code %q, want %q", c, errCode)
    }
}
func TestLibraryServiceDeleteBookError(t *testing.T) {
    errCode := codes.Internal
    mockLibrary.err = grpc.Errorf(errCode, "test error")

    c, err := NewClient(context.Background(), clientOpt)
    if err != nil {
        t.Fatal(err)
    }

    var req *librarypb.DeleteBookRequest

    reflect.ValueOf(&req).Elem().Set(reflect.New(reflect.TypeOf(req).Elem()))

    err = c.DeleteBook(context.Background(), req)

    if c := grpc.Code(err); c != errCode {
        t.Errorf("got error code %q, want %q", c, errCode)
    }
}
func TestLibraryServiceUpdateBookError(t *testing.T) {
    errCode := codes.Internal
    mockLibrary.err = grpc.Errorf(errCode, "test error")

    c, err := NewClient(context.Background(), clientOpt)
    if err != nil {
        t.Fatal(err)
    }

    var req *librarypb.UpdateBookRequest

    reflect.ValueOf(&req).Elem().Set(reflect.New(reflect.TypeOf(req).Elem()))

    _, err = c.UpdateBook(context.Background(), req)

    if c := grpc.Code(err); c != errCode {
        t.Errorf("got error code %q, want %q", c, errCode)
    }
}
func TestLibraryServiceMoveBookError(t *testing.T) {
    errCode := codes.Internal
    mockLibrary.err = grpc.Errorf(errCode, "test error")

    c, err := NewClient(context.Background(), clientOpt)
    if err != nil {
        t.Fatal(err)
    }

    var req *librarypb.MoveBookRequest

    reflect.ValueOf(&req).Elem().Set(reflect.New(reflect.TypeOf(req).Elem()))

    _, err = c.MoveBook(context.Background(), req)

    if c := grpc.Code(err); c != errCode {
        t.Errorf("got error code %q, want %q", c, errCode)
    }
}
func TestLibraryServiceListStringsError(t *testing.T) {
    errCode := codes.Internal
    mockLibrary.err = grpc.Errorf(errCode, "test error")

    c, err := NewClient(context.Background(), clientOpt)
    if err != nil {
        t.Fatal(err)
    }

    var req *librarypb.ListStringsRequest

    reflect.ValueOf(&req).Elem().Set(reflect.New(reflect.TypeOf(req).Elem()))

    _, err = c.ListStrings(context.Background(), req).Next()

    if c := grpc.Code(err); c != errCode {
        t.Errorf("got error code %q, want %q", c, errCode)
    }
}
func TestLibraryServiceAddCommentsError(t *testing.T) {
    errCode := codes.Internal
    mockLibrary.err = grpc.Errorf(errCode, "test error")

    c, err := NewClient(context.Background(), clientOpt)
    if err != nil {
        t.Fatal(err)
    }

    var req *librarypb.AddCommentsRequest

    reflect.ValueOf(&req).Elem().Set(reflect.New(reflect.TypeOf(req).Elem()))

    err = c.AddComments(context.Background(), req)

    if c := grpc.Code(err); c != errCode {
        t.Errorf("got error code %q, want %q", c, errCode)
    }
}
func TestLibraryServiceGetBookFromArchiveError(t *testing.T) {
    errCode := codes.Internal
    mockLibrary.err = grpc.Errorf(errCode, "test error")

    c, err := NewClient(context.Background(), clientOpt)
    if err != nil {
        t.Fatal(err)
    }

    var req *librarypb.GetBookFromArchiveRequest

    reflect.ValueOf(&req).Elem().Set(reflect.New(reflect.TypeOf(req).Elem()))

    _, err = c.GetBookFromArchive(context.Background(), req)

    if c := grpc.Code(err); c != errCode {
        t.Errorf("got error code %q, want %q", c, errCode)
    }
}
func TestLibraryServiceGetBookFromAnywhereError(t *testing.T) {
    errCode := codes.Internal
    mockLibrary.err = grpc.Errorf(errCode, "test error")

    c, err := NewClient(context.Background(), clientOpt)
    if err != nil {
        t.Fatal(err)
    }

    var req *librarypb.GetBookFromAnywhereRequest

    reflect.ValueOf(&req).Elem().Set(reflect.New(reflect.TypeOf(req).Elem()))

    _, err = c.GetBookFromAnywhere(context.Background(), req)

    if c := grpc.Code(err); c != errCode {
        t.Errorf("got error code %q, want %q", c, errCode)
    }
}
func TestLibraryServiceUpdateBookIndexError(t *testing.T) {
    errCode := codes.Internal
    mockLibrary.err = grpc.Errorf(errCode, "test error")

    c, err := NewClient(context.Background(), clientOpt)
    if err != nil {
        t.Fatal(err)
    }

    var req *librarypb.UpdateBookIndexRequest

    reflect.ValueOf(&req).Elem().Set(reflect.New(reflect.TypeOf(req).Elem()))

    err = c.UpdateBookIndex(context.Background(), req)

    if c := grpc.Code(err); c != errCode {
        t.Errorf("got error code %q, want %q", c, errCode)
    }
}
func TestLibraryServiceStreamShelvesError(t *testing.T) {
    errCode := codes.Internal
    mockLibrary.err = grpc.Errorf(errCode, "test error")

    c, err := NewClient(context.Background(), clientOpt)
    if err != nil {
        t.Fatal(err)
    }

    var req *librarypb.StreamShelvesRequest

    reflect.ValueOf(&req).Elem().Set(reflect.New(reflect.TypeOf(req).Elem()))

    stream, err := c.StreamShelves(context.Background())
    if err != nil {
        t.Fatal(err)
    }
    _, err = stream.Recv()

    if c := grpc.Code(err); c != errCode {
        t.Errorf("got error code %q, want %q", c, errCode)
    }
}
func TestLibraryServiceStreamBooksError(t *testing.T) {
    errCode := codes.Internal
    mockLibrary.err = grpc.Errorf(errCode, "test error")

    c, err := NewClient(context.Background(), clientOpt)
    if err != nil {
        t.Fatal(err)
    }

    var req *librarypb.StreamBooksRequest

    reflect.ValueOf(&req).Elem().Set(reflect.New(reflect.TypeOf(req).Elem()))

    stream, err := c.StreamBooks(context.Background())
    if err != nil {
        t.Fatal(err)
    }
    _, err = stream.Recv()

    if c := grpc.Code(err); c != errCode {
        t.Errorf("got error code %q, want %q", c, errCode)
    }
}
func TestLibraryServiceDiscussBookError(t *testing.T) {
    errCode := codes.Internal
    mockLibrary.err = grpc.Errorf(errCode, "test error")

    c, err := NewClient(context.Background(), clientOpt)
    if err != nil {
        t.Fatal(err)
    }

    var req *librarypb.DiscussBookRequest

    reflect.ValueOf(&req).Elem().Set(reflect.New(reflect.TypeOf(req).Elem()))

    stream, err := c.DiscussBook(context.Background())
    if err != nil {
        t.Fatal(err)
    }
    _, err = stream.Recv()

    if c := grpc.Code(err); c != errCode {
        t.Errorf("got error code %q, want %q", c, errCode)
    }
}
func TestLibraryServiceFindRelatedBooksError(t *testing.T) {
    errCode := codes.Internal
    mockLibrary.err = grpc.Errorf(errCode, "test error")

    c, err := NewClient(context.Background(), clientOpt)
    if err != nil {
        t.Fatal(err)
    }

    var req *librarypb.FindRelatedBooksRequest

    reflect.ValueOf(&req).Elem().Set(reflect.New(reflect.TypeOf(req).Elem()))

    _, err = c.FindRelatedBooks(context.Background(), req).Next()

    if c := grpc.Code(err); c != errCode {
        t.Errorf("got error code %q, want %q", c, errCode)
    }
}
func TestLabelerAddLabelError(t *testing.T) {
    errCode := codes.Internal
    mockLabeler.err = grpc.Errorf(errCode, "test error")

    c, err := NewClient(context.Background(), clientOpt)
    if err != nil {
        t.Fatal(err)
    }

    var req *taggerpb.AddLabelRequest

    reflect.ValueOf(&req).Elem().Set(reflect.New(reflect.TypeOf(req).Elem()))

    _, err = c.addLabel(context.Background(), req)

    if c := grpc.Code(err); c != errCode {
        t.Errorf("got error code %q, want %q", c, errCode)
    }
}
func TestLibraryServiceGetBigBookError(t *testing.T) {
    errCode := codes.Internal
    mockLibrary.err = grpc.Errorf(errCode, "test error")

    c, err := NewClient(context.Background(), clientOpt)
    if err != nil {
        t.Fatal(err)
    }

    var req *librarypb.GetBookRequest

    reflect.ValueOf(&req).Elem().Set(reflect.New(reflect.TypeOf(req).Elem()))

    _, err = c.GetBigBook(context.Background(), req)

    if c := grpc.Code(err); c != errCode {
        t.Errorf("got error code %q, want %q", c, errCode)
    }
}
