============== file: cloud.google.com/go/library/apiv1/mock_test.go ==============
// Copyright 2016, Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// AUTO-GENERATED CODE. DO NOT EDIT.

package library

import (
    google_protobuf "github.com/golang/protobuf/ptypes/empty"
    librarypb "google.golang.org/genproto/googleapis/example/library/v1"
    longrunningpb "google.golang.org/genproto/googleapis/longrunning"
    taggerpb "google.golang.org/genproto/googleapis/tagger/v1"
)

import (
    "io"

    "golang.org/x/net/context"
)

var _ = io.EOF

type MockLibraryServiceImpl struct {
    reqs []interface{}

    // If set, all calls return this error.
    err error

    // responses to return if err == nil
    resps []interface{}
}

var _ librarypb.LibraryServiceServer = &MockLibraryServiceImpl{}

func (s *MockLibraryServiceImpl) CreateShelf(_ context.Context, req *librarypb.CreateShelfRequest) (*librarypb.Shelf, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.Shelf), nil
}

func (s *MockLibraryServiceImpl) GetShelf(_ context.Context, req *librarypb.GetShelfRequest) (*librarypb.Shelf, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.Shelf), nil
}

func (s *MockLibraryServiceImpl) ListShelves(_ context.Context, req *librarypb.ListShelvesRequest) (*librarypb.ListShelvesResponse, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.ListShelvesResponse), nil
}

func (s *MockLibraryServiceImpl) DeleteShelf(_ context.Context, req *librarypb.DeleteShelfRequest) (*google_protobuf.Empty, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*google_protobuf.Empty), nil
}

func (s *MockLibraryServiceImpl) MergeShelves(_ context.Context, req *librarypb.MergeShelvesRequest) (*librarypb.Shelf, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.Shelf), nil
}

func (s *MockLibraryServiceImpl) CreateBook(_ context.Context, req *librarypb.CreateBookRequest) (*librarypb.Book, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.Book), nil
}

func (s *MockLibraryServiceImpl) PublishSeries(_ context.Context, req *librarypb.PublishSeriesRequest) (*librarypb.PublishSeriesResponse, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.PublishSeriesResponse), nil
}

func (s *MockLibraryServiceImpl) GetBook(_ context.Context, req *librarypb.GetBookRequest) (*librarypb.Book, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.Book), nil
}

func (s *MockLibraryServiceImpl) ListBooks(_ context.Context, req *librarypb.ListBooksRequest) (*librarypb.ListBooksResponse, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.ListBooksResponse), nil
}

func (s *MockLibraryServiceImpl) DeleteBook(_ context.Context, req *librarypb.DeleteBookRequest) (*google_protobuf.Empty, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*google_protobuf.Empty), nil
}

func (s *MockLibraryServiceImpl) UpdateBook(_ context.Context, req *librarypb.UpdateBookRequest) (*librarypb.Book, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.Book), nil
}

func (s *MockLibraryServiceImpl) MoveBook(_ context.Context, req *librarypb.MoveBookRequest) (*librarypb.Book, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.Book), nil
}

func (s *MockLibraryServiceImpl) ListStrings(_ context.Context, req *librarypb.ListStringsRequest) (*librarypb.ListStringsResponse, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.ListStringsResponse), nil
}

func (s *MockLibraryServiceImpl) AddComments(_ context.Context, req *librarypb.AddCommentsRequest) (*google_protobuf.Empty, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*google_protobuf.Empty), nil
}

func (s *MockLibraryServiceImpl) GetBookFromArchive(_ context.Context, req *librarypb.GetBookFromArchiveRequest) (*librarypb.Book, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.Book), nil
}

func (s *MockLibraryServiceImpl) UpdateBookIndex(_ context.Context, req *librarypb.UpdateBookIndexRequest) (*google_protobuf.Empty, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*google_protobuf.Empty), nil
}

func (s *MockLibraryServiceImpl) StreamShelves(req *librarypb.StreamShelvesRequest, stream librarypb.LibraryService_StreamShelvesServer) error {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return s.err
    }
    for _, v := range s.resps {
        if err := stream.Send(v.(*librarypb.StreamShelvesResponse)); err != nil {
            return err
        }
    }
    return nil
}

func (s *MockLibraryServiceImpl) StreamBooks(req *librarypb.StreamBooksRequest, stream librarypb.LibraryService_StreamBooksServer) error {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return s.err
    }
    for _, v := range s.resps {
        if err := stream.Send(v.(*librarypb.Book)); err != nil {
            return err
        }
    }
    return nil
}

func (s *MockLibraryServiceImpl) DiscussBook(stream librarypb.LibraryService_DiscussBookServer) error {
    if s.err != nil {
        return s.err
    }

    ch := make(chan error, 2)
    go func() {
        for {
            if req, err := stream.Recv(); err == io.EOF {
                ch <- nil
                return
            } else if err != nil {
                ch <- err
                return
            } else {
                s.reqs = append(s.reqs, req)
            }
        }
    }()
    go func() {
        for _, v := range s.resps {
            if err := stream.Send(v.(*librarypb.Comment)); err != nil {
                ch <- err
                return
            }
        }
        ch <- nil
    }()

    // Doesn't really matter which one we get.
    err := <-ch
    if err2 := <-ch; err == nil {
        err = err2
    }
    return err
}

func (s *MockLibraryServiceImpl) FindRelatedBooks(_ context.Context, req *librarypb.FindRelatedBooksRequest) (*librarypb.FindRelatedBooksResponse, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*librarypb.FindRelatedBooksResponse), nil
}

func (s *MockLibraryServiceImpl) AddTag(_ context.Context, req *taggerpb.AddTagRequest) (*taggerpb.AddTagResponse, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*taggerpb.AddTagResponse), nil
}

func (s *MockLibraryServiceImpl) GetBigBook(_ context.Context, req *librarypb.GetBookRequest) (*longrunningpb.Operation, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*longrunningpb.Operation), nil
}

type MockLabelerImpl struct {
    reqs []interface{}

    // If set, all calls return this error.
    err error

    // responses to return if err == nil
    resps []interface{}
}

var _ taggerpb.LabelerServer = &MockLabelerImpl{}

func (s *MockLabelerImpl) AddLabel(_ context.Context, req *taggerpb.AddLabelRequest) (*taggerpb.AddLabelResponse, error) {
    s.reqs = append(s.reqs, req)
    if s.err != nil {
        return nil, s.err
    }
    return s.resps[0].(*taggerpb.AddLabelResponse), nil
}

