
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Autoscaler API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/autoscaler
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/autoscaler/v1beta2/java
 */
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
=======

import com.google.api.client.auth.oauth2.Credential;
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
import com.google.api.services.autoscaler.v1beta2.Autoscaler;
import com.google.api.services.autoscaler.v1beta2.Autoscaler.Autoscalers.Delete;
import com.google.api.services.autoscaler.v1beta2.model.Operation;
=======
import com.google.api.services.autoscaler.Autoscaler;
import com.google.api.services.autoscaler.model.Operation;
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;


public class AutoscalerExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // Project ID of Autoscaler resource.
    String project = ""; // TODO: Update field(s).

    // Zone name of Autoscaler resource.
    String zone = ""; // TODO: Update field(s).

    // Name of the Autoscaler resource.
    String autoscaler = ""; // TODO: Update field(s).

    Autoscaler service = createService();
    Delete request = service.autoscalers().delete(project, zone, autoscaler);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Autoscaler createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Autoscaler.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new AutoscalerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {

    // TODO: Implement this function to get authentication credentials.
    // See https://foo.com/bar
    // Authorize using one of the following scopes in order to use this method:
    //   https://www.googleapis.com/auth/compute
    Credential credential = getAuth();

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
    Autoscaler autoscalerService = new Autoscaler.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

    // * Project ID of Autoscaler resource.
    String project = "{MY-PROJECT}";

    // * Zone name of Autoscaler resource.
    String zone = "{MY-ZONE}";

    // * Name of the Autoscaler resource.
    String autoscaler = "{MY-AUTOSCALER}";

    Autoscaler.Autoscalers.Delete request = autoscalerService.autoscalers().delete(project, zone, autoscaler);
    Operation response = request.execute();

    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Autoscaler API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/autoscaler
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/autoscaler/v1beta2/java
 */
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
=======

import com.google.api.client.auth.oauth2.Credential;
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
import com.google.api.services.autoscaler.v1beta2.Autoscaler;
import com.google.api.services.autoscaler.v1beta2.Autoscaler.Autoscalers.Get;
=======
import com.google.api.services.autoscaler.Autoscaler;
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;


public class AutoscalerExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // Project ID of Autoscaler resource.
    String project = ""; // TODO: Update field(s).

    // Zone name of Autoscaler resource.
    String zone = ""; // TODO: Update field(s).

    // Name of the Autoscaler resource.
    String autoscaler = ""; // TODO: Update field(s).

    Autoscaler service = createService();
    Get request = service.autoscalers().get(project, zone, autoscaler);
    com.google.api.services.autoscaler.v1beta2.model.Autoscaler response = request.execute();
    System.out.println(response);
  }

  public Autoscaler createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Autoscaler.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new AutoscalerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {

    // TODO: Implement this function to get authentication credentials.
    // See https://foo.com/bar
    // Authorize using one of the following scopes in order to use this method:
    //   https://www.googleapis.com/auth/compute
    //   https://www.googleapis.com/auth/compute.readonly
    Credential credential = getAuth();

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
    Autoscaler autoscalerService = new Autoscaler.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // TODO: Change placeholders below to appropriate parameter values for the 'get' method:

    // * Project ID of Autoscaler resource.
    String project = "{MY-PROJECT}";

    // * Zone name of Autoscaler resource.
    String zone = "{MY-ZONE}";

    // * Name of the Autoscaler resource.
    String autoscaler = "{MY-AUTOSCALER}";

    Autoscaler.Autoscalers.Get request = autoscalerService.autoscalers().get(project, zone, autoscaler);
    com.google.api.services.autoscaler.model.Autoscaler response = request.execute();

    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Autoscaler API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/autoscaler
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/autoscaler/v1beta2/java
 */
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
=======

import com.google.api.client.auth.oauth2.Credential;
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
import com.google.api.services.autoscaler.v1beta2.Autoscaler;
import com.google.api.services.autoscaler.v1beta2.Autoscaler.Autoscalers.Insert;
import com.google.api.services.autoscaler.v1beta2.model.Operation;
=======
import com.google.api.services.autoscaler.Autoscaler;
import com.google.api.services.autoscaler.model.Operation;
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;


public class AutoscalerExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    com.google.api.services.autoscaler.v1beta2.model.Autoscaler requestBody = new com.google.api.services.autoscaler.v1beta2.model.Autoscaler();

    // Project ID of Autoscaler resource.
    String project = ""; // TODO: Update field(s).

    // Zone name of Autoscaler resource.
    String zone = ""; // TODO: Update field(s).

    Autoscaler service = createService();
    Insert request = service.autoscalers().insert(project, zone, requestBody);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Autoscaler createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Autoscaler.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new AutoscalerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {

    // TODO: Implement this function to get authentication credentials.
    // See https://foo.com/bar
    // Authorize using one of the following scopes in order to use this method:
    //   https://www.googleapis.com/auth/compute
    Credential credential = getAuth();

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
    Autoscaler autoscalerService = new Autoscaler.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

    // * Project ID of Autoscaler resource.
    String project = "{MY-PROJECT}";

    // * Zone name of Autoscaler resource.
    String zone = "{MY-ZONE}";

    com.google.api.services.autoscaler.model.Autoscaler content = new com.google.api.services.autoscaler.model.Autoscaler();
    // TODO: Add code here to assign values to desired fields of the 'content' object

    Autoscaler.Autoscalers.Insert request = autoscalerService.autoscalers().insert(project, zone, content);
    Operation response = request.execute();

    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Autoscaler API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/autoscaler
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/autoscaler/v1beta2/java
 */
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
=======

import com.google.api.client.auth.oauth2.Credential;
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
import com.google.api.services.autoscaler.v1beta2.Autoscaler;
import com.google.api.services.autoscaler.v1beta2.Autoscaler.Autoscalers.List;
import com.google.api.services.autoscaler.v1beta2.model.AutoscalerListResponse;
=======
import com.google.api.services.autoscaler.Autoscaler;
import com.google.api.services.autoscaler.model.AutoscalerListResponse;
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;


public class AutoscalerExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // Project ID of Autoscaler resource.
    String project = ""; // TODO: Update field(s).

    // Zone name of Autoscaler resource.
    String zone = ""; // TODO: Update field(s).

    Autoscaler service = createService();
    List request = service.autoscalers().list(project, zone);
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {

    // TODO: Implement this function to get authentication credentials.
    // See https://foo.com/bar
    // Authorize using one of the following scopes in order to use this method:
    //   https://www.googleapis.com/auth/compute
    //   https://www.googleapis.com/auth/compute.readonly
    Credential credential = getAuth();

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
    Autoscaler autoscalerService = new Autoscaler.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // TODO: Change placeholders below to appropriate parameter values for the 'list' method:

    // * Project ID of Autoscaler resource.
    String project = "{MY-PROJECT}";

    // * Zone name of Autoscaler resource.
    String zone = "{MY-ZONE}";

    Autoscaler.Autoscalers.List request = autoscalerService.autoscalers().list(project, zone);
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    AutoscalerListResponse response;
    do {
      response = request.execute();
      if (response.getItems() == null) {
        continue;
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
=======

      for (com.google.api.services.autoscaler.model.Autoscaler autoscaler : response.getItems()) {
        // TODO: Add code here to process each 'autoscaler' resource
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
      }
      for (com.google.api.services.autoscaler.v1beta2.model.Autoscaler item : response.getItems()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Autoscaler createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Autoscaler.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new AutoscalerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Autoscaler API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/autoscaler
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/autoscaler/v1beta2/java
 */
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
=======

import com.google.api.client.auth.oauth2.Credential;
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
import com.google.api.services.autoscaler.v1beta2.Autoscaler;
import com.google.api.services.autoscaler.v1beta2.Autoscaler.Autoscalers.Patch;
import com.google.api.services.autoscaler.v1beta2.model.Operation;
=======
import com.google.api.services.autoscaler.Autoscaler;
import com.google.api.services.autoscaler.model.Operation;
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;


public class AutoscalerExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    com.google.api.services.autoscaler.v1beta2.model.Autoscaler requestBody = new com.google.api.services.autoscaler.v1beta2.model.Autoscaler();

    // Project ID of Autoscaler resource.
    String project = ""; // TODO: Update field(s).

    // Zone name of Autoscaler resource.
    String zone = ""; // TODO: Update field(s).

    // Name of the Autoscaler resource.
    String autoscaler = ""; // TODO: Update field(s).

    Autoscaler service = createService();
    Patch request = service.autoscalers().patch(project, zone, autoscaler, requestBody);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Autoscaler createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Autoscaler.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new AutoscalerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {

    // TODO: Implement this function to get authentication credentials.
    // See https://foo.com/bar
    // Authorize using one of the following scopes in order to use this method:
    //   https://www.googleapis.com/auth/compute
    Credential credential = getAuth();

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
    Autoscaler autoscalerService = new Autoscaler.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // TODO: Change placeholders below to appropriate parameter values for the 'patch' method:

    // * Project ID of Autoscaler resource.
    String project = "{MY-PROJECT}";

    // * Zone name of Autoscaler resource.
    String zone = "{MY-ZONE}";

    // * Name of the Autoscaler resource.
    String autoscaler = "{MY-AUTOSCALER}";

    com.google.api.services.autoscaler.model.Autoscaler content = new com.google.api.services.autoscaler.model.Autoscaler();
    // TODO: Add code here to assign values to desired fields of the 'content' object to be changed

    Autoscaler.Autoscalers.Patch request = autoscalerService.autoscalers().patch(project, zone, autoscaler, content);
    Operation response = request.execute();

    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Autoscaler API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/autoscaler
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/autoscaler/v1beta2/java
 */
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
=======

import com.google.api.client.auth.oauth2.Credential;
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
import com.google.api.services.autoscaler.v1beta2.Autoscaler;
import com.google.api.services.autoscaler.v1beta2.Autoscaler.Autoscalers.Update;
import com.google.api.services.autoscaler.v1beta2.model.Operation;
=======
import com.google.api.services.autoscaler.Autoscaler;
import com.google.api.services.autoscaler.model.Operation;
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;


public class AutoscalerExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {
    // TODO: Assign desired fields.
    com.google.api.services.autoscaler.v1beta2.model.Autoscaler requestBody = new com.google.api.services.autoscaler.v1beta2.model.Autoscaler();

    // Project ID of Autoscaler resource.
    String project = ""; // TODO: Update field(s).

    // Zone name of Autoscaler resource.
    String zone = ""; // TODO: Update field(s).

    // Name of the Autoscaler resource.
    String autoscaler = ""; // TODO: Update field(s).

    Autoscaler service = createService();
    Update request = service.autoscalers().update(project, zone, autoscaler, requestBody);
    Operation response = request.execute();
    System.out.println(response);
  }

  public Autoscaler createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Autoscaler.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new AutoscalerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {

    // TODO: Implement this function to get authentication credentials.
    // See https://foo.com/bar
    // Authorize using one of the following scopes in order to use this method:
    //   https://www.googleapis.com/auth/compute
    Credential credential = getAuth();

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
    Autoscaler autoscalerService = new Autoscaler.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // TODO: Change placeholders below to appropriate parameter values for the 'update' method:

    // * Project ID of Autoscaler resource.
    String project = "{MY-PROJECT}";

    // * Zone name of Autoscaler resource.
    String zone = "{MY-ZONE}";

    // * Name of the Autoscaler resource.
    String autoscaler = "{MY-AUTOSCALER}";

    com.google.api.services.autoscaler.model.Autoscaler content = new com.google.api.services.autoscaler.model.Autoscaler();
    // TODO: Add code here to assign values to desired fields of the 'content' object

    Autoscaler.Autoscalers.Update request = autoscalerService.autoscalers().update(project, zone, autoscaler, content);
    Operation response = request.execute();

    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Autoscaler API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/autoscaler
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/autoscaler/v1beta2/java
 */
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
=======

import com.google.api.client.auth.oauth2.Credential;
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.autoscaler.v1beta2.Autoscaler;
import com.google.api.services.autoscaler.v1beta2.Autoscaler.ZoneOperations.Delete;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;


public class AutoscalerExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {

    String project = ""; // TODO: Update field(s).


    String zone = ""; // TODO: Update field(s).
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {

    // TODO: Implement this function to get authentication credentials.
    // See https://foo.com/bar
    // Authorize using one of the following scopes in order to use this method:
    //   https://www.googleapis.com/auth/compute
    Credential credential = getAuth();

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
    Autoscaler autoscalerService = new Autoscaler.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)

    // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:


<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
    String operation = ""; // TODO: Update field(s).
=======
    String project = "{MY-PROJECT}";
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)

    Autoscaler service = createService();
    Delete request = service.zoneOperations().delete(project, zone, operation);
    request.execute();
  }

<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public Autoscaler createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
=======
    String zone = "{MY-ZONE}"  // eg. "us-central1-f";
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
=======
    String operation = "{MY-OPERATION}";
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)

    return new Autoscaler.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new AutoscalerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Autoscaler API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/autoscaler
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/autoscaler/v1beta2/java
 */
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
=======

import com.google.api.client.auth.oauth2.Credential;
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
import com.google.api.services.autoscaler.v1beta2.Autoscaler;
import com.google.api.services.autoscaler.v1beta2.Autoscaler.ZoneOperations.Get;
import com.google.api.services.autoscaler.v1beta2.model.Operation;
=======
import com.google.api.services.autoscaler.Autoscaler;
import com.google.api.services.autoscaler.model.Operation;
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;


public class AutoscalerExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {

    String project = ""; // TODO: Update field(s).


    String zone = ""; // TODO: Update field(s).
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {

    // TODO: Implement this function to get authentication credentials.
    // See https://foo.com/bar
    // Authorize using one of the following scopes in order to use this method:
    //   https://www.googleapis.com/auth/compute
    //   https://www.googleapis.com/auth/compute.readonly
    Credential credential = getAuth();

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
    Autoscaler autoscalerService = new Autoscaler.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)

    // TODO: Change placeholders below to appropriate parameter values for the 'get' method:


<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
    String operation = ""; // TODO: Update field(s).
=======
    String project = "{MY-PROJECT}";
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)

    Autoscaler service = createService();
    Get request = service.zoneOperations().get(project, zone, operation);
    Operation response = request.execute();
    System.out.println(response);
  }

<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public Autoscaler createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();
=======
    String zone = "{MY-ZONE}"  // eg. "us-central1-f";
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
=======
    String operation = "{MY-OPERATION}";
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)

    return new Autoscaler.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new AutoscalerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
=======
    // TODO: Add code here to process the 'response' object
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Autoscaler API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/autoscaler
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/autoscaler/v1beta2/java
 */
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
=======

import com.google.api.client.auth.oauth2.Credential;
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
import com.google.api.services.autoscaler.v1beta2.Autoscaler;
import com.google.api.services.autoscaler.v1beta2.Autoscaler.ZoneOperations.List;
import com.google.api.services.autoscaler.v1beta2.model.Operation;
import com.google.api.services.autoscaler.v1beta2.model.OperationList;
=======
import com.google.api.services.autoscaler.Autoscaler;
import com.google.api.services.autoscaler.model.Operation;
import com.google.api.services.autoscaler.model.OperationList;
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;


public class AutoscalerExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {

    String project = ""; // TODO: Update field(s).

=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {

    // TODO: Implement this function to get authentication credentials.
    // See https://foo.com/bar
    // Authorize using one of the following scopes in order to use this method:
    //   https://www.googleapis.com/auth/compute
    //   https://www.googleapis.com/auth/compute.readonly
    Credential credential = getAuth();

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
    Autoscaler autoscalerService = new Autoscaler.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)

    String zone = ""; // TODO: Update field(s).

<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
    Autoscaler service = createService();
    List request = service.zoneOperations().list(project, zone);
=======
    String project = "{MY-PROJECT}";


    String zone = "{MY-ZONE}"  // eg. "us-central1-f";

    Autoscaler.ZoneOperations.List request = autoscalerService.zoneOperations().list(project, zone);
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
    OperationList response;
    do {
      response = request.execute();
      if (response.getItems() == null) {
        continue;
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
=======

      for (Operation operation : response.getItems()) {
        // TODO: Add code here to process each 'operation' resource
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
      }
      for (Operation item : response.getItems()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Autoscaler createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Autoscaler.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new AutoscalerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Compute Engine Autoscaler API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/autoscaler
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
 * 2. Install the Java client library on Maven or Gradle. Check installation
=======
 * 2. Install the Java client library on maven or gradle. Check installation
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
 *    instructions at https://github.com/google/google-api-java-client.
 *    On other build systems, you can add the jar files to your project from
 *    https://developers.google.com/resources/api-libraries/download/autoscaler/v1beta2/java
 */
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
=======

import com.google.api.client.auth.oauth2.Credential;
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
import com.google.api.services.autoscaler.v1beta2.Autoscaler;
import com.google.api.services.autoscaler.v1beta2.Autoscaler.Zones.List;
import com.google.api.services.autoscaler.v1beta2.model.Zone;
import com.google.api.services.autoscaler.v1beta2.model.ZoneList;
=======
import com.google.api.services.autoscaler.Autoscaler;
import com.google.api.services.autoscaler.model.Zone;
import com.google.api.services.autoscaler.model.ZoneList;
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.Arrays;


public class AutoscalerExample {
<<<<<<< 87e3673f9830eb19419833f4430c7f10a733ae35
  public void run() throws IOException, GeneralSecurityException {

    String project = ""; // TODO: Update field(s).

    Autoscaler service = createService();
    List request = service.zones().list(project);
    ZoneList response;
    do {
      response = request.execute();
      if (response.getItems() == null) {
        continue;
      }
      for (Zone item : response.getItems()) {
        System.out.println(item);
      }
    } while (response.getNextPageToken() != null);
  }

  public Autoscaler createService() throws IOException, GeneralSecurityException {
    // TODO: This sample uses Application Default Credentials for authentication.
    // Install the gcloud CLI from https://cloud.google.com/sdk and run
    // `gcloud beta auth application-default login`
    GoogleCredential credential = GoogleCredential.getApplicationDefault();

    if (credential.createScopedRequired()) {
      credential =
          credential.createScoped(Arrays.asList("https://www.googleapis.com/auth/cloud-platform"));
    }

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();

    return new Autoscaler.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("Sample")
        .build();
  }
=======
  public static void main(String[] args) throws IOException, GeneralSecurityException {

    // TODO: Implement this function to get authentication credentials.
    // See https://foo.com/bar
    // Authorize using one of the following scopes in order to use this method:
    //   https://www.googleapis.com/auth/compute
    //   https://www.googleapis.com/auth/compute.readonly
    Credential credential = getAuth();

    HttpTransport httpTransport = GoogleNetHttpTransport.newTrustedTransport();
    JsonFactory jsonFactory = JacksonFactory.getDefaultInstance();
    Autoscaler autoscalerService = new Autoscaler.Builder(httpTransport, jsonFactory, credential)
      .setApplicationName("Google Cloud Platform Sample")
      .build();

    // TODO: Change placeholders below to appropriate parameter values for the 'list' method:


    String project = "{MY-PROJECT}";

    Autoscaler.Zones.List request = autoscalerService.zones().list(project);
    ZoneList response;
    do {
      response = request.execute();
      if (response.getItems() == null)
        continue;

      for (Zone zone : response.getItems()) {
        // TODO: Add code here to process each 'zone' resource
      }
>>>>>>> Add basic 3LO and API key auth support in discovery (#445)

  public static void main(String[] args) throws IOException, GeneralSecurityException {
    try {
      new AutoscalerExample().run();
    } catch (IOException e) {
      System.out.println(e.getMessage());
    } catch (GeneralSecurityException e) {
      System.out.println(e.getMessage());
    }
  }
}
