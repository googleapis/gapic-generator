============== file: src/main/java/com/google/gcloud/pubsub/v1/LibraryClient.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.gcloud.pubsub.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.FixedCredentialsProvider;
import com.google.api.gax.grpc.ChannelAndExecutor;
import com.google.api.gax.grpc.ClientContext;
import com.google.api.gax.grpc.FixedChannelProvider;
import com.google.api.gax.grpc.FixedExecutorProvider;
import com.google.api.gax.grpc.OperationCallable;
import com.google.api.gax.grpc.OperationFuture;
import com.google.api.gax.grpc.StreamingCallable;
import com.google.api.gax.grpc.UnaryCallable;
import com.google.api.pathtemplate.PathTemplate;
import com.google.api.resourcenames.ResourceName;
import com.google.auth.Credentials;
import com.google.example.library.v1.AddCommentsRequest;
import com.google.example.library.v1.ArchivedBookName;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookFromAnywhere;
import com.google.example.library.v1.BookFromArchive;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.BookNameOneof;
import com.google.example.library.v1.Comment;
import com.google.example.library.v1.CreateBookRequest;
import com.google.example.library.v1.CreateShelfRequest;
import com.google.example.library.v1.DeleteBookRequest;
import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.DiscussBookRequest;
import com.google.example.library.v1.FindRelatedBooksRequest;
import com.google.example.library.v1.FindRelatedBooksResponse;
import com.google.example.library.v1.GetBookFromAnywhereRequest;
import com.google.example.library.v1.GetBookFromArchiveRequest;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.GetShelfRequest;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.ListStringsRequest;
import com.google.example.library.v1.ListStringsResponse;
import com.google.example.library.v1.MergeShelvesRequest;
import com.google.example.library.v1.MoveBookRequest;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.SeriesUuid;
import com.google.example.library.v1.Shelf;
import com.google.example.library.v1.ShelfName;
import com.google.example.library.v1.SomeMessage;
import com.google.example.library.v1.StreamBooksRequest;
import com.google.example.library.v1.StreamShelvesRequest;
import com.google.example.library.v1.StreamShelvesResponse;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest.InnerEnum;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest.InnerMessage;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsResponse;
import com.google.example.library.v1.UpdateBookIndexRequest;
import com.google.example.library.v1.UpdateBookRequest;
import static com.google.gcloud.pubsub.v1.PagedResponseWrappers.FindRelatedBooksPagedResponse;
import static com.google.gcloud.pubsub.v1.PagedResponseWrappers.ListBooksPagedResponse;
import static com.google.gcloud.pubsub.v1.PagedResponseWrappers.ListShelvesPagedResponse;
import static com.google.gcloud.pubsub.v1.PagedResponseWrappers.ListStringsPagedResponse;
import com.google.longrunning.Operation;
import com.google.longrunning.OperationsClient;
import com.google.longrunning.OperationsSettings;
import com.google.protobuf.ByteString;
import com.google.protobuf.Empty;
import com.google.protobuf.FieldMask;
import com.google.tagger.v1.AddLabelRequest;
import com.google.tagger.v1.AddLabelResponse;
import com.google.tagger.v1.AddTagRequest;
import com.google.tagger.v1.AddTagResponse;
import io.grpc.ManagedChannel;
import java.io.Closeable;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ScheduledExecutorService;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND SERVICE
/**
 * Service Description: This API represents a simple digital library.  It lets you manage Shelf
 * resources and Book resources in the library. It defines the following
 * resource model:
 *
 * - The API has a collection of [Shelf][google.example.library.v1.Shelf]
 *   resources, named ``bookShelves/&#42;``
 *
 * - Each Shelf has a collection of [Book][google.example.library.v1.Book]
 *   resources, named `bookShelves/&#42;/books/&#42;`
 *
 * Check out [cloud docs!](/library/example/link).
 * This is [not a cloud link](http://www.google.com).
 *
 * Service comment may include special characters: &lt;&gt;&amp;"`'{@literal @}.
 *
 * Also see this awesome doc there! and there! and everywhere!
 *
 * <p>This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * <pre>
 * <code>
 * try (LibraryClient libraryClient = LibraryClient.create()) {
 *   Shelf shelf = Shelf.newBuilder().build();
 *   Shelf response = libraryClient.createShelf(shelf);
 * }
 * </code>
 * </pre>
 *
 * <p>Note: close() needs to be called on the libraryClient object to clean up resources such
 * as threads. In the example above, try-with-resources is used, which automatically calls
 * close().
 *
 * <p>The surface of this class includes several types of Java methods for each of the API's methods:
 *
 * <ol>
 * <li> A "flattened" method. With this type of method, the fields of the request type have been
 * converted into function parameters. It may be the case that not all fields are available
 * as parameters, and not every API method will have a flattened method entry point.
 * <li> A "request object" method. This type of method only takes one parameter, a request
 * object, which must be constructed before the call. Not every API method will have a request
 * object method.
 * <li> A "callable" method. This type of method takes no parameters and returns an immutable
 * API callable object, which can be used to initiate calls to the service.
 * </ol>
 *
 * <p>See the individual methods for example code.
 *
 * <p>Many parameters require resource names to be formatted in a particular way. To assist
 * with these names, this class includes a format method for each type of name, and additionally
 * a parse method to extract the individual identifiers contained within names that are
 * returned.
 *
 * <p>This class can be customized by passing in a custom instance of LibrarySettings to
 * create(). For example:
 *
 * <pre>
 * <code>
 * LibrarySettings librarySettings =
 *     LibrarySettings.defaultBuilder()
 *         .setCredentialsProvider(FixedCredentialsProvider.create(myCredentials))
 *         .build();
 * LibraryClient libraryClient =
 *     LibraryClient.create(librarySettings);
 * </code>
 * </pre>
 */
@Generated("by GAPIC")
public class LibraryClient implements AutoCloseable {
  private final LibrarySettings settings;
  private final ScheduledExecutorService executor;
  private final ManagedChannel channel;
  private final OperationsClient operationsClient;
  private final List<AutoCloseable> closeables = new ArrayList<>();

  private final UnaryCallable<CreateShelfRequest, Shelf> createShelfCallable;
  private final UnaryCallable<GetShelfRequest, Shelf> getShelfCallable;
  private final UnaryCallable<ListShelvesRequest, ListShelvesResponse> listShelvesCallable;
  private final UnaryCallable<ListShelvesRequest, ListShelvesPagedResponse> listShelvesPagedCallable;
  private final UnaryCallable<DeleteShelfRequest, Empty> deleteShelfCallable;
  private final UnaryCallable<MergeShelvesRequest, Shelf> mergeShelvesCallable;
  private final UnaryCallable<CreateBookRequest, Book> createBookCallable;
  private final UnaryCallable<PublishSeriesRequest, PublishSeriesResponse> publishSeriesCallable;
  private final UnaryCallable<GetBookRequest, Book> getBookCallable;
  private final UnaryCallable<ListBooksRequest, ListBooksResponse> listBooksCallable;
  private final UnaryCallable<ListBooksRequest, ListBooksPagedResponse> listBooksPagedCallable;
  private final UnaryCallable<DeleteBookRequest, Empty> deleteBookCallable;
  private final UnaryCallable<UpdateBookRequest, Book> updateBookCallable;
  private final UnaryCallable<MoveBookRequest, Book> moveBookCallable;
  private final UnaryCallable<ListStringsRequest, ListStringsResponse> listStringsCallable;
  private final UnaryCallable<ListStringsRequest, ListStringsPagedResponse> listStringsPagedCallable;
  private final UnaryCallable<AddCommentsRequest, Empty> addCommentsCallable;
  private final UnaryCallable<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveCallable;
  private final UnaryCallable<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereCallable;
  private final UnaryCallable<UpdateBookIndexRequest, Empty> updateBookIndexCallable;
  private final StreamingCallable<StreamShelvesRequest, StreamShelvesResponse> streamShelvesCallable;
  private final StreamingCallable<StreamBooksRequest, Book> streamBooksCallable;
  private final StreamingCallable<DiscussBookRequest, Comment> discussBookCallable;
  private final StreamingCallable<DiscussBookRequest, Comment> monologAboutBookCallable;
  private final UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksResponse> findRelatedBooksCallable;
  private final UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksPagedResponse> findRelatedBooksPagedCallable;
  private final UnaryCallable<AddTagRequest, AddTagResponse> addTagCallable;
  private final UnaryCallable<AddLabelRequest, AddLabelResponse> addLabelCallable;
  private final UnaryCallable<GetBookRequest, Operation> getBigBookCallable;
  private final OperationCallable<GetBookRequest, Book> getBigBookOperationCallable;
  private final UnaryCallable<GetBookRequest, Operation> getBigNothingCallable;
  private final OperationCallable<GetBookRequest, Empty> getBigNothingOperationCallable;
  private final UnaryCallable<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsCallable;



  /**
   * Constructs an instance of LibraryClient with default settings.
   */
  public static final LibraryClient create() throws IOException {
    return create(LibrarySettings.defaultBuilder().build());
  }

  /**
   * Constructs an instance of LibraryClient, using the given settings.
   * The channels are created based on the settings passed in, or defaults for any
   * settings that are not set.
   */
  public static final LibraryClient create(LibrarySettings settings) throws IOException {
    return new LibraryClient(settings);
  }

  /**
   * Constructs an instance of LibraryClient, using the given settings.
   * This is protected so that it easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected LibraryClient(LibrarySettings settings) throws IOException {
    this.settings = settings;
    ChannelAndExecutor channelAndExecutor = settings.getChannelAndExecutor();
    this.executor = channelAndExecutor.getExecutor();
    this.channel = channelAndExecutor.getChannel();
    Credentials credentials = settings.getCredentialsProvider().getCredentials();

    ClientContext clientContext =
        ClientContext.newBuilder()
            .setExecutor(this.executor)
            .setChannel(this.channel)
            .setCredentials(credentials)
            .build();

    OperationsSettings operationsSettings =
        OperationsSettings.defaultBuilder()
            .setExecutorProvider(FixedExecutorProvider.create(this.executor))
            .setChannelProvider(FixedChannelProvider.create(this.channel))
            .setCredentialsProvider(FixedCredentialsProvider.create(credentials))
            .build();
    this.operationsClient = OperationsClient.create(operationsSettings);

    this.createShelfCallable = UnaryCallable.create(settings.createShelfSettings(), clientContext);
    this.getShelfCallable = UnaryCallable.create(settings.getShelfSettings(), clientContext);
    this.listShelvesCallable = UnaryCallable.create(settings.listShelvesSettings(), clientContext);
    this.listShelvesPagedCallable =
        UnaryCallable.createPagedVariant(settings.listShelvesSettings(), clientContext);
    this.deleteShelfCallable = UnaryCallable.create(settings.deleteShelfSettings(), clientContext);
    this.mergeShelvesCallable = UnaryCallable.create(settings.mergeShelvesSettings(), clientContext);
    this.createBookCallable = UnaryCallable.create(settings.createBookSettings(), clientContext);
    this.publishSeriesCallable = UnaryCallable.create(settings.publishSeriesSettings(), clientContext);
    this.getBookCallable = UnaryCallable.create(settings.getBookSettings(), clientContext);
    this.listBooksCallable = UnaryCallable.create(settings.listBooksSettings(), clientContext);
    this.listBooksPagedCallable =
        UnaryCallable.createPagedVariant(settings.listBooksSettings(), clientContext);
    this.deleteBookCallable = UnaryCallable.create(settings.deleteBookSettings(), clientContext);
    this.updateBookCallable = UnaryCallable.create(settings.updateBookSettings(), clientContext);
    this.moveBookCallable = UnaryCallable.create(settings.moveBookSettings(), clientContext);
    this.listStringsCallable = UnaryCallable.create(settings.listStringsSettings(), clientContext);
    this.listStringsPagedCallable =
        UnaryCallable.createPagedVariant(settings.listStringsSettings(), clientContext);
    this.addCommentsCallable = UnaryCallable.create(settings.addCommentsSettings(), clientContext);
    this.getBookFromArchiveCallable = UnaryCallable.create(settings.getBookFromArchiveSettings(), clientContext);
    this.getBookFromAnywhereCallable = UnaryCallable.create(settings.getBookFromAnywhereSettings(), clientContext);
    this.updateBookIndexCallable = UnaryCallable.create(settings.updateBookIndexSettings(), clientContext);
    this.streamShelvesCallable = StreamingCallable.create(settings.streamShelvesSettings(), clientContext);
    this.streamBooksCallable = StreamingCallable.create(settings.streamBooksSettings(), clientContext);
    this.discussBookCallable = StreamingCallable.create(settings.discussBookSettings(), clientContext);
    this.monologAboutBookCallable = StreamingCallable.create(settings.monologAboutBookSettings(), clientContext);
    this.findRelatedBooksCallable = UnaryCallable.create(settings.findRelatedBooksSettings(), clientContext);
    this.findRelatedBooksPagedCallable =
        UnaryCallable.createPagedVariant(settings.findRelatedBooksSettings(), clientContext);
    this.addTagCallable = UnaryCallable.create(settings.addTagSettings(), clientContext);
    this.addLabelCallable = UnaryCallable.create(settings.addLabelSettings(), clientContext);
    this.getBigBookCallable = UnaryCallable.create(settings.getBigBookSettings().getInitialCallSettings(), clientContext);
    this.getBigBookOperationCallable = OperationCallable.create(settings.getBigBookSettings(),clientContext, this.operationsClient);
    this.getBigNothingCallable = UnaryCallable.create(settings.getBigNothingSettings().getInitialCallSettings(), clientContext);
    this.getBigNothingOperationCallable = OperationCallable.create(settings.getBigNothingSettings(),clientContext, this.operationsClient);
    this.testOptionalRequiredFlatteningParamsCallable = UnaryCallable.create(settings.testOptionalRequiredFlatteningParamsSettings(), clientContext);

    if (settings.getChannelProvider().shouldAutoClose()) {
      closeables.add(
        new Closeable() {
          @Override
          public void close() throws IOException {
            channel.shutdown();
          }
        });
    }
    if (settings.getExecutorProvider().shouldAutoClose()) {
      closeables.add(
        new Closeable() {
          @Override
          public void close() throws IOException {
            executor.shutdown();
          }
        });
    }
  }

  public final LibrarySettings getSettings() {
    return settings;
  }

  /**
   * Returns the OperationsClient that can be used to query the status of a long-running
   * operation returned by another API method call.
   */
  public final OperationsClient getOperationsClient() {
    return operationsClient;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a shelf, and returns the new Shelf.
   * RPC method comment may include special characters: &lt;&gt;&amp;"`'{@literal @}.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   Shelf shelf = Shelf.newBuilder().build();
   *   Shelf response = libraryClient.createShelf(shelf);
   * }
   * </code></pre>
   *
   * @param shelf The shelf to create.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Shelf createShelf(Shelf shelf) {

    CreateShelfRequest request =
        CreateShelfRequest.newBuilder()
        .setShelf(shelf)
        .build();
    return createShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a shelf, and returns the new Shelf.
   * RPC method comment may include special characters: &lt;&gt;&amp;"`'{@literal @}.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   Shelf shelf = Shelf.newBuilder().build();
   *   CreateShelfRequest request = CreateShelfRequest.newBuilder()
   *     .setShelf(shelf)
   *     .build();
   *   Shelf response = libraryClient.createShelf(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  private final Shelf createShelf(CreateShelfRequest request) {
    return createShelfCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a shelf, and returns the new Shelf.
   * RPC method comment may include special characters: &lt;&gt;&amp;"`'{@literal @}.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   Shelf shelf = Shelf.newBuilder().build();
   *   CreateShelfRequest request = CreateShelfRequest.newBuilder()
   *     .setShelf(shelf)
   *     .build();
   *   ApiFuture&lt;Shelf&gt; future = libraryClient.createShelfCallable().futureCall(request);
   *   // Do something
   *   Shelf response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<CreateShelfRequest, Shelf> createShelfCallable() {
    return createShelfCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.create("[SHELF_ID]");
   *   Shelf response = libraryClient.getShelf(name);
   * }
   * </code></pre>
   *
   * @param name The name of the shelf to retrieve.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Shelf getShelf(ShelfName name) {

    GetShelfRequest request =
        GetShelfRequest.newBuilder()
        .setNameWithShelfName(name)
        .build();
    return getShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   String formattedName = ShelfName.create("[SHELF_ID]").toString();
   *   SomeMessage message = SomeMessage.newBuilder().build();
   *   Shelf response = libraryClient.getShelf(formattedName, message);
   * }
   * </code></pre>
   *
   * @param name The name of the shelf to retrieve.
   * @param message Field to verify that message-type query parameter gets flattened.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Shelf getShelf(String name, SomeMessage message) {

    GetShelfRequest request =
        GetShelfRequest.newBuilder()
        .setName(name)
        .setMessage(message)
        .build();
    return getShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   String formattedName = ShelfName.create("[SHELF_ID]").toString();
   *   SomeMessage message = SomeMessage.newBuilder().build();
   *   com.google.example.library.v1.StringBuilder stringBuilder = com.google.example.library.v1.StringBuilder.newBuilder().build();
   *   Shelf response = libraryClient.getShelf(formattedName, message, stringBuilder);
   * }
   * </code></pre>
   *
   * @param name The name of the shelf to retrieve.
   * @param message Field to verify that message-type query parameter gets flattened.
   * @param stringBuilder
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Shelf getShelf(String name, SomeMessage message, com.google.example.library.v1.StringBuilder stringBuilder) {

    GetShelfRequest request =
        GetShelfRequest.newBuilder()
        .setName(name)
        .setMessage(message)
        .setStringBuilder(stringBuilder)
        .build();
    return getShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   String formattedName = ShelfName.create("[SHELF_ID]").toString();
   *   String options = "";
   *   GetShelfRequest request = GetShelfRequest.newBuilder()
   *     .setName(formattedName)
   *     .setOptions(options)
   *     .build();
   *   Shelf response = libraryClient.getShelf(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Shelf getShelf(GetShelfRequest request) {
    return getShelfCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   String formattedName = ShelfName.create("[SHELF_ID]").toString();
   *   String options = "";
   *   GetShelfRequest request = GetShelfRequest.newBuilder()
   *     .setName(formattedName)
   *     .setOptions(options)
   *     .build();
   *   ApiFuture&lt;Shelf&gt; future = libraryClient.getShelfCallable().futureCall(request);
   *   // Do something
   *   Shelf response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<GetShelfRequest, Shelf> getShelfCallable() {
    return getShelfCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists shelves.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *
   *   for (Shelf element : libraryClient.listShelves().iterateAll()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final ListShelvesPagedResponse listShelves() {
    ListShelvesRequest request =
        ListShelvesRequest.newBuilder()

        .build();
    return listShelves(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists shelves.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ListShelvesRequest request = ListShelvesRequest.newBuilder().build();
   *   for (Shelf element : libraryClient.listShelves(request).iterateAll()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  private final ListShelvesPagedResponse listShelves(ListShelvesRequest request) {
    return listShelvesPagedCallable()
        .call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists shelves.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ListShelvesRequest request = ListShelvesRequest.newBuilder().build();
   *   ApiFuture&lt;ListShelvesPagedResponse&gt; future = libraryClient.listShelvesPagedCallable().futureCall(request);
   *   // Do something
   *   for (Shelf element : future.get().iterateAll()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   */
  public final UnaryCallable<ListShelvesRequest, ListShelvesPagedResponse> listShelvesPagedCallable() {
    return listShelvesPagedCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists shelves.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ListShelvesRequest request = ListShelvesRequest.newBuilder().build();
   *   while (true) {
   *     ListShelvesResponse response = libraryClient.listShelvesCallable().call(request);
   *     for (Shelf element : response.getShelvesList()) {
   *       // doThingsWith(element);
   *     }
   *     String nextPageToken = response.getNextPageToken();
   *     if (!Strings.isNullOrEmpty(nextPageToken)) {
   *       request = request.toBuilder().setPageToken(nextPageToken).build();
   *     } else {
   *       break;
   *     }
   *   }
   * }
   * </code></pre>
   */
  public final UnaryCallable<ListShelvesRequest, ListShelvesResponse> listShelvesCallable() {
    return listShelvesCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Deletes a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.create("[SHELF_ID]");
   *   libraryClient.deleteShelf(name);
   * }
   * </code></pre>
   *
   * @param name The name of the shelf to delete.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final void deleteShelf(ShelfName name) {

    DeleteShelfRequest request =
        DeleteShelfRequest.newBuilder()
        .setNameWithShelfName(name)
        .build();
    deleteShelf(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Deletes a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.create("[SHELF_ID]");
   *   DeleteShelfRequest request = DeleteShelfRequest.newBuilder()
   *     .setNameWithShelfName(name)
   *     .build();
   *   libraryClient.deleteShelf(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  private final void deleteShelf(DeleteShelfRequest request) {
    deleteShelfCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Deletes a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.create("[SHELF_ID]");
   *   DeleteShelfRequest request = DeleteShelfRequest.newBuilder()
   *     .setNameWithShelfName(name)
   *     .build();
   *   ApiFuture&lt;Void&gt; future = libraryClient.deleteShelfCallable().futureCall(request);
   *   // Do something
   *   future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<DeleteShelfRequest, Empty> deleteShelfCallable() {
    return deleteShelfCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Merges two shelves by adding all books from the shelf named
   * `other_shelf_name` to shelf `name`, and deletes
   * `other_shelf_name`. Returns the updated shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.create("[SHELF_ID]");
   *   ShelfName otherShelfName = ShelfName.create("[SHELF_ID]");
   *   Shelf response = libraryClient.mergeShelves(name, otherShelfName);
   * }
   * </code></pre>
   *
   * @param name The name of the shelf we're adding books to.
   * @param otherShelfName The name of the shelf we're removing books from and deleting.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Shelf mergeShelves(ShelfName name, ShelfName otherShelfName) {

    MergeShelvesRequest request =
        MergeShelvesRequest.newBuilder()
        .setNameWithShelfName(name)
        .setOtherShelfNameWithShelfName(otherShelfName)
        .build();
    return mergeShelves(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Merges two shelves by adding all books from the shelf named
   * `other_shelf_name` to shelf `name`, and deletes
   * `other_shelf_name`. Returns the updated shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.create("[SHELF_ID]");
   *   ShelfName otherShelfName = ShelfName.create("[SHELF_ID]");
   *   MergeShelvesRequest request = MergeShelvesRequest.newBuilder()
   *     .setNameWithShelfName(name)
   *     .setOtherShelfNameWithShelfName(otherShelfName)
   *     .build();
   *   Shelf response = libraryClient.mergeShelves(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Shelf mergeShelves(MergeShelvesRequest request) {
    return mergeShelvesCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Merges two shelves by adding all books from the shelf named
   * `other_shelf_name` to shelf `name`, and deletes
   * `other_shelf_name`. Returns the updated shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.create("[SHELF_ID]");
   *   ShelfName otherShelfName = ShelfName.create("[SHELF_ID]");
   *   MergeShelvesRequest request = MergeShelvesRequest.newBuilder()
   *     .setNameWithShelfName(name)
   *     .setOtherShelfNameWithShelfName(otherShelfName)
   *     .build();
   *   ApiFuture&lt;Shelf&gt; future = libraryClient.mergeShelvesCallable().futureCall(request);
   *   // Do something
   *   Shelf response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<MergeShelvesRequest, Shelf> mergeShelvesCallable() {
    return mergeShelvesCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   String formattedName = ShelfName.create("[SHELF_ID]").toString();
   *   Book book = Book.newBuilder().build();
   *   Book response = libraryClient.createBook(formattedName, book);
   * }
   * </code></pre>
   *
   * @param name The name of the shelf in which the book is created.
   * @param book The book to create.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Book createBook(String name, Book book) {

    CreateBookRequest request =
        CreateBookRequest.newBuilder()
        .setName(name)
        .setBook(book)
        .build();
    return createBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   String formattedName = ShelfName.create("[SHELF_ID]").toString();
   *   Book book = Book.newBuilder().build();
   *   CreateBookRequest request = CreateBookRequest.newBuilder()
   *     .setName(formattedName)
   *     .setBook(book)
   *     .build();
   *   Book response = libraryClient.createBook(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Book createBook(CreateBookRequest request) {
    return createBookCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   String formattedName = ShelfName.create("[SHELF_ID]").toString();
   *   Book book = Book.newBuilder().build();
   *   CreateBookRequest request = CreateBookRequest.newBuilder()
   *     .setName(formattedName)
   *     .setBook(book)
   *     .build();
   *   ApiFuture&lt;Book&gt; future = libraryClient.createBookCallable().futureCall(request);
   *   // Do something
   *   Book response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<CreateBookRequest, Book> createBookCallable() {
    return createBookCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a series of books.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   Shelf shelf = Shelf.newBuilder().build();
   *   List&lt;Book&gt; books = new ArrayList&lt;&gt;();
   *   int edition = 0;
   *   String seriesString = "foobar";
   *   SeriesUuid seriesUuid = SeriesUuid.newBuilder()
   *     .setSeriesString(seriesString)
   *     .build();
   *   PublishSeriesResponse response = libraryClient.publishSeries(shelf, books, edition, seriesUuid);
   * }
   * </code></pre>
   *
   * @param shelf The shelf in which the series is created.
   * @param books The books to publish in the series.
   * @param edition The edition of the series
   * @param seriesUuid Uniquely identifies the series to the publishing house.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final PublishSeriesResponse publishSeries(Shelf shelf, List<Book> books, int edition, SeriesUuid seriesUuid) {

    PublishSeriesRequest request =
        PublishSeriesRequest.newBuilder()
        .setShelf(shelf)
        .addAllBooks(books)
        .setEdition(edition)
        .setSeriesUuid(seriesUuid)
        .build();
    return publishSeries(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a series of books.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   Shelf shelf = Shelf.newBuilder().build();
   *   List&lt;Book&gt; books = new ArrayList&lt;&gt;();
   *   String seriesString = "foobar";
   *   SeriesUuid seriesUuid = SeriesUuid.newBuilder()
   *     .setSeriesString(seriesString)
   *     .build();
   *   PublishSeriesRequest request = PublishSeriesRequest.newBuilder()
   *     .setShelf(shelf)
   *     .addAllBooks(books)
   *     .setSeriesUuid(seriesUuid)
   *     .build();
   *   PublishSeriesResponse response = libraryClient.publishSeries(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final PublishSeriesResponse publishSeries(PublishSeriesRequest request) {
    return publishSeriesCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Creates a series of books.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   Shelf shelf = Shelf.newBuilder().build();
   *   List&lt;Book&gt; books = new ArrayList&lt;&gt;();
   *   String seriesString = "foobar";
   *   SeriesUuid seriesUuid = SeriesUuid.newBuilder()
   *     .setSeriesString(seriesString)
   *     .build();
   *   PublishSeriesRequest request = PublishSeriesRequest.newBuilder()
   *     .setShelf(shelf)
   *     .addAllBooks(books)
   *     .setSeriesUuid(seriesUuid)
   *     .build();
   *   ApiFuture&lt;PublishSeriesResponse&gt; future = libraryClient.publishSeriesCallable().futureCall(request);
   *   // Do something
   *   PublishSeriesResponse response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<PublishSeriesRequest, PublishSeriesResponse> publishSeriesCallable() {
    return publishSeriesCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   Book response = libraryClient.getBook(name);
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Book getBook(BookName name) {

    GetBookRequest request =
        GetBookRequest.newBuilder()
        .setNameWithBookName(name)
        .build();
    return getBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   GetBookRequest request = GetBookRequest.newBuilder()
   *     .setNameWithBookName(name)
   *     .build();
   *   Book response = libraryClient.getBook(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  private final Book getBook(GetBookRequest request) {
    return getBookCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   GetBookRequest request = GetBookRequest.newBuilder()
   *     .setNameWithBookName(name)
   *     .build();
   *   ApiFuture&lt;Book&gt; future = libraryClient.getBookCallable().futureCall(request);
   *   // Do something
   *   Book response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<GetBookRequest, Book> getBookCallable() {
    return getBookCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists books in a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.create("[SHELF_ID]");
   *   String filter = "";
   *   for (Book element : libraryClient.listBooks(name, filter).iterateAll()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param name The name of the shelf whose books we'd like to list.
   * @param filter To test python built-in wrapping.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final ListBooksPagedResponse listBooks(ShelfName name, String filter) {
    ListBooksRequest request =
        ListBooksRequest.newBuilder()
        .setNameWithShelfName(name)
        .setFilter(filter)
        .build();
    return listBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists books in a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.create("[SHELF_ID]");
   *   ListBooksRequest request = ListBooksRequest.newBuilder()
   *     .setNameWithShelfName(name)
   *     .build();
   *   for (Book element : libraryClient.listBooks(request).iterateAll()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final ListBooksPagedResponse listBooks(ListBooksRequest request) {
    return listBooksPagedCallable()
        .call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists books in a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.create("[SHELF_ID]");
   *   ListBooksRequest request = ListBooksRequest.newBuilder()
   *     .setNameWithShelfName(name)
   *     .build();
   *   ApiFuture&lt;ListBooksPagedResponse&gt; future = libraryClient.listBooksPagedCallable().futureCall(request);
   *   // Do something
   *   for (Book element : future.get().iterateAll()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   */
  public final UnaryCallable<ListBooksRequest, ListBooksPagedResponse> listBooksPagedCallable() {
    return listBooksPagedCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists books in a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ShelfName name = ShelfName.create("[SHELF_ID]");
   *   ListBooksRequest request = ListBooksRequest.newBuilder()
   *     .setNameWithShelfName(name)
   *     .build();
   *   while (true) {
   *     ListBooksResponse response = libraryClient.listBooksCallable().call(request);
   *     for (Book element : response.getBooksList()) {
   *       // doThingsWith(element);
   *     }
   *     String nextPageToken = response.getNextPageToken();
   *     if (!Strings.isNullOrEmpty(nextPageToken)) {
   *       request = request.toBuilder().setPageToken(nextPageToken).build();
   *     } else {
   *       break;
   *     }
   *   }
   * }
   * </code></pre>
   */
  public final UnaryCallable<ListBooksRequest, ListBooksResponse> listBooksCallable() {
    return listBooksCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Deletes a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   libraryClient.deleteBook(name);
   * }
   * </code></pre>
   *
   * @param name The name of the book to delete.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final void deleteBook(BookName name) {

    DeleteBookRequest request =
        DeleteBookRequest.newBuilder()
        .setNameWithBookName(name)
        .build();
    deleteBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Deletes a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   DeleteBookRequest request = DeleteBookRequest.newBuilder()
   *     .setNameWithBookName(name)
   *     .build();
   *   libraryClient.deleteBook(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  private final void deleteBook(DeleteBookRequest request) {
    deleteBookCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Deletes a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   DeleteBookRequest request = DeleteBookRequest.newBuilder()
   *     .setNameWithBookName(name)
   *     .build();
   *   ApiFuture&lt;Void&gt; future = libraryClient.deleteBookCallable().futureCall(request);
   *   // Do something
   *   future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<DeleteBookRequest, Empty> deleteBookCallable() {
    return deleteBookCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   Book book = Book.newBuilder().build();
   *   Book response = libraryClient.updateBook(name, book);
   * }
   * </code></pre>
   *
   * @param name The name of the book to update.
   * @param book The book to update with.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Book updateBook(BookName name, Book book) {

    UpdateBookRequest request =
        UpdateBookRequest.newBuilder()
        .setNameWithBookName(name)
        .setBook(book)
        .build();
    return updateBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   Book book = Book.newBuilder().build();
   *   FieldMask updateMask = FieldMask.newBuilder().build();
   *   com.google.example.library.v1.FieldMask physicalMask = com.google.example.library.v1.FieldMask.newBuilder().build();
   *   Book response = libraryClient.updateBook(name, book, updateMask, physicalMask);
   * }
   * </code></pre>
   *
   * @param name The name of the book to update.
   * @param book The book to update with.
   * @param updateMask A field mask to apply, rendered as an HTTP parameter.
   * @param physicalMask To test Python import clash resolution.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Book updateBook(BookName name, Book book, FieldMask updateMask, com.google.example.library.v1.FieldMask physicalMask) {

    UpdateBookRequest request =
        UpdateBookRequest.newBuilder()
        .setNameWithBookName(name)
        .setBook(book)
        .setUpdateMask(updateMask)
        .setPhysicalMask(physicalMask)
        .build();
    return updateBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   Book book = Book.newBuilder().build();
   *   UpdateBookRequest request = UpdateBookRequest.newBuilder()
   *     .setNameWithBookName(name)
   *     .setBook(book)
   *     .build();
   *   Book response = libraryClient.updateBook(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Book updateBook(UpdateBookRequest request) {
    return updateBookCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   Book book = Book.newBuilder().build();
   *   UpdateBookRequest request = UpdateBookRequest.newBuilder()
   *     .setNameWithBookName(name)
   *     .setBook(book)
   *     .build();
   *   ApiFuture&lt;Book&gt; future = libraryClient.updateBookCallable().futureCall(request);
   *   // Do something
   *   Book response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<UpdateBookRequest, Book> updateBookCallable() {
    return updateBookCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Moves a book to another shelf, and returns the new book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   ShelfName otherShelfName = ShelfName.create("[SHELF_ID]");
   *   Book response = libraryClient.moveBook(name, otherShelfName);
   * }
   * </code></pre>
   *
   * @param name The name of the book to move.
   * @param otherShelfName The name of the destination shelf.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Book moveBook(BookName name, ShelfName otherShelfName) {

    MoveBookRequest request =
        MoveBookRequest.newBuilder()
        .setNameWithBookName(name)
        .setOtherShelfNameWithShelfName(otherShelfName)
        .build();
    return moveBook(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Moves a book to another shelf, and returns the new book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   ShelfName otherShelfName = ShelfName.create("[SHELF_ID]");
   *   MoveBookRequest request = MoveBookRequest.newBuilder()
   *     .setNameWithBookName(name)
   *     .setOtherShelfNameWithShelfName(otherShelfName)
   *     .build();
   *   Book response = libraryClient.moveBook(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final Book moveBook(MoveBookRequest request) {
    return moveBookCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Moves a book to another shelf, and returns the new book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   ShelfName otherShelfName = ShelfName.create("[SHELF_ID]");
   *   MoveBookRequest request = MoveBookRequest.newBuilder()
   *     .setNameWithBookName(name)
   *     .setOtherShelfNameWithShelfName(otherShelfName)
   *     .build();
   *   ApiFuture&lt;Book&gt; future = libraryClient.moveBookCallable().futureCall(request);
   *   // Do something
   *   Book response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<MoveBookRequest, Book> moveBookCallable() {
    return moveBookCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists a primitive resource. To test go page streaming.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *
   *   for (ResourceName element : libraryClient.listStrings().iterateAllAsResourceName()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final ListStringsPagedResponse listStrings() {
    ListStringsRequest request =
        ListStringsRequest.newBuilder()

        .build();
    return listStrings(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists a primitive resource. To test go page streaming.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ResourceName name = ShelfName.create("[SHELF_ID]");
   *   for (ResourceName element : libraryClient.listStrings(name).iterateAllAsResourceName()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param name
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final ListStringsPagedResponse listStrings(ResourceName name) {
    ListStringsRequest request =
        ListStringsRequest.newBuilder()
        .setNameWithResourceName(name)
        .build();
    return listStrings(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists a primitive resource. To test go page streaming.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ListStringsRequest request = ListStringsRequest.newBuilder().build();
   *   for (ResourceName element : libraryClient.listStrings(request).iterateAllAsResourceName()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  private final ListStringsPagedResponse listStrings(ListStringsRequest request) {
    return listStringsPagedCallable()
        .call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists a primitive resource. To test go page streaming.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ListStringsRequest request = ListStringsRequest.newBuilder().build();
   *   ApiFuture&lt;ListStringsPagedResponse&gt; future = libraryClient.listStringsPagedCallable().futureCall(request);
   *   // Do something
   *   for (ResourceName element : future.get().iterateAllAsResourceName()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   */
  public final UnaryCallable<ListStringsRequest, ListStringsPagedResponse> listStringsPagedCallable() {
    return listStringsPagedCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists a primitive resource. To test go page streaming.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ListStringsRequest request = ListStringsRequest.newBuilder().build();
   *   while (true) {
   *     ListStringsResponse response = libraryClient.listStringsCallable().call(request);
   *     for (ResourceName element : response.getStringsListAsResourceNameList()) {
   *       // doThingsWith(element);
   *     }
   *     String nextPageToken = response.getNextPageToken();
   *     if (!Strings.isNullOrEmpty(nextPageToken)) {
   *       request = request.toBuilder().setPageToken(nextPageToken).build();
   *     } else {
   *       break;
   *     }
   *   }
   * }
   * </code></pre>
   */
  public final UnaryCallable<ListStringsRequest, ListStringsResponse> listStringsCallable() {
    return listStringsCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Adds comments to a book
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   String formattedName = BookName.create("[SHELF_ID]", "[BOOK_ID]").toString();
   *   ByteString comment = ByteString.copyFromUtf8("");
   *   Comment.Stage stage = Comment.Stage.UNSET;
   *   SomeMessage2.SomeMessage3.Alignment alignment = SomeMessage2.SomeMessage3.Alignment.CHAR;
   *   Comment commentsElement = Comment.newBuilder()
   *     .setComment(comment)
   *     .setStage(stage)
   *     .setAlignment(alignment)
   *     .build();
   *   List&lt;Comment&gt; comments = Arrays.asList(commentsElement);
   *   libraryClient.addComments(formattedName, comments);
   * }
   * </code></pre>
   *
   * @param name
   * @param comments
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final void addComments(String name, List<Comment> comments) {

    AddCommentsRequest request =
        AddCommentsRequest.newBuilder()
        .setName(name)
        .addAllComments(comments)
        .build();
    addComments(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Adds comments to a book
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   String formattedName = BookName.create("[SHELF_ID]", "[BOOK_ID]").toString();
   *   ByteString comment = ByteString.copyFromUtf8("");
   *   Comment.Stage stage = Comment.Stage.UNSET;
   *   SomeMessage2.SomeMessage3.Alignment alignment = SomeMessage2.SomeMessage3.Alignment.CHAR;
   *   Comment commentsElement = Comment.newBuilder()
   *     .setComment(comment)
   *     .setStage(stage)
   *     .setAlignment(alignment)
   *     .build();
   *   List&lt;Comment&gt; comments = Arrays.asList(commentsElement);
   *   AddCommentsRequest request = AddCommentsRequest.newBuilder()
   *     .setName(formattedName)
   *     .addAllComments(comments)
   *     .build();
   *   libraryClient.addComments(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final void addComments(AddCommentsRequest request) {
    addCommentsCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Adds comments to a book
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   String formattedName = BookName.create("[SHELF_ID]", "[BOOK_ID]").toString();
   *   ByteString comment = ByteString.copyFromUtf8("");
   *   Comment.Stage stage = Comment.Stage.UNSET;
   *   SomeMessage2.SomeMessage3.Alignment alignment = SomeMessage2.SomeMessage3.Alignment.CHAR;
   *   Comment commentsElement = Comment.newBuilder()
   *     .setComment(comment)
   *     .setStage(stage)
   *     .setAlignment(alignment)
   *     .build();
   *   List&lt;Comment&gt; comments = Arrays.asList(commentsElement);
   *   AddCommentsRequest request = AddCommentsRequest.newBuilder()
   *     .setName(formattedName)
   *     .addAllComments(comments)
   *     .build();
   *   ApiFuture&lt;Void&gt; future = libraryClient.addCommentsCallable().futureCall(request);
   *   // Do something
   *   future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<AddCommentsRequest, Empty> addCommentsCallable() {
    return addCommentsCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book from an archive.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ArchivedBookName name = ArchivedBookName.create("[ARCHIVE_PATH]", "[BOOK_ID]");
   *   BookFromArchive response = libraryClient.getBookFromArchive(name);
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final BookFromArchive getBookFromArchive(ArchivedBookName name) {

    GetBookFromArchiveRequest request =
        GetBookFromArchiveRequest.newBuilder()
        .setNameWithArchivedBookName(name)
        .build();
    return getBookFromArchive(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book from an archive.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ArchivedBookName name = ArchivedBookName.create("[ARCHIVE_PATH]", "[BOOK_ID]");
   *   GetBookFromArchiveRequest request = GetBookFromArchiveRequest.newBuilder()
   *     .setNameWithArchivedBookName(name)
   *     .build();
   *   BookFromArchive response = libraryClient.getBookFromArchive(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  private final BookFromArchive getBookFromArchive(GetBookFromArchiveRequest request) {
    return getBookFromArchiveCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book from an archive.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ArchivedBookName name = ArchivedBookName.create("[ARCHIVE_PATH]", "[BOOK_ID]");
   *   GetBookFromArchiveRequest request = GetBookFromArchiveRequest.newBuilder()
   *     .setNameWithArchivedBookName(name)
   *     .build();
   *   ApiFuture&lt;BookFromArchive&gt; future = libraryClient.getBookFromArchiveCallable().futureCall(request);
   *   // Do something
   *   BookFromArchive response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<GetBookFromArchiveRequest, BookFromArchive> getBookFromArchiveCallable() {
    return getBookFromArchiveCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book from a shelf or archive.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookNameOneof name = BookNameOneof.from(BookName.create("[SHELF_ID]", "[BOOK_ID]"));
   *   BookName altBookName = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   BookFromAnywhere response = libraryClient.getBookFromAnywhere(name, altBookName);
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @param altBookName An alternate book name, used to test restricting flattened field to a
   * single resource name type in a oneof.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final BookFromAnywhere getBookFromAnywhere(BookNameOneof name, BookName altBookName) {

    GetBookFromAnywhereRequest request =
        GetBookFromAnywhereRequest.newBuilder()
        .setNameWithBookNameOneof(name)
        .setAltBookNameWithBookNameOneof(altBookName == null ? null : BookNameOneof.from(altBookName))
        .build();
    return getBookFromAnywhere(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book from a shelf or archive.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookNameOneof name = BookNameOneof.from(BookName.create("[SHELF_ID]", "[BOOK_ID]"));
   *   BookNameOneof altBookName = BookNameOneof.from(BookName.create("[SHELF_ID]", "[BOOK_ID]"));
   *   GetBookFromAnywhereRequest request = GetBookFromAnywhereRequest.newBuilder()
   *     .setNameWithBookNameOneof(name)
   *     .setAltBookNameWithBookName(altBookName)
   *     .build();
   *   BookFromAnywhere response = libraryClient.getBookFromAnywhere(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  private final BookFromAnywhere getBookFromAnywhere(GetBookFromAnywhereRequest request) {
    return getBookFromAnywhereCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets a book from a shelf or archive.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookNameOneof name = BookNameOneof.from(BookName.create("[SHELF_ID]", "[BOOK_ID]"));
   *   BookNameOneof altBookName = BookNameOneof.from(BookName.create("[SHELF_ID]", "[BOOK_ID]"));
   *   GetBookFromAnywhereRequest request = GetBookFromAnywhereRequest.newBuilder()
   *     .setNameWithBookNameOneof(name)
   *     .setAltBookNameWithBookName(altBookName)
   *     .build();
   *   ApiFuture&lt;BookFromAnywhere&gt; future = libraryClient.getBookFromAnywhereCallable().futureCall(request);
   *   // Do something
   *   BookFromAnywhere response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<GetBookFromAnywhereRequest, BookFromAnywhere> getBookFromAnywhereCallable() {
    return getBookFromAnywhereCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates the index of a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   String indexName = "default index";
   *   String indexMapItem = "";
   *   Map&lt;String, String&gt; indexMap = new HashMap&lt;&gt;();
   *   indexMap.put("default_key", indexMapItem);
   *   libraryClient.updateBookIndex(name, indexName, indexMap);
   * }
   * </code></pre>
   *
   * @param name The name of the book to update.
   * @param indexName The name of the index for the book
   * @param indexMap The index to update the book with
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final void updateBookIndex(BookName name, String indexName, Map<String, String> indexMap) {

    UpdateBookIndexRequest request =
        UpdateBookIndexRequest.newBuilder()
        .setNameWithBookName(name)
        .setIndexName(indexName)
        .putAllIndexMap(indexMap)
        .build();
    updateBookIndex(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates the index of a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   String indexName = "default index";
   *   String indexMapItem = "";
   *   Map&lt;String, String&gt; indexMap = new HashMap&lt;&gt;();
   *   indexMap.put("default_key", indexMapItem);
   *   UpdateBookIndexRequest request = UpdateBookIndexRequest.newBuilder()
   *     .setNameWithBookName(name)
   *     .setIndexName(indexName)
   *     .putAllIndexMap(indexMap)
   *     .build();
   *   libraryClient.updateBookIndex(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final void updateBookIndex(UpdateBookIndexRequest request) {
    updateBookIndexCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Updates the index of a book.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   String indexName = "default index";
   *   String indexMapItem = "";
   *   Map&lt;String, String&gt; indexMap = new HashMap&lt;&gt;();
   *   indexMap.put("default_key", indexMapItem);
   *   UpdateBookIndexRequest request = UpdateBookIndexRequest.newBuilder()
   *     .setNameWithBookName(name)
   *     .setIndexName(indexName)
   *     .putAllIndexMap(indexMap)
   *     .build();
   *   ApiFuture&lt;Void&gt; future = libraryClient.updateBookIndexCallable().futureCall(request);
   *   // Do something
   *   future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<UpdateBookIndexRequest, Empty> updateBookIndexCallable() {
    return updateBookIndexCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test server streaming
   * gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ApiStreamObserver&lt;StreamShelvesResponse&gt; responseObserver =
   *       new ApiStreamObserver&lt;StreamShelvesResponse&gt;() {
   *         {@literal @}Override
   *         public void onNext(StreamShelvesResponse response) {
   *           // Do something when receive a response
   *         }
   *
   *         {@literal @}Override
   *         public void onError(Throwable t) {
   *           // Add error-handling
   *         }
   *
   *         {@literal @}Override
   *         public void onCompleted() {
   *           // Do something when complete.
   *         }
   *       };
   *
   *   StreamShelvesRequest request = StreamShelvesRequest.newBuilder().build();
   *
   *   libraryClient.streamShelvesCallable().serverStreamingCall(request, responseObserver));
   * }
   * </code></pre>
   */
  public final StreamingCallable<StreamShelvesRequest, StreamShelvesResponse> streamShelvesCallable() {
    return streamShelvesCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test server streaming, non-paged responses.
   * gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ApiStreamObserver&lt;Book&gt; responseObserver =
   *       new ApiStreamObserver&lt;Book&gt;() {
   *         {@literal @}Override
   *         public void onNext(Book response) {
   *           // Do something when receive a response
   *         }
   *
   *         {@literal @}Override
   *         public void onError(Throwable t) {
   *           // Add error-handling
   *         }
   *
   *         {@literal @}Override
   *         public void onCompleted() {
   *           // Do something when complete.
   *         }
   *       };
   *
   *   String name = "";
   *   StreamBooksRequest request = StreamBooksRequest.newBuilder()
   *     .setName(name)
   *     .build();
   *
   *   libraryClient.streamBooksCallable().serverStreamingCall(request, responseObserver));
   * }
   * </code></pre>
   */
  public final StreamingCallable<StreamBooksRequest, Book> streamBooksCallable() {
    return streamBooksCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test bidi-streaming.
   * gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ApiStreamObserver&lt;Comment&gt; responseObserver =
   *       new ApiStreamObserver&lt;Comment&gt;() {
   *         {@literal @}Override
   *         public void onNext(Comment response) {
   *           // Do something when receive a response
   *         }
   *
   *         {@literal @}Override
   *         public void onError(Throwable t) {
   *           // Add error-handling
   *         }
   *
   *         {@literal @}Override
   *         public void onCompleted() {
   *           // Do something when complete.
   *         }
   *       };
   *   ApiStreamObserver&lt;StreamingRecognizeRequest&gt; requestObserver =
   *       libraryClient.discussBookCallable().bidiStreamingCall(responseObserver));
   *
   *   String name = "";
   *   DiscussBookRequest request = DiscussBookRequest.newBuilder()
   *     .setName(name)
   *     .build();
   *   requestObserver.onNext(request);
   * }
   * </code></pre>
   */
  public final StreamingCallable<DiscussBookRequest, Comment> discussBookCallable() {
    return discussBookCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test client streaming.
   * gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   ApiStreamObserver&lt;Comment&gt; responseObserver =
   *       new ApiStreamObserver&lt;Comment&gt;() {
   *         {@literal @}Override
   *         public void onNext(Comment response) {
   *           // Do something when receive a response
   *         }
   *
   *         {@literal @}Override
   *         public void onError(Throwable t) {
   *           // Add error-handling
   *         }
   *
   *         {@literal @}Override
   *         public void onCompleted() {
   *           // Do something when complete.
   *         }
   *       };
   *   ApiStreamObserver&lt;StreamingRecognizeRequest&gt; requestObserver =
   *       libraryClient.monologAboutBookCallable().clientStreamingCall(responseObserver));
   *
   *   String name = "";
   *   DiscussBookRequest request = DiscussBookRequest.newBuilder()
   *     .setName(name)
   *     .build();
   *   requestObserver.onNext(request);
   * }
   * </code></pre>
   */
  public final StreamingCallable<DiscussBookRequest, Comment> monologAboutBookCallable() {
    return monologAboutBookCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName namesElement = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   List&lt;BookName&gt; names = Arrays.asList(namesElement);
   *   List&lt;ShelfName&gt; shelves = new ArrayList&lt;&gt;();
   *   for (BookName element : libraryClient.findRelatedBooks(names, shelves).iterateAllAsBookName()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param names
   * @param shelves
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final FindRelatedBooksPagedResponse findRelatedBooks(List<BookName> names, List<ShelfName> shelves) {
    FindRelatedBooksRequest request =
        FindRelatedBooksRequest.newBuilder()
        .addAllNamesWithBookNameList(names)
        .addAllShelvesWithShelfNameList(shelves)
        .build();
    return findRelatedBooks(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName namesElement = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   List&lt;BookName&gt; names = Arrays.asList(namesElement);
   *   List&lt;ShelfName&gt; shelves = new ArrayList&lt;&gt;();
   *   FindRelatedBooksRequest request = FindRelatedBooksRequest.newBuilder()
   *     .addAllNamesWithBookNameList(names)
   *     .addAllShelvesWithShelfNameList(shelves)
   *     .build();
   *   for (BookName element : libraryClient.findRelatedBooks(request).iterateAllAsBookName()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  private final FindRelatedBooksPagedResponse findRelatedBooks(FindRelatedBooksRequest request) {
    return findRelatedBooksPagedCallable()
        .call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName namesElement = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   List&lt;BookName&gt; names = Arrays.asList(namesElement);
   *   List&lt;ShelfName&gt; shelves = new ArrayList&lt;&gt;();
   *   FindRelatedBooksRequest request = FindRelatedBooksRequest.newBuilder()
   *     .addAllNamesWithBookNameList(names)
   *     .addAllShelvesWithShelfNameList(shelves)
   *     .build();
   *   ApiFuture&lt;FindRelatedBooksPagedResponse&gt; future = libraryClient.findRelatedBooksPagedCallable().futureCall(request);
   *   // Do something
   *   for (BookName element : future.get().iterateAllAsBookName()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   */
  public final UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksPagedResponse> findRelatedBooksPagedCallable() {
    return findRelatedBooksPagedCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   *
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName namesElement = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   List&lt;BookName&gt; names = Arrays.asList(namesElement);
   *   List&lt;ShelfName&gt; shelves = new ArrayList&lt;&gt;();
   *   FindRelatedBooksRequest request = FindRelatedBooksRequest.newBuilder()
   *     .addAllNamesWithBookNameList(names)
   *     .addAllShelvesWithShelfNameList(shelves)
   *     .build();
   *   while (true) {
   *     FindRelatedBooksResponse response = libraryClient.findRelatedBooksCallable().call(request);
   *     for (BookName element : response.getNamesListAsBookNameList()) {
   *       // doThingsWith(element);
   *     }
   *     String nextPageToken = response.getNextPageToken();
   *     if (!Strings.isNullOrEmpty(nextPageToken)) {
   *       request = request.toBuilder().setPageToken(nextPageToken).build();
   *     } else {
   *       break;
   *     }
   *   }
   * }
   * </code></pre>
   */
  public final UnaryCallable<FindRelatedBooksRequest, FindRelatedBooksResponse> findRelatedBooksCallable() {
    return findRelatedBooksCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Adds a tag to the book. This RPC is a mixin.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   String formattedResource = BookName.create("[SHELF_ID]", "[BOOK_ID]").toString();
   *   String tag = "";
   *   AddTagResponse response = libraryClient.addTag(formattedResource, tag);
   * }
   * </code></pre>
   *
   * @param resource REQUIRED: The resource which the tag is being added to.
   * Resource is usually specified as a path, such as,
   * projects/{project}/zones/{zone}/disks/{disk}.
   * @param tag REQUIRED: The tag to add.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final AddTagResponse addTag(String resource, String tag) {

    AddTagRequest request =
        AddTagRequest.newBuilder()
        .setResource(resource)
        .setTag(tag)
        .build();
    return addTag(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Adds a tag to the book. This RPC is a mixin.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   String formattedResource = BookName.create("[SHELF_ID]", "[BOOK_ID]").toString();
   *   String tag = "";
   *   AddTagRequest request = AddTagRequest.newBuilder()
   *     .setResource(formattedResource)
   *     .setTag(tag)
   *     .build();
   *   AddTagResponse response = libraryClient.addTag(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final AddTagResponse addTag(AddTagRequest request) {
    return addTagCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Adds a tag to the book. This RPC is a mixin.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   String formattedResource = BookName.create("[SHELF_ID]", "[BOOK_ID]").toString();
   *   String tag = "";
   *   AddTagRequest request = AddTagRequest.newBuilder()
   *     .setResource(formattedResource)
   *     .setTag(tag)
   *     .build();
   *   ApiFuture&lt;AddTagResponse&gt; future = libraryClient.addTagCallable().futureCall(request);
   *   // Do something
   *   AddTagResponse response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<AddTagRequest, AddTagResponse> addTagCallable() {
    return addTagCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Adds a label to the entity.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   String formattedResource = BookName.create("[SHELF_ID]", "[BOOK_ID]").toString();
   *   String label = "";
   *   AddLabelResponse response = libraryClient.addLabel(formattedResource, label);
   * }
   * </code></pre>
   *
   * @param resource REQUIRED: The resource which the label is being added to.
   * Resource is usually specified as a path, such as,
   * projects/{project}/zones/{zone}/disks/{disk}.
   * @param label REQUIRED: The label to add.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  @Deprecated
  /* package-private */ final AddLabelResponse addLabel(String resource, String label) {

    AddLabelRequest request =
        AddLabelRequest.newBuilder()
        .setResource(resource)
        .setLabel(label)
        .build();
    return addLabel(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Adds a label to the entity.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   String formattedResource = BookName.create("[SHELF_ID]", "[BOOK_ID]").toString();
   *   String label = "";
   *   AddLabelRequest request = AddLabelRequest.newBuilder()
   *     .setResource(formattedResource)
   *     .setLabel(label)
   *     .build();
   *   AddLabelResponse response = libraryClient.addLabel(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  @Deprecated
  /* package-private */ final AddLabelResponse addLabel(AddLabelRequest request) {
    return addLabelCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Adds a label to the entity.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   String formattedResource = BookName.create("[SHELF_ID]", "[BOOK_ID]").toString();
   *   String label = "";
   *   AddLabelRequest request = AddLabelRequest.newBuilder()
   *     .setResource(formattedResource)
   *     .setLabel(label)
   *     .build();
   *   ApiFuture&lt;AddLabelResponse&gt; future = libraryClient.addLabelCallable().futureCall(request);
   *   // Do something
   *   AddLabelResponse response = future.get();
   * }
   * </code></pre>
   */
  @Deprecated
  /* package-private */ final UnaryCallable<AddLabelRequest, AddLabelResponse> addLabelCallable() {
    return addLabelCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   Book response = libraryClient.getBigBookAsync(name).get();
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final OperationFuture<Book> getBigBookAsync(BookName name) {

    GetBookRequest request =
        GetBookRequest.newBuilder()
        .setNameWithBookName(name)
        .build();
    return getBigBookAsync(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   GetBookRequest request = GetBookRequest.newBuilder()
   *     .setNameWithBookName(name)
   *     .build();
   *   Book response = libraryClient.getBigBookAsync(request).get();
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final OperationFuture<Book> getBigBookAsync(GetBookRequest request) {
    return getBigBookOperationCallable().futureCall(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   GetBookRequest request = GetBookRequest.newBuilder()
   *     .setNameWithBookName(name)
   *     .build();
   *   OperationFuture&lt;Operation&gt; future = libraryClient.getBigBookOperationCallable().futureCall(request);
   *   // Do something
   *   Book response = future.get();
   * }
   * </code></pre>
   */
  public final OperationCallable<GetBookRequest, Book> getBigBookOperationCallable() {
    return getBigBookOperationCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   GetBookRequest request = GetBookRequest.newBuilder()
   *     .setNameWithBookName(name)
   *     .build();
   *   ApiFuture&lt;Operation&gt; future = libraryClient.getBigBookCallable().futureCall(request);
   *   // Do something
   *   Operation response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<GetBookRequest, Operation> getBigBookCallable() {
    return getBigBookCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations with empty return type.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   Empty response = libraryClient.getBigNothingAsync(name).get();
   * }
   * </code></pre>
   *
   * @param name The name of the book to retrieve.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final OperationFuture<Empty> getBigNothingAsync(BookName name) {

    GetBookRequest request =
        GetBookRequest.newBuilder()
        .setNameWithBookName(name)
        .build();
    return getBigNothingAsync(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations with empty return type.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   GetBookRequest request = GetBookRequest.newBuilder()
   *     .setNameWithBookName(name)
   *     .build();
   *   Empty response = libraryClient.getBigNothingAsync(request).get();
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final OperationFuture<Empty> getBigNothingAsync(GetBookRequest request) {
    return getBigNothingOperationCallable().futureCall(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations with empty return type.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   GetBookRequest request = GetBookRequest.newBuilder()
   *     .setNameWithBookName(name)
   *     .build();
   *   OperationFuture&lt;Operation&gt; future = libraryClient.getBigNothingOperationCallable().futureCall(request);
   *   // Do something
   *   Empty response = future.get();
   * }
   * </code></pre>
   */
  public final OperationCallable<GetBookRequest, Empty> getBigNothingOperationCallable() {
    return getBigNothingOperationCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test long-running operations with empty return type.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   GetBookRequest request = GetBookRequest.newBuilder()
   *     .setNameWithBookName(name)
   *     .build();
   *   ApiFuture&lt;Operation&gt; future = libraryClient.getBigNothingCallable().futureCall(request);
   *   // Do something
   *   future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<GetBookRequest, Operation> getBigNothingCallable() {
    return getBigNothingCallable;
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test optional flattening parameters of all types
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *
   *   TestOptionalRequiredFlatteningParamsResponse response = libraryClient.testOptionalRequiredFlatteningParams();
   * }
   * </code></pre>
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final TestOptionalRequiredFlatteningParamsResponse testOptionalRequiredFlatteningParams() {

    TestOptionalRequiredFlatteningParamsRequest request =
        TestOptionalRequiredFlatteningParamsRequest.newBuilder()

        .build();
    return testOptionalRequiredFlatteningParams(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test optional flattening parameters of all types
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   int requiredSingularInt32 = 0;
   *   long requiredSingularInt64 = 0L;
   *   float requiredSingularFloat = 0.0F;
   *   double requiredSingularDouble = 0.0;
   *   boolean requiredSingularBool = false;
   *   TestOptionalRequiredFlatteningParamsRequest.InnerEnum requiredSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
   *   String requiredSingularString = "";
   *   ByteString requiredSingularBytes = ByteString.copyFromUtf8("");
   *   TestOptionalRequiredFlatteningParamsRequest.InnerMessage requiredSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
   *   BookName requiredSingularResourceName = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   BookNameOneof requiredSingularResourceNameOneof = BookNameOneof.from(BookName.create("[SHELF_ID]", "[BOOK_ID]"));
   *   int requiredSingularFixed32 = 0;
   *   long requiredSingularFixed64 = 0L;
   *   List&lt;Integer&gt; requiredRepeatedInt32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; requiredRepeatedInt64 = new ArrayList&lt;&gt;();
   *   List&lt;Float&gt; requiredRepeatedFloat = new ArrayList&lt;&gt;();
   *   List&lt;Double&gt; requiredRepeatedDouble = new ArrayList&lt;&gt;();
   *   List&lt;Boolean&gt; requiredRepeatedBool = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerEnum&gt; requiredRepeatedEnum = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; requiredRepeatedString = new ArrayList&lt;&gt;();
   *   List&lt;ByteString&gt; requiredRepeatedBytes = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerMessage&gt; requiredRepeatedMessage = new ArrayList&lt;&gt;();
   *   List&lt;BookName&gt; requiredRepeatedResourceName = new ArrayList&lt;&gt;();
   *   List&lt;BookNameOneof&gt; requiredRepeatedResourceNameOneof = new ArrayList&lt;&gt;();
   *   List&lt;Integer&gt; requiredRepeatedFixed32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; requiredRepeatedFixed64 = new ArrayList&lt;&gt;();
   *   Map&lt;Integer, String&gt; requiredMap = new HashMap&lt;&gt;();
   *   int optionalSingularInt32 = 0;
   *   long optionalSingularInt64 = 0L;
   *   float optionalSingularFloat = 0.0F;
   *   double optionalSingularDouble = 0.0;
   *   boolean optionalSingularBool = false;
   *   TestOptionalRequiredFlatteningParamsRequest.InnerEnum optionalSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
   *   String optionalSingularString = "";
   *   ByteString optionalSingularBytes = ByteString.copyFromUtf8("");
   *   TestOptionalRequiredFlatteningParamsRequest.InnerMessage optionalSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
   *   BookName optionalSingularResourceName = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   BookNameOneof optionalSingularResourceNameOneof = BookNameOneof.from(BookName.create("[SHELF_ID]", "[BOOK_ID]"));
   *   int optionalSingularFixed32 = 0;
   *   long optionalSingularFixed64 = 0L;
   *   List&lt;Integer&gt; optionalRepeatedInt32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; optionalRepeatedInt64 = new ArrayList&lt;&gt;();
   *   List&lt;Float&gt; optionalRepeatedFloat = new ArrayList&lt;&gt;();
   *   List&lt;Double&gt; optionalRepeatedDouble = new ArrayList&lt;&gt;();
   *   List&lt;Boolean&gt; optionalRepeatedBool = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerEnum&gt; optionalRepeatedEnum = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; optionalRepeatedString = new ArrayList&lt;&gt;();
   *   List&lt;ByteString&gt; optionalRepeatedBytes = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerMessage&gt; optionalRepeatedMessage = new ArrayList&lt;&gt;();
   *   List&lt;BookName&gt; optionalRepeatedResourceName = new ArrayList&lt;&gt;();
   *   List&lt;BookNameOneof&gt; optionalRepeatedResourceNameOneof = new ArrayList&lt;&gt;();
   *   List&lt;Integer&gt; optionalRepeatedFixed32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; optionalRepeatedFixed64 = new ArrayList&lt;&gt;();
   *   Map&lt;Integer, String&gt; optionalMap = new HashMap&lt;&gt;();
   *   TestOptionalRequiredFlatteningParamsResponse response = libraryClient.testOptionalRequiredFlatteningParams(requiredSingularInt32, requiredSingularInt64, requiredSingularFloat, requiredSingularDouble, requiredSingularBool, requiredSingularEnum, requiredSingularString, requiredSingularBytes, requiredSingularMessage, requiredSingularResourceName, requiredSingularResourceNameOneof, requiredSingularFixed32, requiredSingularFixed64, requiredRepeatedInt32, requiredRepeatedInt64, requiredRepeatedFloat, requiredRepeatedDouble, requiredRepeatedBool, requiredRepeatedEnum, requiredRepeatedString, requiredRepeatedBytes, requiredRepeatedMessage, requiredRepeatedResourceName, requiredRepeatedResourceNameOneof, requiredRepeatedFixed32, requiredRepeatedFixed64, requiredMap, optionalSingularInt32, optionalSingularInt64, optionalSingularFloat, optionalSingularDouble, optionalSingularBool, optionalSingularEnum, optionalSingularString, optionalSingularBytes, optionalSingularMessage, optionalSingularResourceName, optionalSingularResourceNameOneof, optionalSingularFixed32, optionalSingularFixed64, optionalRepeatedInt32, optionalRepeatedInt64, optionalRepeatedFloat, optionalRepeatedDouble, optionalRepeatedBool, optionalRepeatedEnum, optionalRepeatedString, optionalRepeatedBytes, optionalRepeatedMessage, optionalRepeatedResourceName, optionalRepeatedResourceNameOneof, optionalRepeatedFixed32, optionalRepeatedFixed64, optionalMap);
   * }
   * </code></pre>
   *
   * @param requiredSingularInt32
   * @param requiredSingularInt64
   * @param requiredSingularFloat
   * @param requiredSingularDouble
   * @param requiredSingularBool
   * @param requiredSingularEnum
   * @param requiredSingularString
   * @param requiredSingularBytes
   * @param requiredSingularMessage
   * @param requiredSingularResourceName
   * @param requiredSingularResourceNameOneof
   * @param requiredSingularFixed32
   * @param requiredSingularFixed64
   * @param requiredRepeatedInt32
   * @param requiredRepeatedInt64
   * @param requiredRepeatedFloat
   * @param requiredRepeatedDouble
   * @param requiredRepeatedBool
   * @param requiredRepeatedEnum
   * @param requiredRepeatedString
   * @param requiredRepeatedBytes
   * @param requiredRepeatedMessage
   * @param requiredRepeatedResourceName
   * @param requiredRepeatedResourceNameOneof
   * @param requiredRepeatedFixed32
   * @param requiredRepeatedFixed64
   * @param requiredMap
   * @param optionalSingularInt32
   * @param optionalSingularInt64
   * @param optionalSingularFloat
   * @param optionalSingularDouble
   * @param optionalSingularBool
   * @param optionalSingularEnum
   * @param optionalSingularString
   * @param optionalSingularBytes
   * @param optionalSingularMessage
   * @param optionalSingularResourceName
   * @param optionalSingularResourceNameOneof
   * @param optionalSingularFixed32
   * @param optionalSingularFixed64
   * @param optionalRepeatedInt32
   * @param optionalRepeatedInt64
   * @param optionalRepeatedFloat
   * @param optionalRepeatedDouble
   * @param optionalRepeatedBool
   * @param optionalRepeatedEnum
   * @param optionalRepeatedString
   * @param optionalRepeatedBytes
   * @param optionalRepeatedMessage
   * @param optionalRepeatedResourceName
   * @param optionalRepeatedResourceNameOneof
   * @param optionalRepeatedFixed32
   * @param optionalRepeatedFixed64
   * @param optionalMap
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final TestOptionalRequiredFlatteningParamsResponse testOptionalRequiredFlatteningParams(int requiredSingularInt32, long requiredSingularInt64, float requiredSingularFloat, double requiredSingularDouble, boolean requiredSingularBool, TestOptionalRequiredFlatteningParamsRequest.InnerEnum requiredSingularEnum, String requiredSingularString, ByteString requiredSingularBytes, TestOptionalRequiredFlatteningParamsRequest.InnerMessage requiredSingularMessage, BookName requiredSingularResourceName, BookNameOneof requiredSingularResourceNameOneof, int requiredSingularFixed32, long requiredSingularFixed64, List<Integer> requiredRepeatedInt32, List<Long> requiredRepeatedInt64, List<Float> requiredRepeatedFloat, List<Double> requiredRepeatedDouble, List<Boolean> requiredRepeatedBool, List<TestOptionalRequiredFlatteningParamsRequest.InnerEnum> requiredRepeatedEnum, List<String> requiredRepeatedString, List<ByteString> requiredRepeatedBytes, List<TestOptionalRequiredFlatteningParamsRequest.InnerMessage> requiredRepeatedMessage, List<BookName> requiredRepeatedResourceName, List<BookNameOneof> requiredRepeatedResourceNameOneof, List<Integer> requiredRepeatedFixed32, List<Long> requiredRepeatedFixed64, Map<Integer, String> requiredMap, int optionalSingularInt32, long optionalSingularInt64, float optionalSingularFloat, double optionalSingularDouble, boolean optionalSingularBool, TestOptionalRequiredFlatteningParamsRequest.InnerEnum optionalSingularEnum, String optionalSingularString, ByteString optionalSingularBytes, TestOptionalRequiredFlatteningParamsRequest.InnerMessage optionalSingularMessage, BookName optionalSingularResourceName, BookNameOneof optionalSingularResourceNameOneof, int optionalSingularFixed32, long optionalSingularFixed64, List<Integer> optionalRepeatedInt32, List<Long> optionalRepeatedInt64, List<Float> optionalRepeatedFloat, List<Double> optionalRepeatedDouble, List<Boolean> optionalRepeatedBool, List<TestOptionalRequiredFlatteningParamsRequest.InnerEnum> optionalRepeatedEnum, List<String> optionalRepeatedString, List<ByteString> optionalRepeatedBytes, List<TestOptionalRequiredFlatteningParamsRequest.InnerMessage> optionalRepeatedMessage, List<BookName> optionalRepeatedResourceName, List<BookNameOneof> optionalRepeatedResourceNameOneof, List<Integer> optionalRepeatedFixed32, List<Long> optionalRepeatedFixed64, Map<Integer, String> optionalMap) {

    TestOptionalRequiredFlatteningParamsRequest request =
        TestOptionalRequiredFlatteningParamsRequest.newBuilder()
        .setRequiredSingularInt32(requiredSingularInt32)
        .setRequiredSingularInt64(requiredSingularInt64)
        .setRequiredSingularFloat(requiredSingularFloat)
        .setRequiredSingularDouble(requiredSingularDouble)
        .setRequiredSingularBool(requiredSingularBool)
        .setRequiredSingularEnum(requiredSingularEnum)
        .setRequiredSingularString(requiredSingularString)
        .setRequiredSingularBytes(requiredSingularBytes)
        .setRequiredSingularMessage(requiredSingularMessage)
        .setRequiredSingularResourceNameWithBookName(requiredSingularResourceName)
        .setRequiredSingularResourceNameOneofWithBookNameOneof(requiredSingularResourceNameOneof)
        .setRequiredSingularFixed32(requiredSingularFixed32)
        .setRequiredSingularFixed64(requiredSingularFixed64)
        .addAllRequiredRepeatedInt32(requiredRepeatedInt32)
        .addAllRequiredRepeatedInt64(requiredRepeatedInt64)
        .addAllRequiredRepeatedFloat(requiredRepeatedFloat)
        .addAllRequiredRepeatedDouble(requiredRepeatedDouble)
        .addAllRequiredRepeatedBool(requiredRepeatedBool)
        .addAllRequiredRepeatedEnum(requiredRepeatedEnum)
        .addAllRequiredRepeatedString(requiredRepeatedString)
        .addAllRequiredRepeatedBytes(requiredRepeatedBytes)
        .addAllRequiredRepeatedMessage(requiredRepeatedMessage)
        .addAllRequiredRepeatedResourceNameWithBookNameList(requiredRepeatedResourceName)
        .addAllRequiredRepeatedResourceNameOneofWithBookNameOneofList(requiredRepeatedResourceNameOneof)
        .addAllRequiredRepeatedFixed32(requiredRepeatedFixed32)
        .addAllRequiredRepeatedFixed64(requiredRepeatedFixed64)
        .putAllRequiredMap(requiredMap)
        .setOptionalSingularInt32(optionalSingularInt32)
        .setOptionalSingularInt64(optionalSingularInt64)
        .setOptionalSingularFloat(optionalSingularFloat)
        .setOptionalSingularDouble(optionalSingularDouble)
        .setOptionalSingularBool(optionalSingularBool)
        .setOptionalSingularEnum(optionalSingularEnum)
        .setOptionalSingularString(optionalSingularString)
        .setOptionalSingularBytes(optionalSingularBytes)
        .setOptionalSingularMessage(optionalSingularMessage)
        .setOptionalSingularResourceNameWithBookName(optionalSingularResourceName)
        .setOptionalSingularResourceNameOneofWithBookNameOneof(optionalSingularResourceNameOneof)
        .setOptionalSingularFixed32(optionalSingularFixed32)
        .setOptionalSingularFixed64(optionalSingularFixed64)
        .addAllOptionalRepeatedInt32(optionalRepeatedInt32)
        .addAllOptionalRepeatedInt64(optionalRepeatedInt64)
        .addAllOptionalRepeatedFloat(optionalRepeatedFloat)
        .addAllOptionalRepeatedDouble(optionalRepeatedDouble)
        .addAllOptionalRepeatedBool(optionalRepeatedBool)
        .addAllOptionalRepeatedEnum(optionalRepeatedEnum)
        .addAllOptionalRepeatedString(optionalRepeatedString)
        .addAllOptionalRepeatedBytes(optionalRepeatedBytes)
        .addAllOptionalRepeatedMessage(optionalRepeatedMessage)
        .addAllOptionalRepeatedResourceNameWithBookNameList(optionalRepeatedResourceName)
        .addAllOptionalRepeatedResourceNameOneofWithBookNameOneofList(optionalRepeatedResourceNameOneof)
        .addAllOptionalRepeatedFixed32(optionalRepeatedFixed32)
        .addAllOptionalRepeatedFixed64(optionalRepeatedFixed64)
        .putAllOptionalMap(optionalMap)
        .build();
    return testOptionalRequiredFlatteningParams(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test optional flattening parameters of all types
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   int requiredSingularInt32 = 0;
   *   long requiredSingularInt64 = 0L;
   *   float requiredSingularFloat = 0.0F;
   *   double requiredSingularDouble = 0.0;
   *   boolean requiredSingularBool = false;
   *   TestOptionalRequiredFlatteningParamsRequest.InnerEnum requiredSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
   *   String requiredSingularString = "";
   *   ByteString requiredSingularBytes = ByteString.copyFromUtf8("");
   *   TestOptionalRequiredFlatteningParamsRequest.InnerMessage requiredSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
   *   BookName requiredSingularResourceName = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   BookNameOneof requiredSingularResourceNameOneof = BookNameOneof.from(BookName.create("[SHELF_ID]", "[BOOK_ID]"));
   *   int requiredSingularFixed32 = 0;
   *   long requiredSingularFixed64 = 0L;
   *   List&lt;Integer&gt; requiredRepeatedInt32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; requiredRepeatedInt64 = new ArrayList&lt;&gt;();
   *   List&lt;Float&gt; requiredRepeatedFloat = new ArrayList&lt;&gt;();
   *   List&lt;Double&gt; requiredRepeatedDouble = new ArrayList&lt;&gt;();
   *   List&lt;Boolean&gt; requiredRepeatedBool = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerEnum&gt; requiredRepeatedEnum = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; requiredRepeatedString = new ArrayList&lt;&gt;();
   *   List&lt;ByteString&gt; requiredRepeatedBytes = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerMessage&gt; requiredRepeatedMessage = new ArrayList&lt;&gt;();
   *   List&lt;BookName&gt; requiredRepeatedResourceName = new ArrayList&lt;&gt;();
   *   List&lt;BookNameOneof&gt; requiredRepeatedResourceNameOneof = new ArrayList&lt;&gt;();
   *   List&lt;Integer&gt; requiredRepeatedFixed32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; requiredRepeatedFixed64 = new ArrayList&lt;&gt;();
   *   Map&lt;Integer, String&gt; requiredMap = new HashMap&lt;&gt;();
   *   TestOptionalRequiredFlatteningParamsRequest request = TestOptionalRequiredFlatteningParamsRequest.newBuilder()
   *     .setRequiredSingularInt32(requiredSingularInt32)
   *     .setRequiredSingularInt64(requiredSingularInt64)
   *     .setRequiredSingularFloat(requiredSingularFloat)
   *     .setRequiredSingularDouble(requiredSingularDouble)
   *     .setRequiredSingularBool(requiredSingularBool)
   *     .setRequiredSingularEnum(requiredSingularEnum)
   *     .setRequiredSingularString(requiredSingularString)
   *     .setRequiredSingularBytes(requiredSingularBytes)
   *     .setRequiredSingularMessage(requiredSingularMessage)
   *     .setRequiredSingularResourceNameWithBookName(requiredSingularResourceName)
   *     .setRequiredSingularResourceNameOneofWithBookNameOneof(requiredSingularResourceNameOneof)
   *     .setRequiredSingularFixed32(requiredSingularFixed32)
   *     .setRequiredSingularFixed64(requiredSingularFixed64)
   *     .addAllRequiredRepeatedInt32(requiredRepeatedInt32)
   *     .addAllRequiredRepeatedInt64(requiredRepeatedInt64)
   *     .addAllRequiredRepeatedFloat(requiredRepeatedFloat)
   *     .addAllRequiredRepeatedDouble(requiredRepeatedDouble)
   *     .addAllRequiredRepeatedBool(requiredRepeatedBool)
   *     .addAllRequiredRepeatedEnum(requiredRepeatedEnum)
   *     .addAllRequiredRepeatedString(requiredRepeatedString)
   *     .addAllRequiredRepeatedBytes(requiredRepeatedBytes)
   *     .addAllRequiredRepeatedMessage(requiredRepeatedMessage)
   *     .addAllRequiredRepeatedResourceNameWithBookNameList(requiredRepeatedResourceName)
   *     .addAllRequiredRepeatedResourceNameOneofWithBookNameOneofList(requiredRepeatedResourceNameOneof)
   *     .addAllRequiredRepeatedFixed32(requiredRepeatedFixed32)
   *     .addAllRequiredRepeatedFixed64(requiredRepeatedFixed64)
   *     .putAllRequiredMap(requiredMap)
   *     .build();
   *   TestOptionalRequiredFlatteningParamsResponse response = libraryClient.testOptionalRequiredFlatteningParams(request);
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final TestOptionalRequiredFlatteningParamsResponse testOptionalRequiredFlatteningParams(TestOptionalRequiredFlatteningParamsRequest request) {
    return testOptionalRequiredFlatteningParamsCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Test optional flattening parameters of all types
   *
   * Sample code:
   * <pre><code>
   * try (LibraryClient libraryClient = LibraryClient.create()) {
   *   int requiredSingularInt32 = 0;
   *   long requiredSingularInt64 = 0L;
   *   float requiredSingularFloat = 0.0F;
   *   double requiredSingularDouble = 0.0;
   *   boolean requiredSingularBool = false;
   *   TestOptionalRequiredFlatteningParamsRequest.InnerEnum requiredSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
   *   String requiredSingularString = "";
   *   ByteString requiredSingularBytes = ByteString.copyFromUtf8("");
   *   TestOptionalRequiredFlatteningParamsRequest.InnerMessage requiredSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
   *   BookName requiredSingularResourceName = BookName.create("[SHELF_ID]", "[BOOK_ID]");
   *   BookNameOneof requiredSingularResourceNameOneof = BookNameOneof.from(BookName.create("[SHELF_ID]", "[BOOK_ID]"));
   *   int requiredSingularFixed32 = 0;
   *   long requiredSingularFixed64 = 0L;
   *   List&lt;Integer&gt; requiredRepeatedInt32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; requiredRepeatedInt64 = new ArrayList&lt;&gt;();
   *   List&lt;Float&gt; requiredRepeatedFloat = new ArrayList&lt;&gt;();
   *   List&lt;Double&gt; requiredRepeatedDouble = new ArrayList&lt;&gt;();
   *   List&lt;Boolean&gt; requiredRepeatedBool = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerEnum&gt; requiredRepeatedEnum = new ArrayList&lt;&gt;();
   *   List&lt;String&gt; requiredRepeatedString = new ArrayList&lt;&gt;();
   *   List&lt;ByteString&gt; requiredRepeatedBytes = new ArrayList&lt;&gt;();
   *   List&lt;TestOptionalRequiredFlatteningParamsRequest.InnerMessage&gt; requiredRepeatedMessage = new ArrayList&lt;&gt;();
   *   List&lt;BookName&gt; requiredRepeatedResourceName = new ArrayList&lt;&gt;();
   *   List&lt;BookNameOneof&gt; requiredRepeatedResourceNameOneof = new ArrayList&lt;&gt;();
   *   List&lt;Integer&gt; requiredRepeatedFixed32 = new ArrayList&lt;&gt;();
   *   List&lt;Long&gt; requiredRepeatedFixed64 = new ArrayList&lt;&gt;();
   *   Map&lt;Integer, String&gt; requiredMap = new HashMap&lt;&gt;();
   *   TestOptionalRequiredFlatteningParamsRequest request = TestOptionalRequiredFlatteningParamsRequest.newBuilder()
   *     .setRequiredSingularInt32(requiredSingularInt32)
   *     .setRequiredSingularInt64(requiredSingularInt64)
   *     .setRequiredSingularFloat(requiredSingularFloat)
   *     .setRequiredSingularDouble(requiredSingularDouble)
   *     .setRequiredSingularBool(requiredSingularBool)
   *     .setRequiredSingularEnum(requiredSingularEnum)
   *     .setRequiredSingularString(requiredSingularString)
   *     .setRequiredSingularBytes(requiredSingularBytes)
   *     .setRequiredSingularMessage(requiredSingularMessage)
   *     .setRequiredSingularResourceNameWithBookName(requiredSingularResourceName)
   *     .setRequiredSingularResourceNameOneofWithBookNameOneof(requiredSingularResourceNameOneof)
   *     .setRequiredSingularFixed32(requiredSingularFixed32)
   *     .setRequiredSingularFixed64(requiredSingularFixed64)
   *     .addAllRequiredRepeatedInt32(requiredRepeatedInt32)
   *     .addAllRequiredRepeatedInt64(requiredRepeatedInt64)
   *     .addAllRequiredRepeatedFloat(requiredRepeatedFloat)
   *     .addAllRequiredRepeatedDouble(requiredRepeatedDouble)
   *     .addAllRequiredRepeatedBool(requiredRepeatedBool)
   *     .addAllRequiredRepeatedEnum(requiredRepeatedEnum)
   *     .addAllRequiredRepeatedString(requiredRepeatedString)
   *     .addAllRequiredRepeatedBytes(requiredRepeatedBytes)
   *     .addAllRequiredRepeatedMessage(requiredRepeatedMessage)
   *     .addAllRequiredRepeatedResourceNameWithBookNameList(requiredRepeatedResourceName)
   *     .addAllRequiredRepeatedResourceNameOneofWithBookNameOneofList(requiredRepeatedResourceNameOneof)
   *     .addAllRequiredRepeatedFixed32(requiredRepeatedFixed32)
   *     .addAllRequiredRepeatedFixed64(requiredRepeatedFixed64)
   *     .putAllRequiredMap(requiredMap)
   *     .build();
   *   ApiFuture&lt;TestOptionalRequiredFlatteningParamsResponse&gt; future = libraryClient.testOptionalRequiredFlatteningParamsCallable().futureCall(request);
   *   // Do something
   *   TestOptionalRequiredFlatteningParamsResponse response = future.get();
   * }
   * </code></pre>
   */
  public final UnaryCallable<TestOptionalRequiredFlatteningParamsRequest, TestOptionalRequiredFlatteningParamsResponse> testOptionalRequiredFlatteningParamsCallable() {
    return testOptionalRequiredFlatteningParamsCallable;
  }

  /**
   * Initiates an orderly shutdown in which preexisting calls continue but new calls are immediately
   * cancelled.
   */
  @Override
  public final void close() throws Exception {
    for (AutoCloseable closeable : closeables) {
      closeable.close();
    }
  }

}
