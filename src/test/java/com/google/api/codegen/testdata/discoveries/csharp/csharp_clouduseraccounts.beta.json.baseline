
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.Services;
using System.Threading.Tasks;


namespace CloudUserAccountsSample
{
    public class CloudUserAccountsServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the clouduseraccounts service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // * Project ID for this request.
            string project = "";

            // * Name of the Operations resource to delete.
            string operation = "";


            GlobalAccountsOperationsResource.DeleteRequest request = cloudUserAccountsService.GlobalAccountsOperations.Delete(project, operation);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudUserAccounts.beta.Data;


namespace CloudUserAccountsSample
{
    public class CloudUserAccountsServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the clouduseraccounts service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // * Project ID for this request.
            string project = "";

            // * Name of the Operations resource to return.
            string operation = "";


            GlobalAccountsOperationsResource.GetRequest request = cloudUserAccountsService.GlobalAccountsOperations.Get(project, operation);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudUserAccounts.beta.Data;


namespace CloudUserAccountsSample
{
    public class CloudUserAccountsServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the clouduseraccounts service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // * Project ID for this request.
            string project = "";


            GlobalAccountsOperationsResource.ListRequest request = cloudUserAccountsService.GlobalAccountsOperations.List(project);

            Data.OperationList response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Operation operation in response.Items)
                {
                    // TODO: Change code below to process each `operation` resource:
                    Console.WriteLine(new JavaScriptSerializer().Serialize(operation));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudUserAccounts.beta.Data;


namespace CloudUserAccountsSample
{
    public class CloudUserAccountsServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the clouduseraccounts service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `AddMember` method:

            // * Project ID for this request.
            string project = "";

            // * Name of the group for this request.
            string groupName = "";


            Data.GroupsAddMemberRequest requestBody = new Data.GroupsAddMemberRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            GroupsResource.AddMemberRequest request = cloudUserAccountsService.Groups.AddMember(requestBody, project, groupName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudUserAccounts.beta.Data;


namespace CloudUserAccountsSample
{
    public class CloudUserAccountsServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the clouduseraccounts service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // * Project ID for this request.
            string project = "";

            // * Name of the Group resource to delete.
            string groupName = "";


            GroupsResource.DeleteRequest request = cloudUserAccountsService.Groups.Delete(project, groupName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudUserAccounts.beta.Data;


namespace CloudUserAccountsSample
{
    public class CloudUserAccountsServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the clouduseraccounts service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // * Project ID for this request.
            string project = "";

            // * Name of the Group resource to return.
            string groupName = "";


            GroupsResource.GetRequest request = cloudUserAccountsService.Groups.Get(project, groupName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Group response = request.Execute();
            // Data.Group response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudUserAccounts.beta.Data;


namespace CloudUserAccountsSample
{
    public class CloudUserAccountsServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the clouduseraccounts service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Insert` method:

            // * Project ID for this request.
            string project = "";


            Data.Group requestBody = new Data.Group();
            // TODO: Assign values to desired properties of the `requestBody` object.


            GroupsResource.InsertRequest request = cloudUserAccountsService.Groups.Insert(requestBody, project);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudUserAccounts.beta.Data;


namespace CloudUserAccountsSample
{
    public class CloudUserAccountsServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the clouduseraccounts service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // * Project ID for this request.
            string project = "";


            GroupsResource.ListRequest request = cloudUserAccountsService.Groups.List(project);

            Data.GroupList response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Group group_ in response.Items)
                {
                    // TODO: Change code below to process each `group_` resource:
                    Console.WriteLine(new JavaScriptSerializer().Serialize(group_));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudUserAccounts.beta.Data;


namespace CloudUserAccountsSample
{
    public class CloudUserAccountsServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the clouduseraccounts service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `RemoveMember` method:

            // * Project ID for this request.
            string project = "";

            // * Name of the group for this request.
            string groupName = "";


            Data.GroupsRemoveMemberRequest requestBody = new Data.GroupsRemoveMemberRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            GroupsResource.RemoveMemberRequest request = cloudUserAccountsService.Groups.RemoveMember(requestBody, project, groupName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudUserAccounts.beta.Data;


namespace CloudUserAccountsSample
{
    public class CloudUserAccountsServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the clouduseraccounts service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `GetAuthorizedKeysView` method:

            // * Project ID for this request.
            string project = "";

            // * Name of the zone for this request.
            string zone = "";

            // * The user account for which you want to get a list of authorized public keys.
            string user = "";

            // * The fully-qualified URL of the virtual machine requesting the view.
            string instance = "";


            LinuxResource.GetAuthorizedKeysViewRequest request = cloudUserAccountsService.Linux.GetAuthorizedKeysView(project, zone, user, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.LinuxGetAuthorizedKeysViewResponse response = request.Execute();
            // Data.LinuxGetAuthorizedKeysViewResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudUserAccounts.beta.Data;


namespace CloudUserAccountsSample
{
    public class CloudUserAccountsServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the clouduseraccounts service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `GetLinuxAccountViews` method:

            // * Project ID for this request.
            string project = "";

            // * Name of the zone for this request.
            string zone = "";

            // * The fully-qualified URL of the virtual machine requesting the views.
            string instance = "";


            LinuxResource.GetLinuxAccountViewsRequest request = cloudUserAccountsService.Linux.GetLinuxAccountViews(project, zone, instance);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.LinuxGetLinuxAccountViewsResponse response = request.Execute();
            // Data.LinuxGetLinuxAccountViewsResponse response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudUserAccounts.beta.Data;


namespace CloudUserAccountsSample
{
    public class CloudUserAccountsServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the clouduseraccounts service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `AddPublicKey` method:

            // * Project ID for this request.
            string project = "";

            // * Name of the user for this request.
            string user = "";


            Data.PublicKey requestBody = new Data.PublicKey();
            // TODO: Assign values to desired properties of the `requestBody` object.


            UsersResource.AddPublicKeyRequest request = cloudUserAccountsService.Users.AddPublicKey(requestBody, project, user);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudUserAccounts.beta.Data;


namespace CloudUserAccountsSample
{
    public class CloudUserAccountsServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the clouduseraccounts service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // * Project ID for this request.
            string project = "";

            // * Name of the user resource to delete.
            string user = "";


            UsersResource.DeleteRequest request = cloudUserAccountsService.Users.Delete(project, user);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudUserAccounts.beta.Data;


namespace CloudUserAccountsSample
{
    public class CloudUserAccountsServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the clouduseraccounts service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // * Project ID for this request.
            string project = "";

            // * Name of the user resource to return.
            string user = "";


            UsersResource.GetRequest request = cloudUserAccountsService.Users.Get(project, user);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.User response = request.Execute();
            // Data.User response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudUserAccounts.beta.Data;


namespace CloudUserAccountsSample
{
    public class CloudUserAccountsServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the clouduseraccounts service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Insert` method:

            // * Project ID for this request.
            string project = "";


            Data.User requestBody = new Data.User();
            // TODO: Assign values to desired properties of the `requestBody` object.


            UsersResource.InsertRequest request = cloudUserAccountsService.Users.Insert(requestBody, project);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudUserAccounts.beta.Data;


namespace CloudUserAccountsSample
{
    public class CloudUserAccountsServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the clouduseraccounts service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // * Project ID for this request.
            string project = "";


            UsersResource.ListRequest request = cloudUserAccountsService.Users.List(project);

            Data.UserList response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.User user in response.Items)
                {
                    // TODO: Change code below to process each `user` resource:
                    Console.WriteLine(new JavaScriptSerializer().Serialize(user));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.CloudUserAccounts.beta.Data;


namespace CloudUserAccountsSample
{
    public class CloudUserAccountsServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            // Construct the clouduseraccounts service object for interacting with the API.
            // You can browse other available API services and versions at
            // https://developers.google.com/api-client-library/dotnet/apis/
            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `RemovePublicKey` method:

            // * Project ID for this request.
            string project = "";

            // * Name of the user for this request.
            string user = "";

            // * The fingerprint of the public key to delete. Public keys are identified by their fingerprint,
            //   which is defined by RFC4716 to be the MD5 digest of the public key.
            string fingerprint = "";


            UsersResource.RemovePublicKeyRequest request = cloudUserAccountsService.Users.RemovePublicKey(project, user, fingerprint);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
