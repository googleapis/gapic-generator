
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace CloudUserAccountsSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:
            // Project ID for this request.
            string project = "";
            // Name of the Operations resource to delete.
            string operation = "";

            GlobalAccountsOperationsResource.DeleteRequest request = cloudUserAccountsService.GlobalAccountsOperations.Delete(project, operation);
            request.Execute();

            // To execute asynchronously in an async method, use
            // await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.CloudUserAccounts.beta.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace CloudUserAccountsSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:
            // Project ID for this request.
            string project = "";
            // Name of the Operations resource to return.
            string operation = "";

            GlobalAccountsOperationsResource.GetRequest request = cloudUserAccountsService.GlobalAccountsOperations.Get(project, operation);
            Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.CloudUserAccounts.beta.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace CloudUserAccountsSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:
            // Project ID for this request.
            string project = "";

            GlobalAccountsOperationsResource.ListRequest request = cloudUserAccountsService.GlobalAccountsOperations.List(project);
            OperationList response = request.Execute();

            // To execute asynchronously in an async method, use
            // OperationList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.CloudUserAccounts.beta.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace CloudUserAccountsSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the AddMember() method:
            // Project ID for this request.
            string project = "";
            // Name of the group for this request.
            string groupName = "";

            GroupsResource.AddMemberRequest request = cloudUserAccountsService.Groups.AddMember(project, groupName);
            Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.CloudUserAccounts.beta.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace CloudUserAccountsSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:
            // Project ID for this request.
            string project = "";
            // Name of the Group resource to delete.
            string groupName = "";

            GroupsResource.DeleteRequest request = cloudUserAccountsService.Groups.Delete(project, groupName);
            Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.CloudUserAccounts.beta.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace CloudUserAccountsSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:
            // Project ID for this request.
            string project = "";
            // Name of the Group resource to return.
            string groupName = "";

            GroupsResource.GetRequest request = cloudUserAccountsService.Groups.Get(project, groupName);
            Group response = request.Execute();

            // To execute asynchronously in an async method, use
            // Group response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.CloudUserAccounts.beta.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace CloudUserAccountsSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:
            // Project ID for this request.
            string project = "";

            GroupsResource.InsertRequest request = cloudUserAccountsService.Groups.Insert(project);
            Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.CloudUserAccounts.beta.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace CloudUserAccountsSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:
            // Project ID for this request.
            string project = "";

            GroupsResource.ListRequest request = cloudUserAccountsService.Groups.List(project);
            GroupList response = request.Execute();

            // To execute asynchronously in an async method, use
            // GroupList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.CloudUserAccounts.beta.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace CloudUserAccountsSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the RemoveMember() method:
            // Project ID for this request.
            string project = "";
            // Name of the group for this request.
            string groupName = "";

            GroupsResource.RemoveMemberRequest request = cloudUserAccountsService.Groups.RemoveMember(project, groupName);
            Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.CloudUserAccounts.beta.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace CloudUserAccountsSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the GetAuthorizedKeysView() method:
            // Project ID for this request.
            string project = "";
            // Name of the zone for this request.
            string zone = "";
            // The user account for which you want to get a list of authorized public keys.
            string user = "";
            // The fully-qualified URL of the virtual machine requesting the view.
            string instance = "";

            LinuxResource.GetAuthorizedKeysViewRequest request = cloudUserAccountsService.Linux.GetAuthorizedKeysView(project, zone, user, instance);
            LinuxGetAuthorizedKeysViewResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // LinuxGetAuthorizedKeysViewResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.CloudUserAccounts.beta.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace CloudUserAccountsSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the GetLinuxAccountViews() method:
            // Project ID for this request.
            string project = "";
            // Name of the zone for this request.
            string zone = "";
            // The fully-qualified URL of the virtual machine requesting the views.
            string instance = "";

            LinuxResource.GetLinuxAccountViewsRequest request = cloudUserAccountsService.Linux.GetLinuxAccountViews(project, zone, instance);
            LinuxGetLinuxAccountViewsResponse response = request.Execute();

            // To execute asynchronously in an async method, use
            // LinuxGetLinuxAccountViewsResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.CloudUserAccounts.beta.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace CloudUserAccountsSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the AddPublicKey() method:
            // Project ID for this request.
            string project = "";
            // Name of the user for this request.
            string user = "";

            UsersResource.AddPublicKeyRequest request = cloudUserAccountsService.Users.AddPublicKey(project, user);
            Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.CloudUserAccounts.beta.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace CloudUserAccountsSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:
            // Project ID for this request.
            string project = "";
            // Name of the user resource to delete.
            string user = "";

            UsersResource.DeleteRequest request = cloudUserAccountsService.Users.Delete(project, user);
            Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.CloudUserAccounts.beta.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace CloudUserAccountsSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:
            // Project ID for this request.
            string project = "";
            // Name of the user resource to return.
            string user = "";

            UsersResource.GetRequest request = cloudUserAccountsService.Users.Get(project, user);
            User response = request.Execute();

            // To execute asynchronously in an async method, use
            // User response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.CloudUserAccounts.beta.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace CloudUserAccountsSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:
            // Project ID for this request.
            string project = "";

            UsersResource.InsertRequest request = cloudUserAccountsService.Users.Insert(project);
            Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.CloudUserAccounts.beta.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace CloudUserAccountsSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:
            // Project ID for this request.
            string project = "";

            UsersResource.ListRequest request = cloudUserAccountsService.Users.List(project);
            UserList response = request.Execute();

            // To execute asynchronously in an async method, use
            // UserList response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API and check quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.CloudUserAccounts.beta;
using Google.Apis.CloudUserAccounts.beta.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace CloudUserAccountsSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            CloudUserAccountsService cloudUserAccountsService = new CloudUserAccountsService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the RemovePublicKey() method:
            // Project ID for this request.
            string project = "";
            // Name of the user for this request.
            string user = "";
            // The fingerprint of the public key to delete. Public keys are identified by their fingerprint, which
            // is defined by RFC4716 to be the MD5 digest of the public key.
            string fingerprint = "";

            UsersResource.RemovePublicKeyRequest request = cloudUserAccountsService.Users.RemovePublicKey(project, user, fingerprint);
            Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Operation response = await request.ExecuteAsync();
        }
    }
}
