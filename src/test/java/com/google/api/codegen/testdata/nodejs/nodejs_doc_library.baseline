============== file: README.md ==============
# Node.js Client for Google Example Library API ([Alpha](https://github.com/GoogleCloudPlatform/google-cloud-node#versioning))

[Google Example Library API][Product Documentation]:
A simple Google Example Library API.
- [Client Library Documentation][]
- [Product Documentation][]

## Quick Start
In order to use this library, you first need to go through the following
steps:

1. [Select or create a Cloud Platform project.](https://console.cloud.google.com/project)
2. [Enable the Google Example Library API.](https://console.cloud.google.com/apis/api/library)
3. [Setup Authentication.](https://googlecloudplatform.github.io/google-cloud-node/#/docs/google-cloud/master/guides/authentication)

### Installation
```
$ npm install --save @google-cloud/library
```

### Preview
#### LibraryServiceClient
```js
 const library = require('@google-cloud/library');

 var client = library.LibraryServiceClient({
   // optional auth parameters.
 });

 var formattedName = client.bookPath("testShelf-" + Date.now().toString(), projectId);
 var optionalFoo = '';
 var rating = 'GOOD';
 var book = {
   rating: rating,
 };
 var updateMask = {};
 var physicalMask = {};
 var request = {
   name: formattedName,
   optionalFoo: optionalFoo,
   book: book,
   updateMask: updateMask,
   physicalMask: physicalMask,
 };
 client.updateBook(request)
   .then(responses => {
     var response = responses[0];
     // doThingsWith(response)
   })
   .catch(err => {
     console.error(err);
   });
```

### Next Steps
- Read the [Client Library Documentation][] for Google Example Library API
  to see other available methods on the client.
- Read the [Google Example Library API Product documentation][Product Documentation]
  to learn more about the product and see How-to Guides.
- View this [repository's main README](https://github.com/GoogleCloudPlatform/google-cloud-node/blob/master/README.md)
  to see the full list of Cloud APIs that we cover.

[Client Library Documentation]: https://googlecloudplatform.github.io/google-cloud-node/#/docs/library
[Product Documentation]: https://cloud.google.com/library
============== file: package.json ==============
{
  "repository": "GoogleCloudPlatform/google-cloud-node",
  "name": "@google-cloud/library",
  "version": "0.7.1",
  "author": "Google LLC",
  "description": "Google Example Library API client for Node.js",
  "main": "src/index.js",
  "files": [
    "protos",
    "src",
    "AUTHORS",
    "COPYING"
  ],
  "keywords": [
    "google apis client",
    "google api client",
    "google apis",
    "google api",
    "google",
    "google cloud platform",
    "google cloud",
    "cloud",
    "google library",
    "library",
    "Google Example Library API"
  ],
  "dependencies": {
    "google-gax": "^0.14.0",
    "google-some-other-package-v1": "^0.2.1",
    "lodash.merge": "^4.6.0",
    "protobufjs": "^6.8.0"
  },
  "devDependencies": {
    "mocha": "^3.2.0",
    "through2": "^2.0.3"
  },
  "scripts": {
    "publish-module": "node ../../scripts/publish.js library",
    "smoke-test": "mocha smoke-test/*.js --timeout 5000",
    "test": "mocha test/*.js"
  },
  "license": "Apache-2.0",
  "engines": {
    "node": ">=4.0.0"
  }
}

============== file: smoke-test/library_service_smoke_test.js ==============
// Copyright 2017, Google LLC All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

'use strict';

describe('LibraryServiceSmokeTest', () => {
  if (!process.env.SMOKE_TEST_PROJECT) {
    throw new Error("Usage: SMOKE_TEST_PROJECT=<project_id> node #{$0}");
  }
  var projectId = process.env.SMOKE_TEST_PROJECT;

  it('successfully makes a call to the service', done => {
    const library = require('../src');

    var client = new library.v1.LibraryServiceClient({
      // optional auth parameters.
    });

    var formattedName = client.bookPath("testShelf-" + Date.now().toString(), projectId);
    var optionalFoo = '';
    var rating = 'GOOD';
    var book = {
      rating: rating,
    };
    var updateMask = {};
    var physicalMask = {};
    var request = {
      name: formattedName,
      optionalFoo: optionalFoo,
      book: book,
      updateMask: updateMask,
      physicalMask: physicalMask,
    };
    client.updateBook(request)
      .then(responses => {
        var response = responses[0];
        console.log(response);
      })
      .then(done)
      .catch(done);
  });
});

============== file: src/index.js ==============
// Copyright 2017, Google LLC All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @namespace google
 */
/**
 * @namespace google.cloud
 */
/**
 * @namespace google.cloud.library
 */
/**
 * @namespace google.cloud.library.v1
 */

'use strict';

// Import the clients for each version supported by this package.
const gapic = Object.freeze({
  v1: require('./v1'),
});

/**
 * The `@google-cloud/library` package has the following named exports:
 *
 * - `LibraryServiceClient` - Reference to
 *   {@link v1.LibraryServiceClient}
 * - `v1` - This is used for selecting or pinning a
 *   particular backend service version. It exports:
 *     - `LibraryServiceClient` - Reference to
 *       {@link v1.LibraryServiceClient}
 *
 * @module {object} @google-cloud/library
 * @alias nodejs-library
 *
 * @example <caption>Install the client library with <a href="https://www.npmjs.com/">npm</a>:</caption>
 * npm install --save @google-cloud/library
 *
 * @example <caption>Import the client library:</caption>
 * const library = require('@google-cloud/library');
 *
 * @example <caption>Create a client that uses <a href="https://goo.gl/64dyYX">Application Default Credentials (ADC)</a>:</caption>
 * const client = new library.LibraryServiceClient();
 *
 * @example <caption>Create a client with <a href="https://goo.gl/RXp6VL">explicit credentials</a>:</caption>
 * const client = new library.LibraryServiceClient({
 *   projectId: 'your-project-id',
 *   keyFilename: '/path/to/keyfile.json',
 * });
 */

/**
 * @type {object}
 * @property {constructor} LibraryServiceClient
 *   Reference to {@link v1.LibraryServiceClient}
 */
module.exports = gapic.v1;

/**
 * @type {object}
 * @property {constructor} LibraryServiceClient
 *   Reference to {@link v1.LibraryServiceClient}
 */
module.exports.v1 = gapic.v1;

// Alias `module.exports` as `module.exports.default`, for future-proofing.
module.exports.default = Object.assign({}, module.exports);

============== file: src/v1/doc/google/example/library/v1/doc_field_mask.js ==============
// Copyright 2017, Google LLC All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Note: this file is purely for documentation. Any contents are not expected
// to be loaded as the JS file.

/**
 * @property {number[]} materials
 *   The number should be among the values of [Material]{@link google.example.library.v1.Material}
 *
 * @typedef FieldMask
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.FieldMask definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/field_mask.proto}
 */
var FieldMask = {
  // This is for documentation. Actual contents will be loaded by gRPC.

  /**
   * @enum {number}
   * @memberof google.example.library.v1
   */
  Material: {
    PAPIER_MACHE: 0,
    WOOD: 1,
    PORCELAIN: 2,
    SEQUINS: 3,
    CARDBOARD: 4
  }
};
============== file: src/v1/doc/google/example/library/v1/doc_library.js ==============
// Copyright 2017, Google LLC All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Note: this file is purely for documentation. Any contents are not expected
// to be loaded as the JS file.

/**
 * A single book in the library.
 * Message comment may include special characters: <>&"`'@.
 *
 * @property {string} name
 *   The resource name of the book.
 *   Book names have the form `bookShelves/{shelf_id}/books/{book_id}`.
 *   Message field comment may include special characters: <>&"`'@.
 *
 * @property {string} author
 *   The name of the book author.
 *
 * @property {string} title
 *   The title of the book.
 *
 * @property {boolean} read
 *   Value indicating whether the book has been read.
 *
 * @property {number} rating
 *   For testing enums.
 *
 *   The number should be among the values of [Rating]{@link google.example.library.v1.Rating}
 *
 * @property {Object} anyValue
 *   For testing all well-known types.
 *
 *   This object should have the same structure as [Any]{@link google.protobuf.Any}
 *
 * @property {Object} structValue
 *   This object should have the same structure as [Struct]{@link google.protobuf.Struct}
 *
 * @property {Object} valueValue
 *   This object should have the same structure as [Value]{@link google.protobuf.Value}
 *
 * @property {Object} listValueValue
 *   This object should have the same structure as [ListValue]{@link google.protobuf.ListValue}
 *
 * @property {Object.<string, Object>} mapListValueValue
 *
 * @property {Object} timeValue
 *   This object should have the same structure as [Timestamp]{@link google.protobuf.Timestamp}
 *
 * @property {Object} durationValue
 *   This object should have the same structure as [Duration]{@link google.protobuf.Duration}
 *
 * @property {Object} fieldMaskValue
 *   This object should have the same structure as [FieldMask]{@link google.protobuf.FieldMask}
 *
 * @property {Object} int32Value
 *   This object should have the same structure as [Int32Value]{@link google.protobuf.Int32Value}
 *
 * @property {Object} uint32Value
 *   This object should have the same structure as [UInt32Value]{@link google.protobuf.UInt32Value}
 *
 * @property {Object} int64Value
 *   This object should have the same structure as [Int64Value]{@link google.protobuf.Int64Value}
 *
 * @property {Object} uint64Value
 *   This object should have the same structure as [UInt64Value]{@link google.protobuf.UInt64Value}
 *
 * @property {Object} floatValue
 *   This object should have the same structure as [FloatValue]{@link google.protobuf.FloatValue}
 *
 * @property {Object} doubleValue
 *   This object should have the same structure as [DoubleValue]{@link google.protobuf.DoubleValue}
 *
 * @property {Object} stringValue
 *   This object should have the same structure as [StringValue]{@link google.protobuf.StringValue}
 *
 * @property {Object} boolValue
 *   This object should have the same structure as [BoolValue]{@link google.protobuf.BoolValue}
 *
 * @property {Object} bytesValue
 *   This object should have the same structure as [BytesValue]{@link google.protobuf.BytesValue}
 *
 * @property {Object.<number, string>} mapStringValue
 *   Test doc generation of lists:
 *
 *   +   Here is a sentence about the first element of the list that continues
 *       into a second line.
 *   +   The second element of the list.
 *   +   Another element of the list where the indentation isn't consistent
 *   after a blank space.
 *
 *       The second paragraph of the list
 *   that doesn't have a hanging indent.
 *
 * @property {Object.<string, Object>} mapMessageValue
 *
 * @property {Object} resource
 *   Tests Python doc generation: should generate a dummy file for shared_type
 *   resource, but *not* its import, other_shared_type
 *
 *   This object should have the same structure as [Used]{@link google.test.shared.data.Used}
 *
 * @typedef Book
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.Book definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var Book = {
  // This is for documentation. Actual contents will be loaded by gRPC.

  /**
   * @enum {number}
   * @memberof google.example.library.v1
   */
  Rating: {

    /**
     * GOOD enum description
     */
    GOOD: 0,

    /**
     * Enum description with special characters: <>&"`'@.
     */
    BAD: 1
  }
};

/**
 * A single book in the archives.
 *
 * @property {string} name
 *   The resource name of the book.
 *   Book names have the form `archives/{archive_id}/books/{book_id}`.
 *
 * @property {string} author
 *   The name of the book author.
 *
 * @property {string} title
 *   The title of the book.
 *
 * @property {boolean} read
 *   Value indicating whether the book has been read.
 *
 * @typedef BookFromArchive
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.BookFromArchive definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var BookFromArchive = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * @property {number} field
 *
 * @property {Object} field2
 *   This object should have the same structure as [SomeMessage2]{@link google.example.library.v1.SomeMessage2}
 *
 * @property {number} alignment
 *   The number should be among the values of [Alignment]{@link google.example.library.v1.Alignment}
 *
 * @typedef SomeMessage
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.SomeMessage definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var SomeMessage = {
  // This is for documentation. Actual contents will be loaded by gRPC.

  /**
   * Tests service with two enums of the same simple name
   *
   * @enum {number}
   * @memberof google.example.library.v1
   */
  Alignment: {
    GOOD: 0,
    NEUTRAL: 1,
    EVIL: 2
  }
};

/**
 * @property {number} field1
 *
 * @property {number} format
 *   The number should be among the values of [Alignment]{@link google.example.library.v1.Alignment}
 *
 * @typedef SomeMessage2
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.SomeMessage2 definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var SomeMessage2 = {
  // This is for documentation. Actual contents will be loaded by gRPC.

  /**
   * @typedef SomeMessage3
   * @memberof google.example.library.v1
   * @see [google.example.library.v1.SomeMessage2.SomeMessage3 definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
   */
  SomeMessage3: {
    // This is for documentation. Actual contents will be loaded by gRPC.

    /**
     * Tests Python nested enums
     *
     * @enum {number}
     * @memberof google.example.library.v1
     */
    Alignment: {

      /**
       * 8-bit
       */
      CHAR: 0,

      /**
       * 32-bit
       */
      INT: 1,

      /**
       * 64-bit
       */
      DOUBLE: 2
    }
  },

  /**
   * Another enum with duplicated simple name
   *
   * @enum {number}
   * @memberof google.example.library.v1
   */
  Alignment: {
    FLUSH_LEFT: 0,
    FLUSH_RIGHT: 1,
    CENTERED: 2,
    JUSTIFIED: 3
  }
};

/**
 * A Shelf contains a collection of books with a theme.
 *
 * @property {string} name
 *   The resource name of the shelf.
 *   Shelf names have the form `bookShelves/{shelf_id}`.
 *
 * @property {string} theme
 *   The theme of the shelf
 *
 * @property {string} internalTheme
 *   Internal theme that is visible to trusted testers only.
 *
 * @typedef Shelf
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.Shelf definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var Shelf = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Request message for LibraryService.CreateShelf.
 *
 * @property {Object} shelf
 *   The shelf to create.
 *
 *   This object should have the same structure as [Shelf]{@link google.example.library.v1.Shelf}
 *
 * @typedef CreateShelfRequest
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.CreateShelfRequest definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var CreateShelfRequest = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Request message for LibraryService.GetShelf.
 *
 * @property {string} name
 *   The name of the shelf to retrieve.
 *
 * @property {Object} message
 *   Field to verify that message-type query parameter gets flattened.
 *
 *   This object should have the same structure as [SomeMessage]{@link google.example.library.v1.SomeMessage}
 *
 * @property {Object} stringBuilder
 *   This object should have the same structure as [StringBuilder]{@link google.example.library.v1.StringBuilder}
 *
 * @property {string} options
 *   To test 'options' parameter name conflict.
 *
 * @typedef GetShelfRequest
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.GetShelfRequest definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var GetShelfRequest = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Creates a name conflict with java.lang type
 *
 * @property {string} name
 *
 * @typedef StringBuilder
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.StringBuilder definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var StringBuilder = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Request message for LibraryService.ListShelves.
 *
 * @property {string} pageToken
 *   A token identifying a page of results the server should return.
 *   Typically, this is the value of
 *   ListShelvesResponse.next_page_token
 *   returned from the previous call to `ListShelves` method.
 *
 * @typedef ListShelvesRequest
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.ListShelvesRequest definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var ListShelvesRequest = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Response message for LibraryService.ListShelves.
 *
 * @property {Object[]} shelves
 *   The list of shelves.
 *
 *   This object should have the same structure as [Shelf]{@link google.example.library.v1.Shelf}
 *
 * @property {string} nextPageToken
 *   A token to retrieve next page of results.
 *   Pass this value in the
 *   ListShelvesRequest.page_token
 *   field in the subsequent call to `ListShelves` method to retrieve the next
 *   page of results.
 *
 * @typedef ListShelvesResponse
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.ListShelvesResponse definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var ListShelvesResponse = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Request message for LibraryService.StreamShelves.
 * @typedef StreamShelvesRequest
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.StreamShelvesRequest definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var StreamShelvesRequest = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Response message for LibraryService.StreamShelves.
 *
 * @property {Object[]} shelves
 *   The list of shelves.
 *
 *   This object should have the same structure as [Shelf]{@link google.example.library.v1.Shelf}
 *
 * @typedef StreamShelvesResponse
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.StreamShelvesResponse definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var StreamShelvesResponse = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Request message for LibraryService.DeleteShelf.
 *
 * @property {string} name
 *   The name of the shelf to delete.
 *
 * @typedef DeleteShelfRequest
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.DeleteShelfRequest definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var DeleteShelfRequest = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Describes the shelf being removed (other_shelf_name) and updated
 * (name) in this merge.
 *
 * @property {string} name
 *   The name of the shelf we're adding books to.
 *
 * @property {string} otherShelfName
 *   The name of the shelf we're removing books from and deleting.
 *
 * @typedef MergeShelvesRequest
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.MergeShelvesRequest definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var MergeShelvesRequest = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Request message for LibraryService.CreateBook.
 *
 * @property {string} name
 *   The name of the shelf in which the book is created.
 *
 * @property {Object} book
 *   The book to create.
 *
 *   This object should have the same structure as [Book]{@link google.example.library.v1.Book}
 *
 * @typedef CreateBookRequest
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.CreateBookRequest definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var CreateBookRequest = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Request message for LibraryService.PublishSeries.
 *
 * @property {Object} shelf
 *   The shelf in which the series is created.
 *
 *   This object should have the same structure as [Shelf]{@link google.example.library.v1.Shelf}
 *
 * @property {Object[]} books
 *   The books to publish in the series.
 *
 *   This object should have the same structure as [Book]{@link google.example.library.v1.Book}
 *
 * @property {number} edition
 *   The edition of the series
 *
 * @property {boolean} reviewCopy
 *   If the book is in a pre-publish state
 *
 * @property {Object} seriesUuid
 *   Uniquely identifies the series to the publishing house.
 *
 *   This object should have the same structure as [SeriesUuid]{@link google.example.library.v1.SeriesUuid}
 *
 * @typedef PublishSeriesRequest
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.PublishSeriesRequest definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var PublishSeriesRequest = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * @property {string} seriesBytes
 *
 * @property {string} seriesString
 *
 * @typedef SeriesUuid
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.SeriesUuid definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var SeriesUuid = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Response message for LibraryService.PublishSeries.
 *
 * @property {string[]} bookNames
 *   The names of the books in the series that were published
 *
 * @typedef PublishSeriesResponse
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.PublishSeriesResponse definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var PublishSeriesResponse = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Request message for LibraryService.GetBook.
 *
 * @property {string} name
 *   The name of the book to retrieve.
 *
 * @typedef GetBookRequest
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.GetBookRequest definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var GetBookRequest = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Request message for LibraryService.ListBooks.
 *
 * @property {string} name
 *   The name of the shelf whose books we'd like to list.
 *
 * @property {number} pageSize
 *   Requested page size. Server may return fewer books than requested.
 *   If unspecified, server will pick an appropriate default.
 *
 * @property {string} pageToken
 *   A token identifying a page of results the server should return.
 *   Typically, this is the value of
 *   ListBooksResponse.next_page_token.
 *   returned from the previous call to `ListBooks` method.
 *
 * @property {string} filter
 *   To test python built-in wrapping.
 *
 * @typedef ListBooksRequest
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.ListBooksRequest definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var ListBooksRequest = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Response message for LibraryService.ListBooks.
 *
 * @property {Object[]} books
 *   The list of books.
 *
 *   This object should have the same structure as [Book]{@link google.example.library.v1.Book}
 *
 * @property {string} nextPageToken
 *   A token to retrieve next page of results.
 *   Pass this value in the
 *   ListBooksRequest.page_token
 *   field in the subsequent call to `ListBooks` method to retrieve the next
 *   page of results.
 *
 * @typedef ListBooksResponse
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.ListBooksResponse definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var ListBooksResponse = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Request message for LibraryService.StreamBooks.
 *
 * @property {string} name
 *   The name of the shelf whose books we'd like to list.
 *
 * @typedef StreamBooksRequest
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.StreamBooksRequest definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var StreamBooksRequest = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Request message for LibraryService.UpdateBook.
 *
 * @property {string} name
 *   The name of the book to update.
 *
 * @property {string} optionalFoo
 *   An optional foo.
 *
 * @property {Object} book
 *   The book to update with.
 *
 *   This object should have the same structure as [Book]{@link google.example.library.v1.Book}
 *
 * @property {Object} updateMask
 *   A field mask to apply, rendered as an HTTP parameter.
 *
 *   This object should have the same structure as [FieldMask]{@link google.protobuf.FieldMask}
 *
 * @property {Object} physicalMask
 *   To test Python import clash resolution.
 *
 *   This object should have the same structure as [FieldMask]{@link google.example.library.v1.FieldMask}
 *
 * @typedef UpdateBookRequest
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.UpdateBookRequest definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var UpdateBookRequest = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Request message for LibraryService.DeleteBook.
 *
 * @property {string} name
 *   The name of the book to delete.
 *
 * @typedef DeleteBookRequest
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.DeleteBookRequest definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var DeleteBookRequest = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Describes what book to move (name) and what shelf we're moving it
 * to (other_shelf_name).
 *
 * @property {string} name
 *   The name of the book to move.
 *
 * @property {string} otherShelfName
 *   The name of the destination shelf.
 *
 * @typedef MoveBookRequest
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.MoveBookRequest definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var MoveBookRequest = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * @property {string} name
 *
 * @property {number} pageSize
 *
 * @property {string} pageToken
 *
 * @typedef ListStringsRequest
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.ListStringsRequest definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var ListStringsRequest = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * @property {string[]} strings
 *
 * @property {string} nextPageToken
 *
 * @typedef ListStringsResponse
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.ListStringsResponse definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var ListStringsResponse = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * @property {string} name
 *
 * @property {Object[]} comments
 *   This object should have the same structure as [Comment]{@link google.example.library.v1.Comment}
 *
 * @typedef AddCommentsRequest
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.AddCommentsRequest definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var AddCommentsRequest = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * @property {string} userName
 *   won't be filled in by the sample generator
 *
 * @property {string} comment
 *   should be filled in by the sample generator
 *
 * @property {number} stage
 *   should be filled in by the sample generator
 *
 *   The number should be among the values of [Stage]{@link google.example.library.v1.Stage}
 *
 * @property {number} alignment
 *   Tests Python nested enums
 *
 *   The number should be among the values of [Alignment]{@link google.example.library.v1.Alignment}
 *
 * @typedef Comment
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.Comment definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var Comment = {
  // This is for documentation. Actual contents will be loaded by gRPC.

  /**
   * @enum {number}
   * @memberof google.example.library.v1
   */
  Stage: {
    UNSET: 0,
    DRAFT: 1,
    PUBLISHED: 2,
    DELETED: 3
  }
};

/**
 * Request message for LibraryService.GetBookFromArchive.
 *
 * @property {string} name
 *   The name of the book to retrieve.
 *
 * @typedef GetBookFromArchiveRequest
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.GetBookFromArchiveRequest definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var GetBookFromArchiveRequest = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Request message for LibraryService.GetBookFromAnywhere.
 *
 * @property {string} name
 *   The name of the book to retrieve.
 *
 * @property {string} altBookName
 *   An alternate book name, used to test restricting flattened field to a
 *   single resource name type in a oneof.
 *
 * @typedef GetBookFromAnywhereRequest
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.GetBookFromAnywhereRequest definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var GetBookFromAnywhereRequest = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Request message for LibraryService.GetBookFromAbsolutelyAnywhere.
 *
 * @property {string} name
 *   The name of the book to retrieve.
 *
 * @typedef GetBookFromAbsolutelyAnywhereRequest
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.GetBookFromAbsolutelyAnywhereRequest definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var GetBookFromAbsolutelyAnywhereRequest = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Request message for LibraryService.UpdateBookIndex.
 *
 * @property {string} name
 *   The name of the book to update.
 *
 * @property {string} indexName
 *   The name of the index for the book
 *
 * @property {Object.<string, string>} indexMap
 *   The index to update the book with
 *
 * @typedef UpdateBookIndexRequest
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.UpdateBookIndexRequest definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var UpdateBookIndexRequest = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * @property {string} name
 *   The name of the book to be discussed. If this is in the middle
 *   of the stream and this is not specified, the name in the previous
 *   message will be reused.
 *
 * @property {Object} comment
 *   The new comment.
 *
 *   This object should have the same structure as [Comment]{@link google.example.library.v1.Comment}
 *
 * @typedef DiscussBookRequest
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.DiscussBookRequest definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var DiscussBookRequest = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Test repeated field with resource name format in request
 *
 * @property {string[]} names
 *
 * @property {string[]} shelves
 *
 * @property {number} pageSize
 *
 * @property {string} pageToken
 *
 * @typedef FindRelatedBooksRequest
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.FindRelatedBooksRequest definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var FindRelatedBooksRequest = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Test repeated field with resource name format in page streaming response
 *
 * @property {string[]} names
 *
 * @property {string} nextPageToken
 *
 * @typedef FindRelatedBooksResponse
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.FindRelatedBooksResponse definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var FindRelatedBooksResponse = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Metadata for a longrunning operation.
 *
 * @property {number} progressPercent
 *   Approximate percentage of the book processed thus far.
 *
 * @typedef GetBigBookMetadata
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.GetBigBookMetadata definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var GetBigBookMetadata = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * @property {number} requiredSingularInt32
 *
 * @property {number} requiredSingularInt64
 *
 * @property {number} requiredSingularFloat
 *
 * @property {number} requiredSingularDouble
 *
 * @property {boolean} requiredSingularBool
 *
 * @property {number} requiredSingularEnum
 *   The number should be among the values of [InnerEnum]{@link google.example.library.v1.InnerEnum}
 *
 * @property {string} requiredSingularString
 *
 * @property {string} requiredSingularBytes
 *
 * @property {Object} requiredSingularMessage
 *   This object should have the same structure as [InnerMessage]{@link google.example.library.v1.InnerMessage}
 *
 * @property {string} requiredSingularResourceName
 *
 * @property {string} requiredSingularResourceNameOneof
 *
 * @property {number} requiredSingularFixed32
 *
 * @property {number} requiredSingularFixed64
 *
 * @property {number[]} requiredRepeatedInt32
 *
 * @property {number[]} requiredRepeatedInt64
 *
 * @property {number[]} requiredRepeatedFloat
 *
 * @property {number[]} requiredRepeatedDouble
 *
 * @property {boolean[]} requiredRepeatedBool
 *
 * @property {number[]} requiredRepeatedEnum
 *   The number should be among the values of [InnerEnum]{@link google.example.library.v1.InnerEnum}
 *
 * @property {string[]} requiredRepeatedString
 *
 * @property {string[]} requiredRepeatedBytes
 *
 * @property {Object[]} requiredRepeatedMessage
 *   This object should have the same structure as [InnerMessage]{@link google.example.library.v1.InnerMessage}
 *
 * @property {string[]} requiredRepeatedResourceName
 *
 * @property {string[]} requiredRepeatedResourceNameOneof
 *
 * @property {number[]} requiredRepeatedFixed32
 *
 * @property {number[]} requiredRepeatedFixed64
 *
 * @property {Object.<number, string>} requiredMap
 *
 * @property {number} optionalSingularInt32
 *
 * @property {number} optionalSingularInt64
 *
 * @property {number} optionalSingularFloat
 *
 * @property {number} optionalSingularDouble
 *
 * @property {boolean} optionalSingularBool
 *
 * @property {number} optionalSingularEnum
 *   The number should be among the values of [InnerEnum]{@link google.example.library.v1.InnerEnum}
 *
 * @property {string} optionalSingularString
 *
 * @property {string} optionalSingularBytes
 *
 * @property {Object} optionalSingularMessage
 *   This object should have the same structure as [InnerMessage]{@link google.example.library.v1.InnerMessage}
 *
 * @property {string} optionalSingularResourceName
 *
 * @property {string} optionalSingularResourceNameOneof
 *
 * @property {number} optionalSingularFixed32
 *
 * @property {number} optionalSingularFixed64
 *
 * @property {number[]} optionalRepeatedInt32
 *
 * @property {number[]} optionalRepeatedInt64
 *
 * @property {number[]} optionalRepeatedFloat
 *
 * @property {number[]} optionalRepeatedDouble
 *
 * @property {boolean[]} optionalRepeatedBool
 *
 * @property {number[]} optionalRepeatedEnum
 *   The number should be among the values of [InnerEnum]{@link google.example.library.v1.InnerEnum}
 *
 * @property {string[]} optionalRepeatedString
 *
 * @property {string[]} optionalRepeatedBytes
 *
 * @property {Object[]} optionalRepeatedMessage
 *   This object should have the same structure as [InnerMessage]{@link google.example.library.v1.InnerMessage}
 *
 * @property {string[]} optionalRepeatedResourceName
 *
 * @property {string[]} optionalRepeatedResourceNameOneof
 *
 * @property {number[]} optionalRepeatedFixed32
 *
 * @property {number[]} optionalRepeatedFixed64
 *
 * @property {Object.<number, string>} optionalMap
 *
 * @typedef TestOptionalRequiredFlatteningParamsRequest
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var TestOptionalRequiredFlatteningParamsRequest = {
  // This is for documentation. Actual contents will be loaded by gRPC.

  /**
   * @typedef InnerMessage
   * @memberof google.example.library.v1
   * @see [google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest.InnerMessage definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
   */
  InnerMessage: {
    // This is for documentation. Actual contents will be loaded by gRPC.
  },

  /**
   * For testing all types, plus resource-names, as required and optional.
   *
   * @enum {number}
   * @memberof google.example.library.v1
   */
  InnerEnum: {
    ZERO: 0,
    ONE: 1
  }
};

/**
 * @typedef TestOptionalRequiredFlatteningParamsResponse
 * @memberof google.example.library.v1
 * @see [google.example.library.v1.TestOptionalRequiredFlatteningParamsResponse definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/library.proto}
 */
var TestOptionalRequiredFlatteningParamsResponse = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};
============== file: src/v1/doc/google/protobuf/doc_any.js ==============
// Copyright 2017, Google LLC All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Note: this file is purely for documentation. Any contents are not expected
// to be loaded as the JS file.

/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a
 * URL that describes the type of the serialized message.
 *
 * Protobuf library provides support to pack/unpack Any values in the form
 * of utility functions or additional generated methods of the Any type.
 *
 * Example 1: Pack and unpack a message in C++.
 *
 *     Foo foo = ...;
 *     Any any;
 *     any.PackFrom(foo);
 *     ...
 *     if (any.UnpackTo(&foo)) {
 *       ...
 *     }
 *
 * Example 2: Pack and unpack a message in Java.
 *
 *     Foo foo = ...;
 *     Any any = Any.pack(foo);
 *     ...
 *     if (any.is(Foo.class)) {
 *       foo = any.unpack(Foo.class);
 *     }
 *
 *  Example 3: Pack and unpack a message in Python.
 *
 *     foo = Foo(...)
 *     any = Any()
 *     any.Pack(foo)
 *     ...
 *     if any.Is(Foo.DESCRIPTOR):
 *       any.Unpack(foo)
 *       ...
 *
 *  Example 4: Pack and unpack a message in Go
 *
 *      foo := &pb.Foo{...}
 *      any, err := ptypes.MarshalAny(foo)
 *      ...
 *      foo := &pb.Foo{}
 *      if err := ptypes.UnmarshalAny(any, foo); err != nil {
 *        ...
 *      }
 *
 * The pack methods provided by protobuf library will by default use
 * 'type.googleapis.com/full.type.name' as the type URL and the unpack
 * methods only use the fully qualified type name after the last '/'
 * in the type URL, for example "foo.bar.com/x/y.z" will yield type
 * name "y.z".
 *
 *
 * # JSON
 *
 * The JSON representation of an `Any` value uses the regular
 * representation of the deserialized, embedded message, with an
 * additional field `@type` which contains the type URL. Example:
 *
 *     package google.profile;
 *     message Person {
 *       string first_name = 1;
 *       string last_name = 2;
 *     }
 *
 *     {
 *       "@type": "type.googleapis.com/google.profile.Person",
 *       "firstName": <string>,
 *       "lastName": <string>
 *     }
 *
 * If the embedded message type is well-known and has a custom JSON
 * representation, that representation will be embedded adding a field
 * `value` which holds the custom JSON in addition to the `@type`
 * field. Example (for message google.protobuf.Duration):
 *
 *     {
 *       "@type": "type.googleapis.com/google.protobuf.Duration",
 *       "value": "1.212s"
 *     }
 *
 * @property {string} typeUrl
 *   A URL/resource name whose content describes the type of the
 *   serialized protocol buffer message.
 *
 *   For URLs which use the scheme `http`, `https`, or no scheme, the
 *   following restrictions and interpretations apply:
 *
 *   * If no scheme is provided, `https` is assumed.
 *   * The last segment of the URL's path must represent the fully
 *     qualified name of the type (as in `path/google.protobuf.Duration`).
 *     The name should be in a canonical form (e.g., leading "." is
 *     not accepted).
 *   * An HTTP GET on the URL must yield a google.protobuf.Type
 *     value in binary format, or produce an error.
 *   * Applications are allowed to cache lookup results based on the
 *     URL, or have them precompiled into a binary to avoid any
 *     lookup. Therefore, binary compatibility needs to be preserved
 *     on changes to types. (Use versioned type names to manage
 *     breaking changes.)
 *
 *   Schemes other than `http`, `https` (or the empty scheme) might be
 *   used with implementation specific semantics.
 *
 * @property {string} value
 *   Must be a valid serialized protocol buffer of the above specified type.
 *
 * @typedef Any
 * @memberof google.protobuf
 * @see [google.protobuf.Any definition in proto format]{@link https://github.com/google/protobuf/blob/master/src/google/protobuf/any.proto}
 */
var Any = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};
============== file: src/v1/doc/google/protobuf/doc_duration.js ==============
// Copyright 2017, Google LLC All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Note: this file is purely for documentation. Any contents are not expected
// to be loaded as the JS file.

/**
 * A Duration represents a signed, fixed-length span of time represented
 * as a count of seconds and fractions of seconds at nanosecond
 * resolution. It is independent of any calendar and concepts like "day"
 * or "month". It is related to Timestamp in that the difference between
 * two Timestamp values is a Duration and it can be added or subtracted
 * from a Timestamp. Range is approximately +-10,000 years.
 *
 * # Examples
 *
 * Example 1: Compute Duration from two Timestamps in pseudo code.
 *
 *     Timestamp start = ...;
 *     Timestamp end = ...;
 *     Duration duration = ...;
 *
 *     duration.seconds = end.seconds - start.seconds;
 *     duration.nanos = end.nanos - start.nanos;
 *
 *     if (duration.seconds < 0 && duration.nanos > 0) {
 *       duration.seconds += 1;
 *       duration.nanos -= 1000000000;
 *     } else if (durations.seconds > 0 && duration.nanos < 0) {
 *       duration.seconds -= 1;
 *       duration.nanos += 1000000000;
 *     }
 *
 * Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.
 *
 *     Timestamp start = ...;
 *     Duration duration = ...;
 *     Timestamp end = ...;
 *
 *     end.seconds = start.seconds + duration.seconds;
 *     end.nanos = start.nanos + duration.nanos;
 *
 *     if (end.nanos < 0) {
 *       end.seconds -= 1;
 *       end.nanos += 1000000000;
 *     } else if (end.nanos >= 1000000000) {
 *       end.seconds += 1;
 *       end.nanos -= 1000000000;
 *     }
 *
 * Example 3: Compute Duration from datetime.timedelta in Python.
 *
 *     td = datetime.timedelta(days=3, minutes=10)
 *     duration = Duration()
 *     duration.FromTimedelta(td)
 *
 * # JSON Mapping
 *
 * In JSON format, the Duration type is encoded as a string rather than an
 * object, where the string ends in the suffix "s" (indicating seconds) and
 * is preceded by the number of seconds, with nanoseconds expressed as
 * fractional seconds. For example, 3 seconds with 0 nanoseconds should be
 * encoded in JSON format as "3s", while 3 seconds and 1 nanosecond should
 * be expressed in JSON format as "3.000000001s", and 3 seconds and 1
 * microsecond should be expressed in JSON format as "3.000001s".
 *
 * @property {number} seconds
 *   Signed seconds of the span of time. Must be from -315,576,000,000
 *   to +315,576,000,000 inclusive. Note: these bounds are computed from:
 *   60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
 *
 * @property {number} nanos
 *   Signed fractions of a second at nanosecond resolution of the span
 *   of time. Durations less than one second are represented with a 0
 *   `seconds` field and a positive or negative `nanos` field. For durations
 *   of one second or more, a non-zero value for the `nanos` field must be
 *   of the same sign as the `seconds` field. Must be from -999,999,999
 *   to +999,999,999 inclusive.
 *
 * @typedef Duration
 * @memberof google.protobuf
 * @see [google.protobuf.Duration definition in proto format]{@link https://github.com/google/protobuf/blob/master/src/google/protobuf/duration.proto}
 */
var Duration = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};
============== file: src/v1/doc/google/protobuf/doc_field_mask.js ==============
// Copyright 2017, Google LLC All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Note: this file is purely for documentation. Any contents are not expected
// to be loaded as the JS file.

/**
 * `FieldMask` represents a set of symbolic field paths, for example:
 *
 *     paths: "f.a"
 *     paths: "f.b.d"
 *
 * Here `f` represents a field in some root message, `a` and `b`
 * fields in the message found in `f`, and `d` a field found in the
 * message in `f.b`.
 *
 * Field masks are used to specify a subset of fields that should be
 * returned by a get operation or modified by an update operation.
 * Field masks also have a custom JSON encoding (see below).
 *
 * # Field Masks in Projections
 *
 * When used in the context of a projection, a response message or
 * sub-message is filtered by the API to only contain those fields as
 * specified in the mask. For example, if the mask in the previous
 * example is applied to a response message as follows:
 *
 *     f {
 *       a : 22
 *       b {
 *         d : 1
 *         x : 2
 *       }
 *       y : 13
 *     }
 *     z: 8
 *
 * The result will not contain specific values for fields x,y and z
 * (their value will be set to the default, and omitted in proto text
 * output):
 *
 *
 *     f {
 *       a : 22
 *       b {
 *         d : 1
 *       }
 *     }
 *
 * A repeated field is not allowed except at the last position of a
 * paths string.
 *
 * If a FieldMask object is not present in a get operation, the
 * operation applies to all fields (as if a FieldMask of all fields
 * had been specified).
 *
 * Note that a field mask does not necessarily apply to the
 * top-level response message. In case of a REST get operation, the
 * field mask applies directly to the response, but in case of a REST
 * list operation, the mask instead applies to each individual message
 * in the returned resource list. In case of a REST custom method,
 * other definitions may be used. Where the mask applies will be
 * clearly documented together with its declaration in the API.  In
 * any case, the effect on the returned resource/resources is required
 * behavior for APIs.
 *
 * # Field Masks in Update Operations
 *
 * A field mask in update operations specifies which fields of the
 * targeted resource are going to be updated. The API is required
 * to only change the values of the fields as specified in the mask
 * and leave the others untouched. If a resource is passed in to
 * describe the updated values, the API ignores the values of all
 * fields not covered by the mask.
 *
 * If a repeated field is specified for an update operation, the existing
 * repeated values in the target resource will be overwritten by the new values.
 * Note that a repeated field is only allowed in the last position of a `paths`
 * string.
 *
 * If a sub-message is specified in the last position of the field mask for an
 * update operation, then the existing sub-message in the target resource is
 * overwritten. Given the target message:
 *
 *     f {
 *       b {
 *         d : 1
 *         x : 2
 *       }
 *       c : 1
 *     }
 *
 * And an update message:
 *
 *     f {
 *       b {
 *         d : 10
 *       }
 *     }
 *
 * then if the field mask is:
 *
 *  paths: "f.b"
 *
 * then the result will be:
 *
 *     f {
 *       b {
 *         d : 10
 *       }
 *       c : 1
 *     }
 *
 * However, if the update mask was:
 *
 *  paths: "f.b.d"
 *
 * then the result would be:
 *
 *     f {
 *       b {
 *         d : 10
 *         x : 2
 *       }
 *       c : 1
 *     }
 *
 * In order to reset a field's value to the default, the field must
 * be in the mask and set to the default value in the provided resource.
 * Hence, in order to reset all fields of a resource, provide a default
 * instance of the resource and set all fields in the mask, or do
 * not provide a mask as described below.
 *
 * If a field mask is not present on update, the operation applies to
 * all fields (as if a field mask of all fields has been specified).
 * Note that in the presence of schema evolution, this may mean that
 * fields the client does not know and has therefore not filled into
 * the request will be reset to their default. If this is unwanted
 * behavior, a specific service may require a client to always specify
 * a field mask, producing an error if not.
 *
 * As with get operations, the location of the resource which
 * describes the updated values in the request message depends on the
 * operation kind. In any case, the effect of the field mask is
 * required to be honored by the API.
 *
 * ## Considerations for HTTP REST
 *
 * The HTTP kind of an update operation which uses a field mask must
 * be set to PATCH instead of PUT in order to satisfy HTTP semantics
 * (PUT must only be used for full updates).
 *
 * # JSON Encoding of Field Masks
 *
 * In JSON, a field mask is encoded as a single string where paths are
 * separated by a comma. Fields name in each path are converted
 * to/from lower-camel naming conventions.
 *
 * As an example, consider the following message declarations:
 *
 *     message Profile {
 *       User user = 1;
 *       Photo photo = 2;
 *     }
 *     message User {
 *       string display_name = 1;
 *       string address = 2;
 *     }
 *
 * In proto a field mask for `Profile` may look as such:
 *
 *     mask {
 *       paths: "user.display_name"
 *       paths: "photo"
 *     }
 *
 * In JSON, the same mask is represented as below:
 *
 *     {
 *       mask: "user.displayName,photo"
 *     }
 *
 * # Field Masks and Oneof Fields
 *
 * Field masks treat fields in oneofs just as regular fields. Consider the
 * following message:
 *
 *     message SampleMessage {
 *       oneof test_oneof {
 *         string name = 4;
 *         SubMessage sub_message = 9;
 *       }
 *     }
 *
 * The field mask can be:
 *
 *     mask {
 *       paths: "name"
 *     }
 *
 * Or:
 *
 *     mask {
 *       paths: "sub_message"
 *     }
 *
 * Note that oneof type names ("test_oneof" in this case) cannot be used in
 * paths.
 *
 * @property {string[]} paths
 *   The set of field mask paths.
 *
 * @typedef FieldMask
 * @memberof google.protobuf
 * @see [google.protobuf.FieldMask definition in proto format]{@link https://github.com/google/protobuf/blob/master/src/google/protobuf/field_mask.proto}
 */
var FieldMask = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};
============== file: src/v1/doc/google/protobuf/doc_struct.js ==============
// Copyright 2017, Google LLC All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Note: this file is purely for documentation. Any contents are not expected
// to be loaded as the JS file.

/**
 * `Struct` represents a structured data value, consisting of fields
 * which map to dynamically typed values. In some languages, `Struct`
 * might be supported by a native representation. For example, in
 * scripting languages like JS a struct is represented as an
 * object. The details of that representation are described together
 * with the proto support for the language.
 *
 * The JSON representation for `Struct` is JSON object.
 *
 * @property {Object.<string, Object>} fields
 *   Unordered map of dynamically typed values.
 *
 * @typedef Struct
 * @memberof google.protobuf
 * @see [google.protobuf.Struct definition in proto format]{@link https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto}
 */
var Struct = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * `Value` represents a dynamically typed value which can be either
 * null, a number, a string, a boolean, a recursive struct value, or a
 * list of values. A producer of value is expected to set one of that
 * variants, absence of any variant indicates an error.
 *
 * The JSON representation for `Value` is JSON value.
 *
 * @property {number} nullValue
 *   Represents a null value.
 *
 *   The number should be among the values of [NullValue]{@link google.protobuf.NullValue}
 *
 * @property {number} numberValue
 *   Represents a double value.
 *
 * @property {string} stringValue
 *   Represents a string value.
 *
 * @property {boolean} boolValue
 *   Represents a boolean value.
 *
 * @property {Object} structValue
 *   Represents a structured value.
 *
 *   This object should have the same structure as [Struct]{@link google.protobuf.Struct}
 *
 * @property {Object} listValue
 *   Represents a repeated `Value`.
 *
 *   This object should have the same structure as [ListValue]{@link google.protobuf.ListValue}
 *
 * @typedef Value
 * @memberof google.protobuf
 * @see [google.protobuf.Value definition in proto format]{@link https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto}
 */
var Value = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * `ListValue` is a wrapper around a repeated field of values.
 *
 * The JSON representation for `ListValue` is JSON array.
 *
 * @property {Object[]} values
 *   Repeated field of dynamically typed values.
 *
 *   This object should have the same structure as [Value]{@link google.protobuf.Value}
 *
 * @typedef ListValue
 * @memberof google.protobuf
 * @see [google.protobuf.ListValue definition in proto format]{@link https://github.com/google/protobuf/blob/master/src/google/protobuf/struct.proto}
 */
var ListValue = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * `NullValue` is a singleton enumeration to represent the null value for the
 * `Value` type union.
 *
 *  The JSON representation for `NullValue` is JSON `null`.
 *
 * @enum {number}
 * @memberof google.protobuf
 */
var NullValue = {

  /**
   * Null value.
   */
  NULL_VALUE: 0
};
============== file: src/v1/doc/google/protobuf/doc_timestamp.js ==============
// Copyright 2017, Google LLC All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Note: this file is purely for documentation. Any contents are not expected
// to be loaded as the JS file.

/**
 * A Timestamp represents a point in time independent of any time zone
 * or calendar, represented as seconds and fractions of seconds at
 * nanosecond resolution in UTC Epoch time. It is encoded using the
 * Proleptic Gregorian Calendar which extends the Gregorian calendar
 * backwards to year one. It is encoded assuming all minutes are 60
 * seconds long, i.e. leap seconds are "smeared" so that no leap second
 * table is needed for interpretation. Range is from
 * 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.
 * By restricting to that range, we ensure that we can convert to
 * and from  RFC 3339 date strings.
 * See [https://www.ietf.org/rfc/rfc3339.txt](https://www.ietf.org/rfc/rfc3339.txt).
 *
 * # Examples
 *
 * Example 1: Compute Timestamp from POSIX `time()`.
 *
 *     Timestamp timestamp;
 *     timestamp.set_seconds(time(NULL));
 *     timestamp.set_nanos(0);
 *
 * Example 2: Compute Timestamp from POSIX `gettimeofday()`.
 *
 *     struct timeval tv;
 *     gettimeofday(&tv, NULL);
 *
 *     Timestamp timestamp;
 *     timestamp.set_seconds(tv.tv_sec);
 *     timestamp.set_nanos(tv.tv_usec * 1000);
 *
 * Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.
 *
 *     FILETIME ft;
 *     GetSystemTimeAsFileTime(&ft);
 *     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;
 *
 *     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
 *     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
 *     Timestamp timestamp;
 *     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
 *     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));
 *
 * Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.
 *
 *     long millis = System.currentTimeMillis();
 *
 *     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
 *         .setNanos((int) ((millis % 1000) * 1000000)).build();
 *
 *
 * Example 5: Compute Timestamp from current time in Python.
 *
 *     timestamp = Timestamp()
 *     timestamp.GetCurrentTime()
 *
 * # JSON Mapping
 *
 * In JSON format, the Timestamp type is encoded as a string in the
 * [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the
 * format is "{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z"
 * where {year} is always expressed using four digits while {month}, {day},
 * {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional
 * seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),
 * are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone
 * is required, though only UTC (as indicated by "Z") is presently supported.
 *
 * For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past
 * 01:30 UTC on January 15, 2017.
 *
 * In JavaScript, one can convert a Date object to this format using the
 * standard [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString]
 * method. In Python, a standard `datetime.datetime` object can be converted
 * to this format using [`strftime`](https://docs.python.org/2/library/time.html#time.strftime)
 * with the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one
 * can use the Joda Time's [`ISODateTimeFormat.dateTime()`](https://cloud.google.com
 * http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime())
 * to obtain a formatter capable of generating timestamps in this format.
 *
 * @property {number} seconds
 *   Represents seconds of UTC time since Unix epoch
 *   1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
 *   9999-12-31T23:59:59Z inclusive.
 *
 * @property {number} nanos
 *   Non-negative fractions of a second at nanosecond resolution. Negative
 *   second values with fractions must still have non-negative nanos values
 *   that count forward in time. Must be from 0 to 999,999,999
 *   inclusive.
 *
 * @typedef Timestamp
 * @memberof google.protobuf
 * @see [google.protobuf.Timestamp definition in proto format]{@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto}
 */
var Timestamp = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};
============== file: src/v1/doc/google/protobuf/doc_wrappers.js ==============
// Copyright 2017, Google LLC All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Note: this file is purely for documentation. Any contents are not expected
// to be loaded as the JS file.

/**
 * Wrapper message for `double`.
 *
 * The JSON representation for `DoubleValue` is JSON number.
 *
 * @property {number} value
 *   The double value.
 *
 * @typedef DoubleValue
 * @memberof google.protobuf
 * @see [google.protobuf.DoubleValue definition in proto format]{@link https://github.com/google/protobuf/blob/master/src/google/protobuf/wrappers.proto}
 */
var DoubleValue = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Wrapper message for `float`.
 *
 * The JSON representation for `FloatValue` is JSON number.
 *
 * @property {number} value
 *   The float value.
 *
 * @typedef FloatValue
 * @memberof google.protobuf
 * @see [google.protobuf.FloatValue definition in proto format]{@link https://github.com/google/protobuf/blob/master/src/google/protobuf/wrappers.proto}
 */
var FloatValue = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Wrapper message for `int64`.
 *
 * The JSON representation for `Int64Value` is JSON string.
 *
 * @property {number} value
 *   The int64 value.
 *
 * @typedef Int64Value
 * @memberof google.protobuf
 * @see [google.protobuf.Int64Value definition in proto format]{@link https://github.com/google/protobuf/blob/master/src/google/protobuf/wrappers.proto}
 */
var Int64Value = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Wrapper message for `uint64`.
 *
 * The JSON representation for `UInt64Value` is JSON string.
 *
 * @property {number} value
 *   The uint64 value.
 *
 * @typedef UInt64Value
 * @memberof google.protobuf
 * @see [google.protobuf.UInt64Value definition in proto format]{@link https://github.com/google/protobuf/blob/master/src/google/protobuf/wrappers.proto}
 */
var UInt64Value = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Wrapper message for `int32`.
 *
 * The JSON representation for `Int32Value` is JSON number.
 *
 * @property {number} value
 *   The int32 value.
 *
 * @typedef Int32Value
 * @memberof google.protobuf
 * @see [google.protobuf.Int32Value definition in proto format]{@link https://github.com/google/protobuf/blob/master/src/google/protobuf/wrappers.proto}
 */
var Int32Value = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Wrapper message for `uint32`.
 *
 * The JSON representation for `UInt32Value` is JSON number.
 *
 * @property {number} value
 *   The uint32 value.
 *
 * @typedef UInt32Value
 * @memberof google.protobuf
 * @see [google.protobuf.UInt32Value definition in proto format]{@link https://github.com/google/protobuf/blob/master/src/google/protobuf/wrappers.proto}
 */
var UInt32Value = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Wrapper message for `bool`.
 *
 * The JSON representation for `BoolValue` is JSON `true` and `false`.
 *
 * @property {boolean} value
 *   The bool value.
 *
 * @typedef BoolValue
 * @memberof google.protobuf
 * @see [google.protobuf.BoolValue definition in proto format]{@link https://github.com/google/protobuf/blob/master/src/google/protobuf/wrappers.proto}
 */
var BoolValue = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Wrapper message for `string`.
 *
 * The JSON representation for `StringValue` is JSON string.
 *
 * @property {string} value
 *   The string value.
 *
 * @typedef StringValue
 * @memberof google.protobuf
 * @see [google.protobuf.StringValue definition in proto format]{@link https://github.com/google/protobuf/blob/master/src/google/protobuf/wrappers.proto}
 */
var StringValue = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * Wrapper message for `bytes`.
 *
 * The JSON representation for `BytesValue` is JSON string.
 *
 * @property {string} value
 *   The bytes value.
 *
 * @typedef BytesValue
 * @memberof google.protobuf
 * @see [google.protobuf.BytesValue definition in proto format]{@link https://github.com/google/protobuf/blob/master/src/google/protobuf/wrappers.proto}
 */
var BytesValue = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};
============== file: src/v1/doc/google/rpc/doc_status.js ==============
// Copyright 2017, Google LLC All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Note: this file is purely for documentation. Any contents are not expected
// to be loaded as the JS file.

/**
 * The `Status` type defines a logical error model that is suitable for different
 * programming environments, including REST APIs and RPC APIs. It is used by
 * [gRPC](https://github.com/grpc). The error model is designed to be:
 *
 * - Simple to use and understand for most users
 * - Flexible enough to meet unexpected needs
 *
 * # Overview
 *
 * The `Status` message contains three pieces of data: error code, error message,
 * and error details. The error code should be an enum value of
 * google.rpc.Code, but it may accept additional error codes if needed.  The
 * error message should be a developer-facing English message that helps
 * developers *understand* and *resolve* the error. If a localized user-facing
 * error message is needed, put the localized message in the error details or
 * localize it in the client. The optional error details may contain arbitrary
 * information about the error. There is a predefined set of error detail types
 * in the package `google.rpc` which can be used for common error conditions.
 *
 * # Language mapping
 *
 * The `Status` message is the logical representation of the error model, but it
 * is not necessarily the actual wire format. When the `Status` message is
 * exposed in different client libraries and different wire protocols, it can be
 * mapped differently. For example, it will likely be mapped to some exceptions
 * in Java, but more likely mapped to some error codes in C.
 *
 * # Other uses
 *
 * The error model and the `Status` message can be used in a variety of
 * environments, either with or without APIs, to provide a
 * consistent developer experience across different environments.
 *
 * Example uses of this error model include:
 *
 * - Partial errors. If a service needs to return partial errors to the client,
 *     it may embed the `Status` in the normal response to indicate the partial
 *     errors.
 *
 * - Workflow errors. A typical workflow has multiple steps. Each step may
 *     have a `Status` message for error reporting purpose.
 *
 * - Batch operations. If a client uses batch request and batch response, the
 *     `Status` message should be used directly inside batch response, one for
 *     each error sub-response.
 *
 * - Asynchronous operations. If an API call embeds asynchronous operation
 *     results in its response, the status of those operations should be
 *     represented directly using the `Status` message.
 *
 * - Logging. If some API errors are stored in logs, the message `Status` could
 *     be used directly after any stripping needed for security/privacy reasons.
 *
 * @property {number} code
 *   The status code, which should be an enum value of google.rpc.Code.
 *
 * @property {string} message
 *   A developer-facing error message, which should be in English. Any
 *   user-facing error message should be localized and sent in the
 *   google.rpc.Status.details field, or localized by the client.
 *
 * @property {Object[]} details
 *   A list of messages that carry the error details.  There will be a
 *   common set of message types for APIs to use.
 *
 *   This object should have the same structure as [Any]{@link google.protobuf.Any}
 *
 * @typedef Status
 * @memberof google.rpc
 * @see [google.rpc.Status definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto}
 */
var Status = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};
============== file: src/v1/doc/google/test/shared/data/doc_shared_type.js ==============
// Copyright 2017, Google LLC All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Note: this file is purely for documentation. Any contents are not expected
// to be loaded as the JS file.

/**
 * This message is used by the library service and does not reference
 * other_shared_type.proto.
 *
 * @property {number} timesUsed
 *
 * @typedef Used
 * @memberof google.test.shared.data
 * @see [google.test.shared.data.Used definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/shared_type.proto}
 */
var Used = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};

/**
 * This message is not used by the library service but does reference
 * other_shared_type.proto.
 *
 * @property {Object} other
 *   This object should have the same structure as [OtherType]{@link google.test.shared.data.OtherType}
 *
 * @typedef Unused
 * @memberof google.test.shared.data
 * @see [google.test.shared.data.Unused definition in proto format]{@link https://github.com/googleapis/googleapis/blob/master/shared_type.proto}
 */
var Unused = {
  // This is for documentation. Actual contents will be loaded by gRPC.
};
============== file: src/v1/index.js ==============
// Copyright 2017, Google LLC All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

'use strict';

const LibraryServiceClient = require('./library_service_client');

module.exports.LibraryServiceClient = LibraryServiceClient;

============== file: src/v1/library_service_client.js ==============
// Copyright 2017, Google LLC All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

'use strict';

const gapicConfig = require('./library_service_client_config');
const gax = require('google-gax');
const merge = require('lodash.merge');
const path = require('path');
const protobuf = require('protobufjs');

const VERSION = require('../../package.json').version;

/**
 * This API represents a simple digital library.  It lets you manage Shelf
 * resources and Book resources in the library. It defines the following
 * resource model:
 *
 * - The API has a collection of Shelf
 *   resources, named ``bookShelves/*``
 *
 * - Each Shelf has a collection of Book
 *   resources, named `bookShelves/*/books/*`
 *
 * Check out [cloud docs!](https://cloud.google.com/library/example/link).
 * This is [not a cloud link](http://www.google.com).
 *
 * Service comment may include special characters: <>&"`'@.
 *
 * @class
 * @memberof v1
 */
class LibraryServiceClient {
  /**
   * Construct an instance of LibraryServiceClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *   usaing a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option above is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {function} [options.promise] - Custom promise module to use instead
   *     of native Promises.
   * @param {string} [options.servicePath] - The domain name of the
   *     API remote host.
   */
  constructor(opts) {
    this._descriptors = {};

    // Ensure that options include the service address and port.
    opts = Object.assign(
      {
        clientConfig: {},
        port: this.constructor.port,
        servicePath: this.constructor.servicePath,
      },
      opts
    );

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = this.constructor.scopes;
    var gaxGrpc = gax.grpc(opts);

    // Save the auth object to the client, for use by other methods.
    this.auth = gaxGrpc.auth;

    // Determine the client header string.
    var clientHeader = [
      `gl-node/${process.version.node}`,
      `grpc/${gaxGrpc.grpcVersion}`,
      `gax/${gax.version}`,
      `gapic/${VERSION}`,
    ];
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }

    // Load the applicable protos.
    var protos = merge(
      {},
      gaxGrpc.loadProto(
        path.join(__dirname, '..', '..', 'protos'),
        'library.proto'
      ),
      gaxGrpc.loadProto(
        path.join(__dirname, '..', '..', 'protos'),
        'tagger.proto'
      )
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this._pathTemplates = {
      shelfPathTemplate: new gax.PathTemplate(
        'shelves/{shelf_id}'
      ),
      bookPathTemplate: new gax.PathTemplate(
        'shelves/{shelf_id}/books/{book_id}'
      ),
      returnPathTemplate: new gax.PathTemplate(
        'shelves/{shelf}/books/{book}/returns/{return}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this._descriptors.page = {
      listShelves: new gax.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'shelves'
      ),
      listBooks: new gax.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'books'
      ),
      listStrings: new gax.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'strings'
      ),
      findRelatedBooks: new gax.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'names'
      ),
    };

    // Some of the methods on this service provide streaming responses.
    // Provide descriptors for these.
    this._descriptors.stream = {
      streamShelves: new gax.StreamDescriptor(gax.StreamType.SERVER_STREAMING),
      streamBooks: new gax.StreamDescriptor(gax.StreamType.SERVER_STREAMING),
      discussBook: new gax.StreamDescriptor(gax.StreamType.BIDI_STREAMING),
      monologAboutBook: new gax.StreamDescriptor(gax.StreamType.CLIENT_STREAMING),
    };
    var protoFilesRoot = new gax.grpc.GoogleProtoFilesRoot();
    protoFilesRoot = protobuf.loadSync(
      path.join(__dirname, '..', '..', 'protos', 'library.proto'),
      protoFilesRoot
    );
    protoFilesRoot = protobuf.loadSync(
      path.join(__dirname, '..', '..', 'protos', 'tagger.proto'),
      protoFilesRoot
    );


    // Some methods on this API support automatically batching
    // requests; denote this.
    this._descriptors.batching = {
      publishSeries: new gax.BundleDescriptor(
        'books',
        [
          'edition',
          'shelf.name',
        ],
        'bookNames',
        gax.createByteLengthFunction(protoFilesRoot.lookup('google.example.library.v1.Book'))
      ),
      addComments: new gax.BundleDescriptor(
        'comments',
        [
          'name',
        ],
        null,
        gax.createByteLengthFunction(protoFilesRoot.lookup('google.example.library.v1.Comment'))
      ),
    };

    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    this.operationsClient = new gax.lro({
      auth: gaxGrpc.auth,
      grpc: gaxGrpc.grpc,
    }).operationsClient(opts);

    var getBigBookResponse = protoFilesRoot.lookup(
      'google.example.library.v1.Book'
    );
    var getBigBookMetadata = protoFilesRoot.lookup(
      'google.example.library.v1.GetBigBookMetadata'
    );
    var getBigNothingResponse = protoFilesRoot.lookup(
      'google.protobuf.Empty'
    );
    var getBigNothingMetadata = protoFilesRoot.lookup(
      'google.example.library.v1.GetBigBookMetadata'
    );

    this._descriptors.longrunning = {
      getBigBook: new gax.LongrunningDescriptor(
        this.operationsClient,
        getBigBookResponse.decode.bind(getBigBookResponse),
        getBigBookMetadata.decode.bind(getBigBookMetadata)
      ),
      getBigNothing: new gax.LongrunningDescriptor(
        this.operationsClient,
        getBigNothingResponse.decode.bind(getBigNothingResponse),
        getBigNothingMetadata.decode.bind(getBigNothingMetadata)
      ),
    };

    // Put together the default options sent with requests.
    var defaults = gaxGrpc.constructSettings(
      'google.example.library.v1.LibraryService',
      gapicConfig,
      opts.clientConfig,
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this._innerApiCalls = {};

    // Put together the "service stub" for
    // google.example.library.v1.LibraryService.
    var libraryServiceStub = gaxGrpc.createStub(
      protos.google.example.library.v1.LibraryService,
      opts
    );

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    var libraryServiceStubMethods = [
      'createShelf',
      'getShelf',
      'listShelves',
      'deleteShelf',
      'mergeShelves',
      'createBook',
      'publishSeries',
      'getBook',
      'listBooks',
      'deleteBook',
      'updateBook',
      'moveBook',
      'listStrings',
      'addComments',
      'getBookFromArchive',
      'getBookFromAnywhere',
      'getBookFromAbsolutelyAnywhere',
      'updateBookIndex',
      'streamShelves',
      'streamBooks',
      'discussBook',
      'monologAboutBook',
      'findRelatedBooks',
      'addTag',
      'getBigBook',
      'getBigNothing',
      'testOptionalRequiredFlatteningParams',
    ];
    for (let methodName of libraryServiceStubMethods) {
      this._innerApiCalls[methodName] = gax.createApiCall(
        libraryServiceStub.then(
          stub =>
            function() {
              var args = Array.prototype.slice.call(arguments, 0);
              return stub[methodName].apply(stub, args);
            }
        ),
        defaults[methodName],
        this._descriptors.page[methodName] || this._descriptors.batching[methodName] || this._descriptors.stream[methodName] || this._descriptors.longrunning[methodName]
      );
    }

    // Put together the "service stub" for
    // google.tagger.v1.Labeler.
    var labelerStub = gaxGrpc.createStub(
      protos.google.tagger.v1.Labeler,
      opts
    );

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    var labelerStubMethods = [
      'addLabel',
    ];
    for (let methodName of labelerStubMethods) {
      this._innerApiCalls[methodName] = gax.createApiCall(
        labelerStub.then(
          stub =>
            function() {
              var args = Array.prototype.slice.call(arguments, 0);
              return stub[methodName].apply(stub, args);
            }
        ),
        defaults[methodName],
        this._descriptors.page[methodName] || this._descriptors.batching[methodName] || this._descriptors.stream[methodName] || this._descriptors.longrunning[methodName]
      );
    }
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'library-example.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform',
      'https://www.googleapis.com/auth/library',
    ];
  }

  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(callback) {
    return this.auth.getProjectId(callback);
  }

  // -------------------
  // -- Service calls --
  // -------------------

  /**
   * Creates a shelf, and returns the new Shelf.
   * RPC method comment may include special characters: <>&"`'@.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {Object} request.shelf
   *   The shelf to create.
   *
   *   This object should have the same structure as [Shelf]{@link google.example.library.v1.Shelf}
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [Shelf]{@link google.example.library.v1.Shelf}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Shelf]{@link google.example.library.v1.Shelf}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var shelf = {};
   * client.createShelf({shelf: shelf})
   *   .then(responses => {
   *     var response = responses[0];
   *     // doThingsWith(response)
   *   })
   *   .catch(err => {
   *     console.error(err);
   *   });
   */
  createShelf(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.createShelf(request, options, callback);
  }

  /**
   * Gets a shelf.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the shelf to retrieve.
   * @param {string} request.options
   *   To test 'options' parameter name conflict.
   * @param {Object} [request.message]
   *   Field to verify that message-type query parameter gets flattened.
   *
   *   This object should have the same structure as [SomeMessage]{@link google.example.library.v1.SomeMessage}
   * @param {Object} [request.stringBuilder]
   *   This object should have the same structure as [StringBuilder]{@link google.example.library.v1.StringBuilder}
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [Shelf]{@link google.example.library.v1.Shelf}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Shelf]{@link google.example.library.v1.Shelf}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.shelfPath('[SHELF_ID]');
   * var options = '';
   * var request = {
   *   name: formattedName,
   *   options: options,
   * };
   * client.getShelf(request)
   *   .then(responses => {
   *     var response = responses[0];
   *     // doThingsWith(response)
   *   })
   *   .catch(err => {
   *     console.error(err);
   *   });
   */
  getShelf(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.getShelf(request, options, callback);
  }

  /**
   * Lists shelves.
   *
   * @param {Object} [request]
   *   The request object that will be sent.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Array, ?Object, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is Array of [Shelf]{@link google.example.library.v1.Shelf}.
   *
   *   When autoPaginate: false is specified through options, it contains the result
   *   in a single response. If the response indicates the next page exists, the third
   *   parameter is set to be used for the next request object. The fourth parameter keeps
   *   the raw response object of an object representing [ListShelvesResponse]{@link google.example.library.v1.ListShelvesResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Shelf]{@link google.example.library.v1.Shelf}.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Shelf]{@link google.example.library.v1.Shelf} in a single response.
   *   The second element is the next request object if the response
   *   indicates the next page exists, or null. The third element is
   *   an object representing [ListShelvesResponse]{@link google.example.library.v1.ListShelvesResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * // Iterate over all elements.
   * client.listShelves({})
   *   .then(responses => {
   *     var resources = responses[0];
   *     for (let i = 0; i < resources.length; i += 1) {
   *       // doThingsWith(resources[i])
   *     }
   *   })
   *   .catch(err => {
   *     console.error(err);
   *   });
   *
   * // Or obtain the paged response.
   *
   * var options = {autoPaginate: false};
   * var callback = responses => {
   *   // The actual resources in a response.
   *   var resources = responses[0];
   *   // The next request if the response shows that there are more responses.
   *   var nextRequest = responses[1];
   *   // The actual response object, if necessary.
   *   // var rawResponse = responses[2];
   *   for (let i = 0; i < resources.length; i += 1) {
   *     // doThingsWith(resources[i]);
   *   }
   *   if (nextRequest) {
   *     // Fetch the next page.
   *     return client.listShelves(nextRequest, options).then(callback);
   *   }
   * }
   * client.listShelves({}, options)
   *   .then(callback)
   *   .catch(err => {
   *     console.error(err);
   *   });
   */
  listShelves(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    if (request === undefined) {
      request = {};
    }
    return this._innerApiCalls.listShelves(request, options, callback);
  }

  /**
   * Equivalent to {@link listShelves}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listShelves} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} [request]
   *   The request object that will be sent.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Shelf]{@link google.example.library.v1.Shelf} on 'data' event.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   *
   * client.listShelvesStream({})
   *   .on('data', element => {
   *     // doThingsWith(element)
   *   }).on('error', err => {
   *     console.log(err);
   *   });
   */
  listShelvesStream(request, options) {
    options = options || {};
    if (request === undefined) {
      request = {};
    }
    return this._descriptors.page.listShelves.createStream(
      this._innerApiCalls.listShelves,
      request,
      options
    );
  };

  /**
   * Deletes a shelf.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the shelf to delete.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error)} [callback]
   *   The function which will be called with the result of the API call.
   * @returns {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.shelfPath('[SHELF_ID]');
   * client.deleteShelf({name: formattedName}).catch(err => {
   *   console.error(err);
   * });
   */
  deleteShelf(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.deleteShelf(request, options, callback);
  }

  /**
   * Merges two shelves by adding all books from the shelf named
   * `other_shelf_name` to shelf `name`, and deletes
   * `other_shelf_name`. Returns the updated shelf.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the shelf we're adding books to.
   * @param {string} request.otherShelfName
   *   The name of the shelf we're removing books from and deleting.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [Shelf]{@link google.example.library.v1.Shelf}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Shelf]{@link google.example.library.v1.Shelf}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.shelfPath('[SHELF_ID]');
   * var formattedOtherShelfName = client.shelfPath('[SHELF_ID]');
   * var request = {
   *   name: formattedName,
   *   otherShelfName: formattedOtherShelfName,
   * };
   * client.mergeShelves(request)
   *   .then(responses => {
   *     var response = responses[0];
   *     // doThingsWith(response)
   *   })
   *   .catch(err => {
   *     console.error(err);
   *   });
   */
  mergeShelves(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.mergeShelves(request, options, callback);
  }

  /**
   * Creates a book.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the shelf in which the book is created.
   * @param {Object} request.book
   *   The book to create.
   *
   *   This object should have the same structure as [Book]{@link google.example.library.v1.Book}
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [Book]{@link google.example.library.v1.Book}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Book]{@link google.example.library.v1.Book}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.shelfPath('[SHELF_ID]');
   * var book = {};
   * var request = {
   *   name: formattedName,
   *   book: book,
   * };
   * client.createBook(request)
   *   .then(responses => {
   *     var response = responses[0];
   *     // doThingsWith(response)
   *   })
   *   .catch(err => {
   *     console.error(err);
   *   });
   */
  createBook(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.createBook(request, options, callback);
  }

  /**
   * Creates a series of books.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {Object} request.shelf
   *   The shelf in which the series is created.
   *
   *   This object should have the same structure as [Shelf]{@link google.example.library.v1.Shelf}
   * @param {Object[]} request.books
   *   The books to publish in the series.
   *
   *   This object should have the same structure as [Book]{@link google.example.library.v1.Book}
   * @param {Object} request.seriesUuid
   *   Uniquely identifies the series to the publishing house.
   *
   *   This object should have the same structure as [SeriesUuid]{@link google.example.library.v1.SeriesUuid}
   * @param {number} [request.edition]
   *   The edition of the series
   * @param {boolean} [request.reviewCopy]
   *   If the book is in a pre-publish state
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [PublishSeriesResponse]{@link google.example.library.v1.PublishSeriesResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [PublishSeriesResponse]{@link google.example.library.v1.PublishSeriesResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var shelf = {};
   * var books = [];
   * var seriesString = 'foobar';
   * var seriesUuid = {
   *   seriesString: seriesString,
   * };
   * var request = {
   *   shelf: shelf,
   *   books: books,
   *   seriesUuid: seriesUuid,
   * };
   * client.publishSeries(request)
   *   .then(responses => {
   *     var response = responses[0];
   *     // doThingsWith(response)
   *   })
   *   .catch(err => {
   *     console.error(err);
   *   });
   */
  publishSeries(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.publishSeries(request, options, callback);
  }

  /**
   * Gets a book.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the book to retrieve.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [Book]{@link google.example.library.v1.Book}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Book]{@link google.example.library.v1.Book}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
   * client.getBook({name: formattedName})
   *   .then(responses => {
   *     var response = responses[0];
   *     // doThingsWith(response)
   *   })
   *   .catch(err => {
   *     console.error(err);
   *   });
   */
  getBook(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.getBook(request, options, callback);
  }

  /**
   * Lists books in a shelf.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the shelf whose books we'd like to list.
   * @param {number} [request.pageSize]
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {string} [request.filter]
   *   To test python built-in wrapping.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Array, ?Object, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is Array of [Book]{@link google.example.library.v1.Book}.
   *
   *   When autoPaginate: false is specified through options, it contains the result
   *   in a single response. If the response indicates the next page exists, the third
   *   parameter is set to be used for the next request object. The fourth parameter keeps
   *   the raw response object of an object representing [ListBooksResponse]{@link google.example.library.v1.ListBooksResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Book]{@link google.example.library.v1.Book}.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Book]{@link google.example.library.v1.Book} in a single response.
   *   The second element is the next request object if the response
   *   indicates the next page exists, or null. The third element is
   *   an object representing [ListBooksResponse]{@link google.example.library.v1.ListBooksResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * // Iterate over all elements.
   * var formattedName = client.shelfPath('[SHELF_ID]');
   *
   * client.listBooks({name: formattedName})
   *   .then(responses => {
   *     var resources = responses[0];
   *     for (let i = 0; i < resources.length; i += 1) {
   *       // doThingsWith(resources[i])
   *     }
   *   })
   *   .catch(err => {
   *     console.error(err);
   *   });
   *
   * // Or obtain the paged response.
   * var formattedName = client.shelfPath('[SHELF_ID]');
   *
   *
   * var options = {autoPaginate: false};
   * var callback = responses => {
   *   // The actual resources in a response.
   *   var resources = responses[0];
   *   // The next request if the response shows that there are more responses.
   *   var nextRequest = responses[1];
   *   // The actual response object, if necessary.
   *   // var rawResponse = responses[2];
   *   for (let i = 0; i < resources.length; i += 1) {
   *     // doThingsWith(resources[i]);
   *   }
   *   if (nextRequest) {
   *     // Fetch the next page.
   *     return client.listBooks(nextRequest, options).then(callback);
   *   }
   * }
   * client.listBooks({name: formattedName}, options)
   *   .then(callback)
   *   .catch(err => {
   *     console.error(err);
   *   });
   */
  listBooks(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.listBooks(request, options, callback);
  }

  /**
   * Equivalent to {@link listBooks}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listBooks} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the shelf whose books we'd like to list.
   * @param {number} [request.pageSize]
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {string} [request.filter]
   *   To test python built-in wrapping.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Book]{@link google.example.library.v1.Book} on 'data' event.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.shelfPath('[SHELF_ID]');
   * client.listBooksStream({name: formattedName})
   *   .on('data', element => {
   *     // doThingsWith(element)
   *   }).on('error', err => {
   *     console.log(err);
   *   });
   */
  listBooksStream(request, options) {
    options = options || {};

    return this._descriptors.page.listBooks.createStream(
      this._innerApiCalls.listBooks,
      request,
      options
    );
  };

  /**
   * Deletes a book.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the book to delete.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error)} [callback]
   *   The function which will be called with the result of the API call.
   * @returns {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
   * client.deleteBook({name: formattedName}).catch(err => {
   *   console.error(err);
   * });
   */
  deleteBook(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.deleteBook(request, options, callback);
  }

  /**
   * Updates a book.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the book to update.
   * @param {Object} request.book
   *   The book to update with.
   *
   *   This object should have the same structure as [Book]{@link google.example.library.v1.Book}
   * @param {string} [request.optionalFoo]
   *   An optional foo.
   * @param {Object} [request.updateMask]
   *   A field mask to apply, rendered as an HTTP parameter.
   *
   *   This object should have the same structure as [FieldMask]{@link google.protobuf.FieldMask}
   * @param {Object} [request.physicalMask]
   *   To test Python import clash resolution.
   *
   *   This object should have the same structure as [FieldMask]{@link google.example.library.v1.FieldMask}
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [Book]{@link google.example.library.v1.Book}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Book]{@link google.example.library.v1.Book}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
   * var book = {};
   * var request = {
   *   name: formattedName,
   *   book: book,
   * };
   * client.updateBook(request)
   *   .then(responses => {
   *     var response = responses[0];
   *     // doThingsWith(response)
   *   })
   *   .catch(err => {
   *     console.error(err);
   *   });
   */
  updateBook(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.updateBook(request, options, callback);
  }

  /**
   * Moves a book to another shelf, and returns the new book.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the book to move.
   * @param {string} request.otherShelfName
   *   The name of the destination shelf.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [Book]{@link google.example.library.v1.Book}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Book]{@link google.example.library.v1.Book}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
   * var formattedOtherShelfName = client.shelfPath('[SHELF_ID]');
   * var request = {
   *   name: formattedName,
   *   otherShelfName: formattedOtherShelfName,
   * };
   * client.moveBook(request)
   *   .then(responses => {
   *     var response = responses[0];
   *     // doThingsWith(response)
   *   })
   *   .catch(err => {
   *     console.error(err);
   *   });
   */
  moveBook(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.moveBook(request, options, callback);
  }

  /**
   * Lists a primitive resource. To test go page streaming.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} [request.name]
   * @param {number} [request.pageSize]
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Array, ?Object, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is Array of string.
   *
   *   When autoPaginate: false is specified through options, it contains the result
   *   in a single response. If the response indicates the next page exists, the third
   *   parameter is set to be used for the next request object. The fourth parameter keeps
   *   the raw response object of an object representing [ListStringsResponse]{@link google.example.library.v1.ListStringsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of string.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of string in a single response.
   *   The second element is the next request object if the response
   *   indicates the next page exists, or null. The third element is
   *   an object representing [ListStringsResponse]{@link google.example.library.v1.ListStringsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * // Iterate over all elements.
   * client.listStrings({})
   *   .then(responses => {
   *     var resources = responses[0];
   *     for (let i = 0; i < resources.length; i += 1) {
   *       // doThingsWith(resources[i])
   *     }
   *   })
   *   .catch(err => {
   *     console.error(err);
   *   });
   *
   * // Or obtain the paged response.
   *
   * var options = {autoPaginate: false};
   * var callback = responses => {
   *   // The actual resources in a response.
   *   var resources = responses[0];
   *   // The next request if the response shows that there are more responses.
   *   var nextRequest = responses[1];
   *   // The actual response object, if necessary.
   *   // var rawResponse = responses[2];
   *   for (let i = 0; i < resources.length; i += 1) {
   *     // doThingsWith(resources[i]);
   *   }
   *   if (nextRequest) {
   *     // Fetch the next page.
   *     return client.listStrings(nextRequest, options).then(callback);
   *   }
   * }
   * client.listStrings({}, options)
   *   .then(callback)
   *   .catch(err => {
   *     console.error(err);
   *   });
   */
  listStrings(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.listStrings(request, options, callback);
  }

  /**
   * Equivalent to {@link listStrings}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listStrings} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} [request.name]
   * @param {number} [request.pageSize]
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @returns {Stream}
   *   An object stream which emits a string on 'data' event.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   *
   * client.listStringsStream({})
   *   .on('data', element => {
   *     // doThingsWith(element)
   *   }).on('error', err => {
   *     console.log(err);
   *   });
   */
  listStringsStream(request, options) {
    options = options || {};

    return this._descriptors.page.listStrings.createStream(
      this._innerApiCalls.listStrings,
      request,
      options
    );
  };

  /**
   * Adds comments to a book
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   * @param {Object[]} request.comments
   *   This object should have the same structure as [Comment]{@link google.example.library.v1.Comment}
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error)} [callback]
   *   The function which will be called with the result of the API call.
   * @returns {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
   * var comment = '';
   * var stage = 'UNSET';
   * var alignment = 'CHAR';
   * var commentsElement = {
   *   comment: comment,
   *   stage: stage,
   *   alignment: alignment,
   * };
   * var comments = [commentsElement];
   * var request = {
   *   name: formattedName,
   *   comments: comments,
   * };
   * client.addComments(request).catch(err => {
   *   console.error(err);
   * });
   */
  addComments(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.addComments(request, options, callback);
  }

  /**
   * Gets a book from an archive.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the book to retrieve.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [BookFromArchive]{@link google.example.library.v1.BookFromArchive}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [BookFromArchive]{@link google.example.library.v1.BookFromArchive}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.archivedBookPath('[ARCHIVE_PATH]', '[BOOK_ID]');
   * client.getBookFromArchive({name: formattedName})
   *   .then(responses => {
   *     var response = responses[0];
   *     // doThingsWith(response)
   *   })
   *   .catch(err => {
   *     console.error(err);
   *   });
   */
  getBookFromArchive(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.getBookFromArchive(request, options, callback);
  }

  /**
   * Gets a book from a shelf or archive.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the book to retrieve.
   * @param {string} request.altBookName
   *   An alternate book name, used to test restricting flattened field to a
   *   single resource name type in a oneof.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [BookFromAnywhere]{@link google.example.library.v1.BookFromAnywhere}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [BookFromAnywhere]{@link google.example.library.v1.BookFromAnywhere}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
   * var formattedAltBookName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
   * var request = {
   *   name: formattedName,
   *   altBookName: formattedAltBookName,
   * };
   * client.getBookFromAnywhere(request)
   *   .then(responses => {
   *     var response = responses[0];
   *     // doThingsWith(response)
   *   })
   *   .catch(err => {
   *     console.error(err);
   *   });
   */
  getBookFromAnywhere(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.getBookFromAnywhere(request, options, callback);
  }

  /**
   * Test proper OneOf-Any resource name mapping
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the book to retrieve.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [BookFromAnywhere]{@link google.example.library.v1.BookFromAnywhere}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [BookFromAnywhere]{@link google.example.library.v1.BookFromAnywhere}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
   * client.getBookFromAbsolutelyAnywhere({name: formattedName})
   *   .then(responses => {
   *     var response = responses[0];
   *     // doThingsWith(response)
   *   })
   *   .catch(err => {
   *     console.error(err);
   *   });
   */
  getBookFromAbsolutelyAnywhere(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.getBookFromAbsolutelyAnywhere(request, options, callback);
  }

  /**
   * Updates the index of a book.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the book to update.
   * @param {string} request.indexName
   *   The name of the index for the book
   * @param {Object.<string, string>} request.indexMap
   *   The index to update the book with
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error)} [callback]
   *   The function which will be called with the result of the API call.
   * @returns {Promise} - The promise which resolves when API call finishes.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
   * var indexName = 'default index';
   * var indexMapItem = '';
   * var indexMap = {'default_key' : indexMapItem,};
   * var request = {
   *   name: formattedName,
   *   indexName: indexName,
   *   indexMap: indexMap,
   * };
   * client.updateBookIndex(request).catch(err => {
   *   console.error(err);
   * });
   */
  updateBookIndex(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.updateBookIndex(request, options, callback);
  }

  /**
   * Test server streaming
   * gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
   *
   * @param {Object} [request]
   *   The request object that will be sent.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @returns {Stream}
   *   An object stream which emits [StreamShelvesResponse]{@link google.example.library.v1.StreamShelvesResponse} on 'data' event.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   *
   * client.streamShelves({}).on('data', response => {
   *   // doThingsWith(response)
   * });
   */
  streamShelves(request, options) {
    options = options || {};
    if (request === undefined) {
      request = {};
    }
    return this._innerApiCalls.streamShelves(request, options);
  }

  /**
   * Test server streaming, non-paged responses.
   * gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the shelf whose books we'd like to list.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @returns {Stream}
   *   An object stream which emits [Book]{@link google.example.library.v1.Book} on 'data' event.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var name = '';
   * client.streamBooks({name: name}).on('data', response => {
   *   // doThingsWith(response)
   * });
   */
  streamBooks(request, options) {
    options = options || {};

    return this._innerApiCalls.streamBooks(request, options);
  }

  /**
   * Test bidi-streaming.
   * gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
   *
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @returns {Stream}
   *   An object stream which is both readable and writable. It accepts objects
   *   representing [DiscussBookRequest]{@link google.example.library.v1.DiscussBookRequest} for write() method, and
   *   will emit objects representing [Comment]{@link google.example.library.v1.Comment} on 'data' event asynchronously.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var stream = client.discussBook().on('data', response => {
   *   // doThingsWith(response)
   * });
   * var name = '';
   * var request = {
   *   name: name,
   * };
   * // Write request objects.
   * stream.write(request);
   */
  discussBook(options) {
    options = options || {};

    return this._innerApiCalls.discussBook(options);
  }

  /**
   * Test client streaming.
   * gRPC streaming methods don't have an HTTP equivalent and don't need to have the google.api.http option.
   *
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [Comment]{@link google.example.library.v1.Comment}.
   * @returns {Stream} - A writable stream which accepts objects representing
   *   [DiscussBookRequest]{@link google.example.library.v1.DiscussBookRequest} for write() method.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var stream = client.monologAboutBook((err, response) => {
   *   if (err) {
   *     console.error(err);
   *     return;
   *   }
   *   // doThingsWith(response)
   * });
   * var name = '';
   * var request = {
   *   name: name,
   * };
   * // Write request objects.
   * stream.write(request);
   */
  monologAboutBook(options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.monologAboutBook(options, callback);
  }

  /**
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string[]} request.names
   * @param {string[]} request.shelves
   * @param {number} [request.pageSize]
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Array, ?Object, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is Array of string.
   *
   *   When autoPaginate: false is specified through options, it contains the result
   *   in a single response. If the response indicates the next page exists, the third
   *   parameter is set to be used for the next request object. The fourth parameter keeps
   *   the raw response object of an object representing [FindRelatedBooksResponse]{@link google.example.library.v1.FindRelatedBooksResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of string.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of string in a single response.
   *   The second element is the next request object if the response
   *   indicates the next page exists, or null. The third element is
   *   an object representing [FindRelatedBooksResponse]{@link google.example.library.v1.FindRelatedBooksResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * // Iterate over all elements.
   * var namesElement = '';
   * var names = [namesElement];
   * var shelves = [];
   * var request = {
   *   names: names,
   *   shelves: shelves,
   * };
   *
   * client.findRelatedBooks(request)
   *   .then(responses => {
   *     var resources = responses[0];
   *     for (let i = 0; i < resources.length; i += 1) {
   *       // doThingsWith(resources[i])
   *     }
   *   })
   *   .catch(err => {
   *     console.error(err);
   *   });
   *
   * // Or obtain the paged response.
   * var namesElement = '';
   * var names = [namesElement];
   * var shelves = [];
   * var request = {
   *   names: names,
   *   shelves: shelves,
   * };
   *
   *
   * var options = {autoPaginate: false};
   * var callback = responses => {
   *   // The actual resources in a response.
   *   var resources = responses[0];
   *   // The next request if the response shows that there are more responses.
   *   var nextRequest = responses[1];
   *   // The actual response object, if necessary.
   *   // var rawResponse = responses[2];
   *   for (let i = 0; i < resources.length; i += 1) {
   *     // doThingsWith(resources[i]);
   *   }
   *   if (nextRequest) {
   *     // Fetch the next page.
   *     return client.findRelatedBooks(nextRequest, options).then(callback);
   *   }
   * }
   * client.findRelatedBooks(request, options)
   *   .then(callback)
   *   .catch(err => {
   *     console.error(err);
   *   });
   */
  findRelatedBooks(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.findRelatedBooks(request, options, callback);
  }

  /**
   * Equivalent to {@link findRelatedBooks}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link findRelatedBooks} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string[]} request.names
   * @param {string[]} request.shelves
   * @param {number} [request.pageSize]
   *   The maximum number of resources contained in the underlying API
   *   response. If page streaming is performed per-resource, this
   *   parameter does not affect the return value. If page streaming is
   *   performed per-page, this determines the maximum number of
   *   resources in a page.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @returns {Stream}
   *   An object stream which emits a string on 'data' event.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var namesElement = '';
   * var names = [namesElement];
   * var shelves = [];
   * var request = {
   *   names: names,
   *   shelves: shelves,
   * };
   * client.findRelatedBooksStream(request)
   *   .on('data', element => {
   *     // doThingsWith(element)
   *   }).on('error', err => {
   *     console.log(err);
   *   });
   */
  findRelatedBooksStream(request, options) {
    options = options || {};

    return this._descriptors.page.findRelatedBooks.createStream(
      this._innerApiCalls.findRelatedBooks,
      request,
      options
    );
  };

  /**
   * Adds a tag to the book. This RPC is a mixin.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource which the tag is being added to.
   *   Resource is usually specified as a path, such as,
   *   projects/{project}/zones/{zone}/disks/{disk}.
   * @param {string} request.tag
   *   REQUIRED: The tag to add.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [AddTagResponse]{@link google.tagger.v1.AddTagResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [AddTagResponse]{@link google.tagger.v1.AddTagResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var formattedResource = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
   * var tag = '';
   * var request = {
   *   resource: formattedResource,
   *   tag: tag,
   * };
   * client.addTag(request)
   *   .then(responses => {
   *     var response = responses[0];
   *     // doThingsWith(response)
   *   })
   *   .catch(err => {
   *     console.error(err);
   *   });
   */
  addTag(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.addTag(request, options, callback);
  }

  /**
   * Adds a label to the entity.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource which the label is being added to.
   *   Resource is usually specified as a path, such as,
   *   projects/{project}/zones/{zone}/disks/{disk}.
   * @param {string} request.label
   *   REQUIRED: The label to add.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [AddLabelResponse]{@link google.tagger.v1.AddLabelResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [AddLabelResponse]{@link google.tagger.v1.AddLabelResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var formattedResource = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
   * var label = '';
   * var request = {
   *   resource: formattedResource,
   *   label: label,
   * };
   * client.addLabel(request)
   *   .then(responses => {
   *     var response = responses[0];
   *     // doThingsWith(response)
   *   })
   *   .catch(err => {
   *     console.error(err);
   *   });
   */
  addLabel(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.addLabel(request, options, callback);
  }

  /**
   * Test long-running operations
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the book to retrieve.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is a [gax.Operation]{@link https://googleapis.github.io/gax-nodejs/Operation} object.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is a [gax.Operation]{@link https://googleapis.github.io/gax-nodejs/Operation} object.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
   *
   * // Handle the operation using the promise pattern.
   * client.getBigBook({name: formattedName})
   *   .then(responses => {
   *     var operation = responses[0];
   *     var initialApiResponse = responses[1];
   *
   *     // Operation#promise starts polling for the completion of the LRO.
   *     return operation.promise();
   *   })
   *   .then(responses => {
   *     // The final result of the operation.
   *     var result = responses[0];
   *
   *     // The metadata value of the completed operation.
   *     var metadata = responses[1];
   *
   *     // The response of the api call returning the complete operation.
   *     var finalApiResponse = responses[2];
   *   })
   *   .catch(err => {
   *     console.error(err);
   *   });
   *
   * var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
   *
   * // Handle the operation using the event emitter pattern.
   * client.getBigBook({name: formattedName})
   *   .then(responses => {
   *     var operation = responses[0];
   *     var initialApiResponse = responses[1];
   *
   *     // Adding a listener for the "complete" event starts polling for the
   *     // completion of the operation.
   *     operation.on('complete', (result, metadata, finalApiResponse) => {
   *       // doSomethingWith(result);
   *     });
   *
   *     // Adding a listener for the "progress" event causes the callback to be
   *     // called on any change in metadata when the operation is polled.
   *     operation.on('progress', (metadata, apiResponse) => {
   *       // doSomethingWith(metadata)
   *     });
   *
   *     // Adding a listener for the "error" event handles any errors found during polling.
   *     operation.on('error', err => {
   *       // throw(err);
   *     });
   *   })
   *   .catch(err => {
   *     console.error(err);
   *   });
   */
  getBigBook(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.getBigBook(request, options, callback);
  }

  /**
   * Test long-running operations with empty return type.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   The name of the book to retrieve.
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is a [gax.Operation]{@link https://googleapis.github.io/gax-nodejs/Operation} object.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is a [gax.Operation]{@link https://googleapis.github.io/gax-nodejs/Operation} object.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
   *
   * // Handle the operation using the promise pattern.
   * client.getBigNothing({name: formattedName})
   *   .then(responses => {
   *     var operation = responses[0];
   *     var initialApiResponse = responses[1];
   *
   *     // Operation#promise starts polling for the completion of the LRO.
   *     return operation.promise();
   *   })
   *   .then(responses => {
   *     // The final result of the operation.
   *     var result = responses[0];
   *
   *     // The metadata value of the completed operation.
   *     var metadata = responses[1];
   *
   *     // The response of the api call returning the complete operation.
   *     var finalApiResponse = responses[2];
   *   })
   *   .catch(err => {
   *     console.error(err);
   *   });
   *
   * var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
   *
   * // Handle the operation using the event emitter pattern.
   * client.getBigNothing({name: formattedName})
   *   .then(responses => {
   *     var operation = responses[0];
   *     var initialApiResponse = responses[1];
   *
   *     // Adding a listener for the "complete" event starts polling for the
   *     // completion of the operation.
   *     operation.on('complete', (result, metadata, finalApiResponse) => {
   *       // doSomethingWith(result);
   *     });
   *
   *     // Adding a listener for the "progress" event causes the callback to be
   *     // called on any change in metadata when the operation is polled.
   *     operation.on('progress', (metadata, apiResponse) => {
   *       // doSomethingWith(metadata)
   *     });
   *
   *     // Adding a listener for the "error" event handles any errors found during polling.
   *     operation.on('error', err => {
   *       // throw(err);
   *     });
   *   })
   *   .catch(err => {
   *     console.error(err);
   *   });
   */
  getBigNothing(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.getBigNothing(request, options, callback);
  }

  /**
   * Test optional flattening parameters of all types
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {number} request.requiredSingularInt32
   * @param {number} request.requiredSingularInt64
   * @param {number} request.requiredSingularFloat
   * @param {number} request.requiredSingularDouble
   * @param {boolean} request.requiredSingularBool
   * @param {number} request.requiredSingularEnum
   *   The number should be among the values of [InnerEnum]{@link google.example.library.v1.InnerEnum}
   * @param {string} request.requiredSingularString
   * @param {string} request.requiredSingularBytes
   * @param {Object} request.requiredSingularMessage
   *   This object should have the same structure as [InnerMessage]{@link google.example.library.v1.InnerMessage}
   * @param {string} request.requiredSingularResourceName
   * @param {string} request.requiredSingularResourceNameOneof
   * @param {number} request.requiredSingularFixed32
   * @param {number} request.requiredSingularFixed64
   * @param {number[]} request.requiredRepeatedInt32
   * @param {number[]} request.requiredRepeatedInt64
   * @param {number[]} request.requiredRepeatedFloat
   * @param {number[]} request.requiredRepeatedDouble
   * @param {boolean[]} request.requiredRepeatedBool
   * @param {number[]} request.requiredRepeatedEnum
   *   The number should be among the values of [InnerEnum]{@link google.example.library.v1.InnerEnum}
   * @param {string[]} request.requiredRepeatedString
   * @param {string[]} request.requiredRepeatedBytes
   * @param {Object[]} request.requiredRepeatedMessage
   *   This object should have the same structure as [InnerMessage]{@link google.example.library.v1.InnerMessage}
   * @param {string[]} request.requiredRepeatedResourceName
   * @param {string[]} request.requiredRepeatedResourceNameOneof
   * @param {number[]} request.requiredRepeatedFixed32
   * @param {number[]} request.requiredRepeatedFixed64
   * @param {Object.<number, string>} request.requiredMap
   * @param {number} [request.optionalSingularInt32]
   * @param {number} [request.optionalSingularInt64]
   * @param {number} [request.optionalSingularFloat]
   * @param {number} [request.optionalSingularDouble]
   * @param {boolean} [request.optionalSingularBool]
   * @param {number} [request.optionalSingularEnum]
   *   The number should be among the values of [InnerEnum]{@link google.example.library.v1.InnerEnum}
   * @param {string} [request.optionalSingularString]
   * @param {string} [request.optionalSingularBytes]
   * @param {Object} [request.optionalSingularMessage]
   *   This object should have the same structure as [InnerMessage]{@link google.example.library.v1.InnerMessage}
   * @param {string} [request.optionalSingularResourceName]
   * @param {string} [request.optionalSingularResourceNameOneof]
   * @param {number} [request.optionalSingularFixed32]
   * @param {number} [request.optionalSingularFixed64]
   * @param {number[]} [request.optionalRepeatedInt32]
   * @param {number[]} [request.optionalRepeatedInt64]
   * @param {number[]} [request.optionalRepeatedFloat]
   * @param {number[]} [request.optionalRepeatedDouble]
   * @param {boolean[]} [request.optionalRepeatedBool]
   * @param {number[]} [request.optionalRepeatedEnum]
   *   The number should be among the values of [InnerEnum]{@link google.example.library.v1.InnerEnum}
   * @param {string[]} [request.optionalRepeatedString]
   * @param {string[]} [request.optionalRepeatedBytes]
   * @param {Object[]} [request.optionalRepeatedMessage]
   *   This object should have the same structure as [InnerMessage]{@link google.example.library.v1.InnerMessage}
   * @param {string[]} [request.optionalRepeatedResourceName]
   * @param {string[]} [request.optionalRepeatedResourceNameOneof]
   * @param {number[]} [request.optionalRepeatedFixed32]
   * @param {number[]} [request.optionalRepeatedFixed64]
   * @param {Object.<number, string>} [request.optionalMap]
   * @param {Object} [options]
   *   Optional parameters. You can override the default settings for this call, e.g, timeout,
   *   retries, paginations, etc. See [gax.CallOptions]{@link https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the details.
   * @param {function(?Error, ?Object)} [callback]
   *   The function which will be called with the result of the API call.
   *
   *   The second parameter to the callback is an object representing [TestOptionalRequiredFlatteningParamsResponse]{@link google.example.library.v1.TestOptionalRequiredFlatteningParamsResponse}.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestOptionalRequiredFlatteningParamsResponse]{@link google.example.library.v1.TestOptionalRequiredFlatteningParamsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   *
   * @example
   *
   * const library = require('@google-cloud/library');
   *
   * var client = new library.v1.LibraryServiceClient({
   *   // optional auth parameters.
   * });
   *
   * var requiredSingularInt32 = 0;
   * var requiredSingularInt64 = 0;
   * var requiredSingularFloat = 0.0;
   * var requiredSingularDouble = 0.0;
   * var requiredSingularBool = false;
   * var requiredSingularEnum = 'ZERO';
   * var requiredSingularString = '';
   * var requiredSingularBytes = '';
   * var requiredSingularMessage = {};
   * var requiredSingularResourceName = '';
   * var requiredSingularResourceNameOneof = '';
   * var requiredSingularFixed32 = 0;
   * var requiredSingularFixed64 = 0;
   * var requiredRepeatedInt32 = [];
   * var requiredRepeatedInt64 = [];
   * var requiredRepeatedFloat = [];
   * var requiredRepeatedDouble = [];
   * var requiredRepeatedBool = [];
   * var requiredRepeatedEnum = [];
   * var requiredRepeatedString = [];
   * var requiredRepeatedBytes = [];
   * var requiredRepeatedMessage = [];
   * var formattedRequiredRepeatedResourceName = [];
   * var formattedRequiredRepeatedResourceNameOneof = [];
   * var requiredRepeatedFixed32 = [];
   * var requiredRepeatedFixed64 = [];
   * var requiredMap = {};
   * var request = {
   *   requiredSingularInt32: requiredSingularInt32,
   *   requiredSingularInt64: requiredSingularInt64,
   *   requiredSingularFloat: requiredSingularFloat,
   *   requiredSingularDouble: requiredSingularDouble,
   *   requiredSingularBool: requiredSingularBool,
   *   requiredSingularEnum: requiredSingularEnum,
   *   requiredSingularString: requiredSingularString,
   *   requiredSingularBytes: requiredSingularBytes,
   *   requiredSingularMessage: requiredSingularMessage,
   *   requiredSingularResourceName: requiredSingularResourceName,
   *   requiredSingularResourceNameOneof: requiredSingularResourceNameOneof,
   *   requiredSingularFixed32: requiredSingularFixed32,
   *   requiredSingularFixed64: requiredSingularFixed64,
   *   requiredRepeatedInt32: requiredRepeatedInt32,
   *   requiredRepeatedInt64: requiredRepeatedInt64,
   *   requiredRepeatedFloat: requiredRepeatedFloat,
   *   requiredRepeatedDouble: requiredRepeatedDouble,
   *   requiredRepeatedBool: requiredRepeatedBool,
   *   requiredRepeatedEnum: requiredRepeatedEnum,
   *   requiredRepeatedString: requiredRepeatedString,
   *   requiredRepeatedBytes: requiredRepeatedBytes,
   *   requiredRepeatedMessage: requiredRepeatedMessage,
   *   requiredRepeatedResourceName: formattedRequiredRepeatedResourceName,
   *   requiredRepeatedResourceNameOneof: formattedRequiredRepeatedResourceNameOneof,
   *   requiredRepeatedFixed32: requiredRepeatedFixed32,
   *   requiredRepeatedFixed64: requiredRepeatedFixed64,
   *   requiredMap: requiredMap,
   * };
   * client.testOptionalRequiredFlatteningParams(request)
   *   .then(responses => {
   *     var response = responses[0];
   *     // doThingsWith(response)
   *   })
   *   .catch(err => {
   *     console.error(err);
   *   });
   */
  testOptionalRequiredFlatteningParams(request, options, callback) {
    if (options instanceof Function && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};

    return this._innerApiCalls.testOptionalRequiredFlatteningParams(request, options, callback);
  }

  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified shelf resource name string.
   *
   * @param {String} shelfId
   * @returns {String}
   */
  shelfPath(shelfId) {
    return this._pathTemplates.shelfPathTemplate.render({
      shelf_id: shelfId,
    });
  }

  /**
   * Return a fully-qualified book resource name string.
   *
   * @param {String} shelfId
   * @param {String} bookId
   * @returns {String}
   */
  bookPath(shelfId, bookId) {
    return this._pathTemplates.bookPathTemplate.render({
      shelf_id: shelfId,
      book_id: bookId,
    });
  }

  /**
   * Return a fully-qualified return resource name string.
   *
   * @param {String} shelf
   * @param {String} book
   * @param {String} return_
   * @returns {String}
   */
  returnPath(shelf, book, return_) {
    return this._pathTemplates.returnPathTemplate.render({
      shelf: shelf,
      book: book,
      return: return_,
    });
  }

  /**
   * Parse the shelfName from a shelf resource.
   *
   * @param {String} shelfName
   *   A fully-qualified path representing a shelf resources.
   * @returns {String} - A string representing the shelf_id.
   */
  matchShelfIdFromShelfName(shelfName) {
    return this._pathTemplates.shelfPathTemplate
      .match(shelfName)
      .shelf_id;
  }

  /**
   * Parse the bookName from a book resource.
   *
   * @param {String} bookName
   *   A fully-qualified path representing a book resources.
   * @returns {String} - A string representing the shelf_id.
   */
  matchShelfIdFromBookName(bookName) {
    return this._pathTemplates.bookPathTemplate
      .match(bookName)
      .shelf_id;
  }

  /**
   * Parse the bookName from a book resource.
   *
   * @param {String} bookName
   *   A fully-qualified path representing a book resources.
   * @returns {String} - A string representing the book_id.
   */
  matchBookIdFromBookName(bookName) {
    return this._pathTemplates.bookPathTemplate
      .match(bookName)
      .book_id;
  }

  /**
   * Parse the returnName from a return resource.
   *
   * @param {String} returnName
   *   A fully-qualified path representing a return resources.
   * @returns {String} - A string representing the shelf.
   */
  matchShelfFromReturnName(returnName) {
    return this._pathTemplates.returnPathTemplate
      .match(returnName)
      .shelf;
  }

  /**
   * Parse the returnName from a return resource.
   *
   * @param {String} returnName
   *   A fully-qualified path representing a return resources.
   * @returns {String} - A string representing the book.
   */
  matchBookFromReturnName(returnName) {
    return this._pathTemplates.returnPathTemplate
      .match(returnName)
      .book;
  }

  /**
   * Parse the returnName from a return resource.
   *
   * @param {String} returnName
   *   A fully-qualified path representing a return resources.
   * @returns {String} - A string representing the return.
   */
  matchReturnFromReturnName(returnName) {
    return this._pathTemplates.returnPathTemplate
      .match(returnName)
      .return;
  }
}


module.exports = LibraryServiceClient;

============== file: src/v1/library_service_client_config.json ==============
{
  "interfaces": {
    "google.example.library.v1.LibraryService": {
      "retry_codes": {
        "idempotent": [
          "DEADLINE_EXCEEDED",
          "UNAVAILABLE"
        ],
        "non_idempotent": []
      },
      "retry_params": {
        "default": {
          "initial_retry_delay_millis": 100,
          "retry_delay_multiplier": 1.2,
          "max_retry_delay_millis": 1000,
          "initial_rpc_timeout_millis": 300,
          "rpc_timeout_multiplier": 1.3,
          "max_rpc_timeout_millis": 3000,
          "total_timeout_millis": 30000
        }
      },
      "methods": {
        "CreateShelf": {
          "timeout_millis": 1000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "GetShelf": {
          "timeout_millis": 2000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "ListShelves": {
          "timeout_millis": 3000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "DeleteShelf": {
          "timeout_millis": 4000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "MergeShelves": {
          "timeout_millis": 5000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "CreateBook": {
          "timeout_millis": 6000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "PublishSeries": {
          "timeout_millis": 7000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default",
          "bundling": {
            "element_count_threshold": 6,
            "element_count_limit": 7,
            "request_byte_threshold": 100000,
            "request_byte_limit": 150000,
            "delay_threshold_millis": 500
          }
        },
        "GetBook": {
          "timeout_millis": 8000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "ListBooks": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "DeleteBook": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "UpdateBook": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "MoveBook": {
          "timeout_millis": 10000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "ListStrings": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "AddComments": {
          "timeout_millis": 10000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default",
          "bundling": {
            "element_count_threshold": 6,
            "request_byte_threshold": 100000,
            "delay_threshold_millis": 500
          }
        },
        "GetBookFromArchive": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "GetBookFromAnywhere": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "GetBookFromAbsolutelyAnywhere": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "UpdateBookIndex": {
          "timeout_millis": 10000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "StreamShelves": {
          "timeout_millis": 30000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "StreamBooks": {
          "timeout_millis": 30000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "DiscussBook": {
          "timeout_millis": 30000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "MonologAboutBook": {
          "timeout_millis": 30000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "FindRelatedBooks": {
          "timeout_millis": 3000,
          "retry_codes_name": "idempotent",
          "retry_params_name": "default"
        },
        "AddTag": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "AddLabel": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "GetBigBook": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "GetBigNothing": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        },
        "TestOptionalRequiredFlatteningParams": {
          "timeout_millis": 60000,
          "retry_codes_name": "non_idempotent",
          "retry_params_name": "default"
        }
      }
    }
  }
}

============== file: test/gapic-v1.js ==============
// Copyright 2017, Google LLC All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

'use strict';

const assert = require('assert');
const through2 = require('through2');

const libraryModule = require('../src');

var FAKE_STATUS_CODE = 1;
var error = new Error();
error.code = FAKE_STATUS_CODE;

describe('LibraryServiceClient', () => {
  describe('createShelf', () => {
    it('invokes createShelf without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var shelf = {};
      var request = {
        shelf: shelf,
      };

      // Mock response
      var name = 'name3373707';
      var theme = 'theme110327241';
      var internalTheme = 'internalTheme792518087';
      var expectedResponse = {
        name: name,
        theme: theme,
        internalTheme: internalTheme,
      };

      // Mock Grpc layer
      client._innerApiCalls.createShelf = mockSimpleGrpcMethod(
        request,
        expectedResponse
      );

      client.createShelf(request, (err, response) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes createShelf with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var shelf = {};
      var request = {
        shelf: shelf,
      };

      // Mock Grpc layer
      client._innerApiCalls.createShelf = mockSimpleGrpcMethod(
        request,
        null,
        error
      );

      client.createShelf(request, (err, response) => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });

  describe('getShelf', () => {
    it('invokes getShelf without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.shelfPath('[SHELF_ID]');
      var options = 'options-1249474914';
      var request = {
        name: formattedName,
        options: options,
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var theme = 'theme110327241';
      var internalTheme = 'internalTheme792518087';
      var expectedResponse = {
        name: name2,
        theme: theme,
        internalTheme: internalTheme,
      };

      // Mock Grpc layer
      client._innerApiCalls.getShelf = mockSimpleGrpcMethod(
        request,
        expectedResponse
      );

      client.getShelf(request, (err, response) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getShelf with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.shelfPath('[SHELF_ID]');
      var options = 'options-1249474914';
      var request = {
        name: formattedName,
        options: options,
      };

      // Mock Grpc layer
      client._innerApiCalls.getShelf = mockSimpleGrpcMethod(
        request,
        null,
        error
      );

      client.getShelf(request, (err, response) => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });

  describe('listShelves', () => {
    it('invokes listShelves without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var request = {};

      // Mock response
      var nextPageToken = '';
      var shelvesElement = {};
      var shelves = [shelvesElement];
      var expectedResponse = {
        nextPageToken: nextPageToken,
        shelves: shelves,
      };

      // Mock Grpc layer
      client._innerApiCalls.listShelves = (actualRequest, options, callback) => {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse.shelves);
      };

      client.listShelves(request, (err, response) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse.shelves);
        done();
      });
    });

    it('invokes listShelves with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var request = {};

      // Mock Grpc layer
      client._innerApiCalls.listShelves = mockSimpleGrpcMethod(
        request,
        null,
        error
      );

      client.listShelves(request, (err, response) => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });

  describe('deleteShelf', () => {
    it('invokes deleteShelf without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.shelfPath('[SHELF_ID]');
      var request = {
        name: formattedName,
      };

      // Mock Grpc layer
      client._innerApiCalls.deleteShelf = mockSimpleGrpcMethod(request);

      client.deleteShelf(request, err => {
        assert.ifError(err);
        done();
      });
    });

    it('invokes deleteShelf with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.shelfPath('[SHELF_ID]');
      var request = {
        name: formattedName,
      };

      // Mock Grpc layer
      client._innerApiCalls.deleteShelf = mockSimpleGrpcMethod(
        request,
        null,
        error
      );

      client.deleteShelf(request, err => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('mergeShelves', () => {
    it('invokes mergeShelves without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.shelfPath('[SHELF_ID]');
      var formattedOtherShelfName = client.shelfPath('[SHELF_ID]');
      var request = {
        name: formattedName,
        otherShelfName: formattedOtherShelfName,
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var theme = 'theme110327241';
      var internalTheme = 'internalTheme792518087';
      var expectedResponse = {
        name: name2,
        theme: theme,
        internalTheme: internalTheme,
      };

      // Mock Grpc layer
      client._innerApiCalls.mergeShelves = mockSimpleGrpcMethod(
        request,
        expectedResponse
      );

      client.mergeShelves(request, (err, response) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes mergeShelves with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.shelfPath('[SHELF_ID]');
      var formattedOtherShelfName = client.shelfPath('[SHELF_ID]');
      var request = {
        name: formattedName,
        otherShelfName: formattedOtherShelfName,
      };

      // Mock Grpc layer
      client._innerApiCalls.mergeShelves = mockSimpleGrpcMethod(
        request,
        null,
        error
      );

      client.mergeShelves(request, (err, response) => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });

  describe('createBook', () => {
    it('invokes createBook without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.shelfPath('[SHELF_ID]');
      var book = {};
      var request = {
        name: formattedName,
        book: book,
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
        name: name2,
        author: author,
        title: title,
        read: read,
      };

      // Mock Grpc layer
      client._innerApiCalls.createBook = mockSimpleGrpcMethod(
        request,
        expectedResponse
      );

      client.createBook(request, (err, response) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes createBook with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.shelfPath('[SHELF_ID]');
      var book = {};
      var request = {
        name: formattedName,
        book: book,
      };

      // Mock Grpc layer
      client._innerApiCalls.createBook = mockSimpleGrpcMethod(
        request,
        null,
        error
      );

      client.createBook(request, (err, response) => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });

  describe('publishSeries', () => {
    it('invokes publishSeries without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var shelf = {};
      var books = [];
      var seriesString = 'foobar';
      var seriesUuid = {
        seriesString: seriesString,
      };
      var request = {
        shelf: shelf,
        books: books,
        seriesUuid: seriesUuid,
      };

      // Mock response
      var bookNamesElement = 'bookNamesElement1491670575';
      var bookNames = [bookNamesElement];
      var expectedResponse = {
        bookNames: bookNames,
      };

      // Mock Grpc layer
      client._innerApiCalls.publishSeries = mockSimpleGrpcMethod(
        request,
        expectedResponse
      );

      client.publishSeries(request, (err, response) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes publishSeries with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var shelf = {};
      var books = [];
      var seriesString = 'foobar';
      var seriesUuid = {
        seriesString: seriesString,
      };
      var request = {
        shelf: shelf,
        books: books,
        seriesUuid: seriesUuid,
      };

      // Mock Grpc layer
      client._innerApiCalls.publishSeries = mockSimpleGrpcMethod(
        request,
        null,
        error
      );

      client.publishSeries(request, (err, response) => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });

  describe('getBook', () => {
    it('invokes getBook without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var request = {
        name: formattedName,
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
        name: name2,
        author: author,
        title: title,
        read: read,
      };

      // Mock Grpc layer
      client._innerApiCalls.getBook = mockSimpleGrpcMethod(
        request,
        expectedResponse
      );

      client.getBook(request, (err, response) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getBook with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var request = {
        name: formattedName,
      };

      // Mock Grpc layer
      client._innerApiCalls.getBook = mockSimpleGrpcMethod(
        request,
        null,
        error
      );

      client.getBook(request, (err, response) => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });

  describe('listBooks', () => {
    it('invokes listBooks without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.shelfPath('[SHELF_ID]');
      var request = {
        name: formattedName,
      };

      // Mock response
      var nextPageToken = '';
      var booksElement = {};
      var books = [booksElement];
      var expectedResponse = {
        nextPageToken: nextPageToken,
        books: books,
      };

      // Mock Grpc layer
      client._innerApiCalls.listBooks = (actualRequest, options, callback) => {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse.books);
      };

      client.listBooks(request, (err, response) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse.books);
        done();
      });
    });

    it('invokes listBooks with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.shelfPath('[SHELF_ID]');
      var request = {
        name: formattedName,
      };

      // Mock Grpc layer
      client._innerApiCalls.listBooks = mockSimpleGrpcMethod(
        request,
        null,
        error
      );

      client.listBooks(request, (err, response) => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });

  describe('deleteBook', () => {
    it('invokes deleteBook without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var request = {
        name: formattedName,
      };

      // Mock Grpc layer
      client._innerApiCalls.deleteBook = mockSimpleGrpcMethod(request);

      client.deleteBook(request, err => {
        assert.ifError(err);
        done();
      });
    });

    it('invokes deleteBook with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var request = {
        name: formattedName,
      };

      // Mock Grpc layer
      client._innerApiCalls.deleteBook = mockSimpleGrpcMethod(
        request,
        null,
        error
      );

      client.deleteBook(request, err => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('updateBook', () => {
    it('invokes updateBook without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var book = {};
      var request = {
        name: formattedName,
        book: book,
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
        name: name2,
        author: author,
        title: title,
        read: read,
      };

      // Mock Grpc layer
      client._innerApiCalls.updateBook = mockSimpleGrpcMethod(
        request,
        expectedResponse
      );

      client.updateBook(request, (err, response) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes updateBook with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var book = {};
      var request = {
        name: formattedName,
        book: book,
      };

      // Mock Grpc layer
      client._innerApiCalls.updateBook = mockSimpleGrpcMethod(
        request,
        null,
        error
      );

      client.updateBook(request, (err, response) => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });

  describe('moveBook', () => {
    it('invokes moveBook without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var formattedOtherShelfName = client.shelfPath('[SHELF_ID]');
      var request = {
        name: formattedName,
        otherShelfName: formattedOtherShelfName,
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
        name: name2,
        author: author,
        title: title,
        read: read,
      };

      // Mock Grpc layer
      client._innerApiCalls.moveBook = mockSimpleGrpcMethod(
        request,
        expectedResponse
      );

      client.moveBook(request, (err, response) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes moveBook with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var formattedOtherShelfName = client.shelfPath('[SHELF_ID]');
      var request = {
        name: formattedName,
        otherShelfName: formattedOtherShelfName,
      };

      // Mock Grpc layer
      client._innerApiCalls.moveBook = mockSimpleGrpcMethod(
        request,
        null,
        error
      );

      client.moveBook(request, (err, response) => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });

  describe('listStrings', () => {
    it('invokes listStrings without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var request = {};

      // Mock response
      var nextPageToken = '';
      var stringsElement = 'stringsElement474465855';
      var strings = [stringsElement];
      var expectedResponse = {
        nextPageToken: nextPageToken,
        strings: strings,
      };

      // Mock Grpc layer
      client._innerApiCalls.listStrings = (actualRequest, options, callback) => {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse.strings);
      };

      client.listStrings(request, (err, response) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse.strings);
        done();
      });
    });

    it('invokes listStrings with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var request = {};

      // Mock Grpc layer
      client._innerApiCalls.listStrings = mockSimpleGrpcMethod(
        request,
        null,
        error
      );

      client.listStrings(request, (err, response) => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });

  describe('addComments', () => {
    it('invokes addComments without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var comment = '95';
      var stage = 'UNSET';
      var alignment = 'CHAR';
      var commentsElement = {
        comment: comment,
        stage: stage,
        alignment: alignment,
      };
      var comments = [commentsElement];
      var request = {
        name: formattedName,
        comments: comments,
      };

      // Mock Grpc layer
      client._innerApiCalls.addComments = mockSimpleGrpcMethod(request);

      client.addComments(request, err => {
        assert.ifError(err);
        done();
      });
    });

    it('invokes addComments with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var comment = '95';
      var stage = 'UNSET';
      var alignment = 'CHAR';
      var commentsElement = {
        comment: comment,
        stage: stage,
        alignment: alignment,
      };
      var comments = [commentsElement];
      var request = {
        name: formattedName,
        comments: comments,
      };

      // Mock Grpc layer
      client._innerApiCalls.addComments = mockSimpleGrpcMethod(
        request,
        null,
        error
      );

      client.addComments(request, err => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('getBookFromArchive', () => {
    it('invokes getBookFromArchive without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.archivedBookPath('[ARCHIVE_PATH]', '[BOOK_ID]');
      var request = {
        name: formattedName,
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
        name: name2,
        author: author,
        title: title,
        read: read,
      };

      // Mock Grpc layer
      client._innerApiCalls.getBookFromArchive = mockSimpleGrpcMethod(
        request,
        expectedResponse
      );

      client.getBookFromArchive(request, (err, response) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getBookFromArchive with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.archivedBookPath('[ARCHIVE_PATH]', '[BOOK_ID]');
      var request = {
        name: formattedName,
      };

      // Mock Grpc layer
      client._innerApiCalls.getBookFromArchive = mockSimpleGrpcMethod(
        request,
        null,
        error
      );

      client.getBookFromArchive(request, (err, response) => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });

  describe('getBookFromAnywhere', () => {
    it('invokes getBookFromAnywhere without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var formattedAltBookName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var request = {
        name: formattedName,
        altBookName: formattedAltBookName,
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
        name: name2,
        author: author,
        title: title,
        read: read,
      };

      // Mock Grpc layer
      client._innerApiCalls.getBookFromAnywhere = mockSimpleGrpcMethod(
        request,
        expectedResponse
      );

      client.getBookFromAnywhere(request, (err, response) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getBookFromAnywhere with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var formattedAltBookName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var request = {
        name: formattedName,
        altBookName: formattedAltBookName,
      };

      // Mock Grpc layer
      client._innerApiCalls.getBookFromAnywhere = mockSimpleGrpcMethod(
        request,
        null,
        error
      );

      client.getBookFromAnywhere(request, (err, response) => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });

  describe('getBookFromAbsolutelyAnywhere', () => {
    it('invokes getBookFromAbsolutelyAnywhere without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var request = {
        name: formattedName,
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
        name: name2,
        author: author,
        title: title,
        read: read,
      };

      // Mock Grpc layer
      client._innerApiCalls.getBookFromAbsolutelyAnywhere = mockSimpleGrpcMethod(
        request,
        expectedResponse
      );

      client.getBookFromAbsolutelyAnywhere(request, (err, response) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getBookFromAbsolutelyAnywhere with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var request = {
        name: formattedName,
      };

      // Mock Grpc layer
      client._innerApiCalls.getBookFromAbsolutelyAnywhere = mockSimpleGrpcMethod(
        request,
        null,
        error
      );

      client.getBookFromAbsolutelyAnywhere(request, (err, response) => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });

  describe('updateBookIndex', () => {
    it('invokes updateBookIndex without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var indexName = 'default index';
      var indexMapItem = 'indexMapItem1918721251';
      var indexMap = {'default_key' : indexMapItem,};
      var request = {
        name: formattedName,
        indexName: indexName,
        indexMap: indexMap,
      };

      // Mock Grpc layer
      client._innerApiCalls.updateBookIndex = mockSimpleGrpcMethod(request);

      client.updateBookIndex(request, err => {
        assert.ifError(err);
        done();
      });
    });

    it('invokes updateBookIndex with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var indexName = 'default index';
      var indexMapItem = 'indexMapItem1918721251';
      var indexMap = {'default_key' : indexMapItem,};
      var request = {
        name: formattedName,
        indexName: indexName,
        indexMap: indexMap,
      };

      // Mock Grpc layer
      client._innerApiCalls.updateBookIndex = mockSimpleGrpcMethod(
        request,
        null,
        error
      );

      client.updateBookIndex(request, err => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('streamShelves', () => {
    it('invokes streamShelves without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var request = {};

      // Mock response
      var shelvesElement = {};
      var shelves = [shelvesElement];
      var expectedResponse = {
        shelves: shelves,
      };

      // Mock Grpc layer
      client._innerApiCalls.streamShelves = mockServerStreamingGrpcMethod(request, expectedResponse);

      var stream = client.streamShelves(request);
      stream.on('data', response => {
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
      stream.on('error', err => {
        done(err);
      });

      stream.write();
    });

    it('invokes streamShelves with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var request = {};

      // Mock Grpc layer
      client._innerApiCalls.streamShelves = mockServerStreamingGrpcMethod(request, null, error);

      var stream = client.streamShelves(request);
      stream.on('data', response => {
        assert.fail();
      });
      stream.on('error', err =>){
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });

      stream.write();
    });
  });

  describe('streamBooks', () => {
    it('invokes streamBooks without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var name = 'name3373707';
      var request = {
        name: name,
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
        name: name2,
        author: author,
        title: title,
        read: read,
      };

      // Mock Grpc layer
      client._innerApiCalls.streamBooks = mockServerStreamingGrpcMethod(request, expectedResponse);

      var stream = client.streamBooks(request);
      stream.on('data', response => {
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
      stream.on('error', err => {
        done(err);
      });

      stream.write();
    });

    it('invokes streamBooks with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var name = 'name3373707';
      var request = {
        name: name,
      };

      // Mock Grpc layer
      client._innerApiCalls.streamBooks = mockServerStreamingGrpcMethod(request, null, error);

      var stream = client.streamBooks(request);
      stream.on('data', response => {
        assert.fail();
      });
      stream.on('error', err =>){
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });

      stream.write();
    });
  });

  describe('discussBook', () => {
    it('invokes discussBook without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var name = 'name3373707';
      var request = {
        name: name,
      };

      // Mock response
      var userName = 'userName339340927';
      var comment = '95';
      var expectedResponse = {
        userName: userName,
        comment: comment,
      };

      // Mock Grpc layer
      client._innerApiCalls.discussBook = mockBidiStreamingGrpcMethod(request, expectedResponse);

      var stream = client.discussBook().on('data', response => {
        assert.deepStrictEqual(response, expectedResponse);
        done();
      }).on('error', err => {
        done(err);
      });

      stream.write(request);
    });

    it('invokes discussBook with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var name = 'name3373707';
      var request = {
        name: name,
      };

      // Mock Grpc layer
      client._innerApiCalls.discussBook = mockBidiStreamingGrpcMethod(request, null, error);

      var stream = client.discussBook().on('data', response => {
        assert.fail();
      }).on('error', err => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });

      stream.write(request);
    });
  });

  describe('findRelatedBooks', () => {
    it('invokes findRelatedBooks without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var namesElement = 'namesElement-249113339';
      var names = [namesElement];
      var shelves = [];
      var request = {
        names: names,
        shelves: shelves,
      };

      // Mock response
      var nextPageToken = '';
      var namesElement2 = 'namesElement21120252792';
      var names2 = [namesElement2];
      var expectedResponse = {
        nextPageToken: nextPageToken,
        names: names2,
      };

      // Mock Grpc layer
      client._innerApiCalls.findRelatedBooks = (actualRequest, options, callback) => {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse.names);
      };

      client.findRelatedBooks(request, (err, response) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse.names);
        done();
      });
    });

    it('invokes findRelatedBooks with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var namesElement = 'namesElement-249113339';
      var names = [namesElement];
      var shelves = [];
      var request = {
        names: names,
        shelves: shelves,
      };

      // Mock Grpc layer
      client._innerApiCalls.findRelatedBooks = mockSimpleGrpcMethod(
        request,
        null,
        error
      );

      client.findRelatedBooks(request, (err, response) => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });

  describe('addTag', () => {
    it('invokes addTag without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedResource = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var tag = 'tag114586';
      var request = {
        resource: formattedResource,
        tag: tag,
      };

      // Mock response
      var expectedResponse = {};

      // Mock Grpc layer
      client._innerApiCalls.addTag = mockSimpleGrpcMethod(
        request,
        expectedResponse
      );

      client.addTag(request, (err, response) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes addTag with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedResource = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var tag = 'tag114586';
      var request = {
        resource: formattedResource,
        tag: tag,
      };

      // Mock Grpc layer
      client._innerApiCalls.addTag = mockSimpleGrpcMethod(
        request,
        null,
        error
      );

      client.addTag(request, (err, response) => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });

  describe('addLabel', () => {
    it('invokes addLabel without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedResource = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var label = 'label102727412';
      var request = {
        resource: formattedResource,
        label: label,
      };

      // Mock response
      var expectedResponse = {};

      // Mock Grpc layer
      client._innerApiCalls.addLabel = mockSimpleGrpcMethod(
        request,
        expectedResponse
      );

      client.addLabel(request, (err, response) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes addLabel with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedResource = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var label = 'label102727412';
      var request = {
        resource: formattedResource,
        label: label,
      };

      // Mock Grpc layer
      client._innerApiCalls.addLabel = mockSimpleGrpcMethod(
        request,
        null,
        error
      );

      client.addLabel(request, (err, response) => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });

  describe('getBigBook', function() {
    it('invokes getBigBook without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var request = {
        name: formattedName,
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
        name: name2,
        author: author,
        title: title,
        read: read,
      };

      // Mock Grpc layer
      client._innerApiCalls.getBigBook = mockLongRunningGrpcMethod(request, expectedResponse);

      client.getBigBook(request).then(responses => {
        var operation = responses[0];
        return operation.promise();
      }).then(responses => {
        assert.deepStrictEqual(responses[0], expectedResponse);
        done();
      }).catch(err => {
        done(err);
      });
    });

    it('invokes getBigBook with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var request = {
        name: formattedName,
      };

      // Mock Grpc layer
      client._innerApiCalls.getBigBook = mockLongRunningGrpcMethod(request, null, error);

      client.getBigBook(request).then(responses => {
        var operation = responses[0];
        return operation.promise();
      }).then(responses => {
        assert.fail();
      }).catch(err => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });

    it('has longrunning decoder functions', () => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert(client._descriptors.longrunning.getBigBook.responseDecoder instanceof Function);
      assert(client._descriptors.longrunning.getBigBook.metadataDecoder instanceof Function);
    });
  });

  describe('getBigNothing', function() {
    it('invokes getBigNothing without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var request = {
        name: formattedName,
      };

      // Mock response
      var expectedResponse = {};

      // Mock Grpc layer
      client._innerApiCalls.getBigNothing = mockLongRunningGrpcMethod(request, expectedResponse);

      client.getBigNothing(request).then(responses => {
        var operation = responses[0];
        return operation.promise();
      }).then(responses => {
        assert.deepStrictEqual(responses[0], expectedResponse);
        done();
      }).catch(err => {
        done(err);
      });
    });

    it('invokes getBigNothing with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var formattedName = client.bookPath('[SHELF_ID]', '[BOOK_ID]');
      var request = {
        name: formattedName,
      };

      // Mock Grpc layer
      client._innerApiCalls.getBigNothing = mockLongRunningGrpcMethod(request, null, error);

      client.getBigNothing(request).then(responses => {
        var operation = responses[0];
        return operation.promise();
      }).then(responses => {
        assert.fail();
      }).catch(err => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });

    it('has longrunning decoder functions', () => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });
      assert(client._descriptors.longrunning.getBigNothing.responseDecoder instanceof Function);
      assert(client._descriptors.longrunning.getBigNothing.metadataDecoder instanceof Function);
    });
  });

  describe('testOptionalRequiredFlatteningParams', () => {
    it('invokes testOptionalRequiredFlatteningParams without error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var requiredSingularInt32 = -72313594;
      var requiredSingularInt64 = -72313499;
      var requiredSingularFloat = -7514705.0;
      var requiredSingularDouble = 1.9111005E8;
      var requiredSingularBool = true;
      var requiredSingularEnum = 'ZERO';
      var requiredSingularString = 'requiredSingularString-1949894503';
      var requiredSingularBytes = '-29';
      var requiredSingularMessage = {};
      var requiredSingularResourceName = 'requiredSingularResourceName-1701575020';
      var requiredSingularResourceNameOneof = 'requiredSingularResourceNameOneof-25303726';
      var requiredSingularFixed32 = 720656715;
      var requiredSingularFixed64 = 720656810;
      var requiredRepeatedInt32 = [];
      var requiredRepeatedInt64 = [];
      var requiredRepeatedFloat = [];
      var requiredRepeatedDouble = [];
      var requiredRepeatedBool = [];
      var requiredRepeatedEnum = [];
      var requiredRepeatedString = [];
      var requiredRepeatedBytes = [];
      var requiredRepeatedMessage = [];
      var formattedRequiredRepeatedResourceName = [];
      var formattedRequiredRepeatedResourceNameOneof = [];
      var requiredRepeatedFixed32 = [];
      var requiredRepeatedFixed64 = [];
      var requiredMap = {};
      var request = {
        requiredSingularInt32: requiredSingularInt32,
        requiredSingularInt64: requiredSingularInt64,
        requiredSingularFloat: requiredSingularFloat,
        requiredSingularDouble: requiredSingularDouble,
        requiredSingularBool: requiredSingularBool,
        requiredSingularEnum: requiredSingularEnum,
        requiredSingularString: requiredSingularString,
        requiredSingularBytes: requiredSingularBytes,
        requiredSingularMessage: requiredSingularMessage,
        requiredSingularResourceName: requiredSingularResourceName,
        requiredSingularResourceNameOneof: requiredSingularResourceNameOneof,
        requiredSingularFixed32: requiredSingularFixed32,
        requiredSingularFixed64: requiredSingularFixed64,
        requiredRepeatedInt32: requiredRepeatedInt32,
        requiredRepeatedInt64: requiredRepeatedInt64,
        requiredRepeatedFloat: requiredRepeatedFloat,
        requiredRepeatedDouble: requiredRepeatedDouble,
        requiredRepeatedBool: requiredRepeatedBool,
        requiredRepeatedEnum: requiredRepeatedEnum,
        requiredRepeatedString: requiredRepeatedString,
        requiredRepeatedBytes: requiredRepeatedBytes,
        requiredRepeatedMessage: requiredRepeatedMessage,
        requiredRepeatedResourceName: formattedRequiredRepeatedResourceName,
        requiredRepeatedResourceNameOneof: formattedRequiredRepeatedResourceNameOneof,
        requiredRepeatedFixed32: requiredRepeatedFixed32,
        requiredRepeatedFixed64: requiredRepeatedFixed64,
        requiredMap: requiredMap,
      };

      // Mock response
      var expectedResponse = {};

      // Mock Grpc layer
      client._innerApiCalls.testOptionalRequiredFlatteningParams = mockSimpleGrpcMethod(
        request,
        expectedResponse
      );

      client.testOptionalRequiredFlatteningParams(request, (err, response) => {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes testOptionalRequiredFlatteningParams with error', done => {
      var client = new libraryModule.v1.LibraryServiceClient({
        credentials: {client_email: 'bogus', private_key: 'bogus'},
        projectId: 'bogus',
      });

      // Mock request
      var requiredSingularInt32 = -72313594;
      var requiredSingularInt64 = -72313499;
      var requiredSingularFloat = -7514705.0;
      var requiredSingularDouble = 1.9111005E8;
      var requiredSingularBool = true;
      var requiredSingularEnum = 'ZERO';
      var requiredSingularString = 'requiredSingularString-1949894503';
      var requiredSingularBytes = '-29';
      var requiredSingularMessage = {};
      var requiredSingularResourceName = 'requiredSingularResourceName-1701575020';
      var requiredSingularResourceNameOneof = 'requiredSingularResourceNameOneof-25303726';
      var requiredSingularFixed32 = 720656715;
      var requiredSingularFixed64 = 720656810;
      var requiredRepeatedInt32 = [];
      var requiredRepeatedInt64 = [];
      var requiredRepeatedFloat = [];
      var requiredRepeatedDouble = [];
      var requiredRepeatedBool = [];
      var requiredRepeatedEnum = [];
      var requiredRepeatedString = [];
      var requiredRepeatedBytes = [];
      var requiredRepeatedMessage = [];
      var formattedRequiredRepeatedResourceName = [];
      var formattedRequiredRepeatedResourceNameOneof = [];
      var requiredRepeatedFixed32 = [];
      var requiredRepeatedFixed64 = [];
      var requiredMap = {};
      var request = {
        requiredSingularInt32: requiredSingularInt32,
        requiredSingularInt64: requiredSingularInt64,
        requiredSingularFloat: requiredSingularFloat,
        requiredSingularDouble: requiredSingularDouble,
        requiredSingularBool: requiredSingularBool,
        requiredSingularEnum: requiredSingularEnum,
        requiredSingularString: requiredSingularString,
        requiredSingularBytes: requiredSingularBytes,
        requiredSingularMessage: requiredSingularMessage,
        requiredSingularResourceName: requiredSingularResourceName,
        requiredSingularResourceNameOneof: requiredSingularResourceNameOneof,
        requiredSingularFixed32: requiredSingularFixed32,
        requiredSingularFixed64: requiredSingularFixed64,
        requiredRepeatedInt32: requiredRepeatedInt32,
        requiredRepeatedInt64: requiredRepeatedInt64,
        requiredRepeatedFloat: requiredRepeatedFloat,
        requiredRepeatedDouble: requiredRepeatedDouble,
        requiredRepeatedBool: requiredRepeatedBool,
        requiredRepeatedEnum: requiredRepeatedEnum,
        requiredRepeatedString: requiredRepeatedString,
        requiredRepeatedBytes: requiredRepeatedBytes,
        requiredRepeatedMessage: requiredRepeatedMessage,
        requiredRepeatedResourceName: formattedRequiredRepeatedResourceName,
        requiredRepeatedResourceNameOneof: formattedRequiredRepeatedResourceNameOneof,
        requiredRepeatedFixed32: requiredRepeatedFixed32,
        requiredRepeatedFixed64: requiredRepeatedFixed64,
        requiredMap: requiredMap,
      };

      // Mock Grpc layer
      client._innerApiCalls.testOptionalRequiredFlatteningParams = mockSimpleGrpcMethod(
        request,
        null,
        error
      );

      client.testOptionalRequiredFlatteningParams(request, (err, response) => {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        assert(typeof response === 'undefined');
        done();
      });
    });
  });

});

function mockSimpleGrpcMethod(expectedRequest, response, error) {
  return function(actualRequest, options, callback) {
    assert.deepStrictEqual(actualRequest, expectedRequest);
    if (error) {
      callback(error);
    } else if (response) {
      callback(null, response);
    } else {
      callback(null);
    }
  };
}

function mockServerStreamingGrpcMethod(expectedRequest, response, error) {
  return actualRequest => {
    assert.deepStrictEqual(actualRequest, expectedRequest);
    var mockStream = through2.obj((chunk, enc, callback) => {
      if (error) {
        callback(error);
      }
      else {
        callback(null, response);
      }
    });
    return mockStream;
  };
}

function mockBidiStreamingGrpcMethod(expectedRequest, response, error) {
  return () => {
    var mockStream = through2.obj((chunk, enc, callback) => {
      assert.deepStrictEqual(chunk, expectedRequest);
      if (error) {
        callback(error);
      }
      else {
        callback(null, response);
      }
    });
    return mockStream;
  }
}

function mockLongRunningGrpcMethod(expectedRequest, response, error) {
  return request => {
    assert.deepStrictEqual(request, expectedRequest);
    var mockOperation = {
      promise: function() {
        return new Promise((resolve, reject) => {
          if (error) {
            reject(error);
          }
          else {
            resolve([response]);
          }
        });
      }
    };
    return Promise.resolve([mockOperation]);
  };
}

