
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Billing API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudbilling
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudbilling/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, cloudbilling.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudbillingService, err := cloudbilling.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the billing account to retrieve. For example,
  // `billingAccounts/012345-567890-ABCDEF`.
  name := "billingAccounts/{MY-BILLINGACCOUNT}"
  // TODO: Change placeholder value above.

  resp, err := cloudbillingService.BillingAccounts.Get(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Billing API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudbilling
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudbilling/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, cloudbilling.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudbillingService, err := cloudbilling.New(c)
  if err != nil {
    log.Fatal(err)
  }


  req := cloudbillingService.BillingAccounts.List()
  if err := req.Pages(ctx, func(page *cloudbilling.ListBillingAccountsResponse) error {
    for _, billingAccount := range page.BillingAccounts {
      // TODO: Change code below to process each `billingAccount` resource:
      fmt.Printf("%#v\n", billingAccount)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Billing API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudbilling
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudbilling/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, cloudbilling.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudbillingService, err := cloudbilling.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the billing account associated with the projects that you want to list. For
  // example, `billingAccounts/012345-567890-ABCDEF`.
  name := "billingAccounts/{MY-BILLINGACCOUNT}"
  // TODO: Change placeholder value above.

  req := cloudbillingService.BillingAccounts.Projects.List(name)
  if err := req.Pages(ctx, func(page *cloudbilling.ListProjectBillingInfoResponse) error {
    for _, projectBillingInfo := range page.ProjectBillingInfo {
      // TODO: Change code below to process each `projectBillingInfo` resource:
      fmt.Printf("%#v\n", projectBillingInfo)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Billing API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudbilling
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudbilling/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, cloudbilling.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudbillingService, err := cloudbilling.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the project for which billing information is retrieved. For example,
  // `projects/tokyo-rain-123`.
  name := "projects/{MY-PROJECT}"
  // TODO: Change placeholder value above.

  resp, err := cloudbillingService.Projects.GetBillingInfo(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Billing API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudbilling
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudbilling/v1"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, cloudbilling.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  cloudbillingService, err := cloudbilling.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The resource name of the project associated with the billing information that you want to update.
  // For example, `projects/tokyo-rain-123`.
  name := "projects/{MY-PROJECT}"
  // TODO: Change placeholder value above.

  rb := cloudbilling.ProjectBillingInfo{
    // TODO: Add desired fields of the request body.
  }

  resp, err := cloudbillingService.Projects.UpdateBillingInfo(name, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
