
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Billing API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudbilling
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudbilling/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudbilling/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudbilling.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudbilling.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The resource name of the billing account to retrieve. For example,
  // `billingAccounts/012345-567890-ABCDEF`.
  name := "billingAccounts/{MY-BILLINGACCOUNT}" // TODO: Update placeholder value.

  resp, err := c.BillingAccounts.Get(name).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Billing API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudbilling
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudbilling/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudbilling/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudbilling.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudbilling.New(hc)
  if err != nil {
    // TODO: Handle error.
  }




  call := c.BillingAccounts.List()
  if err := call.Pages(ctx, func(page *cloudbilling.ListBillingAccountsResponse) error {
    for _, v := range page.BillingAccounts {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Billing API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudbilling
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudbilling/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudbilling/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudbilling.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudbilling.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The resource name of the billing account associated with the projects that you want to list. For
  // example, `billingAccounts/012345-567890-ABCDEF`.
  name := "billingAccounts/{MY-BILLINGACCOUNT}" // TODO: Update placeholder value.


  call := c.BillingAccounts.Projects.List(name)
  if err := call.Pages(ctx, func(page *cloudbilling.ListProjectBillingInfoResponse) error {
    for _, v := range page.ProjectBillingInfo {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Billing API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudbilling
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudbilling/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudbilling/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudbilling.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudbilling.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The resource name of the project for which billing information is retrieved. For example,
  // `projects/tokyo-rain-123`.
  name := "projects/{MY-PROJECT}" // TODO: Update placeholder value.

  resp, err := c.Projects.GetBillingInfo(name).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Billing API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudbilling
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/cloudbilling/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudbilling/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, cloudbilling.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := cloudbilling.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The resource name of the project associated with the billing information that you want to update.
  // For example, `projects/tokyo-rain-123`.
  name := "projects/{MY-PROJECT}" // TODO: Update placeholder value.

  resp, err := c.Projects.UpdateBillingInfo(name, &cloudbilling.ProjectBillingInfo{
                                              // TODO: Fill required fields.
                                            }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
