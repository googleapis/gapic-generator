
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Billing API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudbilling
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudbilling/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, cloudbilling.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the cloudbilling service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := cloudbilling.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * The resource name of the billing account to retrieve. For example,
  //   `billingAccounts/012345-567890-ABCDEF`.
  name := "billingAccounts/{MY-BILLINGACCOUNT}"

  res, err := service.BillingAccounts.Get(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Billing API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudbilling
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudbilling/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, cloudbilling.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the cloudbilling service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := cloudbilling.New(client)
  if err != nil {
    log.Fatal(err)
  }


  req := service.BillingAccounts.List()
  if err := req.Pages(ctx, func(page *cloudbilling.ListBillingAccountsResponse) error {
    for _, billingAccount := range page.BillingAccounts {
      // TODO: Change code below to process each `billingAccount` resource:
      out, err := json.MarshalIndent(billingAccount, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Billing API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudbilling
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudbilling/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, cloudbilling.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the cloudbilling service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := cloudbilling.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * The resource name of the billing account associated with the projects that you want to list. For
  //   example, `billingAccounts/012345-567890-ABCDEF`.
  name := "billingAccounts/{MY-BILLINGACCOUNT}"

  req := service.BillingAccounts.Projects.List(name)
  if err := req.Pages(ctx, func(page *cloudbilling.ListProjectBillingInfoResponse) error {
    for _, projectBillingInfo := range page.ProjectBillingInfo {
      // TODO: Change code below to process each `projectBillingInfo` resource:
      out, err := json.MarshalIndent(projectBillingInfo, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Billing API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudbilling
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudbilling/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, cloudbilling.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the cloudbilling service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := cloudbilling.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `GetBillingInfo` method:

  // * The resource name of the project for which billing information is retrieved. For example,
  //   `projects/tokyo-rain-123`.
  name := "projects/{MY-PROJECT}"

  res, err := service.Projects.GetBillingInfo(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Billing API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudbilling
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/cloudbilling/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, cloudbilling.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the cloudbilling service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := cloudbilling.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `UpdateBillingInfo` method:

  // * The resource name of the project associated with the billing information that you want to update.
  //   For example, `projects/tokyo-rain-123`.
  name := "projects/{MY-PROJECT}"

  projectBillingInfoBody := cloudbilling.ProjectBillingInfo{
    // TODO: Add desired fields of the `projectBillingInfoBody` variable.
  }

  res, err := service.Projects.UpdateBillingInfo(name, &projectBillingInfoBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
