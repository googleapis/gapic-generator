============== file: lib/library.rb ==============
# Copyright 2017, Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require "google/gax"
require "pathname"

# rubocop:disable LineLength

##
# # Ruby Client for Google Example Library API ([Alpha](https://github.com/GoogleCloudPlatform/google-cloud-ruby#versioning))
#
# [Google Example Library API][Product Documentation]:
# A simple Google Example Library API.
# - [Product Documentation][]
#
# ## Quick Start
# In order to use this library, you first need to go through the following
# steps:
#
# 1. [Select or create a Cloud Platform project.](https://console.cloud.google.com/project)
# 2. [Enable the Google Example Library API.](https://console.cloud.google.com/apis/api/library)
# 3. [Setup Authentication.](https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/google-cloud/master/guides/authentication)
#
# ### Preview
# #### LibraryServiceClient
# ```rb
# require "library"
#
# library_service_client = Library.new
# formatted_name = Library::V1::LibraryServiceClient.book_path("testShelf-" + Time.new.to_i.to_s, project_id)
# rating = :GOOD
# book = { rating: rating }
# response = library_service_client.update_book(formatted_name, book)
# ```
#
# ### Next Steps
# - Read the [Google Example Library API Product documentation][Product Documentation]
#   to learn more about the product and see How-to Guides.
# - View this [repository's main README](https://github.com/GoogleCloudPlatform/google-cloud-ruby/blob/master/README.md)
#   to see the full list of Cloud APIs that we cover.
#
# [Product Documentation]: https://cloud.google.com/library
#
#
module Library
  # rubocop:enable LineLength

  FILE_DIR = File.realdirpath(Pathname.new(__FILE__).join("..").join("library"))

  AVAILABLE_VERSIONS = Dir["#{FILE_DIR}/*"]
    .select { |file| File.directory?(file) }
    .select { |dir| Google::Gax::VERSION_MATCHER.match(File.basename(dir)) }
    .select { |dir| File.exist?(dir + ".rb") }
    .map { |dir| File.basename(dir) }

  ##
  # This API represents a simple digital library.  It lets you manage Shelf
  # resources and Book resources in the library. It defines the following
  # resource model:
  #
  # * The API has a collection of {Google::Example::Library::V1::Shelf Shelf}
  #   resources, named +bookShelves/*+
  #
  # * Each Shelf has a collection of {Google::Example::Library::V1::Book Book}
  #   resources, named +bookShelves/*/books/*+
  #
  # Check out [cloud docs!](https://cloud.google.com/library/example/link).
  # This is [not a cloud link](http://www.google.com).
  #
  # Service comment may include special characters: <>&"+'@.
  #
  # @param version [Symbol, String]
  #   The major version of the service to be used. By default :v1
  #   is used.
  # @overload
  #   @param credentials [Google::Gax::Credentials, String, Hash, GRPC::Core::Channel, GRPC::Core::ChannelCredentials, Proc]
  #     Provides the means for authenticating requests made by the client. This parameter can
  #     be many types.
  #     A `Google::Gax::Credentials` uses a the properties of its represented keyfile for
  #     authenticating requests made by this client.
  #     A `String` will be treated as the path to the keyfile to be used for the construction of
  #     credentials for this client.
  #     A `Hash` will be treated as the contents of a keyfile to be used for the construction of
  #     credentials for this client.
  #     A `GRPC::Core::Channel` will be used to make calls through.
  #     A `GRPC::Core::ChannelCredentials` for the setting up the RPC client. The channel credentials
  #     should already be composed with a `GRPC::Core::CallCredentials` object.
  #     A `Proc` will be used as an updater_proc for the Grpc channel. The proc transforms the
  #     metadata for requests, generally, to give OAuth credentials.
  #   @param scopes [Array<String>]
  #     The OAuth scopes for this service. This parameter is ignored if
  #     an updater_proc is supplied.
  #   @param client_config [Hash]
  #     A Hash for call options for each method. See
  #     Google::Gax#construct_settings for the structure of
  #     this data. Falls back to the default config if not specified
  #     or the specified config is missing data points.
  #   @param timeout [Numeric]
  #     The default timeout, in seconds, for calls made through this client.
  def self.new(*args, version: :v1, **kwargs)
    unless AVAILABLE_VERSIONS.include?(version.to_s.downcase)
      raise "The version: #{version} is not available. The available versions " \
        "are: [#{AVAILABLE_VERSIONS.join(", ")}]"
    end

    require "#{FILE_DIR}/#{version.to_s.downcase}"
    version_module = Library
      .constants
      .select {|sym| sym.to_s.downcase == version.to_s.downcase}
      .first
    Library.const_get(version_module).new(*args, **kwargs)
  end
end

============== file: lib/library/v1.rb ==============
# Copyright 2017, Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require "library/v1/library_service_client"

# rubocop:disable LineLength

##
# # Ruby Client for Google Example Library API ([Alpha](https://github.com/GoogleCloudPlatform/google-cloud-ruby#versioning))
#
# [Google Example Library API][Product Documentation]:
# A simple Google Example Library API.
# - [Product Documentation][]
#
# ## Quick Start
# In order to use this library, you first need to go through the following
# steps:
#
# 1. [Select or create a Cloud Platform project.](https://console.cloud.google.com/project)
# 2. [Enable the Google Example Library API.](https://console.cloud.google.com/apis/api/library)
# 3. [Setup Authentication.](https://googlecloudplatform.github.io/google-cloud-ruby/#/docs/google-cloud/master/guides/authentication)
#
# ### Preview
# #### LibraryServiceClient
# ```rb
# require "library/v1"
#
# library_service_client = Library::V1.new
# formatted_name = Library::V1::LibraryServiceClient.book_path("testShelf-" + Time.new.to_i.to_s, project_id)
# rating = :GOOD
# book = { rating: rating }
# response = library_service_client.update_book(formatted_name, book)
# ```
#
# ### Next Steps
# - Read the [Google Example Library API Product documentation][Product Documentation]
#   to learn more about the product and see How-to Guides.
# - View this [repository's main README](https://github.com/GoogleCloudPlatform/google-cloud-ruby/blob/master/README.md)
#   to see the full list of Cloud APIs that we cover.
#
# [Product Documentation]: https://cloud.google.com/library
#
#
module Library
  module V1
    # rubocop:enable LineLength

    ##
    # This API represents a simple digital library.  It lets you manage Shelf
    # resources and Book resources in the library. It defines the following
    # resource model:
    #
    # * The API has a collection of {Google::Example::Library::V1::Shelf Shelf}
    #   resources, named +bookShelves/*+
    #
    # * Each Shelf has a collection of {Google::Example::Library::V1::Book Book}
    #   resources, named +bookShelves/*/books/*+
    #
    # Check out [cloud docs!](https://cloud.google.com/library/example/link).
    # This is [not a cloud link](http://www.google.com).
    #
    # Service comment may include special characters: <>&"+'@.
    #
    # @param credentials [Google::Gax::Credentials, String, Hash, GRPC::Core::Channel, GRPC::Core::ChannelCredentials, Proc]
    #   Provides the means for authenticating requests made by the client. This parameter can
    #   be many types.
    #   A `Google::Gax::Credentials` uses a the properties of its represented keyfile for
    #   authenticating requests made by this client.
    #   A `String` will be treated as the path to the keyfile to be used for the construction of
    #   credentials for this client.
    #   A `Hash` will be treated as the contents of a keyfile to be used for the construction of
    #   credentials for this client.
    #   A `GRPC::Core::Channel` will be used to make calls through.
    #   A `GRPC::Core::ChannelCredentials` for the setting up the RPC client. The channel credentials
    #   should already be composed with a `GRPC::Core::CallCredentials` object.
    #   A `Proc` will be used as an updater_proc for the Grpc channel. The proc transforms the
    #   metadata for requests, generally, to give OAuth credentials.
    # @param scopes [Array<String>]
    #   The OAuth scopes for this service. This parameter is ignored if
    #   an updater_proc is supplied.
    # @param client_config [Hash]
    #   A Hash for call options for each method. See
    #   Google::Gax#construct_settings for the structure of
    #   this data. Falls back to the default config if not specified
    #   or the specified config is missing data points.
    # @param timeout [Numeric]
    #   The default timeout, in seconds, for calls made through this client.
    def self.new \
        service_path: nil,
        port: nil,
        channel: nil,
        chan_creds: nil,
        updater_proc: nil,
        credentials: nil,
        scopes: nil,
        client_config: nil,
        timeout: nil,
        lib_name: nil,
        lib_version: nil
      kwargs = {
        service_path: service_path,
        port: port,
        channel: channel,
        chan_creds: chan_creds,
        updater_proc: updater_proc,
        credentials: credentials,
        scopes: scopes,
        client_config: client_config,
        timeout: timeout,
        lib_name: lib_name,
        lib_version: lib_version
      }.select { |_, v| v != nil }
      Library::V1::LibraryServiceClient.new(**kwargs)
    end
  end
end
