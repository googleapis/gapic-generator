
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the Node.js client library and Application Default Credentials
//    library by running 'npm install googleapis --save'
var google = require('googleapis');
var clouduseraccounts = google.clouduseraccounts('beta');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

    // * Project ID for this request.
    project: "{MY-PROJECT}",

    // * Name of the Operations resource to delete.
    operation: "{MY-OPERATION}",

    // Auth client
    auth: authClient
  };

  clouduseraccounts.globalAccountsOperations.delete(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the Node.js client library and Application Default Credentials
//    library by running 'npm install googleapis --save'
var google = require('googleapis');
var clouduseraccounts = google.clouduseraccounts('beta');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'get' method:

    // * Project ID for this request.
    project: "{MY-PROJECT}",

    // * Name of the Operations resource to return.
    operation: "{MY-OPERATION}",

    // Auth client
    auth: authClient
  };

  clouduseraccounts.globalAccountsOperations.get(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the Node.js client library and Application Default Credentials
//    library by running 'npm install googleapis --save'
var google = require('googleapis');
var clouduseraccounts = google.clouduseraccounts('beta');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'list' method:

    // * Project ID for this request.
    project: "{MY-PROJECT}",

    // Auth client
    auth: authClient
  };


  var recur = function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      if (result.nextPageToken) {
        request.pageToken = result.nextPageToken;
        clouduseraccounts.globalAccountsOperations.list(request, recur);
      }
    }
  };

  clouduseraccounts.globalAccountsOperations.list(request, recur);
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the Node.js client library and Application Default Credentials
//    library by running 'npm install googleapis --save'
var google = require('googleapis');
var clouduseraccounts = google.clouduseraccounts('beta');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'addMember' method:

    // * Project ID for this request.
    project: "{MY-PROJECT}",

    // * Name of the group for this request.
    groupName: "{MY-GROUP-NAME}",

    resource: {},

    // Auth client
    auth: authClient
  };

  clouduseraccounts.groups.addMember(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the Node.js client library and Application Default Credentials
//    library by running 'npm install googleapis --save'
var google = require('googleapis');
var clouduseraccounts = google.clouduseraccounts('beta');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

    // * Project ID for this request.
    project: "{MY-PROJECT}",

    // * Name of the Group resource to delete.
    groupName: "{MY-GROUP-NAME}",

    // Auth client
    auth: authClient
  };

  clouduseraccounts.groups.delete(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the Node.js client library and Application Default Credentials
//    library by running 'npm install googleapis --save'
var google = require('googleapis');
var clouduseraccounts = google.clouduseraccounts('beta');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'get' method:

    // * Project ID for this request.
    project: "{MY-PROJECT}",

    // * Name of the Group resource to return.
    groupName: "{MY-GROUP-NAME}",

    // Auth client
    auth: authClient
  };

  clouduseraccounts.groups.get(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the Node.js client library and Application Default Credentials
//    library by running 'npm install googleapis --save'
var google = require('googleapis');
var clouduseraccounts = google.clouduseraccounts('beta');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

    // * Project ID for this request.
    project: "{MY-PROJECT}",

    resource: {},

    // Auth client
    auth: authClient
  };

  clouduseraccounts.groups.insert(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the Node.js client library and Application Default Credentials
//    library by running 'npm install googleapis --save'
var google = require('googleapis');
var clouduseraccounts = google.clouduseraccounts('beta');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'list' method:

    // * Project ID for this request.
    project: "{MY-PROJECT}",

    // Auth client
    auth: authClient
  };


  var recur = function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      if (result.nextPageToken) {
        request.pageToken = result.nextPageToken;
        clouduseraccounts.groups.list(request, recur);
      }
    }
  };

  clouduseraccounts.groups.list(request, recur);
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the Node.js client library and Application Default Credentials
//    library by running 'npm install googleapis --save'
var google = require('googleapis');
var clouduseraccounts = google.clouduseraccounts('beta');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'removeMember' method:

    // * Project ID for this request.
    project: "{MY-PROJECT}",

    // * Name of the group for this request.
    groupName: "{MY-GROUP-NAME}",

    resource: {},

    // Auth client
    auth: authClient
  };

  clouduseraccounts.groups.removeMember(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the Node.js client library and Application Default Credentials
//    library by running 'npm install googleapis --save'
var google = require('googleapis');
var clouduseraccounts = google.clouduseraccounts('beta');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'getAuthorizedKeysView' method:

    // * Project ID for this request.
    project: "{MY-PROJECT}",

    // * Name of the zone for this request.
    zone: "{MY-ZONE}"  // eg. "us-central1-f",

    // * The user account for which you want to get a list of authorized public keys.
    user: "{MY-USER}",

    // * The fully-qualified URL of the virtual machine requesting the view.
    instance: "{MY-INSTANCE}",

    // Auth client
    auth: authClient
  };

  clouduseraccounts.linux.getAuthorizedKeysView(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the Node.js client library and Application Default Credentials
//    library by running 'npm install googleapis --save'
var google = require('googleapis');
var clouduseraccounts = google.clouduseraccounts('beta');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'getLinuxAccountViews' method:

    // * Project ID for this request.
    project: "{MY-PROJECT}",

    // * Name of the zone for this request.
    zone: "{MY-ZONE}"  // eg. "us-central1-f",

    // * The fully-qualified URL of the virtual machine requesting the views.
    instance: "{MY-INSTANCE}",

    // Auth client
    auth: authClient
  };

  clouduseraccounts.linux.getLinuxAccountViews(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the Node.js client library and Application Default Credentials
//    library by running 'npm install googleapis --save'
var google = require('googleapis');
var clouduseraccounts = google.clouduseraccounts('beta');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'addPublicKey' method:

    // * Project ID for this request.
    project: "{MY-PROJECT}",

    // * Name of the user for this request.
    user: "{MY-USER}",

    resource: {},

    // Auth client
    auth: authClient
  };

  clouduseraccounts.users.addPublicKey(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the Node.js client library and Application Default Credentials
//    library by running 'npm install googleapis --save'
var google = require('googleapis');
var clouduseraccounts = google.clouduseraccounts('beta');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

    // * Project ID for this request.
    project: "{MY-PROJECT}",

    // * Name of the user resource to delete.
    user: "{MY-USER}",

    // Auth client
    auth: authClient
  };

  clouduseraccounts.users.delete(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the Node.js client library and Application Default Credentials
//    library by running 'npm install googleapis --save'
var google = require('googleapis');
var clouduseraccounts = google.clouduseraccounts('beta');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'get' method:

    // * Project ID for this request.
    project: "{MY-PROJECT}",

    // * Name of the user resource to return.
    user: "{MY-USER}",

    // Auth client
    auth: authClient
  };

  clouduseraccounts.users.get(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the Node.js client library and Application Default Credentials
//    library by running 'npm install googleapis --save'
var google = require('googleapis');
var clouduseraccounts = google.clouduseraccounts('beta');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

    // * Project ID for this request.
    project: "{MY-PROJECT}",

    resource: {},

    // Auth client
    auth: authClient
  };

  clouduseraccounts.users.insert(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the Node.js client library and Application Default Credentials
//    library by running 'npm install googleapis --save'
var google = require('googleapis');
var clouduseraccounts = google.clouduseraccounts('beta');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'list' method:

    // * Project ID for this request.
    project: "{MY-PROJECT}",

    // Auth client
    auth: authClient
  };


  var recur = function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      if (result.nextPageToken) {
        request.pageToken = result.nextPageToken;
        clouduseraccounts.users.list(request, recur);
      }
    }
  };

  clouduseraccounts.users.list(request, recur);
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Cloud User Accounts API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouduseraccounts
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the Node.js client library and Application Default Credentials
//    library by running 'npm install googleapis --save'
var google = require('googleapis');
var clouduseraccounts = google.clouduseraccounts('beta');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'removePublicKey' method:

    // * Project ID for this request.
    project: "{MY-PROJECT}",

    // * Name of the user for this request.
    user: "{MY-USER}",

    // * The fingerprint of the public key to delete. Public keys are identified by their fingerprint,
    //   which is defined by RFC4716 to be the MD5 digest of the public key.
    fingerprint: "{MY-FINGERPRINT}",

    // Auth client
    auth: authClient
  };

  clouduseraccounts.users.removePublicKey(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
