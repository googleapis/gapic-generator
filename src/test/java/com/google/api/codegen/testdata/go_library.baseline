============== file: library_service/client.go ==============
// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// EDITING INSTRUCTIONS
// This file was generated from the file
// https://github.com/googleapis/blob/master/library.proto
// and updates to that file get reflected here through a refresh process.
// For the short term, the refresh process will only be runnable by Google engineers.
// Manual additions are allowed because the refresh process performs
// a 3-way merge in order to preserve those manual additions. In order to not
// break the refresh process, only certain types of modifications are
// allowed.
//
// Only additional documentation of the doc comment is allowed.
// Please put the additional comment at the end.
//
// Additional new methods or new features can be added in additional files
// in the same directory.
//
// Happy editing!

// AUTO-GENERATED DOCUMENTATION AND SERVICE -- see instructions at the top of the file for editing.

// This API represents a simple digital library.  It lets you manage Shelf
// resources and Book resources in the library. It defines the following
// resource model:
//
// - The API has a collection of [Shelf][google.example.library.v1.Shelf]
//   resources, named ``shelves/*``
//
// - Each Shelf has a collection of [Book][google.example.library.v1.Book]
//   resources, named `shelves/*/books/*`
//
// Check out [cloud docs!](/library/example/link).
// This is [not a cloud link](http://www.google.com).
package library_service

import (
	"fmt"
	"io"
	"runtime"
	"time"

	gax "github.com/googleapis/gax-golang"
	"golang.org/x/net/context"
	google_example_library_v1 "google.golang.org/cloud/library/proto/google/example/library/v1"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/metadata"
)

const (
    gapicNameVersion = "gapic/0.1.0"
)

var (
    shelfPathTemplate = gax.MustCompilePathTemplate("shelves/{shelf}")
    bookPathTemplate = gax.MustCompilePathTemplate("shelves/{shelf}/books/{book}")
)

func defaultClientSettings() gax.ClientSettings {
    return gax.ClientSettings{
        AppName: "gax",
        AppVersion: gax.Version,
        Endpoint: "library-example.googleapis.com:443",
        Scopes: []string{
            "https://www.googleapis.com/auth/library",
            "https://www.googleapis.com/auth/cloud-platform",
        },
        CallOptions: map[string][]gax.CallOption{
            "CreateShelf": append([]gax.CallOption{withNonIdempotentRetryCodes()}, defaultRetryOptions()...),
            "GetShelf": append([]gax.CallOption{withIdempotentRetryCodes()}, defaultRetryOptions()...),
            "ListShelves": append([]gax.CallOption{withIdempotentRetryCodes()}, defaultRetryOptions()...),
            "DeleteShelf": append([]gax.CallOption{withIdempotentRetryCodes()}, defaultRetryOptions()...),
            "MergeShelves": append([]gax.CallOption{withNonIdempotentRetryCodes()}, defaultRetryOptions()...),
            "CreateBook": append([]gax.CallOption{withNonIdempotentRetryCodes()}, defaultRetryOptions()...),
            "PublishSeries": append([]gax.CallOption{withNonIdempotentRetryCodes()}, defaultRetryOptions()...),
            "GetBook": append([]gax.CallOption{withIdempotentRetryCodes()}, defaultRetryOptions()...),
            "ListBooks": append([]gax.CallOption{withIdempotentRetryCodes()}, defaultRetryOptions()...),
            "DeleteBook": append([]gax.CallOption{withIdempotentRetryCodes()}, defaultRetryOptions()...),
            "UpdateBook": append([]gax.CallOption{withIdempotentRetryCodes()}, defaultRetryOptions()...),
            "MoveBook": append([]gax.CallOption{withNonIdempotentRetryCodes()}, defaultRetryOptions()...),
            "ListStrings": append([]gax.CallOption{withIdempotentRetryCodes()}, defaultRetryOptions()...),
        },
    }
}


func withIdempotentRetryCodes() gax.CallOption {
    return gax.WithRetryCodes([]codes.Code{
        codes.DeadlineExceeded,
        codes.Unavailable,
    })
}

func withNonIdempotentRetryCodes() gax.CallOption {
    return gax.WithRetryCodes([]codes.Code{
    })
}

func defaultRetryOptions() []gax.CallOption {
    return []gax.CallOption{
        gax.WithTimeout(30*time.Second),
        gax.WithDelayTimeoutSettings(100*time.Millisecond, 1000*time.Millisecond, 1.2),
        gax.WithRPCTimeoutSettings(300*time.Millisecond, 3000*time.Millisecond, 1.3),
    }
}

// Client is a client for interacting with LibraryService.
type Client struct {
    // The connection to the service.
    conn *grpc.ClientConn

    // The gRPC API client.
    client google_example_library_v1.LibraryServiceClient

    // The map from the method name to the default call options for the method of this service.
    callOptions map[string][]gax.CallOption

    // The metadata to be sent with each request.
    metadata map[string][]string
}

// NewClient creates a new API service client.
func NewClient(ctx context.Context, opts ...gax.ClientOption) (*Client, error) {
    s := defaultClientSettings()
    for _, opt := range opts {
        opt.Resolve(&s)
    }
    conn, err := gax.DialGRPC(ctx, s)
    if err != nil {
        return nil, err
    }
    return &Client {
        conn: conn,
        client: google_example_library_v1.NewLibraryServiceClient(conn),
        callOptions: s.CallOptions,
        metadata: map[string][]string{
            "x-goog-api-client": []string{fmt.Sprintf("%s/%s %s gax/%s go/%s", s.AppName, s.AppVersion, gapicNameVersion, gax.Version, runtime.Version())},
        },
    }, nil
}

// Close closes the connection to the API service. The user should invoke this when
// the client is no longer required.
func (client *Client) Close() error {
    return client.conn.Close()
}

// Path templates.

// ShelfPath returns the path for the shelf resource.
func ShelfPath(shelf string) (string, error) {
    return shelfPathTemplate.Instantiate(map[string]string{
        "shelf": shelf,
    })
}

// BookPath returns the path for the book resource.
func BookPath(shelf string, book string) (string, error) {
    return bookPathTemplate.Instantiate(map[string]string{
        "shelf": shelf,
        "book": book,
    })
}

// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// CreateShelf creates a shelf, and returns the new Shelf.
func (client *Client) CreateShelf(ctx context.Context, req *google_example_library_v1.CreateShelfRequest, opts ...gax.CallOption) (*google_example_library_v1.Shelf, error) {
    ctx = metadata.NewContext(ctx, client.metadata)
    var callOpts []gax.CallOption
    callOpts = append(callOpts, client.callOptions["CreateShelf"]...)
    callOpts = append(callOpts, opts...)
    var resp *google_example_library_v1.Shelf
    err := gax.Invoke(ctx, func (c context.Context) error {
        var err error
        resp, err = client.client.CreateShelf(c, req)
        return err
    }, callOpts...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}


// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// GetShelf gets a shelf.
func (client *Client) GetShelf(ctx context.Context, req *google_example_library_v1.GetShelfRequest, opts ...gax.CallOption) (*google_example_library_v1.Shelf, error) {
    ctx = metadata.NewContext(ctx, client.metadata)
    var callOpts []gax.CallOption
    callOpts = append(callOpts, client.callOptions["GetShelf"]...)
    callOpts = append(callOpts, opts...)
    var resp *google_example_library_v1.Shelf
    err := gax.Invoke(ctx, func (c context.Context) error {
        var err error
        resp, err = client.client.GetShelf(c, req)
        return err
    }, callOpts...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}


// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// ListShelves lists shelves.
func (client *Client) ListShelves(ctx context.Context, req *google_example_library_v1.ListShelvesRequest, opts ...gax.CallOption) (*ShelfIterator, error) {
    ctx = metadata.NewContext(ctx, client.metadata)
    var callOpts []gax.CallOption
    callOpts = append(callOpts, client.callOptions["ListShelves"]...)
    callOpts = append(callOpts, opts...)
    atLastPage := false
    return &ShelfIterator{
        apiCall: func() (ShelfPage, error) {
            if atLastPage {
                return ShelfPage{}, io.EOF
            }
            var resp *google_example_library_v1.ListShelvesResponse
            err := gax.Invoke(ctx, func (c context.Context) error {
                var err error
                resp, err = client.client.ListShelves(c, req)
                return err
            }, callOpts...)
            if err != nil {
                return ShelfPage{}, err
            }
            if resp.NextPageToken == "" {
                atLastPage = true
            } else {
                req.PageToken = resp.NextPageToken
            }
            return ShelfPage{
                Items: resp.Shelves,
                NextPageToken: resp.NextPageToken,
            }, nil
        },
    }, nil
}


// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// DeleteShelf deletes a shelf.
func (client *Client) DeleteShelf(ctx context.Context, req *google_example_library_v1.DeleteShelfRequest, opts ...gax.CallOption) error {
    ctx = metadata.NewContext(ctx, client.metadata)
    var callOpts []gax.CallOption
    callOpts = append(callOpts, client.callOptions["DeleteShelf"]...)
    callOpts = append(callOpts, opts...)
    err := gax.Invoke(ctx, func (c context.Context) error {
        var err error
        _, err = client.client.DeleteShelf(c, req)
        return err
    }, callOpts...)
    return err
}


// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// MergeShelves merges two shelves by adding all books from the shelf named
// `other_shelf_name` to shelf `name`, and deletes
// `other_shelf_name`. Returns the updated shelf.
func (client *Client) MergeShelves(ctx context.Context, req *google_example_library_v1.MergeShelvesRequest, opts ...gax.CallOption) (*google_example_library_v1.Shelf, error) {
    ctx = metadata.NewContext(ctx, client.metadata)
    var callOpts []gax.CallOption
    callOpts = append(callOpts, client.callOptions["MergeShelves"]...)
    callOpts = append(callOpts, opts...)
    var resp *google_example_library_v1.Shelf
    err := gax.Invoke(ctx, func (c context.Context) error {
        var err error
        resp, err = client.client.MergeShelves(c, req)
        return err
    }, callOpts...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}


// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// CreateBook creates a book.
func (client *Client) CreateBook(ctx context.Context, req *google_example_library_v1.CreateBookRequest, opts ...gax.CallOption) (*google_example_library_v1.Book, error) {
    ctx = metadata.NewContext(ctx, client.metadata)
    var callOpts []gax.CallOption
    callOpts = append(callOpts, client.callOptions["CreateBook"]...)
    callOpts = append(callOpts, opts...)
    var resp *google_example_library_v1.Book
    err := gax.Invoke(ctx, func (c context.Context) error {
        var err error
        resp, err = client.client.CreateBook(c, req)
        return err
    }, callOpts...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}


// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// PublishSeries creates a series of books.
func (client *Client) PublishSeries(ctx context.Context, req *google_example_library_v1.PublishSeriesRequest, opts ...gax.CallOption) (*google_example_library_v1.PublishSeriesResponse, error) {
    ctx = metadata.NewContext(ctx, client.metadata)
    var callOpts []gax.CallOption
    callOpts = append(callOpts, client.callOptions["PublishSeries"]...)
    callOpts = append(callOpts, opts...)
    var resp *google_example_library_v1.PublishSeriesResponse
    err := gax.Invoke(ctx, func (c context.Context) error {
        var err error
        resp, err = client.client.PublishSeries(c, req)
        return err
    }, callOpts...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}


// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// GetBook gets a book.
func (client *Client) GetBook(ctx context.Context, req *google_example_library_v1.GetBookRequest, opts ...gax.CallOption) (*google_example_library_v1.Book, error) {
    ctx = metadata.NewContext(ctx, client.metadata)
    var callOpts []gax.CallOption
    callOpts = append(callOpts, client.callOptions["GetBook"]...)
    callOpts = append(callOpts, opts...)
    var resp *google_example_library_v1.Book
    err := gax.Invoke(ctx, func (c context.Context) error {
        var err error
        resp, err = client.client.GetBook(c, req)
        return err
    }, callOpts...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}


// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// ListBooks lists books in a shelf.
func (client *Client) ListBooks(ctx context.Context, req *google_example_library_v1.ListBooksRequest, opts ...gax.CallOption) (*BookIterator, error) {
    ctx = metadata.NewContext(ctx, client.metadata)
    var callOpts []gax.CallOption
    callOpts = append(callOpts, client.callOptions["ListBooks"]...)
    callOpts = append(callOpts, opts...)
    atLastPage := false
    return &BookIterator{
        apiCall: func() (BookPage, error) {
            if atLastPage {
                return BookPage{}, io.EOF
            }
            var resp *google_example_library_v1.ListBooksResponse
            err := gax.Invoke(ctx, func (c context.Context) error {
                var err error
                resp, err = client.client.ListBooks(c, req)
                return err
            }, callOpts...)
            if err != nil {
                return BookPage{}, err
            }
            if resp.NextPageToken == "" {
                atLastPage = true
            } else {
                req.PageToken = resp.NextPageToken
            }
            return BookPage{
                Items: resp.Books,
                NextPageToken: resp.NextPageToken,
            }, nil
        },
    }, nil
}


// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// DeleteBook deletes a book.
func (client *Client) DeleteBook(ctx context.Context, req *google_example_library_v1.DeleteBookRequest, opts ...gax.CallOption) error {
    ctx = metadata.NewContext(ctx, client.metadata)
    var callOpts []gax.CallOption
    callOpts = append(callOpts, client.callOptions["DeleteBook"]...)
    callOpts = append(callOpts, opts...)
    err := gax.Invoke(ctx, func (c context.Context) error {
        var err error
        _, err = client.client.DeleteBook(c, req)
        return err
    }, callOpts...)
    return err
}


// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// UpdateBook updates a book.
func (client *Client) UpdateBook(ctx context.Context, req *google_example_library_v1.UpdateBookRequest, opts ...gax.CallOption) (*google_example_library_v1.Book, error) {
    ctx = metadata.NewContext(ctx, client.metadata)
    var callOpts []gax.CallOption
    callOpts = append(callOpts, client.callOptions["UpdateBook"]...)
    callOpts = append(callOpts, opts...)
    var resp *google_example_library_v1.Book
    err := gax.Invoke(ctx, func (c context.Context) error {
        var err error
        resp, err = client.client.UpdateBook(c, req)
        return err
    }, callOpts...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}


// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// MoveBook moves a book to another shelf, and returns the new book.
func (client *Client) MoveBook(ctx context.Context, req *google_example_library_v1.MoveBookRequest, opts ...gax.CallOption) (*google_example_library_v1.Book, error) {
    ctx = metadata.NewContext(ctx, client.metadata)
    var callOpts []gax.CallOption
    callOpts = append(callOpts, client.callOptions["MoveBook"]...)
    callOpts = append(callOpts, opts...)
    var resp *google_example_library_v1.Book
    err := gax.Invoke(ctx, func (c context.Context) error {
        var err error
        resp, err = client.client.MoveBook(c, req)
        return err
    }, callOpts...)
    if err != nil {
        return nil, err
    }
    return resp, nil
}


// AUTO-GENERATED DOCUMENTATION AND METHOD -- see instructions at the top of the file for editing.

// ListStrings lists a primitive resource. To test go page streaming.
func (client *Client) ListStrings(ctx context.Context, req *google_example_library_v1.ListStringsRequest, opts ...gax.CallOption) (*StringIterator, error) {
    ctx = metadata.NewContext(ctx, client.metadata)
    var callOpts []gax.CallOption
    callOpts = append(callOpts, client.callOptions["ListStrings"]...)
    callOpts = append(callOpts, opts...)
    atLastPage := false
    return &StringIterator{
        apiCall: func() (StringPage, error) {
            if atLastPage {
                return StringPage{}, io.EOF
            }
            var resp *google_example_library_v1.ListStringsResponse
            err := gax.Invoke(ctx, func (c context.Context) error {
                var err error
                resp, err = client.client.ListStrings(c, req)
                return err
            }, callOpts...)
            if err != nil {
                return StringPage{}, err
            }
            if resp.NextPageToken == "" {
                atLastPage = true
            } else {
                req.PageToken = resp.NextPageToken
            }
            return StringPage{
                Items: resp.Strings,
                NextPageToken: resp.NextPageToken,
            }, nil
        },
    }, nil
}


// Iterators.
//

// ShelfPage represents a page in a stream of ShelfIterator.
// This will be updated through ShelfIterator.Advance.
type ShelfPage struct {
    // The elements in the current page.
    Items []*google_example_library_v1.Shelf

    // The token to get the next page response. This can be used to resume the iteration.
    NextPageToken string
}

// ShelfIterator manages a stream of *google_example_library_v1.Shelf.
type ShelfIterator struct {
    // The current page data.
    Page         ShelfPage
    currentIndex int
    apiCall      func() (ShelfPage, error)
}

// Advance moves to the next page and updates its internal data.
// This returns io.EOF if no more pages exist.
func (iterator *ShelfIterator) Advance() error {
    page, err := iterator.apiCall()
    if err == nil {
        iterator.Page = page
    }
    return err
}

// Next returns the next element in the stream. This returns io.EOF at the end of
// the stream.
func (iterator *ShelfIterator) Next() (*google_example_library_v1.Shelf, error) {
    for iterator.currentIndex >= len(iterator.Page.Items) {
        err := iterator.Advance()
        if err != nil {
            return nil, err
        }
        iterator.currentIndex = 0
    }
    result := iterator.Page.Items[iterator.currentIndex]
    iterator.currentIndex++
    return result, nil
}

// BookPage represents a page in a stream of BookIterator.
// This will be updated through BookIterator.Advance.
type BookPage struct {
    // The elements in the current page.
    Items []*google_example_library_v1.Book

    // The token to get the next page response. This can be used to resume the iteration.
    NextPageToken string
}

// BookIterator manages a stream of *google_example_library_v1.Book.
type BookIterator struct {
    // The current page data.
    Page         BookPage
    currentIndex int
    apiCall      func() (BookPage, error)
}

// Advance moves to the next page and updates its internal data.
// This returns io.EOF if no more pages exist.
func (iterator *BookIterator) Advance() error {
    page, err := iterator.apiCall()
    if err == nil {
        iterator.Page = page
    }
    return err
}

// Next returns the next element in the stream. This returns io.EOF at the end of
// the stream.
func (iterator *BookIterator) Next() (*google_example_library_v1.Book, error) {
    for iterator.currentIndex >= len(iterator.Page.Items) {
        err := iterator.Advance()
        if err != nil {
            return nil, err
        }
        iterator.currentIndex = 0
    }
    result := iterator.Page.Items[iterator.currentIndex]
    iterator.currentIndex++
    return result, nil
}

// StringPage represents a page in a stream of StringIterator.
// This will be updated through StringIterator.Advance.
type StringPage struct {
    // The elements in the current page.
    Items []string

    // The token to get the next page response. This can be used to resume the iteration.
    NextPageToken string
}

// StringIterator manages a stream of string.
type StringIterator struct {
    // The current page data.
    Page         StringPage
    currentIndex int
    apiCall      func() (StringPage, error)
}

// Advance moves to the next page and updates its internal data.
// This returns io.EOF if no more pages exist.
func (iterator *StringIterator) Advance() error {
    page, err := iterator.apiCall()
    if err == nil {
        iterator.Page = page
    }
    return err
}

// Next returns the next element in the stream. This returns io.EOF at the end of
// the stream.
func (iterator *StringIterator) Next() (string, error) {
    for iterator.currentIndex >= len(iterator.Page.Items) {
        err := iterator.Advance()
        if err != nil {
            return nil, err
        }
        iterator.currentIndex = 0
    }
    result := iterator.Page.Items[iterator.currentIndex]
    iterator.currentIndex++
    return result, nil
}
============== file: doc.go ==============
// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// EDITING INSTRUCTIONS
// This file was auto-generated and updates to that file get reflected
// here through a refresh process. For the short term, the refresh
// process will only be runnable by Google engineers. Manual additions are
// allowed because the refresh process performs a 3-way merge in order to
// preserve those manual additions. In order to notbreak the refresh
// process, only certain types of modifications are allowed.
//
// Happy editing!

// Package library provides the more language idiomatic and
// developer friendly layer for the gRPC based API service.
//
// A simple Google Example Library API.
package library

