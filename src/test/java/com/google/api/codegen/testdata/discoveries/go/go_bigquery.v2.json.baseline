
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the dataset being deleted
  projectId := "{MY-PROJECT-ID}"
  // TODO: Change placeholder value above.

  // Dataset ID of dataset being deleted
  datasetId := "{MY-DATASET-ID}"
  // TODO: Change placeholder value above.

  if err := bigqueryService.Datasets.Delete(projectId, datasetId).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the requested dataset
  projectId := "{MY-PROJECT-ID}"
  // TODO: Change placeholder value above.

  // Dataset ID of the requested dataset
  datasetId := "{MY-DATASET-ID}"
  // TODO: Change placeholder value above.

  resp, err := bigqueryService.Datasets.Get(projectId, datasetId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the new dataset
  projectId := "{MY-PROJECT-ID}"
  // TODO: Change placeholder value above.

  rb := bigquery.Dataset{
    // TODO: Add desired fields of the request body.
  }

  resp, err := bigqueryService.Datasets.Insert(projectId, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the datasets to be listed
  projectId := "{MY-PROJECT-ID}"
  // TODO: Change placeholder value above.

  req := bigqueryService.Datasets.List(projectId)
  if err := req.Pages(ctx, func(page *bigquery.DatasetList) error {
    for _, datasetList.Datasets := range page.Datasets {
      // TODO: Change code below to process each `datasetList.Datasets` resource:
      fmt.Printf("%#v\n", datasetList.Datasets)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the dataset being updated
  projectId := "{MY-PROJECT-ID}"
  // TODO: Change placeholder value above.

  // Dataset ID of the dataset being updated
  datasetId := "{MY-DATASET-ID}"
  // TODO: Change placeholder value above.

  rb := bigquery.Dataset{
    // TODO: Add desired fields of the request body to be changed.
  }

  resp, err := bigqueryService.Datasets.Patch(projectId, datasetId, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the dataset being updated
  projectId := "{MY-PROJECT-ID}"
  // TODO: Change placeholder value above.

  // Dataset ID of the dataset being updated
  datasetId := "{MY-DATASET-ID}"
  // TODO: Change placeholder value above.

  rb := bigquery.Dataset{
    // TODO: Add desired fields of the request body.
  }

  resp, err := bigqueryService.Datasets.Update(projectId, datasetId, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // [Required] Project ID of the job to cancel
  projectId := "{MY-PROJECT-ID}"
  // TODO: Change placeholder value above.

  // [Required] Job ID of the job to cancel
  jobId := "{MY-JOB-ID}"
  // TODO: Change placeholder value above.

  resp, err := bigqueryService.Jobs.Cancel(projectId, jobId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // [Required] Project ID of the requested job
  projectId := "{MY-PROJECT-ID}"
  // TODO: Change placeholder value above.

  // [Required] Job ID of the requested job
  jobId := "{MY-JOB-ID}"
  // TODO: Change placeholder value above.

  resp, err := bigqueryService.Jobs.Get(projectId, jobId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // [Required] Project ID of the query job
  projectId := "{MY-PROJECT-ID}"
  // TODO: Change placeholder value above.

  // [Required] Job ID of the query job
  jobId := "{MY-JOB-ID}"
  // TODO: Change placeholder value above.

  resp, err := bigqueryService.Jobs.GetQueryResults(projectId, jobId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that will be billed for the job
  projectId := "{MY-PROJECT-ID}"
  // TODO: Change placeholder value above.

  rb := bigquery.Job{
    // TODO: Add desired fields of the request body.
  }

  // TODO: Add desired media content for upload. For more information, see:
  // https://godoc.org/google.golang.org/api/bigquery/v2

  resp, err := bigqueryService.Jobs.Insert(projectId, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the jobs to list
  projectId := "{MY-PROJECT-ID}"
  // TODO: Change placeholder value above.

  req := bigqueryService.Jobs.List(projectId)
  if err := req.Pages(ctx, func(page *bigquery.JobList) error {
    for _, jobList.Jobs := range page.Jobs {
      // TODO: Change code below to process each `jobList.Jobs` resource:
      fmt.Printf("%#v\n", jobList.Jobs)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project billed for the query
  projectId := "{MY-PROJECT-ID}"
  // TODO: Change placeholder value above.

  rb := bigquery.QueryRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := bigqueryService.Jobs.Query(projectId, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }


  req := bigqueryService.Projects.List()
  if err := req.Pages(ctx, func(page *bigquery.ProjectList) error {
    for _, projectList.Projects := range page.Projects {
      // TODO: Change code below to process each `projectList.Projects` resource:
      fmt.Printf("%#v\n", projectList.Projects)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the destination table.
  projectId := "{MY-PROJECT-ID}"
  // TODO: Change placeholder value above.

  // Dataset ID of the destination table.
  datasetId := "{MY-DATASET-ID}"
  // TODO: Change placeholder value above.

  // Table ID of the destination table.
  tableId := "{MY-TABLE-ID}"
  // TODO: Change placeholder value above.

  rb := bigquery.TableDataInsertAllRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := bigqueryService.Tabledata.InsertAll(projectId, datasetId, tableId, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the table to read
  projectId := "{MY-PROJECT-ID}"
  // TODO: Change placeholder value above.

  // Dataset ID of the table to read
  datasetId := "{MY-DATASET-ID}"
  // TODO: Change placeholder value above.

  // Table ID of the table to read
  tableId := "{MY-TABLE-ID}"
  // TODO: Change placeholder value above.

  resp, err := bigqueryService.Tabledata.List(projectId, datasetId, tableId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the table to delete
  projectId := "{MY-PROJECT-ID}"
  // TODO: Change placeholder value above.

  // Dataset ID of the table to delete
  datasetId := "{MY-DATASET-ID}"
  // TODO: Change placeholder value above.

  // Table ID of the table to delete
  tableId := "{MY-TABLE-ID}"
  // TODO: Change placeholder value above.

  if err := bigqueryService.Tables.Delete(projectId, datasetId, tableId).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the requested table
  projectId := "{MY-PROJECT-ID}"
  // TODO: Change placeholder value above.

  // Dataset ID of the requested table
  datasetId := "{MY-DATASET-ID}"
  // TODO: Change placeholder value above.

  // Table ID of the requested table
  tableId := "{MY-TABLE-ID}"
  // TODO: Change placeholder value above.

  resp, err := bigqueryService.Tables.Get(projectId, datasetId, tableId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the new table
  projectId := "{MY-PROJECT-ID}"
  // TODO: Change placeholder value above.

  // Dataset ID of the new table
  datasetId := "{MY-DATASET-ID}"
  // TODO: Change placeholder value above.

  rb := bigquery.Table{
    // TODO: Add desired fields of the request body.
  }

  resp, err := bigqueryService.Tables.Insert(projectId, datasetId, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the tables to list
  projectId := "{MY-PROJECT-ID}"
  // TODO: Change placeholder value above.

  // Dataset ID of the tables to list
  datasetId := "{MY-DATASET-ID}"
  // TODO: Change placeholder value above.

  req := bigqueryService.Tables.List(projectId, datasetId)
  if err := req.Pages(ctx, func(page *bigquery.TableList) error {
    for _, tableList.Tables := range page.Tables {
      // TODO: Change code below to process each `tableList.Tables` resource:
      fmt.Printf("%#v\n", tableList.Tables)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the table to update
  projectId := "{MY-PROJECT-ID}"
  // TODO: Change placeholder value above.

  // Dataset ID of the table to update
  datasetId := "{MY-DATASET-ID}"
  // TODO: Change placeholder value above.

  // Table ID of the table to update
  tableId := "{MY-TABLE-ID}"
  // TODO: Change placeholder value above.

  rb := bigquery.Table{
    // TODO: Add desired fields of the request body to be changed.
  }

  resp, err := bigqueryService.Tables.Patch(projectId, datasetId, tableId, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the table to update
  projectId := "{MY-PROJECT-ID}"
  // TODO: Change placeholder value above.

  // Dataset ID of the table to update
  datasetId := "{MY-DATASET-ID}"
  // TODO: Change placeholder value above.

  // Table ID of the table to update
  tableId := "{MY-TABLE-ID}"
  // TODO: Change placeholder value above.

  rb := bigquery.Table{
    // TODO: Add desired fields of the request body.
  }

  resp, err := bigqueryService.Tables.Update(projectId, datasetId, tableId, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
