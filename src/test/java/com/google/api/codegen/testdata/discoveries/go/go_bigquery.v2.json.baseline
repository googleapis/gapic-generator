
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the BigQuery API and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/bigquery/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'delete' method:
  var (
    // Project ID of the dataset being deleted
    projectId = ""

    // Dataset ID of dataset being deleted
    datasetId = ""

  )

  err = service.Datasets.Delete(projectId, datasetId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the BigQuery API and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/bigquery/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'get' method:
  var (
    // Project ID of the requested dataset
    projectId = ""

    // Dataset ID of the requested dataset
    datasetId = ""

  )

  callResult, err := service.Datasets.Get(projectId, datasetId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the BigQuery API and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/bigquery/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'insert' method:
  var (
    // Project ID of the new dataset
    projectId = ""


    requestBody = &bigquery.Dataset{}
  )

  callResult, err := service.Datasets.Insert(projectId, requestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the BigQuery API and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/bigquery/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'list' method:
  var (
    // Project ID of the datasets to be listed
    projectId = ""

  )

  fn := func(page *bigquery.DatasetList) error {
    // doThingsWith(page)
    for i, element := range page.Datasets {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  err = service.Datasets.List(projectId).Pages(ctx, fn)
  if err != nil {
    log.Fatal(err)
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the BigQuery API and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/bigquery/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'patch' method:
  var (
    // Project ID of the dataset being updated
    projectId = ""

    // Dataset ID of the dataset being updated
    datasetId = ""


    requestBody = &bigquery.Dataset{}
  )

  callResult, err := service.Datasets.Patch(projectId, datasetId, requestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the BigQuery API and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/bigquery/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'update' method:
  var (
    // Project ID of the dataset being updated
    projectId = ""

    // Dataset ID of the dataset being updated
    datasetId = ""


    requestBody = &bigquery.Dataset{}
  )

  callResult, err := service.Datasets.Update(projectId, datasetId, requestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the BigQuery API and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/bigquery/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'cancel' method:
  var (
    // [Required] Project ID of the job to cancel
    projectId = ""

    // [Required] Job ID of the job to cancel
    jobId = ""

  )

  callResult, err := service.Jobs.Cancel(projectId, jobId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the BigQuery API and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/bigquery/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'get' method:
  var (
    // [Required] Project ID of the requested job
    projectId = ""

    // [Required] Job ID of the requested job
    jobId = ""

  )

  callResult, err := service.Jobs.Get(projectId, jobId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the BigQuery API and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/bigquery/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'getQueryResults' method:
  var (
    // [Required] Project ID of the query job
    projectId = ""

    // [Required] Job ID of the query job
    jobId = ""

  )

  callResult, err := service.Jobs.GetQueryResults(projectId, jobId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the BigQuery API and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/bigquery/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'insert' method:
  var (
    // Project ID of the project that will be billed for the job
    projectId = ""


    requestBody = &bigquery.Job{}
  )

  callResult, err := service.Jobs.Insert(projectId, requestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the BigQuery API and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/bigquery/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'list' method:
  var (
    // Project ID of the jobs to list
    projectId = ""

  )

  fn := func(page *bigquery.JobList) error {
    // doThingsWith(page)
    for i, element := range page.Jobs {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  err = service.Jobs.List(projectId).Pages(ctx, fn)
  if err != nil {
    log.Fatal(err)
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the BigQuery API and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/bigquery/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'query' method:
  var (
    // Project ID of the project billed for the query
    projectId = ""


    requestBody = &bigquery.QueryRequest{}
  )

  callResult, err := service.Jobs.Query(projectId, requestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the BigQuery API and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/bigquery/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  var (
  )

  fn := func(page *bigquery.ProjectList) error {
    // doThingsWith(page)
    for i, element := range page.Projects {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  err = service.Projects.List().Pages(ctx, fn)
  if err != nil {
    log.Fatal(err)
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the BigQuery API and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/bigquery/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'insertAll' method:
  var (
    // Project ID of the destination table.
    projectId = ""

    // Dataset ID of the destination table.
    datasetId = ""

    // Table ID of the destination table.
    tableId = ""


    requestBody = &bigquery.TableDataInsertAllRequest{}
  )

  callResult, err := service.Tabledata.InsertAll(projectId, datasetId, tableId, requestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the BigQuery API and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/bigquery/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'list' method:
  var (
    // Project ID of the table to read
    projectId = ""

    // Dataset ID of the table to read
    datasetId = ""

    // Table ID of the table to read
    tableId = ""

  )

  callResult, err := service.Tabledata.List(projectId, datasetId, tableId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the BigQuery API and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/bigquery/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'delete' method:
  var (
    // Project ID of the table to delete
    projectId = ""

    // Dataset ID of the table to delete
    datasetId = ""

    // Table ID of the table to delete
    tableId = ""

  )

  err = service.Tables.Delete(projectId, datasetId, tableId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the BigQuery API and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/bigquery/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'get' method:
  var (
    // Project ID of the requested table
    projectId = ""

    // Dataset ID of the requested table
    datasetId = ""

    // Table ID of the requested table
    tableId = ""

  )

  callResult, err := service.Tables.Get(projectId, datasetId, tableId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the BigQuery API and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/bigquery/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'insert' method:
  var (
    // Project ID of the new table
    projectId = ""

    // Dataset ID of the new table
    datasetId = ""


    requestBody = &bigquery.Table{}
  )

  callResult, err := service.Tables.Insert(projectId, datasetId, requestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the BigQuery API and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/bigquery/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'list' method:
  var (
    // Project ID of the tables to list
    projectId = ""

    // Dataset ID of the tables to list
    datasetId = ""

  )

  fn := func(page *bigquery.TableList) error {
    // doThingsWith(page)
    for i, element := range page.Tables {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  err = service.Tables.List(projectId, datasetId).Pages(ctx, fn)
  if err != nil {
    log.Fatal(err)
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the BigQuery API and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/bigquery/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'patch' method:
  var (
    // Project ID of the table to update
    projectId = ""

    // Dataset ID of the table to update
    datasetId = ""

    // Table ID of the table to update
    tableId = ""


    requestBody = &bigquery.Table{}
  )

  callResult, err := service.Tables.Patch(projectId, datasetId, tableId, requestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the BigQuery API and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/bigquery/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  // Use oauth2.NoContext if there isn't a good context to pass in.
  ctx := context.Background()
  client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
  if err != nil {
    log.Fatal(err)
  }
  service, err := bigquery.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to appropriate parameters values for the 'update' method:
  var (
    // Project ID of the table to update
    projectId = ""

    // Dataset ID of the table to update
    datasetId = ""

    // Table ID of the table to update
    tableId = ""


    requestBody = &bigquery.Table{}
  )

  callResult, err := service.Tables.Update(projectId, datasetId, tableId, requestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }
  // doThingsWith(callResult)
  _ = callResult
}
