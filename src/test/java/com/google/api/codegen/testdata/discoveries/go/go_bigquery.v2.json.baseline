
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := bigquery.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the dataset being deleted
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // Dataset ID of dataset being deleted
  // TODO: Update placeholder value.
  datasetId := "{MY-DATASET-ID}"

  if err := c.Datasets.Delete(projectId, datasetId).Context(ctx).Do(); err != nil {
    // TODO: Handle error.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := bigquery.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the requested dataset
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // Dataset ID of the requested dataset
  // TODO: Update placeholder value.
  datasetId := "{MY-DATASET-ID}"

  resp, err := c.Datasets.Get(projectId, datasetId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := bigquery.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the new dataset
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  resp, err := c.Datasets.Insert(projectId, &bigquery.Dataset{
                                   // TODO: Fill required fields.
                                 }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := bigquery.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the datasets to be listed
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"


  call := c.Datasets.List(projectId)
  if err := call.Pages(ctx, func(page *bigquery.DatasetList) error {
    for _, v := range page.Datasets {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := bigquery.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the dataset being updated
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // Dataset ID of the dataset being updated
  // TODO: Update placeholder value.
  datasetId := "{MY-DATASET-ID}"

  resp, err := c.Datasets.Patch(projectId, datasetId, &bigquery.Dataset{
                                  // TODO: Fill required fields.
                                }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := bigquery.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the dataset being updated
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // Dataset ID of the dataset being updated
  // TODO: Update placeholder value.
  datasetId := "{MY-DATASET-ID}"

  resp, err := c.Datasets.Update(projectId, datasetId, &bigquery.Dataset{
                                   // TODO: Fill required fields.
                                 }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := bigquery.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // [Required] Project ID of the job to cancel
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // [Required] Job ID of the job to cancel
  // TODO: Update placeholder value.
  jobId := "{MY-JOB-ID}"

  resp, err := c.Jobs.Cancel(projectId, jobId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := bigquery.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // [Required] Project ID of the requested job
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // [Required] Job ID of the requested job
  // TODO: Update placeholder value.
  jobId := "{MY-JOB-ID}"

  resp, err := c.Jobs.Get(projectId, jobId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := bigquery.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // [Required] Project ID of the query job
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // [Required] Job ID of the query job
  // TODO: Update placeholder value.
  jobId := "{MY-JOB-ID}"

  resp, err := c.Jobs.GetQueryResults(projectId, jobId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := bigquery.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project that will be billed for the job
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  resp, err := c.Jobs.Insert(projectId, &bigquery.Job{
                               // TODO: Fill required fields.
                             }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := bigquery.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the jobs to list
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"


  call := c.Jobs.List(projectId)
  if err := call.Pages(ctx, func(page *bigquery.JobList) error {
    for _, v := range page.Jobs {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := bigquery.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the project billed for the query
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  resp, err := c.Jobs.Query(projectId, &bigquery.QueryRequest{
                              // TODO: Fill required fields.
                            }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := bigquery.New(hc)
  if err != nil {
    // TODO: Handle error.
  }




  call := c.Projects.List()
  if err := call.Pages(ctx, func(page *bigquery.ProjectList) error {
    for _, v := range page.Projects {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := bigquery.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the destination table.
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // Dataset ID of the destination table.
  // TODO: Update placeholder value.
  datasetId := "{MY-DATASET-ID}"

  // Table ID of the destination table.
  // TODO: Update placeholder value.
  tableId := "{MY-TABLE-ID}"

  resp, err := c.Tabledata.InsertAll(projectId, datasetId, tableId, &bigquery.TableDataInsertAllRequest{
                                       // TODO: Fill required fields.
                                     }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := bigquery.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the table to read
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // Dataset ID of the table to read
  // TODO: Update placeholder value.
  datasetId := "{MY-DATASET-ID}"

  // Table ID of the table to read
  // TODO: Update placeholder value.
  tableId := "{MY-TABLE-ID}"

  resp, err := c.Tabledata.List(projectId, datasetId, tableId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := bigquery.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the table to delete
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // Dataset ID of the table to delete
  // TODO: Update placeholder value.
  datasetId := "{MY-DATASET-ID}"

  // Table ID of the table to delete
  // TODO: Update placeholder value.
  tableId := "{MY-TABLE-ID}"

  if err := c.Tables.Delete(projectId, datasetId, tableId).Context(ctx).Do(); err != nil {
    // TODO: Handle error.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := bigquery.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the requested table
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // Dataset ID of the requested table
  // TODO: Update placeholder value.
  datasetId := "{MY-DATASET-ID}"

  // Table ID of the requested table
  // TODO: Update placeholder value.
  tableId := "{MY-TABLE-ID}"

  resp, err := c.Tables.Get(projectId, datasetId, tableId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := bigquery.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the new table
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // Dataset ID of the new table
  // TODO: Update placeholder value.
  datasetId := "{MY-DATASET-ID}"

  resp, err := c.Tables.Insert(projectId, datasetId, &bigquery.Table{
                                 // TODO: Fill required fields.
                               }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := bigquery.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the tables to list
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // Dataset ID of the tables to list
  // TODO: Update placeholder value.
  datasetId := "{MY-DATASET-ID}"


  call := c.Tables.List(projectId, datasetId)
  if err := call.Pages(ctx, func(page *bigquery.TableList) error {
    for _, v := range page.Tables {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := bigquery.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the table to update
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // Dataset ID of the table to update
  // TODO: Update placeholder value.
  datasetId := "{MY-DATASET-ID}"

  // Table ID of the table to update
  // TODO: Update placeholder value.
  tableId := "{MY-TABLE-ID}"

  resp, err := c.Tables.Patch(projectId, datasetId, tableId, &bigquery.Table{
                                // TODO: Fill required fields.
                              }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, bigquery.BigqueryScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := bigquery.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Project ID of the table to update
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // Dataset ID of the table to update
  // TODO: Update placeholder value.
  datasetId := "{MY-DATASET-ID}"

  // Table ID of the table to update
  // TODO: Update placeholder value.
  tableId := "{MY-TABLE-ID}"

  resp, err := c.Tables.Update(projectId, datasetId, tableId, &bigquery.Table{
                                 // TODO: Fill required fields.
                               }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
