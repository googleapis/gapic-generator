
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the dataset being deleted
  projectId := "my-project-id"  // TODO: Update placeholder value.

  // Dataset ID of dataset being deleted
  datasetId := "my-dataset-id"  // TODO: Update placeholder value.

  if err := bigqueryService.Datasets.Delete(projectId, datasetId).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the requested dataset
  projectId := "my-project-id"  // TODO: Update placeholder value.

  // Dataset ID of the requested dataset
  datasetId := "my-dataset-id"  // TODO: Update placeholder value.

  resp, err := bigqueryService.Datasets.Get(projectId, datasetId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the new dataset
  projectId := "my-project-id"  // TODO: Update placeholder value.

  rb := &bigquery.Dataset{
    // TODO: Add desired fields of the request body.
  }

  resp, err := bigqueryService.Datasets.Insert(projectId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the datasets to be listed
  projectId := "my-project-id"  // TODO: Update placeholder value.

  req := bigqueryService.Datasets.List(projectId)
  if err := req.Pages(ctx, func(page *bigquery.DatasetList) error {
    for _, datasets := range page.Datasets {
      // TODO: Change code below to process each `datasets` resource:
      fmt.Printf("%#v\n", datasets)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the dataset being updated
  projectId := "my-project-id"  // TODO: Update placeholder value.

  // Dataset ID of the dataset being updated
  datasetId := "my-dataset-id"  // TODO: Update placeholder value.

  rb := &bigquery.Dataset{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := bigqueryService.Datasets.Patch(projectId, datasetId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the dataset being updated
  projectId := "my-project-id"  // TODO: Update placeholder value.

  // Dataset ID of the dataset being updated
  datasetId := "my-dataset-id"  // TODO: Update placeholder value.

  rb := &bigquery.Dataset{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := bigqueryService.Datasets.Update(projectId, datasetId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // [Required] Project ID of the job to cancel
  projectId := "my-project-id"  // TODO: Update placeholder value.

  // [Required] Job ID of the job to cancel
  jobId := "my-job-id"  // TODO: Update placeholder value.

  resp, err := bigqueryService.Jobs.Cancel(projectId, jobId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // [Required] Project ID of the requested job
  projectId := "my-project-id"  // TODO: Update placeholder value.

  // [Required] Job ID of the requested job
  jobId := "my-job-id"  // TODO: Update placeholder value.

  resp, err := bigqueryService.Jobs.Get(projectId, jobId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // [Required] Project ID of the query job
  projectId := "my-project-id"  // TODO: Update placeholder value.

  // [Required] Job ID of the query job
  jobId := "my-job-id"  // TODO: Update placeholder value.

  req := bigqueryService.Jobs.GetQueryResults(projectId, jobId)
  if err := req.Pages(ctx, func(page *bigquery.GetQueryResultsResponse) error {
    for _, errorProto := range page.Errors {
      // TODO: Change code below to process each `errorProto` resource:
      fmt.Printf("%#v\n", errorProto)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project that will be billed for the job
  projectId := "my-project-id"  // TODO: Update placeholder value.

  rb := &bigquery.Job{
    // TODO: Add desired fields of the request body.
  }

  // TODO: Add desired media content for upload. For more information, see
  // https://godoc.org/google.golang.org/api/bigquery/v2

  resp, err := bigqueryService.Jobs.Insert(projectId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the jobs to list
  projectId := "my-project-id"  // TODO: Update placeholder value.

  req := bigqueryService.Jobs.List(projectId)
  if err := req.Pages(ctx, func(page *bigquery.JobList) error {
    for _, jobs := range page.Jobs {
      // TODO: Change code below to process each `jobs` resource:
      fmt.Printf("%#v\n", jobs)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the project billed for the query
  projectId := "my-project-id"  // TODO: Update placeholder value.

  rb := &bigquery.QueryRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := bigqueryService.Jobs.Query(projectId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  req := bigqueryService.Projects.List()
  if err := req.Pages(ctx, func(page *bigquery.ProjectList) error {
    for _, projects := range page.Projects {
      // TODO: Change code below to process each `projects` resource:
      fmt.Printf("%#v\n", projects)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the destination table.
  projectId := "my-project-id"  // TODO: Update placeholder value.

  // Dataset ID of the destination table.
  datasetId := "my-dataset-id"  // TODO: Update placeholder value.

  // Table ID of the destination table.
  tableId := "my-table-id"  // TODO: Update placeholder value.

  rb := &bigquery.TableDataInsertAllRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := bigqueryService.Tabledata.InsertAll(projectId, datasetId, tableId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the table to read
  projectId := "my-project-id"  // TODO: Update placeholder value.

  // Dataset ID of the table to read
  datasetId := "my-dataset-id"  // TODO: Update placeholder value.

  // Table ID of the table to read
  tableId := "my-table-id"  // TODO: Update placeholder value.

  req := bigqueryService.Tabledata.List(projectId, datasetId, tableId)
  if err := req.Pages(ctx, func(page *bigquery.TableDataList) error {
    for _, tableRow := range page.Rows {
      // TODO: Change code below to process each `tableRow` resource:
      fmt.Printf("%#v\n", tableRow)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the table to delete
  projectId := "my-project-id"  // TODO: Update placeholder value.

  // Dataset ID of the table to delete
  datasetId := "my-dataset-id"  // TODO: Update placeholder value.

  // Table ID of the table to delete
  tableId := "my-table-id"  // TODO: Update placeholder value.

  if err := bigqueryService.Tables.Delete(projectId, datasetId, tableId).Context(ctx).Do(); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the requested table
  projectId := "my-project-id"  // TODO: Update placeholder value.

  // Dataset ID of the requested table
  datasetId := "my-dataset-id"  // TODO: Update placeholder value.

  // Table ID of the requested table
  tableId := "my-table-id"  // TODO: Update placeholder value.

  resp, err := bigqueryService.Tables.Get(projectId, datasetId, tableId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the new table
  projectId := "my-project-id"  // TODO: Update placeholder value.

  // Dataset ID of the new table
  datasetId := "my-dataset-id"  // TODO: Update placeholder value.

  rb := &bigquery.Table{
    // TODO: Add desired fields of the request body.
  }

  resp, err := bigqueryService.Tables.Insert(projectId, datasetId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the tables to list
  projectId := "my-project-id"  // TODO: Update placeholder value.

  // Dataset ID of the tables to list
  datasetId := "my-dataset-id"  // TODO: Update placeholder value.

  req := bigqueryService.Tables.List(projectId, datasetId)
  if err := req.Pages(ctx, func(page *bigquery.TableList) error {
    for _, tables := range page.Tables {
      // TODO: Change code below to process each `tables` resource:
      fmt.Printf("%#v\n", tables)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the table to update
  projectId := "my-project-id"  // TODO: Update placeholder value.

  // Dataset ID of the table to update
  datasetId := "my-dataset-id"  // TODO: Update placeholder value.

  // Table ID of the table to update
  tableId := "my-table-id"  // TODO: Update placeholder value.

  rb := &bigquery.Table{
    // TODO: Add desired fields of the request body. Only assigned fields
    // will be changed.
  }

  resp, err := bigqueryService.Tables.Patch(projectId, datasetId, tableId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the BigQuery API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/bigquery
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/bigquery/v2"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, bigquery.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  bigqueryService, err := bigquery.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Project ID of the table to update
  projectId := "my-project-id"  // TODO: Update placeholder value.

  // Dataset ID of the table to update
  datasetId := "my-dataset-id"  // TODO: Update placeholder value.

  // Table ID of the table to update
  tableId := "my-table-id"  // TODO: Update placeholder value.

  rb := &bigquery.Table{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := bigqueryService.Tables.Update(projectId, datasetId, tableId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
