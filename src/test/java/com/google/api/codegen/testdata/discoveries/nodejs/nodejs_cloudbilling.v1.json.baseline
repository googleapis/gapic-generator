
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Billing API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudbilling
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var cloudbilling = google.cloudbilling('v1');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // The resource name of the billing account to retrieve. For example,
    // `billingAccounts/012345-567890-ABCDEF`.
    name: 'billingAccounts/{MY-BILLINGACCOUNT}',


    auth: authClient
  };

  cloudbilling.billingAccounts.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Billing API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudbilling
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var cloudbilling = google.cloudbilling('v1');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    auth: authClient
  };

  var handlePage = function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var billingAccountsPage = response['billingAccounts'];
    if (!billingAccountsPage) {
      return;
    }
    for (var i = 0; i < billingAccountsPage.length; i++) {
      // TODO: Change code below to process each resource in `billingAccountsPage`:
      console.log(JSON.stringify(billingAccountsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      cloudbilling.billingAccounts.list(request, handlePage);
    }
  };

  cloudbilling.billingAccounts.list(request, handlePage);
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Billing API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudbilling
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var cloudbilling = google.cloudbilling('v1');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // The resource name of the billing account associated with the projects that you want to list. For
    // example, `billingAccounts/012345-567890-ABCDEF`.
    name: 'billingAccounts/{MY-BILLINGACCOUNT}',


    auth: authClient
  };

  var handlePage = function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var projectBillingInfoPage = response['projectBillingInfo'];
    if (!projectBillingInfoPage) {
      return;
    }
    for (var i = 0; i < projectBillingInfoPage.length; i++) {
      // TODO: Change code below to process each resource in `projectBillingInfoPage`:
      console.log(JSON.stringify(projectBillingInfoPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      cloudbilling.billingAccounts.projects.list(request, handlePage);
    }
  };

  cloudbilling.billingAccounts.projects.list(request, handlePage);
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Billing API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudbilling
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var cloudbilling = google.cloudbilling('v1');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `getBillingInfo` method:

    // The resource name of the project for which billing information is retrieved. For example,
    // `projects/tokyo-rain-123`.
    name: 'projects/{MY-PROJECT}',


    auth: authClient
  };

  cloudbilling.projects.getBillingInfo(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Billing API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/cloudbilling
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');
var cloudbilling = google.cloudbilling('v1');

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    // TODO: Change placeholders below to desired parameter values for the `updateBillingInfo` method:

    // The resource name of the project associated with the billing information that you want to update.
    // For example, `projects/tokyo-rain-123`.
    name: 'projects/{MY-PROJECT}',


    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  };

  cloudbilling.projects.updateBillingInfo(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
