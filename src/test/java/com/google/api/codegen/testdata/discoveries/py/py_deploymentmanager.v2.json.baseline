
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the deploymentmanager service object (version v2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'cancelPreview' method:
# * The project ID for this request.
project = ''
# * The name of the deployment for this request.
deployment = ''

deployments_cancel_preview_request = {
# TODO: Add desired entries of the 'deployments_cancel_preview_request' dict
}

request = service.deployments().cancelPreview(project, deployment, deployments_cancel_preview_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the deploymentmanager service object (version v2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
# * The project ID for this request.
project = ''
# * The name of the deployment for this request.
deployment = ''

request = service.deployments().delete(project, deployment)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the deploymentmanager service object (version v2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * The project ID for this request.
project = ''
# * The name of the deployment for this request.
deployment = ''

request = service.deployments().get(project, deployment)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the deploymentmanager service object (version v2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
# * The project ID for this request.
project = ''

deployment = {
# TODO: Add desired entries of the 'deployment' dict
}

request = service.deployments().insert(project, deployment)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the deploymentmanager service object (version v2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * The project ID for this request.
project = ''

deployments = service.deployments()
request = deployments.list(project)
while request is not None:
    response = request.execute()

    for deployment in response['deployments']:
        # TODO: Add code here to process each 'deployment' resource

    request = deployments.list_next(request, response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the deploymentmanager service object (version v2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
# * The project ID for this request.
project = ''
# * The name of the deployment for this request.
deployment = ''

deployment = {
# TODO: Add desired entries of the 'deployment' dict to be changed
}

request = service.deployments().patch(project, deployment, deployment)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the deploymentmanager service object (version v2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'stop' method:
# * The project ID for this request.
project = ''
# * The name of the deployment for this request.
deployment = ''

deployments_stop_request = {
# TODO: Add desired entries of the 'deployments_stop_request' dict
}

request = service.deployments().stop(project, deployment, deployments_stop_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the deploymentmanager service object (version v2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'update' method:
# * The project ID for this request.
project = ''
# * The name of the deployment for this request.
deployment = ''

deployment = {
# TODO: Add desired entries of the 'deployment' dict
}

request = service.deployments().update(project, deployment, deployment)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the deploymentmanager service object (version v2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * The project ID for this request.
project = ''
# * The name of the deployment for this request.
deployment = ''
# * The name of the manifest for this request.
manifest = ''

request = service.manifests().get(project, deployment, manifest)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the deploymentmanager service object (version v2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * The project ID for this request.
project = ''
# * The name of the deployment for this request.
deployment = ''

manifests = service.manifests()
request = manifests.list(project, deployment)
while request is not None:
    response = request.execute()

    for manifest in response['manifests']:
        # TODO: Add code here to process each 'manifest' resource

    request = manifests.list_next(request, response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the deploymentmanager service object (version v2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * The project ID for this request.
project = ''
# * The name of the operation for this request.
operation = ''

request = service.operations().get(project, operation)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the deploymentmanager service object (version v2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * The project ID for this request.
project = ''

operations = service.operations()
request = operations.list(project)
while request is not None:
    response = request.execute()

    for operation in response['operations']:
        # TODO: Add code here to process each 'operation' resource

    request = operations.list_next(request, response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the deploymentmanager service object (version v2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * The project ID for this request.
project = ''
# * The name of the deployment for this request.
deployment = ''
# * The name of the resource for this request.
resource = ''

request = service.resources().get(project, deployment, resource)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the deploymentmanager service object (version v2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * The project ID for this request.
project = ''
# * The name of the deployment for this request.
deployment = ''

resources = service.resources()
request = resources.list(project, deployment)
while request is not None:
    response = request.execute()

    for resource in response['resources']:
        # TODO: Add code here to process each 'resource' resource

    request = resources.list_next(request, response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the deploymentmanager service object (version v2) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * The project ID for this request.
project = ''

types = service.types()
request = types.list(project)
while request is not None:
    response = request.execute()

    for type_ in response['types']:
        # TODO: Add code here to process each 'type_' resource

    request = types.list_next(request, response)
