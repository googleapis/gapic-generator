
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `cancelPreview` method:

# The project ID for this request.
project = '{MY-PROJECT}'

# The name of the deployment for this request.
deployment = '{MY-DEPLOYMENT}'


deployments_cancel_preview_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.deployments().cancelPreview(project=project, deployment=deployment, body=deployments_cancel_preview_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# The project ID for this request.
project = '{MY-PROJECT}'

# The name of the deployment for this request.
deployment = '{MY-DEPLOYMENT}'


request = service.deployments().delete(project=project, deployment=deployment)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# The project ID for this request.
project = '{MY-PROJECT}'

# The name of the deployment for this request.
deployment = '{MY-DEPLOYMENT}'


request = service.deployments().get(project=project, deployment=deployment)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `getIamPolicy` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the resource for this request.
resource = '{MY-RESOURCE}'


request = service.deployments().getIamPolicy(project=project, resource=resource)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `insert` method:

# The project ID for this request.
project = '{MY-PROJECT}'


deployment_body = {
    # TODO: Add desired entries of the request body.
}


request = service.deployments().insert(project=project, body=deployment_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# The project ID for this request.
project = '{MY-PROJECT}'


deployments = service.deployments()
request = deployments.list(project=project)
while request is not None:
    response = request.execute()

    for deployment in response['deployments']:
        # TODO: Change code below to process each `deployment` resource:
        pprint(deployment)

    request = deployments.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# The project ID for this request.
project = '{MY-PROJECT}'

# The name of the deployment for this request.
deployment = '{MY-DEPLOYMENT}'


deployment_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.deployments().patch(project=project, deployment=deployment, body=deployment_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `setIamPolicy` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the resource for this request.
resource = '{MY-RESOURCE}'


policy_body = {
    # TODO: Add desired entries of the request body.
}


request = service.deployments().setIamPolicy(project=project, resource=resource, body=policy_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `stop` method:

# The project ID for this request.
project = '{MY-PROJECT}'

# The name of the deployment for this request.
deployment = '{MY-DEPLOYMENT}'


deployments_stop_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.deployments().stop(project=project, deployment=deployment, body=deployments_stop_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `testIamPermissions` method:

# Project ID for this request.
project = '{MY-PROJECT}'

# Name of the resource for this request.
resource = '{MY-RESOURCE}'


test_permissions_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.deployments().testIamPermissions(project=project, resource=resource, body=test_permissions_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `update` method:

# The project ID for this request.
project = '{MY-PROJECT}'

# The name of the deployment for this request.
deployment = '{MY-DEPLOYMENT}'


deployment_body = {
    # TODO: Add desired entries of the request body.
}


request = service.deployments().update(project=project, deployment=deployment, body=deployment_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# The project ID for this request.
project = '{MY-PROJECT}'

# The name of the deployment for this request.
deployment = '{MY-DEPLOYMENT}'

# The name of the manifest for this request.
manifest = '{MY-MANIFEST}'


request = service.manifests().get(project=project, deployment=deployment, manifest=manifest)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# The project ID for this request.
project = '{MY-PROJECT}'

# The name of the deployment for this request.
deployment = '{MY-DEPLOYMENT}'


manifests = service.manifests()
request = manifests.list(project=project, deployment=deployment)
while request is not None:
    response = request.execute()

    for manifest in response['manifests']:
        # TODO: Change code below to process each `manifest` resource:
        pprint(manifest)

    request = manifests.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# The project ID for this request.
project = '{MY-PROJECT}'

# The name of the operation for this request.
operation = '{MY-OPERATION}'


request = service.operations().get(project=project, operation=operation)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# The project ID for this request.
project = '{MY-PROJECT}'


operations = service.operations()
request = operations.list(project=project)
while request is not None:
    response = request.execute()

    for operation in response['operations']:
        # TODO: Change code below to process each `operation` resource:
        pprint(operation)

    request = operations.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# The project ID for this request.
project = '{MY-PROJECT}'

# The name of the deployment for this request.
deployment = '{MY-DEPLOYMENT}'

# The name of the resource for this request.
resource = '{MY-RESOURCE}'


request = service.resources().get(project=project, deployment=deployment, resource=resource)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# The project ID for this request.
project = '{MY-PROJECT}'

# The name of the deployment for this request.
deployment = '{MY-DEPLOYMENT}'


resources = service.resources()
request = resources.list(project=project, deployment=deployment)
while request is not None:
    response = request.execute()

    for resource in response['resources']:
        # TODO: Change code below to process each `resource` resource:
        pprint(resource)

    request = resources.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Deployment Manager API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/deploymentmanager
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('deploymentmanager', 'v2', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# The project ID for this request.
project = '{MY-PROJECT}'


types = service.types()
request = types.list(project=project)
while request is not None:
    response = request.execute()

    for type_ in response['types']:
        # TODO: Change code below to process each `type_` resource:
        pprint(type_)

    request = types.list_next(previous_request=request, previous_response=response)
