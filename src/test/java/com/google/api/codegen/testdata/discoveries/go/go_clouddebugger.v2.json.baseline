
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouddebugger/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouddebugger.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := clouddebugger.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Identifies the debuggee.
  // TODO: Update placeholder value.
  debuggeeId := "{MY-DEBUGGEE-ID}"

  resp, err := c.Controller.Debuggees.Breakpoints.List(debuggeeId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouddebugger/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouddebugger.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := clouddebugger.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Identifies the debuggee being debugged.
  // TODO: Update placeholder value.
  debuggeeId := "{MY-DEBUGGEE-ID}"

  // Breakpoint identifier, unique in the scope of the debuggee.
  // TODO: Update placeholder value.
  id := "{MY-ID}"

  resp, err := c.Controller.Debuggees.Breakpoints.Update(debuggeeId, id, &clouddebugger.UpdateActiveBreakpointRequest{
                                                           // TODO: Fill required fields.
                                                         }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouddebugger/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouddebugger.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := clouddebugger.New(hc)
  if err != nil {
    // TODO: Handle error.
  }



  resp, err := c.Controller.Debuggees.Register(&clouddebugger.RegisterDebuggeeRequest{
                                                 // TODO: Fill required fields.
                                               }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouddebugger/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouddebugger.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := clouddebugger.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // ID of the debuggee whose breakpoint to delete.
  // TODO: Update placeholder value.
  debuggeeId := "{MY-DEBUGGEE-ID}"

  // ID of the breakpoint to delete.
  // TODO: Update placeholder value.
  breakpointId := "{MY-BREAKPOINT-ID}"

  resp, err := c.Debugger.Debuggees.Breakpoints.Delete(debuggeeId, breakpointId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouddebugger/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouddebugger.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := clouddebugger.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // ID of the debuggee whose breakpoint to get.
  // TODO: Update placeholder value.
  debuggeeId := "{MY-DEBUGGEE-ID}"

  // ID of the breakpoint to get.
  // TODO: Update placeholder value.
  breakpointId := "{MY-BREAKPOINT-ID}"

  resp, err := c.Debugger.Debuggees.Breakpoints.Get(debuggeeId, breakpointId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouddebugger/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouddebugger.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := clouddebugger.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // ID of the debuggee whose breakpoints to list.
  // TODO: Update placeholder value.
  debuggeeId := "{MY-DEBUGGEE-ID}"

  resp, err := c.Debugger.Debuggees.Breakpoints.List(debuggeeId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouddebugger/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouddebugger.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := clouddebugger.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // ID of the debuggee where the breakpoint is to be set.
  // TODO: Update placeholder value.
  debuggeeId := "{MY-DEBUGGEE-ID}"

  resp, err := c.Debugger.Debuggees.Breakpoints.Set(debuggeeId, &clouddebugger.Breakpoint{
                                                      // TODO: Fill required fields.
                                                    }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouddebugger/v2"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, clouddebugger.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := clouddebugger.New(hc)
  if err != nil {
    // TODO: Handle error.
  }



  resp, err := c.Debugger.Debuggees.List().Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
