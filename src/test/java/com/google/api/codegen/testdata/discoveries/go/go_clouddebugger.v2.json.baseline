
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouddebugger/v2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, clouddebugger.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the clouddebugger service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := clouddebugger.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * Identifies the debuggee.
  debuggeeId := ""

  res, err := service.Controller.Debuggees.Breakpoints.List(debuggeeId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouddebugger/v2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, clouddebugger.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the clouddebugger service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := clouddebugger.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Update` method:

  // * Identifies the debuggee being debugged.
  debuggeeId := ""

  // * Breakpoint identifier, unique in the scope of the debuggee.
  id := ""

  updateActiveBreakpointRequestBody := clouddebugger.UpdateActiveBreakpointRequest{
    // TODO: Add desired fields of the `updateActiveBreakpointRequestBody` variable.
  }

  res, err := service.Controller.Debuggees.Breakpoints.Update(debuggeeId, id, &updateActiveBreakpointRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouddebugger/v2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, clouddebugger.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the clouddebugger service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := clouddebugger.New(client)
  if err != nil {
    log.Fatal(err)
  }


  registerDebuggeeRequestBody := clouddebugger.RegisterDebuggeeRequest{
    // TODO: Add desired fields of the `registerDebuggeeRequestBody` variable.
  }

  res, err := service.Controller.Debuggees.Register(registerDebuggeeRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouddebugger/v2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, clouddebugger.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the clouddebugger service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := clouddebugger.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * ID of the debuggee whose breakpoint to delete.
  debuggeeId := ""

  // * ID of the breakpoint to delete.
  breakpointId := ""

  res, err := service.Debugger.Debuggees.Breakpoints.Delete(debuggeeId, breakpointId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouddebugger/v2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, clouddebugger.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the clouddebugger service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := clouddebugger.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * ID of the debuggee whose breakpoint to get.
  debuggeeId := ""

  // * ID of the breakpoint to get.
  breakpointId := ""

  res, err := service.Debugger.Debuggees.Breakpoints.Get(debuggeeId, breakpointId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouddebugger/v2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, clouddebugger.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the clouddebugger service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := clouddebugger.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * ID of the debuggee whose breakpoints to list.
  debuggeeId := ""

  res, err := service.Debugger.Debuggees.Breakpoints.List(debuggeeId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouddebugger/v2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, clouddebugger.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the clouddebugger service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := clouddebugger.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Set` method:

  // * ID of the debuggee where the breakpoint is to be set.
  debuggeeId := ""

  breakpointBody := clouddebugger.Breakpoint{
    // TODO: Add desired fields of the `breakpointBody` variable.
  }

  res, err := service.Debugger.Debuggees.Breakpoints.Set(debuggeeId, &breakpointBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouddebugger/v2"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, clouddebugger.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the clouddebugger service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := clouddebugger.New(client)
  if err != nil {
    log.Fatal(err)
  }


  res, err := service.Debugger.Debuggees.List().Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
