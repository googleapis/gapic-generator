
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouddebugger/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouddebugger/v2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouddebugger.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouddebugger.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // Identifies the debuggee.
    debuggeeId = ""
  )

  response, err := client.Controller.Debuggees.Breakpoints.List(debuggeeId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouddebugger/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouddebugger/v2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouddebugger.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouddebugger.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'update' method:
  var (
    // Identifies the debuggee being debugged.
    debuggeeId = ""

    // Breakpoint identifier, unique in the scope of the debuggee.
    id = ""

    requestBody = &clouddebugger.UpdateActiveBreakpointRequest{}
  )

  response, err := client.Controller.Debuggees.Breakpoints.Update(debuggeeId, id, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouddebugger/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouddebugger/v2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouddebugger.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouddebugger.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'register' method:
  var (

    requestBody = &clouddebugger.RegisterDebuggeeRequest{}
  )

  response, err := client.Controller.Debuggees.Register(requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouddebugger/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouddebugger/v2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouddebugger.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouddebugger.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // ID of the debuggee whose breakpoint to delete.
    debuggeeId = ""

    // ID of the breakpoint to delete.
    breakpointId = ""
  )

  response, err := client.Debugger.Debuggees.Breakpoints.Delete(debuggeeId, breakpointId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouddebugger/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouddebugger/v2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouddebugger.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouddebugger.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // ID of the debuggee whose breakpoint to get.
    debuggeeId = ""

    // ID of the breakpoint to get.
    breakpointId = ""
  )

  response, err := client.Debugger.Debuggees.Breakpoints.Get(debuggeeId, breakpointId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouddebugger/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouddebugger/v2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouddebugger.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouddebugger.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // ID of the debuggee whose breakpoints to list.
    debuggeeId = ""
  )

  response, err := client.Debugger.Debuggees.Breakpoints.List(debuggeeId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouddebugger/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouddebugger/v2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouddebugger.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouddebugger.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'set' method:
  var (
    // ID of the debuggee where the breakpoint is to be set.
    debuggeeId = ""

    requestBody = &clouddebugger.Breakpoint{}
  )

  response, err := client.Debugger.Debuggees.Breakpoints.Set(debuggeeId, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/clouddebugger/v2'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/clouddebugger/v2"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, clouddebugger.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := clouddebugger.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  var (
  )

  response, err := client.Debugger.Debuggees.List().Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
