
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the clouddebugger service object (version v2) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var clouddebugger = google.clouddebugger('v2');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // * Identifies the debuggee.
    debuggeeId: "",


    auth: authClient
  };

  clouddebugger.controller.debuggees.breakpoints.list(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the clouddebugger service object (version v2) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var clouddebugger = google.clouddebugger('v2');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `update` method:

    // * Identifies the debuggee being debugged.
    debuggeeId: "",

    // * Breakpoint identifier, unique in the scope of the debuggee.
    id: "",


    resource: {
      // TODO: Add desired properties of the `resource` request body object.
    },

    auth: authClient
  };

  clouddebugger.controller.debuggees.breakpoints.update(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the clouddebugger service object (version v2) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var clouddebugger = google.clouddebugger('v2');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    resource: {
      // TODO: Add desired properties of the `resource` request body object.
    },

    auth: authClient
  };

  clouddebugger.controller.debuggees.register(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the clouddebugger service object (version v2) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var clouddebugger = google.clouddebugger('v2');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `delete` method:

    // * ID of the debuggee whose breakpoint to delete.
    debuggeeId: "",

    // * ID of the breakpoint to delete.
    breakpointId: "",


    auth: authClient
  };

  clouddebugger.debugger.debuggees.breakpoints.delete(request, function(err) {
    if (err) {
      console.log(err);
      return;
    }
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the clouddebugger service object (version v2) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var clouddebugger = google.clouddebugger('v2');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `get` method:

    // * ID of the debuggee whose breakpoint to get.
    debuggeeId: "",

    // * ID of the breakpoint to get.
    breakpointId: "",


    auth: authClient
  };

  clouddebugger.debugger.debuggees.breakpoints.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the clouddebugger service object (version v2) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var clouddebugger = google.clouddebugger('v2');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `list` method:

    // * ID of the debuggee whose breakpoints to list.
    debuggeeId: "",


    auth: authClient
  };

  clouddebugger.debugger.debuggees.breakpoints.list(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the clouddebugger service object (version v2) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var clouddebugger = google.clouddebugger('v2');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to desired parameter values for the `set` method:

    // * ID of the debuggee where the breakpoint is to be set.
    debuggeeId: "",


    resource: {
      // TODO: Add desired properties of the `resource` request body object.
    },

    auth: authClient
  };

  clouddebugger.debugger.debuggees.breakpoints.set(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Debugger API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/clouddebugger
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library and Application Default Credentials
//    library by running `npm install googleapis --save`
var google = require('googleapis');

// Construct the clouddebugger service object (version v2) for interacting
// with the API. You can browse other available API services and versions at
// https://github.com/google/google-api-nodejs-client/tree/master/apis
var clouddebugger = google.clouddebugger('v2');

// Authentication is provided by the `gcloud` tool when running locally
// and by built-in service accounts when running on GAE, GCE, or GKE.
// For more information, see
// https://developers.google.com/identity/protocols/application-default-credentials
google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log(err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {

    auth: authClient
  };

  clouddebugger.debugger.debuggees.list(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});
