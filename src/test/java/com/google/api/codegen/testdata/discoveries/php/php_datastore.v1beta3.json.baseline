
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Datastore API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/datastore
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Datastore($client);


// TODO: Change placeholders below to desired parameter values for the `allocateIds` method:

// The ID of the project against which to make the request.
$projectId = '{MY-PROJECT-ID}';


$requestBody = new Google_Service_Datastore_AllocateIdsRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->projects->allocateIds($projectId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Datastore API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/datastore
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Datastore($client);


// TODO: Change placeholders below to desired parameter values for the `beginTransaction` method:

// The ID of the project against which to make the request.
$projectId = '{MY-PROJECT-ID}';


$requestBody = new Google_Service_Datastore_BeginTransactionRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->projects->beginTransaction($projectId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Datastore API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/datastore
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Datastore($client);


// TODO: Change placeholders below to desired parameter values for the `commit` method:

// The ID of the project against which to make the request.
$projectId = '{MY-PROJECT-ID}';


$requestBody = new Google_Service_Datastore_CommitRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->projects->commit($projectId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Datastore API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/datastore
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Datastore($client);


// TODO: Change placeholders below to desired parameter values for the `lookup` method:

// The ID of the project against which to make the request.
$projectId = '{MY-PROJECT-ID}';


$requestBody = new Google_Service_Datastore_LookupRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->projects->lookup($projectId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Datastore API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/datastore
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Datastore($client);


// TODO: Change placeholders below to desired parameter values for the `rollback` method:

// The ID of the project against which to make the request.
$projectId = '{MY-PROJECT-ID}';


$requestBody = new Google_Service_Datastore_RollbackRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->projects->rollback($projectId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Datastore API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/datastore
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Datastore($client);


// TODO: Change placeholders below to desired parameter values for the `runQuery` method:

// The ID of the project against which to make the request.
$projectId = '{MY-PROJECT-ID}';


$requestBody = new Google_Service_Datastore_RunQueryRequest($client);
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->projects->runQuery($projectId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
