
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Prediction.v1_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Prediction.v1_6.Data;


namespace PredictionSample
{
    public class PredictionServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PredictionService predictionService = new PredictionService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-PredictionSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Predict` method:

            // The project associated with the model.
            string project = "{MY-PROJECT}";

            // The name of a hosted model.
            string hostedModelName = "{MY-HOSTED-MODEL-NAME}";


            Data.Input requestBody = new Data.Input();
            // TODO: Assign values to desired properties of the `requestBody` object.


            HostedmodelsResource.PredictRequest request = predictionService.Hostedmodels.Predict(requestBody, project, hostedModelName);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Output response = request.Execute();
            // Data.Output response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Prediction.v1_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Prediction.v1_6.Data;


namespace PredictionSample
{
    public class PredictionServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PredictionService predictionService = new PredictionService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-PredictionSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Analyze` method:

            // The project associated with the model.
            string project = "{MY-PROJECT}";

            // The unique name for the predictive model.
            string id = "{MY-ID}";


            TrainedmodelsResource.AnalyzeRequest request = predictionService.Trainedmodels.Analyze(project, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Analyze response = request.Execute();
            // Data.Analyze response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Prediction.v1_6;
using Google.Apis.Services;
using System.Threading.Tasks;


namespace PredictionSample
{
    public class PredictionServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PredictionService predictionService = new PredictionService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-PredictionSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // The project associated with the model.
            string project = "{MY-PROJECT}";

            // The unique name for the predictive model.
            string id = "{MY-ID}";


            TrainedmodelsResource.DeleteRequest request = predictionService.Trainedmodels.Delete(project, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Prediction.v1_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Prediction.v1_6.Data;


namespace PredictionSample
{
    public class PredictionServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PredictionService predictionService = new PredictionService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-PredictionSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // The project associated with the model.
            string project = "{MY-PROJECT}";

            // The unique name for the predictive model.
            string id = "{MY-ID}";


            TrainedmodelsResource.GetRequest request = predictionService.Trainedmodels.Get(project, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Insert2 response = request.Execute();
            // Data.Insert2 response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Prediction.v1_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Prediction.v1_6.Data;


namespace PredictionSample
{
    public class PredictionServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PredictionService predictionService = new PredictionService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-PredictionSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // The project associated with the model.
            string project = "{MY-PROJECT}";


            Data.Insert requestBody = new Data.Insert();
            // TODO: Assign values to desired properties of the `requestBody` object.


            TrainedmodelsResource.InsertRequest request = predictionService.Trainedmodels.Insert(requestBody, project);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Insert2 response = request.Execute();
            // Data.Insert2 response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Prediction.v1_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Prediction.v1_6.Data;


namespace PredictionSample
{
    public class PredictionServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PredictionService predictionService = new PredictionService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-PredictionSample/0.1",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // The project associated with the model.
            string project = "{MY-PROJECT}";


            TrainedmodelsResource.ListRequest request = predictionService.Trainedmodels.List(project);

            Data.List response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Items == null)
                {
                    continue;
                }
                foreach (Data.Insert2 insert2 in response.Items)
                {
                    // TODO: Change code below to process each `insert2` resource:
                    Console.WriteLine(insert2);
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Prediction.v1_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Prediction.v1_6.Data;


namespace PredictionSample
{
    public class PredictionServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PredictionService predictionService = new PredictionService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-PredictionSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Predict` method:

            // The project associated with the model.
            string project = "{MY-PROJECT}";

            // The unique name for the predictive model.
            string id = "{MY-ID}";


            Data.Input requestBody = new Data.Input();
            // TODO: Assign values to desired properties of the `requestBody` object.


            TrainedmodelsResource.PredictRequest request = predictionService.Trainedmodels.Predict(requestBody, project, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Output response = request.Execute();
            // Data.Output response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Prediction API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/prediction
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Prediction.v1_6;
using Google.Apis.Services;
using System;
using System.Threading.Tasks;

using Data = Google.Apis.Prediction.v1_6.Data;


namespace PredictionSample
{
    public class PredictionServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PredictionService predictionService = new PredictionService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google-PredictionSample/0.1",
            });


            // TODO: Change placeholders below to desired parameter values for the `Update` method:

            // The project associated with the model.
            string project = "{MY-PROJECT}";

            // The unique name for the predictive model.
            string id = "{MY-ID}";


            Data.Update requestBody = new Data.Update();
            // TODO: Assign values to desired properties of the `requestBody` object.


            TrainedmodelsResource.UpdateRequest request = predictionService.Trainedmodels.Update(requestBody, project, id);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Insert2 response = request.Execute();
            // Data.Insert2 response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(response);
        }
    }
}
