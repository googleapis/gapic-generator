
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Prediction API and check quota for your project at
//    https://console.developers.google.com/apis/api/prediction_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Prediction.v1_6;
using Google.Apis.Prediction.v1_6.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace PredictionSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PredictionService predictionService = new PredictionService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Predict() method:
            // The project associated with the model.
            string project = "";
            // The name of a hosted model.
            string hostedModelName = "";

            HostedmodelsResource.PredictRequest request = predictionService.Hostedmodels.Predict(project, hostedModelName);
            Output response = request.Execute();

            // To execute asynchronously in an async method, use
            // Output response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Prediction API and check quota for your project at
//    https://console.developers.google.com/apis/api/prediction_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Prediction.v1_6;
using Google.Apis.Prediction.v1_6.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace PredictionSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PredictionService predictionService = new PredictionService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Analyze() method:
            // The project associated with the model.
            string project = "";
            // The unique name for the predictive model.
            string id = "";

            TrainedmodelsResource.AnalyzeRequest request = predictionService.Trainedmodels.Analyze(project, id);
            Analyze response = request.Execute();

            // To execute asynchronously in an async method, use
            // Analyze response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Prediction API and check quota for your project at
//    https://console.developers.google.com/apis/api/prediction_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Prediction.v1_6;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace PredictionSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PredictionService predictionService = new PredictionService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:
            // The project associated with the model.
            string project = "";
            // The unique name for the predictive model.
            string id = "";

            TrainedmodelsResource.DeleteRequest request = predictionService.Trainedmodels.Delete(project, id);
            request.Execute();

            // To execute asynchronously in an async method, use
            // await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Prediction API and check quota for your project at
//    https://console.developers.google.com/apis/api/prediction_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Prediction.v1_6;
using Google.Apis.Prediction.v1_6.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace PredictionSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PredictionService predictionService = new PredictionService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:
            // The project associated with the model.
            string project = "";
            // The unique name for the predictive model.
            string id = "";

            TrainedmodelsResource.GetRequest request = predictionService.Trainedmodels.Get(project, id);
            Insert2 response = request.Execute();

            // To execute asynchronously in an async method, use
            // Insert2 response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Prediction API and check quota for your project at
//    https://console.developers.google.com/apis/api/prediction_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Prediction.v1_6;
using Google.Apis.Prediction.v1_6.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace PredictionSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PredictionService predictionService = new PredictionService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:
            // The project associated with the model.
            string project = "";

            TrainedmodelsResource.InsertRequest request = predictionService.Trainedmodels.Insert(project);
            Insert2 response = request.Execute();

            // To execute asynchronously in an async method, use
            // Insert2 response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Prediction API and check quota for your project at
//    https://console.developers.google.com/apis/api/prediction_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Prediction.v1_6;
using Google.Apis.Prediction.v1_6.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace PredictionSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PredictionService predictionService = new PredictionService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:
            // The project associated with the model.
            string project = "";

            TrainedmodelsResource.ListRequest request = predictionService.Trainedmodels.List(project);
            List response = request.Execute();

            // To execute asynchronously in an async method, use
            // List response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Prediction API and check quota for your project at
//    https://console.developers.google.com/apis/api/prediction_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Prediction.v1_6;
using Google.Apis.Prediction.v1_6.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace PredictionSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PredictionService predictionService = new PredictionService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Predict() method:
            // The project associated with the model.
            string project = "";
            // The unique name for the predictive model.
            string id = "";

            TrainedmodelsResource.PredictRequest request = predictionService.Trainedmodels.Predict(project, id);
            Output response = request.Execute();

            // To execute asynchronously in an async method, use
            // Output response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Prediction API and check quota for your project at
//    https://console.developers.google.com/apis/api/prediction_component/quotas
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Prediction.v1_6;
using Google.Apis.Prediction.v1_6.Data;
using Google.Apis.Services;
using System.Threading.Tasks;

namespace PredictionSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            PredictionService predictionService = new PredictionService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Update() method:
            // The project associated with the model.
            string project = "";
            // The unique name for the predictive model.
            string id = "";

            TrainedmodelsResource.UpdateRequest request = predictionService.Trainedmodels.Update(project, id);
            Insert2 response = request.Execute();

            // To execute asynchronously in an async method, use
            // Insert2 response = await request.ExecuteAsync();
        }
    }
}
