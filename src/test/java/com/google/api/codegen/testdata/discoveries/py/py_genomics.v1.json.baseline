
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

batch_create_annotations_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.annotations().batchCreate(body=batch_create_annotations_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

annotation_body = {
    # TODO: Add desired entries to the request body.
}

request = service.annotations().create(body=annotation_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The ID of the annotation to be deleted.
annotation_id = 'my-annotation-id'  # TODO: Update placeholder value.

request = service.annotations().delete(annotationId=annotation_id)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The ID of the annotation to be retrieved.
annotation_id = 'my-annotation-id'  # TODO: Update placeholder value.

request = service.annotations().get(annotationId=annotation_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

search_annotations_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.annotations().search(body=search_annotations_request_body)
while request is not None:
    response = request.execute()

    for annotation in response['annotations']:
        # TODO: Change code below to process each `annotation` resource:
        pprint(annotation)

    search_annotations_request_body.pageToken = response.nextPageToken
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The ID of the annotation to be updated.
annotation_id = 'my-annotation-id'  # TODO: Update placeholder value.

annotation_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.annotations().update(annotationId=annotation_id, body=annotation_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

annotation_set_body = {
    # TODO: Add desired entries to the request body.
}

request = service.annotationsets().create(body=annotation_set_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The ID of the annotation set to be deleted.
annotation_set_id = 'my-annotation-set-id'  # TODO: Update placeholder value.

request = service.annotationsets().delete(annotationSetId=annotation_set_id)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The ID of the annotation set to be retrieved.
annotation_set_id = 'my-annotation-set-id'  # TODO: Update placeholder value.

request = service.annotationsets().get(annotationSetId=annotation_set_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

search_annotation_sets_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.annotationsets().search(body=search_annotation_sets_request_body)
while request is not None:
    response = request.execute()

    for annotation_set in response['annotationSets']:
        # TODO: Change code below to process each `annotation_set` resource:
        pprint(annotation_set)

    search_annotation_sets_request_body.pageToken = response.nextPageToken
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The ID of the annotation set to be updated.
annotation_set_id = 'my-annotation-set-id'  # TODO: Update placeholder value.

annotation_set_body = {
    # TODO: Add desired entries to the request body. All existing entries
    # will be replaced.
}

request = service.annotationsets().update(annotationSetId=annotation_set_id, body=annotation_set_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

call_set_body = {
    # TODO: Add desired entries to the request body.
}

request = service.callsets().create(body=call_set_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The ID of the call set to be deleted.
call_set_id = 'my-call-set-id'  # TODO: Update placeholder value.

request = service.callsets().delete(callSetId=call_set_id)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The ID of the call set.
call_set_id = 'my-call-set-id'  # TODO: Update placeholder value.

request = service.callsets().get(callSetId=call_set_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The ID of the call set to be updated.
call_set_id = 'my-call-set-id'  # TODO: Update placeholder value.

call_set_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.callsets().patch(callSetId=call_set_id, body=call_set_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

search_call_sets_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.callsets().search(body=search_call_sets_request_body)
while request is not None:
    response = request.execute()

    for call_set in response['callSets']:
        # TODO: Change code below to process each `call_set` resource:
        pprint(call_set)

    search_call_sets_request_body.pageToken = response.nextPageToken
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

dataset_body = {
    # TODO: Add desired entries to the request body.
}

request = service.datasets().create(body=dataset_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The ID of the dataset to be deleted.
dataset_id = 'my-dataset-id'  # TODO: Update placeholder value.

request = service.datasets().delete(datasetId=dataset_id)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The ID of the dataset.
dataset_id = 'my-dataset-id'  # TODO: Update placeholder value.

request = service.datasets().get(datasetId=dataset_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# REQUIRED: The resource for which policy is being specified. Format is `datasets/`.
resource = 'datasets/my-dataset'  # TODO: Update placeholder value.

get_iam_policy_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.datasets().getIamPolicy(resource=resource, body=get_iam_policy_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

request = service.datasets().list()
while request is not None:
    response = request.execute()

    for dataset in response['datasets']:
        # TODO: Change code below to process each `dataset` resource:
        pprint(dataset)

    request = service.datasets().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The ID of the dataset to be updated.
dataset_id = 'my-dataset-id'  # TODO: Update placeholder value.

dataset_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.datasets().patch(datasetId=dataset_id, body=dataset_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# REQUIRED: The resource for which policy is being specified. Format is `datasets/`.
resource = 'datasets/my-dataset'  # TODO: Update placeholder value.

set_iam_policy_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.datasets().setIamPolicy(resource=resource, body=set_iam_policy_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# REQUIRED: The resource for which policy is being specified. Format is `datasets/`.
resource = 'datasets/my-dataset'  # TODO: Update placeholder value.

test_iam_permissions_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.datasets().testIamPermissions(resource=resource, body=test_iam_permissions_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The ID of the dataset to be undeleted.
dataset_id = 'my-dataset-id'  # TODO: Update placeholder value.

undelete_dataset_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.datasets().undelete(datasetId=dataset_id, body=undelete_dataset_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The name of the operation resource to be cancelled.
name = 'operations/my-operation'  # TODO: Update placeholder value.

cancel_operation_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.operations().cancel(name=name, body=cancel_operation_request_body)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The name of the operation resource.
name = 'operations/my-operation'  # TODO: Update placeholder value.

request = service.operations().get(name=name)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The name of the operation collection.
name = 'operations'  # TODO: Update placeholder value.

request = service.operations().list(name=name)
while request is not None:
    response = request.execute()

    for operation in response['operations']:
        # TODO: Change code below to process each `operation` resource:
        pprint(operation)

    request = service.operations().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# Required. The ID of the read group set over which coverage is requested.
read_group_set_id = 'my-read-group-set-id'  # TODO: Update placeholder value.

request = service.readgroupsets().coveragebuckets().list(readGroupSetId=read_group_set_id)
while request is not None:
    response = request.execute()

    for coverage_bucket in response['coverageBuckets']:
        # TODO: Change code below to process each `coverage_bucket` resource:
        pprint(coverage_bucket)

    request = service.readgroupsets().coveragebuckets().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The ID of the read group set to be deleted. The caller must have WRITE permissions to the dataset
# associated with this read group set.
read_group_set_id = 'my-read-group-set-id'  # TODO: Update placeholder value.

request = service.readgroupsets().delete(readGroupSetId=read_group_set_id)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# Required. The ID of the read group set to export. The caller must have READ access to this read
# group set.
read_group_set_id = 'my-read-group-set-id'  # TODO: Update placeholder value.

export_read_group_set_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.readgroupsets().export(readGroupSetId=read_group_set_id, body=export_read_group_set_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The ID of the read group set.
read_group_set_id = 'my-read-group-set-id'  # TODO: Update placeholder value.

request = service.readgroupsets().get(readGroupSetId=read_group_set_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

import_read_group_sets_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.readgroupsets().import(body=import_read_group_sets_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The ID of the read group set to be updated. The caller must have WRITE permissions to the dataset
# associated with this read group set.
read_group_set_id = 'my-read-group-set-id'  # TODO: Update placeholder value.

read_group_set_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.readgroupsets().patch(readGroupSetId=read_group_set_id, body=read_group_set_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

search_read_group_sets_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.readgroupsets().search(body=search_read_group_sets_request_body)
while request is not None:
    response = request.execute()

    for read_group_set in response['readGroupSets']:
        # TODO: Change code below to process each `read_group_set` resource:
        pprint(read_group_set)

    search_read_group_sets_request_body.pageToken = response.nextPageToken
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

search_reads_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.reads().search(body=search_reads_request_body)
while request is not None:
    response = request.execute()

    for read in response['alignments']:
        # TODO: Change code below to process each `read` resource:
        pprint(read)

    search_reads_request_body.pageToken = response.nextPageToken
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

stream_reads_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.reads().stream(body=stream_reads_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The ID of the reference.
reference_id = 'my-reference-id'  # TODO: Update placeholder value.

request = service.references().bases().list(referenceId=reference_id)
while request is not None:
    response = request.execute()

    # TODO: Change code below to process each `response['sequence']` resource:
    pprint(response['sequence'])

    request = service.references().bases().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The ID of the reference.
reference_id = 'my-reference-id'  # TODO: Update placeholder value.

request = service.references().get(referenceId=reference_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

search_references_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.references().search(body=search_references_request_body)
while request is not None:
    response = request.execute()

    for reference in response['references']:
        # TODO: Change code below to process each `reference` resource:
        pprint(reference)

    search_references_request_body.pageToken = response.nextPageToken
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The ID of the reference set.
reference_set_id = 'my-reference-set-id'  # TODO: Update placeholder value.

request = service.referencesets().get(referenceSetId=reference_set_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

search_reference_sets_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.referencesets().search(body=search_reference_sets_request_body)
while request is not None:
    response = request.execute()

    for reference_set in response['referenceSets']:
        # TODO: Change code below to process each `reference_set` resource:
        pprint(reference_set)

    search_reference_sets_request_body.pageToken = response.nextPageToken
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

variant_body = {
    # TODO: Add desired entries to the request body.
}

request = service.variants().create(body=variant_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The ID of the variant to be deleted.
variant_id = 'my-variant-id'  # TODO: Update placeholder value.

request = service.variants().delete(variantId=variant_id)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The ID of the variant.
variant_id = 'my-variant-id'  # TODO: Update placeholder value.

request = service.variants().get(variantId=variant_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

import_variants_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.variants().import(body=import_variants_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

merge_variants_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.variants().merge(body=merge_variants_request_body)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The ID of the variant to be updated.
variant_id = 'my-variant-id'  # TODO: Update placeholder value.

variant_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.variants().patch(variantId=variant_id, body=variant_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

search_variants_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.variants().search(body=search_variants_request_body)
while request is not None:
    response = request.execute()

    for variant in response['variants']:
        # TODO: Change code below to process each `variant` resource:
        pprint(variant)

    search_variants_request_body.pageToken = response.nextPageToken
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

stream_variants_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.variants().stream(body=stream_variants_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

variant_set_body = {
    # TODO: Add desired entries to the request body.
}

request = service.variantsets().create(body=variant_set_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The ID of the variant set to be deleted.
variant_set_id = 'my-variant-set-id'  # TODO: Update placeholder value.

request = service.variantsets().delete(variantSetId=variant_set_id)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# Required. The ID of the variant set that contains variant data which should be exported. The caller
# must have READ access to this variant set.
variant_set_id = 'my-variant-set-id'  # TODO: Update placeholder value.

export_variant_set_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.variantsets().export(variantSetId=variant_set_id, body=export_variant_set_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# Required. The ID of the variant set.
variant_set_id = 'my-variant-set-id'  # TODO: Update placeholder value.

request = service.variantsets().get(variantSetId=variant_set_id)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

# The ID of the variant to be updated (must already exist).
variant_set_id = 'my-variant-set-id'  # TODO: Update placeholder value.

variant_set_body = {
    # TODO: Add desired entries to the request body. Only assigned entries
    # will be changed.
}

request = service.variantsets().patch(variantSetId=variant_set_id, body=variant_set_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Genomics API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/genomics
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('genomics', 'v1', credentials=credentials)

search_variant_sets_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.variantsets().search(body=search_variant_sets_request_body)
while request is not None:
    response = request.execute()

    for variant_set in response['variantSets']:
        # TODO: Change code below to process each `variant_set` resource:
        pprint(variant_set)

    search_variant_sets_request_body.pageToken = response.nextPageToken
