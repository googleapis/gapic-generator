
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');

var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  }

  var handlePage = function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var entriesPage = response['entries'];
    if (!entriesPage) {
      return;
    }
    for (var i = 0; i < entriesPage.length; i++) {
      // TODO: Change code below to process each resource in `entriesPage`:
      console.log(JSON.stringify(entriesPage[i], null 2));
    }
    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      logging.entries.list(request, handlePage);
    }
  };

  logging.entries.list(request, handlePage);
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');

var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  }

  logging.entries.write(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');

var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var handlePage = function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var resourceDescriptorsPage = response['resourceDescriptors'];
    if (!resourceDescriptorsPage) {
      return;
    }
    for (var i = 0; i < resourceDescriptorsPage.length; i++) {
      // TODO: Change code below to process each resource in `resourceDescriptorsPage`:
      console.log(JSON.stringify(resourceDescriptorsPage[i], null 2));
    }
    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      logging.monitoredResourceDescriptors.list(request, handlePage);
    }
  };

  logging.monitoredResourceDescriptors.list(request, handlePage);
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');

var logging = google.logging('v2beta1');

authorize(function(authClient) {
  logging.projects.logs.delete(request, function(err) {
    if (err) {
      console.log(err);
      return;
    }
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');

var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // The resource name of the project in which to create the metric. Example:
    // `"projects/my-project-id"`. The new metric must be provided in the request.
    projectName: '',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  }

  logging.projects.metrics.create(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');

var logging = google.logging('v2beta1');

authorize(function(authClient) {
  logging.projects.metrics.delete(request, function(err) {
    if (err) {
      console.log(err);
      return;
    }
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');

var logging = google.logging('v2beta1');

authorize(function(authClient) {
  logging.projects.metrics.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');

var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var handlePage = function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var metricsPage = response['metrics'];
    if (!metricsPage) {
      return;
    }
    for (var i = 0; i < metricsPage.length; i++) {
      // TODO: Change code below to process each resource in `metricsPage`:
      console.log(JSON.stringify(metricsPage[i], null 2));
    }
    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      logging.projects.metrics.list(request, handlePage);
    }
  };

  logging.projects.metrics.list(request, handlePage);
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');

var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // The resource name of the metric to update. Example:
    // `"projects/my-project-id/metrics/my-metric-id"`. The updated metric must be provided in the request
    // and have the same identifier that is specified in `metricName`. If the metric does not exist, it is
    // created.
    metricName: '',  // TODO: Update placeholder values.

    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  }

  logging.projects.metrics.update(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');

var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // The resource name of the project in which to create the sink. Example: `"projects/my-project-id"`.
    // The new sink must be provided in the request.
    projectName: '',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  }

  logging.projects.sinks.create(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');

var logging = google.logging('v2beta1');

authorize(function(authClient) {
  logging.projects.sinks.delete(request, function(err) {
    if (err) {
      console.log(err);
      return;
    }
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');

var logging = google.logging('v2beta1');

authorize(function(authClient) {
  logging.projects.sinks.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');

var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var handlePage = function(err, response) {
    if (err) {
      console.log(err);
      return;
    }

    var sinksPage = response['sinks'];
    if (!sinksPage) {
      return;
    }
    for (var i = 0; i < sinksPage.length; i++) {
      // TODO: Change code below to process each resource in `sinksPage`:
      console.log(JSON.stringify(sinksPage[i], null 2));
    }
    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      logging.projects.sinks.list(request, handlePage);
    }
  };

  logging.projects.sinks.list(request, handlePage);
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');

var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // The resource name of the sink to update. Example: `"projects/my-project-id/sinks/my-sink-id"`. The
    // updated sink must be provided in the request and have the same name that is specified in
    // `sinkName`. If the sink does not exist, it is created.
    sinkName: '',  // TODO: Update placeholder values.

    resource: {
      // TODO: Add desired properties of the request body.
    },

    auth: authClient
  }

  logging.projects.sinks.update(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
