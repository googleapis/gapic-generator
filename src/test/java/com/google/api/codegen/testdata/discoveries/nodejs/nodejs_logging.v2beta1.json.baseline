
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
// 3. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`

var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var service = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    auth: authClient
  }

  service.entries.list(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }
    console.log(response);
  });
});

function authorize(callback) {
  new GoogleAuth().getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
// 3. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`

var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var service = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    auth: authClient
  }

  service.entries.write(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }
    console.log(response);
  });
});

function authorize(callback) {
  new GoogleAuth().getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
// 3. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`

var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var service = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    auth: authClient
  }

  service.monitoredResourceDescriptors.list(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }
    console.log(response);
  });
});

function authorize(callback) {
  new GoogleAuth().getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
// 3. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`

var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var service = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // Required. The resource name of the log to delete. Example: `"projects/my-project/logs/syslog"`.
    logName: '', // TODO: Update placeholder value(s).

    auth: authClient
  }

  service.projects.logs.delete(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }
    console.log(response);
  });
});

function authorize(callback) {
  new GoogleAuth().getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
// 3. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`

var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var service = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // The resource name of the project in which to create the metric. Example:
    // `"projects/my-project-id"`. The new metric must be provided in the request.
    projectName: '', // TODO: Update placeholder value(s).

    auth: authClient
  }

  service.projects.metrics.create(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }
    console.log(response);
  });
});

function authorize(callback) {
  new GoogleAuth().getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
// 3. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`

var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var service = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // The resource name of the metric to delete. Example:
    // `"projects/my-project-id/metrics/my-metric-id"`.
    metricName: '', // TODO: Update placeholder value(s).

    auth: authClient
  }

  service.projects.metrics.delete(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }
    console.log(response);
  });
});

function authorize(callback) {
  new GoogleAuth().getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
// 3. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`

var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var service = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // The resource name of the desired metric. Example: `"projects/my-project-id/metrics/my-metric-id"`.
    metricName: '', // TODO: Update placeholder value(s).

    auth: authClient
  }

  service.projects.metrics.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }
    console.log(response);
  });
});

function authorize(callback) {
  new GoogleAuth().getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
// 3. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`

var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var service = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // Required. The resource name of the project containing the metrics. Example:
    // `"projects/my-project-id"`.
    projectName: '', // TODO: Update placeholder value(s).

    auth: authClient
  }

  service.projects.metrics.list(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }
    console.log(response);
  });
});

function authorize(callback) {
  new GoogleAuth().getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
// 3. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`

var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var service = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // The resource name of the metric to update. Example:
    // `"projects/my-project-id/metrics/my-metric-id"`. The updated metric must be provided in the request
    // and have the same identifier that is specified in `metricName`. If the metric does not exist, it is
    // created.
    metricName: '', // TODO: Update placeholder value(s).

    auth: authClient
  }

  service.projects.metrics.update(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }
    console.log(response);
  });
});

function authorize(callback) {
  new GoogleAuth().getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
// 3. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`

var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var service = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // The resource name of the project in which to create the sink. Example: `"projects/my-project-id"`.
    // The new sink must be provided in the request.
    projectName: '', // TODO: Update placeholder value(s).

    auth: authClient
  }

  service.projects.sinks.create(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }
    console.log(response);
  });
});

function authorize(callback) {
  new GoogleAuth().getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
// 3. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`

var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var service = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // The resource name of the sink to delete. Example: `"projects/my-project-id/sinks/my-sink-id"`.
    sinkName: '', // TODO: Update placeholder value(s).

    auth: authClient
  }

  service.projects.sinks.delete(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }
    console.log(response);
  });
});

function authorize(callback) {
  new GoogleAuth().getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
// 3. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`

var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var service = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // The resource name of the sink to return. Example: `"projects/my-project-id/sinks/my-sink-id"`.
    sinkName: '', // TODO: Update placeholder value(s).

    auth: authClient
  }

  service.projects.sinks.get(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }
    console.log(response);
  });
});

function authorize(callback) {
  new GoogleAuth().getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
// 3. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`

var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var service = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // Required. The resource name of the project containing the sinks. Example:
    // `"projects/my-logging-project"`.
    projectName: '', // TODO: Update placeholder value(s).

    auth: authClient
  }

  service.projects.sinks.list(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }
    console.log(response);
  });
});

function authorize(callback) {
  new GoogleAuth().getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
//
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. Install the Node.js client library by running
//    `npm install googleapis --save`
// 3. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`

var google = require('googleapis');
var GoogleAuth = require('google-auth-library');

var service = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // The resource name of the sink to update. Example: `"projects/my-project-id/sinks/my-sink-id"`. The
    // updated sink must be provided in the request and have the same name that is specified in
    // `sinkName`. If the sink does not exist, it is created.
    sinkName: '', // TODO: Update placeholder value(s).

    auth: authClient
  }

  service.projects.sinks.update(request, function(err, response) {
    if (err) {
      console.log(err);
      return;
    }
    console.log(response);
  });
});

function authorize(callback) {
  new GoogleAuth().getApplicationDefault(function(err, authClient)) {
    if (err) {
      console.log('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
