
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // Required. The resource name of the log to delete:
    // "projects/[PROJECT_ID]/logs/[LOG_ID]"
    // "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
    // [LOG_ID] must be URL-encoded. For example, "projects/my-project-id/logs/syslog",
    // "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity". For more
    // information about log names, see LogEntry.
    logName: 'billingAccounts/my-billing-account/logs/my-log',  // TODO: Update placeholder value.

    auth: authClient,
  };

  logging.billingAccounts.logs.delete(request, function(err) {
    if (err) {
      console.error(err);
      return;
    }
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // Required. The resource name that owns the logs:
    // "projects/[PROJECT_ID]"
    // "organizations/[ORGANIZATION_ID]"
    parent: 'billingAccounts/my-billing-account',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var logNamesPage = response['logNames'];
    if (!logNamesPage) {
      return;
    }
    for (var i = 0; i < logNamesPage.length; i++) {
      // TODO: Change code below to process each resource in `logNamesPage`:
      console.log(JSON.stringify(logNamesPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      logging.billingAccounts.logs.list(request, handlePage);
    }
  };

  logging.billingAccounts.logs.list(request, handlePage);
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var entriesPage = response['entries'];
    if (!entriesPage) {
      return;
    }
    for (var i = 0; i < entriesPage.length; i++) {
      // TODO: Change code below to process each resource in `entriesPage`:
      console.log(JSON.stringify(entriesPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.resource.pageToken = response.nextPageToken;
      logging.entries.list(request, handlePage);
    }
  };

  logging.entries.list(request, handlePage);
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  logging.entries.write(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var resourceDescriptorsPage = response['resourceDescriptors'];
    if (!resourceDescriptorsPage) {
      return;
    }
    for (var i = 0; i < resourceDescriptorsPage.length; i++) {
      // TODO: Change code below to process each resource in `resourceDescriptorsPage`:
      console.log(JSON.stringify(resourceDescriptorsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      logging.monitoredResourceDescriptors.list(request, handlePage);
    }
  };

  logging.monitoredResourceDescriptors.list(request, handlePage);
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // Required. The resource name of the log to delete:
    // "projects/[PROJECT_ID]/logs/[LOG_ID]"
    // "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
    // [LOG_ID] must be URL-encoded. For example, "projects/my-project-id/logs/syslog",
    // "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity". For more
    // information about log names, see LogEntry.
    logName: 'organizations/my-organization/logs/my-log',  // TODO: Update placeholder value.

    auth: authClient,
  };

  logging.organizations.logs.delete(request, function(err) {
    if (err) {
      console.error(err);
      return;
    }
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // Required. The resource name that owns the logs:
    // "projects/[PROJECT_ID]"
    // "organizations/[ORGANIZATION_ID]"
    parent: 'organizations/my-organization',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var logNamesPage = response['logNames'];
    if (!logNamesPage) {
      return;
    }
    for (var i = 0; i < logNamesPage.length; i++) {
      // TODO: Change code below to process each resource in `logNamesPage`:
      console.log(JSON.stringify(logNamesPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      logging.organizations.logs.list(request, handlePage);
    }
  };

  logging.organizations.logs.list(request, handlePage);
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // Required. The resource name of the log to delete:
    // "projects/[PROJECT_ID]/logs/[LOG_ID]"
    // "organizations/[ORGANIZATION_ID]/logs/[LOG_ID]"
    // [LOG_ID] must be URL-encoded. For example, "projects/my-project-id/logs/syslog",
    // "organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity". For more
    // information about log names, see LogEntry.
    logName: 'projects/my-project/logs/my-log',  // TODO: Update placeholder value.

    auth: authClient,
  };

  logging.projects.logs.delete(request, function(err) {
    if (err) {
      console.error(err);
      return;
    }
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // Required. The resource name that owns the logs:
    // "projects/[PROJECT_ID]"
    // "organizations/[ORGANIZATION_ID]"
    parent: 'projects/my-project',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var logNamesPage = response['logNames'];
    if (!logNamesPage) {
      return;
    }
    for (var i = 0; i < logNamesPage.length; i++) {
      // TODO: Change code below to process each resource in `logNamesPage`:
      console.log(JSON.stringify(logNamesPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      logging.projects.logs.list(request, handlePage);
    }
  };

  logging.projects.logs.list(request, handlePage);
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // The resource name of the project in which to create the metric:
    // "projects/[PROJECT_ID]"
    // The new metric must be provided in the request.
    parent: 'projects/my-project',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  logging.projects.metrics.create(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // The resource name of the metric to delete:
    // "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
    metricName: 'projects/my-project/metrics/my-metric',  // TODO: Update placeholder value.

    auth: authClient,
  };

  logging.projects.metrics.delete(request, function(err) {
    if (err) {
      console.error(err);
      return;
    }
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // The resource name of the desired metric:
    // "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
    metricName: 'projects/my-project/metrics/my-metric',  // TODO: Update placeholder value.

    auth: authClient,
  };

  logging.projects.metrics.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // Required. The name of the project containing the metrics:
    // "projects/[PROJECT_ID]"
    parent: 'projects/my-project',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var metricsPage = response['metrics'];
    if (!metricsPage) {
      return;
    }
    for (var i = 0; i < metricsPage.length; i++) {
      // TODO: Change code below to process each resource in `metricsPage`:
      console.log(JSON.stringify(metricsPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      logging.projects.metrics.list(request, handlePage);
    }
  };

  logging.projects.metrics.list(request, handlePage);
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // The resource name of the metric to update:
    // "projects/[PROJECT_ID]/metrics/[METRIC_ID]"
    // The updated metric must be provided in the request and it's name field must be the same as
    // [METRIC_ID] If the metric does not exist in [PROJECT_ID], then a new metric is created.
    metricName: 'projects/my-project/metrics/my-metric',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  logging.projects.metrics.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // Required. The resource in which to create the sink:
    // "projects/[PROJECT_ID]"
    // "organizations/[ORGANIZATION_ID]"
    // Examples: "projects/my-logging-project", "organizations/123456789".
    parent: 'projects/my-project',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body.
    },

    auth: authClient,
  };

  logging.projects.sinks.create(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // Required. The full resource name of the sink to delete, including the parent resource and the sink
    // identifier:
    // "projects/[PROJECT_ID]/sinks/[SINK_ID]"
    // "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
    // It is an error if the sink does not exist. Example: "projects/my-project-id/sinks/my-sink-id". It
    // is an error if the sink does not exist.
    sinkName: 'projects/my-project/sinks/my-sink',  // TODO: Update placeholder value.

    auth: authClient,
  };

  logging.projects.sinks.delete(request, function(err) {
    if (err) {
      console.error(err);
      return;
    }
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // Required. The parent resource name of the sink:
    // "projects/[PROJECT_ID]/sinks/[SINK_ID]"
    // "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
    // Example: "projects/my-project-id/sinks/my-sink-id".
    sinkName: 'projects/my-project/sinks/my-sink',  // TODO: Update placeholder value.

    auth: authClient,
  };

  logging.projects.sinks.get(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // Required. The parent resource whose sinks are to be listed. Examples:
    // "projects/my-logging-project", "organizations/123456789".
    parent: 'projects/my-project',  // TODO: Update placeholder value.

    auth: authClient,
  };

  var handlePage = function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    var sinksPage = response['sinks'];
    if (!sinksPage) {
      return;
    }
    for (var i = 0; i < sinksPage.length; i++) {
      // TODO: Change code below to process each resource in `sinksPage`:
      console.log(JSON.stringify(sinksPage[i], null, 2));
    }

    if (response.nextPageToken) {
      request.pageToken = response.nextPageToken;
      logging.projects.sinks.list(request, handlePage);
    }
  };

  logging.projects.sinks.list(request, handlePage);
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Stackdriver Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install the Node.js client library by running
//    `npm install googleapis --save`

var google = require('googleapis');
var logging = google.logging('v2beta1');

authorize(function(authClient) {
  var request = {
    // Required. The full resource name of the sink to update, including the parent resource and the sink
    // identifier:
    // "projects/[PROJECT_ID]/sinks/[SINK_ID]"
    // "organizations/[ORGANIZATION_ID]/sinks/[SINK_ID]"
    // Example: "projects/my-project-id/sinks/my-sink-id".
    sinkName: 'projects/my-project/sinks/my-sink',  // TODO: Update placeholder value.

    resource: {
      // TODO: Add desired properties to the request body. All existing properties
      // will be replaced.
    },

    auth: authClient,
  };

  logging.projects.sinks.update(request, function(err, response) {
    if (err) {
      console.error(err);
      return;
    }

    // TODO: Change code below to process the `response` object:
    console.log(JSON.stringify(response, null, 2));
  });
});

function authorize(callback) {
  google.auth.getApplicationDefault(function(err, authClient) {
    if (err) {
      console.error('authentication failed: ', err);
      return;
    }
    if (authClient.createScopedRequired && authClient.createScopedRequired()) {
      var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
      authClient = authClient.createScoped(scopes);
    }
    callback(authClient);
  });
}
