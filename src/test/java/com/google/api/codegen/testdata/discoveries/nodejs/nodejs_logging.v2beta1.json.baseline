
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var logging = google.logging('v2beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'list' method:

    resource: {},
    // Auth client
    auth: authClient
  };


  var recur = function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      if (result.nextPageToken) {
        request.pageToken = result.nextPageToken;
        logging.entries.list(request, recur);
      }
    }
  };

  logging.entries.list(request, recur);
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var logging = google.logging('v2beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'write' method:

    resource: {},
    // Auth client
    auth: authClient
  };

  logging.entries.write(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var logging = google.logging('v2beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'list' method:

    // Auth client
    auth: authClient
  };


  var recur = function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      if (result.nextPageToken) {
        request.pageToken = result.nextPageToken;
        logging.monitoredResourceDescriptors.list(request, recur);
      }
    }
  };

  logging.monitoredResourceDescriptors.list(request, recur);
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var logging = google.logging('v2beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

    // Required. The resource name of the log to delete. Example: `"projects/my-project/logs/syslog"`.
    logName: "projects/{MY-PROJECT}/logs/{MY-LOG}",
    // Auth client
    auth: authClient
  };

  logging.projects.logs.delete(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var logging = google.logging('v2beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'create' method:

    // The resource name of the project in which to create the metric. Example: `"projects/my-project-id"`.
    // The new metric must be provided in the request.
    projectName: "projects/{MY-PROJECT}",
    resource: {},
    // Auth client
    auth: authClient
  };

  logging.projects.metrics.create(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var logging = google.logging('v2beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

    // The resource name of the metric to delete. Example: `"projects/my-project-id/metrics/my-metric-id"`.
    metricName: "projects/{MY-PROJECT}/metrics/{MY-METRIC}",
    // Auth client
    auth: authClient
  };

  logging.projects.metrics.delete(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var logging = google.logging('v2beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'get' method:

    // The resource name of the desired metric. Example: `"projects/my-project-id/metrics/my-metric-id"`.
    metricName: "projects/{MY-PROJECT}/metrics/{MY-METRIC}",
    // Auth client
    auth: authClient
  };

  logging.projects.metrics.get(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var logging = google.logging('v2beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'list' method:

    // Required. The resource name of the project containing the metrics. Example:
    // `"projects/my-project-id"`.
    projectName: "projects/{MY-PROJECT}",
    // Auth client
    auth: authClient
  };


  var recur = function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      if (result.nextPageToken) {
        request.pageToken = result.nextPageToken;
        logging.projects.metrics.list(request, recur);
      }
    }
  };

  logging.projects.metrics.list(request, recur);
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var logging = google.logging('v2beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'update' method:

    // The resource name of the metric to update. Example: `"projects/my-project-id/metrics/my-metric-id"`.
    // The updated metric must be provided in the request and have the same identifier that is specified in
    // `metricName`. If the metric does not exist, it is created.
    metricName: "projects/{MY-PROJECT}/metrics/{MY-METRIC}",
    resource: {},
    // Auth client
    auth: authClient
  };

  logging.projects.metrics.update(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var logging = google.logging('v2beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'create' method:

    // The resource name of the project in which to create the sink. Example: `"projects/my-project-id"`.
    // The new sink must be provided in the request.
    projectName: "projects/{MY-PROJECT}",
    resource: {},
    // Auth client
    auth: authClient
  };

  logging.projects.sinks.create(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var logging = google.logging('v2beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

    // The resource name of the sink to delete. Example: `"projects/my-project-id/sinks/my-sink-id"`.
    sinkName: "projects/{MY-PROJECT}/sinks/{MY-SINK}",
    // Auth client
    auth: authClient
  };

  logging.projects.sinks.delete(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var logging = google.logging('v2beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'get' method:

    // The resource name of the sink to return. Example: `"projects/my-project-id/sinks/my-sink-id"`.
    sinkName: "projects/{MY-PROJECT}/sinks/{MY-SINK}",
    // Auth client
    auth: authClient
  };

  logging.projects.sinks.get(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var logging = google.logging('v2beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'list' method:

    // Required. The resource name of the project containing the sinks. Example:
    // `"projects/my-logging-project"`, `"projects/01234567890"`.
    projectName: "projects/{MY-PROJECT}",
    // Auth client
    auth: authClient
  };


  var recur = function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
      if (result.nextPageToken) {
        request.pageToken = result.nextPageToken;
        logging.projects.sinks.list(request, recur);
      }
    }
  };

  logging.projects.sinks.list(request, recur);
});
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Logging API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/logging
// 2. This sample uses Application Default Credentials for Auth.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'npm install googleapis --save'
var google = require('googleapis');
var logging = google.logging('v2beta1');

google.auth.getApplicationDefault(function(err, authClient) {
  if (err) {
    console.log('Authentication failed because of ', err);
    return;
  }
  if (authClient.createScopedRequired && authClient.createScopedRequired()) {
    var scopes = ['https://www.googleapis.com/auth/cloud-platform'];
    authClient = authClient.createScoped(scopes);
  }

  var request = {
    // TODO: Change placeholders below to appropriate parameter values for the 'update' method:

    // The resource name of the sink to update. Example: `"projects/my-project-id/sinks/my-sink-id"`. The
    // updated sink must be provided in the request and have the same name that is specified in `sinkName`.
    // If the sink does not exist, it is created.
    sinkName: "projects/{MY-PROJECT}/sinks/{MY-SINK}",
    resource: {},
    // Auth client
    auth: authClient
  };

  logging.projects.sinks.update(request, function(err, result) {
    if (err) {
      console.log(err);
    } else {
      console.log(result);
    }
  });
});
