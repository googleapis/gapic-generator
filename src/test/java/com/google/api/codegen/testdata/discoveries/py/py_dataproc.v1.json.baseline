
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `create` method:

# [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
projectId = '{MY-PROJECT-ID}'

# [Required] The Cloud Dataproc region in which to handle the request.
region = '{MY-REGION}'


cluster_body = {
    # TODO: Add desired entries of the request body.
}


request = service.projects().regions().clusters().create(projectId=projectId, region=region, body=cluster_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
projectId = '{MY-PROJECT-ID}'

# [Required] The Cloud Dataproc region in which to handle the request.
region = '{MY-REGION}'

# [Required] The cluster name.
clusterName = '{MY-CLUSTER-NAME}'


request = service.projects().regions().clusters().delete(projectId=projectId, region=region, clusterName=clusterName)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `diagnose` method:

# [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
projectId = '{MY-PROJECT-ID}'

# [Required] The Cloud Dataproc region in which to handle the request.
region = '{MY-REGION}'

# [Required] The cluster name.
clusterName = '{MY-CLUSTER-NAME}'


diagnose_cluster_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.projects().regions().clusters().diagnose(projectId=projectId, region=region, clusterName=clusterName, body=diagnose_cluster_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
projectId = '{MY-PROJECT-ID}'

# [Required] The Cloud Dataproc region in which to handle the request.
region = '{MY-REGION}'

# [Required] The cluster name.
clusterName = '{MY-CLUSTER-NAME}'


request = service.projects().regions().clusters().get(projectId=projectId, region=region, clusterName=clusterName)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
projectId = '{MY-PROJECT-ID}'

# [Required] The Cloud Dataproc region in which to handle the request.
region = '{MY-REGION}'


clusters = service.projects().regions().clusters()
request = clusters.list(projectId=projectId, region=region)
while request is not None:
    response = request.execute()

    for cluster in response['clusters']:
        # TODO: Change code below to process each `cluster` resource:
        pprint(cluster)

    request = clusters.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `patch` method:

# [Required] The ID of the Google Cloud Platform project the cluster belongs to.
projectId = '{MY-PROJECT-ID}'

# [Required] The Cloud Dataproc region in which to handle the request.
region = '{MY-REGION}'

# [Required] The cluster name.
clusterName = '{MY-CLUSTER-NAME}'


cluster_body = {
    # TODO: Add desired entries of the request body to be changed.
}


request = service.projects().regions().clusters().patch(projectId=projectId, region=region, clusterName=clusterName, body=cluster_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `cancel` method:

# [Required] The ID of the Google Cloud Platform project that the job belongs to.
projectId = '{MY-PROJECT-ID}'

# [Required] The Cloud Dataproc region in which to handle the request.
region = '{MY-REGION}'

# [Required] The job ID.
jobId = '{MY-JOB-ID}'


cancel_job_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.projects().regions().jobs().cancel(projectId=projectId, region=region, jobId=jobId, body=cancel_job_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `delete` method:

# [Required] The ID of the Google Cloud Platform project that the job belongs to.
projectId = '{MY-PROJECT-ID}'

# [Required] The Cloud Dataproc region in which to handle the request.
region = '{MY-REGION}'

# [Required] The job ID.
jobId = '{MY-JOB-ID}'


request = service.projects().regions().jobs().delete(projectId=projectId, region=region, jobId=jobId)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `get` method:

# [Required] The ID of the Google Cloud Platform project that the job belongs to.
projectId = '{MY-PROJECT-ID}'

# [Required] The Cloud Dataproc region in which to handle the request.
region = '{MY-REGION}'

# [Required] The job ID.
jobId = '{MY-JOB-ID}'


request = service.projects().regions().jobs().get(projectId=projectId, region=region, jobId=jobId)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `list` method:

# [Required] The ID of the Google Cloud Platform project that the job belongs to.
projectId = '{MY-PROJECT-ID}'

# [Required] The Cloud Dataproc region in which to handle the request.
region = '{MY-REGION}'


jobs = service.projects().regions().jobs()
request = jobs.list(projectId=projectId, region=region)
while request is not None:
    response = request.execute()

    for job in response['jobs']:
        # TODO: Change code below to process each `job` resource:
        pprint(job)

    request = jobs.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to desired parameter values for the `submit` method:

# [Required] The ID of the Google Cloud Platform project that the job belongs to.
projectId = '{MY-PROJECT-ID}'

# [Required] The Cloud Dataproc region in which to handle the request.
region = '{MY-REGION}'


submit_job_request_body = {
    # TODO: Add desired entries of the request body.
}


request = service.projects().regions().jobs().submit(projectId=projectId, region=region, body=submit_job_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `cancel` method:

# The name of the operation resource to be cancelled.
name = 'projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}'


request = service.projects().regions().operations().cancel(name=name)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `delete` method:

# The name of the operation resource to be deleted.
name = 'projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}'


request = service.projects().regions().operations().delete(name=name)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `get` method:

# The name of the operation resource.
name = 'projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}'


request = service.projects().regions().operations().get(name=name)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   `gcloud beta auth application-default login`
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials


# Use Application Default Credentials for authentication when running locally.
# For more information, see:
# https://developers.google.com/identity/protocols/application-default-credentials
credentials = GoogleCredentials.get_application_default()

service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholder below to desired parameter value for the `list` method:

# The name of the operation collection.
name = '{MY-NAME}'


operations = service.projects().regions().operations()
request = operations.list(name=name)
while request is not None:
    response = request.execute()

    for operation in response['operations']:
        # TODO: Change code below to process each `operation` resource:
        pprint(operation)

    request = operations.list_next(previous_request=request, previous_response=response)
