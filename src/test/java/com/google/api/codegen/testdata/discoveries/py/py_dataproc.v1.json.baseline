
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the dataproc service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'create' method:

# * [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
projectId = ''

# * [Required] The Cloud Dataproc region in which to handle the request.
region = ''

cluster_body = {
# TODO: Add desired entries of the 'cluster_body' dict
}

request = service.projects().regions().clusters().create(projectId=projectId, region=region, body=cluster_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the dataproc service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
projectId = ''

# * [Required] The Cloud Dataproc region in which to handle the request.
region = ''

# * [Required] The cluster name.
clusterName = ''

request = service.projects().regions().clusters().delete(projectId=projectId, region=region, clusterName=clusterName)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the dataproc service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'diagnose' method:

# * [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
projectId = ''

# * [Required] The Cloud Dataproc region in which to handle the request.
region = ''

# * [Required] The cluster name.
clusterName = ''

diagnose_cluster_request_body = {
# TODO: Add desired entries of the 'diagnose_cluster_request_body' dict
}

request = service.projects().regions().clusters().diagnose(projectId=projectId, region=region, clusterName=clusterName, body=diagnose_cluster_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the dataproc service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
projectId = ''

# * [Required] The Cloud Dataproc region in which to handle the request.
region = ''

# * [Required] The cluster name.
clusterName = ''

request = service.projects().regions().clusters().get(projectId=projectId, region=region, clusterName=clusterName)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the dataproc service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
projectId = ''

# * [Required] The Cloud Dataproc region in which to handle the request.
region = ''

clusters = service.projects().regions().clusters()
request = clusters.list(projectId=projectId, region=region)
while request is not None:
    response = request.execute()

    for cluster in response['clusters']:
        # TODO: Add code here to process each 'cluster' resource

    request = clusters.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the dataproc service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'patch' method:

# * [Required] The ID of the Google Cloud Platform project the cluster belongs to.
projectId = ''

# * [Required] The Cloud Dataproc region in which to handle the request.
region = ''

# * [Required] The cluster name.
clusterName = ''

cluster_body = {
# TODO: Add desired entries of the 'cluster_body' dict to be changed
}

request = service.projects().regions().clusters().patch(projectId=projectId, region=region, clusterName=clusterName, body=cluster_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the dataproc service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'cancel' method:

# * [Required] The ID of the Google Cloud Platform project that the job belongs to.
projectId = ''

# * [Required] The Cloud Dataproc region in which to handle the request.
region = ''

# * [Required] The job ID.
jobId = ''

cancel_job_request_body = {
# TODO: Add desired entries of the 'cancel_job_request_body' dict
}

request = service.projects().regions().jobs().cancel(projectId=projectId, region=region, jobId=jobId, body=cancel_job_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the dataproc service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * [Required] The ID of the Google Cloud Platform project that the job belongs to.
projectId = ''

# * [Required] The Cloud Dataproc region in which to handle the request.
region = ''

# * [Required] The job ID.
jobId = ''

request = service.projects().regions().jobs().delete(projectId=projectId, region=region, jobId=jobId)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the dataproc service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * [Required] The ID of the Google Cloud Platform project that the job belongs to.
projectId = ''

# * [Required] The Cloud Dataproc region in which to handle the request.
region = ''

# * [Required] The job ID.
jobId = ''

request = service.projects().regions().jobs().get(projectId=projectId, region=region, jobId=jobId)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the dataproc service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * [Required] The ID of the Google Cloud Platform project that the job belongs to.
projectId = ''

# * [Required] The Cloud Dataproc region in which to handle the request.
region = ''

jobs = service.projects().regions().jobs()
request = jobs.list(projectId=projectId, region=region)
while request is not None:
    response = request.execute()

    for job in response['jobs']:
        # TODO: Add code here to process each 'job' resource

    request = jobs.list_next(previous_request=request, previous_response=response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the dataproc service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'submit' method:

# * [Required] The ID of the Google Cloud Platform project that the job belongs to.
projectId = ''

# * [Required] The Cloud Dataproc region in which to handle the request.
region = ''

submit_job_request_body = {
# TODO: Add desired entries of the 'submit_job_request_body' dict
}

request = service.projects().regions().jobs().submit(projectId=projectId, region=region, body=submit_job_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the dataproc service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'cancel' method:

# * The name of the operation resource to be cancelled.
name = 'projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}'

request = service.projects().regions().operations().cancel(name=name)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the dataproc service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * The name of the operation resource to be deleted.
name = 'projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}'

request = service.projects().regions().operations().delete(name=name)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the dataproc service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * The name of the operation resource.
name = 'projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}'

request = service.projects().regions().operations().get(name=name)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Google Cloud Dataproc API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/dataproc
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the dataproc service object (version v1) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('dataproc', 'v1', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * The name of the operation collection.
name = ''

operations = service.projects().regions().operations()
request = operations.list(name=name)
while request is not None:
    response = request.execute()

    for operation in response['operations']:
        # TODO: Add code here to process each 'operation' resource

    request = operations.list_next(previous_request=request, previous_response=response)
