============== file: test/test.js ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';

var assert = require('assert');
var libraryV1 = require('../src/v1')();
var through2 = require('through2');

var FAKE_STATUS_CODE = 1;
var error = new Error();
error.code = FAKE_STATUS_CODE;

describe('LibraryServiceClient', function() {
  describe('createShelf', function() {
    it('invokes createShelf without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var shelf = {};
      var request = {
          shelf : shelf
      };

      // Mock response
      var name = 'name3373707';
      var theme = 'theme110327241';
      var internalTheme = 'internalTheme792518087';
      var expectedResponse = {
          name : name,
          theme : theme,
          internalTheme : internalTheme
      };

      // Mock Grpc layer
      client._createShelf = mockSimpleGrpcMethod(request, expectedResponse);

      client.createShelf(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes createShelf with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var shelf = {};
      var request = {
          shelf : shelf
      };

      // Mock Grpc layer
      client._createShelf = mockSimpleGrpcMethod(request, null, error);

      client.createShelf(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('getShelf', function() {
    it('invokes getShelf without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.shelfPath("[SHELF_ID]");
      var options = 'options-1249474914';
      var request = {
          name : formattedName,
          options : options
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var theme = 'theme110327241';
      var internalTheme = 'internalTheme792518087';
      var expectedResponse = {
          name : name2,
          theme : theme,
          internalTheme : internalTheme
      };

      // Mock Grpc layer
      client._getShelf = mockSimpleGrpcMethod(request, expectedResponse);

      client.getShelf(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getShelf with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.shelfPath("[SHELF_ID]");
      var options = 'options-1249474914';
      var request = {
          name : formattedName,
          options : options
      };

      // Mock Grpc layer
      client._getShelf = mockSimpleGrpcMethod(request, null, error);

      client.getShelf(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('listShelves', function() {
    it('invokes listShelves without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var request = {};

      // Mock response
      var nextPageToken = '';
      var shelvesElement = {};
      var shelves = [shelvesElement];
      var expectedResponse = {
          nextPageToken : nextPageToken,
          shelves : shelves
      };

      // Mock Grpc layer
      client._listShelves = function(actualRequest, options, callback) {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse.shelves);
      };

      client.listShelves(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse.shelves);
        done();
      });
    });

    it('invokes listShelves with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var request = {};

      // Mock Grpc layer
      client._listShelves = mockSimpleGrpcMethod(request, null, error);

      client.listShelves(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('deleteShelf', function() {
    it('invokes deleteShelf without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.shelfPath("[SHELF_ID]");
      var request = {
          name : formattedName
      };

      // Mock Grpc layer
      client._deleteShelf = mockSimpleGrpcMethod(request);

      client.deleteShelf(request, function(err) {
        assert.ifError(err);
        done();
      });
    });

    it('invokes deleteShelf with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.shelfPath("[SHELF_ID]");
      var request = {
          name : formattedName
      };

      // Mock Grpc layer
      client._deleteShelf = mockSimpleGrpcMethod(request, null, error);

      client.deleteShelf(request, function(err) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('mergeShelves', function() {
    it('invokes mergeShelves without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.shelfPath("[SHELF_ID]");
      var formattedOtherShelfName = client.shelfPath("[SHELF_ID]");
      var request = {
          name : formattedName,
          otherShelfName : formattedOtherShelfName
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var theme = 'theme110327241';
      var internalTheme = 'internalTheme792518087';
      var expectedResponse = {
          name : name2,
          theme : theme,
          internalTheme : internalTheme
      };

      // Mock Grpc layer
      client._mergeShelves = mockSimpleGrpcMethod(request, expectedResponse);

      client.mergeShelves(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes mergeShelves with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.shelfPath("[SHELF_ID]");
      var formattedOtherShelfName = client.shelfPath("[SHELF_ID]");
      var request = {
          name : formattedName,
          otherShelfName : formattedOtherShelfName
      };

      // Mock Grpc layer
      client._mergeShelves = mockSimpleGrpcMethod(request, null, error);

      client.mergeShelves(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('createBook', function() {
    it('invokes createBook without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.shelfPath("[SHELF_ID]");
      var book = {};
      var request = {
          name : formattedName,
          book : book
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
          name : name2,
          author : author,
          title : title,
          read : read
      };

      // Mock Grpc layer
      client._createBook = mockSimpleGrpcMethod(request, expectedResponse);

      client.createBook(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes createBook with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.shelfPath("[SHELF_ID]");
      var book = {};
      var request = {
          name : formattedName,
          book : book
      };

      // Mock Grpc layer
      client._createBook = mockSimpleGrpcMethod(request, null, error);

      client.createBook(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('publishSeries', function() {
    it('invokes publishSeries without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var shelf = {};
      var books = [];
      var seriesString = 'foobar';
      var seriesUuid = {
          seriesString : seriesString
      };
      var request = {
          shelf : shelf,
          books : books,
          seriesUuid : seriesUuid
      };

      // Mock response
      var bookNamesElement = 'bookNamesElement1491670575';
      var bookNames = [bookNamesElement];
      var expectedResponse = {
          bookNames : bookNames
      };

      // Mock Grpc layer
      client._publishSeries = mockSimpleGrpcMethod(request, expectedResponse);

      client.publishSeries(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes publishSeries with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var shelf = {};
      var books = [];
      var seriesString = 'foobar';
      var seriesUuid = {
          seriesString : seriesString
      };
      var request = {
          shelf : shelf,
          books : books,
          seriesUuid : seriesUuid
      };

      // Mock Grpc layer
      client._publishSeries = mockSimpleGrpcMethod(request, null, error);

      client.publishSeries(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('getBook', function() {
    it('invokes getBook without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var request = {
          name : formattedName
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
          name : name2,
          author : author,
          title : title,
          read : read
      };

      // Mock Grpc layer
      client._getBook = mockSimpleGrpcMethod(request, expectedResponse);

      client.getBook(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getBook with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var request = {
          name : formattedName
      };

      // Mock Grpc layer
      client._getBook = mockSimpleGrpcMethod(request, null, error);

      client.getBook(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('listBooks', function() {
    it('invokes listBooks without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.shelfPath("[SHELF_ID]");
      var request = {
          name : formattedName
      };

      // Mock response
      var nextPageToken = '';
      var booksElement = {};
      var books = [booksElement];
      var expectedResponse = {
          nextPageToken : nextPageToken,
          books : books
      };

      // Mock Grpc layer
      client._listBooks = function(actualRequest, options, callback) {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse.books);
      };

      client.listBooks(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse.books);
        done();
      });
    });

    it('invokes listBooks with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.shelfPath("[SHELF_ID]");
      var request = {
          name : formattedName
      };

      // Mock Grpc layer
      client._listBooks = mockSimpleGrpcMethod(request, null, error);

      client.listBooks(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('deleteBook', function() {
    it('invokes deleteBook without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var request = {
          name : formattedName
      };

      // Mock Grpc layer
      client._deleteBook = mockSimpleGrpcMethod(request);

      client.deleteBook(request, function(err) {
        assert.ifError(err);
        done();
      });
    });

    it('invokes deleteBook with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var request = {
          name : formattedName
      };

      // Mock Grpc layer
      client._deleteBook = mockSimpleGrpcMethod(request, null, error);

      client.deleteBook(request, function(err) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('updateBook', function() {
    it('invokes updateBook without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var book = {};
      var request = {
          name : formattedName,
          book : book
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
          name : name2,
          author : author,
          title : title,
          read : read
      };

      // Mock Grpc layer
      client._updateBook = mockSimpleGrpcMethod(request, expectedResponse);

      client.updateBook(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes updateBook with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var book = {};
      var request = {
          name : formattedName,
          book : book
      };

      // Mock Grpc layer
      client._updateBook = mockSimpleGrpcMethod(request, null, error);

      client.updateBook(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('moveBook', function() {
    it('invokes moveBook without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var formattedOtherShelfName = client.shelfPath("[SHELF_ID]");
      var request = {
          name : formattedName,
          otherShelfName : formattedOtherShelfName
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
          name : name2,
          author : author,
          title : title,
          read : read
      };

      // Mock Grpc layer
      client._moveBook = mockSimpleGrpcMethod(request, expectedResponse);

      client.moveBook(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes moveBook with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var formattedOtherShelfName = client.shelfPath("[SHELF_ID]");
      var request = {
          name : formattedName,
          otherShelfName : formattedOtherShelfName
      };

      // Mock Grpc layer
      client._moveBook = mockSimpleGrpcMethod(request, null, error);

      client.moveBook(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('listStrings', function() {
    it('invokes listStrings without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var request = {};

      // Mock response
      var nextPageToken = '';
      var stringsElement = 'stringsElement474465855';
      var strings = [stringsElement];
      var expectedResponse = {
          nextPageToken : nextPageToken,
          strings : strings
      };

      // Mock Grpc layer
      client._listStrings = function(actualRequest, options, callback) {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse.strings);
      };

      client.listStrings(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse.strings);
        done();
      });
    });

    it('invokes listStrings with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var request = {};

      // Mock Grpc layer
      client._listStrings = mockSimpleGrpcMethod(request, null, error);

      client.listStrings(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('addComments', function() {
    it('invokes addComments without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var comment = '95';
      var stage = libraryV1.Comment.Stage.UNSET;
      var alignment = libraryV1.SomeMessage2.SomeMessage3.Alignment.CHAR;
      var commentsElement = {
          comment : comment,
          stage : stage,
          alignment : alignment
      };
      var comments = [commentsElement];
      var request = {
          name : formattedName,
          comments : comments
      };

      // Mock Grpc layer
      client._addComments = mockSimpleGrpcMethod(request);

      client.addComments(request, function(err) {
        assert.ifError(err);
        done();
      });
    });

    it('invokes addComments with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var comment = '95';
      var stage = libraryV1.Comment.Stage.UNSET;
      var alignment = libraryV1.SomeMessage2.SomeMessage3.Alignment.CHAR;
      var commentsElement = {
          comment : comment,
          stage : stage,
          alignment : alignment
      };
      var comments = [commentsElement];
      var request = {
          name : formattedName,
          comments : comments
      };

      // Mock Grpc layer
      client._addComments = mockSimpleGrpcMethod(request, null, error);

      client.addComments(request, function(err) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('getBookFromArchive', function() {
    it('invokes getBookFromArchive without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.archivedBookPath("[ARCHIVE_PATH]", "[BOOK_ID]");
      var request = {
          name : formattedName
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
          name : name2,
          author : author,
          title : title,
          read : read
      };

      // Mock Grpc layer
      client._getBookFromArchive = mockSimpleGrpcMethod(request, expectedResponse);

      client.getBookFromArchive(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getBookFromArchive with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.archivedBookPath("[ARCHIVE_PATH]", "[BOOK_ID]");
      var request = {
          name : formattedName
      };

      // Mock Grpc layer
      client._getBookFromArchive = mockSimpleGrpcMethod(request, null, error);

      client.getBookFromArchive(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('getBookFromAnywhere', function() {
    it('invokes getBookFromAnywhere without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var formattedAltBookName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var request = {
          name : formattedName,
          altBookName : formattedAltBookName
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
          name : name2,
          author : author,
          title : title,
          read : read
      };

      // Mock Grpc layer
      client._getBookFromAnywhere = mockSimpleGrpcMethod(request, expectedResponse);

      client.getBookFromAnywhere(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes getBookFromAnywhere with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var formattedAltBookName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var request = {
          name : formattedName,
          altBookName : formattedAltBookName
      };

      // Mock Grpc layer
      client._getBookFromAnywhere = mockSimpleGrpcMethod(request, null, error);

      client.getBookFromAnywhere(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('updateBookIndex', function() {
    it('invokes updateBookIndex without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var indexName = 'default index';
      var indexMapItem = 'indexMapItem1918721251';
      var indexMap = {'default_key' : indexMapItem,};
      var request = {
          name : formattedName,
          indexName : indexName,
          indexMap : indexMap
      };

      // Mock Grpc layer
      client._updateBookIndex = mockSimpleGrpcMethod(request);

      client.updateBookIndex(request, function(err) {
        assert.ifError(err);
        done();
      });
    });

    it('invokes updateBookIndex with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var indexName = 'default index';
      var indexMapItem = 'indexMapItem1918721251';
      var indexMap = {'default_key' : indexMapItem,};
      var request = {
          name : formattedName,
          indexName : indexName,
          indexMap : indexMap
      };

      // Mock Grpc layer
      client._updateBookIndex = mockSimpleGrpcMethod(request, null, error);

      client.updateBookIndex(request, function(err) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('streamShelves', function() {
    it('invokes streamShelves without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var request = {};

      // Mock response
      var shelvesElement = {};
      var shelves = [shelvesElement];
      var expectedResponse = {
          shelves : shelves
      };

      // Mock Grpc layer
      client._streamShelves = mockServerStreamingGrpcMethod(request, expectedResponse);

      client.streamShelves(request).on('data', function(response) {
        assert.deepStrictEqual(response, expectedResponse);
        done()
      }).on('error', function(err) {
        done(err);
      });
    });

    it('invokes streamShelves with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var request = {};

      // Mock Grpc layer
      client._streamShelves = mockServerStreamingGrpcMethod(request, null, error);

      client.streamShelves(request).on('data', function(response) {
        assert.fail();
      }).on('error', function(err) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('streamBooks', function() {
    it('invokes streamBooks without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var name = 'name3373707';
      var request = {
          name : name
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
          name : name2,
          author : author,
          title : title,
          read : read
      };

      // Mock Grpc layer
      client._streamBooks = mockServerStreamingGrpcMethod(request, expectedResponse);

      client.streamBooks(request).on('data', function(response) {
        assert.deepStrictEqual(response, expectedResponse);
        done()
      }).on('error', function(err) {
        done(err);
      });
    });

    it('invokes streamBooks with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var name = 'name3373707';
      var request = {
          name : name
      };

      // Mock Grpc layer
      client._streamBooks = mockServerStreamingGrpcMethod(request, null, error);

      client.streamBooks(request).on('data', function(response) {
        assert.fail();
      }).on('error', function(err) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('discussBook', function() {
    it('invokes discussBook without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var name = 'name3373707';
      var request = {
          name : name
      };

      // Mock response
      var userName = 'userName339340927';
      var comment = '95';
      var expectedResponse = {
          userName : userName,
          comment : comment
      };

      // Mock Grpc layer
      client._discussBook = mockBidiStreamingGrpcMethod(request, expectedResponse);

      var stream = client.discussBook().on('data', function(response) {
        assert.deepStrictEqual(response, expectedResponse);
        done()
      }).on('error', function(err) {
        done(err);
      });

      stream.write(request);
    });

    it('invokes discussBook with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var name = 'name3373707';
      var request = {
          name : name
      };

      // Mock Grpc layer
      client._discussBook = mockBidiStreamingGrpcMethod(request, null, error);

      var stream = client.discussBook().on('data', function(response) {
        assert.fail();
      }).on('error', function(err) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });

      stream.write(request);
    });
  });

  describe('findRelatedBooks', function() {
    it('invokes findRelatedBooks without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var namesElement = 'namesElement-249113339';
      var names = [namesElement];
      var shelves = [];
      var request = {
          names : names,
          shelves : shelves
      };

      // Mock response
      var nextPageToken = '';
      var namesElement2 = 'namesElement21120252792';
      var names2 = [namesElement2];
      var expectedResponse = {
          nextPageToken : nextPageToken,
          names : names2
      };

      // Mock Grpc layer
      client._findRelatedBooks = function(actualRequest, options, callback) {
        assert.deepStrictEqual(actualRequest, request);
        callback(null, expectedResponse.names);
      };

      client.findRelatedBooks(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse.names);
        done();
      });
    });

    it('invokes findRelatedBooks with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var namesElement = 'namesElement-249113339';
      var names = [namesElement];
      var shelves = [];
      var request = {
          names : names,
          shelves : shelves
      };

      // Mock Grpc layer
      client._findRelatedBooks = mockSimpleGrpcMethod(request, null, error);

      client.findRelatedBooks(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('addTag', function() {
    it('invokes addTag without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedResource = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var tag = 'tag114586';
      var request = {
          resource : formattedResource,
          tag : tag
      };

      // Mock response
      var expectedResponse = {};

      // Mock Grpc layer
      client._addTag = mockSimpleGrpcMethod(request, expectedResponse);

      client.addTag(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes addTag with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedResource = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var tag = 'tag114586';
      var request = {
          resource : formattedResource,
          tag : tag
      };

      // Mock Grpc layer
      client._addTag = mockSimpleGrpcMethod(request, null, error);

      client.addTag(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('addLabel', function() {
    it('invokes addLabel without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedResource = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var label = 'label102727412';
      var request = {
          resource : formattedResource,
          label : label
      };

      // Mock response
      var expectedResponse = {};

      // Mock Grpc layer
      client._addLabel = mockSimpleGrpcMethod(request, expectedResponse);

      client.addLabel(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes addLabel with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedResource = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var label = 'label102727412';
      var request = {
          resource : formattedResource,
          label : label
      };

      // Mock Grpc layer
      client._addLabel = mockSimpleGrpcMethod(request, null, error);

      client.addLabel(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('getBigBook', function() {
    it('invokes getBigBook without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var request = {
          name : formattedName
      };

      // Mock response
      var name2 = 'name2-1052831874';
      var author = 'author-1406328437';
      var title = 'title110371416';
      var read = true;
      var expectedResponse = {
          name : name2,
          author : author,
          title : title,
          read : read
      };

      // Mock Grpc layer
      client._getBigBook = mockLongRunningGrpcMethod(request, expectedResponse);

      client.getBigBook(request).then(function(responses) {
        var operation = responses[0];
        return operation.promise();
      }).then(function(responses) {
        assert.deepStrictEqual(responses[0], expectedResponse);
        done();
      }).catch(function(err) {
        done(err);
      });
    });

    it('invokes getBigBook with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var request = {
          name : formattedName
      };

      // Mock Grpc layer
      client._getBigBook = mockLongRunningGrpcMethod(request, null, error);

      client.getBigBook(request).then(function(responses) {
        var operation = responses[0];
        return operation.promise();
      }).then(function(responses) {
        assert.fail();
      }).catch(function(err) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('getBigNothing', function() {
    it('invokes getBigNothing without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var request = {
          name : formattedName
      };

      // Mock response
      var expectedResponse = {};

      // Mock Grpc layer
      client._getBigNothing = mockLongRunningGrpcMethod(request, expectedResponse);

      client.getBigNothing(request).then(function(responses) {
        var operation = responses[0];
        return operation.promise();
      }).then(function(responses) {
        assert.deepStrictEqual(responses[0], expectedResponse);
        done();
      }).catch(function(err) {
        done(err);
      });
    });

    it('invokes getBigNothing with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var formattedName = client.bookPath("[SHELF_ID]", "[BOOK_ID]");
      var request = {
          name : formattedName
      };

      // Mock Grpc layer
      client._getBigNothing = mockLongRunningGrpcMethod(request, null, error);

      client.getBigNothing(request).then(function(responses) {
        var operation = responses[0];
        return operation.promise();
      }).then(function(responses) {
        assert.fail();
      }).catch(function(err) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

  describe('testOptionalRequiredFlatteningParams', function() {
    it('invokes testOptionalRequiredFlatteningParams without error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var requiredSingularInt32 = -72313594;
      var requiredSingularInt64 = -72313499;
      var requiredSingularFloat = -7514705.0;
      var requiredSingularDouble = 1.9111005E8;
      var requiredSingularBool = true;
      var requiredSingularEnum = libraryV1.TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
      var requiredSingularString = 'requiredSingularString-1949894503';
      var requiredSingularBytes = '-29';
      var requiredSingularMessage = {};
      var requiredSingularResourceName = 'requiredSingularResourceName-1701575020';
      var requiredSingularResourceNameOneof = 'requiredSingularResourceNameOneof-25303726';
      var requiredSingularFixed32 = 720656715;
      var requiredSingularFixed64 = 720656810;
      var requiredRepeatedInt32 = [];
      var requiredRepeatedInt64 = [];
      var requiredRepeatedFloat = [];
      var requiredRepeatedDouble = [];
      var requiredRepeatedBool = [];
      var requiredRepeatedEnum = [];
      var requiredRepeatedString = [];
      var requiredRepeatedBytes = [];
      var requiredRepeatedMessage = [];
      var formattedRequiredRepeatedResourceName = [];
      var formattedRequiredRepeatedResourceNameOneof = [];
      var requiredRepeatedFixed32 = [];
      var requiredRepeatedFixed64 = [];
      var requiredMap = {};
      var request = {
          requiredSingularInt32 : requiredSingularInt32,
          requiredSingularInt64 : requiredSingularInt64,
          requiredSingularFloat : requiredSingularFloat,
          requiredSingularDouble : requiredSingularDouble,
          requiredSingularBool : requiredSingularBool,
          requiredSingularEnum : requiredSingularEnum,
          requiredSingularString : requiredSingularString,
          requiredSingularBytes : requiredSingularBytes,
          requiredSingularMessage : requiredSingularMessage,
          requiredSingularResourceName : requiredSingularResourceName,
          requiredSingularResourceNameOneof : requiredSingularResourceNameOneof,
          requiredSingularFixed32 : requiredSingularFixed32,
          requiredSingularFixed64 : requiredSingularFixed64,
          requiredRepeatedInt32 : requiredRepeatedInt32,
          requiredRepeatedInt64 : requiredRepeatedInt64,
          requiredRepeatedFloat : requiredRepeatedFloat,
          requiredRepeatedDouble : requiredRepeatedDouble,
          requiredRepeatedBool : requiredRepeatedBool,
          requiredRepeatedEnum : requiredRepeatedEnum,
          requiredRepeatedString : requiredRepeatedString,
          requiredRepeatedBytes : requiredRepeatedBytes,
          requiredRepeatedMessage : requiredRepeatedMessage,
          requiredRepeatedResourceName : formattedRequiredRepeatedResourceName,
          requiredRepeatedResourceNameOneof : formattedRequiredRepeatedResourceNameOneof,
          requiredRepeatedFixed32 : requiredRepeatedFixed32,
          requiredRepeatedFixed64 : requiredRepeatedFixed64,
          requiredMap : requiredMap
      };

      // Mock response
      var expectedResponse = {};

      // Mock Grpc layer
      client._testOptionalRequiredFlatteningParams = mockSimpleGrpcMethod(request, expectedResponse);

      client.testOptionalRequiredFlatteningParams(request, function(err, response) {
        assert.ifError(err);
        assert.deepStrictEqual(response, expectedResponse);
        done();
      });
    });

    it('invokes testOptionalRequiredFlatteningParams with error', function(done) {
      var client = libraryV1.libraryServiceClient();
      // Mock request
      var requiredSingularInt32 = -72313594;
      var requiredSingularInt64 = -72313499;
      var requiredSingularFloat = -7514705.0;
      var requiredSingularDouble = 1.9111005E8;
      var requiredSingularBool = true;
      var requiredSingularEnum = libraryV1.TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
      var requiredSingularString = 'requiredSingularString-1949894503';
      var requiredSingularBytes = '-29';
      var requiredSingularMessage = {};
      var requiredSingularResourceName = 'requiredSingularResourceName-1701575020';
      var requiredSingularResourceNameOneof = 'requiredSingularResourceNameOneof-25303726';
      var requiredSingularFixed32 = 720656715;
      var requiredSingularFixed64 = 720656810;
      var requiredRepeatedInt32 = [];
      var requiredRepeatedInt64 = [];
      var requiredRepeatedFloat = [];
      var requiredRepeatedDouble = [];
      var requiredRepeatedBool = [];
      var requiredRepeatedEnum = [];
      var requiredRepeatedString = [];
      var requiredRepeatedBytes = [];
      var requiredRepeatedMessage = [];
      var formattedRequiredRepeatedResourceName = [];
      var formattedRequiredRepeatedResourceNameOneof = [];
      var requiredRepeatedFixed32 = [];
      var requiredRepeatedFixed64 = [];
      var requiredMap = {};
      var request = {
          requiredSingularInt32 : requiredSingularInt32,
          requiredSingularInt64 : requiredSingularInt64,
          requiredSingularFloat : requiredSingularFloat,
          requiredSingularDouble : requiredSingularDouble,
          requiredSingularBool : requiredSingularBool,
          requiredSingularEnum : requiredSingularEnum,
          requiredSingularString : requiredSingularString,
          requiredSingularBytes : requiredSingularBytes,
          requiredSingularMessage : requiredSingularMessage,
          requiredSingularResourceName : requiredSingularResourceName,
          requiredSingularResourceNameOneof : requiredSingularResourceNameOneof,
          requiredSingularFixed32 : requiredSingularFixed32,
          requiredSingularFixed64 : requiredSingularFixed64,
          requiredRepeatedInt32 : requiredRepeatedInt32,
          requiredRepeatedInt64 : requiredRepeatedInt64,
          requiredRepeatedFloat : requiredRepeatedFloat,
          requiredRepeatedDouble : requiredRepeatedDouble,
          requiredRepeatedBool : requiredRepeatedBool,
          requiredRepeatedEnum : requiredRepeatedEnum,
          requiredRepeatedString : requiredRepeatedString,
          requiredRepeatedBytes : requiredRepeatedBytes,
          requiredRepeatedMessage : requiredRepeatedMessage,
          requiredRepeatedResourceName : formattedRequiredRepeatedResourceName,
          requiredRepeatedResourceNameOneof : formattedRequiredRepeatedResourceNameOneof,
          requiredRepeatedFixed32 : requiredRepeatedFixed32,
          requiredRepeatedFixed64 : requiredRepeatedFixed64,
          requiredMap : requiredMap
      };

      // Mock Grpc layer
      client._testOptionalRequiredFlatteningParams = mockSimpleGrpcMethod(request, null, error);

      client.testOptionalRequiredFlatteningParams(request, function(err, response) {
        assert(err instanceof Error);
        assert.equal(err.code, FAKE_STATUS_CODE);
        done();
      });
    });
  });

});

function mockSimpleGrpcMethod(expectedRequest, response, error) {
  return function(actualRequest, options, callback) {
    assert.deepStrictEqual(actualRequest, expectedRequest);
    if (error) {
      callback(error);
    } else if (response) {
      callback(null, response);
    } else {
      callback(null);
    }
  };
}

function mockServerStreamingGrpcMethod(expectedRequest, response, error) {
  return function(actualRequest) {
    assert.deepStrictEqual(actualRequest, expectedRequest);
    var mockStream = through2.obj(function (chunk, enc, callback) {
      if (error) {
        callback(error);
      } else {
        callback(null, response);
      }
    });
    mockStream.write();
    return mockStream;
  };
}

function mockBidiStreamingGrpcMethod(expectedRequest, response, error) {
  return function() {
    var mockStream = through2.obj(function (chunk, enc, callback) {
      assert.deepStrictEqual(chunk, expectedRequest);
      if (error) {
        callback(error);
      } else {
        callback(null, response);
      }
    });
    return mockStream;
  }
}

function mockLongRunningGrpcMethod(expectedRequest, response, error) {
  return function(request) {
    assert.deepStrictEqual(request, expectedRequest);
    var mockOperation = {
      promise: function() {
        return new Promise(function(resolve, reject) {
          if (error) {
            reject(error);
          } else {
            resolve([response]);
          }
        });
      }
    };
    return Promise.resolve([mockOperation]);
  };
}

