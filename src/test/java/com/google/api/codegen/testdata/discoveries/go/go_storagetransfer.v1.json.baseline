
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storagetransferService, err := storagetransfer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  resp, err := storagetransferService.V1.GetGoogleServiceAccount().Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storagetransferService, err := storagetransfer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The ID of the Google Developers Console project that the Google service account is associated with.
  // Required.
  projectId := ""  // TODO: Update placeholder value.

  resp, err := storagetransferService.GoogleServiceAccounts.Get(projectId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storagetransferService, err := storagetransfer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  rb := &storagetransfer.TransferJob{
    // TODO: Add desired fields of the request body.
  }

  resp, err := storagetransferService.TransferJobs.Create(rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storagetransferService, err := storagetransfer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The job to get. Required.
  jobName := ""  // TODO: Update placeholder value.

  resp, err := storagetransferService.TransferJobs.Get(jobName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storagetransferService, err := storagetransfer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  req := storagetransferService.TransferJobs.List()
  if err := req.Pages(ctx, func(page *storagetransfer.ListTransferJobsResponse) error {
    for _, transferJob := range page.TransferJobs {
      // TODO: Change code below to process each `transferJob` resource:
      fmt.Printf("%#v\n", transferJob)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storagetransferService, err := storagetransfer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of job to update. Required.
  jobName := ""  // TODO: Update placeholder value.

  rb := &storagetransfer.UpdateTransferJobRequest{
    // TODO: Add desired fields of the request body to be changed. Only assigned
    // fields will be changed.
  }

  resp, err := storagetransferService.TransferJobs.Patch(jobName, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storagetransferService, err := storagetransfer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the operation resource to be cancelled.
  name := ""  // TODO: Update placeholder value.

  resp, err := storagetransferService.TransferOperations.Cancel(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storagetransferService, err := storagetransfer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the operation resource to be deleted.
  name := ""  // TODO: Update placeholder value.

  resp, err := storagetransferService.TransferOperations.Delete(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storagetransferService, err := storagetransfer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the operation resource.
  name := ""  // TODO: Update placeholder value.

  resp, err := storagetransferService.TransferOperations.Get(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storagetransferService, err := storagetransfer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The value `transferOperations`.
  name := ""  // TODO: Update placeholder value.

  req := storagetransferService.TransferOperations.List(name)
  if err := req.Pages(ctx, func(page *storagetransfer.ListOperationsResponse) error {
    for _, operation := range page.Operations {
      // TODO: Change code below to process each `operation` resource:
      fmt.Printf("%#v\n", operation)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storagetransferService, err := storagetransfer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the transfer operation. Required.
  name := ""  // TODO: Update placeholder value.

  rb := &storagetransfer.PauseTransferOperationRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := storagetransferService.TransferOperations.Pause(name, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  storagetransferService, err := storagetransfer.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the transfer operation. Required.
  name := ""  // TODO: Update placeholder value.

  rb := &storagetransfer.ResumeTransferOperationRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := storagetransferService.TransferOperations.Resume(name, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
