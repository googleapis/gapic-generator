
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storagetransfer/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storagetransfer.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  var (
  )

  response, err := client.V1.GetGoogleServiceAccount().Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storagetransfer/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storagetransfer.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // The ID of the Google Developers Console project that the Google service account is associated with.
    // Required.
    projectId = ""
  )

  response, err := client.GoogleServiceAccounts.Get(projectId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storagetransfer/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storagetransfer.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'create' method:
  var (

    requestBody = &storagetransfer.TransferJob{}
  )

  response, err := client.TransferJobs.Create(requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storagetransfer/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storagetransfer.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // The job to get. Required.
    jobName = ""
  )

  response, err := client.TransferJobs.Get(jobName).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storagetransfer/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storagetransfer.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  var (
  )

  fn := func(page *storagetransfer.ListTransferJobsResponse) error {
    // doThingsWith(page)
    for i, element := range page.TransferJobs {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.TransferJobs.List().Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storagetransfer/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storagetransfer.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'patch' method:
  var (
    // The name of job to update. Required.
    jobName = ""

    requestBody = &storagetransfer.UpdateTransferJobRequest{}
  )

  response, err := client.TransferJobs.Patch(jobName, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storagetransfer/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storagetransfer.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'cancel' method:
  var (
    // The name of the operation resource to be cancelled.
    name = ""
  )

  response, err := client.TransferOperations.Cancel(name).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storagetransfer/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storagetransfer.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // The name of the operation resource to be deleted.
    name = ""
  )

  response, err := client.TransferOperations.Delete(name).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storagetransfer/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storagetransfer.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // The name of the operation resource.
    name = ""
  )

  response, err := client.TransferOperations.Get(name).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storagetransfer/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storagetransfer.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // The value `transferOperations`.
    name = ""
  )

  fn := func(page *storagetransfer.ListOperationsResponse) error {
    // doThingsWith(page)
    for i, element := range page.Operations {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.TransferOperations.List(name).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storagetransfer/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storagetransfer.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'pause' method:
  var (
    // The name of the transfer operation. Required.
    name = ""

    requestBody = &storagetransfer.PauseTransferOperationRequest{}
  )

  response, err := client.TransferOperations.Pause(name, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/storagetransfer/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storagetransfer.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'resume' method:
  var (
    // The name of the transfer operation. Required.
    name = ""

    requestBody = &storagetransfer.ResumeTransferOperationRequest{}
  )

  response, err := client.TransferOperations.Resume(name, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
