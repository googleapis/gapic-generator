
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storagetransfer/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storagetransfer.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }



  resp, err := client.V1.GetGoogleServiceAccount().Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storagetransfer/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storagetransfer.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The ID of the Google Developers Console project that the Google service account is associated with.
  // Required.
  projectId := "" // TODO: Update placeholder value.

  resp, err := client.GoogleServiceAccounts.Get(projectId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storagetransfer/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storagetransfer.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }



  resp, err := client.TransferJobs.Create(&storagetransfer.TransferJob{
                                            // TODO: Fill required fields.
                                          }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storagetransfer/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storagetransfer.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The job to get. Required.
  jobName := "" // TODO: Update placeholder value.

  resp, err := client.TransferJobs.Get(jobName).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storagetransfer/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storagetransfer.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }




  call := client.TransferJobs.List()
  if err := call.Pages(ctx, func(page *storagetransfer.ListTransferJobsResponse) error {
    for _, v := range page.TransferJobs {
      // TODO: Use v.
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storagetransfer/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storagetransfer.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The name of job to update. Required.
  jobName := "" // TODO: Update placeholder value.

  resp, err := client.TransferJobs.Patch(jobName, &storagetransfer.UpdateTransferJobRequest{
                                           // TODO: Fill required fields.
                                         }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storagetransfer/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storagetransfer.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The name of the operation resource to be cancelled.
  name := "" // TODO: Update placeholder value.

  resp, err := client.TransferOperations.Cancel(name).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storagetransfer/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storagetransfer.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The name of the operation resource to be deleted.
  name := "" // TODO: Update placeholder value.

  resp, err := client.TransferOperations.Delete(name).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storagetransfer/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storagetransfer.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The name of the operation resource.
  name := "" // TODO: Update placeholder value.

  resp, err := client.TransferOperations.Get(name).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storagetransfer/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storagetransfer.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The value `transferOperations`.
  name := "" // TODO: Update placeholder value.


  call := client.TransferOperations.List(name)
  if err := call.Pages(ctx, func(page *storagetransfer.ListOperationsResponse) error {
    for _, v := range page.Operations {
      // TODO: Use v.
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storagetransfer/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storagetransfer.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The name of the transfer operation. Required.
  name := "" // TODO: Update placeholder value.

  resp, err := client.TransferOperations.Pause(name, &storagetransfer.PauseTransferOperationRequest{
                                                 // TODO: Fill required fields.
                                               }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer_component/quotas
// 2. This sample uses Application Default Credentials for authentication. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/storagetransfer/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := storagetransfer.New(hc)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // The name of the transfer operation. Required.
  name := "" // TODO: Update placeholder value.

  resp, err := client.TransferOperations.Resume(name, &storagetransfer.ResumeTransferOperationRequest{
                                                  // TODO: Fill required fields.
                                                }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // TODO: Use resp.
  _ = resp
}
