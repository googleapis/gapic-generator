
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the storagetransfer service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := storagetransfer.New(client)
  if err != nil {
    log.Fatal(err)
  }


  res, err := service.V1.GetGoogleServiceAccount().Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the storagetransfer service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := storagetransfer.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * The ID of the Google Developers Console project that the Google service account is associated
  //   with. Required.
  projectId := ""

  res, err := service.GoogleServiceAccounts.Get(projectId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the storagetransfer service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := storagetransfer.New(client)
  if err != nil {
    log.Fatal(err)
  }


  transferJobBody := storagetransfer.TransferJob{
    // TODO: Add desired fields of the `transferJobBody` variable.
  }

  res, err := service.TransferJobs.Create(transferJobBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the storagetransfer service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := storagetransfer.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * The job to get. Required.
  jobName := ""

  res, err := service.TransferJobs.Get(jobName).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the storagetransfer service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := storagetransfer.New(client)
  if err != nil {
    log.Fatal(err)
  }


  req := service.TransferJobs.List()
  if err := req.Pages(ctx, func(page *storagetransfer.ListTransferJobsResponse) error {
    for _, transferJob := range page.TransferJobs {
      // TODO: Change code below to process each `transferJob` resource:
      out, err := json.MarshalIndent(transferJob, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the storagetransfer service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := storagetransfer.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Patch` method:

  // * The name of job to update. Required.
  jobName := ""

  updateTransferJobRequestBody := storagetransfer.UpdateTransferJobRequest{
    // TODO: Add desired fields of the `updateTransferJobRequestBody` variable to be changed.
  }

  res, err := service.TransferJobs.Patch(jobName, &updateTransferJobRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the storagetransfer service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := storagetransfer.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Cancel` method:

  // * The name of the operation resource to be cancelled.
  name := ""

  res, err := service.TransferOperations.Cancel(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the storagetransfer service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := storagetransfer.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Delete` method:

  // * The name of the operation resource to be deleted.
  name := ""

  res, err := service.TransferOperations.Delete(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the storagetransfer service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := storagetransfer.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Get` method:

  // * The name of the operation resource.
  name := ""

  res, err := service.TransferOperations.Get(name).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the storagetransfer service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := storagetransfer.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `List` method:

  // * The value `transferOperations`.
  name := ""

  req := service.TransferOperations.List(name)
  if err := req.Pages(ctx, func(page *storagetransfer.ListOperationsResponse) error {
    for _, operation := range page.Operations {
      // TODO: Change code below to process each `operation` resource:
      out, err := json.MarshalIndent(operation, "", "  ")
      if err != nil {
        return err
      }
      fmt.Println(out)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the storagetransfer service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := storagetransfer.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Pause` method:

  // * The name of the transfer operation. Required.
  name := ""

  pauseTransferOperationRequestBody := storagetransfer.PauseTransferOperationRequest{
    // TODO: Add desired fields of the `pauseTransferOperationRequestBody` variable.
  }

  res, err := service.TransferOperations.Pause(name, &pauseTransferOperationRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "encoding/json"
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/storagetransfer/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  client, err := google.DefaultClient(ctx, storagetransfer.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  // Construct the storagetransfer service object for interacting with the API.
  // You can browse other available API services and versions at
  // https://github.com/google/google-api-go-client
  service, err := storagetransfer.New(client)
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change placeholders below to desired parameter values for the `Resume` method:

  // * The name of the transfer operation. Required.
  name := ""

  resumeTransferOperationRequestBody := storagetransfer.ResumeTransferOperationRequest{
    // TODO: Add desired fields of the `resumeTransferOperationRequestBody` variable.
  }

  res, err := service.TransferOperations.Resume(name, &resumeTransferOperationRequestBody).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `res` object:
  out, err := json.MarshalIndent(res, "", "  ")
  if err != nil {
    log.Fatal(err)
  }
  fmt.Println(out)
}
