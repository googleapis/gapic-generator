
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Container Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/container_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/container/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := container.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'create' method:
  var (
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    projectId = ""

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    zone = ""

    requestBody = &container.CreateClusterRequest{}
  )

  response, err := client.Projects.Zones.Clusters.Create(projectId, zone, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Container Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/container_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/container/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := container.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    projectId = ""

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    zone = ""

    // The name of the cluster to delete.
    clusterId = ""
  )

  response, err := client.Projects.Zones.Clusters.Delete(projectId, zone, clusterId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Container Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/container_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/container/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := container.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    projectId = ""

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    zone = ""

    // The name of the cluster to retrieve.
    clusterId = ""
  )

  response, err := client.Projects.Zones.Clusters.Get(projectId, zone, clusterId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Container Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/container_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/container/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := container.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    projectId = ""

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides, or "-" for all zones.
    zone = ""
  )

  response, err := client.Projects.Zones.Clusters.List(projectId, zone).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Container Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/container_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/container/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := container.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'update' method:
  var (
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    projectId = ""

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    zone = ""

    // The name of the cluster to upgrade.
    clusterId = ""

    requestBody = &container.UpdateClusterRequest{}
  )

  response, err := client.Projects.Zones.Clusters.Update(projectId, zone, clusterId, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Container Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/container_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/container/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := container.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'getServerconfig' method:
  var (
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    projectId = ""

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
    // for, or "-" for all zones.
    zone = ""
  )

  response, err := client.Projects.Zones.GetServerconfig(projectId, zone).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Container Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/container_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/container/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := container.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    projectId = ""

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
    // resides.
    zone = ""

    // The server-assigned `name` of the operation.
    operationId = ""
  )

  response, err := client.Projects.Zones.Operations.Get(projectId, zone, operationId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Container Engine API and check the quota for your project at
//    https://console.developers.google.com/apis/api/container_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/container/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := container.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // The Google Developers Console [project ID or project number]
    // (https://developers.google.com/console/help/new/#projectnumber).
    projectId = ""

    // The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
    // for, or "-" for all zones.
    zone = ""
  )

  response, err := client.Projects.Zones.Operations.List(projectId, zone).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
