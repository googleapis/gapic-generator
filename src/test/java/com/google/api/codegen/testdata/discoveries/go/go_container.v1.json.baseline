
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  containerService, err := container.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console [project ID or project number]
  // (https://support.google.com/cloud/answer/6158840).
  projectId := ""  // TODO: Update placeholder value.

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
  // resides.
  zone := ""  // TODO: Update placeholder value.

  rb := &container.CreateClusterRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := containerService.Projects.Zones.Clusters.Create(projectId, zone, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  containerService, err := container.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console [project ID or project number]
  // (https://support.google.com/cloud/answer/6158840).
  projectId := ""  // TODO: Update placeholder value.

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
  // resides.
  zone := ""  // TODO: Update placeholder value.

  // The name of the cluster to delete.
  clusterId := ""  // TODO: Update placeholder value.

  resp, err := containerService.Projects.Zones.Clusters.Delete(projectId, zone, clusterId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  containerService, err := container.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console [project ID or project number]
  // (https://support.google.com/cloud/answer/6158840).
  projectId := ""  // TODO: Update placeholder value.

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
  // resides.
  zone := ""  // TODO: Update placeholder value.

  // The name of the cluster to retrieve.
  clusterId := ""  // TODO: Update placeholder value.

  resp, err := containerService.Projects.Zones.Clusters.Get(projectId, zone, clusterId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  containerService, err := container.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console [project ID or project number]
  // (https://support.google.com/cloud/answer/6158840).
  projectId := ""  // TODO: Update placeholder value.

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
  // resides, or "-" for all zones.
  zone := ""  // TODO: Update placeholder value.

  resp, err := containerService.Projects.Zones.Clusters.List(projectId, zone).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  containerService, err := container.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console [project ID or project number]
  // (https://developers.google.com/console/help/new/#projectnumber).
  projectId := ""  // TODO: Update placeholder value.

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
  // resides.
  zone := ""  // TODO: Update placeholder value.

  // The name of the cluster.
  clusterId := ""  // TODO: Update placeholder value.

  rb := &container.CreateNodePoolRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := containerService.Projects.Zones.Clusters.NodePools.Create(projectId, zone, clusterId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  containerService, err := container.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console [project ID or project number]
  // (https://developers.google.com/console/help/new/#projectnumber).
  projectId := ""  // TODO: Update placeholder value.

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
  // resides.
  zone := ""  // TODO: Update placeholder value.

  // The name of the cluster.
  clusterId := ""  // TODO: Update placeholder value.

  // The name of the node pool to delete.
  nodePoolId := ""  // TODO: Update placeholder value.

  resp, err := containerService.Projects.Zones.Clusters.NodePools.Delete(projectId, zone, clusterId, nodePoolId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  containerService, err := container.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console [project ID or project number]
  // (https://developers.google.com/console/help/new/#projectnumber).
  projectId := ""  // TODO: Update placeholder value.

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
  // resides.
  zone := ""  // TODO: Update placeholder value.

  // The name of the cluster.
  clusterId := ""  // TODO: Update placeholder value.

  // The name of the node pool.
  nodePoolId := ""  // TODO: Update placeholder value.

  resp, err := containerService.Projects.Zones.Clusters.NodePools.Get(projectId, zone, clusterId, nodePoolId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  containerService, err := container.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console [project ID or project number]
  // (https://developers.google.com/console/help/new/#projectnumber).
  projectId := ""  // TODO: Update placeholder value.

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
  // resides.
  zone := ""  // TODO: Update placeholder value.

  // The name of the cluster.
  clusterId := ""  // TODO: Update placeholder value.

  resp, err := containerService.Projects.Zones.Clusters.NodePools.List(projectId, zone, clusterId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  containerService, err := container.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console [project ID or project number]
  // (https://support.google.com/cloud/answer/6158840).
  projectId := ""  // TODO: Update placeholder value.

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
  // resides.
  zone := ""  // TODO: Update placeholder value.

  // The name of the cluster to upgrade.
  clusterId := ""  // TODO: Update placeholder value.

  rb := &container.UpdateClusterRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := containerService.Projects.Zones.Clusters.Update(projectId, zone, clusterId, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  containerService, err := container.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console [project ID or project number]
  // (https://support.google.com/cloud/answer/6158840).
  projectId := ""  // TODO: Update placeholder value.

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
  // for.
  zone := ""  // TODO: Update placeholder value.

  resp, err := containerService.Projects.Zones.GetServerconfig(projectId, zone).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  containerService, err := container.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console [project ID or project number]
  // (https://support.google.com/cloud/answer/6158840).
  projectId := ""  // TODO: Update placeholder value.

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
  // resides.
  zone := ""  // TODO: Update placeholder value.

  // The server-assigned `name` of the operation.
  operationId := ""  // TODO: Update placeholder value.

  resp, err := containerService.Projects.Zones.Operations.Get(projectId, zone, operationId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  containerService, err := container.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console [project ID or project number]
  // (https://support.google.com/cloud/answer/6158840).
  projectId := ""  // TODO: Update placeholder value.

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
  // for, or `-` for all zones.
  zone := ""  // TODO: Update placeholder value.

  resp, err := containerService.Projects.Zones.Operations.List(projectId, zone).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
