
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := container.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console [project ID or project number]
  // (https://developers.google.com/console/help/new/#projectnumber).
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
  // resides.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  resource := &container.CreateClusterRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Zones.Clusters.Create(projectId, zone, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := container.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console [project ID or project number]
  // (https://developers.google.com/console/help/new/#projectnumber).
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
  // resides.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The name of the cluster to delete.
  clusterId := "{MY-CLUSTER-ID}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Zones.Clusters.Delete(projectId, zone, clusterId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := container.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console [project ID or project number]
  // (https://developers.google.com/console/help/new/#projectnumber).
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
  // resides.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The name of the cluster to retrieve.
  clusterId := "{MY-CLUSTER-ID}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Zones.Clusters.Get(projectId, zone, clusterId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := container.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console [project ID or project number]
  // (https://developers.google.com/console/help/new/#projectnumber).
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
  // resides, or "-" for all zones.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Zones.Clusters.List(projectId, zone).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := container.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console [project ID or project number]
  // (https://developers.google.com/console/help/new/#projectnumber).
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
  // resides.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The name of the cluster to upgrade.
  clusterId := "{MY-CLUSTER-ID}" // TODO: Update placeholder value(s).

  resource := &container.UpdateClusterRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Zones.Clusters.Update(projectId, zone, clusterId, resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := container.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console [project ID or project number]
  // (https://developers.google.com/console/help/new/#projectnumber).
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
  // for, or "-" for all zones.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Zones.GetServerconfig(projectId, zone).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := container.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console [project ID or project number]
  // (https://developers.google.com/console/help/new/#projectnumber).
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
  // resides.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  // The server-assigned `name` of the operation.
  operationId := "{MY-OPERATION-ID}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Zones.Operations.Get(projectId, zone, operationId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := container.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The Google Developers Console [project ID or project number]
  // (https://developers.google.com/console/help/new/#projectnumber).
  projectId := "{MY-PROJECT-ID}" // TODO: Update placeholder value(s).

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
  // for, or "-" for all zones.
  zone := "{MY-ZONE}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Zones.Operations.List(projectId, zone).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  log.Printf("%#v\n", resp)
}
