
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := container.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The Google Developers Console [project ID or project number]
  // (https://developers.google.com/console/help/new/#projectnumber).
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
  // resides.
  // TODO: Update placeholder value.
  zone := "{MY-ZONE}"

  resp, err := c.Projects.Zones.Clusters.Create(projectId, zone, &container.CreateClusterRequest{
                                                  // TODO: Fill required fields.
                                                }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := container.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The Google Developers Console [project ID or project number]
  // (https://developers.google.com/console/help/new/#projectnumber).
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
  // resides.
  // TODO: Update placeholder value.
  zone := "{MY-ZONE}"

  // The name of the cluster to delete.
  // TODO: Update placeholder value.
  clusterId := "{MY-CLUSTER-ID}"

  resp, err := c.Projects.Zones.Clusters.Delete(projectId, zone, clusterId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := container.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The Google Developers Console [project ID or project number]
  // (https://developers.google.com/console/help/new/#projectnumber).
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
  // resides.
  // TODO: Update placeholder value.
  zone := "{MY-ZONE}"

  // The name of the cluster to retrieve.
  // TODO: Update placeholder value.
  clusterId := "{MY-CLUSTER-ID}"

  resp, err := c.Projects.Zones.Clusters.Get(projectId, zone, clusterId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := container.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The Google Developers Console [project ID or project number]
  // (https://developers.google.com/console/help/new/#projectnumber).
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
  // resides, or "-" for all zones.
  // TODO: Update placeholder value.
  zone := "{MY-ZONE}"

  resp, err := c.Projects.Zones.Clusters.List(projectId, zone).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := container.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The Google Developers Console [project ID or project number]
  // (https://developers.google.com/console/help/new/#projectnumber).
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
  // resides.
  // TODO: Update placeholder value.
  zone := "{MY-ZONE}"

  // The name of the cluster to upgrade.
  // TODO: Update placeholder value.
  clusterId := "{MY-CLUSTER-ID}"

  resp, err := c.Projects.Zones.Clusters.Update(projectId, zone, clusterId, &container.UpdateClusterRequest{
                                                  // TODO: Fill required fields.
                                                }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := container.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The Google Developers Console [project ID or project number]
  // (https://developers.google.com/console/help/new/#projectnumber).
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
  // for, or "-" for all zones.
  // TODO: Update placeholder value.
  zone := "{MY-ZONE}"

  resp, err := c.Projects.Zones.GetServerconfig(projectId, zone).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := container.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The Google Developers Console [project ID or project number]
  // (https://developers.google.com/console/help/new/#projectnumber).
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) in which the cluster
  // resides.
  // TODO: Update placeholder value.
  zone := "{MY-ZONE}"

  // The server-assigned `name` of the operation.
  // TODO: Update placeholder value.
  operationId := "{MY-OPERATION-ID}"

  resp, err := c.Projects.Zones.Operations.Get(projectId, zone, operationId).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Container Engine API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/container
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install and update the Go dependencies by running 'go get -u' in the
//    project directory.

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/container/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, container.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := container.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The Google Developers Console [project ID or project number]
  // (https://developers.google.com/console/help/new/#projectnumber).
  // TODO: Update placeholder value.
  projectId := "{MY-PROJECT-ID}"

  // The name of the Google Compute Engine [zone](/compute/docs/zones#available) to return operations
  // for, or "-" for all zones.
  // TODO: Update placeholder value.
  zone := "{MY-ZONE}"

  resp, err := c.Projects.Zones.Operations.List(projectId, zone).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
