
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storagetransfer.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storagetransfer.v1.Data;


namespace StoragetransferSample
{
    public class StoragetransferServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StoragetransferService storagetransferService = new StoragetransferService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            V1Resource.GetGoogleServiceAccountRequest request = storagetransferService.V1.GetGoogleServiceAccount();

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.GoogleServiceAccount response = request.Execute();
            // Data.GoogleServiceAccount response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storagetransfer.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storagetransfer.v1.Data;


namespace StoragetransferSample
{
    public class StoragetransferServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StoragetransferService storagetransferService = new StoragetransferService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The ID of the Google Developers Console project that the Google service account is associated with.
            // Required.
            string projectId = "{MY-PROJECT-ID}"; // TODO: Update placeholder value(s).

            GoogleServiceAccountsResource.GetRequest request = storagetransferService.GoogleServiceAccounts.Get(projectId);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.GoogleServiceAccount response = request.Execute();
            // Data.GoogleServiceAccount response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storagetransfer.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storagetransfer.v1.Data;


namespace StoragetransferSample
{
    public class StoragetransferServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StoragetransferService storagetransferService = new StoragetransferService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Assign values to the desired properties.
            Data.TransferJob requestBody = new Data.TransferJob();

            TransferJobsResource.CreateRequest request = storagetransferService.TransferJobs.Create(requestBody);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.TransferJob response = request.Execute();
            // Data.TransferJob response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storagetransfer.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storagetransfer.v1.Data;


namespace StoragetransferSample
{
    public class StoragetransferServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StoragetransferService storagetransferService = new StoragetransferService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The job to get. Required.
            string jobName = "{MY-JOB-NAME}"; // TODO: Update placeholder value(s).

            TransferJobsResource.GetRequest request = storagetransferService.TransferJobs.Get(jobName);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.TransferJob response = request.Execute();
            // Data.TransferJob response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storagetransfer.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storagetransfer.v1.Data;


namespace StoragetransferSample
{
    public class StoragetransferServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StoragetransferService storagetransferService = new StoragetransferService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            TransferJobsResource.ListRequest request = storagetransferService.TransferJobs.List();

            Data.ListTransferJobsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace request.Execute() as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.TransferJobs == null)
                {
                    continue;
                }
                foreach (Data.TransferJob transferJob in response.TransferJobs)
                {
                    // TODO: Use transferJob
                    Console.WriteLine(new JavaScriptSerializer().Serialize(transferJob));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storagetransfer.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storagetransfer.v1.Data;


namespace StoragetransferSample
{
    public class StoragetransferServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StoragetransferService storagetransferService = new StoragetransferService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The name of job to update. Required.
            string jobName = "{MY-JOB-NAME}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties to be changed.
            Data.UpdateTransferJobRequest requestBody = new Data.UpdateTransferJobRequest();

            TransferJobsResource.PatchRequest request = storagetransferService.TransferJobs.Patch(requestBody, jobName);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.TransferJob response = request.Execute();
            // Data.TransferJob response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storagetransfer.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storagetransfer.v1.Data;


namespace StoragetransferSample
{
    public class StoragetransferServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StoragetransferService storagetransferService = new StoragetransferService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The name of the operation resource to be cancelled.
            string name = "{MY-NAME}"; // TODO: Update placeholder value(s).

            TransferOperationsResource.CancelRequest request = storagetransferService.TransferOperations.Cancel(name);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Empty response = request.Execute();
            // Data.Empty response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storagetransfer.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storagetransfer.v1.Data;


namespace StoragetransferSample
{
    public class StoragetransferServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StoragetransferService storagetransferService = new StoragetransferService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The name of the operation resource to be deleted.
            string name = "{MY-NAME}"; // TODO: Update placeholder value(s).

            TransferOperationsResource.DeleteRequest request = storagetransferService.TransferOperations.Delete(name);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Empty response = request.Execute();
            // Data.Empty response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storagetransfer.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storagetransfer.v1.Data;


namespace StoragetransferSample
{
    public class StoragetransferServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StoragetransferService storagetransferService = new StoragetransferService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The name of the operation resource.
            string name = "{MY-NAME}"; // TODO: Update placeholder value(s).

            TransferOperationsResource.GetRequest request = storagetransferService.TransferOperations.Get(name);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storagetransfer.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storagetransfer.v1.Data;


namespace StoragetransferSample
{
    public class StoragetransferServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StoragetransferService storagetransferService = new StoragetransferService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The value `transferOperations`.
            string name = "{MY-NAME}"; // TODO: Update placeholder value(s).

            TransferOperationsResource.ListRequest request = storagetransferService.TransferOperations.List(name);

            Data.ListOperationsResponse response;
            do
            {
                // To execute asynchronously in an async method, replace request.Execute() as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Operations == null)
                {
                    continue;
                }
                foreach (Data.Operation operation in response.Operations)
                {
                    // TODO: Use operation
                    Console.WriteLine(new JavaScriptSerializer().Serialize(operation));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storagetransfer.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storagetransfer.v1.Data;


namespace StoragetransferSample
{
    public class StoragetransferServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StoragetransferService storagetransferService = new StoragetransferService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The name of the transfer operation. Required.
            string name = "{MY-NAME}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.PauseTransferOperationRequest requestBody = new Data.PauseTransferOperationRequest();

            TransferOperationsResource.PauseRequest request = storagetransferService.TransferOperations.Pause(requestBody, name);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Empty response = request.Execute();
            // Data.Empty response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storagetransfer.v1;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Storagetransfer.v1.Data;


namespace StoragetransferSample
{
    public class StoragetransferServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StoragetransferService storagetransferService = new StoragetransferService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The name of the transfer operation. Required.
            string name = "{MY-NAME}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.ResumeTransferOperationRequest requestBody = new Data.ResumeTransferOperationRequest();

            TransferOperationsResource.ResumeRequest request = storagetransferService.TransferOperations.Resume(requestBody, name);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Empty response = request.Execute();
            // Data.Empty response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
