
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storagetransfer.v1;
using System.Threading.Tasks;

using Data = Google.Apis.Storagetransfer.v1.Data;

namespace StoragetransferSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StoragetransferService storagetransferService = new StoragetransferService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the GetGoogleServiceAccount() method:

            V1Resource.GetGoogleServiceAccountRequest request = storagetransferService.V1.GetGoogleServiceAccount();
            Data.GoogleServiceAccount response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.GoogleServiceAccount response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storagetransfer.v1;
using System.Threading.Tasks;

using Data = Google.Apis.Storagetransfer.v1.Data;

namespace StoragetransferSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StoragetransferService storagetransferService = new StoragetransferService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // The ID of the Google Developers Console project that the Google service account is associated with.
            // Required.
            string projectId = "";

            GoogleServiceAccountsResource.GetRequest request = storagetransferService.GoogleServiceAccounts.Get(projectId);
            Data.GoogleServiceAccount response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.GoogleServiceAccount response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storagetransfer.v1;
using System.Threading.Tasks;

using Data = Google.Apis.Storagetransfer.v1.Data;

namespace StoragetransferSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StoragetransferService storagetransferService = new StoragetransferService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Create() method:

            // TODO Add code to assign values to properties of 'content'.
            Data.TransferJob content = new Data.TransferJob();

            TransferJobsResource.CreateRequest request = storagetransferService.TransferJobs.Create(content);
            Data.TransferJob response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.TransferJob response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storagetransfer.v1;
using System.Threading.Tasks;

using Data = Google.Apis.Storagetransfer.v1.Data;

namespace StoragetransferSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StoragetransferService storagetransferService = new StoragetransferService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // The job to get. Required.
            string jobName = "";

            TransferJobsResource.GetRequest request = storagetransferService.TransferJobs.Get(jobName);
            Data.TransferJob response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.TransferJob response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storagetransfer.v1;
using System.Threading.Tasks;

using Data = Google.Apis.Storagetransfer.v1.Data;

namespace StoragetransferSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StoragetransferService storagetransferService = new StoragetransferService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            TransferJobsResource.ListRequest request = storagetransferService.TransferJobs.List();
            Data.ListTransferJobsResponse response;
            do
            {
                response = request.Execute();
                if (response.TransferJobs == null)
                {
                    continue;
                }
                foreach (Data.TransferJob item in response.TransferJobs)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.ListTransferJobsResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storagetransfer.v1;
using System.Threading.Tasks;

using Data = Google.Apis.Storagetransfer.v1.Data;

namespace StoragetransferSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StoragetransferService storagetransferService = new StoragetransferService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Patch() method:

            // The name of job to update. Required.
            string jobName = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.UpdateTransferJobRequest content = new Data.UpdateTransferJobRequest();

            TransferJobsResource.PatchRequest request = storagetransferService.TransferJobs.Patch(content, jobName);
            Data.TransferJob response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.TransferJob response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storagetransfer.v1;
using System.Threading.Tasks;

using Data = Google.Apis.Storagetransfer.v1.Data;

namespace StoragetransferSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StoragetransferService storagetransferService = new StoragetransferService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Cancel() method:

            // The name of the operation resource to be cancelled.
            string name = "";

            TransferOperationsResource.CancelRequest request = storagetransferService.TransferOperations.Cancel(name);
            Data.Empty response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Empty response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storagetransfer.v1;
using System.Threading.Tasks;

using Data = Google.Apis.Storagetransfer.v1.Data;

namespace StoragetransferSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StoragetransferService storagetransferService = new StoragetransferService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // The name of the operation resource to be deleted.
            string name = "";

            TransferOperationsResource.DeleteRequest request = storagetransferService.TransferOperations.Delete(name);
            Data.Empty response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Empty response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storagetransfer.v1;
using System.Threading.Tasks;

using Data = Google.Apis.Storagetransfer.v1.Data;

namespace StoragetransferSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StoragetransferService storagetransferService = new StoragetransferService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // The name of the operation resource.
            string name = "";

            TransferOperationsResource.GetRequest request = storagetransferService.TransferOperations.Get(name);
            Data.Operation response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Operation response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storagetransfer.v1;
using System.Threading.Tasks;

using Data = Google.Apis.Storagetransfer.v1.Data;

namespace StoragetransferSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StoragetransferService storagetransferService = new StoragetransferService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // The value `transferOperations`.
            string name = "";

            TransferOperationsResource.ListRequest request = storagetransferService.TransferOperations.List(name);
            Data.ListOperationsResponse response;
            do
            {
                response = request.Execute();
                if (response.Operations == null)
                {
                    continue;
                }
                foreach (Data.Operation item in response.Operations)
                {
                    // TODO: Add code here to process each item.
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);

            // To execute asynchronously in an async method, use
            // Data.ListOperationsResponse response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storagetransfer.v1;
using System.Threading.Tasks;

using Data = Google.Apis.Storagetransfer.v1.Data;

namespace StoragetransferSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StoragetransferService storagetransferService = new StoragetransferService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Pause() method:

            // The name of the transfer operation. Required.
            string name = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.PauseTransferOperationRequest content = new Data.PauseTransferOperationRequest();

            TransferOperationsResource.PauseRequest request = storagetransferService.TransferOperations.Pause(content, name);
            Data.Empty response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Empty response = await request.ExecuteAsync();
        }
    }
}
// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Storage Transfer API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/storagetransfer
// 2. To install the client library add a dependency on the relevant NuGet package. Libraries published
//    by Google are owned by google-apis-packages: https://www.nuget.org/profiles/google-apis-packages
// 3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Storagetransfer.v1;
using System.Threading.Tasks;

using Data = Google.Apis.Storagetransfer.v1.Data;

namespace StoragetransferSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            StoragetransferService storagetransferService = new StoragetransferService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Resume() method:

            // The name of the transfer operation. Required.
            string name = "";

            // TODO Add code to assign values to properties of 'content'.
            Data.ResumeTransferOperationRequest content = new Data.ResumeTransferOperationRequest();

            TransferOperationsResource.ResumeRequest request = storagetransferService.TransferOperations.Resume(content, name);
            Data.Empty response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Empty response = await request.ExecuteAsync();
        }
    }
}
