
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the TaskQueue API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/taskqueue
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Taskqueue.v1beta2;
using System.Threading.Tasks;

using Data = Google.Apis.Taskqueue.v1beta2.Data;

namespace TaskqueueSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            TaskqueueService taskqueueService = new TaskqueueService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // The project under which the queue lies.
            string project = "{MY-PROJECT}";

            // The id of the taskqueue to get the properties of.
            string taskqueue = "{MY-TASKQUEUE}";

            TaskqueuesResource.GetRequest request = taskqueueService.Taskqueues.Get(project, taskqueue);
            Data.TaskQueue response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.TaskQueue response = await request.ExecuteAsync();
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the TaskQueue API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/taskqueue
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Taskqueue.v1beta2;
using System.Threading.Tasks;

namespace TaskqueueSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            TaskqueueService taskqueueService = new TaskqueueService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Delete() method:

            // The project under which the queue lies.
            string project = "{MY-PROJECT}";

            // The taskqueue to delete a task from.
            string taskqueue = "{MY-TASKQUEUE}";

            // The id of the task to delete.
            string task = "{MY-TASK}";

            TasksResource.DeleteRequest request = taskqueueService.Tasks.Delete(project, taskqueue, task);
            request.Execute();

            // To execute asynchronously in an async method, use
            // await request.ExecuteAsync();
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the TaskQueue API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/taskqueue
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Taskqueue.v1beta2;
using System.Threading.Tasks;

using Data = Google.Apis.Taskqueue.v1beta2.Data;

namespace TaskqueueSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            TaskqueueService taskqueueService = new TaskqueueService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Get() method:

            // The project under which the queue lies.
            string project = "{MY-PROJECT}";

            // The taskqueue in which the task belongs.
            string taskqueue = "{MY-TASKQUEUE}";

            // The task to get properties of.
            string task = "{MY-TASK}";

            TasksResource.GetRequest request = taskqueueService.Tasks.Get(project, taskqueue, task);
            Data.Task response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Task response = await request.ExecuteAsync();
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the TaskQueue API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/taskqueue
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Taskqueue.v1beta2;
using System.Threading.Tasks;

using Data = Google.Apis.Taskqueue.v1beta2.Data;

namespace TaskqueueSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            TaskqueueService taskqueueService = new TaskqueueService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Insert() method:

            // The project under which the queue lies
            string project = "{MY-PROJECT}";

            // The taskqueue to insert the task into
            string taskqueue = "{MY-TASKQUEUE}";

            // TODO Add code to assign values to properties of 'content'.
            Data.Task content = new Data.Task();

            TasksResource.InsertRequest request = taskqueueService.Tasks.Insert(content, project, taskqueue);
            Data.Task response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Task response = await request.ExecuteAsync();
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the TaskQueue API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/taskqueue
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Taskqueue.v1beta2;
using System.Threading.Tasks;

using Data = Google.Apis.Taskqueue.v1beta2.Data;

namespace TaskqueueSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            TaskqueueService taskqueueService = new TaskqueueService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Lease() method:

            // The project under which the queue lies.
            string project = "{MY-PROJECT}";

            // The taskqueue to lease a task from.
            string taskqueue = "{MY-TASKQUEUE}";

            // The number of tasks to lease.
            int numTasks = 0;

            // The lease in seconds.
            int leaseSecs = 0;

            TasksResource.LeaseRequest request = taskqueueService.Tasks.Lease(project, taskqueue, numTasks, leaseSecs);
            Data.Tasks response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Tasks response = await request.ExecuteAsync();
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the TaskQueue API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/taskqueue
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Taskqueue.v1beta2;
using System.Threading.Tasks;

using Data = Google.Apis.Taskqueue.v1beta2.Data;

namespace TaskqueueSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            TaskqueueService taskqueueService = new TaskqueueService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the List() method:

            // The project under which the queue lies.
            string project = "{MY-PROJECT}";

            // The id of the taskqueue to list tasks from.
            string taskqueue = "{MY-TASKQUEUE}";

            TasksResource.ListRequest request = taskqueueService.Tasks.List(project, taskqueue);
            Data.Tasks2 response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Tasks2 response = await request.ExecuteAsync();
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the TaskQueue API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/taskqueue
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Taskqueue.v1beta2;
using System.Threading.Tasks;

using Data = Google.Apis.Taskqueue.v1beta2.Data;

namespace TaskqueueSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            TaskqueueService taskqueueService = new TaskqueueService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Patch() method:

            // The project under which the queue lies.
            string project = "{MY-PROJECT}";

            string taskqueue = "{MY-TASKQUEUE}";

            string task = "{MY-TASK}";

            // The new lease in seconds.
            int newLeaseSeconds = 0;

            // TODO Add code to assign values to properties of 'content'.
            Data.Task content = new Data.Task();

            TasksResource.PatchRequest request = taskqueueService.Tasks.Patch(content, project, taskqueue, task, newLeaseSeconds);
            Data.Task response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Task response = await request.ExecuteAsync();
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the TaskQueue API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/taskqueue
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    'gcloud beta auth application-default login'
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Taskqueue.v1beta2;
using System.Threading.Tasks;

using Data = Google.Apis.Taskqueue.v1beta2.Data;

namespace TaskqueueSample
{
    public class Program
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the 'gcloud' tool when running locally
            // and by built-in service accounts when runing on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // See https://developers.google.com/identity/protocols/application-default-credentials for more information.
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            TaskqueueService taskqueueService = new TaskqueueService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // TODO: Change placeholders below to values for parameters to the Update() method:

            // The project under which the queue lies.
            string project = "{MY-PROJECT}";

            string taskqueue = "{MY-TASKQUEUE}";

            string task = "{MY-TASK}";

            // The new lease in seconds.
            int newLeaseSeconds = 0;

            // TODO Add code to assign values to properties of 'content'.
            Data.Task content = new Data.Task();

            TasksResource.UpdateRequest request = taskqueueService.Tasks.Update(content, project, taskqueue, task, newLeaseSeconds);
            Data.Task response = request.Execute();

            // To execute asynchronously in an async method, use
            // Data.Task response = await request.ExecuteAsync();
        }
    }
}
