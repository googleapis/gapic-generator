
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the TaskQueue API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/taskqueue
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Taskqueue.v1beta2;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Taskqueue.v1beta2.Data;


namespace TaskqueueSample
{
    public class TaskqueueServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            TaskqueueService taskqueueService = new TaskqueueService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The project under which the queue lies.
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

            // The id of the taskqueue to get the properties of.
            string taskqueue = "{MY-TASKQUEUE}"; // TODO: Update placeholder value(s).

            TaskqueuesResource.GetRequest request = taskqueueService.Taskqueues.Get(project, taskqueue);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.TaskQueue response = request.Execute();
            // Data.TaskQueue response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the TaskQueue API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/taskqueue
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Taskqueue.v1beta2;
using System.Threading.Tasks;


namespace TaskqueueSample
{
    public class TaskqueueServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            TaskqueueService taskqueueService = new TaskqueueService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The project under which the queue lies.
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

            // The taskqueue to delete a task from.
            string taskqueue = "{MY-TASKQUEUE}"; // TODO: Update placeholder value(s).

            // The id of the task to delete.
            string task = "{MY-TASK}"; // TODO: Update placeholder value(s).

            TasksResource.DeleteRequest request = taskqueueService.Tasks.Delete(project, taskqueue, task);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            request.Execute();
            // await request.ExecuteAsync();
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the TaskQueue API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/taskqueue
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Taskqueue.v1beta2;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Taskqueue.v1beta2.Data;


namespace TaskqueueSample
{
    public class TaskqueueServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            TaskqueueService taskqueueService = new TaskqueueService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The project under which the queue lies.
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

            // The taskqueue in which the task belongs.
            string taskqueue = "{MY-TASKQUEUE}"; // TODO: Update placeholder value(s).

            // The task to get properties of.
            string task = "{MY-TASK}"; // TODO: Update placeholder value(s).

            TasksResource.GetRequest request = taskqueueService.Tasks.Get(project, taskqueue, task);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Task response = request.Execute();
            // Data.Task response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the TaskQueue API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/taskqueue
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Taskqueue.v1beta2;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Taskqueue.v1beta2.Data;


namespace TaskqueueSample
{
    public class TaskqueueServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            TaskqueueService taskqueueService = new TaskqueueService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The project under which the queue lies
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

            // The taskqueue to insert the task into
            string taskqueue = "{MY-TASKQUEUE}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.Task requestBody = new Data.Task();

            TasksResource.InsertRequest request = taskqueueService.Tasks.Insert(requestBody, project, taskqueue);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Task response = request.Execute();
            // Data.Task response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the TaskQueue API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/taskqueue
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Taskqueue.v1beta2;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Taskqueue.v1beta2.Data;


namespace TaskqueueSample
{
    public class TaskqueueServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            TaskqueueService taskqueueService = new TaskqueueService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The project under which the queue lies.
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

            // The taskqueue to lease a task from.
            string taskqueue = "{MY-TASKQUEUE}"; // TODO: Update placeholder value(s).

            // The number of tasks to lease.
            int numTasks = 0; // TODO: Update placeholder value(s).

            // The lease in seconds.
            int leaseSecs = 0; // TODO: Update placeholder value(s).

            TasksResource.LeaseRequest request = taskqueueService.Tasks.Lease(project, taskqueue, numTasks, leaseSecs);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Tasks response = request.Execute();
            // Data.Tasks response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the TaskQueue API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/taskqueue
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Taskqueue.v1beta2;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Taskqueue.v1beta2.Data;


namespace TaskqueueSample
{
    public class TaskqueueServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            TaskqueueService taskqueueService = new TaskqueueService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The project under which the queue lies.
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

            // The id of the taskqueue to list tasks from.
            string taskqueue = "{MY-TASKQUEUE}"; // TODO: Update placeholder value(s).

            TasksResource.ListRequest request = taskqueueService.Tasks.List(project, taskqueue);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Tasks2 response = request.Execute();
            // Data.Tasks2 response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the TaskQueue API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/taskqueue
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Taskqueue.v1beta2;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Taskqueue.v1beta2.Data;


namespace TaskqueueSample
{
    public class TaskqueueServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            TaskqueueService taskqueueService = new TaskqueueService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The project under which the queue lies.
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).


            string taskqueue = "{MY-TASKQUEUE}"; // TODO: Update placeholder value(s).


            string task = "{MY-TASK}"; // TODO: Update placeholder value(s).

            // The new lease in seconds.
            int newLeaseSeconds = 0; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties to be changed.
            Data.Task requestBody = new Data.Task();

            TasksResource.PatchRequest request = taskqueueService.Tasks.Patch(requestBody, project, taskqueue, task, newLeaseSeconds);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Task response = request.Execute();
            // Data.Task response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the TaskQueue API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/taskqueue
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.Services;
using Google.Apis.Taskqueue.v1beta2;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.Taskqueue.v1beta2.Data;


namespace TaskqueueSample
{
    public class TaskqueueServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            TaskqueueService taskqueueService = new TaskqueueService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The project under which the queue lies.
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).


            string taskqueue = "{MY-TASKQUEUE}"; // TODO: Update placeholder value(s).


            string task = "{MY-TASK}"; // TODO: Update placeholder value(s).

            // The new lease in seconds.
            int newLeaseSeconds = 0; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.Task requestBody = new Data.Task();

            TasksResource.UpdateRequest request = taskqueueService.Tasks.Update(requestBody, project, taskqueue, task, newLeaseSeconds);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Task response = request.Execute();
            // Data.Task response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
