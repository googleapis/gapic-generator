
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the Operations resource to delete.
operation = 'my-operation'  # TODO: Update placeholder value.

request = service.globalAccountsOperations().delete(project=project, operation=operation)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the Operations resource to return.
operation = 'my-operation'  # TODO: Update placeholder value.

request = service.globalAccountsOperations().get(project=project, operation=operation)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

request = service.globalAccountsOperations().list(project=project)
while request is not None:
    response = request.execute()

    for operation in response['items']:
        # TODO: Change code below to process each `operation` resource:
        pprint(operation)

    request = service.globalAccountsOperations().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the group for this request.
group_name = 'my-group-name'  # TODO: Update placeholder value.

groups_add_member_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.groups().addMember(project=project, groupName=group_name, body=groups_add_member_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the Group resource to delete.
group_name = 'my-group-name'  # TODO: Update placeholder value.

request = service.groups().delete(project=project, groupName=group_name)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the Group resource to return.
group_name = 'my-group-name'  # TODO: Update placeholder value.

request = service.groups().get(project=project, groupName=group_name)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

group_body = {
    # TODO: Add desired entries to the request body.
}

request = service.groups().insert(project=project, body=group_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

request = service.groups().list(project=project)
while request is not None:
    response = request.execute()

    for group in response['items']:
        # TODO: Change code below to process each `group` resource:
        pprint(group)

    request = service.groups().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the group for this request.
group_name = 'my-group-name'  # TODO: Update placeholder value.

groups_remove_member_request_body = {
    # TODO: Add desired entries to the request body.
}

request = service.groups().removeMember(project=project, groupName=group_name, body=groups_remove_member_request_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# The user account for which you want to get a list of authorized public keys.
user = 'my-user'  # TODO: Update placeholder value.

# The fully-qualified URL of the virtual machine requesting the view.
instance = ''  # TODO: Update placeholder value.

request = service.linux().getAuthorizedKeysView(project=project, zone=zone, user=user, instance=instance)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the zone for this request.
zone = 'my-zone'  # TODO: Update placeholder value.

# The fully-qualified URL of the virtual machine requesting the views.
instance = ''  # TODO: Update placeholder value.

request = service.linux().getLinuxAccountViews(project=project, zone=zone, instance=instance)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the user for this request.
user = 'my-user'  # TODO: Update placeholder value.

public_key_body = {
    # TODO: Add desired entries to the request body.
}

request = service.users().addPublicKey(project=project, user=user, body=public_key_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the user resource to delete.
user = 'my-user'  # TODO: Update placeholder value.

request = service.users().delete(project=project, user=user)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the user resource to return.
user = 'my-user'  # TODO: Update placeholder value.

request = service.users().get(project=project, user=user)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

user_body = {
    # TODO: Add desired entries to the request body.
}

request = service.users().insert(project=project, body=user_body)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

request = service.users().list(project=project)
while request is not None:
    response = request.execute()

    for user in response['items']:
        # TODO: Change code below to process each `user` resource:
        pprint(user)

    request = service.users().list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk and run
   `gcloud beta auth application-default login`.
   For more information, see
   https://developers.google.com/identity/protocols/application-default-credentials
3. Install the Python client library for Google APIs by running
   `pip install --upgrade google-api-python-client`
"""
from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

credentials = GoogleCredentials.get_application_default()

service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)

# Project ID for this request.
project = 'my-project'  # TODO: Update placeholder value.

# Name of the user for this request.
user = 'my-user'  # TODO: Update placeholder value.

# The fingerprint of the public key to delete. Public keys are identified by their fingerprint, which
# is defined by RFC4716 to be the MD5 digest of the public key.
fingerprint = ''  # TODO: Update placeholder value.

request = service.users().removePublicKey(project=project, user=user, fingerprint=fingerprint)
response = request.execute()

# TODO: Change code below to process the `response` dict:
pprint(response)
