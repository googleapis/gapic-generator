
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
# * Project ID for this request.
project = ''
# * Name of the Operations resource to delete.
operation = ''

request = service.globalAccountsOperations().delete(project, operation)
request.execute()
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * Project ID for this request.
project = ''
# * Name of the Operations resource to return.
operation = ''

request = service.globalAccountsOperations().get(project, operation)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * Project ID for this request.
project = ''

globalAccountsOperations = service.globalAccountsOperations()
request = globalAccountsOperations.list(project)
while request is not None:
    response = request.execute()

    for operation in response['items']:
        # TODO: Add code here to process each 'operation' resource

    request = globalAccountsOperations.list_next(request, response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'addMember' method:
# * Project ID for this request.
project = ''
# * Name of the group for this request.
groupName = ''

groups_add_member_request = {
# TODO: Add desired entries of the 'groups_add_member_request' dict
}

request = service.groups().addMember(project, groupName, groups_add_member_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
# * Project ID for this request.
project = ''
# * Name of the Group resource to delete.
groupName = ''

request = service.groups().delete(project, groupName)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * Project ID for this request.
project = ''
# * Name of the Group resource to return.
groupName = ''

request = service.groups().get(project, groupName)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
# * Project ID for this request.
project = ''

group = {
# TODO: Add desired entries of the 'group' dict
}

request = service.groups().insert(project, group)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * Project ID for this request.
project = ''

groups = service.groups()
request = groups.list(project)
while request is not None:
    response = request.execute()

    for group in response['items']:
        # TODO: Add code here to process each 'group' resource

    request = groups.list_next(request, response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'removeMember' method:
# * Project ID for this request.
project = ''
# * Name of the group for this request.
groupName = ''

groups_remove_member_request = {
# TODO: Add desired entries of the 'groups_remove_member_request' dict
}

request = service.groups().removeMember(project, groupName, groups_remove_member_request)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'getAuthorizedKeysView' method:
# * Project ID for this request.
project = ''
# * Name of the zone for this request.
zone = ''
# * The user account for which you want to get a list of authorized public keys.
user = ''
# * The fully-qualified URL of the virtual machine requesting the view.
instance = ''

request = service.linux().getAuthorizedKeysView(project, zone, user, instance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'getLinuxAccountViews' method:
# * Project ID for this request.
project = ''
# * Name of the zone for this request.
zone = ''
# * The fully-qualified URL of the virtual machine requesting the views.
instance = ''

request = service.linux().getLinuxAccountViews(project, zone, instance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'addPublicKey' method:
# * Project ID for this request.
project = ''
# * Name of the user for this request.
user = ''

public_key = {
# TODO: Add desired entries of the 'public_key' dict
}

request = service.users().addPublicKey(project, user, public_key)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
# * Project ID for this request.
project = ''
# * Name of the user resource to delete.
user = ''

request = service.users().delete(project, user)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:
# * Project ID for this request.
project = ''
# * Name of the user resource to return.
user = ''

request = service.users().get(project, user)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:
# * Project ID for this request.
project = ''

user = {
# TODO: Add desired entries of the 'user' dict
}

request = service.users().insert(project, user)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:
# * Project ID for this request.
project = ''

users = service.users()
request = users.list(project)
while request is not None:
    response = request.execute()

    for user in response['items']:
        # TODO: Add code here to process each 'user' resource

    request = users.list_next(request, response)
"""
PRE-REQUISITES:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. Install python client library for Google APIs using 'pip install --upgrade google-api-python-client'
3. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
"""

from __future__ import print_function
import json

from apiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'removePublicKey' method:
# * Project ID for this request.
project = ''
# * Name of the user for this request.
user = ''
# * The fingerprint of the public key to delete. Public keys are identified by their fingerprint, which is defined by RFC4716 to be the MD5 digest of the public key.
fingerprint = ''

request = service.users().removePublicKey(project, user, fingerprint)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
print(json.dumps(response))
