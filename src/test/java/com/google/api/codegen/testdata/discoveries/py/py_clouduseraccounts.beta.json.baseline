
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   'gcloud beta auth application-default login'
3. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = '{MY-PROJECT}'

# * Name of the Operations resource to delete.
operation = '{MY-OPERATION}'

request = service.globalAccountsOperations().delete(project=project, operation=operation)
request.execute()
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   'gcloud beta auth application-default login'
3. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = '{MY-PROJECT}'

# * Name of the Operations resource to return.
operation = '{MY-OPERATION}'

request = service.globalAccountsOperations().get(project=project, operation=operation)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   'gcloud beta auth application-default login'
3. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = '{MY-PROJECT}'

globalAccountsOperations = service.globalAccountsOperations()
request = globalAccountsOperations.list(project=project)
while request is not None:
    response = request.execute()

    for operation in response['items']:
        # TODO: Add code here to process each 'operation' resource

    request = globalAccountsOperations.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   'gcloud beta auth application-default login'
3. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'addMember' method:

# * Project ID for this request.
project = '{MY-PROJECT}'

# * Name of the group for this request.
groupName = '{MY-GROUP-NAME}'

groups_add_member_request_body = {
# TODO: Add desired entries of the 'groups_add_member_request_body' dict
}

request = service.groups().addMember(project=project, groupName=groupName, body=groups_add_member_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   'gcloud beta auth application-default login'
3. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = '{MY-PROJECT}'

# * Name of the Group resource to delete.
groupName = '{MY-GROUP-NAME}'

request = service.groups().delete(project=project, groupName=groupName)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   'gcloud beta auth application-default login'
3. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = '{MY-PROJECT}'

# * Name of the Group resource to return.
groupName = '{MY-GROUP-NAME}'

request = service.groups().get(project=project, groupName=groupName)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   'gcloud beta auth application-default login'
3. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = '{MY-PROJECT}'

group_body = {
# TODO: Add desired entries of the 'group_body' dict
}

request = service.groups().insert(project=project, body=group_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   'gcloud beta auth application-default login'
3. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = '{MY-PROJECT}'

groups = service.groups()
request = groups.list(project=project)
while request is not None:
    response = request.execute()

    for group in response['items']:
        # TODO: Add code here to process each 'group' resource

    request = groups.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   'gcloud beta auth application-default login'
3. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'removeMember' method:

# * Project ID for this request.
project = '{MY-PROJECT}'

# * Name of the group for this request.
groupName = '{MY-GROUP-NAME}'

groups_remove_member_request_body = {
# TODO: Add desired entries of the 'groups_remove_member_request_body' dict
}

request = service.groups().removeMember(project=project, groupName=groupName, body=groups_remove_member_request_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   'gcloud beta auth application-default login'
3. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'getAuthorizedKeysView' method:

# * Project ID for this request.
project = '{MY-PROJECT}'

# * Name of the zone for this request.
zone = '{MY-ZONE}'  # eg. 'us-central1-f'

# * The user account for which you want to get a list of authorized public keys.
user = '{MY-USER}'

# * The fully-qualified URL of the virtual machine requesting the view.
instance = '{MY-INSTANCE}'

request = service.linux().getAuthorizedKeysView(project=project, zone=zone, user=user, instance=instance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   'gcloud beta auth application-default login'
3. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'getLinuxAccountViews' method:

# * Project ID for this request.
project = '{MY-PROJECT}'

# * Name of the zone for this request.
zone = '{MY-ZONE}'  # eg. 'us-central1-f'

# * The fully-qualified URL of the virtual machine requesting the views.
instance = '{MY-INSTANCE}'

request = service.linux().getLinuxAccountViews(project=project, zone=zone, instance=instance)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   'gcloud beta auth application-default login'
3. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'addPublicKey' method:

# * Project ID for this request.
project = '{MY-PROJECT}'

# * Name of the user for this request.
user = '{MY-USER}'

public_key_body = {
# TODO: Add desired entries of the 'public_key_body' dict
}

request = service.users().addPublicKey(project=project, user=user, body=public_key_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   'gcloud beta auth application-default login'
3. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'delete' method:

# * Project ID for this request.
project = '{MY-PROJECT}'

# * Name of the user resource to delete.
user = '{MY-USER}'

request = service.users().delete(project=project, user=user)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   'gcloud beta auth application-default login'
3. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'get' method:

# * Project ID for this request.
project = '{MY-PROJECT}'

# * Name of the user resource to return.
user = '{MY-USER}'

request = service.users().get(project=project, user=user)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   'gcloud beta auth application-default login'
3. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'insert' method:

# * Project ID for this request.
project = '{MY-PROJECT}'

user_body = {
# TODO: Add desired entries of the 'user_body' dict
}

request = service.users().insert(project=project, body=user_body)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   'gcloud beta auth application-default login'
3. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'list' method:

# * Project ID for this request.
project = '{MY-PROJECT}'

users = service.users()
request = users.list(project=project)
while request is not None:
    response = request.execute()

    for user in response['items']:
        # TODO: Add code here to process each 'user' resource

    request = users.list_next(previous_request=request, previous_response=response)
"""
BEFORE RUNNING:
---------------
1. If not already done, enable the Cloud User Accounts API
   and check the quota for your project at
   https://console.developers.google.com/apis/api/clouduseraccounts
2. This sample uses Application Default Credentials for authentication.
   If not already done, install the gcloud CLI from
   https://cloud.google.com/sdk/ and run
   'gcloud beta auth application-default login'
3. Install the Python client library for Google APIs by running
   'pip install --upgrade google-api-python-client'
"""

from pprint import pprint

from googleapiclient import discovery
from oauth2client.client import GoogleCredentials

# Authentication is provided by the 'gcloud' tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# See https://developers.google.com/identity/protocols/application-default-credentials for more information.
credentials = GoogleCredentials.get_application_default()

# Construct the clouduseraccounts service object (version beta) for interacting
# with the API. You can browse other available API services and versions at
# https://developers.google.com/api-client-library/python/apis/
service = discovery.build('clouduseraccounts', 'beta', credentials=credentials)


# TODO: Change placeholders below to appropriate parameter values for the 'removePublicKey' method:

# * Project ID for this request.
project = '{MY-PROJECT}'

# * Name of the user for this request.
user = '{MY-USER}'

# * The fingerprint of the public key to delete. Public keys are identified by their fingerprint,
#   which is defined by RFC4716 to be the MD5 digest of the public key.
fingerprint = '{MY-FINGERPRINT}'

request = service.users().removePublicKey(project=project, user=user, fingerprint=fingerprint)
response = request.execute()

# TODO: Change code below to process the 'response' dict:
pprint(response)
