============== file: src/main/java/com/google/cloud/fakebilling/v1/AttachedDisk.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import java.io.Serializable;
import java.util.List;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class AttachedDisk implements Serializable {
  private final Integer index;
  private final Interface interface2;
  private final List<String> licenses;
  private final String mode;
  private final String type;

  private AttachedDisk(

    Integer index,
    Interface interface2,
    List<String> licenses,
    String mode,
    String type
    ) {
    this.index = index;
    this.interface2 = interface2;
    this.licenses = licenses;
    this.mode = mode;
    this.type = type;
  }

  public Integer getIndex() {
    return index;
  }

  public Interface getInterface() {
    return interface2;
  }

  public List<String> getLicenses() {
    return licenses;
  }

  public String getMode() {
    return mode;
  }

  public String getType() {
    return type;
  }


  public static Builder newBuilder() {
    return new AttachedDisk.Builder();
  }

  public static class Builder {
    private Integer index;
    private Interface interface2;
    private List<String> licenses;
    private String mode;
    private String type;

    Builder() {}

    Builder(AttachedDisk source) {
      this.index = source.index;
      this.interface2 = source.interface2;
      this.licenses = source.licenses;
      this.mode = source.mode;
      this.type = source.type;
    }

    public Integer getIndex() {
      return index;
    }

    public Builder setIndex(Integer index) {
      this.index = index;
      return this;
    }

    public Interface getInterface() {
      return interface2;
    }

    public Builder setInterface(Interface interface2) {
      this.interface2 = interface2;
      return this;
    }

    public List<String> getLicenses() {
      return licenses;
    }

    public Builder setLicenses(List<String> licenses) {
      this.licenses = licenses;
      return this;
    }

    public String getMode() {
      return mode;
    }

    public Builder setMode(String mode) {
      this.mode = mode;
      return this;
    }

    public String getType() {
      return type;
    }

    public Builder setType(String type) {
      this.type = type;
      return this;
    }


    public AttachedDisk build() {
      return new AttachedDisk(

        index,
        interface2,
        licenses,
        mode,
        type
      );
    }
  }

  @Override
  public String toString() {
    return "AttachedDisk{"

    + "index=" + index + ", "
    + "interface2=" + interface2 + ", "
    + "licenses=" + licenses + ", "
    + "mode=" + mode + ", "
    + "type=" + type
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof AttachedDisk) {
      AttachedDisk that = (AttachedDisk) o;
      return

      this.index.equals(that.getIndex())&&
      this.interface2.equals(that.getInterface())&&
      this.licenses.equals(that.getLicenses())&&
      this.mode.equals(that.getMode())&&
      this.type.equals(that.getType())
      ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h = 1;
    h *= 1000003;
    h ^= this.index.hashCode();
    h *= 1000003;
    h ^= this.interface2.hashCode();
    h *= 1000003;
    h ^= this.licenses.hashCode();
    h *= 1000003;
    h ^= this.mode.hashCode();
    h *= 1000003;
    h ^= this.type.hashCode();
    return h;
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/BillingAccount.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import java.io.Serializable;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class BillingAccount implements Serializable {
  private final String name;
  private final Boolean open;

  private BillingAccount(

    String name,
    Boolean open
    ) {
    this.name = name;
    this.open = open;
  }

  public String getName() {
    return name;
  }

  public Boolean getOpen() {
    return open;
  }


  public static Builder newBuilder() {
    return new BillingAccount.Builder();
  }

  public static class Builder {
    private String name;
    private Boolean open;

    Builder() {}

    Builder(BillingAccount source) {
      this.name = source.name;
      this.open = source.open;
    }

    public String getName() {
      return name;
    }

    public Builder setName(String name) {
      this.name = name;
      return this;
    }

    public Boolean getOpen() {
      return open;
    }

    public Builder setOpen(Boolean open) {
      this.open = open;
      return this;
    }


    public BillingAccount build() {
      return new BillingAccount(

        name,
        open
      );
    }
  }

  @Override
  public String toString() {
    return "BillingAccount{"

    + "name=" + name + ", "
    + "open=" + open
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof BillingAccount) {
      BillingAccount that = (BillingAccount) o;
      return

      this.name.equals(that.getName())&&
      this.open.equals(that.getOpen())
      ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h = 1;
    h *= 1000003;
    h ^= this.name.hashCode();
    h *= 1000003;
    h ^= this.open.hashCode();
    return h;
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/BillingAccountsGetHttpRequest.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import com.google.common.collect.ImmutableList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class BillingAccountsGetHttpRequest implements ApiMessage {
  private static final BillingAccountsGetHttpRequest DEFAULT_INSTANCE = new BillingAccountsGetHttpRequest();


  // Query parameters.
  private String access_token;
  private String callback;
  private String fields;
  private String key;
  private String prettyPrint;
  private String quotaUser;
  private String userIp;
  private List<String> fooRepeated;

  // Path parameters.
  private String name;

  private BillingAccountsGetHttpRequest(
      String access_token,
      String callback,
      String fields,
      String key,
      String prettyPrint,
      String quotaUser,
      String userIp,
      List<String> fooRepeated,
      String name
      ) {
    this.access_token = access_token;
    this.callback = callback;
    this.fields = fields;
    this.key = key;
    this.prettyPrint = prettyPrint;
    this.quotaUser = quotaUser;
    this.userIp = userIp;
    this.fooRepeated = fooRepeated;
    this.name = name;
  }

  private BillingAccountsGetHttpRequest() {}

  public Map<String, List<String>> populateFieldsInMap(Set<String> fieldNames, Map<String, List<String>> map) {
    Map<String, List<String>> fieldMap = new HashMap<>();
    if (fieldNames.contains("access_token")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("callback")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("fields")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("key")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("prettyPrint")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("quotaUser")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("userIp")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("fooRepeated")) {
      fieldMap.put("fooRepeated", fooRepeated);
    }
    if (fieldNames.contains("name")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    return fieldMap;
  }


  public String getAccessToken () {
    return access_token;
  }
  public String getCallback () {
    return callback;
  }
  public String getFields () {
    return fields;
  }
  public String getKey () {
    return key;
  }
  public String getPrettyPrint () {
    return prettyPrint;
  }
  public String getQuotaUser () {
    return quotaUser;
  }
  public String getUserIp () {
    return userIp;
  }
  public List<String> getFooRepeated () {
    return fooRepeated;
  }
  public String getName () {
    return name;
  }

  public static Builder newBuilder() {
    return new BillingAccountsGetHttpRequest.Builder();
  }

  public static class Builder {
    private String access_token;
    private String callback;
    private String fields;
    private String key;
    private String prettyPrint;
    private String quotaUser;
    private String userIp;
    private List<String> fooRepeated;
    private String name;

    Builder() {}

    Builder(BillingAccountsGetHttpRequest source) {
      this.access_token = source.getAccessToken();
      this.callback = source.getCallback();
      this.fields = source.getFields();
      this.key = source.getKey();
      this.prettyPrint = source.getPrettyPrint();
      this.quotaUser = source.getQuotaUser();
      this.userIp = source.getUserIp();
      this.fooRepeated = source.getFooRepeated();
      this.name = source.getName();
    }

    public String getAccessToken() {
      return access_token;
    }

    public Builder setAccessToken(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public String getCallback() {
      return callback;
    }

    public Builder setCallback(String callback) {
      this.callback = callback;
      return this;
    }

    public String getFields() {
      return fields;
    }

    public Builder setFields(String fields) {
      this.fields = fields;
      return this;
    }

    public String getKey() {
      return key;
    }

    public Builder setKey(String key) {
      this.key = key;
      return this;
    }

    public String getPrettyPrint() {
      return prettyPrint;
    }

    public Builder setPrettyPrint(String prettyPrint) {
      this.prettyPrint = prettyPrint;
      return this;
    }

    public String getQuotaUser() {
      return quotaUser;
    }

    public Builder setQuotaUser(String quotaUser) {
      this.quotaUser = quotaUser;
      return this;
    }

    public String getUserIp() {
      return userIp;
    }

    public Builder setUserIp(String userIp) {
      this.userIp = userIp;
      return this;
    }

    public List<String> getFooRepeated() {
      return fooRepeated;
    }

    public Builder setFooRepeated(List<String> fooRepeated) {
      this.fooRepeated = ImmutableList.copyOf(fooRepeated);
      return this;
    }

    public String getName() {
      return name;
    }

    public Builder setName(String name) {
      if (name == null) {
        throw new IllegalArgumentException("\"name\" is a required parameter.");
      }
      this.name = name;
      return this;
    }


    public BillingAccountsGetHttpRequest build() {
      String missing = "";








      if (name == null) {
        missing += " name";
      }
      return new BillingAccountsGetHttpRequest(
          access_token,
          callback,
          fields,
          key,
          prettyPrint,
          quotaUser,
          userIp,
          fooRepeated,
          name
      );
    }

    public Builder clone() {
      Builder newBuilder = new Builder();
      if (access_token != null) {
        newBuilder.setAccessToken(this.access_token);
      }
      if (callback != null) {
        newBuilder.setCallback(this.callback);
      }
      if (fields != null) {
        newBuilder.setFields(this.fields);
      }
      if (key != null) {
        newBuilder.setKey(this.key);
      }
      if (prettyPrint != null) {
        newBuilder.setPrettyPrint(this.prettyPrint);
      }
      if (quotaUser != null) {
        newBuilder.setQuotaUser(this.quotaUser);
      }
      if (userIp != null) {
        newBuilder.setUserIp(this.userIp);
      }
      if (fooRepeated != null) {
        newBuilder.setFooRepeated(this.fooRepeated);
      }
      if (name != null) {
        newBuilder.setName(this.name);
      }
      return newBuilder;
    }
  }

  @Override
  public String toString() {
    return "BillingAccountsGetHttpRequest{"
        + "access_token=" + access_token + ", "
        + "callback=" + callback + ", "
        + "fields=" + fields + ", "
        + "key=" + key + ", "
        + "prettyPrint=" + prettyPrint + ", "
        + "quotaUser=" + quotaUser + ", "
        + "userIp=" + userIp + ", "
        + "fooRepeated=" + fooRepeated + ", "
        + "name=" + name
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof BillingAccountsGetHttpRequest) {
      BillingAccountsGetHttpRequest that = (BillingAccountsGetHttpRequest) o;
      return
          Objects.equals(this.access_token, that.getAccessToken())&&
          Objects.equals(this.callback, that.getCallback())&&
          Objects.equals(this.fields, that.getFields())&&
          Objects.equals(this.key, that.getKey())&&
          Objects.equals(this.prettyPrint, that.getPrettyPrint())&&
          Objects.equals(this.quotaUser, that.getQuotaUser())&&
          Objects.equals(this.userIp, that.getUserIp())&&
          Objects.equals(this.fooRepeated, that.getFooRepeated())&&
          Objects.equals(this.name, that.getName())
          ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      access_token,
      callback,
      fields,
      key,
      prettyPrint,
      quotaUser,
      userIp,
      fooRepeated,
      name
    );
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/BillingAccountsListHttpRequest.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import com.google.common.collect.ImmutableList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class BillingAccountsListHttpRequest implements ApiMessage {
  private static final BillingAccountsListHttpRequest DEFAULT_INSTANCE = new BillingAccountsListHttpRequest();


  // Query parameters.
  private String access_token;
  private String callback;
  private String fields;
  private String key;
  private String prettyPrint;
  private String quotaUser;
  private String userIp;
  private Integer pageSize;
  private String pageToken;



  private BillingAccountsListHttpRequest(
      String access_token,
      String callback,
      String fields,
      String key,
      String prettyPrint,
      String quotaUser,
      String userIp,
      Integer pageSize,
      String pageToken
      ) {
    this.access_token = access_token;
    this.callback = callback;
    this.fields = fields;
    this.key = key;
    this.prettyPrint = prettyPrint;
    this.quotaUser = quotaUser;
    this.userIp = userIp;
    this.pageSize = pageSize;
    this.pageToken = pageToken;
  }

  private BillingAccountsListHttpRequest() {}

  public Map<String, List<String>> populateFieldsInMap(Set<String> fieldNames, Map<String, List<String>> map) {
    Map<String, List<String>> fieldMap = new HashMap<>();
    if (fieldNames.contains("access_token")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("callback")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("fields")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("key")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("prettyPrint")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("quotaUser")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("userIp")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("pageSize")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("pageToken")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    return fieldMap;
  }


  public String getAccessToken () {
    return access_token;
  }
  public String getCallback () {
    return callback;
  }
  public String getFields () {
    return fields;
  }
  public String getKey () {
    return key;
  }
  public String getPrettyPrint () {
    return prettyPrint;
  }
  public String getQuotaUser () {
    return quotaUser;
  }
  public String getUserIp () {
    return userIp;
  }
  public Integer getPageSize () {
    return pageSize;
  }
  public String getPageToken () {
    return pageToken;
  }

  public static Builder newBuilder() {
    return new BillingAccountsListHttpRequest.Builder();
  }

  public static class Builder {
    private String access_token;
    private String callback;
    private String fields;
    private String key;
    private String prettyPrint;
    private String quotaUser;
    private String userIp;
    private Integer pageSize;
    private String pageToken;

    Builder() {}

    Builder(BillingAccountsListHttpRequest source) {
      this.access_token = source.getAccessToken();
      this.callback = source.getCallback();
      this.fields = source.getFields();
      this.key = source.getKey();
      this.prettyPrint = source.getPrettyPrint();
      this.quotaUser = source.getQuotaUser();
      this.userIp = source.getUserIp();
      this.pageSize = source.getPageSize();
      this.pageToken = source.getPageToken();
    }

    public String getAccessToken() {
      return access_token;
    }

    public Builder setAccessToken(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public String getCallback() {
      return callback;
    }

    public Builder setCallback(String callback) {
      this.callback = callback;
      return this;
    }

    public String getFields() {
      return fields;
    }

    public Builder setFields(String fields) {
      this.fields = fields;
      return this;
    }

    public String getKey() {
      return key;
    }

    public Builder setKey(String key) {
      this.key = key;
      return this;
    }

    public String getPrettyPrint() {
      return prettyPrint;
    }

    public Builder setPrettyPrint(String prettyPrint) {
      this.prettyPrint = prettyPrint;
      return this;
    }

    public String getQuotaUser() {
      return quotaUser;
    }

    public Builder setQuotaUser(String quotaUser) {
      this.quotaUser = quotaUser;
      return this;
    }

    public String getUserIp() {
      return userIp;
    }

    public Builder setUserIp(String userIp) {
      this.userIp = userIp;
      return this;
    }

    public Integer getPageSize() {
      return pageSize;
    }

    public Builder setPageSize(Integer pageSize) {
      this.pageSize = pageSize;
      return this;
    }

    public String getPageToken() {
      return pageToken;
    }

    public Builder setPageToken(String pageToken) {
      this.pageToken = pageToken;
      return this;
    }



    public BillingAccountsListHttpRequest build() {
      String missing = "";








      return new BillingAccountsListHttpRequest(
          access_token,
          callback,
          fields,
          key,
          prettyPrint,
          quotaUser,
          userIp,
          pageSize,
          pageToken
      );
    }

    public Builder clone() {
      Builder newBuilder = new Builder();
      if (access_token != null) {
        newBuilder.setAccessToken(this.access_token);
      }
      if (callback != null) {
        newBuilder.setCallback(this.callback);
      }
      if (fields != null) {
        newBuilder.setFields(this.fields);
      }
      if (key != null) {
        newBuilder.setKey(this.key);
      }
      if (prettyPrint != null) {
        newBuilder.setPrettyPrint(this.prettyPrint);
      }
      if (quotaUser != null) {
        newBuilder.setQuotaUser(this.quotaUser);
      }
      if (userIp != null) {
        newBuilder.setUserIp(this.userIp);
      }
      if (pageSize != null) {
        newBuilder.setPageSize(this.pageSize);
      }
      if (pageToken != null) {
        newBuilder.setPageToken(this.pageToken);
      }
      return newBuilder;
    }
  }

  @Override
  public String toString() {
    return "BillingAccountsListHttpRequest{"
        + "access_token=" + access_token + ", "
        + "callback=" + callback + ", "
        + "fields=" + fields + ", "
        + "key=" + key + ", "
        + "prettyPrint=" + prettyPrint + ", "
        + "quotaUser=" + quotaUser + ", "
        + "userIp=" + userIp + ", "
        + "pageSize=" + pageSize + ", "
        + "pageToken=" + pageToken
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof BillingAccountsListHttpRequest) {
      BillingAccountsListHttpRequest that = (BillingAccountsListHttpRequest) o;
      return
          Objects.equals(this.access_token, that.getAccessToken())&&
          Objects.equals(this.callback, that.getCallback())&&
          Objects.equals(this.fields, that.getFields())&&
          Objects.equals(this.key, that.getKey())&&
          Objects.equals(this.prettyPrint, that.getPrettyPrint())&&
          Objects.equals(this.quotaUser, that.getQuotaUser())&&
          Objects.equals(this.userIp, that.getUserIp())&&
          Objects.equals(this.pageSize, that.getPageSize())&&
          Objects.equals(this.pageToken, that.getPageToken())
          ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      access_token,
      callback,
      fields,
      key,
      prettyPrint,
      quotaUser,
      userIp,
      pageSize,
      pageToken
    );
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/Data.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import java.io.Serializable;
import java.util.List;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class Data implements Serializable {
  private final String key;
  private final String value;

  private Data(

    String key,
    String value
    ) {
    this.key = key;
    this.value = value;
  }

  public String getKey() {
    return key;
  }

  public String getValue() {
    return value;
  }


  public static Builder newBuilder() {
    return new Data.Builder();
  }

  public static class Builder {
    private String key;
    private String value;

    Builder() {}

    Builder(Data source) {
      this.key = source.key;
      this.value = source.value;
    }

    public String getKey() {
      return key;
    }

    public Builder setKey(String key) {
      this.key = key;
      return this;
    }

    public String getValue() {
      return value;
    }

    public Builder setValue(String value) {
      this.value = value;
      return this;
    }


    public Data build() {
      return new Data(

        key,
        value
      );
    }
  }

  @Override
  public String toString() {
    return "Data{"

    + "key=" + key + ", "
    + "value=" + value
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof Data) {
      Data that = (Data) o;
      return

      this.key.equals(that.getKey())&&
      this.value.equals(that.getValue())
      ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h = 1;
    h *= 1000003;
    h ^= this.key.hashCode();
    h *= 1000003;
    h ^= this.value.hashCode();
    return h;
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/Error.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import java.io.Serializable;
import java.util.List;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class Error implements Serializable {
  private final List<Errors> errors;

  private Error(

    List<Errors> errors
    ) {
    this.errors = errors;
  }

  public List<Errors> getErrors() {
    return errors;
  }


  public static Builder newBuilder() {
    return new Error.Builder();
  }

  public static class Builder {
    private List<Errors> errors;

    Builder() {}

    Builder(Error source) {
      this.errors = source.errors;
    }

    public List<Errors> getErrors() {
      return errors;
    }

    public Builder setErrors(List<Errors> errors) {
      this.errors = errors;
      return this;
    }


    public Error build() {
      return new Error(

        errors
      );
    }
  }

  @Override
  public String toString() {
    return "Error{"

    + "errors=" + errors
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof Error) {
      Error that = (Error) o;
      return

      this.errors.equals(that.getErrors())
      ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h = 1;
    h *= 1000003;
    h ^= this.errors.hashCode();
    return h;
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/Errors.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import java.io.Serializable;
import java.util.List;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class Errors implements Serializable {
  private final String code;
  private final String location;
  private final String message;

  private Errors(

    String code,
    String location,
    String message
    ) {
    this.code = code;
    this.location = location;
    this.message = message;
  }

  public String getCode() {
    return code;
  }

  public String getLocation() {
    return location;
  }

  public String getMessage() {
    return message;
  }


  public static Builder newBuilder() {
    return new Errors.Builder();
  }

  public static class Builder {
    private String code;
    private String location;
    private String message;

    Builder() {}

    Builder(Errors source) {
      this.code = source.code;
      this.location = source.location;
      this.message = source.message;
    }

    public String getCode() {
      return code;
    }

    public Builder setCode(String code) {
      this.code = code;
      return this;
    }

    public String getLocation() {
      return location;
    }

    public Builder setLocation(String location) {
      this.location = location;
      return this;
    }

    public String getMessage() {
      return message;
    }

    public Builder setMessage(String message) {
      this.message = message;
      return this;
    }


    public Errors build() {
      return new Errors(

        code,
        location,
        message
      );
    }
  }

  @Override
  public String toString() {
    return "Errors{"

    + "code=" + code + ", "
    + "location=" + location + ", "
    + "message=" + message
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof Errors) {
      Errors that = (Errors) o;
      return

      this.code.equals(that.getCode())&&
      this.location.equals(that.getLocation())&&
      this.message.equals(that.getMessage())
      ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h = 1;
    h *= 1000003;
    h ^= this.code.hashCode();
    h *= 1000003;
    h ^= this.location.hashCode();
    h *= 1000003;
    h ^= this.message.hashCode();
    return h;
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/FakebillingClient.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.grpc.ChannelAndExecutor;
import com.google.api.gax.grpc.UnaryCallable;
import com.google.api.pathtemplate.PathTemplate;
import io.grpc.ManagedChannel;
import java.io.Closeable;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ScheduledExecutorService;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public class FakebillingClient implements AutoCloseable {
  private final FakebillingSettings settings;
  private final ScheduledExecutorService executor;
  private final ManagedChannel channel;
  private final List<AutoCloseable> closeables = new ArrayList<>();




  /**
   * Constructs an instance of FakebillingClient with default settings.
   */
  public static final FakebillingClient create() throws IOException {
    return create(FakebillingSettings.defaultBuilder().build());
  }

  /**
   * Constructs an instance of FakebillingClient, using the given settings.
   * The channels are created based on the settings passed in, or defaults for any
   * settings that are not set.
   */
  public static final FakebillingClient create(FakebillingSettings settings) throws IOException {
    return new FakebillingClient(settings);
  }

  /**
   * Constructs an instance of FakebillingClient, using the given settings.
   * This is protected so that it easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected FakebillingClient(FakebillingSettings settings) throws IOException {
    this.settings = settings;
    ChannelAndExecutor channelAndExecutor = settings.getChannelAndExecutor();
    this.executor = channelAndExecutor.getExecutor();
    this.channel = channelAndExecutor.getChannel();
    Credentials credentials = settings.getCredentialsProvider().getCredentials();

    ClientContext clientContext =
        ClientContext.newBuilder()
            .setExecutor(this.executor)
            .setChannel(this.channel)
            .setCredentials(credentials)
            .build();



    if (settings.getChannelProvider().shouldAutoClose()) {
      closeables.add(
        new Closeable() {
          @Override
          public void close() throws IOException {
            channel.shutdown();
          }
        });
    }
    if (settings.getExecutorProvider().shouldAutoClose()) {
      closeables.add(
        new Closeable() {
          @Override
          public void close() throws IOException {
            executor.shutdown();
          }
        });
    }
  }

  public final FakebillingSettings getSettings() {
    return settings;
  }



  /**
   * Initiates an orderly shutdown in which preexisting calls continue but new calls are immediately
   * cancelled.
   */
  @Override
  public final void close() throws Exception {
    for (AutoCloseable closeable : closeables) {
      closeable.close();
    }
  }

}
============== file: src/main/java/com/google/cloud/fakebilling/v1/Interface.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import java.io.Serializable;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class Interface implements Serializable {
  private final String face;
  private final Boolean inter;
  private final String interface2;

  private Interface(

    String face,
    Boolean inter,
    String interface2
    ) {
    this.face = face;
    this.inter = inter;
    this.interface2 = interface2;
  }

  public String getFace() {
    return face;
  }

  public Boolean getInter() {
    return inter;
  }

  public String getInterface() {
    return interface2;
  }


  public static Builder newBuilder() {
    return new Interface.Builder();
  }

  public static class Builder {
    private String face;
    private Boolean inter;
    private String interface2;

    Builder() {}

    Builder(Interface source) {
      this.face = source.face;
      this.inter = source.inter;
      this.interface2 = source.interface2;
    }

    public String getFace() {
      return face;
    }

    public Builder setFace(String face) {
      this.face = face;
      return this;
    }

    public Boolean getInter() {
      return inter;
    }

    public Builder setInter(Boolean inter) {
      this.inter = inter;
      return this;
    }

    public String getInterface() {
      return interface2;
    }

    public Builder setInterface(String interface2) {
      this.interface2 = interface2;
      return this;
    }


    public Interface build() {
      return new Interface(

        face,
        inter,
        interface2
      );
    }
  }

  @Override
  public String toString() {
    return "Interface{"

    + "face=" + face + ", "
    + "inter=" + inter + ", "
    + "interface2=" + interface2
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof Interface) {
      Interface that = (Interface) o;
      return

      this.face.equals(that.getFace())&&
      this.inter.equals(that.getInter())&&
      this.interface2.equals(that.getInterface())
      ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h = 1;
    h *= 1000003;
    h ^= this.face.hashCode();
    h *= 1000003;
    h ^= this.inter.hashCode();
    h *= 1000003;
    h ^= this.interface2.hashCode();
    return h;
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/ListBillingAccountsResponse.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import java.io.Serializable;
import java.util.List;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class ListBillingAccountsResponse implements Serializable {
  private final List<BillingAccount> billingAccounts;
  private final String nextPageToken;

  private ListBillingAccountsResponse(

    List<BillingAccount> billingAccounts,
    String nextPageToken
    ) {
    this.billingAccounts = billingAccounts;
    this.nextPageToken = nextPageToken;
  }

  public List<BillingAccount> getBillingAccounts() {
    return billingAccounts;
  }

  public String getNextPageToken() {
    return nextPageToken;
  }


  public static Builder newBuilder() {
    return new ListBillingAccountsResponse.Builder();
  }

  public static class Builder {
    private List<BillingAccount> billingAccounts;
    private String nextPageToken;

    Builder() {}

    Builder(ListBillingAccountsResponse source) {
      this.billingAccounts = source.billingAccounts;
      this.nextPageToken = source.nextPageToken;
    }

    public List<BillingAccount> getBillingAccounts() {
      return billingAccounts;
    }

    public Builder setBillingAccounts(List<BillingAccount> billingAccounts) {
      this.billingAccounts = billingAccounts;
      return this;
    }

    public String getNextPageToken() {
      return nextPageToken;
    }

    public Builder setNextPageToken(String nextPageToken) {
      this.nextPageToken = nextPageToken;
      return this;
    }


    public ListBillingAccountsResponse build() {
      return new ListBillingAccountsResponse(

        billingAccounts,
        nextPageToken
      );
    }
  }

  @Override
  public String toString() {
    return "ListBillingAccountsResponse{"

    + "billingAccounts=" + billingAccounts + ", "
    + "nextPageToken=" + nextPageToken
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof ListBillingAccountsResponse) {
      ListBillingAccountsResponse that = (ListBillingAccountsResponse) o;
      return

      this.billingAccounts.equals(that.getBillingAccounts())&&
      this.nextPageToken.equals(that.getNextPageToken())
      ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h = 1;
    h *= 1000003;
    h ^= this.billingAccounts.hashCode();
    h *= 1000003;
    h ^= this.nextPageToken.hashCode();
    return h;
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/ListProjectBillingInfoResponse.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import java.io.Serializable;
import java.util.List;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class ListProjectBillingInfoResponse implements Serializable {
  private final String nextPageToken;
  private final List<ProjectBillingInfo> projectBillingInfo;

  private ListProjectBillingInfoResponse(

    String nextPageToken,
    List<ProjectBillingInfo> projectBillingInfo
    ) {
    this.nextPageToken = nextPageToken;
    this.projectBillingInfo = projectBillingInfo;
  }

  public String getNextPageToken() {
    return nextPageToken;
  }

  public List<ProjectBillingInfo> getProjectBillingInfo() {
    return projectBillingInfo;
  }


  public static Builder newBuilder() {
    return new ListProjectBillingInfoResponse.Builder();
  }

  public static class Builder {
    private String nextPageToken;
    private List<ProjectBillingInfo> projectBillingInfo;

    Builder() {}

    Builder(ListProjectBillingInfoResponse source) {
      this.nextPageToken = source.nextPageToken;
      this.projectBillingInfo = source.projectBillingInfo;
    }

    public String getNextPageToken() {
      return nextPageToken;
    }

    public Builder setNextPageToken(String nextPageToken) {
      this.nextPageToken = nextPageToken;
      return this;
    }

    public List<ProjectBillingInfo> getProjectBillingInfo() {
      return projectBillingInfo;
    }

    public Builder setProjectBillingInfo(List<ProjectBillingInfo> projectBillingInfo) {
      this.projectBillingInfo = projectBillingInfo;
      return this;
    }


    public ListProjectBillingInfoResponse build() {
      return new ListProjectBillingInfoResponse(

        nextPageToken,
        projectBillingInfo
      );
    }
  }

  @Override
  public String toString() {
    return "ListProjectBillingInfoResponse{"

    + "nextPageToken=" + nextPageToken + ", "
    + "projectBillingInfo=" + projectBillingInfo
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof ListProjectBillingInfoResponse) {
      ListProjectBillingInfoResponse that = (ListProjectBillingInfoResponse) o;
      return

      this.nextPageToken.equals(that.getNextPageToken())&&
      this.projectBillingInfo.equals(that.getProjectBillingInfo())
      ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h = 1;
    h *= 1000003;
    h ^= this.nextPageToken.hashCode();
    h *= 1000003;
    h ^= this.projectBillingInfo.hashCode();
    return h;
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/Operation.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import java.io.Serializable;
import java.util.List;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class Operation implements Serializable {
  private final String creationTimestamp;
  private final String description;
  private final Error error;
  private final Integer httpErrorStatusCode;
  private final String id;
  private final String name;
  private final String status;
  private final List<Warnings> warnings;

  private Operation(

    String creationTimestamp,
    String description,
    Error error,
    Integer httpErrorStatusCode,
    String id,
    String name,
    String status,
    List<Warnings> warnings
    ) {
    this.creationTimestamp = creationTimestamp;
    this.description = description;
    this.error = error;
    this.httpErrorStatusCode = httpErrorStatusCode;
    this.id = id;
    this.name = name;
    this.status = status;
    this.warnings = warnings;
  }

  public String getCreationTimestamp() {
    return creationTimestamp;
  }

  public String getDescription() {
    return description;
  }

  public Error getError() {
    return error;
  }

  public Integer getHttpErrorStatusCode() {
    return httpErrorStatusCode;
  }

  public String getId() {
    return id;
  }

  public String getName() {
    return name;
  }

  public String getStatus() {
    return status;
  }

  public List<Warnings> getWarnings() {
    return warnings;
  }


  public static Builder newBuilder() {
    return new Operation.Builder();
  }

  public static class Builder {
    private String creationTimestamp;
    private String description;
    private Error error;
    private Integer httpErrorStatusCode;
    private String id;
    private String name;
    private String status;
    private List<Warnings> warnings;

    Builder() {}

    Builder(Operation source) {
      this.creationTimestamp = source.creationTimestamp;
      this.description = source.description;
      this.error = source.error;
      this.httpErrorStatusCode = source.httpErrorStatusCode;
      this.id = source.id;
      this.name = source.name;
      this.status = source.status;
      this.warnings = source.warnings;
    }

    public String getCreationTimestamp() {
      return creationTimestamp;
    }

    public Builder setCreationTimestamp(String creationTimestamp) {
      this.creationTimestamp = creationTimestamp;
      return this;
    }

    public String getDescription() {
      return description;
    }

    public Builder setDescription(String description) {
      this.description = description;
      return this;
    }

    public Error getError() {
      return error;
    }

    public Builder setError(Error error) {
      this.error = error;
      return this;
    }

    public Integer getHttpErrorStatusCode() {
      return httpErrorStatusCode;
    }

    public Builder setHttpErrorStatusCode(Integer httpErrorStatusCode) {
      this.httpErrorStatusCode = httpErrorStatusCode;
      return this;
    }

    public String getId() {
      return id;
    }

    public Builder setId(String id) {
      this.id = id;
      return this;
    }

    public String getName() {
      return name;
    }

    public Builder setName(String name) {
      this.name = name;
      return this;
    }

    public String getStatus() {
      return status;
    }

    public Builder setStatus(String status) {
      this.status = status;
      return this;
    }

    public List<Warnings> getWarnings() {
      return warnings;
    }

    public Builder setWarnings(List<Warnings> warnings) {
      this.warnings = warnings;
      return this;
    }


    public Operation build() {
      return new Operation(

        creationTimestamp,
        description,
        error,
        httpErrorStatusCode,
        id,
        name,
        status,
        warnings
      );
    }
  }

  @Override
  public String toString() {
    return "Operation{"

    + "creationTimestamp=" + creationTimestamp + ", "
    + "description=" + description + ", "
    + "error=" + error + ", "
    + "httpErrorStatusCode=" + httpErrorStatusCode + ", "
    + "id=" + id + ", "
    + "name=" + name + ", "
    + "status=" + status + ", "
    + "warnings=" + warnings
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof Operation) {
      Operation that = (Operation) o;
      return

      this.creationTimestamp.equals(that.getCreationTimestamp())&&
      this.description.equals(that.getDescription())&&
      this.error.equals(that.getError())&&
      this.httpErrorStatusCode.equals(that.getHttpErrorStatusCode())&&
      this.id.equals(that.getId())&&
      this.name.equals(that.getName())&&
      this.status.equals(that.getStatus())&&
      this.warnings.equals(that.getWarnings())
      ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h = 1;
    h *= 1000003;
    h ^= this.creationTimestamp.hashCode();
    h *= 1000003;
    h ^= this.description.hashCode();
    h *= 1000003;
    h ^= this.error.hashCode();
    h *= 1000003;
    h ^= this.httpErrorStatusCode.hashCode();
    h *= 1000003;
    h ^= this.id.hashCode();
    h *= 1000003;
    h ^= this.name.hashCode();
    h *= 1000003;
    h ^= this.status.hashCode();
    h *= 1000003;
    h ^= this.warnings.hashCode();
    return h;
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/ProjectBillingInfo.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import java.io.Serializable;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class ProjectBillingInfo implements Serializable {
  private final Boolean billingEnabled;
  private final String projectId;

  private ProjectBillingInfo(

    Boolean billingEnabled,
    String projectId
    ) {
    this.billingEnabled = billingEnabled;
    this.projectId = projectId;
  }

  public Boolean getBillingEnabled() {
    return billingEnabled;
  }

  public String getProjectId() {
    return projectId;
  }


  public static Builder newBuilder() {
    return new ProjectBillingInfo.Builder();
  }

  public static class Builder {
    private Boolean billingEnabled;
    private String projectId;

    Builder() {}

    Builder(ProjectBillingInfo source) {
      this.billingEnabled = source.billingEnabled;
      this.projectId = source.projectId;
    }

    public Boolean getBillingEnabled() {
      return billingEnabled;
    }

    public Builder setBillingEnabled(Boolean billingEnabled) {
      this.billingEnabled = billingEnabled;
      return this;
    }

    public String getProjectId() {
      return projectId;
    }

    public Builder setProjectId(String projectId) {
      this.projectId = projectId;
      return this;
    }


    public ProjectBillingInfo build() {
      return new ProjectBillingInfo(

        billingEnabled,
        projectId
      );
    }
  }

  @Override
  public String toString() {
    return "ProjectBillingInfo{"

    + "billingEnabled=" + billingEnabled + ", "
    + "projectId=" + projectId
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof ProjectBillingInfo) {
      ProjectBillingInfo that = (ProjectBillingInfo) o;
      return

      this.billingEnabled.equals(that.getBillingEnabled())&&
      this.projectId.equals(that.getProjectId())
      ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h = 1;
    h *= 1000003;
    h ^= this.billingEnabled.hashCode();
    h *= 1000003;
    h ^= this.projectId.hashCode();
    return h;
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/ProjectsGetBillingInfoHttpRequest.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import com.google.common.collect.ImmutableList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class ProjectsGetBillingInfoHttpRequest implements ApiMessage {
  private static final ProjectsGetBillingInfoHttpRequest DEFAULT_INSTANCE = new ProjectsGetBillingInfoHttpRequest();


  // Query parameters.
  private String access_token;
  private String callback;
  private String fields;
  private String key;
  private String prettyPrint;
  private String quotaUser;
  private String userIp;

  // Path parameters.
  private String name;

  private ProjectsGetBillingInfoHttpRequest(
      String access_token,
      String callback,
      String fields,
      String key,
      String prettyPrint,
      String quotaUser,
      String userIp,
      String name
      ) {
    this.access_token = access_token;
    this.callback = callback;
    this.fields = fields;
    this.key = key;
    this.prettyPrint = prettyPrint;
    this.quotaUser = quotaUser;
    this.userIp = userIp;
    this.name = name;
  }

  private ProjectsGetBillingInfoHttpRequest() {}

  public Map<String, List<String>> populateFieldsInMap(Set<String> fieldNames, Map<String, List<String>> map) {
    Map<String, List<String>> fieldMap = new HashMap<>();
    if (fieldNames.contains("access_token")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("callback")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("fields")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("key")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("prettyPrint")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("quotaUser")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("userIp")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("name")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    return fieldMap;
  }


  public String getAccessToken () {
    return access_token;
  }
  public String getCallback () {
    return callback;
  }
  public String getFields () {
    return fields;
  }
  public String getKey () {
    return key;
  }
  public String getPrettyPrint () {
    return prettyPrint;
  }
  public String getQuotaUser () {
    return quotaUser;
  }
  public String getUserIp () {
    return userIp;
  }
  public String getName () {
    return name;
  }

  public static Builder newBuilder() {
    return new ProjectsGetBillingInfoHttpRequest.Builder();
  }

  public static class Builder {
    private String access_token;
    private String callback;
    private String fields;
    private String key;
    private String prettyPrint;
    private String quotaUser;
    private String userIp;
    private String name;

    Builder() {}

    Builder(ProjectsGetBillingInfoHttpRequest source) {
      this.access_token = source.getAccessToken();
      this.callback = source.getCallback();
      this.fields = source.getFields();
      this.key = source.getKey();
      this.prettyPrint = source.getPrettyPrint();
      this.quotaUser = source.getQuotaUser();
      this.userIp = source.getUserIp();
      this.name = source.getName();
    }

    public String getAccessToken() {
      return access_token;
    }

    public Builder setAccessToken(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public String getCallback() {
      return callback;
    }

    public Builder setCallback(String callback) {
      this.callback = callback;
      return this;
    }

    public String getFields() {
      return fields;
    }

    public Builder setFields(String fields) {
      this.fields = fields;
      return this;
    }

    public String getKey() {
      return key;
    }

    public Builder setKey(String key) {
      this.key = key;
      return this;
    }

    public String getPrettyPrint() {
      return prettyPrint;
    }

    public Builder setPrettyPrint(String prettyPrint) {
      this.prettyPrint = prettyPrint;
      return this;
    }

    public String getQuotaUser() {
      return quotaUser;
    }

    public Builder setQuotaUser(String quotaUser) {
      this.quotaUser = quotaUser;
      return this;
    }

    public String getUserIp() {
      return userIp;
    }

    public Builder setUserIp(String userIp) {
      this.userIp = userIp;
      return this;
    }

    public String getName() {
      return name;
    }

    public Builder setName(String name) {
      if (name == null) {
        throw new IllegalArgumentException("\"name\" is a required parameter.");
      }
      this.name = name;
      return this;
    }


    public ProjectsGetBillingInfoHttpRequest build() {
      String missing = "";







      if (name == null) {
        missing += " name";
      }
      return new ProjectsGetBillingInfoHttpRequest(
          access_token,
          callback,
          fields,
          key,
          prettyPrint,
          quotaUser,
          userIp,
          name
      );
    }

    public Builder clone() {
      Builder newBuilder = new Builder();
      if (access_token != null) {
        newBuilder.setAccessToken(this.access_token);
      }
      if (callback != null) {
        newBuilder.setCallback(this.callback);
      }
      if (fields != null) {
        newBuilder.setFields(this.fields);
      }
      if (key != null) {
        newBuilder.setKey(this.key);
      }
      if (prettyPrint != null) {
        newBuilder.setPrettyPrint(this.prettyPrint);
      }
      if (quotaUser != null) {
        newBuilder.setQuotaUser(this.quotaUser);
      }
      if (userIp != null) {
        newBuilder.setUserIp(this.userIp);
      }
      if (name != null) {
        newBuilder.setName(this.name);
      }
      return newBuilder;
    }
  }

  @Override
  public String toString() {
    return "ProjectsGetBillingInfoHttpRequest{"
        + "access_token=" + access_token + ", "
        + "callback=" + callback + ", "
        + "fields=" + fields + ", "
        + "key=" + key + ", "
        + "prettyPrint=" + prettyPrint + ", "
        + "quotaUser=" + quotaUser + ", "
        + "userIp=" + userIp + ", "
        + "name=" + name
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof ProjectsGetBillingInfoHttpRequest) {
      ProjectsGetBillingInfoHttpRequest that = (ProjectsGetBillingInfoHttpRequest) o;
      return
          Objects.equals(this.access_token, that.getAccessToken())&&
          Objects.equals(this.callback, that.getCallback())&&
          Objects.equals(this.fields, that.getFields())&&
          Objects.equals(this.key, that.getKey())&&
          Objects.equals(this.prettyPrint, that.getPrettyPrint())&&
          Objects.equals(this.quotaUser, that.getQuotaUser())&&
          Objects.equals(this.userIp, that.getUserIp())&&
          Objects.equals(this.name, that.getName())
          ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      access_token,
      callback,
      fields,
      key,
      prettyPrint,
      quotaUser,
      userIp,
      name
    );
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/ProjectsListHttpRequest.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import com.google.common.collect.ImmutableList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class ProjectsListHttpRequest implements ApiMessage {
  private static final ProjectsListHttpRequest DEFAULT_INSTANCE = new ProjectsListHttpRequest();


  // Query parameters.
  private String access_token;
  private String callback;
  private String fields;
  private String key;
  private String prettyPrint;
  private String quotaUser;
  private String userIp;
  private Integer pageSize;
  private String pageToken;

  // Path parameters.
  private String name;

  private ProjectsListHttpRequest(
      String access_token,
      String callback,
      String fields,
      String key,
      String prettyPrint,
      String quotaUser,
      String userIp,
      Integer pageSize,
      String pageToken,
      String name
      ) {
    this.access_token = access_token;
    this.callback = callback;
    this.fields = fields;
    this.key = key;
    this.prettyPrint = prettyPrint;
    this.quotaUser = quotaUser;
    this.userIp = userIp;
    this.pageSize = pageSize;
    this.pageToken = pageToken;
    this.name = name;
  }

  private ProjectsListHttpRequest() {}

  public Map<String, List<String>> populateFieldsInMap(Set<String> fieldNames, Map<String, List<String>> map) {
    Map<String, List<String>> fieldMap = new HashMap<>();
    if (fieldNames.contains("access_token")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("callback")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("fields")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("key")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("prettyPrint")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("quotaUser")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("userIp")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("pageSize")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("pageToken")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("name")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    return fieldMap;
  }


  public String getAccessToken () {
    return access_token;
  }
  public String getCallback () {
    return callback;
  }
  public String getFields () {
    return fields;
  }
  public String getKey () {
    return key;
  }
  public String getPrettyPrint () {
    return prettyPrint;
  }
  public String getQuotaUser () {
    return quotaUser;
  }
  public String getUserIp () {
    return userIp;
  }
  public Integer getPageSize () {
    return pageSize;
  }
  public String getPageToken () {
    return pageToken;
  }
  public String getName () {
    return name;
  }

  public static Builder newBuilder() {
    return new ProjectsListHttpRequest.Builder();
  }

  public static class Builder {
    private String access_token;
    private String callback;
    private String fields;
    private String key;
    private String prettyPrint;
    private String quotaUser;
    private String userIp;
    private Integer pageSize;
    private String pageToken;
    private String name;

    Builder() {}

    Builder(ProjectsListHttpRequest source) {
      this.access_token = source.getAccessToken();
      this.callback = source.getCallback();
      this.fields = source.getFields();
      this.key = source.getKey();
      this.prettyPrint = source.getPrettyPrint();
      this.quotaUser = source.getQuotaUser();
      this.userIp = source.getUserIp();
      this.pageSize = source.getPageSize();
      this.pageToken = source.getPageToken();
      this.name = source.getName();
    }

    public String getAccessToken() {
      return access_token;
    }

    public Builder setAccessToken(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public String getCallback() {
      return callback;
    }

    public Builder setCallback(String callback) {
      this.callback = callback;
      return this;
    }

    public String getFields() {
      return fields;
    }

    public Builder setFields(String fields) {
      this.fields = fields;
      return this;
    }

    public String getKey() {
      return key;
    }

    public Builder setKey(String key) {
      this.key = key;
      return this;
    }

    public String getPrettyPrint() {
      return prettyPrint;
    }

    public Builder setPrettyPrint(String prettyPrint) {
      this.prettyPrint = prettyPrint;
      return this;
    }

    public String getQuotaUser() {
      return quotaUser;
    }

    public Builder setQuotaUser(String quotaUser) {
      this.quotaUser = quotaUser;
      return this;
    }

    public String getUserIp() {
      return userIp;
    }

    public Builder setUserIp(String userIp) {
      this.userIp = userIp;
      return this;
    }

    public Integer getPageSize() {
      return pageSize;
    }

    public Builder setPageSize(Integer pageSize) {
      this.pageSize = pageSize;
      return this;
    }

    public String getPageToken() {
      return pageToken;
    }

    public Builder setPageToken(String pageToken) {
      this.pageToken = pageToken;
      return this;
    }

    public String getName() {
      return name;
    }

    public Builder setName(String name) {
      if (name == null) {
        throw new IllegalArgumentException("\"name\" is a required parameter.");
      }
      this.name = name;
      return this;
    }


    public ProjectsListHttpRequest build() {
      String missing = "";









      if (name == null) {
        missing += " name";
      }
      return new ProjectsListHttpRequest(
          access_token,
          callback,
          fields,
          key,
          prettyPrint,
          quotaUser,
          userIp,
          pageSize,
          pageToken,
          name
      );
    }

    public Builder clone() {
      Builder newBuilder = new Builder();
      if (access_token != null) {
        newBuilder.setAccessToken(this.access_token);
      }
      if (callback != null) {
        newBuilder.setCallback(this.callback);
      }
      if (fields != null) {
        newBuilder.setFields(this.fields);
      }
      if (key != null) {
        newBuilder.setKey(this.key);
      }
      if (prettyPrint != null) {
        newBuilder.setPrettyPrint(this.prettyPrint);
      }
      if (quotaUser != null) {
        newBuilder.setQuotaUser(this.quotaUser);
      }
      if (userIp != null) {
        newBuilder.setUserIp(this.userIp);
      }
      if (pageSize != null) {
        newBuilder.setPageSize(this.pageSize);
      }
      if (pageToken != null) {
        newBuilder.setPageToken(this.pageToken);
      }
      if (name != null) {
        newBuilder.setName(this.name);
      }
      return newBuilder;
    }
  }

  @Override
  public String toString() {
    return "ProjectsListHttpRequest{"
        + "access_token=" + access_token + ", "
        + "callback=" + callback + ", "
        + "fields=" + fields + ", "
        + "key=" + key + ", "
        + "prettyPrint=" + prettyPrint + ", "
        + "quotaUser=" + quotaUser + ", "
        + "userIp=" + userIp + ", "
        + "pageSize=" + pageSize + ", "
        + "pageToken=" + pageToken + ", "
        + "name=" + name
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof ProjectsListHttpRequest) {
      ProjectsListHttpRequest that = (ProjectsListHttpRequest) o;
      return
          Objects.equals(this.access_token, that.getAccessToken())&&
          Objects.equals(this.callback, that.getCallback())&&
          Objects.equals(this.fields, that.getFields())&&
          Objects.equals(this.key, that.getKey())&&
          Objects.equals(this.prettyPrint, that.getPrettyPrint())&&
          Objects.equals(this.quotaUser, that.getQuotaUser())&&
          Objects.equals(this.userIp, that.getUserIp())&&
          Objects.equals(this.pageSize, that.getPageSize())&&
          Objects.equals(this.pageToken, that.getPageToken())&&
          Objects.equals(this.name, that.getName())
          ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      access_token,
      callback,
      fields,
      key,
      prettyPrint,
      quotaUser,
      userIp,
      pageSize,
      pageToken,
      name
    );
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/ProjectsUpdateBillingInfoHttpRequest.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import com.google.common.collect.ImmutableList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class ProjectsUpdateBillingInfoHttpRequest implements ApiMessage {
  private static final ProjectsUpdateBillingInfoHttpRequest DEFAULT_INSTANCE = new ProjectsUpdateBillingInfoHttpRequest();

  private ProjectBillingInfo request;

  // Query parameters.
  private String access_token;
  private String callback;
  private String fields;
  private String key;
  private String prettyPrint;
  private String quotaUser;
  private String userIp;

  // Path parameters.
  private String name;

  private ProjectsUpdateBillingInfoHttpRequest(
      String access_token,
      String callback,
      String fields,
      String key,
      String prettyPrint,
      String quotaUser,
      String userIp,
      String name
      ,
      ProjectBillingInfo request
      ) {
    this.access_token = access_token;
    this.callback = callback;
    this.fields = fields;
    this.key = key;
    this.prettyPrint = prettyPrint;
    this.quotaUser = quotaUser;
    this.userIp = userIp;
    this.name = name;
    this.request = request;
  }

  private ProjectsUpdateBillingInfoHttpRequest() {}

  public Map<String, List<String>> populateFieldsInMap(Set<String> fieldNames, Map<String, List<String>> map) {
    Map<String, List<String>> fieldMap = new HashMap<>();
    if (fieldNames.contains("access_token")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("callback")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("fields")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("key")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("prettyPrint")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("quotaUser")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("userIp")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    if (fieldNames.contains("name")) {
      if (fieldNames.contains("name")) {
        fieldMap.put("name", Collections.singletonList(name));
      }
    }
    return fieldMap;
  }

  public ProjectBillingInfo getRequest() {
     return request;
   }
  public String getAccessToken () {
    return access_token;
  }
  public String getCallback () {
    return callback;
  }
  public String getFields () {
    return fields;
  }
  public String getKey () {
    return key;
  }
  public String getPrettyPrint () {
    return prettyPrint;
  }
  public String getQuotaUser () {
    return quotaUser;
  }
  public String getUserIp () {
    return userIp;
  }
  public String getName () {
    return name;
  }

  public static Builder newBuilder() {
    return new ProjectsUpdateBillingInfoHttpRequest.Builder();
  }

  public static class Builder {
    private String access_token;
    private String callback;
    private String fields;
    private String key;
    private String prettyPrint;
    private String quotaUser;
    private String userIp;
    private String name;
    private ProjectBillingInfo request;

    Builder() {}

    Builder(ProjectsUpdateBillingInfoHttpRequest source) {
      this.access_token = source.getAccessToken();
      this.callback = source.getCallback();
      this.fields = source.getFields();
      this.key = source.getKey();
      this.prettyPrint = source.getPrettyPrint();
      this.quotaUser = source.getQuotaUser();
      this.userIp = source.getUserIp();
      this.name = source.getName();
    }

    public String getAccessToken() {
      return access_token;
    }

    public Builder setAccessToken(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public String getCallback() {
      return callback;
    }

    public Builder setCallback(String callback) {
      this.callback = callback;
      return this;
    }

    public String getFields() {
      return fields;
    }

    public Builder setFields(String fields) {
      this.fields = fields;
      return this;
    }

    public String getKey() {
      return key;
    }

    public Builder setKey(String key) {
      this.key = key;
      return this;
    }

    public String getPrettyPrint() {
      return prettyPrint;
    }

    public Builder setPrettyPrint(String prettyPrint) {
      this.prettyPrint = prettyPrint;
      return this;
    }

    public String getQuotaUser() {
      return quotaUser;
    }

    public Builder setQuotaUser(String quotaUser) {
      this.quotaUser = quotaUser;
      return this;
    }

    public String getUserIp() {
      return userIp;
    }

    public Builder setUserIp(String userIp) {
      this.userIp = userIp;
      return this;
    }

    public String getName() {
      return name;
    }

    public Builder setName(String name) {
      if (name == null) {
        throw new IllegalArgumentException("\"name\" is a required parameter.");
      }
      this.name = name;
      return this;
    }


    public ProjectsUpdateBillingInfoHttpRequest build() {
      String missing = "";







      if (name == null) {
        missing += " name";
      }
      return new ProjectsUpdateBillingInfoHttpRequest(
          access_token,
          callback,
          fields,
          key,
          prettyPrint,
          quotaUser,
          userIp,
          name
          , request
      );
    }

    public Builder clone() {
      Builder newBuilder = new Builder();
      if (access_token != null) {
        newBuilder.setAccessToken(this.access_token);
      }
      if (callback != null) {
        newBuilder.setCallback(this.callback);
      }
      if (fields != null) {
        newBuilder.setFields(this.fields);
      }
      if (key != null) {
        newBuilder.setKey(this.key);
      }
      if (prettyPrint != null) {
        newBuilder.setPrettyPrint(this.prettyPrint);
      }
      if (quotaUser != null) {
        newBuilder.setQuotaUser(this.quotaUser);
      }
      if (userIp != null) {
        newBuilder.setUserIp(this.userIp);
      }
      if (name != null) {
        newBuilder.setName(this.name);
      }
      return newBuilder;
    }
  }

  @Override
  public String toString() {
    return "ProjectsUpdateBillingInfoHttpRequest{"
        + "access_token=" + access_token + ", "
        + "callback=" + callback + ", "
        + "fields=" + fields + ", "
        + "key=" + key + ", "
        + "prettyPrint=" + prettyPrint + ", "
        + "quotaUser=" + quotaUser + ", "
        + "userIp=" + userIp + ", "
        + "name=" + name
        + ", request=" + request
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof ProjectsUpdateBillingInfoHttpRequest) {
      ProjectsUpdateBillingInfoHttpRequest that = (ProjectsUpdateBillingInfoHttpRequest) o;
      return
          Objects.equals(this.access_token, that.getAccessToken())&&
          Objects.equals(this.callback, that.getCallback())&&
          Objects.equals(this.fields, that.getFields())&&
          Objects.equals(this.key, that.getKey())&&
          Objects.equals(this.prettyPrint, that.getPrettyPrint())&&
          Objects.equals(this.quotaUser, that.getQuotaUser())&&
          Objects.equals(this.userIp, that.getUserIp())&&
          Objects.equals(this.name, that.getName())
          ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      access_token,
      callback,
      fields,
      key,
      prettyPrint,
      quotaUser,
      userIp,
      name
    );
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/Warnings.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import java.io.Serializable;
import java.util.List;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class Warnings implements Serializable {
  private final String code;
  private final List<Data> data;
  private final String message;
  private final ProjectBillingInfo projectBillingInfo;

  private Warnings(

    String code,
    List<Data> data,
    String message,
    ProjectBillingInfo projectBillingInfo
    ) {
    this.code = code;
    this.data = data;
    this.message = message;
    this.projectBillingInfo = projectBillingInfo;
  }

  public String getCode() {
    return code;
  }

  public List<Data> getData() {
    return data;
  }

  public String getMessage() {
    return message;
  }

  public ProjectBillingInfo getProjectBillingInfo() {
    return projectBillingInfo;
  }


  public static Builder newBuilder() {
    return new Warnings.Builder();
  }

  public static class Builder {
    private String code;
    private List<Data> data;
    private String message;
    private ProjectBillingInfo projectBillingInfo;

    Builder() {}

    Builder(Warnings source) {
      this.code = source.code;
      this.data = source.data;
      this.message = source.message;
      this.projectBillingInfo = source.projectBillingInfo;
    }

    public String getCode() {
      return code;
    }

    public Builder setCode(String code) {
      this.code = code;
      return this;
    }

    public List<Data> getData() {
      return data;
    }

    public Builder setData(List<Data> data) {
      this.data = data;
      return this;
    }

    public String getMessage() {
      return message;
    }

    public Builder setMessage(String message) {
      this.message = message;
      return this;
    }

    public ProjectBillingInfo getProjectBillingInfo() {
      return projectBillingInfo;
    }

    public Builder setProjectBillingInfo(ProjectBillingInfo projectBillingInfo) {
      this.projectBillingInfo = projectBillingInfo;
      return this;
    }


    public Warnings build() {
      return new Warnings(

        code,
        data,
        message,
        projectBillingInfo
      );
    }
  }

  @Override
  public String toString() {
    return "Warnings{"

    + "code=" + code + ", "
    + "data=" + data + ", "
    + "message=" + message + ", "
    + "projectBillingInfo=" + projectBillingInfo
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof Warnings) {
      Warnings that = (Warnings) o;
      return

      this.code.equals(that.getCode())&&
      this.data.equals(that.getData())&&
      this.message.equals(that.getMessage())&&
      this.projectBillingInfo.equals(that.getProjectBillingInfo())
      ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h = 1;
    h *= 1000003;
    h ^= this.code.hashCode();
    h *= 1000003;
    h ^= this.data.hashCode();
    h *= 1000003;
    h ^= this.message.hashCode();
    h *= 1000003;
    h ^= this.projectBillingInfo.hashCode();
    return h;
  }
}

