============== file: src/main/java/com/google/cloud/fakebilling/v1/AttachedDisk.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.httpjson.ApiMessage;
import com.google.common.collect.ImmutableList;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class AttachedDisk implements ApiMessage {
  private final Integer index;
  private final Interface interface2;
  private final List<String> licenses;
  private final String mode;
  private final String type;

  private AttachedDisk() {
    this.index = null;
    this.interface2 = null;
    this.licenses = null;
    this.mode = null;
    this.type = null;
  }


  private AttachedDisk(
      Integer index,
      Interface interface2,
      List<String> licenses,
      String mode,
      String type
      ) {
    this.index = index;
    this.interface2 = interface2;
    this.licenses = licenses;
    this.mode = mode;
    this.type = type;
  }

  @Override
  public Map<String, List<String>> populateFieldsInMap(Set<String> fieldNames) {
    Map<String, List<String>> fieldMap = new HashMap<>();
    if (fieldNames.contains("index")) {
      fieldMap.put("index", Collections.singletonList(String.valueOf(index)));
    }
    if (fieldNames.contains("interface2")) {
      fieldMap.put("interface2", Collections.singletonList(String.valueOf(interface2)));
    }
    if (fieldNames.contains("licenses")) {
      fieldMap.put("licenses", Collections.singletonList(String.valueOf(licenses)));
    }
    if (fieldNames.contains("mode")) {
      fieldMap.put("mode", Collections.singletonList(String.valueOf(mode)));
    }
    if (fieldNames.contains("type")) {
      fieldMap.put("type", Collections.singletonList(String.valueOf(type)));
    }
    return fieldMap;
  }

  public Integer getIndex() {
    return index;
  }

  public Interface getInterface() {
    return interface2;
  }

  public List<String> getLicenses() {
    return licenses;
  }

  public String getMode() {
    return mode;
  }

  public String getType() {
    return type;
  }


  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(AttachedDisk prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  public static AttachedDisk getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }
  private static final AttachedDisk DEFAULT_INSTANCE;
  static {
  DEFAULT_INSTANCE = new AttachedDisk();
  }

  public static class Builder {
    private Integer index;
    private Interface interface2;
    private List<String> licenses;
    private String mode;
    private String type;

    Builder() {}

    public Builder mergeFrom(AttachedDisk other) {
      if (other == AttachedDisk.getDefaultInstance()) return this;
      if (other.getIndex() != null) {
        this.index = other.index;
      }
      if (other.getInterface() != null) {
        this.interface2 = other.interface2;
      }
      if (other.getLicenses() != null) {
        this.licenses = other.licenses;
      }
      if (other.getMode() != null) {
        this.mode = other.mode;
      }
      if (other.getType() != null) {
        this.type = other.type;
      }
      return this;
    }

    Builder(AttachedDisk source) {
      this.index = source.index;
      this.interface2 = source.interface2;
      this.licenses = source.licenses;
      this.mode = source.mode;
      this.type = source.type;
    }

    public Integer getIndex() {
      return index;
    }

    public Builder setIndex(Integer index) {
      this.index = index;
      return this;
    }

    public Interface getInterface() {
      return interface2;
    }

    public Builder setInterface(Interface interface2) {
      this.interface2 = interface2;
      return this;
    }

    public List<String> getLicenses() {
      return licenses;
    }

    public Builder setLicenses(List<String> licenses) {
      this.licenses = licenses;
      return this;
    }

    public String getMode() {
      return mode;
    }

    public Builder setMode(String mode) {
      this.mode = mode;
      return this;
    }

    public String getType() {
      return type;
    }

    public Builder setType(String type) {
      this.type = type;
      return this;
    }


    public AttachedDisk build() {




      return new AttachedDisk(
        index,
        interface2,
        licenses,
        mode,
        type
      );
    }

    public Builder clone() {
      Builder newBuilder = new Builder();
      newBuilder.setIndex(this.index);
      newBuilder.setInterface(this.interface2);
      newBuilder.setLicenses(this.licenses);
      newBuilder.setMode(this.mode);
      newBuilder.setType(this.type);
      return newBuilder;
    }
  }

  @Override
  public String toString() {
    return "AttachedDisk{"
        + "index=" + index + ", "
        + "interface2=" + interface2 + ", "
        + "licenses=" + licenses + ", "
        + "mode=" + mode + ", "
        + "type=" + type
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof AttachedDisk) {
      AttachedDisk that = (AttachedDisk) o;
      return
          Objects.equals(this.index, that.getIndex()) &&
          Objects.equals(this.interface2, that.getInterface()) &&
          Objects.equals(this.licenses, that.getLicenses()) &&
          Objects.equals(this.mode, that.getMode()) &&
          Objects.equals(this.type, that.getType())
          ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      index,
      interface2,
      licenses,
      mode,
      type
    );
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/BillingAccount.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.httpjson.ApiMessage;
import com.google.common.collect.ImmutableList;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class BillingAccount implements ApiMessage {
  private final String name;
  private final Boolean open;

  private BillingAccount() {
    this.name = null;
    this.open = null;
  }


  private BillingAccount(
      String name,
      Boolean open
      ) {
    this.name = name;
    this.open = open;
  }

  @Override
  public Map<String, List<String>> populateFieldsInMap(Set<String> fieldNames) {
    Map<String, List<String>> fieldMap = new HashMap<>();
    if (fieldNames.contains("name")) {
      fieldMap.put("name", Collections.singletonList(String.valueOf(name)));
    }
    if (fieldNames.contains("open")) {
      fieldMap.put("open", Collections.singletonList(String.valueOf(open)));
    }
    return fieldMap;
  }

  public String getName() {
    return name;
  }

  public Boolean getOpen() {
    return open;
  }


  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(BillingAccount prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  public static BillingAccount getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }
  private static final BillingAccount DEFAULT_INSTANCE;
  static {
  DEFAULT_INSTANCE = new BillingAccount();
  }

  public static class Builder {
    private String name;
    private Boolean open;

    Builder() {}

    public Builder mergeFrom(BillingAccount other) {
      if (other == BillingAccount.getDefaultInstance()) return this;
      if (other.getName() != null) {
        this.name = other.name;
      }
      if (other.getOpen() != null) {
        this.open = other.open;
      }
      return this;
    }

    Builder(BillingAccount source) {
      this.name = source.name;
      this.open = source.open;
    }

    public String getName() {
      return name;
    }

    public Builder setName(String name) {
      this.name = name;
      return this;
    }

    public Boolean getOpen() {
      return open;
    }

    public Builder setOpen(Boolean open) {
      this.open = open;
      return this;
    }


    public BillingAccount build() {

      return new BillingAccount(
        name,
        open
      );
    }

    public Builder clone() {
      Builder newBuilder = new Builder();
      newBuilder.setName(this.name);
      newBuilder.setOpen(this.open);
      return newBuilder;
    }
  }

  @Override
  public String toString() {
    return "BillingAccount{"
        + "name=" + name + ", "
        + "open=" + open
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof BillingAccount) {
      BillingAccount that = (BillingAccount) o;
      return
          Objects.equals(this.name, that.getName()) &&
          Objects.equals(this.open, that.getOpen())
          ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      name,
      open
    );
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/Data.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.httpjson.ApiMessage;
import com.google.common.collect.ImmutableList;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class Data implements ApiMessage {
  private final String key;
  private final String value;

  private Data() {
    this.key = null;
    this.value = null;
  }


  private Data(
      String key,
      String value
      ) {
    this.key = key;
    this.value = value;
  }

  @Override
  public Map<String, List<String>> populateFieldsInMap(Set<String> fieldNames) {
    Map<String, List<String>> fieldMap = new HashMap<>();
    if (fieldNames.contains("key")) {
      fieldMap.put("key", Collections.singletonList(String.valueOf(key)));
    }
    if (fieldNames.contains("value")) {
      fieldMap.put("value", Collections.singletonList(String.valueOf(value)));
    }
    return fieldMap;
  }

  public String getKey() {
    return key;
  }

  public String getValue() {
    return value;
  }


  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(Data prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  public static Data getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }
  private static final Data DEFAULT_INSTANCE;
  static {
  DEFAULT_INSTANCE = new Data();
  }

  public static class Builder {
    private String key;
    private String value;

    Builder() {}

    public Builder mergeFrom(Data other) {
      if (other == Data.getDefaultInstance()) return this;
      if (other.getKey() != null) {
        this.key = other.key;
      }
      if (other.getValue() != null) {
        this.value = other.value;
      }
      return this;
    }

    Builder(Data source) {
      this.key = source.key;
      this.value = source.value;
    }

    public String getKey() {
      return key;
    }

    public Builder setKey(String key) {
      this.key = key;
      return this;
    }

    public String getValue() {
      return value;
    }

    public Builder setValue(String value) {
      this.value = value;
      return this;
    }


    public Data build() {

      return new Data(
        key,
        value
      );
    }

    public Builder clone() {
      Builder newBuilder = new Builder();
      newBuilder.setKey(this.key);
      newBuilder.setValue(this.value);
      return newBuilder;
    }
  }

  @Override
  public String toString() {
    return "Data{"
        + "key=" + key + ", "
        + "value=" + value
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof Data) {
      Data that = (Data) o;
      return
          Objects.equals(this.key, that.getKey()) &&
          Objects.equals(this.value, that.getValue())
          ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      key,
      value
    );
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/Error.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.httpjson.ApiMessage;
import com.google.common.collect.ImmutableList;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class Error implements ApiMessage {
  private final List<Errors> errors;

  private Error() {
    this.errors = null;
  }


  private Error(
      List<Errors> errors
      ) {
    this.errors = errors;
  }

  @Override
  public Map<String, List<String>> populateFieldsInMap(Set<String> fieldNames) {
    Map<String, List<String>> fieldMap = new HashMap<>();
    if (fieldNames.contains("errors")) {
      fieldMap.put("errors", Collections.singletonList(String.valueOf(errors)));
    }
    return fieldMap;
  }

  public List<Errors> getErrors() {
    return errors;
  }


  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(Error prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  public static Error getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }
  private static final Error DEFAULT_INSTANCE;
  static {
  DEFAULT_INSTANCE = new Error();
  }

  public static class Builder {
    private List<Errors> errors;

    Builder() {}

    public Builder mergeFrom(Error other) {
      if (other == Error.getDefaultInstance()) return this;
      if (other.getErrors() != null) {
        this.errors = other.errors;
      }
      return this;
    }

    Builder(Error source) {
      this.errors = source.errors;
    }

    public List<Errors> getErrors() {
      return errors;
    }

    public Builder setErrors(List<Errors> errors) {
      this.errors = errors;
      return this;
    }


    public Error build() {
      return new Error(
        errors
      );
    }

    public Builder clone() {
      Builder newBuilder = new Builder();
      newBuilder.setErrors(this.errors);
      return newBuilder;
    }
  }

  @Override
  public String toString() {
    return "Error{"
        + "errors=" + errors
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof Error) {
      Error that = (Error) o;
      return
          Objects.equals(this.errors, that.getErrors())
          ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      errors
    );
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/Errors.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.httpjson.ApiMessage;
import com.google.common.collect.ImmutableList;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class Errors implements ApiMessage {
  private final String code;
  private final String location;
  private final String message;

  private Errors() {
    this.code = null;
    this.location = null;
    this.message = null;
  }


  private Errors(
      String code,
      String location,
      String message
      ) {
    this.code = code;
    this.location = location;
    this.message = message;
  }

  @Override
  public Map<String, List<String>> populateFieldsInMap(Set<String> fieldNames) {
    Map<String, List<String>> fieldMap = new HashMap<>();
    if (fieldNames.contains("code")) {
      fieldMap.put("code", Collections.singletonList(String.valueOf(code)));
    }
    if (fieldNames.contains("location")) {
      fieldMap.put("location", Collections.singletonList(String.valueOf(location)));
    }
    if (fieldNames.contains("message")) {
      fieldMap.put("message", Collections.singletonList(String.valueOf(message)));
    }
    return fieldMap;
  }

  public String getCode() {
    return code;
  }

  public String getLocation() {
    return location;
  }

  public String getMessage() {
    return message;
  }


  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(Errors prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  public static Errors getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }
  private static final Errors DEFAULT_INSTANCE;
  static {
  DEFAULT_INSTANCE = new Errors();
  }

  public static class Builder {
    private String code;
    private String location;
    private String message;

    Builder() {}

    public Builder mergeFrom(Errors other) {
      if (other == Errors.getDefaultInstance()) return this;
      if (other.getCode() != null) {
        this.code = other.code;
      }
      if (other.getLocation() != null) {
        this.location = other.location;
      }
      if (other.getMessage() != null) {
        this.message = other.message;
      }
      return this;
    }

    Builder(Errors source) {
      this.code = source.code;
      this.location = source.location;
      this.message = source.message;
    }

    public String getCode() {
      return code;
    }

    public Builder setCode(String code) {
      this.code = code;
      return this;
    }

    public String getLocation() {
      return location;
    }

    public Builder setLocation(String location) {
      this.location = location;
      return this;
    }

    public String getMessage() {
      return message;
    }

    public Builder setMessage(String message) {
      this.message = message;
      return this;
    }


    public Errors build() {


      return new Errors(
        code,
        location,
        message
      );
    }

    public Builder clone() {
      Builder newBuilder = new Builder();
      newBuilder.setCode(this.code);
      newBuilder.setLocation(this.location);
      newBuilder.setMessage(this.message);
      return newBuilder;
    }
  }

  @Override
  public String toString() {
    return "Errors{"
        + "code=" + code + ", "
        + "location=" + location + ", "
        + "message=" + message
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof Errors) {
      Errors that = (Errors) o;
      return
          Objects.equals(this.code, that.getCode()) &&
          Objects.equals(this.location, that.getLocation()) &&
          Objects.equals(this.message, that.getMessage())
          ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      code,
      location,
      message
    );
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/Interface.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.httpjson.ApiMessage;
import com.google.common.collect.ImmutableList;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class Interface implements ApiMessage {
  private final String face;
  private final Boolean inter;
  private final String interface2;

  private Interface() {
    this.face = null;
    this.inter = null;
    this.interface2 = null;
  }


  private Interface(
      String face,
      Boolean inter,
      String interface2
      ) {
    this.face = face;
    this.inter = inter;
    this.interface2 = interface2;
  }

  @Override
  public Map<String, List<String>> populateFieldsInMap(Set<String> fieldNames) {
    Map<String, List<String>> fieldMap = new HashMap<>();
    if (fieldNames.contains("face")) {
      fieldMap.put("face", Collections.singletonList(String.valueOf(face)));
    }
    if (fieldNames.contains("inter")) {
      fieldMap.put("inter", Collections.singletonList(String.valueOf(inter)));
    }
    if (fieldNames.contains("interface2")) {
      fieldMap.put("interface2", Collections.singletonList(String.valueOf(interface2)));
    }
    return fieldMap;
  }

  public String getFace() {
    return face;
  }

  public Boolean getInter() {
    return inter;
  }

  public String getInterface() {
    return interface2;
  }


  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(Interface prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  public static Interface getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }
  private static final Interface DEFAULT_INSTANCE;
  static {
  DEFAULT_INSTANCE = new Interface();
  }

  public static class Builder {
    private String face;
    private Boolean inter;
    private String interface2;

    Builder() {}

    public Builder mergeFrom(Interface other) {
      if (other == Interface.getDefaultInstance()) return this;
      if (other.getFace() != null) {
        this.face = other.face;
      }
      if (other.getInter() != null) {
        this.inter = other.inter;
      }
      if (other.getInterface() != null) {
        this.interface2 = other.interface2;
      }
      return this;
    }

    Builder(Interface source) {
      this.face = source.face;
      this.inter = source.inter;
      this.interface2 = source.interface2;
    }

    public String getFace() {
      return face;
    }

    public Builder setFace(String face) {
      this.face = face;
      return this;
    }

    public Boolean getInter() {
      return inter;
    }

    public Builder setInter(Boolean inter) {
      this.inter = inter;
      return this;
    }

    public String getInterface() {
      return interface2;
    }

    public Builder setInterface(String interface2) {
      this.interface2 = interface2;
      return this;
    }


    public Interface build() {


      return new Interface(
        face,
        inter,
        interface2
      );
    }

    public Builder clone() {
      Builder newBuilder = new Builder();
      newBuilder.setFace(this.face);
      newBuilder.setInter(this.inter);
      newBuilder.setInterface(this.interface2);
      return newBuilder;
    }
  }

  @Override
  public String toString() {
    return "Interface{"
        + "face=" + face + ", "
        + "inter=" + inter + ", "
        + "interface2=" + interface2
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof Interface) {
      Interface that = (Interface) o;
      return
          Objects.equals(this.face, that.getFace()) &&
          Objects.equals(this.inter, that.getInter()) &&
          Objects.equals(this.interface2, that.getInterface())
          ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      face,
      inter,
      interface2
    );
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/ListBillingAccountsResponse.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.httpjson.ApiMessage;
import com.google.common.collect.ImmutableList;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class ListBillingAccountsResponse implements ApiMessage {
  private final List<BillingAccount> billingAccounts;
  private final String nextPageToken;

  private ListBillingAccountsResponse() {
    this.billingAccounts = null;
    this.nextPageToken = null;
  }


  private ListBillingAccountsResponse(
      List<BillingAccount> billingAccounts,
      String nextPageToken
      ) {
    this.billingAccounts = billingAccounts;
    this.nextPageToken = nextPageToken;
  }

  @Override
  public Map<String, List<String>> populateFieldsInMap(Set<String> fieldNames) {
    Map<String, List<String>> fieldMap = new HashMap<>();
    if (fieldNames.contains("billingAccounts")) {
      fieldMap.put("billingAccounts", Collections.singletonList(String.valueOf(billingAccounts)));
    }
    if (fieldNames.contains("nextPageToken")) {
      fieldMap.put("nextPageToken", Collections.singletonList(String.valueOf(nextPageToken)));
    }
    return fieldMap;
  }

  public List<BillingAccount> getBillingAccounts() {
    return billingAccounts;
  }

  public String getNextPageToken() {
    return nextPageToken;
  }


  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(ListBillingAccountsResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  public static ListBillingAccountsResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }
  private static final ListBillingAccountsResponse DEFAULT_INSTANCE;
  static {
  DEFAULT_INSTANCE = new ListBillingAccountsResponse();
  }

  public static class Builder {
    private List<BillingAccount> billingAccounts;
    private String nextPageToken;

    Builder() {}

    public Builder mergeFrom(ListBillingAccountsResponse other) {
      if (other == ListBillingAccountsResponse.getDefaultInstance()) return this;
      if (other.getBillingAccounts() != null) {
        this.billingAccounts = other.billingAccounts;
      }
      if (other.getNextPageToken() != null) {
        this.nextPageToken = other.nextPageToken;
      }
      return this;
    }

    Builder(ListBillingAccountsResponse source) {
      this.billingAccounts = source.billingAccounts;
      this.nextPageToken = source.nextPageToken;
    }

    public List<BillingAccount> getBillingAccounts() {
      return billingAccounts;
    }

    public Builder setBillingAccounts(List<BillingAccount> billingAccounts) {
      this.billingAccounts = billingAccounts;
      return this;
    }

    public String getNextPageToken() {
      return nextPageToken;
    }

    public Builder setNextPageToken(String nextPageToken) {
      this.nextPageToken = nextPageToken;
      return this;
    }


    public ListBillingAccountsResponse build() {

      return new ListBillingAccountsResponse(
        billingAccounts,
        nextPageToken
      );
    }

    public Builder clone() {
      Builder newBuilder = new Builder();
      newBuilder.setBillingAccounts(this.billingAccounts);
      newBuilder.setNextPageToken(this.nextPageToken);
      return newBuilder;
    }
  }

  @Override
  public String toString() {
    return "ListBillingAccountsResponse{"
        + "billingAccounts=" + billingAccounts + ", "
        + "nextPageToken=" + nextPageToken
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof ListBillingAccountsResponse) {
      ListBillingAccountsResponse that = (ListBillingAccountsResponse) o;
      return
          Objects.equals(this.billingAccounts, that.getBillingAccounts()) &&
          Objects.equals(this.nextPageToken, that.getNextPageToken())
          ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      billingAccounts,
      nextPageToken
    );
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/ListProjectBillingInfoResponse.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.httpjson.ApiMessage;
import com.google.common.collect.ImmutableList;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class ListProjectBillingInfoResponse implements ApiMessage {
  private final String nextPageToken;
  private final List<ProjectBillingInfo> projectBillingInfo;

  private ListProjectBillingInfoResponse() {
    this.nextPageToken = null;
    this.projectBillingInfo = null;
  }


  private ListProjectBillingInfoResponse(
      String nextPageToken,
      List<ProjectBillingInfo> projectBillingInfo
      ) {
    this.nextPageToken = nextPageToken;
    this.projectBillingInfo = projectBillingInfo;
  }

  @Override
  public Map<String, List<String>> populateFieldsInMap(Set<String> fieldNames) {
    Map<String, List<String>> fieldMap = new HashMap<>();
    if (fieldNames.contains("nextPageToken")) {
      fieldMap.put("nextPageToken", Collections.singletonList(String.valueOf(nextPageToken)));
    }
    if (fieldNames.contains("projectBillingInfo")) {
      fieldMap.put("projectBillingInfo", Collections.singletonList(String.valueOf(projectBillingInfo)));
    }
    return fieldMap;
  }

  public String getNextPageToken() {
    return nextPageToken;
  }

  public List<ProjectBillingInfo> getProjectBillingInfo() {
    return projectBillingInfo;
  }


  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(ListProjectBillingInfoResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  public static ListProjectBillingInfoResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }
  private static final ListProjectBillingInfoResponse DEFAULT_INSTANCE;
  static {
  DEFAULT_INSTANCE = new ListProjectBillingInfoResponse();
  }

  public static class Builder {
    private String nextPageToken;
    private List<ProjectBillingInfo> projectBillingInfo;

    Builder() {}

    public Builder mergeFrom(ListProjectBillingInfoResponse other) {
      if (other == ListProjectBillingInfoResponse.getDefaultInstance()) return this;
      if (other.getNextPageToken() != null) {
        this.nextPageToken = other.nextPageToken;
      }
      if (other.getProjectBillingInfo() != null) {
        this.projectBillingInfo = other.projectBillingInfo;
      }
      return this;
    }

    Builder(ListProjectBillingInfoResponse source) {
      this.nextPageToken = source.nextPageToken;
      this.projectBillingInfo = source.projectBillingInfo;
    }

    public String getNextPageToken() {
      return nextPageToken;
    }

    public Builder setNextPageToken(String nextPageToken) {
      this.nextPageToken = nextPageToken;
      return this;
    }

    public List<ProjectBillingInfo> getProjectBillingInfo() {
      return projectBillingInfo;
    }

    public Builder setProjectBillingInfo(List<ProjectBillingInfo> projectBillingInfo) {
      this.projectBillingInfo = projectBillingInfo;
      return this;
    }


    public ListProjectBillingInfoResponse build() {

      return new ListProjectBillingInfoResponse(
        nextPageToken,
        projectBillingInfo
      );
    }

    public Builder clone() {
      Builder newBuilder = new Builder();
      newBuilder.setNextPageToken(this.nextPageToken);
      newBuilder.setProjectBillingInfo(this.projectBillingInfo);
      return newBuilder;
    }
  }

  @Override
  public String toString() {
    return "ListProjectBillingInfoResponse{"
        + "nextPageToken=" + nextPageToken + ", "
        + "projectBillingInfo=" + projectBillingInfo
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof ListProjectBillingInfoResponse) {
      ListProjectBillingInfoResponse that = (ListProjectBillingInfoResponse) o;
      return
          Objects.equals(this.nextPageToken, that.getNextPageToken()) &&
          Objects.equals(this.projectBillingInfo, that.getProjectBillingInfo())
          ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      nextPageToken,
      projectBillingInfo
    );
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/Operation.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.httpjson.ApiMessage;
import com.google.common.collect.ImmutableList;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class Operation implements ApiMessage {
  private final String creationTimestamp;
  private final String description;
  private final Error error;
  private final Integer httpErrorStatusCode;
  private final String id;
  private final String name;
  private final String status;
  private final List<Warnings> warnings;

  private Operation() {
    this.creationTimestamp = null;
    this.description = null;
    this.error = null;
    this.httpErrorStatusCode = null;
    this.id = null;
    this.name = null;
    this.status = null;
    this.warnings = null;
  }


  private Operation(
      String creationTimestamp,
      String description,
      Error error,
      Integer httpErrorStatusCode,
      String id,
      String name,
      String status,
      List<Warnings> warnings
      ) {
    this.creationTimestamp = creationTimestamp;
    this.description = description;
    this.error = error;
    this.httpErrorStatusCode = httpErrorStatusCode;
    this.id = id;
    this.name = name;
    this.status = status;
    this.warnings = warnings;
  }

  @Override
  public Map<String, List<String>> populateFieldsInMap(Set<String> fieldNames) {
    Map<String, List<String>> fieldMap = new HashMap<>();
    if (fieldNames.contains("creationTimestamp")) {
      fieldMap.put("creationTimestamp", Collections.singletonList(String.valueOf(creationTimestamp)));
    }
    if (fieldNames.contains("description")) {
      fieldMap.put("description", Collections.singletonList(String.valueOf(description)));
    }
    if (fieldNames.contains("error")) {
      fieldMap.put("error", Collections.singletonList(String.valueOf(error)));
    }
    if (fieldNames.contains("httpErrorStatusCode")) {
      fieldMap.put("httpErrorStatusCode", Collections.singletonList(String.valueOf(httpErrorStatusCode)));
    }
    if (fieldNames.contains("id")) {
      fieldMap.put("id", Collections.singletonList(String.valueOf(id)));
    }
    if (fieldNames.contains("name")) {
      fieldMap.put("name", Collections.singletonList(String.valueOf(name)));
    }
    if (fieldNames.contains("status")) {
      fieldMap.put("status", Collections.singletonList(String.valueOf(status)));
    }
    if (fieldNames.contains("warnings")) {
      fieldMap.put("warnings", Collections.singletonList(String.valueOf(warnings)));
    }
    return fieldMap;
  }

  public String getCreationTimestamp() {
    return creationTimestamp;
  }

  public String getDescription() {
    return description;
  }

  public Error getError() {
    return error;
  }

  public Integer getHttpErrorStatusCode() {
    return httpErrorStatusCode;
  }

  public String getId() {
    return id;
  }

  public String getName() {
    return name;
  }

  public String getStatus() {
    return status;
  }

  public List<Warnings> getWarnings() {
    return warnings;
  }


  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(Operation prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  public static Operation getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }
  private static final Operation DEFAULT_INSTANCE;
  static {
  DEFAULT_INSTANCE = new Operation();
  }

  public static class Builder {
    private String creationTimestamp;
    private String description;
    private Error error;
    private Integer httpErrorStatusCode;
    private String id;
    private String name;
    private String status;
    private List<Warnings> warnings;

    Builder() {}

    public Builder mergeFrom(Operation other) {
      if (other == Operation.getDefaultInstance()) return this;
      if (other.getCreationTimestamp() != null) {
        this.creationTimestamp = other.creationTimestamp;
      }
      if (other.getDescription() != null) {
        this.description = other.description;
      }
      if (other.getError() != null) {
        this.error = other.error;
      }
      if (other.getHttpErrorStatusCode() != null) {
        this.httpErrorStatusCode = other.httpErrorStatusCode;
      }
      if (other.getId() != null) {
        this.id = other.id;
      }
      if (other.getName() != null) {
        this.name = other.name;
      }
      if (other.getStatus() != null) {
        this.status = other.status;
      }
      if (other.getWarnings() != null) {
        this.warnings = other.warnings;
      }
      return this;
    }

    Builder(Operation source) {
      this.creationTimestamp = source.creationTimestamp;
      this.description = source.description;
      this.error = source.error;
      this.httpErrorStatusCode = source.httpErrorStatusCode;
      this.id = source.id;
      this.name = source.name;
      this.status = source.status;
      this.warnings = source.warnings;
    }

    public String getCreationTimestamp() {
      return creationTimestamp;
    }

    public Builder setCreationTimestamp(String creationTimestamp) {
      this.creationTimestamp = creationTimestamp;
      return this;
    }

    public String getDescription() {
      return description;
    }

    public Builder setDescription(String description) {
      this.description = description;
      return this;
    }

    public Error getError() {
      return error;
    }

    public Builder setError(Error error) {
      this.error = error;
      return this;
    }

    public Integer getHttpErrorStatusCode() {
      return httpErrorStatusCode;
    }

    public Builder setHttpErrorStatusCode(Integer httpErrorStatusCode) {
      this.httpErrorStatusCode = httpErrorStatusCode;
      return this;
    }

    public String getId() {
      return id;
    }

    public Builder setId(String id) {
      this.id = id;
      return this;
    }

    public String getName() {
      return name;
    }

    public Builder setName(String name) {
      this.name = name;
      return this;
    }

    public String getStatus() {
      return status;
    }

    public Builder setStatus(String status) {
      this.status = status;
      return this;
    }

    public List<Warnings> getWarnings() {
      return warnings;
    }

    public Builder setWarnings(List<Warnings> warnings) {
      this.warnings = warnings;
      return this;
    }


    public Operation build() {







      return new Operation(
        creationTimestamp,
        description,
        error,
        httpErrorStatusCode,
        id,
        name,
        status,
        warnings
      );
    }

    public Builder clone() {
      Builder newBuilder = new Builder();
      newBuilder.setCreationTimestamp(this.creationTimestamp);
      newBuilder.setDescription(this.description);
      newBuilder.setError(this.error);
      newBuilder.setHttpErrorStatusCode(this.httpErrorStatusCode);
      newBuilder.setId(this.id);
      newBuilder.setName(this.name);
      newBuilder.setStatus(this.status);
      newBuilder.setWarnings(this.warnings);
      return newBuilder;
    }
  }

  @Override
  public String toString() {
    return "Operation{"
        + "creationTimestamp=" + creationTimestamp + ", "
        + "description=" + description + ", "
        + "error=" + error + ", "
        + "httpErrorStatusCode=" + httpErrorStatusCode + ", "
        + "id=" + id + ", "
        + "name=" + name + ", "
        + "status=" + status + ", "
        + "warnings=" + warnings
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof Operation) {
      Operation that = (Operation) o;
      return
          Objects.equals(this.creationTimestamp, that.getCreationTimestamp()) &&
          Objects.equals(this.description, that.getDescription()) &&
          Objects.equals(this.error, that.getError()) &&
          Objects.equals(this.httpErrorStatusCode, that.getHttpErrorStatusCode()) &&
          Objects.equals(this.id, that.getId()) &&
          Objects.equals(this.name, that.getName()) &&
          Objects.equals(this.status, that.getStatus()) &&
          Objects.equals(this.warnings, that.getWarnings())
          ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      creationTimestamp,
      description,
      error,
      httpErrorStatusCode,
      id,
      name,
      status,
      warnings
    );
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/ProjectBillingInfo.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.httpjson.ApiMessage;
import com.google.common.collect.ImmutableList;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class ProjectBillingInfo implements ApiMessage {
  private final Boolean billingEnabled;
  private final String projectId;

  private ProjectBillingInfo() {
    this.billingEnabled = null;
    this.projectId = null;
  }


  private ProjectBillingInfo(
      Boolean billingEnabled,
      String projectId
      ) {
    this.billingEnabled = billingEnabled;
    this.projectId = projectId;
  }

  @Override
  public Map<String, List<String>> populateFieldsInMap(Set<String> fieldNames) {
    Map<String, List<String>> fieldMap = new HashMap<>();
    if (fieldNames.contains("billingEnabled")) {
      fieldMap.put("billingEnabled", Collections.singletonList(String.valueOf(billingEnabled)));
    }
    if (fieldNames.contains("projectId")) {
      fieldMap.put("projectId", Collections.singletonList(String.valueOf(projectId)));
    }
    return fieldMap;
  }

  public Boolean getBillingEnabled() {
    return billingEnabled;
  }

  public String getProjectId() {
    return projectId;
  }


  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(ProjectBillingInfo prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  public static ProjectBillingInfo getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }
  private static final ProjectBillingInfo DEFAULT_INSTANCE;
  static {
  DEFAULT_INSTANCE = new ProjectBillingInfo();
  }

  public static class Builder {
    private Boolean billingEnabled;
    private String projectId;

    Builder() {}

    public Builder mergeFrom(ProjectBillingInfo other) {
      if (other == ProjectBillingInfo.getDefaultInstance()) return this;
      if (other.getBillingEnabled() != null) {
        this.billingEnabled = other.billingEnabled;
      }
      if (other.getProjectId() != null) {
        this.projectId = other.projectId;
      }
      return this;
    }

    Builder(ProjectBillingInfo source) {
      this.billingEnabled = source.billingEnabled;
      this.projectId = source.projectId;
    }

    public Boolean getBillingEnabled() {
      return billingEnabled;
    }

    public Builder setBillingEnabled(Boolean billingEnabled) {
      this.billingEnabled = billingEnabled;
      return this;
    }

    public String getProjectId() {
      return projectId;
    }

    public Builder setProjectId(String projectId) {
      this.projectId = projectId;
      return this;
    }


    public ProjectBillingInfo build() {

      return new ProjectBillingInfo(
        billingEnabled,
        projectId
      );
    }

    public Builder clone() {
      Builder newBuilder = new Builder();
      newBuilder.setBillingEnabled(this.billingEnabled);
      newBuilder.setProjectId(this.projectId);
      return newBuilder;
    }
  }

  @Override
  public String toString() {
    return "ProjectBillingInfo{"
        + "billingEnabled=" + billingEnabled + ", "
        + "projectId=" + projectId
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof ProjectBillingInfo) {
      ProjectBillingInfo that = (ProjectBillingInfo) o;
      return
          Objects.equals(this.billingEnabled, that.getBillingEnabled()) &&
          Objects.equals(this.projectId, that.getProjectId())
          ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      billingEnabled,
      projectId
    );
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/Warnings.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.httpjson.ApiMessage;
import com.google.common.collect.ImmutableList;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class Warnings implements ApiMessage {
  private final String code;
  private final List<Data> data;
  private final String message;
  private final ProjectBillingInfo projectBillingInfo;

  private Warnings() {
    this.code = null;
    this.data = null;
    this.message = null;
    this.projectBillingInfo = null;
  }


  private Warnings(
      String code,
      List<Data> data,
      String message,
      ProjectBillingInfo projectBillingInfo
      ) {
    this.code = code;
    this.data = data;
    this.message = message;
    this.projectBillingInfo = projectBillingInfo;
  }

  @Override
  public Map<String, List<String>> populateFieldsInMap(Set<String> fieldNames) {
    Map<String, List<String>> fieldMap = new HashMap<>();
    if (fieldNames.contains("code")) {
      fieldMap.put("code", Collections.singletonList(String.valueOf(code)));
    }
    if (fieldNames.contains("data")) {
      fieldMap.put("data", Collections.singletonList(String.valueOf(data)));
    }
    if (fieldNames.contains("message")) {
      fieldMap.put("message", Collections.singletonList(String.valueOf(message)));
    }
    if (fieldNames.contains("projectBillingInfo")) {
      fieldMap.put("projectBillingInfo", Collections.singletonList(String.valueOf(projectBillingInfo)));
    }
    return fieldMap;
  }

  public String getCode() {
    return code;
  }

  public List<Data> getData() {
    return data;
  }

  public String getMessage() {
    return message;
  }

  public ProjectBillingInfo getProjectBillingInfo() {
    return projectBillingInfo;
  }


  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(Warnings prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  public static Warnings getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }
  private static final Warnings DEFAULT_INSTANCE;
  static {
  DEFAULT_INSTANCE = new Warnings();
  }

  public static class Builder {
    private String code;
    private List<Data> data;
    private String message;
    private ProjectBillingInfo projectBillingInfo;

    Builder() {}

    public Builder mergeFrom(Warnings other) {
      if (other == Warnings.getDefaultInstance()) return this;
      if (other.getCode() != null) {
        this.code = other.code;
      }
      if (other.getData() != null) {
        this.data = other.data;
      }
      if (other.getMessage() != null) {
        this.message = other.message;
      }
      if (other.getProjectBillingInfo() != null) {
        this.projectBillingInfo = other.projectBillingInfo;
      }
      return this;
    }

    Builder(Warnings source) {
      this.code = source.code;
      this.data = source.data;
      this.message = source.message;
      this.projectBillingInfo = source.projectBillingInfo;
    }

    public String getCode() {
      return code;
    }

    public Builder setCode(String code) {
      this.code = code;
      return this;
    }

    public List<Data> getData() {
      return data;
    }

    public Builder setData(List<Data> data) {
      this.data = data;
      return this;
    }

    public String getMessage() {
      return message;
    }

    public Builder setMessage(String message) {
      this.message = message;
      return this;
    }

    public ProjectBillingInfo getProjectBillingInfo() {
      return projectBillingInfo;
    }

    public Builder setProjectBillingInfo(ProjectBillingInfo projectBillingInfo) {
      this.projectBillingInfo = projectBillingInfo;
      return this;
    }


    public Warnings build() {



      return new Warnings(
        code,
        data,
        message,
        projectBillingInfo
      );
    }

    public Builder clone() {
      Builder newBuilder = new Builder();
      newBuilder.setCode(this.code);
      newBuilder.setData(this.data);
      newBuilder.setMessage(this.message);
      newBuilder.setProjectBillingInfo(this.projectBillingInfo);
      return newBuilder;
    }
  }

  @Override
  public String toString() {
    return "Warnings{"
        + "code=" + code + ", "
        + "data=" + data + ", "
        + "message=" + message + ", "
        + "projectBillingInfo=" + projectBillingInfo
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof Warnings) {
      Warnings that = (Warnings) o;
      return
          Objects.equals(this.code, that.getCode()) &&
          Objects.equals(this.data, that.getData()) &&
          Objects.equals(this.message, that.getMessage()) &&
          Objects.equals(this.projectBillingInfo, that.getProjectBillingInfo())
          ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      code,
      data,
      message,
      projectBillingInfo
    );
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/BillingAccountsGetHttpRequest.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.httpjson.ApiMessage;
import com.google.common.collect.ImmutableList;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class BillingAccountsGetHttpRequest implements ApiMessage {
  private final String access_token;
  private final String callback;
  private final String fields;
  private final List<String> fooRepeated;
  private final String key;
  private final String name;
  private final String prettyPrint;
  private final String quotaUser;
  private final String userIp;

  private BillingAccountsGetHttpRequest() {
    this.access_token = null;
    this.callback = null;
    this.fields = null;
    this.fooRepeated = null;
    this.key = null;
    this.name = null;
    this.prettyPrint = null;
    this.quotaUser = null;
    this.userIp = null;
  }


  private BillingAccountsGetHttpRequest(
      String access_token,
      String callback,
      String fields,
      List<String> fooRepeated,
      String key,
      String name,
      String prettyPrint,
      String quotaUser,
      String userIp
      ) {
    this.access_token = access_token;
    this.callback = callback;
    this.fields = fields;
    this.fooRepeated = fooRepeated;
    this.key = key;
    this.name = name;
    this.prettyPrint = prettyPrint;
    this.quotaUser = quotaUser;
    this.userIp = userIp;
  }

  @Override
  public Map<String, List<String>> populateFieldsInMap(Set<String> fieldNames) {
    Map<String, List<String>> fieldMap = new HashMap<>();
    if (fieldNames.contains("access_token")) {
      fieldMap.put("access_token", Collections.singletonList(String.valueOf(access_token)));
    }
    if (fieldNames.contains("callback")) {
      fieldMap.put("callback", Collections.singletonList(String.valueOf(callback)));
    }
    if (fieldNames.contains("fields")) {
      fieldMap.put("fields", Collections.singletonList(String.valueOf(fields)));
    }
    if (fieldNames.contains("fooRepeated")) {
      fieldMap.put("fooRepeated", fooRepeated);
    }
    if (fieldNames.contains("key")) {
      fieldMap.put("key", Collections.singletonList(String.valueOf(key)));
    }
    if (fieldNames.contains("name")) {
      fieldMap.put("name", Collections.singletonList(String.valueOf(name)));
    }
    if (fieldNames.contains("prettyPrint")) {
      fieldMap.put("prettyPrint", Collections.singletonList(String.valueOf(prettyPrint)));
    }
    if (fieldNames.contains("quotaUser")) {
      fieldMap.put("quotaUser", Collections.singletonList(String.valueOf(quotaUser)));
    }
    if (fieldNames.contains("userIp")) {
      fieldMap.put("userIp", Collections.singletonList(String.valueOf(userIp)));
    }
    return fieldMap;
  }

  public String getAccessToken() {
    return access_token;
  }

  public String getCallback() {
    return callback;
  }

  public String getFields() {
    return fields;
  }

  public List<String> getFooRepeated() {
    return fooRepeated;
  }

  public String getKey() {
    return key;
  }

  public String getName() {
    return name;
  }

  public String getPrettyPrint() {
    return prettyPrint;
  }

  public String getQuotaUser() {
    return quotaUser;
  }

  public String getUserIp() {
    return userIp;
  }


  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(BillingAccountsGetHttpRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  public static BillingAccountsGetHttpRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }
  private static final BillingAccountsGetHttpRequest DEFAULT_INSTANCE;
  static {
  DEFAULT_INSTANCE = new BillingAccountsGetHttpRequest();
  }

  public static class Builder {
    private String access_token;
    private String callback;
    private String fields;
    private List<String> fooRepeated;
    private String key;
    private String name;
    private String prettyPrint;
    private String quotaUser;
    private String userIp;

    Builder() {}

    public Builder mergeFrom(BillingAccountsGetHttpRequest other) {
      if (other == BillingAccountsGetHttpRequest.getDefaultInstance()) return this;
      if (other.getAccessToken() != null) {
        this.access_token = other.access_token;
      }
      if (other.getCallback() != null) {
        this.callback = other.callback;
      }
      if (other.getFields() != null) {
        this.fields = other.fields;
      }
      if (other.getFooRepeated() != null) {
        this.fooRepeated = other.fooRepeated;
      }
      if (other.getKey() != null) {
        this.key = other.key;
      }
      if (other.getName() != null) {
        this.name = other.name;
      }
      if (other.getPrettyPrint() != null) {
        this.prettyPrint = other.prettyPrint;
      }
      if (other.getQuotaUser() != null) {
        this.quotaUser = other.quotaUser;
      }
      if (other.getUserIp() != null) {
        this.userIp = other.userIp;
      }
      return this;
    }

    Builder(BillingAccountsGetHttpRequest source) {
      this.access_token = source.access_token;
      this.callback = source.callback;
      this.fields = source.fields;
      this.fooRepeated = source.fooRepeated;
      this.key = source.key;
      this.name = source.name;
      this.prettyPrint = source.prettyPrint;
      this.quotaUser = source.quotaUser;
      this.userIp = source.userIp;
    }

    public String getAccessToken() {
      return access_token;
    }

    public Builder setAccessToken(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public String getCallback() {
      return callback;
    }

    public Builder setCallback(String callback) {
      this.callback = callback;
      return this;
    }

    public String getFields() {
      return fields;
    }

    public Builder setFields(String fields) {
      this.fields = fields;
      return this;
    }

    public List<String> getFooRepeated() {
      return fooRepeated;
    }

    public Builder setFooRepeated(List<String> fooRepeated) {
      this.fooRepeated = fooRepeated;
      return this;
    }

    public String getKey() {
      return key;
    }

    public Builder setKey(String key) {
      this.key = key;
      return this;
    }

    public String getName() {
      return name;
    }

    public Builder setName(String name) {
      this.name = name;
      return this;
    }

    public String getPrettyPrint() {
      return prettyPrint;
    }

    public Builder setPrettyPrint(String prettyPrint) {
      this.prettyPrint = prettyPrint;
      return this;
    }

    public String getQuotaUser() {
      return quotaUser;
    }

    public Builder setQuotaUser(String quotaUser) {
      this.quotaUser = quotaUser;
      return this;
    }

    public String getUserIp() {
      return userIp;
    }

    public Builder setUserIp(String userIp) {
      this.userIp = userIp;
      return this;
    }


    public BillingAccountsGetHttpRequest build() {
      String missing = "";





      if (name == null) {
        missing += " name";
      }



      if (!missing.isEmpty()) {
        throw new IllegalStateException("Missing required properties:" + missing);
      }
      return new BillingAccountsGetHttpRequest(
        access_token,
        callback,
        fields,
        fooRepeated,
        key,
        name,
        prettyPrint,
        quotaUser,
        userIp
      );
    }

    public Builder clone() {
      Builder newBuilder = new Builder();
      newBuilder.setAccessToken(this.access_token);
      newBuilder.setCallback(this.callback);
      newBuilder.setFields(this.fields);
      newBuilder.setFooRepeated(this.fooRepeated);
      newBuilder.setKey(this.key);
      newBuilder.setName(this.name);
      newBuilder.setPrettyPrint(this.prettyPrint);
      newBuilder.setQuotaUser(this.quotaUser);
      newBuilder.setUserIp(this.userIp);
      return newBuilder;
    }
  }

  @Override
  public String toString() {
    return "BillingAccountsGetHttpRequest{"
        + "access_token=" + access_token + ", "
        + "callback=" + callback + ", "
        + "fields=" + fields + ", "
        + "fooRepeated=" + fooRepeated + ", "
        + "key=" + key + ", "
        + "name=" + name + ", "
        + "prettyPrint=" + prettyPrint + ", "
        + "quotaUser=" + quotaUser + ", "
        + "userIp=" + userIp
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof BillingAccountsGetHttpRequest) {
      BillingAccountsGetHttpRequest that = (BillingAccountsGetHttpRequest) o;
      return
          Objects.equals(this.access_token, that.getAccessToken()) &&
          Objects.equals(this.callback, that.getCallback()) &&
          Objects.equals(this.fields, that.getFields()) &&
          Objects.equals(this.fooRepeated, that.getFooRepeated()) &&
          Objects.equals(this.key, that.getKey()) &&
          Objects.equals(this.name, that.getName()) &&
          Objects.equals(this.prettyPrint, that.getPrettyPrint()) &&
          Objects.equals(this.quotaUser, that.getQuotaUser()) &&
          Objects.equals(this.userIp, that.getUserIp())
          ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      access_token,
      callback,
      fields,
      fooRepeated,
      key,
      name,
      prettyPrint,
      quotaUser,
      userIp
    );
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/BillingAccountsListHttpRequest.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.httpjson.ApiMessage;
import com.google.common.collect.ImmutableList;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class BillingAccountsListHttpRequest implements ApiMessage {
  private final String access_token;
  private final String callback;
  private final String fields;
  private final String key;
  private final Integer maxResults;
  private final Integer pageSize;
  private final String pageToken;
  private final String prettyPrint;
  private final String quotaUser;
  private final String userIp;

  private BillingAccountsListHttpRequest() {
    this.access_token = null;
    this.callback = null;
    this.fields = null;
    this.key = null;
    this.maxResults = null;
    this.pageSize = null;
    this.pageToken = null;
    this.prettyPrint = null;
    this.quotaUser = null;
    this.userIp = null;
  }


  private BillingAccountsListHttpRequest(
      String access_token,
      String callback,
      String fields,
      String key,
      Integer maxResults,
      Integer pageSize,
      String pageToken,
      String prettyPrint,
      String quotaUser,
      String userIp
      ) {
    this.access_token = access_token;
    this.callback = callback;
    this.fields = fields;
    this.key = key;
    this.maxResults = maxResults;
    this.pageSize = pageSize;
    this.pageToken = pageToken;
    this.prettyPrint = prettyPrint;
    this.quotaUser = quotaUser;
    this.userIp = userIp;
  }

  @Override
  public Map<String, List<String>> populateFieldsInMap(Set<String> fieldNames) {
    Map<String, List<String>> fieldMap = new HashMap<>();
    if (fieldNames.contains("access_token")) {
      fieldMap.put("access_token", Collections.singletonList(String.valueOf(access_token)));
    }
    if (fieldNames.contains("callback")) {
      fieldMap.put("callback", Collections.singletonList(String.valueOf(callback)));
    }
    if (fieldNames.contains("fields")) {
      fieldMap.put("fields", Collections.singletonList(String.valueOf(fields)));
    }
    if (fieldNames.contains("key")) {
      fieldMap.put("key", Collections.singletonList(String.valueOf(key)));
    }
    if (fieldNames.contains("maxResults")) {
      fieldMap.put("maxResults", Collections.singletonList(String.valueOf(maxResults)));
    }
    if (fieldNames.contains("pageSize")) {
      fieldMap.put("pageSize", Collections.singletonList(String.valueOf(pageSize)));
    }
    if (fieldNames.contains("pageToken")) {
      fieldMap.put("pageToken", Collections.singletonList(String.valueOf(pageToken)));
    }
    if (fieldNames.contains("prettyPrint")) {
      fieldMap.put("prettyPrint", Collections.singletonList(String.valueOf(prettyPrint)));
    }
    if (fieldNames.contains("quotaUser")) {
      fieldMap.put("quotaUser", Collections.singletonList(String.valueOf(quotaUser)));
    }
    if (fieldNames.contains("userIp")) {
      fieldMap.put("userIp", Collections.singletonList(String.valueOf(userIp)));
    }
    return fieldMap;
  }

  public String getAccessToken() {
    return access_token;
  }

  public String getCallback() {
    return callback;
  }

  public String getFields() {
    return fields;
  }

  public String getKey() {
    return key;
  }

  public Integer getMaxResults() {
    return maxResults;
  }

  public Integer getPageSize() {
    return pageSize;
  }

  public String getPageToken() {
    return pageToken;
  }

  public String getPrettyPrint() {
    return prettyPrint;
  }

  public String getQuotaUser() {
    return quotaUser;
  }

  public String getUserIp() {
    return userIp;
  }


  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(BillingAccountsListHttpRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  public static BillingAccountsListHttpRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }
  private static final BillingAccountsListHttpRequest DEFAULT_INSTANCE;
  static {
  DEFAULT_INSTANCE = new BillingAccountsListHttpRequest();
  }

  public static class Builder {
    private String access_token;
    private String callback;
    private String fields;
    private String key;
    private Integer maxResults;
    private Integer pageSize;
    private String pageToken;
    private String prettyPrint;
    private String quotaUser;
    private String userIp;

    Builder() {}

    public Builder mergeFrom(BillingAccountsListHttpRequest other) {
      if (other == BillingAccountsListHttpRequest.getDefaultInstance()) return this;
      if (other.getAccessToken() != null) {
        this.access_token = other.access_token;
      }
      if (other.getCallback() != null) {
        this.callback = other.callback;
      }
      if (other.getFields() != null) {
        this.fields = other.fields;
      }
      if (other.getKey() != null) {
        this.key = other.key;
      }
      if (other.getMaxResults() != null) {
        this.maxResults = other.maxResults;
      }
      if (other.getPageSize() != null) {
        this.pageSize = other.pageSize;
      }
      if (other.getPageToken() != null) {
        this.pageToken = other.pageToken;
      }
      if (other.getPrettyPrint() != null) {
        this.prettyPrint = other.prettyPrint;
      }
      if (other.getQuotaUser() != null) {
        this.quotaUser = other.quotaUser;
      }
      if (other.getUserIp() != null) {
        this.userIp = other.userIp;
      }
      return this;
    }

    Builder(BillingAccountsListHttpRequest source) {
      this.access_token = source.access_token;
      this.callback = source.callback;
      this.fields = source.fields;
      this.key = source.key;
      this.maxResults = source.maxResults;
      this.pageSize = source.pageSize;
      this.pageToken = source.pageToken;
      this.prettyPrint = source.prettyPrint;
      this.quotaUser = source.quotaUser;
      this.userIp = source.userIp;
    }

    public String getAccessToken() {
      return access_token;
    }

    public Builder setAccessToken(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public String getCallback() {
      return callback;
    }

    public Builder setCallback(String callback) {
      this.callback = callback;
      return this;
    }

    public String getFields() {
      return fields;
    }

    public Builder setFields(String fields) {
      this.fields = fields;
      return this;
    }

    public String getKey() {
      return key;
    }

    public Builder setKey(String key) {
      this.key = key;
      return this;
    }

    public Integer getMaxResults() {
      return maxResults;
    }

    public Builder setMaxResults(Integer maxResults) {
      this.maxResults = maxResults;
      return this;
    }

    public Integer getPageSize() {
      return pageSize;
    }

    public Builder setPageSize(Integer pageSize) {
      this.pageSize = pageSize;
      return this;
    }

    public String getPageToken() {
      return pageToken;
    }

    public Builder setPageToken(String pageToken) {
      this.pageToken = pageToken;
      return this;
    }

    public String getPrettyPrint() {
      return prettyPrint;
    }

    public Builder setPrettyPrint(String prettyPrint) {
      this.prettyPrint = prettyPrint;
      return this;
    }

    public String getQuotaUser() {
      return quotaUser;
    }

    public Builder setQuotaUser(String quotaUser) {
      this.quotaUser = quotaUser;
      return this;
    }

    public String getUserIp() {
      return userIp;
    }

    public Builder setUserIp(String userIp) {
      this.userIp = userIp;
      return this;
    }


    public BillingAccountsListHttpRequest build() {









      return new BillingAccountsListHttpRequest(
        access_token,
        callback,
        fields,
        key,
        maxResults,
        pageSize,
        pageToken,
        prettyPrint,
        quotaUser,
        userIp
      );
    }

    public Builder clone() {
      Builder newBuilder = new Builder();
      newBuilder.setAccessToken(this.access_token);
      newBuilder.setCallback(this.callback);
      newBuilder.setFields(this.fields);
      newBuilder.setKey(this.key);
      newBuilder.setMaxResults(this.maxResults);
      newBuilder.setPageSize(this.pageSize);
      newBuilder.setPageToken(this.pageToken);
      newBuilder.setPrettyPrint(this.prettyPrint);
      newBuilder.setQuotaUser(this.quotaUser);
      newBuilder.setUserIp(this.userIp);
      return newBuilder;
    }
  }

  @Override
  public String toString() {
    return "BillingAccountsListHttpRequest{"
        + "access_token=" + access_token + ", "
        + "callback=" + callback + ", "
        + "fields=" + fields + ", "
        + "key=" + key + ", "
        + "maxResults=" + maxResults + ", "
        + "pageSize=" + pageSize + ", "
        + "pageToken=" + pageToken + ", "
        + "prettyPrint=" + prettyPrint + ", "
        + "quotaUser=" + quotaUser + ", "
        + "userIp=" + userIp
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof BillingAccountsListHttpRequest) {
      BillingAccountsListHttpRequest that = (BillingAccountsListHttpRequest) o;
      return
          Objects.equals(this.access_token, that.getAccessToken()) &&
          Objects.equals(this.callback, that.getCallback()) &&
          Objects.equals(this.fields, that.getFields()) &&
          Objects.equals(this.key, that.getKey()) &&
          Objects.equals(this.maxResults, that.getMaxResults()) &&
          Objects.equals(this.pageSize, that.getPageSize()) &&
          Objects.equals(this.pageToken, that.getPageToken()) &&
          Objects.equals(this.prettyPrint, that.getPrettyPrint()) &&
          Objects.equals(this.quotaUser, that.getQuotaUser()) &&
          Objects.equals(this.userIp, that.getUserIp())
          ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      access_token,
      callback,
      fields,
      key,
      maxResults,
      pageSize,
      pageToken,
      prettyPrint,
      quotaUser,
      userIp
    );
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/ProjectsGetBillingInfoHttpRequest.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.httpjson.ApiMessage;
import com.google.common.collect.ImmutableList;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class ProjectsGetBillingInfoHttpRequest implements ApiMessage {
  private final String access_token;
  private final String callback;
  private final String fields;
  private final String key;
  private final String name;
  private final String prettyPrint;
  private final String quotaUser;
  private final String userIp;

  private ProjectsGetBillingInfoHttpRequest() {
    this.access_token = null;
    this.callback = null;
    this.fields = null;
    this.key = null;
    this.name = null;
    this.prettyPrint = null;
    this.quotaUser = null;
    this.userIp = null;
  }


  private ProjectsGetBillingInfoHttpRequest(
      String access_token,
      String callback,
      String fields,
      String key,
      String name,
      String prettyPrint,
      String quotaUser,
      String userIp
      ) {
    this.access_token = access_token;
    this.callback = callback;
    this.fields = fields;
    this.key = key;
    this.name = name;
    this.prettyPrint = prettyPrint;
    this.quotaUser = quotaUser;
    this.userIp = userIp;
  }

  @Override
  public Map<String, List<String>> populateFieldsInMap(Set<String> fieldNames) {
    Map<String, List<String>> fieldMap = new HashMap<>();
    if (fieldNames.contains("access_token")) {
      fieldMap.put("access_token", Collections.singletonList(String.valueOf(access_token)));
    }
    if (fieldNames.contains("callback")) {
      fieldMap.put("callback", Collections.singletonList(String.valueOf(callback)));
    }
    if (fieldNames.contains("fields")) {
      fieldMap.put("fields", Collections.singletonList(String.valueOf(fields)));
    }
    if (fieldNames.contains("key")) {
      fieldMap.put("key", Collections.singletonList(String.valueOf(key)));
    }
    if (fieldNames.contains("name")) {
      fieldMap.put("name", Collections.singletonList(String.valueOf(name)));
    }
    if (fieldNames.contains("prettyPrint")) {
      fieldMap.put("prettyPrint", Collections.singletonList(String.valueOf(prettyPrint)));
    }
    if (fieldNames.contains("quotaUser")) {
      fieldMap.put("quotaUser", Collections.singletonList(String.valueOf(quotaUser)));
    }
    if (fieldNames.contains("userIp")) {
      fieldMap.put("userIp", Collections.singletonList(String.valueOf(userIp)));
    }
    return fieldMap;
  }

  public String getAccessToken() {
    return access_token;
  }

  public String getCallback() {
    return callback;
  }

  public String getFields() {
    return fields;
  }

  public String getKey() {
    return key;
  }

  public String getName() {
    return name;
  }

  public String getPrettyPrint() {
    return prettyPrint;
  }

  public String getQuotaUser() {
    return quotaUser;
  }

  public String getUserIp() {
    return userIp;
  }


  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(ProjectsGetBillingInfoHttpRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  public static ProjectsGetBillingInfoHttpRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }
  private static final ProjectsGetBillingInfoHttpRequest DEFAULT_INSTANCE;
  static {
  DEFAULT_INSTANCE = new ProjectsGetBillingInfoHttpRequest();
  }

  public static class Builder {
    private String access_token;
    private String callback;
    private String fields;
    private String key;
    private String name;
    private String prettyPrint;
    private String quotaUser;
    private String userIp;

    Builder() {}

    public Builder mergeFrom(ProjectsGetBillingInfoHttpRequest other) {
      if (other == ProjectsGetBillingInfoHttpRequest.getDefaultInstance()) return this;
      if (other.getAccessToken() != null) {
        this.access_token = other.access_token;
      }
      if (other.getCallback() != null) {
        this.callback = other.callback;
      }
      if (other.getFields() != null) {
        this.fields = other.fields;
      }
      if (other.getKey() != null) {
        this.key = other.key;
      }
      if (other.getName() != null) {
        this.name = other.name;
      }
      if (other.getPrettyPrint() != null) {
        this.prettyPrint = other.prettyPrint;
      }
      if (other.getQuotaUser() != null) {
        this.quotaUser = other.quotaUser;
      }
      if (other.getUserIp() != null) {
        this.userIp = other.userIp;
      }
      return this;
    }

    Builder(ProjectsGetBillingInfoHttpRequest source) {
      this.access_token = source.access_token;
      this.callback = source.callback;
      this.fields = source.fields;
      this.key = source.key;
      this.name = source.name;
      this.prettyPrint = source.prettyPrint;
      this.quotaUser = source.quotaUser;
      this.userIp = source.userIp;
    }

    public String getAccessToken() {
      return access_token;
    }

    public Builder setAccessToken(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public String getCallback() {
      return callback;
    }

    public Builder setCallback(String callback) {
      this.callback = callback;
      return this;
    }

    public String getFields() {
      return fields;
    }

    public Builder setFields(String fields) {
      this.fields = fields;
      return this;
    }

    public String getKey() {
      return key;
    }

    public Builder setKey(String key) {
      this.key = key;
      return this;
    }

    public String getName() {
      return name;
    }

    public Builder setName(String name) {
      this.name = name;
      return this;
    }

    public String getPrettyPrint() {
      return prettyPrint;
    }

    public Builder setPrettyPrint(String prettyPrint) {
      this.prettyPrint = prettyPrint;
      return this;
    }

    public String getQuotaUser() {
      return quotaUser;
    }

    public Builder setQuotaUser(String quotaUser) {
      this.quotaUser = quotaUser;
      return this;
    }

    public String getUserIp() {
      return userIp;
    }

    public Builder setUserIp(String userIp) {
      this.userIp = userIp;
      return this;
    }


    public ProjectsGetBillingInfoHttpRequest build() {
      String missing = "";




      if (name == null) {
        missing += " name";
      }



      if (!missing.isEmpty()) {
        throw new IllegalStateException("Missing required properties:" + missing);
      }
      return new ProjectsGetBillingInfoHttpRequest(
        access_token,
        callback,
        fields,
        key,
        name,
        prettyPrint,
        quotaUser,
        userIp
      );
    }

    public Builder clone() {
      Builder newBuilder = new Builder();
      newBuilder.setAccessToken(this.access_token);
      newBuilder.setCallback(this.callback);
      newBuilder.setFields(this.fields);
      newBuilder.setKey(this.key);
      newBuilder.setName(this.name);
      newBuilder.setPrettyPrint(this.prettyPrint);
      newBuilder.setQuotaUser(this.quotaUser);
      newBuilder.setUserIp(this.userIp);
      return newBuilder;
    }
  }

  @Override
  public String toString() {
    return "ProjectsGetBillingInfoHttpRequest{"
        + "access_token=" + access_token + ", "
        + "callback=" + callback + ", "
        + "fields=" + fields + ", "
        + "key=" + key + ", "
        + "name=" + name + ", "
        + "prettyPrint=" + prettyPrint + ", "
        + "quotaUser=" + quotaUser + ", "
        + "userIp=" + userIp
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof ProjectsGetBillingInfoHttpRequest) {
      ProjectsGetBillingInfoHttpRequest that = (ProjectsGetBillingInfoHttpRequest) o;
      return
          Objects.equals(this.access_token, that.getAccessToken()) &&
          Objects.equals(this.callback, that.getCallback()) &&
          Objects.equals(this.fields, that.getFields()) &&
          Objects.equals(this.key, that.getKey()) &&
          Objects.equals(this.name, that.getName()) &&
          Objects.equals(this.prettyPrint, that.getPrettyPrint()) &&
          Objects.equals(this.quotaUser, that.getQuotaUser()) &&
          Objects.equals(this.userIp, that.getUserIp())
          ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      access_token,
      callback,
      fields,
      key,
      name,
      prettyPrint,
      quotaUser,
      userIp
    );
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/ProjectsListHttpRequest.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.httpjson.ApiMessage;
import com.google.common.collect.ImmutableList;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class ProjectsListHttpRequest implements ApiMessage {
  private final String access_token;
  private final String callback;
  private final String fields;
  private final String key;
  private final String name;
  private final Integer pageSize;
  private final String pageToken;
  private final String prettyPrint;
  private final String quotaUser;
  private final String userIp;

  private ProjectsListHttpRequest() {
    this.access_token = null;
    this.callback = null;
    this.fields = null;
    this.key = null;
    this.name = null;
    this.pageSize = null;
    this.pageToken = null;
    this.prettyPrint = null;
    this.quotaUser = null;
    this.userIp = null;
  }


  private ProjectsListHttpRequest(
      String access_token,
      String callback,
      String fields,
      String key,
      String name,
      Integer pageSize,
      String pageToken,
      String prettyPrint,
      String quotaUser,
      String userIp
      ) {
    this.access_token = access_token;
    this.callback = callback;
    this.fields = fields;
    this.key = key;
    this.name = name;
    this.pageSize = pageSize;
    this.pageToken = pageToken;
    this.prettyPrint = prettyPrint;
    this.quotaUser = quotaUser;
    this.userIp = userIp;
  }

  @Override
  public Map<String, List<String>> populateFieldsInMap(Set<String> fieldNames) {
    Map<String, List<String>> fieldMap = new HashMap<>();
    if (fieldNames.contains("access_token")) {
      fieldMap.put("access_token", Collections.singletonList(String.valueOf(access_token)));
    }
    if (fieldNames.contains("callback")) {
      fieldMap.put("callback", Collections.singletonList(String.valueOf(callback)));
    }
    if (fieldNames.contains("fields")) {
      fieldMap.put("fields", Collections.singletonList(String.valueOf(fields)));
    }
    if (fieldNames.contains("key")) {
      fieldMap.put("key", Collections.singletonList(String.valueOf(key)));
    }
    if (fieldNames.contains("name")) {
      fieldMap.put("name", Collections.singletonList(String.valueOf(name)));
    }
    if (fieldNames.contains("pageSize")) {
      fieldMap.put("pageSize", Collections.singletonList(String.valueOf(pageSize)));
    }
    if (fieldNames.contains("pageToken")) {
      fieldMap.put("pageToken", Collections.singletonList(String.valueOf(pageToken)));
    }
    if (fieldNames.contains("prettyPrint")) {
      fieldMap.put("prettyPrint", Collections.singletonList(String.valueOf(prettyPrint)));
    }
    if (fieldNames.contains("quotaUser")) {
      fieldMap.put("quotaUser", Collections.singletonList(String.valueOf(quotaUser)));
    }
    if (fieldNames.contains("userIp")) {
      fieldMap.put("userIp", Collections.singletonList(String.valueOf(userIp)));
    }
    return fieldMap;
  }

  public String getAccessToken() {
    return access_token;
  }

  public String getCallback() {
    return callback;
  }

  public String getFields() {
    return fields;
  }

  public String getKey() {
    return key;
  }

  public String getName() {
    return name;
  }

  public Integer getPageSize() {
    return pageSize;
  }

  public String getPageToken() {
    return pageToken;
  }

  public String getPrettyPrint() {
    return prettyPrint;
  }

  public String getQuotaUser() {
    return quotaUser;
  }

  public String getUserIp() {
    return userIp;
  }


  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(ProjectsListHttpRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  public static ProjectsListHttpRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }
  private static final ProjectsListHttpRequest DEFAULT_INSTANCE;
  static {
  DEFAULT_INSTANCE = new ProjectsListHttpRequest();
  }

  public static class Builder {
    private String access_token;
    private String callback;
    private String fields;
    private String key;
    private String name;
    private Integer pageSize;
    private String pageToken;
    private String prettyPrint;
    private String quotaUser;
    private String userIp;

    Builder() {}

    public Builder mergeFrom(ProjectsListHttpRequest other) {
      if (other == ProjectsListHttpRequest.getDefaultInstance()) return this;
      if (other.getAccessToken() != null) {
        this.access_token = other.access_token;
      }
      if (other.getCallback() != null) {
        this.callback = other.callback;
      }
      if (other.getFields() != null) {
        this.fields = other.fields;
      }
      if (other.getKey() != null) {
        this.key = other.key;
      }
      if (other.getName() != null) {
        this.name = other.name;
      }
      if (other.getPageSize() != null) {
        this.pageSize = other.pageSize;
      }
      if (other.getPageToken() != null) {
        this.pageToken = other.pageToken;
      }
      if (other.getPrettyPrint() != null) {
        this.prettyPrint = other.prettyPrint;
      }
      if (other.getQuotaUser() != null) {
        this.quotaUser = other.quotaUser;
      }
      if (other.getUserIp() != null) {
        this.userIp = other.userIp;
      }
      return this;
    }

    Builder(ProjectsListHttpRequest source) {
      this.access_token = source.access_token;
      this.callback = source.callback;
      this.fields = source.fields;
      this.key = source.key;
      this.name = source.name;
      this.pageSize = source.pageSize;
      this.pageToken = source.pageToken;
      this.prettyPrint = source.prettyPrint;
      this.quotaUser = source.quotaUser;
      this.userIp = source.userIp;
    }

    public String getAccessToken() {
      return access_token;
    }

    public Builder setAccessToken(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public String getCallback() {
      return callback;
    }

    public Builder setCallback(String callback) {
      this.callback = callback;
      return this;
    }

    public String getFields() {
      return fields;
    }

    public Builder setFields(String fields) {
      this.fields = fields;
      return this;
    }

    public String getKey() {
      return key;
    }

    public Builder setKey(String key) {
      this.key = key;
      return this;
    }

    public String getName() {
      return name;
    }

    public Builder setName(String name) {
      this.name = name;
      return this;
    }

    public Integer getPageSize() {
      return pageSize;
    }

    public Builder setPageSize(Integer pageSize) {
      this.pageSize = pageSize;
      return this;
    }

    public String getPageToken() {
      return pageToken;
    }

    public Builder setPageToken(String pageToken) {
      this.pageToken = pageToken;
      return this;
    }

    public String getPrettyPrint() {
      return prettyPrint;
    }

    public Builder setPrettyPrint(String prettyPrint) {
      this.prettyPrint = prettyPrint;
      return this;
    }

    public String getQuotaUser() {
      return quotaUser;
    }

    public Builder setQuotaUser(String quotaUser) {
      this.quotaUser = quotaUser;
      return this;
    }

    public String getUserIp() {
      return userIp;
    }

    public Builder setUserIp(String userIp) {
      this.userIp = userIp;
      return this;
    }


    public ProjectsListHttpRequest build() {
      String missing = "";




      if (name == null) {
        missing += " name";
      }





      if (!missing.isEmpty()) {
        throw new IllegalStateException("Missing required properties:" + missing);
      }
      return new ProjectsListHttpRequest(
        access_token,
        callback,
        fields,
        key,
        name,
        pageSize,
        pageToken,
        prettyPrint,
        quotaUser,
        userIp
      );
    }

    public Builder clone() {
      Builder newBuilder = new Builder();
      newBuilder.setAccessToken(this.access_token);
      newBuilder.setCallback(this.callback);
      newBuilder.setFields(this.fields);
      newBuilder.setKey(this.key);
      newBuilder.setName(this.name);
      newBuilder.setPageSize(this.pageSize);
      newBuilder.setPageToken(this.pageToken);
      newBuilder.setPrettyPrint(this.prettyPrint);
      newBuilder.setQuotaUser(this.quotaUser);
      newBuilder.setUserIp(this.userIp);
      return newBuilder;
    }
  }

  @Override
  public String toString() {
    return "ProjectsListHttpRequest{"
        + "access_token=" + access_token + ", "
        + "callback=" + callback + ", "
        + "fields=" + fields + ", "
        + "key=" + key + ", "
        + "name=" + name + ", "
        + "pageSize=" + pageSize + ", "
        + "pageToken=" + pageToken + ", "
        + "prettyPrint=" + prettyPrint + ", "
        + "quotaUser=" + quotaUser + ", "
        + "userIp=" + userIp
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof ProjectsListHttpRequest) {
      ProjectsListHttpRequest that = (ProjectsListHttpRequest) o;
      return
          Objects.equals(this.access_token, that.getAccessToken()) &&
          Objects.equals(this.callback, that.getCallback()) &&
          Objects.equals(this.fields, that.getFields()) &&
          Objects.equals(this.key, that.getKey()) &&
          Objects.equals(this.name, that.getName()) &&
          Objects.equals(this.pageSize, that.getPageSize()) &&
          Objects.equals(this.pageToken, that.getPageToken()) &&
          Objects.equals(this.prettyPrint, that.getPrettyPrint()) &&
          Objects.equals(this.quotaUser, that.getQuotaUser()) &&
          Objects.equals(this.userIp, that.getUserIp())
          ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      access_token,
      callback,
      fields,
      key,
      name,
      pageSize,
      pageToken,
      prettyPrint,
      quotaUser,
      userIp
    );
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/ProjectsUpdateBillingInfoHttpRequest.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.httpjson.ApiMessage;
import com.google.common.collect.ImmutableList;
import java.io.Serializable;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Generated;

@Generated("by GAPIC")
@BetaApi
public final class ProjectsUpdateBillingInfoHttpRequest implements ApiMessage {
  private final String access_token;
  private final String callback;
  private final String fields;
  private final String key;
  private final String name;
  private final String prettyPrint;
  private final String quotaUser;
  private final ProjectBillingInfo request;
  private final String userIp;

  private ProjectsUpdateBillingInfoHttpRequest() {
    this.access_token = null;
    this.callback = null;
    this.fields = null;
    this.key = null;
    this.name = null;
    this.prettyPrint = null;
    this.quotaUser = null;
    this.request = null;
    this.userIp = null;
  }


  private ProjectsUpdateBillingInfoHttpRequest(
      String access_token,
      String callback,
      String fields,
      String key,
      String name,
      String prettyPrint,
      String quotaUser,
      ProjectBillingInfo request,
      String userIp
      ) {
    this.access_token = access_token;
    this.callback = callback;
    this.fields = fields;
    this.key = key;
    this.name = name;
    this.prettyPrint = prettyPrint;
    this.quotaUser = quotaUser;
    this.request = request;
    this.userIp = userIp;
  }

  @Override
  public Map<String, List<String>> populateFieldsInMap(Set<String> fieldNames) {
    Map<String, List<String>> fieldMap = new HashMap<>();
    if (fieldNames.contains("access_token")) {
      fieldMap.put("access_token", Collections.singletonList(String.valueOf(access_token)));
    }
    if (fieldNames.contains("callback")) {
      fieldMap.put("callback", Collections.singletonList(String.valueOf(callback)));
    }
    if (fieldNames.contains("fields")) {
      fieldMap.put("fields", Collections.singletonList(String.valueOf(fields)));
    }
    if (fieldNames.contains("key")) {
      fieldMap.put("key", Collections.singletonList(String.valueOf(key)));
    }
    if (fieldNames.contains("name")) {
      fieldMap.put("name", Collections.singletonList(String.valueOf(name)));
    }
    if (fieldNames.contains("prettyPrint")) {
      fieldMap.put("prettyPrint", Collections.singletonList(String.valueOf(prettyPrint)));
    }
    if (fieldNames.contains("quotaUser")) {
      fieldMap.put("quotaUser", Collections.singletonList(String.valueOf(quotaUser)));
    }
    if (fieldNames.contains("request")) {
      fieldMap.put("request", Collections.singletonList(String.valueOf(request)));
    }
    if (fieldNames.contains("userIp")) {
      fieldMap.put("userIp", Collections.singletonList(String.valueOf(userIp)));
    }
    return fieldMap;
  }

  public String getAccessToken() {
    return access_token;
  }

  public String getCallback() {
    return callback;
  }

  public String getFields() {
    return fields;
  }

  public String getKey() {
    return key;
  }

  public String getName() {
    return name;
  }

  public String getPrettyPrint() {
    return prettyPrint;
  }

  public String getQuotaUser() {
    return quotaUser;
  }

  public ProjectBillingInfo getRequest() {
    return request;
  }

  public String getUserIp() {
    return userIp;
  }


  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(ProjectsUpdateBillingInfoHttpRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  public static ProjectsUpdateBillingInfoHttpRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }
  private static final ProjectsUpdateBillingInfoHttpRequest DEFAULT_INSTANCE;
  static {
  DEFAULT_INSTANCE = new ProjectsUpdateBillingInfoHttpRequest();
  }

  public static class Builder {
    private String access_token;
    private String callback;
    private String fields;
    private String key;
    private String name;
    private String prettyPrint;
    private String quotaUser;
    private ProjectBillingInfo request;
    private String userIp;

    Builder() {}

    public Builder mergeFrom(ProjectsUpdateBillingInfoHttpRequest other) {
      if (other == ProjectsUpdateBillingInfoHttpRequest.getDefaultInstance()) return this;
      if (other.getAccessToken() != null) {
        this.access_token = other.access_token;
      }
      if (other.getCallback() != null) {
        this.callback = other.callback;
      }
      if (other.getFields() != null) {
        this.fields = other.fields;
      }
      if (other.getKey() != null) {
        this.key = other.key;
      }
      if (other.getName() != null) {
        this.name = other.name;
      }
      if (other.getPrettyPrint() != null) {
        this.prettyPrint = other.prettyPrint;
      }
      if (other.getQuotaUser() != null) {
        this.quotaUser = other.quotaUser;
      }
      if (other.getRequest() != null) {
        this.request = other.request;
      }
      if (other.getUserIp() != null) {
        this.userIp = other.userIp;
      }
      return this;
    }

    Builder(ProjectsUpdateBillingInfoHttpRequest source) {
      this.access_token = source.access_token;
      this.callback = source.callback;
      this.fields = source.fields;
      this.key = source.key;
      this.name = source.name;
      this.prettyPrint = source.prettyPrint;
      this.quotaUser = source.quotaUser;
      this.request = source.request;
      this.userIp = source.userIp;
    }

    public String getAccessToken() {
      return access_token;
    }

    public Builder setAccessToken(String access_token) {
      this.access_token = access_token;
      return this;
    }

    public String getCallback() {
      return callback;
    }

    public Builder setCallback(String callback) {
      this.callback = callback;
      return this;
    }

    public String getFields() {
      return fields;
    }

    public Builder setFields(String fields) {
      this.fields = fields;
      return this;
    }

    public String getKey() {
      return key;
    }

    public Builder setKey(String key) {
      this.key = key;
      return this;
    }

    public String getName() {
      return name;
    }

    public Builder setName(String name) {
      this.name = name;
      return this;
    }

    public String getPrettyPrint() {
      return prettyPrint;
    }

    public Builder setPrettyPrint(String prettyPrint) {
      this.prettyPrint = prettyPrint;
      return this;
    }

    public String getQuotaUser() {
      return quotaUser;
    }

    public Builder setQuotaUser(String quotaUser) {
      this.quotaUser = quotaUser;
      return this;
    }

    public ProjectBillingInfo getRequest() {
      return request;
    }

    public Builder setRequest(ProjectBillingInfo request) {
      this.request = request;
      return this;
    }

    public String getUserIp() {
      return userIp;
    }

    public Builder setUserIp(String userIp) {
      this.userIp = userIp;
      return this;
    }


    public ProjectsUpdateBillingInfoHttpRequest build() {
      String missing = "";




      if (name == null) {
        missing += " name";
      }




      if (!missing.isEmpty()) {
        throw new IllegalStateException("Missing required properties:" + missing);
      }
      return new ProjectsUpdateBillingInfoHttpRequest(
        access_token,
        callback,
        fields,
        key,
        name,
        prettyPrint,
        quotaUser,
        request,
        userIp
      );
    }

    public Builder clone() {
      Builder newBuilder = new Builder();
      newBuilder.setAccessToken(this.access_token);
      newBuilder.setCallback(this.callback);
      newBuilder.setFields(this.fields);
      newBuilder.setKey(this.key);
      newBuilder.setName(this.name);
      newBuilder.setPrettyPrint(this.prettyPrint);
      newBuilder.setQuotaUser(this.quotaUser);
      newBuilder.setRequest(this.request);
      newBuilder.setUserIp(this.userIp);
      return newBuilder;
    }
  }

  @Override
  public String toString() {
    return "ProjectsUpdateBillingInfoHttpRequest{"
        + "access_token=" + access_token + ", "
        + "callback=" + callback + ", "
        + "fields=" + fields + ", "
        + "key=" + key + ", "
        + "name=" + name + ", "
        + "prettyPrint=" + prettyPrint + ", "
        + "quotaUser=" + quotaUser + ", "
        + "request=" + request + ", "
        + "userIp=" + userIp
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof ProjectsUpdateBillingInfoHttpRequest) {
      ProjectsUpdateBillingInfoHttpRequest that = (ProjectsUpdateBillingInfoHttpRequest) o;
      return
          Objects.equals(this.access_token, that.getAccessToken()) &&
          Objects.equals(this.callback, that.getCallback()) &&
          Objects.equals(this.fields, that.getFields()) &&
          Objects.equals(this.key, that.getKey()) &&
          Objects.equals(this.name, that.getName()) &&
          Objects.equals(this.prettyPrint, that.getPrettyPrint()) &&
          Objects.equals(this.quotaUser, that.getQuotaUser()) &&
          Objects.equals(this.request, that.getRequest()) &&
          Objects.equals(this.userIp, that.getUserIp())
          ;
    }
    return false;
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      access_token,
      callback,
      fields,
      key,
      name,
      prettyPrint,
      quotaUser,
      request,
      userIp
    );
  }
}

============== file: src/main/java/com/google/cloud/fakebilling/v1/BillingAccountAdminClient.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.api.pathtemplate.PathTemplate;
import static com.google.cloud.fakebilling.v1.PagedResponseWrappers.BillingAccountsListPagedResponse;
import com.google.cloud.fakebilling.v1.stub.BillingAccountAdminStub;
import java.io.Closeable;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND SERVICE
/**
 * Service Description: Test Discovery doc.
 *
 * <p>This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * <pre>
 * <code>
 * try (BillingAccountAdminClient billingAccountAdminClient = BillingAccountAdminClient.create()) {
 *
 *   BillingAccount response = billingAccountAdminClient.billingAccountsGet();
 * }
 * </code>
 * </pre>
 *
 * <p>Note: close() needs to be called on the billingAccountAdminClient object to clean up resources such
 * as threads. In the example above, try-with-resources is used, which automatically calls
 * close().
 *
 * <p>The surface of this class includes several types of Java methods for each of the API's methods:
 *
 * <ol>
 * <li> A "flattened" method. With this type of method, the fields of the request type have been
 * converted into function parameters. It may be the case that not all fields are available
 * as parameters, and not every API method will have a flattened method entry point.
 * <li> A "request object" method. This type of method only takes one parameter, a request
 * object, which must be constructed before the call. Not every API method will have a request
 * object method.
 * <li> A "callable" method. This type of method takes no parameters and returns an immutable
 * API callable object, which can be used to initiate calls to the service.
 * </ol>
 *
 * <p>See the individual methods for example code.
 *
 * <p>Many parameters require resource names to be formatted in a particular way. To assist
 * with these names, this class includes a format method for each type of name, and additionally
 * a parse method to extract the individual identifiers contained within names that are
 * returned.
 *
 * <p>This class can be customized by passing in a custom instance of BillingAccountAdminSettings to
 * create(). For example:
 *
 * <pre>
 * <code>
 * BillingAccountAdminSettings billingAccountAdminSettings =
 *     BillingAccountAdminSettings.defaultBuilder()
 *         .setCredentialsProvider(FixedCredentialsProvider.create(myCredentials))
 *         .build();
 * BillingAccountAdminClient billingAccountAdminClient =
 *     BillingAccountAdminClient.create(billingAccountAdminSettings);
 * </code>
 * </pre>
 */
@Generated("by GAPIC v0.0.5")
public class BillingAccountAdminClient implements BackgroundResource {
  private final BillingAccountAdminSettings settings;
  private final BillingAccountAdminStub stub;

  private static final PathTemplate BILLING_ACCOUNT_PATH_TEMPLATE =
      PathTemplate.createWithoutUrlEncoding("billingAccounts/{billing_account}");

  /**
   * Formats a string containing the fully-qualified path to represent
   * a billing_account resource.
   */
  public static final String formatBillingAccountName(String billingAccount) {
    return BILLING_ACCOUNT_PATH_TEMPLATE.instantiate(
        "billing_account", billingAccount);
  }

  /**
   * Parses the billing_account from the given fully-qualified path which
   * represents a billing_account resource.
   */
  public static final String parseBillingAccountFromBillingAccountName(String billingAccountName) {
    return BILLING_ACCOUNT_PATH_TEMPLATE.parse(billingAccountName).get("billing_account");
  }

  /**
   * Constructs an instance of BillingAccountAdminClient with default settings.
   */
  public static final BillingAccountAdminClient create() throws IOException {
    return create(BillingAccountAdminSettings.defaultBuilder().build());
  }

  /**
   * Constructs an instance of BillingAccountAdminClient, using the given settings.
   * The channels are created based on the settings passed in, or defaults for any
   * settings that are not set.
   */
  public static final BillingAccountAdminClient create(BillingAccountAdminSettings settings) throws IOException {
    return new BillingAccountAdminClient(settings);
  }

  /**
   * Constructs an instance of BillingAccountAdminClient, using the given stub for making calls. This is for
   * advanced usage - prefer to use BillingAccountAdminSettings}.
   */
  public static final BillingAccountAdminClient create(BillingAccountAdminStub stub) {
    return new BillingAccountAdminClient(stub);
  }

  /**
   * Constructs an instance of BillingAccountAdminClient, using the given settings.
   * This is protected so that it is easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected BillingAccountAdminClient(BillingAccountAdminSettings settings) throws IOException {
    this.settings = settings;
    this.stub = settings.createStub();
  }

  protected BillingAccountAdminClient(BillingAccountAdminStub stub) {
    this.settings = null;
    this.stub = stub;
  }

  public final BillingAccountAdminSettings getSettings() {
    return settings;
  }

  public BillingAccountAdminStub getStub() {
    return stub;
  }


  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists the billing accounts that the current authenticated user
   * [owns](https://support.google.com/cloud/answer/4430947).
   *
   * Sample code:
   * <pre><code>
   * try (BillingAccountAdminClient billingAccountAdminClient = BillingAccountAdminClient.create()) {
   *
   *   for (BillingAccount element : billingAccountAdminClient.billingAccountsList().iterateAll()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi
  public final BillingAccountsListPagedResponse billingAccountsList(BillingAccountsListHttpRequest request) {
    return billingAccountsListPagedCallable()
        .call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists the billing accounts that the current authenticated user
   * [owns](https://support.google.com/cloud/answer/4430947).
   *
   * Sample code:
   * <pre><code>
   * try (BillingAccountAdminClient billingAccountAdminClient = BillingAccountAdminClient.create()) {
   *
   *   ApiFuture&lt;BillingAccountsListPagedResponse&gt; future = billingAccountAdminClient.billingAccountsListPagedCallable().futureCall();
   *   // Do something
   *   for (BillingAccount element : future.get().iterateAll()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   */
  @BetaApi
  public final UnaryCallable<BillingAccountsListHttpRequest, BillingAccountsListPagedResponse> billingAccountsListPagedCallable() {
    return stub.billingAccountsListPagedCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Lists the billing accounts that the current authenticated user
   * [owns](https://support.google.com/cloud/answer/4430947).
   *
   * Sample code:
   * <pre><code>
   * try (BillingAccountAdminClient billingAccountAdminClient = BillingAccountAdminClient.create()) {
   *
   *   while (true) {
   *     ListBillingAccountsResponse response = billingAccountAdminClient.billingAccountsListCallable().call();
   *     for (BillingAccount element : response.getBillingAccounts()) {
   *       // doThingsWith(element);
   *     }
   *     String nextPageToken = response.getNextPageToken();
   *     if (!Strings.isNullOrEmpty(nextPageToken)) {
   *       request = request.toBuilder().setPageToken(nextPageToken).build();
   *     } else {
   *       break;
   *     }
   *   }
   * }
   * </code></pre>
   */
  @BetaApi
  public final UnaryCallable<BillingAccountsListHttpRequest, ListBillingAccountsResponse> billingAccountsListCallable() {
    return stub.billingAccountsListCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets information about a billing account. The current authenticated user
   * must be an [owner of the billing
   * account](https://support.google.com/cloud/answer/4430947).
   *
   * Sample code:
   * <pre><code>
   * try (BillingAccountAdminClient billingAccountAdminClient = BillingAccountAdminClient.create()) {
   *
   *   BillingAccount response = billingAccountAdminClient.billingAccountsGet();
   * }
   * </code></pre>
   *
   * @param name The resource name of the billing account to retrieve. For example,
   * `billingAccounts/012345-567890-ABCDEF`.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi
  public final BillingAccount billingAccountsGet(String name) {

    BillingAccountsGetHttpRequest request =
        BillingAccountsGetHttpRequest.newBuilder()
        .setName(name)
        .build();
    return billingAccountsGet(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets information about a billing account. The current authenticated user
   * must be an [owner of the billing
   * account](https://support.google.com/cloud/answer/4430947).
   *
   * Sample code:
   * <pre><code>
   * try (BillingAccountAdminClient billingAccountAdminClient = BillingAccountAdminClient.create()) {
   *
   *   BillingAccount response = billingAccountAdminClient.billingAccountsGet();
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi
  private final BillingAccount billingAccountsGet(BillingAccountsGetHttpRequest request) {
    return billingAccountsGetCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets information about a billing account. The current authenticated user
   * must be an [owner of the billing
   * account](https://support.google.com/cloud/answer/4430947).
   *
   * Sample code:
   * <pre><code>
   * try (BillingAccountAdminClient billingAccountAdminClient = BillingAccountAdminClient.create()) {
   *
   *   ApiFuture&lt;BillingAccount&gt; future = billingAccountAdminClient.billingAccountsGetCallable().futureCall();
   *   // Do something
   *   BillingAccount response = future.get();
   * }
   * </code></pre>
   */
  @BetaApi
  public final UnaryCallable<BillingAccountsGetHttpRequest, BillingAccount> billingAccountsGetCallable() {
    return stub.billingAccountsGetCallable();
  }

  @Override
  public final void close() throws Exception {
    stub.close();
  }

  @Override
  public void shutdown() {
    stub.shutdown();
  }

  @Override
  public boolean isShutdown() {
    return stub.isShutdown();
  }

  @Override
  public boolean isTerminated() {
    return stub.isTerminated();
  }

  @Override
  public void shutdownNow() {
    stub.shutdownNow();
  }

  @Override
  public boolean awaitTermination(long duration, TimeUnit unit) throws InterruptedException {
    return stub.awaitTermination(duration, unit);
  }

}
============== file: src/main/java/com/google/cloud/fakebilling/v1/BillingAccountAdminSettings.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.client.http.HttpStatusCodes;
import com.google.api.core.ApiFunction;
import com.google.api.core.ApiFuture;
import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.core.GoogleCredentialsProvider;
import com.google.api.gax.core.InstantiatingExecutorProvider;
import com.google.api.gax.core.PropertiesProvider;
import com.google.api.gax.grpc.GrpcTransport;
import com.google.api.gax.grpc.GrpcTransportProvider;
import com.google.api.gax.grpc.InstantiatingChannelProvider;
import com.google.api.gax.httpjson.HttpJsonStatusCode;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.ApiCallContext;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.ClientSettings;
import com.google.api.gax.rpc.PageContext;
import com.google.api.gax.rpc.PagedCallSettings;
import com.google.api.gax.rpc.PagedListDescriptor;
import com.google.api.gax.rpc.PagedListResponseFactory;
import com.google.api.gax.rpc.SimpleCallSettings;
import com.google.api.gax.rpc.StatusCode;
import com.google.api.gax.rpc.TransportProvider;
import com.google.api.gax.rpc.UnaryCallSettings;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.auth.Credentials;
import static com.google.cloud.fakebilling.v1.PagedResponseWrappers.BillingAccountsListPagedResponse;
import com.google.cloud.fakebilling.v1.stub.BillingAccountAdminStub;
import com.google.cloud.fakebilling.v1.stub.HttpBillingAccountAdminStub;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.ScheduledExecutorService;
import javax.annotation.Generated;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * Settings class to configure an instance of {@link BillingAccountAdminClient}.
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 * <li>The default service address () and default port (443)
 * are used.
 * <li>Credentials are acquired automatically through Application Default Credentials.
 * <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 *
 * <p>The builder of this class is recursive, so contained classes are themselves builders.
 * When build() is called, the tree of builders is called to create the complete settings
 * object. For example, to set the total timeout of billingAccountsGet to 30 seconds:
 *
 * <pre>
 * <code>
 * BillingAccountAdminSettings.Builder billingAccountAdminSettingsBuilder =
 *     BillingAccountAdminSettings.defaultBuilder();
 * billingAccountAdminSettingsBuilder.billingAccountsGetSettings().getRetrySettingsBuilder()
 *     .setTotalTimeout(Duration.ofSeconds(30));
 * BillingAccountAdminSettings billingAccountAdminSettings = billingAccountAdminSettingsBuilder.build();
 * </code>
 * </pre>
 */
@Generated("by GAPIC v0.0.5")
public class BillingAccountAdminSettings extends ClientSettings {
  /**
   * The default scopes of the service.
   */
  private static final ImmutableList<String> DEFAULT_SERVICE_SCOPES = ImmutableList.<String>builder()
      .add("https://www.googleapis.com/auth/cloud-platform")
      .build();

  private static final String DEFAULT_GAPIC_NAME = "gapic";
  private static final String DEFAULT_GAPIC_VERSION = "";

  private static final String PROPERTIES_FILE = "/com/google/cloud/fakebilling/project.properties";
  private static final String META_VERSION_KEY = "artifact.version";

  private static String gapicVersion;

  private final PagedCallSettings<BillingAccountsListHttpRequest, ListBillingAccountsResponse, BillingAccountsListPagedResponse> billingAccountsListSettings;
  private final SimpleCallSettings<BillingAccountsGetHttpRequest, BillingAccount> billingAccountsGetSettings;

  /**
   * Returns the object with the settings used for calls to billingAccountsList.
   */
  public PagedCallSettings<BillingAccountsListHttpRequest, ListBillingAccountsResponse, BillingAccountsListPagedResponse> billingAccountsListSettings() {
    return billingAccountsListSettings;
  }

  /**
   * Returns the object with the settings used for calls to billingAccountsGet.
   */
  public SimpleCallSettings<BillingAccountsGetHttpRequest, BillingAccount> billingAccountsGetSettings() {
    return billingAccountsGetSettings;
  }


  public BillingAccountAdminStub createStub() throws IOException {
    if (getTransportProvider().getTransportName().equals(GrpcTransport.getGrpcTransportName())) {
      return HttpBillingAccountAdminStub.create(this);
    } else {
      throw new UnsupportedOperationException(
          "Transport not supported: " + getTransportProvider().getTransportName());
    }
  }

  /**
   * Returns a builder for the default ExecutorProvider for this service.
   */
  public static InstantiatingExecutorProvider.Builder defaultExecutorProviderBuilder() {
    return InstantiatingExecutorProvider.newBuilder();
  }

  /**
   * Returns the default service endpoint.
   */
  public static String getDefaultEndpoint() {
    return ":443";
  }


  /**
   * Returns the default service scopes.
   */
  public static List<String> getDefaultServiceScopes() {
    return DEFAULT_SERVICE_SCOPES;
  }


  /**
   * Returns a builder for the default credentials for this service.
   */
  public static GoogleCredentialsProvider.Builder defaultCredentialsProviderBuilder() {
    return GoogleCredentialsProvider.newBuilder()
        .setScopesToApply(DEFAULT_SERVICE_SCOPES)
        ;
  }

  /** Returns a builder for the default ChannelProvider for this service. */
  public static InstantiatingChannelProvider.Builder defaultGrpcChannelProviderBuilder() {
    return InstantiatingChannelProvider.newBuilder()
        .setEndpoint(getDefaultEndpoint())
        .setGeneratorHeader(DEFAULT_GAPIC_NAME, getGapicVersion());
  }

  /** Returns a builder for the default ChannelProvider for this service. */
  public static GrpcTransportProvider.Builder defaultGrpcTransportProviderBuilder() {
    return GrpcTransportProvider.newBuilder()
        .setChannelProvider(defaultGrpcChannelProviderBuilder().build());
  }

  public static TransportProvider defaultTransportProvider() {
    return defaultGrpcTransportProviderBuilder().build();
  }

  private static String getGapicVersion() {
    if (gapicVersion == null) {
      gapicVersion = PropertiesProvider.loadProperty(
          BillingAccountAdminSettings.class, PROPERTIES_FILE, META_VERSION_KEY);
      gapicVersion = gapicVersion == null ? DEFAULT_GAPIC_VERSION : gapicVersion;
    }
    return gapicVersion;
  }

  /**
   * Returns a builder for this class with recommended defaults.
   */
  public static Builder defaultBuilder() {
    return Builder.createDefault();
  }

  /**
   * Returns a builder for this class with recommended defaults for API methods, and the given
   * ClientContext used for executor/transport/credentials.
   */
  public static Builder defaultBuilder(ClientContext clientContext) {
    return new Builder(clientContext);
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder(ClientContext clientContext) {
    return new Builder(clientContext);
  }

  /**
   * Returns a builder containing all the values of this settings class.
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  private BillingAccountAdminSettings(Builder settingsBuilder) throws IOException {
    super(
        settingsBuilder.getExecutorProvider(),
        settingsBuilder.getTransportProvider(),
        settingsBuilder.getCredentialsProvider(),
        settingsBuilder.getClock());

    billingAccountsListSettings = settingsBuilder.billingAccountsListSettings().build();
    billingAccountsGetSettings = settingsBuilder.billingAccountsGetSettings().build();
  }

  private static final PagedListDescriptor<BillingAccountsListHttpRequest, ListBillingAccountsResponse, BillingAccount> BILLING_ACCOUNTS_LIST_PAGE_STR_DESC =
      new PagedListDescriptor<BillingAccountsListHttpRequest, ListBillingAccountsResponse, BillingAccount>() {
        @Override
        public String emptyToken() {
          return "";
        }
        @Override
        public BillingAccountsListHttpRequest injectToken(BillingAccountsListHttpRequest payload, String token) {
          return BillingAccountsListHttpRequest
            .newBuilder(payload)
            .setPageToken(token)
            .build();
        }
        @Override
        public BillingAccountsListHttpRequest injectPageSize(BillingAccountsListHttpRequest payload, int pageSize) {
          return BillingAccountsListHttpRequest
            .newBuilder(payload)
            .setMaxResults(pageSize)
            .build();
        }
        @Override
        public Integer extractPageSize(BillingAccountsListHttpRequest payload) {
          return payload.getMaxResults();
        }
        @Override
        public String extractNextToken(ListBillingAccountsResponse payload) {
          return payload.getNextPageToken();
        }
        @Override
        public Iterable<BillingAccount> extractResources(ListBillingAccountsResponse payload) {
          return payload.getBillingAccounts();
        }
      };

  private static final PagedListResponseFactory<BillingAccountsListHttpRequest, ListBillingAccountsResponse, BillingAccountsListPagedResponse> BILLING_ACCOUNTS_LIST_PAGE_STR_FACT =
      new PagedListResponseFactory<BillingAccountsListHttpRequest, ListBillingAccountsResponse, BillingAccountsListPagedResponse>() {
        @Override
        public ApiFuture<BillingAccountsListPagedResponse> getFuturePagedResponse(
            UnaryCallable<BillingAccountsListHttpRequest, ListBillingAccountsResponse> callable,
            BillingAccountsListHttpRequest request,
            ApiCallContext context,
            ApiFuture<ListBillingAccountsResponse> futureResponse) {
          PageContext<BillingAccountsListHttpRequest, ListBillingAccountsResponse, BillingAccount> pageContext =
              PageContext.create(callable, BILLING_ACCOUNTS_LIST_PAGE_STR_DESC, request, context);
          return BillingAccountsListPagedResponse.createAsync(pageContext, futureResponse);
        }
      };


  /**
   * Builder for BillingAccountAdminSettings.
   */
  public static class Builder extends ClientSettings.Builder {
    private final ImmutableList<UnaryCallSettings.Builder> unaryMethodSettingsBuilders;

    private final PagedCallSettings.Builder<BillingAccountsListHttpRequest, ListBillingAccountsResponse, BillingAccountsListPagedResponse> billingAccountsListSettings;
    private final SimpleCallSettings.Builder<BillingAccountsGetHttpRequest, BillingAccount> billingAccountsGetSettings;

    private static final ImmutableMap<String, ImmutableSet<StatusCode>> RETRYABLE_CODE_DEFINITIONS;

    static {
      ImmutableMap.Builder<String, ImmutableSet<StatusCode>> definitions = ImmutableMap.builder();
      definitions.put(
          "idempotent",
          ImmutableSet.copyOf(Lists.<StatusCode>newArrayList(HttpJsonStatusCode.of(HttpStatusCodes.STATUS_CODE_SERVER_ERROR), HttpJsonStatusCode.of(HttpStatusCodes.STATUS_CODE_SERVICE_UNAVAILABLE))));
      RETRYABLE_CODE_DEFINITIONS = definitions.build();
    }

    private static final ImmutableMap<String, RetrySettings> RETRY_PARAM_DEFINITIONS;

    static {
      ImmutableMap.Builder<String, RetrySettings> definitions = ImmutableMap.builder();
      RetrySettings settings = null;
      settings = RetrySettings.newBuilder()
          .setInitialRetryDelay(Duration.ofMillis(100L))
          .setRetryDelayMultiplier(1.3)
          .setMaxRetryDelay(Duration.ofMillis(60000L))
          .setInitialRpcTimeout(Duration.ofMillis(60000L))
          .setRpcTimeoutMultiplier(1.0)
          .setMaxRpcTimeout(Duration.ofMillis(60000L))
          .setTotalTimeout(Duration.ofMillis(600000L))
          .build();
      definitions.put("default", settings);
      RETRY_PARAM_DEFINITIONS = definitions.build();
    }

    private Builder() {
      this((ClientContext) null);
    }

    private Builder(ClientContext clientContext) {
      super(clientContext);

      billingAccountsListSettings = PagedCallSettings.newBuilder(
          BILLING_ACCOUNTS_LIST_PAGE_STR_FACT);

      billingAccountsGetSettings = SimpleCallSettings.newBuilder();

      unaryMethodSettingsBuilders = ImmutableList.<UnaryCallSettings.Builder>of(
          billingAccountsListSettings,
          billingAccountsGetSettings
      );

      initDefaults(this);
    }

    private static Builder createDefault() {
      Builder builder = new Builder((ClientContext) null);
      builder.setTransportProvider(defaultTransportProvider());
      builder.setCredentialsProvider(defaultCredentialsProviderBuilder().build());
      return initDefaults(builder);
    }

    private static Builder initDefaults(Builder builder) {

      builder.billingAccountsListSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.billingAccountsGetSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      return builder;
    }

    private Builder(BillingAccountAdminSettings settings) {
      super(settings);

      billingAccountsListSettings = settings.billingAccountsListSettings.toBuilder();
      billingAccountsGetSettings = settings.billingAccountsGetSettings.toBuilder();

      unaryMethodSettingsBuilders = ImmutableList.<UnaryCallSettings.Builder>of(
          billingAccountsListSettings,
          billingAccountsGetSettings
      );
    }

    @Override
    public Builder setExecutorProvider(ExecutorProvider executorProvider) {
      super.setExecutorProvider(executorProvider);
      return this;
    }

    @Override
    public Builder setTransportProvider(TransportProvider transportProvider) {
      super.setTransportProvider(transportProvider);
      return this;
    }

    @Override
    public Builder setCredentialsProvider(CredentialsProvider credentialsProvider) {
      super.setCredentialsProvider(credentialsProvider);
      return this;
    }

    /**
     * Applies the given settings updater function to all of the unary API methods in this service.
     *
     * Note: This method does not support applying settings to streaming methods.
     */
    public Builder applyToAllUnaryMethods(ApiFunction<UnaryCallSettings.Builder, Void> settingsUpdater) throws Exception {
      super.applyToAllUnaryMethods(unaryMethodSettingsBuilders, settingsUpdater);
      return this;
    }

    /**
     * Returns the builder for the settings used for calls to billingAccountsList.
     */
    public PagedCallSettings.Builder<BillingAccountsListHttpRequest, ListBillingAccountsResponse, BillingAccountsListPagedResponse> billingAccountsListSettings() {
      return billingAccountsListSettings;
    }

    /**
     * Returns the builder for the settings used for calls to billingAccountsGet.
     */
    public SimpleCallSettings.Builder<BillingAccountsGetHttpRequest, BillingAccount> billingAccountsGetSettings() {
      return billingAccountsGetSettings;
    }

    @Override
    public BillingAccountAdminSettings build() throws IOException {
      return new BillingAccountAdminSettings(this);
    }
  }
}
============== file: src/main/java/com/google/cloud/fakebilling/v1/stub/BillingAccountAdminStub.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1.stub;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.cloud.fakebilling.v1.BillingAccount;
import com.google.cloud.fakebilling.v1.BillingAccountsGetHttpRequest;
import com.google.cloud.fakebilling.v1.BillingAccountsListHttpRequest;
import com.google.cloud.fakebilling.v1.ListBillingAccountsResponse;
import static com.google.cloud.fakebilling.v1.PagedResponseWrappers.BillingAccountsListPagedResponse;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * Base stub class for fakebilling.
 *
 * <p>This class is for advanced usage and reflects the underlying API directly.
 */
@Generated("by GAPIC v0.0.5")
public abstract class BillingAccountAdminStub implements BackgroundResource {


  @BetaApi
  public UnaryCallable<BillingAccountsListHttpRequest, BillingAccountsListPagedResponse> billingAccountsListPagedCallable() {
    throw new UnsupportedOperationException("Not implemented: billingAccountsListPagedCallable()");
  }

  @BetaApi
  public UnaryCallable<BillingAccountsListHttpRequest, ListBillingAccountsResponse> billingAccountsListCallable() {
    throw new UnsupportedOperationException("Not implemented: billingAccountsListCallable()");
  }

  @BetaApi
  public UnaryCallable<BillingAccountsGetHttpRequest, BillingAccount> billingAccountsGetCallable() {
    throw new UnsupportedOperationException("Not implemented: billingAccountsGetCallable()");
  }

}
============== file: src/main/java/com/google/cloud/fakebilling/v1/stub/HttpBillingAccountAdminStub.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1.stub;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.core.BackgroundResourceAggregation;
import com.google.api.gax.httpjson.HttpJsonCallableFactory;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.cloud.fakebilling.v1.BillingAccount;
import com.google.cloud.fakebilling.v1.BillingAccountAdminSettings;
import com.google.cloud.fakebilling.v1.BillingAccountsGetHttpRequest;
import com.google.cloud.fakebilling.v1.BillingAccountsListHttpRequest;
import com.google.cloud.fakebilling.v1.ListBillingAccountsResponse;
import static com.google.cloud.fakebilling.v1.PagedResponseWrappers.BillingAccountsListPagedResponse;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * HTTP stub implementation for fakebilling.
 *
 * <p>This class is for advanced usage and reflects the underlying API directly.
 */
@Generated("by GAPIC v0.0.5")
public class HttpBillingAccountAdminStub extends BillingAccountAdminStub {
  private static final UnaryCallable<BillingAccountsListHttpRequest, ListBillingAccountsResponse> directBillingAccountsListCallable =
      HttpJsonCallableFactory.createDirectCallable(
          io.grpc.MethodDescriptor.create(
              io.grpc.MethodDescriptor.MethodType.UNARY,
              "google.fakebilling.v1.BillingAccounts/billingAccountsList",
              io.grpc.protobuf.ProtoUtils.marshaller(BillingAccountsListHttpRequest.getDefaultInstance()),
              io.grpc.protobuf.ProtoUtils.marshaller(ListBillingAccountsResponse.getDefaultInstance())));
  private static final UnaryCallable<BillingAccountsGetHttpRequest, BillingAccount> directBillingAccountsGetCallable =
      HttpJsonCallableFactory.createDirectCallable(
          io.grpc.MethodDescriptor.create(
              io.grpc.MethodDescriptor.MethodType.UNARY,
              "google.fakebilling.v1.BillingAccounts/billingAccountsGet",
              io.grpc.protobuf.ProtoUtils.marshaller(BillingAccountsGetHttpRequest.getDefaultInstance()),
              io.grpc.protobuf.ProtoUtils.marshaller(BillingAccount.getDefaultInstance())));

  private final BackgroundResource backgroundResources;

  private final UnaryCallable<BillingAccountsListHttpRequest, ListBillingAccountsResponse> billingAccountsListCallable;
  private final UnaryCallable<BillingAccountsListHttpRequest, BillingAccountsListPagedResponse> billingAccountsListPagedCallable;
  private final UnaryCallable<BillingAccountsGetHttpRequest, BillingAccount> billingAccountsGetCallable;

  public static final HttpBillingAccountAdminStub create(BillingAccountAdminSettings settings) throws IOException {
    return new HttpBillingAccountAdminStub(settings, ClientContext.create(settings));
  }

  public static final HttpBillingAccountAdminStub create(ClientContext clientContext) throws IOException {
    return new HttpBillingAccountAdminStub(BillingAccountAdminSettings.defaultBuilder().build(), clientContext);
  }

  /**
   * Constructs an instance of HttpBillingAccountAdminStub, using the given settings.
   * This is protected so that it is easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected HttpBillingAccountAdminStub(BillingAccountAdminSettings settings, ClientContext clientContext) throws IOException {

    this.billingAccountsListCallable = HttpJsonCallableFactory.create(directBillingAccountsListCallable,settings.billingAccountsListSettings(), clientContext);
    this.billingAccountsListPagedCallable =
        HttpJsonCallableFactory.createPagedVariant(directBillingAccountsListCallable,settings.billingAccountsListSettings(), clientContext);
    this.billingAccountsGetCallable = HttpJsonCallableFactory.create(directBillingAccountsGetCallable,settings.billingAccountsGetSettings(), clientContext);

    backgroundResources = new BackgroundResourceAggregation(clientContext.getBackgroundResources());
  }


  @BetaApi
  public UnaryCallable<BillingAccountsListHttpRequest, BillingAccountsListPagedResponse> billingAccountsListPagedCallable() {
    return billingAccountsListPagedCallable;
  }

  @BetaApi
  public UnaryCallable<BillingAccountsListHttpRequest, ListBillingAccountsResponse> billingAccountsListCallable() {
    return billingAccountsListCallable;
  }

  @BetaApi
  public UnaryCallable<BillingAccountsGetHttpRequest, BillingAccount> billingAccountsGetCallable() {
    return billingAccountsGetCallable;
  }

  @Override
  public final void close() throws Exception {
    shutdown();
  }

  @Override
  public void shutdown() {
    backgroundResources.shutdown();
  }

  @Override
  public boolean isShutdown() {
    return backgroundResources.isShutdown();
  }

  @Override
  public boolean isTerminated() {
    return backgroundResources.isTerminated();
  }

  @Override
  public void shutdownNow() {
    backgroundResources.shutdownNow();
  }

  @Override
  public boolean awaitTermination(long duration, TimeUnit unit) throws InterruptedException {
    return backgroundResources.awaitTermination(duration, unit);
  }

}
============== file: src/main/java/com/google/cloud/fakebilling/v1/ProjectAdminClient.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.api.pathtemplate.PathTemplate;
import com.google.cloud.fakebilling.v1.stub.ProjectAdminStub;
import java.io.Closeable;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND SERVICE
/**
 * Service Description: Test Discovery doc.
 *
 * Configure billing projects.
 *
 * <p>This class provides the ability to make remote calls to the backing service through method
 * calls that map to API methods. Sample code to get started:
 *
 * <pre>
 * <code>
 * try (ProjectAdminClient projectAdminClient = ProjectAdminClient.create()) {
 *
 *   ProjectBillingInfo response = projectAdminClient.projectsUpdateBillingInfo();
 * }
 * </code>
 * </pre>
 *
 * <p>Note: close() needs to be called on the projectAdminClient object to clean up resources such
 * as threads. In the example above, try-with-resources is used, which automatically calls
 * close().
 *
 * <p>The surface of this class includes several types of Java methods for each of the API's methods:
 *
 * <ol>
 * <li> A "flattened" method. With this type of method, the fields of the request type have been
 * converted into function parameters. It may be the case that not all fields are available
 * as parameters, and not every API method will have a flattened method entry point.
 * <li> A "request object" method. This type of method only takes one parameter, a request
 * object, which must be constructed before the call. Not every API method will have a request
 * object method.
 * <li> A "callable" method. This type of method takes no parameters and returns an immutable
 * API callable object, which can be used to initiate calls to the service.
 * </ol>
 *
 * <p>See the individual methods for example code.
 *
 * <p>Many parameters require resource names to be formatted in a particular way. To assist
 * with these names, this class includes a format method for each type of name, and additionally
 * a parse method to extract the individual identifiers contained within names that are
 * returned.
 *
 * <p>This class can be customized by passing in a custom instance of ProjectAdminSettings to
 * create(). For example:
 *
 * <pre>
 * <code>
 * ProjectAdminSettings projectAdminSettings =
 *     ProjectAdminSettings.defaultBuilder()
 *         .setCredentialsProvider(FixedCredentialsProvider.create(myCredentials))
 *         .build();
 * ProjectAdminClient projectAdminClient =
 *     ProjectAdminClient.create(projectAdminSettings);
 * </code>
 * </pre>
 */
@Generated("by GAPIC v0.0.5")
public class ProjectAdminClient implements BackgroundResource {
  private final ProjectAdminSettings settings;
  private final ProjectAdminStub stub;

  private static final PathTemplate PROJECT_PATH_TEMPLATE =
      PathTemplate.createWithoutUrlEncoding("projects/{project}");

  /**
   * Formats a string containing the fully-qualified path to represent
   * a project resource.
   */
  public static final String formatProjectName(String project) {
    return PROJECT_PATH_TEMPLATE.instantiate(
        "project", project);
  }

  /**
   * Parses the project from the given fully-qualified path which
   * represents a project resource.
   */
  public static final String parseProjectFromProjectName(String projectName) {
    return PROJECT_PATH_TEMPLATE.parse(projectName).get("project");
  }

  /**
   * Constructs an instance of ProjectAdminClient with default settings.
   */
  public static final ProjectAdminClient create() throws IOException {
    return create(ProjectAdminSettings.defaultBuilder().build());
  }

  /**
   * Constructs an instance of ProjectAdminClient, using the given settings.
   * The channels are created based on the settings passed in, or defaults for any
   * settings that are not set.
   */
  public static final ProjectAdminClient create(ProjectAdminSettings settings) throws IOException {
    return new ProjectAdminClient(settings);
  }

  /**
   * Constructs an instance of ProjectAdminClient, using the given stub for making calls. This is for
   * advanced usage - prefer to use ProjectAdminSettings}.
   */
  public static final ProjectAdminClient create(ProjectAdminStub stub) {
    return new ProjectAdminClient(stub);
  }

  /**
   * Constructs an instance of ProjectAdminClient, using the given settings.
   * This is protected so that it is easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected ProjectAdminClient(ProjectAdminSettings settings) throws IOException {
    this.settings = settings;
    this.stub = settings.createStub();
  }

  protected ProjectAdminClient(ProjectAdminStub stub) {
    this.settings = null;
    this.stub = stub;
  }

  public final ProjectAdminSettings getSettings() {
    return settings;
  }

  public ProjectAdminStub getStub() {
    return stub;
  }


  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Sets or updates the billing account associated with a project. You specify
   * the new billing account by setting the `billing_account_name` in the
   * `ProjectBillingInfo` resource to the resource name of a billing account.
   * Associating a project with an open billing account enables billing on the
   * project and allows charges for resource usage. If the project already had a
   * billing account, this method changes the billing account used for resource
   * usage charges.
   *
   * &#42;Note:&#42; Incurred charges that have not yet been reported in the transaction
   * history of the Google Cloud Console may be billed to the new billing
   * account, even if the charge occurred before the new billing account was
   * assigned to the project.
   *
   * The current authenticated user must have ownership privileges for both the
   * [project](https://cloud.google.com/docs/permissions-overview#h.bgs0oxofvnoo
   * ) and the [billing
   * account](https://support.google.com/cloud/answer/4430947).
   *
   * You can disable billing on the project by setting the
   * `billing_account_name` field to empty. This action disassociates the
   * current billing account from the project. Any billable activity of your
   * in-use services will stop, and your application could stop functioning as
   * expected. Any unbilled charges to date will be billed to the previously
   * associated account. The current authenticated user must be either an owner
   * of the project or an owner of the billing account for the project.
   *
   * Note that associating a project with a &#42;closed&#42; billing account will have
   * much the same effect as disabling billing on the project: any paid
   * resources used by the project will be shut down. Thus, unless you wish to
   * disable billing, you should always call this method with the name of an
   * &#42;open&#42; billing account.
   *
   * Sample code:
   * <pre><code>
   * try (ProjectAdminClient projectAdminClient = ProjectAdminClient.create()) {
   *
   *   ProjectBillingInfo response = projectAdminClient.projectsUpdateBillingInfo();
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi
  public final ProjectBillingInfo projectsUpdateBillingInfo(ProjectsUpdateBillingInfoHttpRequest request) {
    return projectsUpdateBillingInfoCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Sets or updates the billing account associated with a project. You specify
   * the new billing account by setting the `billing_account_name` in the
   * `ProjectBillingInfo` resource to the resource name of a billing account.
   * Associating a project with an open billing account enables billing on the
   * project and allows charges for resource usage. If the project already had a
   * billing account, this method changes the billing account used for resource
   * usage charges.
   *
   * &#42;Note:&#42; Incurred charges that have not yet been reported in the transaction
   * history of the Google Cloud Console may be billed to the new billing
   * account, even if the charge occurred before the new billing account was
   * assigned to the project.
   *
   * The current authenticated user must have ownership privileges for both the
   * [project](https://cloud.google.com/docs/permissions-overview#h.bgs0oxofvnoo
   * ) and the [billing
   * account](https://support.google.com/cloud/answer/4430947).
   *
   * You can disable billing on the project by setting the
   * `billing_account_name` field to empty. This action disassociates the
   * current billing account from the project. Any billable activity of your
   * in-use services will stop, and your application could stop functioning as
   * expected. Any unbilled charges to date will be billed to the previously
   * associated account. The current authenticated user must be either an owner
   * of the project or an owner of the billing account for the project.
   *
   * Note that associating a project with a &#42;closed&#42; billing account will have
   * much the same effect as disabling billing on the project: any paid
   * resources used by the project will be shut down. Thus, unless you wish to
   * disable billing, you should always call this method with the name of an
   * &#42;open&#42; billing account.
   *
   * Sample code:
   * <pre><code>
   * try (ProjectAdminClient projectAdminClient = ProjectAdminClient.create()) {
   *
   *   ApiFuture&lt;ProjectBillingInfo&gt; future = projectAdminClient.projectsUpdateBillingInfoCallable().futureCall();
   *   // Do something
   *   ProjectBillingInfo response = future.get();
   * }
   * </code></pre>
   */
  @BetaApi
  public final UnaryCallable<ProjectsUpdateBillingInfoHttpRequest, ProjectBillingInfo> projectsUpdateBillingInfoCallable() {
    return stub.projectsUpdateBillingInfoCallable();
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets the billing information for a project. The current authenticated user
   * must have [permission to view the
   * project](https://cloud.google.com/docs/permissions-overview#h.bgs0oxofvnoo
   * ).
   *
   * Sample code:
   * <pre><code>
   * try (ProjectAdminClient projectAdminClient = ProjectAdminClient.create()) {
   *
   *   ProjectBillingInfo response = projectAdminClient.projectsGetBillingInfo();
   * }
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   * @throws com.google.api.gax.rpc.ApiException if the remote call fails
   */
  @BetaApi
  public final ProjectBillingInfo projectsGetBillingInfo(ProjectsGetBillingInfoHttpRequest request) {
    return projectsGetBillingInfoCallable().call(request);
  }

  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
   * Gets the billing information for a project. The current authenticated user
   * must have [permission to view the
   * project](https://cloud.google.com/docs/permissions-overview#h.bgs0oxofvnoo
   * ).
   *
   * Sample code:
   * <pre><code>
   * try (ProjectAdminClient projectAdminClient = ProjectAdminClient.create()) {
   *
   *   ApiFuture&lt;ProjectBillingInfo&gt; future = projectAdminClient.projectsGetBillingInfoCallable().futureCall();
   *   // Do something
   *   ProjectBillingInfo response = future.get();
   * }
   * </code></pre>
   */
  @BetaApi
  public final UnaryCallable<ProjectsGetBillingInfoHttpRequest, ProjectBillingInfo> projectsGetBillingInfoCallable() {
    return stub.projectsGetBillingInfoCallable();
  }

  @Override
  public final void close() throws Exception {
    stub.close();
  }

  @Override
  public void shutdown() {
    stub.shutdown();
  }

  @Override
  public boolean isShutdown() {
    return stub.isShutdown();
  }

  @Override
  public boolean isTerminated() {
    return stub.isTerminated();
  }

  @Override
  public void shutdownNow() {
    stub.shutdownNow();
  }

  @Override
  public boolean awaitTermination(long duration, TimeUnit unit) throws InterruptedException {
    return stub.awaitTermination(duration, unit);
  }

}
============== file: src/main/java/com/google/cloud/fakebilling/v1/ProjectAdminSettings.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.client.http.HttpStatusCodes;
import com.google.api.core.ApiFunction;
import com.google.api.core.BetaApi;
import com.google.api.gax.core.CredentialsProvider;
import com.google.api.gax.core.ExecutorProvider;
import com.google.api.gax.core.GoogleCredentialsProvider;
import com.google.api.gax.core.InstantiatingExecutorProvider;
import com.google.api.gax.core.PropertiesProvider;
import com.google.api.gax.grpc.GrpcTransport;
import com.google.api.gax.grpc.GrpcTransportProvider;
import com.google.api.gax.grpc.InstantiatingChannelProvider;
import com.google.api.gax.httpjson.HttpJsonStatusCode;
import com.google.api.gax.retrying.RetrySettings;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.ClientSettings;
import com.google.api.gax.rpc.SimpleCallSettings;
import com.google.api.gax.rpc.StatusCode;
import com.google.api.gax.rpc.TransportProvider;
import com.google.api.gax.rpc.UnaryCallSettings;
import com.google.auth.Credentials;
import com.google.cloud.fakebilling.v1.stub.HttpProjectAdminStub;
import com.google.cloud.fakebilling.v1.stub.ProjectAdminStub;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.ScheduledExecutorService;
import javax.annotation.Generated;
import org.threeten.bp.Duration;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * Settings class to configure an instance of {@link ProjectAdminClient}.
 *
 * <p>The default instance has everything set to sensible defaults:
 *
 * <ul>
 * <li>The default service address () and default port (443)
 * are used.
 * <li>Credentials are acquired automatically through Application Default Credentials.
 * <li>Retries are configured for idempotent methods but not for non-idempotent methods.
 * </ul>
 *
 * <p>The builder of this class is recursive, so contained classes are themselves builders.
 * When build() is called, the tree of builders is called to create the complete settings
 * object. For example, to set the total timeout of projectsUpdateBillingInfo to 30 seconds:
 *
 * <pre>
 * <code>
 * ProjectAdminSettings.Builder projectAdminSettingsBuilder =
 *     ProjectAdminSettings.defaultBuilder();
 * projectAdminSettingsBuilder.projectsUpdateBillingInfoSettings().getRetrySettingsBuilder()
 *     .setTotalTimeout(Duration.ofSeconds(30));
 * ProjectAdminSettings projectAdminSettings = projectAdminSettingsBuilder.build();
 * </code>
 * </pre>
 */
@Generated("by GAPIC v0.0.5")
public class ProjectAdminSettings extends ClientSettings {
  /**
   * The default scopes of the service.
   */
  private static final ImmutableList<String> DEFAULT_SERVICE_SCOPES = ImmutableList.<String>builder()
      .add("https://www.googleapis.com/auth/cloud-platform")
      .build();

  private static final String DEFAULT_GAPIC_NAME = "gapic";
  private static final String DEFAULT_GAPIC_VERSION = "";

  private static final String PROPERTIES_FILE = "/com/google/cloud/fakebilling/project.properties";
  private static final String META_VERSION_KEY = "artifact.version";

  private static String gapicVersion;

  private final SimpleCallSettings<ProjectsUpdateBillingInfoHttpRequest, ProjectBillingInfo> projectsUpdateBillingInfoSettings;
  private final SimpleCallSettings<ProjectsGetBillingInfoHttpRequest, ProjectBillingInfo> projectsGetBillingInfoSettings;

  /**
   * Returns the object with the settings used for calls to projectsUpdateBillingInfo.
   */
  public SimpleCallSettings<ProjectsUpdateBillingInfoHttpRequest, ProjectBillingInfo> projectsUpdateBillingInfoSettings() {
    return projectsUpdateBillingInfoSettings;
  }

  /**
   * Returns the object with the settings used for calls to projectsGetBillingInfo.
   */
  public SimpleCallSettings<ProjectsGetBillingInfoHttpRequest, ProjectBillingInfo> projectsGetBillingInfoSettings() {
    return projectsGetBillingInfoSettings;
  }


  public ProjectAdminStub createStub() throws IOException {
    if (getTransportProvider().getTransportName().equals(GrpcTransport.getGrpcTransportName())) {
      return HttpProjectAdminStub.create(this);
    } else {
      throw new UnsupportedOperationException(
          "Transport not supported: " + getTransportProvider().getTransportName());
    }
  }

  /**
   * Returns a builder for the default ExecutorProvider for this service.
   */
  public static InstantiatingExecutorProvider.Builder defaultExecutorProviderBuilder() {
    return InstantiatingExecutorProvider.newBuilder();
  }

  /**
   * Returns the default service endpoint.
   */
  public static String getDefaultEndpoint() {
    return ":443";
  }


  /**
   * Returns the default service scopes.
   */
  public static List<String> getDefaultServiceScopes() {
    return DEFAULT_SERVICE_SCOPES;
  }


  /**
   * Returns a builder for the default credentials for this service.
   */
  public static GoogleCredentialsProvider.Builder defaultCredentialsProviderBuilder() {
    return GoogleCredentialsProvider.newBuilder()
        .setScopesToApply(DEFAULT_SERVICE_SCOPES)
        ;
  }

  /** Returns a builder for the default ChannelProvider for this service. */
  public static InstantiatingChannelProvider.Builder defaultGrpcChannelProviderBuilder() {
    return InstantiatingChannelProvider.newBuilder()
        .setEndpoint(getDefaultEndpoint())
        .setGeneratorHeader(DEFAULT_GAPIC_NAME, getGapicVersion());
  }

  /** Returns a builder for the default ChannelProvider for this service. */
  public static GrpcTransportProvider.Builder defaultGrpcTransportProviderBuilder() {
    return GrpcTransportProvider.newBuilder()
        .setChannelProvider(defaultGrpcChannelProviderBuilder().build());
  }

  public static TransportProvider defaultTransportProvider() {
    return defaultGrpcTransportProviderBuilder().build();
  }

  private static String getGapicVersion() {
    if (gapicVersion == null) {
      gapicVersion = PropertiesProvider.loadProperty(
          ProjectAdminSettings.class, PROPERTIES_FILE, META_VERSION_KEY);
      gapicVersion = gapicVersion == null ? DEFAULT_GAPIC_VERSION : gapicVersion;
    }
    return gapicVersion;
  }

  /**
   * Returns a builder for this class with recommended defaults.
   */
  public static Builder defaultBuilder() {
    return Builder.createDefault();
  }

  /**
   * Returns a builder for this class with recommended defaults for API methods, and the given
   * ClientContext used for executor/transport/credentials.
   */
  public static Builder defaultBuilder(ClientContext clientContext) {
    return new Builder(clientContext);
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder(ClientContext clientContext) {
    return new Builder(clientContext);
  }

  /**
   * Returns a builder containing all the values of this settings class.
   */
  public Builder toBuilder() {
    return new Builder(this);
  }

  private ProjectAdminSettings(Builder settingsBuilder) throws IOException {
    super(
        settingsBuilder.getExecutorProvider(),
        settingsBuilder.getTransportProvider(),
        settingsBuilder.getCredentialsProvider(),
        settingsBuilder.getClock());

    projectsUpdateBillingInfoSettings = settingsBuilder.projectsUpdateBillingInfoSettings().build();
    projectsGetBillingInfoSettings = settingsBuilder.projectsGetBillingInfoSettings().build();
  }




  /**
   * Builder for ProjectAdminSettings.
   */
  public static class Builder extends ClientSettings.Builder {
    private final ImmutableList<UnaryCallSettings.Builder> unaryMethodSettingsBuilders;

    private final SimpleCallSettings.Builder<ProjectsUpdateBillingInfoHttpRequest, ProjectBillingInfo> projectsUpdateBillingInfoSettings;
    private final SimpleCallSettings.Builder<ProjectsGetBillingInfoHttpRequest, ProjectBillingInfo> projectsGetBillingInfoSettings;

    private static final ImmutableMap<String, ImmutableSet<StatusCode>> RETRYABLE_CODE_DEFINITIONS;

    static {
      ImmutableMap.Builder<String, ImmutableSet<StatusCode>> definitions = ImmutableMap.builder();
      definitions.put(
          "idempotent",
          ImmutableSet.copyOf(Lists.<StatusCode>newArrayList(HttpJsonStatusCode.of(HttpStatusCodes.STATUS_CODE_SERVER_ERROR), HttpJsonStatusCode.of(HttpStatusCodes.STATUS_CODE_SERVICE_UNAVAILABLE))));
      RETRYABLE_CODE_DEFINITIONS = definitions.build();
    }

    private static final ImmutableMap<String, RetrySettings> RETRY_PARAM_DEFINITIONS;

    static {
      ImmutableMap.Builder<String, RetrySettings> definitions = ImmutableMap.builder();
      RetrySettings settings = null;
      settings = RetrySettings.newBuilder()
          .setInitialRetryDelay(Duration.ofMillis(100L))
          .setRetryDelayMultiplier(1.3)
          .setMaxRetryDelay(Duration.ofMillis(60000L))
          .setInitialRpcTimeout(Duration.ofMillis(60000L))
          .setRpcTimeoutMultiplier(1.0)
          .setMaxRpcTimeout(Duration.ofMillis(60000L))
          .setTotalTimeout(Duration.ofMillis(600000L))
          .build();
      definitions.put("default", settings);
      RETRY_PARAM_DEFINITIONS = definitions.build();
    }

    private Builder() {
      this((ClientContext) null);
    }

    private Builder(ClientContext clientContext) {
      super(clientContext);

      projectsUpdateBillingInfoSettings = SimpleCallSettings.newBuilder();

      projectsGetBillingInfoSettings = SimpleCallSettings.newBuilder();

      unaryMethodSettingsBuilders = ImmutableList.<UnaryCallSettings.Builder>of(
          projectsUpdateBillingInfoSettings,
          projectsGetBillingInfoSettings
      );

      initDefaults(this);
    }

    private static Builder createDefault() {
      Builder builder = new Builder((ClientContext) null);
      builder.setTransportProvider(defaultTransportProvider());
      builder.setCredentialsProvider(defaultCredentialsProviderBuilder().build());
      return initDefaults(builder);
    }

    private static Builder initDefaults(Builder builder) {

      builder.projectsUpdateBillingInfoSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      builder.projectsGetBillingInfoSettings()
          .setRetryableCodes(RETRYABLE_CODE_DEFINITIONS.get("idempotent"))
          .setRetrySettings(RETRY_PARAM_DEFINITIONS.get("default"));

      return builder;
    }

    private Builder(ProjectAdminSettings settings) {
      super(settings);

      projectsUpdateBillingInfoSettings = settings.projectsUpdateBillingInfoSettings.toBuilder();
      projectsGetBillingInfoSettings = settings.projectsGetBillingInfoSettings.toBuilder();

      unaryMethodSettingsBuilders = ImmutableList.<UnaryCallSettings.Builder>of(
          projectsUpdateBillingInfoSettings,
          projectsGetBillingInfoSettings
      );
    }

    @Override
    public Builder setExecutorProvider(ExecutorProvider executorProvider) {
      super.setExecutorProvider(executorProvider);
      return this;
    }

    @Override
    public Builder setTransportProvider(TransportProvider transportProvider) {
      super.setTransportProvider(transportProvider);
      return this;
    }

    @Override
    public Builder setCredentialsProvider(CredentialsProvider credentialsProvider) {
      super.setCredentialsProvider(credentialsProvider);
      return this;
    }

    /**
     * Applies the given settings updater function to all of the unary API methods in this service.
     *
     * Note: This method does not support applying settings to streaming methods.
     */
    public Builder applyToAllUnaryMethods(ApiFunction<UnaryCallSettings.Builder, Void> settingsUpdater) throws Exception {
      super.applyToAllUnaryMethods(unaryMethodSettingsBuilders, settingsUpdater);
      return this;
    }

    /**
     * Returns the builder for the settings used for calls to projectsUpdateBillingInfo.
     */
    public SimpleCallSettings.Builder<ProjectsUpdateBillingInfoHttpRequest, ProjectBillingInfo> projectsUpdateBillingInfoSettings() {
      return projectsUpdateBillingInfoSettings;
    }

    /**
     * Returns the builder for the settings used for calls to projectsGetBillingInfo.
     */
    public SimpleCallSettings.Builder<ProjectsGetBillingInfoHttpRequest, ProjectBillingInfo> projectsGetBillingInfoSettings() {
      return projectsGetBillingInfoSettings;
    }

    @Override
    public ProjectAdminSettings build() throws IOException {
      return new ProjectAdminSettings(this);
    }
  }
}
============== file: src/main/java/com/google/cloud/fakebilling/v1/stub/ProjectAdminStub.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1.stub;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.cloud.fakebilling.v1.ProjectBillingInfo;
import com.google.cloud.fakebilling.v1.ProjectsGetBillingInfoHttpRequest;
import com.google.cloud.fakebilling.v1.ProjectsUpdateBillingInfoHttpRequest;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * Base stub class for fakebilling.
 *
 * <p>This class is for advanced usage and reflects the underlying API directly.
 */
@Generated("by GAPIC v0.0.5")
public abstract class ProjectAdminStub implements BackgroundResource {


  @BetaApi
  public UnaryCallable<ProjectsUpdateBillingInfoHttpRequest, ProjectBillingInfo> projectsUpdateBillingInfoCallable() {
    throw new UnsupportedOperationException("Not implemented: projectsUpdateBillingInfoCallable()");
  }

  @BetaApi
  public UnaryCallable<ProjectsGetBillingInfoHttpRequest, ProjectBillingInfo> projectsGetBillingInfoCallable() {
    throw new UnsupportedOperationException("Not implemented: projectsGetBillingInfoCallable()");
  }

}
============== file: src/main/java/com/google/cloud/fakebilling/v1/stub/HttpProjectAdminStub.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1.stub;

import com.google.api.core.BetaApi;
import com.google.api.gax.core.BackgroundResource;
import com.google.api.gax.core.BackgroundResourceAggregation;
import com.google.api.gax.httpjson.HttpJsonCallableFactory;
import com.google.api.gax.rpc.ClientContext;
import com.google.api.gax.rpc.UnaryCallable;
import com.google.cloud.fakebilling.v1.ProjectAdminSettings;
import com.google.cloud.fakebilling.v1.ProjectBillingInfo;
import com.google.cloud.fakebilling.v1.ProjectsGetBillingInfoHttpRequest;
import com.google.cloud.fakebilling.v1.ProjectsUpdateBillingInfoHttpRequest;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * HTTP stub implementation for fakebilling.
 *
 * <p>This class is for advanced usage and reflects the underlying API directly.
 */
@Generated("by GAPIC v0.0.5")
public class HttpProjectAdminStub extends ProjectAdminStub {
  private static final UnaryCallable<ProjectsUpdateBillingInfoHttpRequest, ProjectBillingInfo> directProjectsUpdateBillingInfoCallable =
      HttpJsonCallableFactory.createDirectCallable(
          io.grpc.MethodDescriptor.create(
              io.grpc.MethodDescriptor.MethodType.UNARY,
              "google.fakebilling.v1.Projects/projectsUpdateBillingInfo",
              io.grpc.protobuf.ProtoUtils.marshaller(ProjectsUpdateBillingInfoHttpRequest.getDefaultInstance()),
              io.grpc.protobuf.ProtoUtils.marshaller(ProjectBillingInfo.getDefaultInstance())));
  private static final UnaryCallable<ProjectsGetBillingInfoHttpRequest, ProjectBillingInfo> directProjectsGetBillingInfoCallable =
      HttpJsonCallableFactory.createDirectCallable(
          io.grpc.MethodDescriptor.create(
              io.grpc.MethodDescriptor.MethodType.UNARY,
              "google.fakebilling.v1.Projects/projectsGetBillingInfo",
              io.grpc.protobuf.ProtoUtils.marshaller(ProjectsGetBillingInfoHttpRequest.getDefaultInstance()),
              io.grpc.protobuf.ProtoUtils.marshaller(ProjectBillingInfo.getDefaultInstance())));

  private final BackgroundResource backgroundResources;

  private final UnaryCallable<ProjectsUpdateBillingInfoHttpRequest, ProjectBillingInfo> projectsUpdateBillingInfoCallable;
  private final UnaryCallable<ProjectsGetBillingInfoHttpRequest, ProjectBillingInfo> projectsGetBillingInfoCallable;

  public static final HttpProjectAdminStub create(ProjectAdminSettings settings) throws IOException {
    return new HttpProjectAdminStub(settings, ClientContext.create(settings));
  }

  public static final HttpProjectAdminStub create(ClientContext clientContext) throws IOException {
    return new HttpProjectAdminStub(ProjectAdminSettings.defaultBuilder().build(), clientContext);
  }

  /**
   * Constructs an instance of HttpProjectAdminStub, using the given settings.
   * This is protected so that it is easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected HttpProjectAdminStub(ProjectAdminSettings settings, ClientContext clientContext) throws IOException {

    this.projectsUpdateBillingInfoCallable = HttpJsonCallableFactory.create(directProjectsUpdateBillingInfoCallable,settings.projectsUpdateBillingInfoSettings(), clientContext);
    this.projectsGetBillingInfoCallable = HttpJsonCallableFactory.create(directProjectsGetBillingInfoCallable,settings.projectsGetBillingInfoSettings(), clientContext);

    backgroundResources = new BackgroundResourceAggregation(clientContext.getBackgroundResources());
  }


  @BetaApi
  public UnaryCallable<ProjectsUpdateBillingInfoHttpRequest, ProjectBillingInfo> projectsUpdateBillingInfoCallable() {
    return projectsUpdateBillingInfoCallable;
  }

  @BetaApi
  public UnaryCallable<ProjectsGetBillingInfoHttpRequest, ProjectBillingInfo> projectsGetBillingInfoCallable() {
    return projectsGetBillingInfoCallable;
  }

  @Override
  public final void close() throws Exception {
    shutdown();
  }

  @Override
  public void shutdown() {
    backgroundResources.shutdown();
  }

  @Override
  public boolean isShutdown() {
    return backgroundResources.isShutdown();
  }

  @Override
  public boolean isTerminated() {
    return backgroundResources.isTerminated();
  }

  @Override
  public void shutdownNow() {
    backgroundResources.shutdownNow();
  }

  @Override
  public boolean awaitTermination(long duration, TimeUnit unit) throws InterruptedException {
    return backgroundResources.awaitTermination(duration, unit);
  }

}
============== file: src/main/java/com/google/cloud/fakebilling/v1/PagedResponseWrappers.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.cloud.fakebilling.v1;

import com.google.api.core.ApiFunction;
import com.google.api.core.ApiFuture;
import com.google.api.core.ApiFutures;
import com.google.api.core.BetaApi;
import com.google.api.gax.paging.AbstractFixedSizeCollection;
import com.google.api.gax.paging.AbstractPage;
import com.google.api.gax.paging.AbstractPagedListResponse;
import com.google.api.gax.paging.FixedSizeCollection;
import com.google.api.gax.paging.Page;
import com.google.api.gax.paging.PagedListResponse;
import com.google.api.gax.rpc.ApiExceptions;
import com.google.api.gax.rpc.PageContext;
import com.google.common.base.Function;
import com.google.common.collect.Iterables;
import java.util.Iterator;
import java.util.List;
import javax.annotation.Generated;

// AUTO-GENERATED DOCUMENTATION AND CLASS
/**
 * Wrapper class to contain paged response types for page streaming methods.
 * Each static class inside this wrapper class is used as the return type of
 * one of an API method that implements the page streaming pattern.
 */
@Generated("by GAPIC")
public class PagedResponseWrappers {

  public static class BillingAccountsListPagedResponse extends AbstractPagedListResponse<
      BillingAccountsListHttpRequest,
      ListBillingAccountsResponse,
      BillingAccount,
      BillingAccountsListPage,
      BillingAccountsListFixedSizeCollection> {

    public static ApiFuture<BillingAccountsListPagedResponse> createAsync(
        PageContext<BillingAccountsListHttpRequest, ListBillingAccountsResponse, BillingAccount> context,
        ApiFuture<ListBillingAccountsResponse> futureResponse) {
      ApiFuture<BillingAccountsListPage> futurePage =
          BillingAccountsListPage.createEmptyPage().createPageAsync(context, futureResponse);
      return ApiFutures.transform(
          futurePage,
          new ApiFunction<BillingAccountsListPage, BillingAccountsListPagedResponse>() {
            @Override
            public BillingAccountsListPagedResponse apply(BillingAccountsListPage input) {
              return new BillingAccountsListPagedResponse(input);
            }
          });
    }

    private BillingAccountsListPagedResponse(BillingAccountsListPage page) {
      super(page, BillingAccountsListFixedSizeCollection.createEmptyCollection());
    }


  }

  public static class BillingAccountsListPage extends AbstractPage<
      BillingAccountsListHttpRequest,
      ListBillingAccountsResponse,
      BillingAccount,
      BillingAccountsListPage> {

    private BillingAccountsListPage(
        PageContext<BillingAccountsListHttpRequest, ListBillingAccountsResponse, BillingAccount> context,
        ListBillingAccountsResponse response) {
      super(context, response);
    }

    private static BillingAccountsListPage createEmptyPage() {
      return new BillingAccountsListPage(null, null);
    }

    @Override
    protected BillingAccountsListPage createPage(
        PageContext<BillingAccountsListHttpRequest, ListBillingAccountsResponse, BillingAccount> context,
        ListBillingAccountsResponse response) {
      return new BillingAccountsListPage(context, response);
    }

    @Override
    public ApiFuture<BillingAccountsListPage> createPageAsync(
        PageContext<BillingAccountsListHttpRequest, ListBillingAccountsResponse, BillingAccount> context,
        ApiFuture<ListBillingAccountsResponse> futureResponse) {
      return super.createPageAsync(context, futureResponse);
    }




  }

  public static class BillingAccountsListFixedSizeCollection extends AbstractFixedSizeCollection<
      BillingAccountsListHttpRequest,
      ListBillingAccountsResponse,
      BillingAccount,
      BillingAccountsListPage,
      BillingAccountsListFixedSizeCollection> {

    private BillingAccountsListFixedSizeCollection(List<BillingAccountsListPage> pages, int collectionSize) {
      super(pages, collectionSize);
    }

    private static BillingAccountsListFixedSizeCollection createEmptyCollection() {
      return new BillingAccountsListFixedSizeCollection(null, 0);
    }

    @Override
    protected BillingAccountsListFixedSizeCollection createCollection(
        List<BillingAccountsListPage> pages, int collectionSize) {
      return new BillingAccountsListFixedSizeCollection(pages, collectionSize);
    }


  }

}
============== file: src/main/java/com/google/cloud/fakebilling/v1/package-info.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A client to Google Cloud Billing Test API.
 *
 * The interfaces provided are listed below, along with usage samples.
 *
 * =========================
 * BillingAccountAdminClient
 * =========================
 *
 * Service Description: Test Discovery doc.
 *
 * Sample for BillingAccountAdminClient:
 * <pre>
 * <code>
 * try (BillingAccountAdminClient billingAccountAdminClient = BillingAccountAdminClient.create()) {
 *
 *   BillingAccount response = billingAccountAdminClient.billingAccountsGet();
 * }
 * </code>
 * </pre>
 *
 * ==================
 * ProjectAdminClient
 * ==================
 *
 * Service Description: Test Discovery doc.
 *
 * Configure billing projects.
 *
 * Sample for ProjectAdminClient:
 * <pre>
 * <code>
 * try (ProjectAdminClient projectAdminClient = ProjectAdminClient.create()) {
 *
 *   ProjectBillingInfo response = projectAdminClient.projectsUpdateBillingInfo();
 * }
 * </code>
 * </pre>
 *
 */

package com.google.cloud.fakebilling.v1;
