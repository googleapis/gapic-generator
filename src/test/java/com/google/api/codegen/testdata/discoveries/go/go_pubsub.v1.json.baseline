
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  pubsubService, err := pubsub.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy is being requested.
  // `resource` is usually specified as a path. For example, a Project
  // resource is specified as `projects/{project}`.
  resource := ""  // TODO: Update placeholder value.

  resp, err := pubsubService.Projects.Snapshots.GetIamPolicy(resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  pubsubService, err := pubsub.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy is being specified.
  // `resource` is usually specified as a path. For example, a Project
  // resource is specified as `projects/{project}`.
  resource := ""  // TODO: Update placeholder value.

  rb := &pubsub.SetIamPolicyRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := pubsubService.Projects.Snapshots.SetIamPolicy(resource, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  pubsubService, err := pubsub.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy detail is being requested.
  // `resource` is usually specified as a path. For example, a Project
  // resource is specified as `projects/{project}`.
  resource := ""  // TODO: Update placeholder value.

  rb := &pubsub.TestIamPermissionsRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := pubsubService.Projects.Snapshots.TestIamPermissions(resource, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  pubsubService, err := pubsub.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The subscription whose message is being acknowledged.
  // Format is `projects/{project}/subscriptions/{sub}`.
  subscription := ""  // TODO: Update placeholder value.

  rb := &pubsub.AcknowledgeRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := pubsubService.Projects.Subscriptions.Acknowledge(subscription, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  pubsubService, err := pubsub.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the subscription. It must have the format
  // `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must
  // start with a letter, and contain only letters (`[A-Za-z]`), numbers
  // (`[0-9]`), dashes (`-`), underscores (`_`), periods (`.`), tildes (`~`),
  // plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters
  // in length, and it must not start with `"goog"`.
  name := ""  // TODO: Update placeholder value.

  rb := &pubsub.Subscription{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := pubsubService.Projects.Subscriptions.Create(name, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  pubsubService, err := pubsub.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The subscription to delete.
  // Format is `projects/{project}/subscriptions/{sub}`.
  subscription := ""  // TODO: Update placeholder value.

  resp, err := pubsubService.Projects.Subscriptions.Delete(subscription).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  pubsubService, err := pubsub.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the subscription to get.
  // Format is `projects/{project}/subscriptions/{sub}`.
  subscription := ""  // TODO: Update placeholder value.

  resp, err := pubsubService.Projects.Subscriptions.Get(subscription).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  pubsubService, err := pubsub.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy is being requested.
  // `resource` is usually specified as a path. For example, a Project
  // resource is specified as `projects/{project}`.
  resource := ""  // TODO: Update placeholder value.

  resp, err := pubsubService.Projects.Subscriptions.GetIamPolicy(resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  pubsubService, err := pubsub.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the cloud project that subscriptions belong to.
  // Format is `projects/{project}`.
  project := ""  // TODO: Update placeholder value.

  req := pubsubService.Projects.Subscriptions.List(project)
  if err := req.Pages(ctx, func(page *pubsub.ListSubscriptionsResponse) error {
    for _, subscription := range page.Subscriptions {
      // TODO: Change code below to process each `subscription` resource:
      fmt.Printf("%#v\n", subscription)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  pubsubService, err := pubsub.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the subscription.
  // Format is `projects/{project}/subscriptions/{sub}`.
  subscription := ""  // TODO: Update placeholder value.

  rb := &pubsub.ModifyAckDeadlineRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := pubsubService.Projects.Subscriptions.ModifyAckDeadline(subscription, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  pubsubService, err := pubsub.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the subscription.
  // Format is `projects/{project}/subscriptions/{sub}`.
  subscription := ""  // TODO: Update placeholder value.

  rb := &pubsub.ModifyPushConfigRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := pubsubService.Projects.Subscriptions.ModifyPushConfig(subscription, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  pubsubService, err := pubsub.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The subscription from which messages should be pulled.
  // Format is `projects/{project}/subscriptions/{sub}`.
  subscription := ""  // TODO: Update placeholder value.

  rb := &pubsub.PullRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := pubsubService.Projects.Subscriptions.Pull(subscription, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  pubsubService, err := pubsub.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy is being specified.
  // `resource` is usually specified as a path. For example, a Project
  // resource is specified as `projects/{project}`.
  resource := ""  // TODO: Update placeholder value.

  rb := &pubsub.SetIamPolicyRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := pubsubService.Projects.Subscriptions.SetIamPolicy(resource, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  pubsubService, err := pubsub.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy detail is being requested.
  // `resource` is usually specified as a path. For example, a Project
  // resource is specified as `projects/{project}`.
  resource := ""  // TODO: Update placeholder value.

  rb := &pubsub.TestIamPermissionsRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := pubsubService.Projects.Subscriptions.TestIamPermissions(resource, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  pubsubService, err := pubsub.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the topic. It must have the format
  // `"projects/{project}/topics/{topic}"`. `{topic}` must start with a letter,
  // and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
  // underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent
  // signs (`%`). It must be between 3 and 255 characters in length, and it
  // must not start with `"goog"`.
  name := ""  // TODO: Update placeholder value.

  rb := &pubsub.Topic{
    // TODO: Add desired fields of the request body. All existing fields
    // will be replaced.
  }

  resp, err := pubsubService.Projects.Topics.Create(name, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  pubsubService, err := pubsub.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the topic to delete.
  // Format is `projects/{project}/topics/{topic}`.
  topic := ""  // TODO: Update placeholder value.

  resp, err := pubsubService.Projects.Topics.Delete(topic).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  pubsubService, err := pubsub.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the topic to get.
  // Format is `projects/{project}/topics/{topic}`.
  topic := ""  // TODO: Update placeholder value.

  resp, err := pubsubService.Projects.Topics.Get(topic).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  pubsubService, err := pubsub.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy is being requested.
  // `resource` is usually specified as a path. For example, a Project
  // resource is specified as `projects/{project}`.
  resource := ""  // TODO: Update placeholder value.

  resp, err := pubsubService.Projects.Topics.GetIamPolicy(resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  pubsubService, err := pubsub.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the cloud project that topics belong to.
  // Format is `projects/{project}`.
  project := ""  // TODO: Update placeholder value.

  req := pubsubService.Projects.Topics.List(project)
  if err := req.Pages(ctx, func(page *pubsub.ListTopicsResponse) error {
    for _, topic := range page.Topics {
      // TODO: Change code below to process each `topic` resource:
      fmt.Printf("%#v\n", topic)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  pubsubService, err := pubsub.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The messages in the request will be published on this topic.
  // Format is `projects/{project}/topics/{topic}`.
  topic := ""  // TODO: Update placeholder value.

  rb := &pubsub.PublishRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := pubsubService.Projects.Topics.Publish(topic, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  pubsubService, err := pubsub.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy is being specified.
  // `resource` is usually specified as a path. For example, a Project
  // resource is specified as `projects/{project}`.
  resource := ""  // TODO: Update placeholder value.

  rb := &pubsub.SetIamPolicyRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := pubsubService.Projects.Topics.SetIamPolicy(resource, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  pubsubService, err := pubsub.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the topic that subscriptions are attached to.
  // Format is `projects/{project}/topics/{topic}`.
  topic := ""  // TODO: Update placeholder value.

  req := pubsubService.Projects.Topics.Subscriptions.List(topic)
  if err := req.Pages(ctx, func(page *pubsub.ListTopicSubscriptionsResponse) error {
    for _, item := range page.Subscriptions {
      // TODO: Change code below to process each `item` resource:
      fmt.Printf("%#v\n", item)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`.
//    For more information, see
//    https://developers.google.com/identity/protocols/application-default-credentials
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"
  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  c, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  pubsubService, err := pubsub.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which the policy detail is being requested.
  // `resource` is usually specified as a path. For example, a Project
  // resource is specified as `projects/{project}`.
  resource := ""  // TODO: Update placeholder value.

  rb := &pubsub.TestIamPermissionsRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := pubsubService.Projects.Topics.TestIamPermissions(resource, rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
