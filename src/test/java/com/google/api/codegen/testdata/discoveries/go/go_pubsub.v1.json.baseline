
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := pubsub.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The subscription whose message is being acknowledged.
  subscription := "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}" // TODO: Update placeholder value(s).

  acknowledgeRequest := &pubsub.AcknowledgeRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Subscriptions.Acknowledge(subscription, &acknowledgeRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := pubsub.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the subscription. It must have the format
  // `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must start with a letter, and
  // contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`), periods
  // (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters in
  // length, and it must not start with `"goog"`.
  name := "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}" // TODO: Update placeholder value(s).

  subscription := &pubsub.Subscription{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Subscriptions.Create(name, &subscription).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := pubsub.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The subscription to delete.
  subscription := "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Subscriptions.Delete(subscription).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := pubsub.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the subscription to get.
  subscription := "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Subscriptions.Get(subscription).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := pubsub.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which policy is being requested. `resource` is usually specified as a
  // path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in
  // this value is resource specific and is specified in the documentation for the respective
  // GetIamPolicy rpc.
  resource := "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Subscriptions.GetIamPolicy(resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := pubsub.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the cloud project that subscriptions belong to.
  project := "projects/{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.Projects.Subscriptions.List(project)
  if err := call.Pages(ctx, func(page *pubsub.ListSubscriptionsResponse) error {
    for _, subscription := range page.Subscriptions {
      // TODO: Use subscription
      fmt.Printf("%#v\n", subscription)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := pubsub.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the subscription.
  subscription := "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}" // TODO: Update placeholder value(s).

  modifyAckDeadlineRequest := &pubsub.ModifyAckDeadlineRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Subscriptions.ModifyAckDeadline(subscription, &modifyAckDeadlineRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := pubsub.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the subscription.
  subscription := "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}" // TODO: Update placeholder value(s).

  modifyPushConfigRequest := &pubsub.ModifyPushConfigRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Subscriptions.ModifyPushConfig(subscription, &modifyPushConfigRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := pubsub.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The subscription from which messages should be pulled.
  subscription := "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}" // TODO: Update placeholder value(s).

  pullRequest := &pubsub.PullRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Subscriptions.Pull(subscription, &pullRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := pubsub.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which policy is being specified. `resource` is usually specified as a
  // path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in
  // this value is resource specific and is specified in the documentation for the respective
  // SetIamPolicy rpc.
  resource := "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}" // TODO: Update placeholder value(s).

  setIamPolicyRequest := &pubsub.SetIamPolicyRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Subscriptions.SetIamPolicy(resource, &setIamPolicyRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := pubsub.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which policy detail is being requested. `resource` is usually specified
  // as a path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path
  // specified in this value is resource specific and is specified in the documentation for the
  // respective TestIamPermissions rpc.
  resource := "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}" // TODO: Update placeholder value(s).

  testIamPermissionsRequest := &pubsub.TestIamPermissionsRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Subscriptions.TestIamPermissions(resource, &testIamPermissionsRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := pubsub.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the topic. It must have the format `"projects/{project}/topics/{topic}"`. `{topic}` must
  // start with a letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
  // underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be
  // between 3 and 255 characters in length, and it must not start with `"goog"`.
  name := "projects/{MY-PROJECT}/topics/{MY-TOPIC}" // TODO: Update placeholder value(s).

  topic := &pubsub.Topic{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Topics.Create(name, &topic).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := pubsub.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Name of the topic to delete.
  topic := "projects/{MY-PROJECT}/topics/{MY-TOPIC}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Topics.Delete(topic).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := pubsub.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the topic to get.
  topic := "projects/{MY-PROJECT}/topics/{MY-TOPIC}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Topics.Get(topic).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := pubsub.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which policy is being requested. `resource` is usually specified as a
  // path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in
  // this value is resource specific and is specified in the documentation for the respective
  // GetIamPolicy rpc.
  resource := "projects/{MY-PROJECT}/topics/{MY-TOPIC}" // TODO: Update placeholder value(s).

  resp, err := s.Projects.Topics.GetIamPolicy(resource).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := pubsub.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the cloud project that topics belong to.
  project := "projects/{MY-PROJECT}" // TODO: Update placeholder value(s).

  call := s.Projects.Topics.List(project)
  if err := call.Pages(ctx, func(page *pubsub.ListTopicsResponse) error {
    for _, topic := range page.Topics {
      // TODO: Use topic
      fmt.Printf("%#v\n", topic)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := pubsub.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The messages in the request will be published on this topic.
  topic := "projects/{MY-PROJECT}/topics/{MY-TOPIC}" // TODO: Update placeholder value(s).

  publishRequest := &pubsub.PublishRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Topics.Publish(topic, &publishRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := pubsub.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which policy is being specified. `resource` is usually specified as a
  // path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in
  // this value is resource specific and is specified in the documentation for the respective
  // SetIamPolicy rpc.
  resource := "projects/{MY-PROJECT}/topics/{MY-TOPIC}" // TODO: Update placeholder value(s).

  setIamPolicyRequest := &pubsub.SetIamPolicyRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Topics.SetIamPolicy(resource, &setIamPolicyRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := pubsub.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // The name of the topic that subscriptions are attached to.
  topic := "projects/{MY-PROJECT}/topics/{MY-TOPIC}" // TODO: Update placeholder value(s).

  call := s.Projects.Topics.Subscriptions.List(topic)
  if err := call.Pages(ctx, func(page *pubsub.ListTopicSubscriptionsResponse) error {
    for _, item := range page.Subscriptions {
      // TODO: Use item
      fmt.Printf("%#v\n", item)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := pubsub.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // REQUIRED: The resource for which policy detail is being requested. `resource` is usually specified
  // as a path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path
  // specified in this value is resource specific and is specified in the documentation for the
  // respective TestIamPermissions rpc.
  resource := "projects/{MY-PROJECT}/topics/{MY-TOPIC}" // TODO: Update placeholder value(s).

  testIamPermissionsRequest := &pubsub.TestIamPermissionsRequest{
    // TODO: Add the desired fields.
  }

  resp, err := s.Projects.Topics.TestIamPermissions(resource, &testIamPermissionsRequest).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
