
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/pubsub/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := pubsub.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The subscription whose message is being acknowledged.
  subscription := "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}" // TODO: Update placeholder value.

  resp, err := c.Projects.Subscriptions.Acknowledge(subscription, &pubsub.AcknowledgeRequest{
                                                      // TODO: Fill required fields.
                                                    }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/pubsub/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := pubsub.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The name of the subscription. It must have the format
  // `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must start with a letter, and
  // contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`), periods
  // (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters in
  // length, and it must not start with `"goog"`.
  name := "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}" // TODO: Update placeholder value.

  resp, err := c.Projects.Subscriptions.Create(name, &pubsub.Subscription{
                                                 // TODO: Fill required fields.
                                               }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/pubsub/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := pubsub.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The subscription to delete.
  subscription := "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}" // TODO: Update placeholder value.

  resp, err := c.Projects.Subscriptions.Delete(subscription).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/pubsub/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := pubsub.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The name of the subscription to get.
  subscription := "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}" // TODO: Update placeholder value.

  resp, err := c.Projects.Subscriptions.Get(subscription).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/pubsub/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := pubsub.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // REQUIRED: The resource for which policy is being requested. `resource` is usually specified as a
  // path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in
  // this value is resource specific and is specified in the documentation for the respective
  // GetIamPolicy rpc.
  resource := "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}" // TODO: Update placeholder value.

  resp, err := c.Projects.Subscriptions.GetIamPolicy(resource).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/pubsub/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := pubsub.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The name of the cloud project that subscriptions belong to.
  project := "projects/{MY-PROJECT}" // TODO: Update placeholder value.


  call := c.Projects.Subscriptions.List(project)
  if err := call.Pages(ctx, func(page *pubsub.ListSubscriptionsResponse) error {
    for _, v := range page.Subscriptions {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/pubsub/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := pubsub.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The name of the subscription.
  subscription := "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}" // TODO: Update placeholder value.

  resp, err := c.Projects.Subscriptions.ModifyAckDeadline(subscription, &pubsub.ModifyAckDeadlineRequest{
                                                            // TODO: Fill required fields.
                                                          }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/pubsub/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := pubsub.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The name of the subscription.
  subscription := "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}" // TODO: Update placeholder value.

  resp, err := c.Projects.Subscriptions.ModifyPushConfig(subscription, &pubsub.ModifyPushConfigRequest{
                                                           // TODO: Fill required fields.
                                                         }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/pubsub/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := pubsub.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The subscription from which messages should be pulled.
  subscription := "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}" // TODO: Update placeholder value.

  resp, err := c.Projects.Subscriptions.Pull(subscription, &pubsub.PullRequest{
                                               // TODO: Fill required fields.
                                             }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/pubsub/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := pubsub.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // REQUIRED: The resource for which policy is being specified. `resource` is usually specified as a
  // path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in
  // this value is resource specific and is specified in the documentation for the respective
  // SetIamPolicy rpc.
  resource := "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}" // TODO: Update placeholder value.

  resp, err := c.Projects.Subscriptions.SetIamPolicy(resource, &pubsub.SetIamPolicyRequest{
                                                       // TODO: Fill required fields.
                                                     }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/pubsub/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := pubsub.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // REQUIRED: The resource for which policy detail is being requested. `resource` is usually specified
  // as a path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path
  // specified in this value is resource specific and is specified in the documentation for the
  // respective TestIamPermissions rpc.
  resource := "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}" // TODO: Update placeholder value.

  resp, err := c.Projects.Subscriptions.TestIamPermissions(resource, &pubsub.TestIamPermissionsRequest{
                                                             // TODO: Fill required fields.
                                                           }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/pubsub/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := pubsub.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The name of the topic. It must have the format `"projects/{project}/topics/{topic}"`. `{topic}` must
  // start with a letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
  // underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be
  // between 3 and 255 characters in length, and it must not start with `"goog"`.
  name := "projects/{MY-PROJECT}/topics/{MY-TOPIC}" // TODO: Update placeholder value.

  resp, err := c.Projects.Topics.Create(name, &pubsub.Topic{
                                          // TODO: Fill required fields.
                                        }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/pubsub/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := pubsub.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // Name of the topic to delete.
  topic := "projects/{MY-PROJECT}/topics/{MY-TOPIC}" // TODO: Update placeholder value.

  resp, err := c.Projects.Topics.Delete(topic).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/pubsub/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := pubsub.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The name of the topic to get.
  topic := "projects/{MY-PROJECT}/topics/{MY-TOPIC}" // TODO: Update placeholder value.

  resp, err := c.Projects.Topics.Get(topic).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/pubsub/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := pubsub.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // REQUIRED: The resource for which policy is being requested. `resource` is usually specified as a
  // path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in
  // this value is resource specific and is specified in the documentation for the respective
  // GetIamPolicy rpc.
  resource := "projects/{MY-PROJECT}/topics/{MY-TOPIC}" // TODO: Update placeholder value.

  resp, err := c.Projects.Topics.GetIamPolicy(resource).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/pubsub/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := pubsub.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The name of the cloud project that topics belong to.
  project := "projects/{MY-PROJECT}" // TODO: Update placeholder value.


  call := c.Projects.Topics.List(project)
  if err := call.Pages(ctx, func(page *pubsub.ListTopicsResponse) error {
    for _, v := range page.Topics {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/pubsub/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := pubsub.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The messages in the request will be published on this topic.
  topic := "projects/{MY-PROJECT}/topics/{MY-TOPIC}" // TODO: Update placeholder value.

  resp, err := c.Projects.Topics.Publish(topic, &pubsub.PublishRequest{
                                           // TODO: Fill required fields.
                                         }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/pubsub/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := pubsub.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // REQUIRED: The resource for which policy is being specified. `resource` is usually specified as a
  // path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in
  // this value is resource specific and is specified in the documentation for the respective
  // SetIamPolicy rpc.
  resource := "projects/{MY-PROJECT}/topics/{MY-TOPIC}" // TODO: Update placeholder value.

  resp, err := c.Projects.Topics.SetIamPolicy(resource, &pubsub.SetIamPolicyRequest{
                                                // TODO: Fill required fields.
                                              }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/pubsub/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := pubsub.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // The name of the topic that subscriptions are attached to.
  topic := "projects/{MY-PROJECT}/topics/{MY-TOPIC}" // TODO: Update placeholder value.


  call := c.Projects.Topics.Subscriptions.List(topic)
  if err := call.Pages(ctx, func(page *pubsub.ListTopicSubscriptionsResponse) error {
    for _, v := range page.Subscriptions {
      // TODO: Use v.
      _ = v
    }
    return nil // NOTE: returning a non-nil error stops pagination.
  }); err != nil {
    // TODO: Handle error.
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub
// 2. This sample uses Application Default Credentials for authentication. If
//    not already done, install the gcloud CLI from https://cloud.google.com/sdk/
//    and run 'gcloud auth application-default login'
// 3. To install the client library, run:
//    go get -u google.golang.org/api/pubsub/v1

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  hc, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
  }
  c, err := pubsub.New(hc)
  if err != nil {
    // TODO: Handle error.
  }

  // REQUIRED: The resource for which policy detail is being requested. `resource` is usually specified
  // as a path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path
  // specified in this value is resource specific and is specified in the documentation for the
  // respective TestIamPermissions rpc.
  resource := "projects/{MY-PROJECT}/topics/{MY-TOPIC}" // TODO: Update placeholder value.

  resp, err := c.Projects.Topics.TestIamPermissions(resource, &pubsub.TestIamPermissionsRequest{
                                                      // TODO: Fill required fields.
                                                    }).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
  }
  // TODO: Use resp.
  _ = resp
}
