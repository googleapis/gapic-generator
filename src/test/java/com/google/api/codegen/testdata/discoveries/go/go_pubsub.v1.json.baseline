
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/pubsub/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := pubsub.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'acknowledge' method:
  var (
    // The subscription whose message is being acknowledged.
    subscription = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}"

    requestBody = &pubsub.AcknowledgeRequest{}
  )

  response, err := client.Projects.Subscriptions.Acknowledge(subscription, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/pubsub/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := pubsub.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'create' method:
  var (
    // The name of the subscription. It must have the format
    // `"projects/{project}/subscriptions/{subscription}"`. `{subscription}` must start with a letter, and
    // contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`), underscores (`_`), periods
    // (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be between 3 and 255 characters in
    // length, and it must not start with `"goog"`.
    name = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}"

    requestBody = &pubsub.Subscription{}
  )

  response, err := client.Projects.Subscriptions.Create(name, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/pubsub/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := pubsub.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // The subscription to delete.
    subscription = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}"
  )

  response, err := client.Projects.Subscriptions.Delete(subscription).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/pubsub/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := pubsub.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // The name of the subscription to get.
    subscription = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}"
  )

  response, err := client.Projects.Subscriptions.Get(subscription).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/pubsub/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := pubsub.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'getIamPolicy' method:
  var (
    // REQUIRED: The resource for which policy is being requested. `resource` is usually specified as a
    // path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in
    // this value is resource specific and is specified in the documentation for the respective
    // GetIamPolicy rpc.
    resource = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}"
  )

  response, err := client.Projects.Subscriptions.GetIamPolicy(resource).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/pubsub/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := pubsub.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // The name of the cloud project that subscriptions belong to.
    project = "projects/{MY-PROJECT}"
  )

  fn := func(page *pubsub.ListSubscriptionsResponse) error {
    // doThingsWith(page)
    for i, element := range page.Subscriptions {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Projects.Subscriptions.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/pubsub/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := pubsub.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'modifyAckDeadline' method:
  var (
    // The name of the subscription.
    subscription = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}"

    requestBody = &pubsub.ModifyAckDeadlineRequest{}
  )

  response, err := client.Projects.Subscriptions.ModifyAckDeadline(subscription, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/pubsub/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := pubsub.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'modifyPushConfig' method:
  var (
    // The name of the subscription.
    subscription = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}"

    requestBody = &pubsub.ModifyPushConfigRequest{}
  )

  response, err := client.Projects.Subscriptions.ModifyPushConfig(subscription, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/pubsub/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := pubsub.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'pull' method:
  var (
    // The subscription from which messages should be pulled.
    subscription = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}"

    requestBody = &pubsub.PullRequest{}
  )

  response, err := client.Projects.Subscriptions.Pull(subscription, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/pubsub/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := pubsub.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'setIamPolicy' method:
  var (
    // REQUIRED: The resource for which policy is being specified. `resource` is usually specified as a
    // path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in
    // this value is resource specific and is specified in the documentation for the respective
    // SetIamPolicy rpc.
    resource = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}"

    requestBody = &pubsub.SetIamPolicyRequest{}
  )

  response, err := client.Projects.Subscriptions.SetIamPolicy(resource, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/pubsub/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := pubsub.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'testIamPermissions' method:
  var (
    // REQUIRED: The resource for which policy detail is being requested. `resource` is usually specified
    // as a path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path
    // specified in this value is resource specific and is specified in the documentation for the
    // respective TestIamPermissions rpc.
    resource = "projects/{MY-PROJECT}/subscriptions/{MY-SUBSCRIPTION}"

    requestBody = &pubsub.TestIamPermissionsRequest{}
  )

  response, err := client.Projects.Subscriptions.TestIamPermissions(resource, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/pubsub/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := pubsub.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'create' method:
  var (
    // The name of the topic. It must have the format `"projects/{project}/topics/{topic}"`. `{topic}` must
    // start with a letter, and contain only letters (`[A-Za-z]`), numbers (`[0-9]`), dashes (`-`),
    // underscores (`_`), periods (`.`), tildes (`~`), plus (`+`) or percent signs (`%`). It must be
    // between 3 and 255 characters in length, and it must not start with `"goog"`.
    name = "projects/{MY-PROJECT}/topics/{MY-TOPIC}"

    requestBody = &pubsub.Topic{}
  )

  response, err := client.Projects.Topics.Create(name, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/pubsub/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := pubsub.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'delete' method:
  var (
    // Name of the topic to delete.
    topic = "projects/{MY-PROJECT}/topics/{MY-TOPIC}"
  )

  response, err := client.Projects.Topics.Delete(topic).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/pubsub/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := pubsub.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'get' method:
  var (
    // The name of the topic to get.
    topic = "projects/{MY-PROJECT}/topics/{MY-TOPIC}"
  )

  response, err := client.Projects.Topics.Get(topic).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/pubsub/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := pubsub.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'getIamPolicy' method:
  var (
    // REQUIRED: The resource for which policy is being requested. `resource` is usually specified as a
    // path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in
    // this value is resource specific and is specified in the documentation for the respective
    // GetIamPolicy rpc.
    resource = "projects/{MY-PROJECT}/topics/{MY-TOPIC}"
  )

  response, err := client.Projects.Topics.GetIamPolicy(resource).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/pubsub/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := pubsub.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // The name of the cloud project that topics belong to.
    project = "projects/{MY-PROJECT}"
  )

  fn := func(page *pubsub.ListTopicsResponse) error {
    // doThingsWith(page)
    for i, element := range page.Topics {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Projects.Topics.List(project).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/pubsub/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := pubsub.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'publish' method:
  var (
    // The messages in the request will be published on this topic.
    topic = "projects/{MY-PROJECT}/topics/{MY-TOPIC}"

    requestBody = &pubsub.PublishRequest{}
  )

  response, err := client.Projects.Topics.Publish(topic, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/pubsub/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := pubsub.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'setIamPolicy' method:
  var (
    // REQUIRED: The resource for which policy is being specified. `resource` is usually specified as a
    // path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path specified in
    // this value is resource specific and is specified in the documentation for the respective
    // SetIamPolicy rpc.
    resource = "projects/{MY-PROJECT}/topics/{MY-TOPIC}"

    requestBody = &pubsub.SetIamPolicyRequest{}
  )

  response, err := client.Projects.Topics.SetIamPolicy(resource, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/pubsub/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := pubsub.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'list' method:
  var (
    // The name of the topic that subscriptions are attached to.
    topic = "projects/{MY-PROJECT}/topics/{MY-TOPIC}"
  )

  fn := func(page *pubsub.ListTopicSubscriptionsResponse) error {
    // doThingsWith(page)
    for i, element := range page.Subscriptions {
      // doThingsWith(element)
      _, _ = i, element
    }
    return nil
  }
  if err = client.Projects.Topics.Subscriptions.List(topic).Pages(ctx, fn); err != nil {
    // TODO: Handle error.
    _ = err
  }
}
package main

// PRE-REQUISITES:
// ---------------
// 1. If not already done, enable the Google Cloud Pub/Sub API and check the quota for your project at
//    https://console.developers.google.com/apis/api/pubsub_component/quotas
// 2. This sample uses Application Default Credentials for Auth. If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run 'gcloud beta auth application-default login'
// 3. To install the client library and Application Default Credentials library, run:
//    'go get google.golang.org/api/pubsub/v1'
//    'go get golang.org/x/oauth2/google'

import (
  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/pubsub/v1"
)

func main() {
  ctx := context.Background()
  httpClient, err := google.DefaultClient(ctx, pubsub.CloudPlatformScope)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  client, err := pubsub.New(httpClient)
  if err != nil {
    // TODO: Handle error.
    _ = err
  }

  // TODO: Change placeholders below to appropriate parameter values for the 'testIamPermissions' method:
  var (
    // REQUIRED: The resource for which policy detail is being requested. `resource` is usually specified
    // as a path, such as, `projects/{project}/zones/{zone}/disks/{disk}`. The format for the path
    // specified in this value is resource specific and is specified in the documentation for the
    // respective TestIamPermissions rpc.
    resource = "projects/{MY-PROJECT}/topics/{MY-TOPIC}"

    requestBody = &pubsub.TestIamPermissionsRequest{}
  )

  response, err := client.Projects.Topics.TestIamPermissions(resource, requestBody).Context(ctx).Do()
  if err != nil {
    // TODO: Handle error.
    _ = err
  }
  // doThingsWith(response)
  _ = response
}
