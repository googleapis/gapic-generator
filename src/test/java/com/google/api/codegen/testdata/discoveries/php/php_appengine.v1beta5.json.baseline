
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-AppengineSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Appengine($client);

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Appengine_Application();

$response = $service->apps->create($requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-AppengineSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Appengine($client);

// Part of `name`. Name of the application to get. Example: apps/myapp.
$appsId = 'my-apps-id';  // TODO: Update placeholder value.

$response = $service->apps->get($appsId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-AppengineSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Appengine($client);

// Part of `name`. Resource name for the location.
$appsId = 'my-apps-id';  // TODO: Update placeholder value.

// Part of `name`. See documentation of `appsId`.
$locationsId = 'my-locations-id';  // TODO: Update placeholder value.

$response = $service->apps_locations->get($appsId, $locationsId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-AppengineSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Appengine($client);

// Part of `name`. The resource that owns the locations collection, if applicable.
$appsId = 'my-apps-id';  // TODO: Update placeholder value.

$optParams = [];

do {
  $response = $service->apps_locations->listAppsLocations($appsId, $optParams);

  foreach ($response['locations'] as $location) {
    // TODO: Change code below to process each `location` resource:
    echo '<pre>', var_export($location, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-AppengineSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Appengine($client);

// Part of `name`. The name of the operation resource.
$appsId = 'my-apps-id';  // TODO: Update placeholder value.

// Part of `name`. See documentation of `appsId`.
$operationsId = 'my-operations-id';  // TODO: Update placeholder value.

$response = $service->apps_operations->get($appsId, $operationsId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-AppengineSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Appengine($client);

// Part of `name`. The name of the operation collection.
$appsId = 'my-apps-id';  // TODO: Update placeholder value.

$optParams = [];

do {
  $response = $service->apps_operations->listAppsOperations($appsId, $optParams);

  foreach ($response['operations'] as $operation) {
    // TODO: Change code below to process each `operation` resource:
    echo '<pre>', var_export($operation, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-AppengineSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Appengine($client);

// Part of `name`. Name of the Application resource to update. Example: apps/myapp.
$appsId = 'my-apps-id';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`. Only assigned
// properties will be changed:
$requestBody = new Google_Service_Appengine_Application();

$response = $service->apps->patch($appsId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-AppengineSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Appengine($client);

// Part of `name`. Name of the resource requested. Example: apps/myapp/services/default.
$appsId = 'my-apps-id';  // TODO: Update placeholder value.

// Part of `name`. See documentation of `appsId`.
$servicesId = 'my-services-id';  // TODO: Update placeholder value.

$response = $service->apps_services->delete($appsId, $servicesId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-AppengineSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Appengine($client);

// Part of `name`. Name of the resource requested. Example: apps/myapp/services/default.
$appsId = 'my-apps-id';  // TODO: Update placeholder value.

// Part of `name`. See documentation of `appsId`.
$servicesId = 'my-services-id';  // TODO: Update placeholder value.

$response = $service->apps_services->get($appsId, $servicesId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-AppengineSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Appengine($client);

// Part of `name`. Name of the resource requested. Example: apps/myapp.
$appsId = 'my-apps-id';  // TODO: Update placeholder value.

$optParams = [];

do {
  $response = $service->apps_services->listAppsServices($appsId, $optParams);

  foreach ($response['services'] as $service2) {
    // TODO: Change code below to process each `service2` resource:
    echo '<pre>', var_export($service2, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-AppengineSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Appengine($client);

// Part of `name`. Name of the resource to update. Example: apps/myapp/services/default.
$appsId = 'my-apps-id';  // TODO: Update placeholder value.

// Part of `name`. See documentation of `appsId`.
$servicesId = 'my-services-id';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`. Only assigned
// properties will be changed:
$requestBody = new Google_Service_Appengine_Service();

$response = $service->apps_services->patch($appsId, $servicesId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-AppengineSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Appengine($client);

// Part of `name`. Name of the resource to update. For example: "apps/myapp/services/default".
$appsId = 'my-apps-id';  // TODO: Update placeholder value.

// Part of `name`. See documentation of `appsId`.
$servicesId = 'my-services-id';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Appengine_Version();

$response = $service->apps_services_versions->create($appsId, $servicesId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-AppengineSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Appengine($client);

// Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1.
$appsId = 'my-apps-id';  // TODO: Update placeholder value.

// Part of `name`. See documentation of `appsId`.
$servicesId = 'my-services-id';  // TODO: Update placeholder value.

// Part of `name`. See documentation of `appsId`.
$versionsId = 'my-versions-id';  // TODO: Update placeholder value.

$response = $service->apps_services_versions->delete($appsId, $servicesId, $versionsId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-AppengineSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Appengine($client);

// Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1.
$appsId = 'my-apps-id';  // TODO: Update placeholder value.

// Part of `name`. See documentation of `appsId`.
$servicesId = 'my-services-id';  // TODO: Update placeholder value.

// Part of `name`. See documentation of `appsId`.
$versionsId = 'my-versions-id';  // TODO: Update placeholder value.

$response = $service->apps_services_versions->get($appsId, $servicesId, $versionsId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-AppengineSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Appengine($client);

// Part of `name`. Name of the resource requested. Example:
// apps/myapp/services/default/versions/v1/instances/instance-1.
$appsId = 'my-apps-id';  // TODO: Update placeholder value.

// Part of `name`. See documentation of `appsId`.
$servicesId = 'my-services-id';  // TODO: Update placeholder value.

// Part of `name`. See documentation of `appsId`.
$versionsId = 'my-versions-id';  // TODO: Update placeholder value.

// Part of `name`. See documentation of `appsId`.
$instancesId = 'my-instances-id';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`:
$requestBody = new Google_Service_Appengine_DebugInstanceRequest();

$response = $service->apps_services_versions_instances->debug($appsId, $servicesId, $versionsId, $instancesId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-AppengineSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Appengine($client);

// Part of `name`. Name of the resource requested. For example:
// "apps/myapp/services/default/versions/v1/instances/instance-1".
$appsId = 'my-apps-id';  // TODO: Update placeholder value.

// Part of `name`. See documentation of `appsId`.
$servicesId = 'my-services-id';  // TODO: Update placeholder value.

// Part of `name`. See documentation of `appsId`.
$versionsId = 'my-versions-id';  // TODO: Update placeholder value.

// Part of `name`. See documentation of `appsId`.
$instancesId = 'my-instances-id';  // TODO: Update placeholder value.

$response = $service->apps_services_versions_instances->delete($appsId, $servicesId, $versionsId, $instancesId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-AppengineSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Appengine($client);

// Part of `name`. Name of the resource requested. Example:
// apps/myapp/services/default/versions/v1/instances/instance-1.
$appsId = 'my-apps-id';  // TODO: Update placeholder value.

// Part of `name`. See documentation of `appsId`.
$servicesId = 'my-services-id';  // TODO: Update placeholder value.

// Part of `name`. See documentation of `appsId`.
$versionsId = 'my-versions-id';  // TODO: Update placeholder value.

// Part of `name`. See documentation of `appsId`.
$instancesId = 'my-instances-id';  // TODO: Update placeholder value.

$response = $service->apps_services_versions_instances->get($appsId, $servicesId, $versionsId, $instancesId);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-AppengineSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Appengine($client);

// Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1.
$appsId = 'my-apps-id';  // TODO: Update placeholder value.

// Part of `name`. See documentation of `appsId`.
$servicesId = 'my-services-id';  // TODO: Update placeholder value.

// Part of `name`. See documentation of `appsId`.
$versionsId = 'my-versions-id';  // TODO: Update placeholder value.

$optParams = [];

do {
  $response = $service->apps_services_versions_instances->listAppsServicesVersionsInstances($appsId, $servicesId, $versionsId, $optParams);

  foreach ($response['instances'] as $instance) {
    // TODO: Change code below to process each `instance` resource:
    echo '<pre>', var_export($instance, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-AppengineSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Appengine($client);

// Part of `name`. Name of the resource requested. Example: apps/myapp/services/default.
$appsId = 'my-apps-id';  // TODO: Update placeholder value.

// Part of `name`. See documentation of `appsId`.
$servicesId = 'my-services-id';  // TODO: Update placeholder value.

$optParams = [];

do {
  $response = $service->apps_services_versions->listAppsServicesVersions($appsId, $servicesId, $optParams);

  foreach ($response['versions'] as $version) {
    // TODO: Change code below to process each `version` resource:
    echo '<pre>', var_export($version, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google App Engine Admin API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/appengine
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk and run
 *    `gcloud beta auth application-default login`.
 *    For more information, see
 *    https://developers.google.com/identity/protocols/application-default-credentials
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

$client = new Google_Client();
$client->setApplicationName('Google-AppengineSample/0.1');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Appengine($client);

// Part of `name`. Name of the resource to update. Example: apps/myapp/services/default/versions/1.
$appsId = 'my-apps-id';  // TODO: Update placeholder value.

// Part of `name`. See documentation of `appsId`.
$servicesId = 'my-services-id';  // TODO: Update placeholder value.

// Part of `name`. See documentation of `appsId`.
$versionsId = 'my-versions-id';  // TODO: Update placeholder value.

// TODO: Assign values to desired properties of `requestBody`. Only assigned
// properties will be changed:
$requestBody = new Google_Service_Appengine_Version();

$response = $service->apps_services_versions->patch($appsId, $servicesId, $versionsId, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
