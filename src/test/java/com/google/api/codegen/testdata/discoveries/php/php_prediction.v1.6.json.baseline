
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Prediction API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/prediction
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

function getClient() {
  // TODO: Implement this function to get authentication credentials.
  // See https://foo.com/bar
  // Authorize using one of the following scopes in order to use this method:
  //   https://www.googleapis.com/auth/prediction
  return null;
}

// Create a new client.
$client = getClient();

// Create a new Prediction service.
$service = new Google_Service_Prediction($client);

// * The project associated with the model.
$project = '{MY-PROJECT}';

// * The name of a hosted model.
$hostedModelName = '{MY-HOSTED-MODEL-NAME}';

$postBody = new Google_Service_Prediction_Input($client);

$response = $service->hostedmodels->predict($project, $hostedModelName, $postBody);

<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Prediction API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/prediction
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

function getClient() {
  // TODO: Implement this function to get authentication credentials.
  // See https://foo.com/bar
  // Authorize using one of the following scopes in order to use this method:
  //   https://www.googleapis.com/auth/prediction
  return null;
}

// Create a new client.
$client = getClient();

// Create a new Prediction service.
$service = new Google_Service_Prediction($client);

// * The project associated with the model.
$project = '{MY-PROJECT}';

// * The unique name for the predictive model.
$id = '{MY-ID}';

$response = $service->trainedmodels->analyze($project, $id);

<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Prediction API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/prediction
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

function getClient() {
  // TODO: Implement this function to get authentication credentials.
  // See https://foo.com/bar
  // Authorize using one of the following scopes in order to use this method:
  //   https://www.googleapis.com/auth/prediction
  return null;
}

// Create a new client.
$client = getClient();

// Create a new Prediction service.
$service = new Google_Service_Prediction($client);

// * The project associated with the model.
$project = '{MY-PROJECT}';

// * The unique name for the predictive model.
$id = '{MY-ID}';

$response = $service->trainedmodels->delete($project, $id);

<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Prediction API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/prediction
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

function getClient() {
  // TODO: Implement this function to get authentication credentials.
  // See https://foo.com/bar
  // Authorize using one of the following scopes in order to use this method:
  //   https://www.googleapis.com/auth/prediction
  return null;
}

// Create a new client.
$client = getClient();

// Create a new Prediction service.
$service = new Google_Service_Prediction($client);

// * The project associated with the model.
$project = '{MY-PROJECT}';

// * The unique name for the predictive model.
$id = '{MY-ID}';

$response = $service->trainedmodels->get($project, $id);

<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Prediction API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/prediction
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

function getClient() {
  // TODO: Implement this function to get authentication credentials.
  // See https://foo.com/bar
  // Authorize using one of the following scopes in order to use this method:
  //   https://www.googleapis.com/auth/devstorage.full_control
  //   https://www.googleapis.com/auth/devstorage.read_only
  //   https://www.googleapis.com/auth/devstorage.read_write
  //   https://www.googleapis.com/auth/prediction
  return null;
}

// Create a new client.
$client = getClient();

// Create a new Prediction service.
$service = new Google_Service_Prediction($client);

// * The project associated with the model.
$project = '{MY-PROJECT}';

$postBody = new Google_Service_Prediction_Insert($client);

$response = $service->trainedmodels->insert($project, $postBody);

<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Prediction API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/prediction
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

function getClient() {
  // TODO: Implement this function to get authentication credentials.
  // See https://foo.com/bar
  // Authorize using one of the following scopes in order to use this method:
  //   https://www.googleapis.com/auth/prediction
  return null;
}

// Create a new client.
$client = getClient();

// Create a new Prediction service.
$service = new Google_Service_Prediction($client);

// * The project associated with the model.
$project = '{MY-PROJECT}';

$response = $service->trainedmodels->listTrainedmodels($project);

foreach ($response['items'] as $element) {
  // TODO: Add code here to process the element.
}

<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Prediction API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/prediction
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

function getClient() {
  // TODO: Implement this function to get authentication credentials.
  // See https://foo.com/bar
  // Authorize using one of the following scopes in order to use this method:
  //   https://www.googleapis.com/auth/prediction
  return null;
}

// Create a new client.
$client = getClient();

// Create a new Prediction service.
$service = new Google_Service_Prediction($client);

// * The project associated with the model.
$project = '{MY-PROJECT}';

// * The unique name for the predictive model.
$id = '{MY-ID}';

$postBody = new Google_Service_Prediction_Input($client);

$response = $service->trainedmodels->predict($project, $id, $postBody);

<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Prediction API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/prediction
 * 2. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

function getClient() {
  // TODO: Implement this function to get authentication credentials.
  // See https://foo.com/bar
  // Authorize using one of the following scopes in order to use this method:
  //   https://www.googleapis.com/auth/prediction
  return null;
}

// Create a new client.
$client = getClient();

// Create a new Prediction service.
$service = new Google_Service_Prediction($client);

// * The project associated with the model.
$project = '{MY-PROJECT}';

// * The unique name for the predictive model.
$id = '{MY-ID}';

$postBody = new Google_Service_Prediction_Update($client);

$response = $service->trainedmodels->update($project, $id, $postBody);

