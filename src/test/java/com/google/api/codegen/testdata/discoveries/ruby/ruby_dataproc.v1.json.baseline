
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Dataproc API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/dataproc
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/dataproc_v1'

service = Google::Apis::DataprocV1::DataprocService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'create_cluster' method:

# * [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
project_id = ''

# * [Required] The Cloud Dataproc region in which to handle the request.
region = ''

cluster_object = Google::Apis::DataprocV1::Cluster.new


# Perform the call
response = service.create_cluster(project_id, region, cluster_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Dataproc API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/dataproc
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/dataproc_v1'

service = Google::Apis::DataprocV1::DataprocService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_cluster' method:

# * [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
project_id = ''

# * [Required] The Cloud Dataproc region in which to handle the request.
region = ''

# * [Required] The cluster name.
cluster_name = ''

# Perform the call
response = service.delete_cluster(project_id, region, cluster_name)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Dataproc API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/dataproc
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/dataproc_v1'

service = Google::Apis::DataprocV1::DataprocService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'diagnose_cluster' method:

# * [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
project_id = ''

# * [Required] The Cloud Dataproc region in which to handle the request.
region = ''

# * [Required] The cluster name.
cluster_name = ''

diagnose_cluster_request_object = Google::Apis::DataprocV1::DiagnoseClusterRequest.new


# Perform the call
response = service.diagnose_cluster(project_id, region, cluster_name, diagnose_cluster_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Dataproc API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/dataproc
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/dataproc_v1'

service = Google::Apis::DataprocV1::DataprocService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_cluster' method:

# * [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
project_id = ''

# * [Required] The Cloud Dataproc region in which to handle the request.
region = ''

# * [Required] The cluster name.
cluster_name = ''

# Perform the call
response = service.get_cluster(project_id, region, cluster_name)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Dataproc API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/dataproc
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/dataproc_v1'

service = Google::Apis::DataprocV1::DataprocService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_clusters' method:

# * [Required] The ID of the Google Cloud Platform project that the cluster belongs to.
project_id = ''

# * [Required] The Cloud Dataproc region in which to handle the request.
region = ''

# Perform the call
result_list = service.fetch_all(items: :clusters) { |token|
  service.list_clusters(project_id, region, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Dataproc API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/dataproc
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/dataproc_v1'

service = Google::Apis::DataprocV1::DataprocService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'patch_cluster' method:

# * [Required] The ID of the Google Cloud Platform project the cluster belongs to.
project_id = ''

# * [Required] The Cloud Dataproc region in which to handle the request.
region = ''

# * [Required] The cluster name.
cluster_name = ''

cluster_object = Google::Apis::DataprocV1::Cluster.new


# Perform the call
response = service.patch_cluster(project_id, region, cluster_name, cluster_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Dataproc API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/dataproc
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/dataproc_v1'

service = Google::Apis::DataprocV1::DataprocService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'cancel_job' method:

# * [Required] The ID of the Google Cloud Platform project that the job belongs to.
project_id = ''

# * [Required] The Cloud Dataproc region in which to handle the request.
region = ''

# * [Required] The job ID.
job_id = ''

cancel_job_request_object = Google::Apis::DataprocV1::CancelJobRequest.new


# Perform the call
response = service.cancel_job(project_id, region, job_id, cancel_job_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Dataproc API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/dataproc
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/dataproc_v1'

service = Google::Apis::DataprocV1::DataprocService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_job' method:

# * [Required] The ID of the Google Cloud Platform project that the job belongs to.
project_id = ''

# * [Required] The Cloud Dataproc region in which to handle the request.
region = ''

# * [Required] The job ID.
job_id = ''

# Perform the call
service.delete_job(project_id, region, job_id)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Dataproc API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/dataproc
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/dataproc_v1'

service = Google::Apis::DataprocV1::DataprocService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_job' method:

# * [Required] The ID of the Google Cloud Platform project that the job belongs to.
project_id = ''

# * [Required] The Cloud Dataproc region in which to handle the request.
region = ''

# * [Required] The job ID.
job_id = ''

# Perform the call
response = service.get_job(project_id, region, job_id)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Dataproc API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/dataproc
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/dataproc_v1'

service = Google::Apis::DataprocV1::DataprocService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_jobs' method:

# * [Required] The ID of the Google Cloud Platform project that the job belongs to.
project_id = ''

# * [Required] The Cloud Dataproc region in which to handle the request.
region = ''

# Perform the call
result_list = service.fetch_all(items: :jobs) { |token|
  service.list_jobs(project_id, region, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Dataproc API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/dataproc
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/dataproc_v1'

service = Google::Apis::DataprocV1::DataprocService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'submit_job' method:

# * [Required] The ID of the Google Cloud Platform project that the job belongs to.
project_id = ''

# * [Required] The Cloud Dataproc region in which to handle the request.
region = ''

submit_job_request_object = Google::Apis::DataprocV1::SubmitJobRequest.new


# Perform the call
response = service.submit_job(project_id, region, submit_job_request_object)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Dataproc API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/dataproc
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/dataproc_v1'

service = Google::Apis::DataprocV1::DataprocService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'cancel_operation' method:

# * The name of the operation resource to be cancelled.
name = 'projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}'

# Perform the call
service.cancel_operation(name)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Dataproc API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/dataproc
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/dataproc_v1'

service = Google::Apis::DataprocV1::DataprocService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'delete_operation' method:

# * The name of the operation resource to be deleted.
name = 'projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}'

# Perform the call
service.delete_operation(name)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Dataproc API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/dataproc
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/dataproc_v1'

service = Google::Apis::DataprocV1::DataprocService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'get_operation' method:

# * The name of the operation resource.
name = 'projects/{MY-PROJECT}/regions/{MY-REGION}/operations/{MY-OPERATION}'

# Perform the call
response = service.get_operation(name)
# PRE-REQUISITES:
# ---------------
# 1. If not already done, enable the Google Cloud Dataproc API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/dataproc
# 2. This sample uses Application Default Credentials for Auth.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run 'gcloud auth application-default login'
# 3. To install the client library and Application Default Credentials library, run:
#    'gem install google-api-client'
#    'gem install googleauth'
require 'googleauth'
require 'google/apis/dataproc_v1'

service = Google::Apis::DataprocV1::DataprocService.new
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# TODO: Change placeholders below to appropriate parameter values for the 'list_operations' method:

# * The name of the operation collection.
name = ''

# Perform the call
result_list = service.fetch_all(items: :operations) { |token|
  service.list_operations(name, page_token: token)
}
result_list.each { |element|
  # doThingsWith(element)
}
