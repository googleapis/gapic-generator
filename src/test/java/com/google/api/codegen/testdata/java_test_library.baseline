============== file: src/test/java/com/google/gcloud/pubsub/spi/LibraryServiceTest.java ==============
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

package com.google.gcloud.pubsub.spi;

import com.google.api.gax.core.PageAccessor;
import com.google.api.gax.testing.MockGrpcService;
import com.google.api.gax.testing.MockServiceHelper;
import com.google.common.collect.Lists;
import com.google.example.library.v1.AddCommentsRequest;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.Comment;
import com.google.example.library.v1.Comment.Stage;
import com.google.example.library.v1.CreateBookRequest;
import com.google.example.library.v1.CreateShelfRequest;
import com.google.example.library.v1.DeleteBookRequest;
import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.GetBookFromArchiveRequest;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.GetShelfRequest;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.ListStringsRequest;
import com.google.example.library.v1.ListStringsResponse;
import com.google.example.library.v1.MergeShelvesRequest;
import com.google.example.library.v1.MoveBookRequest;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.Shelf;
import com.google.example.library.v1.SomeMessage;
import com.google.example.library.v1.UpdateBookIndexRequest;
import com.google.example.library.v1.UpdateBookRequest;
import com.google.protobuf.ByteString;
import com.google.protobuf.Empty;
import com.google.protobuf.FieldMask;
import com.google.protobuf.GeneratedMessage;
import com.google.tagger.v1.AddTagRequest;
import com.google.tagger.v1.AddTagResponse;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import junit.framework.Assert;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

@javax.annotation.Generated("by GAPIC")
public class LibraryServiceTest {
  private static MockServiceHelper serviceHelper;
  private LibraryServiceApi api;

  @BeforeClass
  public static void startStaticServer() {
    MockLibraryService mockService = new MockLibraryService();
    serviceHelper = new MockServiceHelper("in-process-1", mockService);
    serviceHelper.start();
  }

  @AfterClass
  public static void stopServer() {
    serviceHelper.stop();
  }

  @Before
  public void setUp() throws IOException {
    serviceHelper.reset();
    LibraryServiceSettings settings = LibraryServiceSettings.defaultBuilder()
        .provideChannelWith(serviceHelper.createChannel(), true)
        .build();
    api = LibraryServiceApi.create(settings);
  }

  @After
  public void tearDown() throws Exception {
    api.close();
  }

  @Test
  @SuppressWarnings("all")
  public void createShelfTest() {
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Shelf expectedResponse = Shelf.newBuilder()
=======
    String name = "name3373707";
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setName(name)
      .setTheme(theme)
      .setInternalTheme(internalTheme)
>>>>>>> Check response fields in Java automate tests.
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916

    Shelf shelf = Shelf.newBuilder().build();
    Shelf actualResponse =
        api.createShelf(shelf);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    CreateShelfRequest actualRequest = (CreateShelfRequest)actualRequests.get(0);

    Assert.assertEquals(actualRequest.getShelf(), shelf);
=======

    Shelf shelf = Shelf.newBuilder().build();
    Shelf actualResponse =
        api.createShelf(shelf);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    CreateShelfRequest actualRequest = (CreateShelfRequest)actualRequests.get(0);

    Assert.assertEquals(shelf, actualRequest.getShelf());
    Assert.assertEquals(expectedResponse.getName(), actualResponse.getName());
    Assert.assertEquals(expectedResponse.getTheme(), actualResponse.getTheme());
    Assert.assertEquals(expectedResponse.getInternalTheme(), actualResponse.getInternalTheme());
>>>>>>> Check response fields in Java automate tests.
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfTest() {
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Shelf expectedResponse = Shelf.newBuilder()
=======
    String formattedName2 = LibraryServiceApi.formatShelfName("[SHELF]");
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setName(formattedName2)
      .setTheme(theme)
      .setInternalTheme(internalTheme)
>>>>>>> Check response fields in Java automate tests.
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916

    String formattedName = LibraryServiceApi.formatShelfName("[SHELF]");
    Shelf actualResponse =
        api.getShelf(formattedName);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetShelfRequest actualRequest = (GetShelfRequest)actualRequests.get(0);

    Assert.assertEquals(actualRequest.getName(), formattedName);
=======

    String formattedName = LibraryServiceApi.formatShelfName("[SHELF]");
    Shelf actualResponse =
        api.getShelf(formattedName);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetShelfRequest actualRequest = (GetShelfRequest)actualRequests.get(0);

    Assert.assertEquals(formattedName, actualRequest.getName());
    Assert.assertEquals(expectedResponse.getName(), actualResponse.getName());
    Assert.assertEquals(expectedResponse.getTheme(), actualResponse.getTheme());
    Assert.assertEquals(expectedResponse.getInternalTheme(), actualResponse.getInternalTheme());
>>>>>>> Check response fields in Java automate tests.
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfTest2() {
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Shelf expectedResponse = Shelf.newBuilder()
=======
    String formattedName2 = LibraryServiceApi.formatShelfName("[SHELF]");
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setName(formattedName2)
      .setTheme(theme)
      .setInternalTheme(internalTheme)
>>>>>>> Check response fields in Java automate tests.
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatShelfName("[SHELF]");
    SomeMessage message = SomeMessage.newBuilder().build();
    Shelf actualResponse =
        api.getShelf(formattedName, message);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetShelfRequest actualRequest = (GetShelfRequest)actualRequests.get(0);

<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Assert.assertEquals(actualRequest.getName(), formattedName);
    Assert.assertEquals(actualRequest.getMessage(), message);
=======
    Assert.assertEquals(formattedName, actualRequest.getName());
    Assert.assertEquals(message, actualRequest.getMessage());
    Assert.assertEquals(expectedResponse.getName(), actualResponse.getName());
    Assert.assertEquals(expectedResponse.getTheme(), actualResponse.getTheme());
    Assert.assertEquals(expectedResponse.getInternalTheme(), actualResponse.getInternalTheme());
>>>>>>> Check response fields in Java automate tests.
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfTest3() {
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Shelf expectedResponse = Shelf.newBuilder()
=======
    String formattedName2 = LibraryServiceApi.formatShelfName("[SHELF]");
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setName(formattedName2)
      .setTheme(theme)
      .setInternalTheme(internalTheme)
>>>>>>> Check response fields in Java automate tests.
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatShelfName("[SHELF]");
    SomeMessage message = SomeMessage.newBuilder().build();
    com.google.example.library.v1.StringBuilder stringBuilder = com.google.example.library.v1.StringBuilder.newBuilder().build();
    Shelf actualResponse =
        api.getShelf(formattedName, message, stringBuilder);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetShelfRequest actualRequest = (GetShelfRequest)actualRequests.get(0);

<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Assert.assertEquals(actualRequest.getName(), formattedName);
    Assert.assertEquals(actualRequest.getMessage(), message);
    Assert.assertEquals(actualRequest.getStringBuilder(), stringBuilder);
=======
    Assert.assertEquals(formattedName, actualRequest.getName());
    Assert.assertEquals(message, actualRequest.getMessage());
    Assert.assertEquals(stringBuilder, actualRequest.getStringBuilder());
    Assert.assertEquals(expectedResponse.getName(), actualResponse.getName());
    Assert.assertEquals(expectedResponse.getTheme(), actualResponse.getTheme());
    Assert.assertEquals(expectedResponse.getInternalTheme(), actualResponse.getInternalTheme());
>>>>>>> Check response fields in Java automate tests.
  }

  @Test
  @SuppressWarnings("all")
  public void listShelvesTest() {
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    ListShelvesResponse expectedResponse = ListShelvesResponse.newBuilder()
=======
    Shelf shelvesElement = Shelf.newBuilder().build();
    List<Shelf> shelves = Arrays.asList(shelvesElement);
    String nextPageToken = "nextPageToken-1530815211";
    ListShelvesResponse expectedResponse = ListShelvesResponse.newBuilder()
      .addAllShelves(shelves)
      .setNextPageToken(nextPageToken)
>>>>>>> Check response fields in Java automate tests.
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916


=======


>>>>>>> Check response fields in Java automate tests.
    PageAccessor<Shelf> pageAccessor = api.listShelves();

    // PageAccessor will not make actual request until it is being used.
    // Add all the pages here in order to make grpc requests.
    List<Shelf> resources = Lists.newArrayList(pageAccessor.getPageValues());
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Assert.assertEquals(0, resources.size());
=======
    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getShelvesList().get(0), resources.get(0));
>>>>>>> Check response fields in Java automate tests.

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    ListShelvesRequest actualRequest = (ListShelvesRequest)actualRequests.get(0);

  }

  @Test
  @SuppressWarnings("all")
  public void deleteShelfTest() {
    Empty expectedResponse = Empty.newBuilder()
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatShelfName("[SHELF]");
    api.deleteShelf(formattedName);

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    DeleteShelfRequest actualRequest = (DeleteShelfRequest)actualRequests.get(0);

<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Assert.assertEquals(actualRequest.getName(), formattedName);
=======
    Assert.assertEquals(formattedName, actualRequest.getName());
>>>>>>> Check response fields in Java automate tests.
  }

  @Test
  @SuppressWarnings("all")
  public void mergeShelvesTest() {
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Shelf expectedResponse = Shelf.newBuilder()
=======
    String formattedName2 = LibraryServiceApi.formatShelfName("[SHELF]");
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setName(formattedName2)
      .setTheme(theme)
      .setInternalTheme(internalTheme)
>>>>>>> Check response fields in Java automate tests.
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatShelfName("[SHELF]");
    String formattedOtherShelfName = LibraryServiceApi.formatShelfName("[SHELF]");
    Shelf actualResponse =
        api.mergeShelves(formattedName, formattedOtherShelfName);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    MergeShelvesRequest actualRequest = (MergeShelvesRequest)actualRequests.get(0);

<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Assert.assertEquals(actualRequest.getName(), formattedName);
    Assert.assertEquals(actualRequest.getOtherShelfName(), formattedOtherShelfName);
=======
    Assert.assertEquals(formattedName, actualRequest.getName());
    Assert.assertEquals(formattedOtherShelfName, actualRequest.getOtherShelfName());
    Assert.assertEquals(expectedResponse.getName(), actualResponse.getName());
    Assert.assertEquals(expectedResponse.getTheme(), actualResponse.getTheme());
    Assert.assertEquals(expectedResponse.getInternalTheme(), actualResponse.getInternalTheme());
>>>>>>> Check response fields in Java automate tests.
  }

  @Test
  @SuppressWarnings("all")
  public void createBookTest() {
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Book expectedResponse = Book.newBuilder()
=======
    String formattedName2 = LibraryServiceApi.formatShelfName("[SHELF]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setName(formattedName2)
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
>>>>>>> Check response fields in Java automate tests.
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatShelfName("[SHELF]");
    Book book = Book.newBuilder().build();
    Book actualResponse =
        api.createBook(formattedName, book);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    CreateBookRequest actualRequest = (CreateBookRequest)actualRequests.get(0);

<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Assert.assertEquals(actualRequest.getName(), formattedName);
    Assert.assertEquals(actualRequest.getBook(), book);
=======
    Assert.assertEquals(formattedName, actualRequest.getName());
    Assert.assertEquals(book, actualRequest.getBook());
    Assert.assertEquals(expectedResponse.getName(), actualResponse.getName());
    Assert.assertEquals(expectedResponse.getAuthor(), actualResponse.getAuthor());
    Assert.assertEquals(expectedResponse.getTitle(), actualResponse.getTitle());
    Assert.assertEquals(expectedResponse.getRead(), actualResponse.getRead());
>>>>>>> Check response fields in Java automate tests.
  }

  @Test
  @SuppressWarnings("all")
  public void publishSeriesTest() {
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    PublishSeriesResponse expectedResponse = PublishSeriesResponse.newBuilder()
=======
    List<String> bookNames = new ArrayList<>();
    PublishSeriesResponse expectedResponse = PublishSeriesResponse.newBuilder()
      .addAllBookNames(bookNames)
>>>>>>> Check response fields in Java automate tests.
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    Shelf shelf = Shelf.newBuilder().build();
    List<Book> books = new ArrayList<>();
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    int edition = 0;
=======
    int edition = -1887963714;
>>>>>>> Check response fields in Java automate tests.
    PublishSeriesResponse actualResponse =
        api.publishSeries(shelf, books, edition);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    PublishSeriesRequest actualRequest = (PublishSeriesRequest)actualRequests.get(0);

<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Assert.assertEquals(actualRequest.getShelf(), shelf);
    Assert.assertEquals(actualRequest.getBooksList(), books);
    Assert.assertEquals(actualRequest.getEdition(), edition);
=======
    Assert.assertEquals(shelf, actualRequest.getShelf());
    Assert.assertEquals(books, actualRequest.getBooksList());
    Assert.assertEquals(edition, actualRequest.getEdition());
    Assert.assertEquals(expectedResponse.getBookNamesList(), actualResponse.getBookNamesList());
>>>>>>> Check response fields in Java automate tests.
  }

  @Test
  @SuppressWarnings("all")
  public void getBookTest() {
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Book expectedResponse = Book.newBuilder()
=======
    String formattedName2 = LibraryServiceApi.formatBookName("[SHELF]", "[BOOK]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setName(formattedName2)
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
>>>>>>> Check response fields in Java automate tests.
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916

    String formattedName = LibraryServiceApi.formatBookName("[SHELF]", "[BOOK]");
    Book actualResponse =
        api.getBook(formattedName);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetBookRequest actualRequest = (GetBookRequest)actualRequests.get(0);

    Assert.assertEquals(actualRequest.getName(), formattedName);
=======

    String formattedName = LibraryServiceApi.formatBookName("[SHELF]", "[BOOK]");
    Book actualResponse =
        api.getBook(formattedName);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetBookRequest actualRequest = (GetBookRequest)actualRequests.get(0);

    Assert.assertEquals(formattedName, actualRequest.getName());
    Assert.assertEquals(expectedResponse.getName(), actualResponse.getName());
    Assert.assertEquals(expectedResponse.getAuthor(), actualResponse.getAuthor());
    Assert.assertEquals(expectedResponse.getTitle(), actualResponse.getTitle());
    Assert.assertEquals(expectedResponse.getRead(), actualResponse.getRead());
>>>>>>> Check response fields in Java automate tests.
  }

  @Test
  @SuppressWarnings("all")
  public void listBooksTest() {
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    ListBooksResponse expectedResponse = ListBooksResponse.newBuilder()
=======
    Book booksElement = Book.newBuilder().build();
    List<Book> books = Arrays.asList(booksElement);
    String nextPageToken = "nextPageToken-1530815211";
    ListBooksResponse expectedResponse = ListBooksResponse.newBuilder()
      .addAllBooks(books)
      .setNextPageToken(nextPageToken)
>>>>>>> Check response fields in Java automate tests.
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatShelfName("[SHELF]");
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    String filter = "";
=======
    String filter = "filter-1274492040";
>>>>>>> Check response fields in Java automate tests.
    PageAccessor<Book> pageAccessor = api.listBooks(formattedName, filter);

    // PageAccessor will not make actual request until it is being used.
    // Add all the pages here in order to make grpc requests.
    List<Book> resources = Lists.newArrayList(pageAccessor.getPageValues());
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Assert.assertEquals(0, resources.size());
=======
    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getBooksList().get(0), resources.get(0));
>>>>>>> Check response fields in Java automate tests.

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    ListBooksRequest actualRequest = (ListBooksRequest)actualRequests.get(0);

<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Assert.assertEquals(actualRequest.getName(), formattedName);
    Assert.assertEquals(actualRequest.getFilter(), filter);
=======
    Assert.assertEquals(formattedName, actualRequest.getName());
    Assert.assertEquals(filter, actualRequest.getFilter());
>>>>>>> Check response fields in Java automate tests.
  }

  @Test
  @SuppressWarnings("all")
  public void deleteBookTest() {
    Empty expectedResponse = Empty.newBuilder()
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatBookName("[SHELF]", "[BOOK]");
    api.deleteBook(formattedName);

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    DeleteBookRequest actualRequest = (DeleteBookRequest)actualRequests.get(0);

<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Assert.assertEquals(actualRequest.getName(), formattedName);
=======
    Assert.assertEquals(formattedName, actualRequest.getName());
>>>>>>> Check response fields in Java automate tests.
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookTest() {
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Book expectedResponse = Book.newBuilder()
=======
    String formattedName2 = LibraryServiceApi.formatBookName("[SHELF]", "[BOOK]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setName(formattedName2)
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
>>>>>>> Check response fields in Java automate tests.
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatBookName("[SHELF]", "[BOOK]");
    Book book = Book.newBuilder().build();
    Book actualResponse =
        api.updateBook(formattedName, book);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    UpdateBookRequest actualRequest = (UpdateBookRequest)actualRequests.get(0);

<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Assert.assertEquals(actualRequest.getName(), formattedName);
    Assert.assertEquals(actualRequest.getBook(), book);
=======
    Assert.assertEquals(formattedName, actualRequest.getName());
    Assert.assertEquals(book, actualRequest.getBook());
    Assert.assertEquals(expectedResponse.getName(), actualResponse.getName());
    Assert.assertEquals(expectedResponse.getAuthor(), actualResponse.getAuthor());
    Assert.assertEquals(expectedResponse.getTitle(), actualResponse.getTitle());
    Assert.assertEquals(expectedResponse.getRead(), actualResponse.getRead());
>>>>>>> Check response fields in Java automate tests.
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookTest2() {
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Book expectedResponse = Book.newBuilder()
=======
    String formattedName2 = LibraryServiceApi.formatBookName("[SHELF]", "[BOOK]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setName(formattedName2)
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
>>>>>>> Check response fields in Java automate tests.
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatBookName("[SHELF]", "[BOOK]");
    Book book = Book.newBuilder().build();
    FieldMask updateMask = FieldMask.newBuilder().build();
    com.google.example.library.v1.FieldMask physicalMask = com.google.example.library.v1.FieldMask.newBuilder().build();
    Book actualResponse =
        api.updateBook(formattedName, book, updateMask, physicalMask);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    UpdateBookRequest actualRequest = (UpdateBookRequest)actualRequests.get(0);

<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Assert.assertEquals(actualRequest.getName(), formattedName);
    Assert.assertEquals(actualRequest.getBook(), book);
    Assert.assertEquals(actualRequest.getUpdateMask(), updateMask);
    Assert.assertEquals(actualRequest.getPhysicalMask(), physicalMask);
=======
    Assert.assertEquals(formattedName, actualRequest.getName());
    Assert.assertEquals(book, actualRequest.getBook());
    Assert.assertEquals(updateMask, actualRequest.getUpdateMask());
    Assert.assertEquals(physicalMask, actualRequest.getPhysicalMask());
    Assert.assertEquals(expectedResponse.getName(), actualResponse.getName());
    Assert.assertEquals(expectedResponse.getAuthor(), actualResponse.getAuthor());
    Assert.assertEquals(expectedResponse.getTitle(), actualResponse.getTitle());
    Assert.assertEquals(expectedResponse.getRead(), actualResponse.getRead());
>>>>>>> Check response fields in Java automate tests.
  }

  @Test
  @SuppressWarnings("all")
  public void moveBookTest() {
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Book expectedResponse = Book.newBuilder()
=======
    String formattedName2 = LibraryServiceApi.formatBookName("[SHELF]", "[BOOK]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setName(formattedName2)
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
>>>>>>> Check response fields in Java automate tests.
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatBookName("[SHELF]", "[BOOK]");
    String formattedOtherShelfName = LibraryServiceApi.formatShelfName("[SHELF]");
    Book actualResponse =
        api.moveBook(formattedName, formattedOtherShelfName);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    MoveBookRequest actualRequest = (MoveBookRequest)actualRequests.get(0);

<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Assert.assertEquals(actualRequest.getName(), formattedName);
    Assert.assertEquals(actualRequest.getOtherShelfName(), formattedOtherShelfName);
=======
    Assert.assertEquals(formattedName, actualRequest.getName());
    Assert.assertEquals(formattedOtherShelfName, actualRequest.getOtherShelfName());
    Assert.assertEquals(expectedResponse.getName(), actualResponse.getName());
    Assert.assertEquals(expectedResponse.getAuthor(), actualResponse.getAuthor());
    Assert.assertEquals(expectedResponse.getTitle(), actualResponse.getTitle());
    Assert.assertEquals(expectedResponse.getRead(), actualResponse.getRead());
>>>>>>> Check response fields in Java automate tests.
  }

  @Test
  @SuppressWarnings("all")
  public void listStringsTest() {
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    ListStringsResponse expectedResponse = ListStringsResponse.newBuilder()
=======
    String stringsElement = "stringsElement474465855";
    List<String> strings = Arrays.asList(stringsElement);
    String nextPageToken = "nextPageToken-1530815211";
    ListStringsResponse expectedResponse = ListStringsResponse.newBuilder()
      .addAllStrings(strings)
      .setNextPageToken(nextPageToken)
>>>>>>> Check response fields in Java automate tests.
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);


    PageAccessor<String> pageAccessor = api.listStrings();

    // PageAccessor will not make actual request until it is being used.
    // Add all the pages here in order to make grpc requests.
    List<String> resources = Lists.newArrayList(pageAccessor.getPageValues());
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Assert.assertEquals(0, resources.size());
=======
    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getStringsList().get(0), resources.get(0));
>>>>>>> Check response fields in Java automate tests.

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    ListStringsRequest actualRequest = (ListStringsRequest)actualRequests.get(0);

  }

  @Test
  @SuppressWarnings("all")
  public void addCommentsTest() {
    Empty expectedResponse = Empty.newBuilder()
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatBookName("[SHELF]", "[BOOK]");
    ByteString comment = ByteString.copyFromUtf8("9.5039855E7");
    Stage stage = Stage.UNSET;
    Comment commentsElement = Comment.newBuilder()
      .setComment(comment)
      .setStage(stage)
      .build();
    List<Comment> comments = Arrays.asList(commentsElement);
    api.addComments(formattedName, comments);

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    AddCommentsRequest actualRequest = (AddCommentsRequest)actualRequests.get(0);

<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Assert.assertEquals(actualRequest.getName(), formattedName);
    Assert.assertEquals(actualRequest.getCommentsList(), comments);
=======
    Assert.assertEquals(formattedName, actualRequest.getName());
    Assert.assertEquals(comments, actualRequest.getCommentsList());
>>>>>>> Check response fields in Java automate tests.
  }

  @Test
  @SuppressWarnings("all")
  public void getBookFromArchiveTest() {
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Book expectedResponse = Book.newBuilder()
=======
    String formattedName2 = LibraryServiceApi.formatArchivedBookName("[ARCHIVE_PATH]", "[BOOK]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setName(formattedName2)
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
>>>>>>> Check response fields in Java automate tests.
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916

    String formattedName = LibraryServiceApi.formatArchivedBookName("[ARCHIVE_PATH]", "[BOOK]");
    Book actualResponse =
        api.getBookFromArchive(formattedName);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetBookFromArchiveRequest actualRequest = (GetBookFromArchiveRequest)actualRequests.get(0);

    Assert.assertEquals(actualRequest.getName(), formattedName);
=======

    String formattedName = LibraryServiceApi.formatArchivedBookName("[ARCHIVE_PATH]", "[BOOK]");
    Book actualResponse =
        api.getBookFromArchive(formattedName);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetBookFromArchiveRequest actualRequest = (GetBookFromArchiveRequest)actualRequests.get(0);

    Assert.assertEquals(formattedName, actualRequest.getName());
    Assert.assertEquals(expectedResponse.getName(), actualResponse.getName());
    Assert.assertEquals(expectedResponse.getAuthor(), actualResponse.getAuthor());
    Assert.assertEquals(expectedResponse.getTitle(), actualResponse.getTitle());
    Assert.assertEquals(expectedResponse.getRead(), actualResponse.getRead());
>>>>>>> Check response fields in Java automate tests.
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookIndexTest() {
    Empty expectedResponse = Empty.newBuilder()
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatBookName("[SHELF]", "[BOOK]");
    String indexName = "indexName746962392";
    String indexMapItem = "indexMapItem1918721251";
    Map<String, String> indexMap = new HashMap<>();
    indexMap.put("default_key", indexMapItem);
    api.updateBookIndex(formattedName, indexName, indexMap);

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    UpdateBookIndexRequest actualRequest = (UpdateBookIndexRequest)actualRequests.get(0);

<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Assert.assertEquals(actualRequest.getName(), formattedName);
    Assert.assertEquals(actualRequest.getIndexName(), indexName);
    Assert.assertEquals(actualRequest.getIndexMap(), indexMap);
=======
    Assert.assertEquals(formattedName, actualRequest.getName());
    Assert.assertEquals(indexName, actualRequest.getIndexName());
    Assert.assertEquals(indexMap, actualRequest.getIndexMapList());
>>>>>>> Check response fields in Java automate tests.
  }

  @Test
  @SuppressWarnings("all")
  public void addTagTest() {
    AddTagResponse expectedResponse = AddTagResponse.newBuilder()
      .build();
    List<GeneratedMessage> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    serviceHelper.getService().setResponses(expectedResponses);

    String formattedResource = LibraryServiceApi.formatBookName("[SHELF]", "[BOOK]");
<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    String tag = "";
=======
    String tag = "tag114586";
>>>>>>> Check response fields in Java automate tests.
    AddTagResponse actualResponse =
        api.addTag(formattedResource, tag);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessage> actualRequests = serviceHelper.getService().getRequests();
    Assert.assertEquals(1, actualRequests.size());
    AddTagRequest actualRequest = (AddTagRequest)actualRequests.get(0);

<<<<<<< e606f95bc6bf50b1f0baabf90d36c5e5bee2b916
    Assert.assertEquals(actualRequest.getResource(), formattedResource);
    Assert.assertEquals(actualRequest.getTag(), tag);
=======
    Assert.assertEquals(formattedResource, actualRequest.getResource());
    Assert.assertEquals(tag, actualRequest.getTag());
>>>>>>> Check response fields in Java automate tests.
  }

}
