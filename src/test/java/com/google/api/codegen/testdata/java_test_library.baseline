============== file: src/test/java/com/google/gcloud/pubsub/v1/LibraryClientTest.java ==============
/*
 * Copyright 2017, Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.gcloud.pubsub.v1;

import com.google.api.gax.core.NoCredentialsProvider;
import com.google.api.gax.core.PagedListResponse;
import com.google.api.gax.grpc.ApiException;
import com.google.api.gax.grpc.ApiStreamObserver;
import com.google.api.gax.grpc.StreamingCallable;
import com.google.api.gax.grpc.testing.MockGrpcService;
import com.google.api.gax.grpc.testing.MockServiceHelper;
import com.google.api.gax.grpc.testing.MockStreamObserver;
import com.google.api.resourcenames.ResourceName;
import com.google.common.collect.Lists;
import com.google.example.library.v1.AddCommentsRequest;
import com.google.example.library.v1.ArchivedBookName;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookFromAnywhere;
import com.google.example.library.v1.BookFromArchive;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.BookNameOneof;
import com.google.example.library.v1.Comment;
import com.google.example.library.v1.Comment.Stage;
import com.google.example.library.v1.CreateBookRequest;
import com.google.example.library.v1.CreateShelfRequest;
import com.google.example.library.v1.DeleteBookRequest;
import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.DiscussBookRequest;
import com.google.example.library.v1.FindRelatedBooksRequest;
import com.google.example.library.v1.FindRelatedBooksResponse;
import com.google.example.library.v1.GetBookFromAnywhereRequest;
import com.google.example.library.v1.GetBookFromArchiveRequest;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.GetShelfRequest;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.ListStringsRequest;
import com.google.example.library.v1.ListStringsResponse;
import com.google.example.library.v1.MergeShelvesRequest;
import com.google.example.library.v1.MoveBookRequest;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.SeriesUuid;
import com.google.example.library.v1.Shelf;
import com.google.example.library.v1.ShelfName;
import com.google.example.library.v1.SomeMessage;
import com.google.example.library.v1.SomeMessage2.SomeMessage3.Alignment;
import com.google.example.library.v1.StreamBooksRequest;
import com.google.example.library.v1.StreamShelvesRequest;
import com.google.example.library.v1.StreamShelvesResponse;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest.InnerEnum;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsRequest.InnerMessage;
import com.google.example.library.v1.TestOptionalRequiredFlatteningParamsResponse;
import com.google.example.library.v1.UpdateBookIndexRequest;
import com.google.example.library.v1.UpdateBookRequest;
import static com.google.gcloud.pubsub.v1.PagedResponseWrappers.FindRelatedBooksPagedResponse;
import static com.google.gcloud.pubsub.v1.PagedResponseWrappers.ListBooksPagedResponse;
import static com.google.gcloud.pubsub.v1.PagedResponseWrappers.ListShelvesPagedResponse;
import static com.google.gcloud.pubsub.v1.PagedResponseWrappers.ListStringsPagedResponse;
import com.google.longrunning.Operation;
import com.google.protobuf.Any;
import com.google.protobuf.ByteString;
import com.google.protobuf.Empty;
import com.google.protobuf.FieldMask;
import com.google.protobuf.GeneratedMessageV3;
import com.google.tagger.v1.AddLabelRequest;
import com.google.tagger.v1.AddLabelResponse;
import com.google.tagger.v1.AddTagRequest;
import com.google.tagger.v1.AddTagResponse;
import io.grpc.Status;
import io.grpc.StatusRuntimeException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

@javax.annotation.Generated("by GAPIC")
public class LibraryClientTest {
  private static MockLibraryService mockLibraryService;
  private static MockLabeler mockLabeler;
  private static MockServiceHelper serviceHelper;
  private LibraryClient client;

  @BeforeClass
  public static void startStaticServer() {
    mockLibraryService = new MockLibraryService();
    mockLabeler = new MockLabeler();
    serviceHelper = new MockServiceHelper("in-process-1", Arrays.<MockGrpcService>asList(mockLibraryService, mockLabeler));
    serviceHelper.start();
  }

  @AfterClass
  public static void stopServer() {
    serviceHelper.stop();
  }

  @Before
  public void setUp() throws IOException {
    serviceHelper.reset();
    LibrarySettings settings = LibrarySettings.defaultBuilder()
        .setChannelProvider(serviceHelper.createChannelProvider())
        .setCredentialsProvider(new NoCredentialsProvider())
        .build();
    client = LibraryClient.create(settings);
  }

  @After
  public void tearDown() throws Exception {
    client.close();
  }

  @Test
  @SuppressWarnings("all")
  public void createShelfTest() {
    ShelfName name = ShelfName.create("[SHELF_ID]");
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setNameWithShelfName(name)
      .setTheme(theme)
      .setInternalTheme(internalTheme)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    Shelf shelf = Shelf.newBuilder().build();

    Shelf actualResponse =
        client.createShelf(shelf);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    CreateShelfRequest actualRequest = (CreateShelfRequest)actualRequests.get(0);

    Assert.assertEquals(shelf, actualRequest.getShelf());
  }

  @Test
  @SuppressWarnings("all")
  public void createShelfExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      Shelf shelf = Shelf.newBuilder().build();

      client.createShelf(shelf);
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfTest() {
    ShelfName name2 = ShelfName.create("[SHELF_ID]");
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setNameWithShelfName(name2)
      .setTheme(theme)
      .setInternalTheme(internalTheme)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    ShelfName name = ShelfName.create("[SHELF_ID]");

    Shelf actualResponse =
        client.getShelf(name);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetShelfRequest actualRequest = (GetShelfRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsShelfName());
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      ShelfName name = ShelfName.create("[SHELF_ID]");

      client.getShelf(name);
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfTest2() {
    ShelfName name2 = ShelfName.create("[SHELF_ID]");
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setNameWithShelfName(name2)
      .setTheme(theme)
      .setInternalTheme(internalTheme)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    String formattedName = ShelfName.create("[SHELF_ID]").toString();
    SomeMessage message = SomeMessage.newBuilder().build();

    Shelf actualResponse =
        client.getShelf(formattedName, message);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetShelfRequest actualRequest = (GetShelfRequest)actualRequests.get(0);

    Assert.assertEquals(formattedName, actualRequest.getName());
    Assert.assertEquals(message, actualRequest.getMessage());
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfExceptionTest2() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      String formattedName = ShelfName.create("[SHELF_ID]").toString();
      SomeMessage message = SomeMessage.newBuilder().build();

      client.getShelf(formattedName, message);
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfTest3() {
    ShelfName name2 = ShelfName.create("[SHELF_ID]");
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setNameWithShelfName(name2)
      .setTheme(theme)
      .setInternalTheme(internalTheme)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    String formattedName = ShelfName.create("[SHELF_ID]").toString();
    SomeMessage message = SomeMessage.newBuilder().build();
    com.google.example.library.v1.StringBuilder stringBuilder = com.google.example.library.v1.StringBuilder.newBuilder().build();

    Shelf actualResponse =
        client.getShelf(formattedName, message, stringBuilder);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetShelfRequest actualRequest = (GetShelfRequest)actualRequests.get(0);

    Assert.assertEquals(formattedName, actualRequest.getName());
    Assert.assertEquals(message, actualRequest.getMessage());
    Assert.assertEquals(stringBuilder, actualRequest.getStringBuilder());
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfExceptionTest3() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      String formattedName = ShelfName.create("[SHELF_ID]").toString();
      SomeMessage message = SomeMessage.newBuilder().build();
      com.google.example.library.v1.StringBuilder stringBuilder = com.google.example.library.v1.StringBuilder.newBuilder().build();

      client.getShelf(formattedName, message, stringBuilder);
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void listShelvesTest() {
    String nextPageToken = "";
    Shelf shelvesElement = Shelf.newBuilder().build();
    List<Shelf> shelves = Arrays.asList(shelvesElement);
    ListShelvesResponse expectedResponse = ListShelvesResponse.newBuilder()
      .setNextPageToken(nextPageToken)
      .addAllShelves(shelves)
      .build();
    mockLibraryService.addResponse(expectedResponse);



    ListShelvesPagedResponse pagedListResponse = client.listShelves();

    List<Shelf> resources = Lists.newArrayList(pagedListResponse.iterateAll());
    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getShelvesList().get(0), resources.get(0));

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    ListShelvesRequest actualRequest = (ListShelvesRequest)actualRequests.get(0);

  }

  @Test
  @SuppressWarnings("all")
  public void listShelvesExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {


      client.listShelves();
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void deleteShelfTest() {
    Empty expectedResponse = Empty.newBuilder().build();
    mockLibraryService.addResponse(expectedResponse);

    ShelfName name = ShelfName.create("[SHELF_ID]");

    client.deleteShelf(name);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    DeleteShelfRequest actualRequest = (DeleteShelfRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsShelfName());
  }

  @Test
  @SuppressWarnings("all")
  public void deleteShelfExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      ShelfName name = ShelfName.create("[SHELF_ID]");

      client.deleteShelf(name);
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void mergeShelvesTest() {
    ShelfName name2 = ShelfName.create("[SHELF_ID]");
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setNameWithShelfName(name2)
      .setTheme(theme)
      .setInternalTheme(internalTheme)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    ShelfName name = ShelfName.create("[SHELF_ID]");
    ShelfName otherShelfName = ShelfName.create("[SHELF_ID]");

    Shelf actualResponse =
        client.mergeShelves(name, otherShelfName);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    MergeShelvesRequest actualRequest = (MergeShelvesRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsShelfName());
    Assert.assertEquals(otherShelfName, actualRequest.getOtherShelfNameAsShelfName());
  }

  @Test
  @SuppressWarnings("all")
  public void mergeShelvesExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      ShelfName name = ShelfName.create("[SHELF_ID]");
      ShelfName otherShelfName = ShelfName.create("[SHELF_ID]");

      client.mergeShelves(name, otherShelfName);
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void createBookTest() {
    BookName name2 = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setNameWithBookName(name2)
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    String formattedName = ShelfName.create("[SHELF_ID]").toString();
    Book book = Book.newBuilder().build();

    Book actualResponse =
        client.createBook(formattedName, book);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    CreateBookRequest actualRequest = (CreateBookRequest)actualRequests.get(0);

    Assert.assertEquals(formattedName, actualRequest.getName());
    Assert.assertEquals(book, actualRequest.getBook());
  }

  @Test
  @SuppressWarnings("all")
  public void createBookExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      String formattedName = ShelfName.create("[SHELF_ID]").toString();
      Book book = Book.newBuilder().build();

      client.createBook(formattedName, book);
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void publishSeriesTest() {
    String bookNamesElement = "bookNamesElement1491670575";
    List<String> bookNames = Arrays.asList(bookNamesElement);
    PublishSeriesResponse expectedResponse = PublishSeriesResponse.newBuilder()
      .addAllBookNames(bookNames)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    Shelf shelf = Shelf.newBuilder().build();
    List<Book> books = new ArrayList<>();
    int edition = -1887963714;
    String seriesString = "foobar";
    SeriesUuid seriesUuid = SeriesUuid.newBuilder()
      .setSeriesString(seriesString)
      .build();

    PublishSeriesResponse actualResponse =
        client.publishSeries(shelf, books, edition, seriesUuid);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    PublishSeriesRequest actualRequest = (PublishSeriesRequest)actualRequests.get(0);

    Assert.assertEquals(shelf, actualRequest.getShelf());
    Assert.assertEquals(books, actualRequest.getBooksList());
    Assert.assertEquals(edition, actualRequest.getEdition());
    Assert.assertEquals(seriesUuid, actualRequest.getSeriesUuid());
  }

  @Test
  @SuppressWarnings("all")
  public void publishSeriesExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      Shelf shelf = Shelf.newBuilder().build();
      List<Book> books = new ArrayList<>();
      int edition = -1887963714;
      String seriesString = "foobar";
      SeriesUuid seriesUuid = SeriesUuid.newBuilder()
        .setSeriesString(seriesString)
        .build();

      client.publishSeries(shelf, books, edition, seriesUuid);
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getBookTest() {
    BookName name2 = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setNameWithBookName(name2)
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");

    Book actualResponse =
        client.getBook(name);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetBookRequest actualRequest = (GetBookRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsBookName());
  }

  @Test
  @SuppressWarnings("all")
  public void getBookExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");

      client.getBook(name);
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void listBooksTest() {
    String nextPageToken = "";
    Book booksElement = Book.newBuilder().build();
    List<Book> books = Arrays.asList(booksElement);
    ListBooksResponse expectedResponse = ListBooksResponse.newBuilder()
      .setNextPageToken(nextPageToken)
      .addAllBooks(books)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    ShelfName name = ShelfName.create("[SHELF_ID]");
    String filter = "filter-1274492040";

    ListBooksPagedResponse pagedListResponse = client.listBooks(name, filter);

    List<Book> resources = Lists.newArrayList(pagedListResponse.iterateAll());
    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getBooksList().get(0), resources.get(0));

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    ListBooksRequest actualRequest = (ListBooksRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsShelfName());
    Assert.assertEquals(filter, actualRequest.getFilter());
  }

  @Test
  @SuppressWarnings("all")
  public void listBooksExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      ShelfName name = ShelfName.create("[SHELF_ID]");
      String filter = "filter-1274492040";

      client.listBooks(name, filter);
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void deleteBookTest() {
    Empty expectedResponse = Empty.newBuilder().build();
    mockLibraryService.addResponse(expectedResponse);

    BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");

    client.deleteBook(name);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    DeleteBookRequest actualRequest = (DeleteBookRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsBookName());
  }

  @Test
  @SuppressWarnings("all")
  public void deleteBookExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");

      client.deleteBook(name);
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookTest() {
    BookName name2 = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setNameWithBookName(name2)
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    Book book = Book.newBuilder().build();

    Book actualResponse =
        client.updateBook(name, book);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    UpdateBookRequest actualRequest = (UpdateBookRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsBookName());
    Assert.assertEquals(book, actualRequest.getBook());
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
      Book book = Book.newBuilder().build();

      client.updateBook(name, book);
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookTest2() {
    BookName name2 = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setNameWithBookName(name2)
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    Book book = Book.newBuilder().build();
    FieldMask updateMask = FieldMask.newBuilder().build();
    com.google.example.library.v1.FieldMask physicalMask = com.google.example.library.v1.FieldMask.newBuilder().build();

    Book actualResponse =
        client.updateBook(name, book, updateMask, physicalMask);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    UpdateBookRequest actualRequest = (UpdateBookRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsBookName());
    Assert.assertEquals(book, actualRequest.getBook());
    Assert.assertEquals(updateMask, actualRequest.getUpdateMask());
    Assert.assertEquals(physicalMask, actualRequest.getPhysicalMask());
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookExceptionTest2() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
      Book book = Book.newBuilder().build();
      FieldMask updateMask = FieldMask.newBuilder().build();
      com.google.example.library.v1.FieldMask physicalMask = com.google.example.library.v1.FieldMask.newBuilder().build();

      client.updateBook(name, book, updateMask, physicalMask);
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void moveBookTest() {
    BookName name2 = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setNameWithBookName(name2)
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    ShelfName otherShelfName = ShelfName.create("[SHELF_ID]");

    Book actualResponse =
        client.moveBook(name, otherShelfName);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    MoveBookRequest actualRequest = (MoveBookRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsBookName());
    Assert.assertEquals(otherShelfName, actualRequest.getOtherShelfNameAsShelfName());
  }

  @Test
  @SuppressWarnings("all")
  public void moveBookExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
      ShelfName otherShelfName = ShelfName.create("[SHELF_ID]");

      client.moveBook(name, otherShelfName);
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void listStringsTest() {
    String nextPageToken = "";
    ResourceName stringsElement = ShelfName.create("[SHELF_ID]");
    List<ResourceName> strings = Arrays.asList(stringsElement);
    ListStringsResponse expectedResponse = ListStringsResponse.newBuilder()
      .setNextPageToken(nextPageToken)
      .addAllStringsWithResourceNameList(strings)
      .build();
    mockLibraryService.addResponse(expectedResponse);



    ListStringsPagedResponse pagedListResponse = client.listStrings();

    List<String> resources = Lists.newArrayList(pagedListResponse.iterateAll());
    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getStringsList().get(0), resources.get(0));
    List<ResourceName> resourceNames = Lists.newArrayList(pagedListResponse.iterateAllAsResourceName());
    Assert.assertEquals(1, resourceNames.size());
    Assert.assertEquals(expectedResponse.getStringsListAsResourceNameList().get(0), resourceNames.get(0));

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    ListStringsRequest actualRequest = (ListStringsRequest)actualRequests.get(0);

  }

  @Test
  @SuppressWarnings("all")
  public void listStringsExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {


      client.listStrings();
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void listStringsTest2() {
    String nextPageToken = "";
    ResourceName stringsElement = ShelfName.create("[SHELF_ID]");
    List<ResourceName> strings = Arrays.asList(stringsElement);
    ListStringsResponse expectedResponse = ListStringsResponse.newBuilder()
      .setNextPageToken(nextPageToken)
      .addAllStringsWithResourceNameList(strings)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    ResourceName name = ShelfName.create("[SHELF_ID]");

    ListStringsPagedResponse pagedListResponse = client.listStrings(name);

    List<String> resources = Lists.newArrayList(pagedListResponse.iterateAll());
    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getStringsList().get(0), resources.get(0));
    List<ResourceName> resourceNames = Lists.newArrayList(pagedListResponse.iterateAllAsResourceName());
    Assert.assertEquals(1, resourceNames.size());
    Assert.assertEquals(expectedResponse.getStringsListAsResourceNameList().get(0), resourceNames.get(0));

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    ListStringsRequest actualRequest = (ListStringsRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsResourceName());
  }

  @Test
  @SuppressWarnings("all")
  public void listStringsExceptionTest2() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      ResourceName name = ShelfName.create("[SHELF_ID]");

      client.listStrings(name);
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void addCommentsTest() {
    Empty expectedResponse = Empty.newBuilder().build();
    mockLibraryService.addResponse(expectedResponse);

    String formattedName = BookName.create("[SHELF_ID]", "[BOOK_ID]").toString();
    ByteString comment = ByteString.copyFromUtf8("95");
    Comment.Stage stage = Comment.Stage.UNSET;
    SomeMessage2.SomeMessage3.Alignment alignment = SomeMessage2.SomeMessage3.Alignment.CHAR;
    Comment commentsElement = Comment.newBuilder()
      .setComment(comment)
      .setStage(stage)
      .setAlignment(alignment)
      .build();
    List<Comment> comments = Arrays.asList(commentsElement);

    client.addComments(formattedName, comments);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    AddCommentsRequest actualRequest = (AddCommentsRequest)actualRequests.get(0);

    Assert.assertEquals(formattedName, actualRequest.getName());
    Assert.assertEquals(comments, actualRequest.getCommentsList());
  }

  @Test
  @SuppressWarnings("all")
  public void addCommentsExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      String formattedName = BookName.create("[SHELF_ID]", "[BOOK_ID]").toString();
      ByteString comment = ByteString.copyFromUtf8("95");
      Comment.Stage stage = Comment.Stage.UNSET;
      SomeMessage2.SomeMessage3.Alignment alignment = SomeMessage2.SomeMessage3.Alignment.CHAR;
      Comment commentsElement = Comment.newBuilder()
        .setComment(comment)
        .setStage(stage)
        .setAlignment(alignment)
        .build();
      List<Comment> comments = Arrays.asList(commentsElement);

      client.addComments(formattedName, comments);
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getBookFromArchiveTest() {
    ArchivedBookName name2 = ArchivedBookName.create("[ARCHIVE_PATH]", "[BOOK_ID]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    BookFromArchive expectedResponse = BookFromArchive.newBuilder()
      .setNameWithArchivedBookName(name2)
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    ArchivedBookName name = ArchivedBookName.create("[ARCHIVE_PATH]", "[BOOK_ID]");

    BookFromArchive actualResponse =
        client.getBookFromArchive(name);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetBookFromArchiveRequest actualRequest = (GetBookFromArchiveRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsArchivedBookName());
  }

  @Test
  @SuppressWarnings("all")
  public void getBookFromArchiveExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      ArchivedBookName name = ArchivedBookName.create("[ARCHIVE_PATH]", "[BOOK_ID]");

      client.getBookFromArchive(name);
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getBookFromAnywhereTest() {
    BookNameOneof name2 = BookNameOneof.from(BookName.create("[SHELF_ID]", "[BOOK_ID]"));
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    BookFromAnywhere expectedResponse = BookFromAnywhere.newBuilder()
      .setNameWithBookNameOneof(name2)
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    BookNameOneof name = BookNameOneof.from(BookName.create("[SHELF_ID]", "[BOOK_ID]"));
    BookName altBookName = BookName.create("[SHELF_ID]", "[BOOK_ID]");

    BookFromAnywhere actualResponse =
        client.getBookFromAnywhere(name, altBookName);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetBookFromAnywhereRequest actualRequest = (GetBookFromAnywhereRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsBookNameOneof());
    Assert.assertEquals(BookNameOneof.from(altBookName), actualRequest.getAltBookNameAsBookNameOneof());
  }

  @Test
  @SuppressWarnings("all")
  public void getBookFromAnywhereExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      BookNameOneof name = BookNameOneof.from(BookName.create("[SHELF_ID]", "[BOOK_ID]"));
      BookName altBookName = BookName.create("[SHELF_ID]", "[BOOK_ID]");

      client.getBookFromAnywhere(name, altBookName);
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookIndexTest() {
    Empty expectedResponse = Empty.newBuilder().build();
    mockLibraryService.addResponse(expectedResponse);

    BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    String indexName = "default index";
    String indexMapItem = "indexMapItem1918721251";
    Map<String, String> indexMap = new HashMap<>();
    indexMap.put("default_key", indexMapItem);

    client.updateBookIndex(name, indexName, indexMap);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    UpdateBookIndexRequest actualRequest = (UpdateBookIndexRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsBookName());
    Assert.assertEquals(indexName, actualRequest.getIndexName());
    Assert.assertEquals(indexMap, actualRequest.getIndexMapMap());
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookIndexExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
      String indexName = "default index";
      String indexMapItem = "indexMapItem1918721251";
      Map<String, String> indexMap = new HashMap<>();
      indexMap.put("default_key", indexMapItem);

      client.updateBookIndex(name, indexName, indexMap);
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void streamShelvesTest() throws Exception {
    Shelf shelvesElement = Shelf.newBuilder().build();
    List<Shelf> shelves = Arrays.asList(shelvesElement);
    StreamShelvesResponse expectedResponse = StreamShelvesResponse.newBuilder()
      .addAllShelves(shelves)
      .build();
    mockLibraryService.addResponse(expectedResponse);
    StreamShelvesRequest request = StreamShelvesRequest.newBuilder().build();

    MockStreamObserver<StreamShelvesResponse> responseObserver = new MockStreamObserver<>();

    StreamingCallable<StreamShelvesRequest, StreamShelvesResponse> callable =
        client.streamShelvesCallable();
    callable.serverStreamingCall(request, responseObserver);

    List<StreamShelvesResponse> actualResponses = responseObserver.future().get();
    Assert.assertEquals(1, actualResponses.size());
    Assert.assertEquals(expectedResponse, actualResponses.get(0));
  }

  @Test
  @SuppressWarnings("all")
  public void streamShelvesExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);
    StreamShelvesRequest request = StreamShelvesRequest.newBuilder().build();

    MockStreamObserver<StreamShelvesResponse> responseObserver = new MockStreamObserver<>();

    StreamingCallable<StreamShelvesRequest, StreamShelvesResponse> callable =
        client.streamShelvesCallable();
    callable.serverStreamingCall(request, responseObserver);

    try {
      List<StreamShelvesResponse> actualResponses = responseObserver.future().get();
      Assert.fail("No exception thrown");
    } catch (ExecutionException e) {
      Assert.assertTrue(e.getCause() instanceof StatusRuntimeException);
      StatusRuntimeException statusException = (StatusRuntimeException) e.getCause();
      Assert.assertEquals(Status.INVALID_ARGUMENT, statusException.getStatus());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void streamBooksTest() throws Exception {
    BookName name2 = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setNameWithBookName(name2)
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    mockLibraryService.addResponse(expectedResponse);
    String name = "name3373707";
    StreamBooksRequest request = StreamBooksRequest.newBuilder()
      .setName(name)
      .build();

    MockStreamObserver<Book> responseObserver = new MockStreamObserver<>();

    StreamingCallable<StreamBooksRequest, Book> callable =
        client.streamBooksCallable();
    callable.serverStreamingCall(request, responseObserver);

    List<Book> actualResponses = responseObserver.future().get();
    Assert.assertEquals(1, actualResponses.size());
    Assert.assertEquals(expectedResponse, actualResponses.get(0));
  }

  @Test
  @SuppressWarnings("all")
  public void streamBooksExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);
    String name = "name3373707";
    StreamBooksRequest request = StreamBooksRequest.newBuilder()
      .setName(name)
      .build();

    MockStreamObserver<Book> responseObserver = new MockStreamObserver<>();

    StreamingCallable<StreamBooksRequest, Book> callable =
        client.streamBooksCallable();
    callable.serverStreamingCall(request, responseObserver);

    try {
      List<Book> actualResponses = responseObserver.future().get();
      Assert.fail("No exception thrown");
    } catch (ExecutionException e) {
      Assert.assertTrue(e.getCause() instanceof StatusRuntimeException);
      StatusRuntimeException statusException = (StatusRuntimeException) e.getCause();
      Assert.assertEquals(Status.INVALID_ARGUMENT, statusException.getStatus());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void discussBookTest() throws Exception {
    String userName = "userName339340927";
    ByteString comment = ByteString.copyFromUtf8("95");
    Comment expectedResponse = Comment.newBuilder()
      .setUserName(userName)
      .setComment(comment)
      .build();
    mockLibraryService.addResponse(expectedResponse);
    String name = "name3373707";
    DiscussBookRequest request = DiscussBookRequest.newBuilder()
      .setName(name)
      .build();

    MockStreamObserver<Comment> responseObserver = new MockStreamObserver<>();

    StreamingCallable<DiscussBookRequest, Comment> callable =
        client.discussBookCallable();
    ApiStreamObserver<DiscussBookRequest> requestObserver =
        callable.bidiStreamingCall(responseObserver);

    requestObserver.onNext(request);
    requestObserver.onCompleted();

    List<Comment> actualResponses = responseObserver.future().get();
    Assert.assertEquals(1, actualResponses.size());
    Assert.assertEquals(expectedResponse, actualResponses.get(0));
  }

  @Test
  @SuppressWarnings("all")
  public void discussBookExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);
    String name = "name3373707";
    DiscussBookRequest request = DiscussBookRequest.newBuilder()
      .setName(name)
      .build();

    MockStreamObserver<Comment> responseObserver = new MockStreamObserver<>();

    StreamingCallable<DiscussBookRequest, Comment> callable =
        client.discussBookCallable();
    ApiStreamObserver<DiscussBookRequest> requestObserver =
        callable.bidiStreamingCall(responseObserver);

    requestObserver.onNext(request);

    try {
      List<Comment> actualResponses = responseObserver.future().get();
      Assert.fail("No exception thrown");
    } catch (ExecutionException e) {
      Assert.assertTrue(e.getCause() instanceof StatusRuntimeException);
      StatusRuntimeException statusException = (StatusRuntimeException) e.getCause();
      Assert.assertEquals(Status.INVALID_ARGUMENT, statusException.getStatus());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void findRelatedBooksTest() {
    String nextPageToken = "";
    BookName namesElement2 = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    List<BookName> names2 = Arrays.asList(namesElement2);
    FindRelatedBooksResponse expectedResponse = FindRelatedBooksResponse.newBuilder()
      .setNextPageToken(nextPageToken)
      .addAllNamesWithBookNameList(names2)
      .build();
    mockLibraryService.addResponse(expectedResponse);

    BookName namesElement = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    List<BookName> names = Arrays.asList(namesElement);
    List<ShelfName> shelves = new ArrayList<>();

    FindRelatedBooksPagedResponse pagedListResponse = client.findRelatedBooks(names, shelves);

    List<String> resources = Lists.newArrayList(pagedListResponse.iterateAll());
    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getNamesList().get(0), resources.get(0));
    List<BookName> resourceNames = Lists.newArrayList(pagedListResponse.iterateAllAsBookName());
    Assert.assertEquals(1, resourceNames.size());
    Assert.assertEquals(expectedResponse.getNamesListAsBookNameList().get(0), resourceNames.get(0));

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    FindRelatedBooksRequest actualRequest = (FindRelatedBooksRequest)actualRequests.get(0);

    Assert.assertEquals(names, actualRequest.getNamesListAsBookNameList());
    Assert.assertEquals(shelves, actualRequest.getShelvesListAsShelfNameList());
  }

  @Test
  @SuppressWarnings("all")
  public void findRelatedBooksExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      BookName namesElement = BookName.create("[SHELF_ID]", "[BOOK_ID]");
      List<BookName> names = Arrays.asList(namesElement);
      List<ShelfName> shelves = new ArrayList<>();

      client.findRelatedBooks(names, shelves);
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void addTagTest() {
    AddTagResponse expectedResponse = AddTagResponse.newBuilder().build();
    mockLibraryService.addResponse(expectedResponse);

    String formattedResource = BookName.create("[SHELF_ID]", "[BOOK_ID]").toString();
    String tag = "tag114586";

    AddTagResponse actualResponse =
        client.addTag(formattedResource, tag);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    AddTagRequest actualRequest = (AddTagRequest)actualRequests.get(0);

    Assert.assertEquals(formattedResource, actualRequest.getResource());
    Assert.assertEquals(tag, actualRequest.getTag());
  }

  @Test
  @SuppressWarnings("all")
  public void addTagExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      String formattedResource = BookName.create("[SHELF_ID]", "[BOOK_ID]").toString();
      String tag = "tag114586";

      client.addTag(formattedResource, tag);
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void addLabelTest() {
    AddLabelResponse expectedResponse = AddLabelResponse.newBuilder().build();
    mockLabeler.addResponse(expectedResponse);

    String formattedResource = BookName.create("[SHELF_ID]", "[BOOK_ID]").toString();
    String label = "label102727412";

    AddLabelResponse actualResponse =
        client.addLabel(formattedResource, label);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLabeler.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    AddLabelRequest actualRequest = (AddLabelRequest)actualRequests.get(0);

    Assert.assertEquals(formattedResource, actualRequest.getResource());
    Assert.assertEquals(label, actualRequest.getLabel());
  }

  @Test
  @SuppressWarnings("all")
  public void addLabelExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLabeler.addException(exception);

    try {
      String formattedResource = BookName.create("[SHELF_ID]", "[BOOK_ID]").toString();
      String label = "label102727412";

      client.addLabel(formattedResource, label);
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void getBigBookTest() throws Exception {
    BookName name2 = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setNameWithBookName(name2)
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    Operation resultOperation =
        Operation.newBuilder()
            .setName("getBigBookTest")
            .setDone(true)
            .setResponse(Any.pack(expectedResponse))
            .build();
    mockLibraryService.addResponse(resultOperation);

    BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");

    Book actualResponse =
        client.getBigBookAsync(name).get();
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetBookRequest actualRequest = (GetBookRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsBookName());
  }

  @Test
  @SuppressWarnings("all")
  public void getBigBookExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");

      client.getBigBookAsync(name).get();
      Assert.fail("No exception raised");
    } catch (ExecutionException e) {
      Assert.assertEquals(ApiException.class, e.getCause().getClass());
      ApiException apiException = (ApiException) e.getCause();
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), apiException.getStatusCode());
    }
  }


  @Test
  @SuppressWarnings("all")
  public void getBigNothingTest() throws Exception {
    Empty expectedResponse = Empty.newBuilder().build();
    Operation resultOperation =
        Operation.newBuilder()
            .setName("getBigNothingTest")
            .setDone(true)
            .setResponse(Any.pack(expectedResponse))
            .build();
    mockLibraryService.addResponse(resultOperation);

    BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");

    Empty actualResponse =
        client.getBigNothingAsync(name).get();
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetBookRequest actualRequest = (GetBookRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsBookName());
  }

  @Test
  @SuppressWarnings("all")
  public void getBigNothingExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");

      client.getBigNothingAsync(name).get();
      Assert.fail("No exception raised");
    } catch (ExecutionException e) {
      Assert.assertEquals(ApiException.class, e.getCause().getClass());
      ApiException apiException = (ApiException) e.getCause();
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), apiException.getStatusCode());
    }
  }


  @Test
  @SuppressWarnings("all")
  public void testOptionalRequiredFlatteningParamsTest() {
    TestOptionalRequiredFlatteningParamsResponse expectedResponse = TestOptionalRequiredFlatteningParamsResponse.newBuilder().build();
    mockLibraryService.addResponse(expectedResponse);



    TestOptionalRequiredFlatteningParamsResponse actualResponse =
        client.testOptionalRequiredFlatteningParams();
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    TestOptionalRequiredFlatteningParamsRequest actualRequest = (TestOptionalRequiredFlatteningParamsRequest)actualRequests.get(0);

  }

  @Test
  @SuppressWarnings("all")
  public void testOptionalRequiredFlatteningParamsExceptionTest() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {


      client.testOptionalRequiredFlatteningParams();
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

  @Test
  @SuppressWarnings("all")
  public void testOptionalRequiredFlatteningParamsTest2() {
    TestOptionalRequiredFlatteningParamsResponse expectedResponse = TestOptionalRequiredFlatteningParamsResponse.newBuilder().build();
    mockLibraryService.addResponse(expectedResponse);

    int requiredSingularInt32 = -72313594;
    long requiredSingularInt64 = -72313499L;
    float requiredSingularFloat = -7514705.0F;
    double requiredSingularDouble = 1.9111005E8;
    boolean requiredSingularBool = true;
    TestOptionalRequiredFlatteningParamsRequest.InnerEnum requiredSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
    String requiredSingularString = "requiredSingularString-1949894503";
    ByteString requiredSingularBytes = ByteString.copyFromUtf8("-29");
    TestOptionalRequiredFlatteningParamsRequest.InnerMessage requiredSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
    BookName requiredSingularResourceName = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    BookNameOneof requiredSingularResourceNameOneof = BookNameOneof.from(BookName.create("[SHELF_ID]", "[BOOK_ID]"));
    int requiredSingularFixed32 = 720656715;
    long requiredSingularFixed64 = 720656810;
    List<Integer> requiredRepeatedInt32 = new ArrayList<>();
    List<Long> requiredRepeatedInt64 = new ArrayList<>();
    List<Float> requiredRepeatedFloat = new ArrayList<>();
    List<Double> requiredRepeatedDouble = new ArrayList<>();
    List<Boolean> requiredRepeatedBool = new ArrayList<>();
    List<TestOptionalRequiredFlatteningParamsRequest.InnerEnum> requiredRepeatedEnum = new ArrayList<>();
    List<String> requiredRepeatedString = new ArrayList<>();
    List<ByteString> requiredRepeatedBytes = new ArrayList<>();
    List<TestOptionalRequiredFlatteningParamsRequest.InnerMessage> requiredRepeatedMessage = new ArrayList<>();
    List<BookName> requiredRepeatedResourceName = new ArrayList<>();
    List<BookNameOneof> requiredRepeatedResourceNameOneof = new ArrayList<>();
    List<Integer> requiredRepeatedFixed32 = new ArrayList<>();
    List<Long> requiredRepeatedFixed64 = new ArrayList<>();
    Map<Integer, String> requiredMap = new HashMap<>();
    int optionalSingularInt32 = -1196565723;
    long optionalSingularInt64 = -1196565628L;
    float optionalSingularFloat = -1.19939918E8F;
    double optionalSingularDouble = 1.41902287E8;
    boolean optionalSingularBool = false;
    TestOptionalRequiredFlatteningParamsRequest.InnerEnum optionalSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
    String optionalSingularString = "optionalSingularString1852995162";
    ByteString optionalSingularBytes = ByteString.copyFromUtf8("2");
    TestOptionalRequiredFlatteningParamsRequest.InnerMessage optionalSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
    BookName optionalSingularResourceName = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    BookNameOneof optionalSingularResourceNameOneof = BookNameOneof.from(BookName.create("[SHELF_ID]", "[BOOK_ID]"));
    int optionalSingularFixed32 = -1648847958;
    long optionalSingularFixed64 = -1648847863;
    List<Integer> optionalRepeatedInt32 = new ArrayList<>();
    List<Long> optionalRepeatedInt64 = new ArrayList<>();
    List<Float> optionalRepeatedFloat = new ArrayList<>();
    List<Double> optionalRepeatedDouble = new ArrayList<>();
    List<Boolean> optionalRepeatedBool = new ArrayList<>();
    List<TestOptionalRequiredFlatteningParamsRequest.InnerEnum> optionalRepeatedEnum = new ArrayList<>();
    List<String> optionalRepeatedString = new ArrayList<>();
    List<ByteString> optionalRepeatedBytes = new ArrayList<>();
    List<TestOptionalRequiredFlatteningParamsRequest.InnerMessage> optionalRepeatedMessage = new ArrayList<>();
    List<BookName> optionalRepeatedResourceName = new ArrayList<>();
    List<BookNameOneof> optionalRepeatedResourceNameOneof = new ArrayList<>();
    List<Integer> optionalRepeatedFixed32 = new ArrayList<>();
    List<Long> optionalRepeatedFixed64 = new ArrayList<>();
    Map<Integer, String> optionalMap = new HashMap<>();

    TestOptionalRequiredFlatteningParamsResponse actualResponse =
        client.testOptionalRequiredFlatteningParams(requiredSingularInt32, requiredSingularInt64, requiredSingularFloat, requiredSingularDouble, requiredSingularBool, requiredSingularEnum, requiredSingularString, requiredSingularBytes, requiredSingularMessage, requiredSingularResourceName, requiredSingularResourceNameOneof, requiredSingularFixed32, requiredSingularFixed64, requiredRepeatedInt32, requiredRepeatedInt64, requiredRepeatedFloat, requiredRepeatedDouble, requiredRepeatedBool, requiredRepeatedEnum, requiredRepeatedString, requiredRepeatedBytes, requiredRepeatedMessage, requiredRepeatedResourceName, requiredRepeatedResourceNameOneof, requiredRepeatedFixed32, requiredRepeatedFixed64, requiredMap, optionalSingularInt32, optionalSingularInt64, optionalSingularFloat, optionalSingularDouble, optionalSingularBool, optionalSingularEnum, optionalSingularString, optionalSingularBytes, optionalSingularMessage, optionalSingularResourceName, optionalSingularResourceNameOneof, optionalSingularFixed32, optionalSingularFixed64, optionalRepeatedInt32, optionalRepeatedInt64, optionalRepeatedFloat, optionalRepeatedDouble, optionalRepeatedBool, optionalRepeatedEnum, optionalRepeatedString, optionalRepeatedBytes, optionalRepeatedMessage, optionalRepeatedResourceName, optionalRepeatedResourceNameOneof, optionalRepeatedFixed32, optionalRepeatedFixed64, optionalMap);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    TestOptionalRequiredFlatteningParamsRequest actualRequest = (TestOptionalRequiredFlatteningParamsRequest)actualRequests.get(0);

    Assert.assertEquals(requiredSingularInt32, actualRequest.getRequiredSingularInt32());
    Assert.assertEquals(requiredSingularInt64, actualRequest.getRequiredSingularInt64());
    Assert.assertEquals(requiredSingularFloat, actualRequest.getRequiredSingularFloat());
    Assert.assertEquals(requiredSingularDouble, actualRequest.getRequiredSingularDouble());
    Assert.assertEquals(requiredSingularBool, actualRequest.getRequiredSingularBool());
    Assert.assertEquals(requiredSingularEnum, actualRequest.getRequiredSingularEnum());
    Assert.assertEquals(requiredSingularString, actualRequest.getRequiredSingularString());
    Assert.assertEquals(requiredSingularBytes, actualRequest.getRequiredSingularBytes());
    Assert.assertEquals(requiredSingularMessage, actualRequest.getRequiredSingularMessage());
    Assert.assertEquals(requiredSingularResourceName, actualRequest.getRequiredSingularResourceNameAsBookName());
    Assert.assertEquals(requiredSingularResourceNameOneof, actualRequest.getRequiredSingularResourceNameOneofAsBookNameOneof());
    Assert.assertEquals(requiredSingularFixed32, actualRequest.getRequiredSingularFixed32());
    Assert.assertEquals(requiredSingularFixed64, actualRequest.getRequiredSingularFixed64());
    Assert.assertEquals(requiredRepeatedInt32, actualRequest.getRequiredRepeatedInt32List());
    Assert.assertEquals(requiredRepeatedInt64, actualRequest.getRequiredRepeatedInt64List());
    Assert.assertEquals(requiredRepeatedFloat, actualRequest.getRequiredRepeatedFloatList());
    Assert.assertEquals(requiredRepeatedDouble, actualRequest.getRequiredRepeatedDoubleList());
    Assert.assertEquals(requiredRepeatedBool, actualRequest.getRequiredRepeatedBoolList());
    Assert.assertEquals(requiredRepeatedEnum, actualRequest.getRequiredRepeatedEnumList());
    Assert.assertEquals(requiredRepeatedString, actualRequest.getRequiredRepeatedStringList());
    Assert.assertEquals(requiredRepeatedBytes, actualRequest.getRequiredRepeatedBytesList());
    Assert.assertEquals(requiredRepeatedMessage, actualRequest.getRequiredRepeatedMessageList());
    Assert.assertEquals(requiredRepeatedResourceName, actualRequest.getRequiredRepeatedResourceNameListAsBookNameList());
    Assert.assertEquals(requiredRepeatedResourceNameOneof, actualRequest.getRequiredRepeatedResourceNameOneofListAsBookNameOneofList());
    Assert.assertEquals(requiredRepeatedFixed32, actualRequest.getRequiredRepeatedFixed32List());
    Assert.assertEquals(requiredRepeatedFixed64, actualRequest.getRequiredRepeatedFixed64List());
    Assert.assertEquals(requiredMap, actualRequest.getRequiredMapMap());
    Assert.assertEquals(optionalSingularInt32, actualRequest.getOptionalSingularInt32());
    Assert.assertEquals(optionalSingularInt64, actualRequest.getOptionalSingularInt64());
    Assert.assertEquals(optionalSingularFloat, actualRequest.getOptionalSingularFloat());
    Assert.assertEquals(optionalSingularDouble, actualRequest.getOptionalSingularDouble());
    Assert.assertEquals(optionalSingularBool, actualRequest.getOptionalSingularBool());
    Assert.assertEquals(optionalSingularEnum, actualRequest.getOptionalSingularEnum());
    Assert.assertEquals(optionalSingularString, actualRequest.getOptionalSingularString());
    Assert.assertEquals(optionalSingularBytes, actualRequest.getOptionalSingularBytes());
    Assert.assertEquals(optionalSingularMessage, actualRequest.getOptionalSingularMessage());
    Assert.assertEquals(optionalSingularResourceName, actualRequest.getOptionalSingularResourceNameAsBookName());
    Assert.assertEquals(optionalSingularResourceNameOneof, actualRequest.getOptionalSingularResourceNameOneofAsBookNameOneof());
    Assert.assertEquals(optionalSingularFixed32, actualRequest.getOptionalSingularFixed32());
    Assert.assertEquals(optionalSingularFixed64, actualRequest.getOptionalSingularFixed64());
    Assert.assertEquals(optionalRepeatedInt32, actualRequest.getOptionalRepeatedInt32List());
    Assert.assertEquals(optionalRepeatedInt64, actualRequest.getOptionalRepeatedInt64List());
    Assert.assertEquals(optionalRepeatedFloat, actualRequest.getOptionalRepeatedFloatList());
    Assert.assertEquals(optionalRepeatedDouble, actualRequest.getOptionalRepeatedDoubleList());
    Assert.assertEquals(optionalRepeatedBool, actualRequest.getOptionalRepeatedBoolList());
    Assert.assertEquals(optionalRepeatedEnum, actualRequest.getOptionalRepeatedEnumList());
    Assert.assertEquals(optionalRepeatedString, actualRequest.getOptionalRepeatedStringList());
    Assert.assertEquals(optionalRepeatedBytes, actualRequest.getOptionalRepeatedBytesList());
    Assert.assertEquals(optionalRepeatedMessage, actualRequest.getOptionalRepeatedMessageList());
    Assert.assertEquals(optionalRepeatedResourceName, actualRequest.getOptionalRepeatedResourceNameListAsBookNameList());
    Assert.assertEquals(optionalRepeatedResourceNameOneof, actualRequest.getOptionalRepeatedResourceNameOneofListAsBookNameOneofList());
    Assert.assertEquals(optionalRepeatedFixed32, actualRequest.getOptionalRepeatedFixed32List());
    Assert.assertEquals(optionalRepeatedFixed64, actualRequest.getOptionalRepeatedFixed64List());
    Assert.assertEquals(optionalMap, actualRequest.getOptionalMapMap());
  }

  @Test
  @SuppressWarnings("all")
  public void testOptionalRequiredFlatteningParamsExceptionTest2() throws Exception {
    StatusRuntimeException exception = new StatusRuntimeException(Status.INVALID_ARGUMENT);
    mockLibraryService.addException(exception);

    try {
      int requiredSingularInt32 = -72313594;
      long requiredSingularInt64 = -72313499L;
      float requiredSingularFloat = -7514705.0F;
      double requiredSingularDouble = 1.9111005E8;
      boolean requiredSingularBool = true;
      TestOptionalRequiredFlatteningParamsRequest.InnerEnum requiredSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
      String requiredSingularString = "requiredSingularString-1949894503";
      ByteString requiredSingularBytes = ByteString.copyFromUtf8("-29");
      TestOptionalRequiredFlatteningParamsRequest.InnerMessage requiredSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
      BookName requiredSingularResourceName = BookName.create("[SHELF_ID]", "[BOOK_ID]");
      BookNameOneof requiredSingularResourceNameOneof = BookNameOneof.from(BookName.create("[SHELF_ID]", "[BOOK_ID]"));
      int requiredSingularFixed32 = 720656715;
      long requiredSingularFixed64 = 720656810;
      List<Integer> requiredRepeatedInt32 = new ArrayList<>();
      List<Long> requiredRepeatedInt64 = new ArrayList<>();
      List<Float> requiredRepeatedFloat = new ArrayList<>();
      List<Double> requiredRepeatedDouble = new ArrayList<>();
      List<Boolean> requiredRepeatedBool = new ArrayList<>();
      List<TestOptionalRequiredFlatteningParamsRequest.InnerEnum> requiredRepeatedEnum = new ArrayList<>();
      List<String> requiredRepeatedString = new ArrayList<>();
      List<ByteString> requiredRepeatedBytes = new ArrayList<>();
      List<TestOptionalRequiredFlatteningParamsRequest.InnerMessage> requiredRepeatedMessage = new ArrayList<>();
      List<BookName> requiredRepeatedResourceName = new ArrayList<>();
      List<BookNameOneof> requiredRepeatedResourceNameOneof = new ArrayList<>();
      List<Integer> requiredRepeatedFixed32 = new ArrayList<>();
      List<Long> requiredRepeatedFixed64 = new ArrayList<>();
      Map<Integer, String> requiredMap = new HashMap<>();
      int optionalSingularInt32 = -1196565723;
      long optionalSingularInt64 = -1196565628L;
      float optionalSingularFloat = -1.19939918E8F;
      double optionalSingularDouble = 1.41902287E8;
      boolean optionalSingularBool = false;
      TestOptionalRequiredFlatteningParamsRequest.InnerEnum optionalSingularEnum = TestOptionalRequiredFlatteningParamsRequest.InnerEnum.ZERO;
      String optionalSingularString = "optionalSingularString1852995162";
      ByteString optionalSingularBytes = ByteString.copyFromUtf8("2");
      TestOptionalRequiredFlatteningParamsRequest.InnerMessage optionalSingularMessage = TestOptionalRequiredFlatteningParamsRequest.InnerMessage.newBuilder().build();
      BookName optionalSingularResourceName = BookName.create("[SHELF_ID]", "[BOOK_ID]");
      BookNameOneof optionalSingularResourceNameOneof = BookNameOneof.from(BookName.create("[SHELF_ID]", "[BOOK_ID]"));
      int optionalSingularFixed32 = -1648847958;
      long optionalSingularFixed64 = -1648847863;
      List<Integer> optionalRepeatedInt32 = new ArrayList<>();
      List<Long> optionalRepeatedInt64 = new ArrayList<>();
      List<Float> optionalRepeatedFloat = new ArrayList<>();
      List<Double> optionalRepeatedDouble = new ArrayList<>();
      List<Boolean> optionalRepeatedBool = new ArrayList<>();
      List<TestOptionalRequiredFlatteningParamsRequest.InnerEnum> optionalRepeatedEnum = new ArrayList<>();
      List<String> optionalRepeatedString = new ArrayList<>();
      List<ByteString> optionalRepeatedBytes = new ArrayList<>();
      List<TestOptionalRequiredFlatteningParamsRequest.InnerMessage> optionalRepeatedMessage = new ArrayList<>();
      List<BookName> optionalRepeatedResourceName = new ArrayList<>();
      List<BookNameOneof> optionalRepeatedResourceNameOneof = new ArrayList<>();
      List<Integer> optionalRepeatedFixed32 = new ArrayList<>();
      List<Long> optionalRepeatedFixed64 = new ArrayList<>();
      Map<Integer, String> optionalMap = new HashMap<>();

      client.testOptionalRequiredFlatteningParams(requiredSingularInt32, requiredSingularInt64, requiredSingularFloat, requiredSingularDouble, requiredSingularBool, requiredSingularEnum, requiredSingularString, requiredSingularBytes, requiredSingularMessage, requiredSingularResourceName, requiredSingularResourceNameOneof, requiredSingularFixed32, requiredSingularFixed64, requiredRepeatedInt32, requiredRepeatedInt64, requiredRepeatedFloat, requiredRepeatedDouble, requiredRepeatedBool, requiredRepeatedEnum, requiredRepeatedString, requiredRepeatedBytes, requiredRepeatedMessage, requiredRepeatedResourceName, requiredRepeatedResourceNameOneof, requiredRepeatedFixed32, requiredRepeatedFixed64, requiredMap, optionalSingularInt32, optionalSingularInt64, optionalSingularFloat, optionalSingularDouble, optionalSingularBool, optionalSingularEnum, optionalSingularString, optionalSingularBytes, optionalSingularMessage, optionalSingularResourceName, optionalSingularResourceNameOneof, optionalSingularFixed32, optionalSingularFixed64, optionalRepeatedInt32, optionalRepeatedInt64, optionalRepeatedFloat, optionalRepeatedDouble, optionalRepeatedBool, optionalRepeatedEnum, optionalRepeatedString, optionalRepeatedBytes, optionalRepeatedMessage, optionalRepeatedResourceName, optionalRepeatedResourceNameOneof, optionalRepeatedFixed32, optionalRepeatedFixed64, optionalMap);
      Assert.fail("No exception raised");
    } catch (ApiException e) {
      Assert.assertEquals(Status.INVALID_ARGUMENT.getCode(), e.getStatusCode());
    }
  }

}
