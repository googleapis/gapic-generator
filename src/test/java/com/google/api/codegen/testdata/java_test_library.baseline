============== file: src/test/java/com/google/gcloud/pubsub/spi/LibraryServiceTest.java ==============
/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

package com.google.gcloud.pubsub.spi;

import com.google.api.gax.core.PagedListResponse;
import com.google.api.gax.grpc.StreamingApiCallable;
import com.google.api.gax.testing.MockGrpcService;
import com.google.api.gax.testing.MockServiceHelper;
import com.google.api.gax.testing.MockStreamObserver;
import com.google.common.collect.Lists;
import com.google.example.library.v1.AddCommentsRequest;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.BookName;
import com.google.example.library.v1.Comment;
import com.google.example.library.v1.Comment.Stage;
import com.google.example.library.v1.CreateBookRequest;
import com.google.example.library.v1.CreateShelfRequest;
import com.google.example.library.v1.DeleteBookRequest;
import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.DiscussBookRequest;
import com.google.example.library.v1.FindRelatedBooksRequest;
import com.google.example.library.v1.FindRelatedBooksResponse;
import com.google.example.library.v1.GetBookFromArchiveRequest;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.GetShelfRequest;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.ListStringsRequest;
import com.google.example.library.v1.ListStringsResponse;
import com.google.example.library.v1.MergeShelvesRequest;
import com.google.example.library.v1.MoveBookRequest;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.Shelf;
import com.google.example.library.v1.ShelfName;
import com.google.example.library.v1.SomeMessage;
import com.google.example.library.v1.SomeMessage2.SomeMessage3.Alignment;
import com.google.example.library.v1.StreamBooksRequest;
import com.google.example.library.v1.StreamShelvesRequest;
import com.google.example.library.v1.StreamShelvesResponse;
import com.google.example.library.v1.UpdateBookIndexRequest;
import com.google.example.library.v1.UpdateBookRequest;
import static com.google.gcloud.pubsub.spi.PagedResponseWrappers.FindRelatedBooksPagedResponse;
import static com.google.gcloud.pubsub.spi.PagedResponseWrappers.ListBooksPagedResponse;
import static com.google.gcloud.pubsub.spi.PagedResponseWrappers.ListShelvesPagedResponse;
import static com.google.gcloud.pubsub.spi.PagedResponseWrappers.ListStringsPagedResponse;
import com.google.longrunning.Operation;
import com.google.protobuf.ByteString;
import com.google.protobuf.Empty;
import com.google.protobuf.FieldMask;
import com.google.protobuf.GeneratedMessageV3;
import com.google.tagger.v1.AddLabelRequest;
import com.google.tagger.v1.AddLabelResponse;
import com.google.tagger.v1.AddTagRequest;
import com.google.tagger.v1.AddTagResponse;
import io.grpc.stub.StreamObserver;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

@javax.annotation.Generated("by GAPIC")
public class LibraryServiceTest {
  private static MockLibraryService mockLibraryService;
  private static MockLabeler mockLabeler;
  private static MockServiceHelper serviceHelper;
  private LibraryServiceApi api;

  @BeforeClass
  public static void startStaticServer() {
    mockLibraryService = new MockLibraryService();
    mockLabeler = new MockLabeler();
    serviceHelper = new MockServiceHelper("in-process-1", Arrays.<MockGrpcService>asList(mockLibraryService, mockLabeler));
    serviceHelper.start();
  }

  @AfterClass
  public static void stopServer() {
    serviceHelper.stop();
  }

  @Before
  public void setUp() throws IOException {
    serviceHelper.reset();
    LibraryServiceSettings settings = LibraryServiceSettings.defaultBuilder()
        .provideChannelWith(serviceHelper.createChannel(), true)
        .build();
    api = LibraryServiceApi.create(settings);
  }

  @After
  public void tearDown() throws Exception {
    api.close();
  }

  @Test
  @SuppressWarnings("all")
  public void createShelfTest() {
    ShelfName name = ShelfName.create("[SHELF_ID]");
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setNameWithResource(name)
      .setTheme(theme)
      .setInternalTheme(internalTheme)
      .build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);

    Shelf shelf = Shelf.newBuilder().build();

    Shelf actualResponse =
        api.createShelf(shelf);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    CreateShelfRequest actualRequest = (CreateShelfRequest)actualRequests.get(0);

    Assert.assertEquals(shelf, actualRequest.getShelf());
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfTest() {
    ShelfName name2 = ShelfName.create("[SHELF_ID]");
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setNameWithResource(name2)
      .setTheme(theme)
      .setInternalTheme(internalTheme)
      .build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);

    ShelfName name = ShelfName.create("[SHELF_ID]");

    Shelf actualResponse =
        api.getShelf(name);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetShelfRequest actualRequest = (GetShelfRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsResource());
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfTest2() {
    ShelfName name2 = ShelfName.create("[SHELF_ID]");
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setNameWithResource(name2)
      .setTheme(theme)
      .setInternalTheme(internalTheme)
      .build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);

    ShelfName name = ShelfName.create("[SHELF_ID]");
    SomeMessage message = SomeMessage.newBuilder().build();

    Shelf actualResponse =
        api.getShelf(name, message);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetShelfRequest actualRequest = (GetShelfRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsResource());
    Assert.assertEquals(message, actualRequest.getMessage());
  }

  @Test
  @SuppressWarnings("all")
  public void getShelfTest3() {
    ShelfName name2 = ShelfName.create("[SHELF_ID]");
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setNameWithResource(name2)
      .setTheme(theme)
      .setInternalTheme(internalTheme)
      .build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);

    ShelfName name = ShelfName.create("[SHELF_ID]");
    SomeMessage message = SomeMessage.newBuilder().build();
    com.google.example.library.v1.StringBuilder stringBuilder = com.google.example.library.v1.StringBuilder.newBuilder().build();

    Shelf actualResponse =
        api.getShelf(name, message, stringBuilder);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetShelfRequest actualRequest = (GetShelfRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsResource());
    Assert.assertEquals(message, actualRequest.getMessage());
    Assert.assertEquals(stringBuilder, actualRequest.getStringBuilder());
  }

  @Test
  @SuppressWarnings("all")
  public void listShelvesTest() {
    String nextPageToken = "";
    Shelf shelvesElement = Shelf.newBuilder().build();
    List<Shelf> shelves = Arrays.asList(shelvesElement);
    ListShelvesResponse expectedResponse = ListShelvesResponse.newBuilder()
      .setNextPageToken(nextPageToken)
      .addAllShelves(shelves)
      .build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);



    ListShelvesPagedResponse pagedListResponse = api.listShelves();

    List<Shelf> resources = Lists.newArrayList(pagedListResponse.iterateAllElements());
    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getShelvesList().get(0), resources.get(0));

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    ListShelvesRequest actualRequest = (ListShelvesRequest)actualRequests.get(0);

  }

  @Test
  @SuppressWarnings("all")
  public void deleteShelfTest() {
    Empty expectedResponse = Empty.newBuilder().build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);

    ShelfName name = ShelfName.create("[SHELF_ID]");

    api.deleteShelf(name);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    DeleteShelfRequest actualRequest = (DeleteShelfRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsResource());
  }

  @Test
  @SuppressWarnings("all")
  public void mergeShelvesTest() {
    ShelfName name2 = ShelfName.create("[SHELF_ID]");
    String theme = "theme110327241";
    String internalTheme = "internalTheme792518087";
    Shelf expectedResponse = Shelf.newBuilder()
      .setNameWithResource(name2)
      .setTheme(theme)
      .setInternalTheme(internalTheme)
      .build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);

    ShelfName name = ShelfName.create("[SHELF_ID]");
    ShelfName otherShelfName = ShelfName.create("[SHELF_ID]");

    Shelf actualResponse =
        api.mergeShelves(name, otherShelfName);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    MergeShelvesRequest actualRequest = (MergeShelvesRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsResource());
    Assert.assertEquals(otherShelfName, actualRequest.getOtherShelfNameAsResource());
  }

  @Test
  @SuppressWarnings("all")
  public void createBookTest() {
    BookName name2 = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setNameWithResource(name2)
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);

    ShelfName name = ShelfName.create("[SHELF_ID]");
    Book book = Book.newBuilder().build();

    Book actualResponse =
        api.createBook(name, book);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    CreateBookRequest actualRequest = (CreateBookRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsResource());
    Assert.assertEquals(book, actualRequest.getBook());
  }

  @Test
  @SuppressWarnings("all")
  public void publishSeriesTest() {
    String bookNamesElement = "bookNamesElement1491670575";
    List<String> bookNames = Arrays.asList(bookNamesElement);
    PublishSeriesResponse expectedResponse = PublishSeriesResponse.newBuilder()
      .addAllBookNames(bookNames)
      .build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);

    Shelf shelf = Shelf.newBuilder().build();
    List<Book> books = new ArrayList<>();
    int edition = -1887963714;

    PublishSeriesResponse actualResponse =
        api.publishSeries(shelf, books, edition);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    PublishSeriesRequest actualRequest = (PublishSeriesRequest)actualRequests.get(0);

    Assert.assertEquals(shelf, actualRequest.getShelf());
    Assert.assertEquals(books, actualRequest.getBooksList());
    Assert.assertEquals(edition, actualRequest.getEdition());
  }

  @Test
  @SuppressWarnings("all")
  public void getBookTest() {
    BookName name2 = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setNameWithResource(name2)
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);

    BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");

    Book actualResponse =
        api.getBook(name);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetBookRequest actualRequest = (GetBookRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsResource());
  }

  @Test
  @SuppressWarnings("all")
  public void listBooksTest() {
    String nextPageToken = "";
    Book booksElement = Book.newBuilder().build();
    List<Book> books = Arrays.asList(booksElement);
    ListBooksResponse expectedResponse = ListBooksResponse.newBuilder()
      .setNextPageToken(nextPageToken)
      .addAllBooks(books)
      .build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);

    ShelfName name = ShelfName.create("[SHELF_ID]");
    String filter = "filter-1274492040";

    ListBooksPagedResponse pagedListResponse = api.listBooks(name, filter);

    List<Book> resources = Lists.newArrayList(pagedListResponse.iterateAllElements());
    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getBooksList().get(0), resources.get(0));

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    ListBooksRequest actualRequest = (ListBooksRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsResource());
    Assert.assertEquals(filter, actualRequest.getFilter());
  }

  @Test
  @SuppressWarnings("all")
  public void deleteBookTest() {
    Empty expectedResponse = Empty.newBuilder().build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);

    BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");

    api.deleteBook(name);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    DeleteBookRequest actualRequest = (DeleteBookRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsResource());
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookTest() {
    BookName name2 = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setNameWithResource(name2)
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);

    BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    Book book = Book.newBuilder().build();

    Book actualResponse =
        api.updateBook(name, book);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    UpdateBookRequest actualRequest = (UpdateBookRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsResource());
    Assert.assertEquals(book, actualRequest.getBook());
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookTest2() {
    BookName name2 = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setNameWithResource(name2)
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);

    BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    Book book = Book.newBuilder().build();
    FieldMask updateMask = FieldMask.newBuilder().build();
    com.google.example.library.v1.FieldMask physicalMask = com.google.example.library.v1.FieldMask.newBuilder().build();

    Book actualResponse =
        api.updateBook(name, book, updateMask, physicalMask);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    UpdateBookRequest actualRequest = (UpdateBookRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsResource());
    Assert.assertEquals(book, actualRequest.getBook());
    Assert.assertEquals(updateMask, actualRequest.getUpdateMask());
    Assert.assertEquals(physicalMask, actualRequest.getPhysicalMask());
  }

  @Test
  @SuppressWarnings("all")
  public void moveBookTest() {
    BookName name2 = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setNameWithResource(name2)
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);

    BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    ShelfName otherShelfName = ShelfName.create("[SHELF_ID]");

    Book actualResponse =
        api.moveBook(name, otherShelfName);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    MoveBookRequest actualRequest = (MoveBookRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsResource());
    Assert.assertEquals(otherShelfName, actualRequest.getOtherShelfNameAsResource());
  }

  @Test
  @SuppressWarnings("all")
  public void listStringsTest() {
    String nextPageToken = "";
    String stringsElement = "stringsElement474465855";
    List<String> strings = Arrays.asList(stringsElement);
    ListStringsResponse expectedResponse = ListStringsResponse.newBuilder()
      .setNextPageToken(nextPageToken)
      .addAllStrings(strings)
      .build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);



    ListStringsPagedResponse pagedListResponse = api.listStrings();

    List<String> resources = Lists.newArrayList(pagedListResponse.iterateAllElements());
    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getStringsList().get(0), resources.get(0));

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    ListStringsRequest actualRequest = (ListStringsRequest)actualRequests.get(0);

  }

  @Test
  @SuppressWarnings("all")
  public void addCommentsTest() {
    Empty expectedResponse = Empty.newBuilder().build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);

    String formattedName = LibraryServiceApi.formatBookName("[SHELF_ID]", "[BOOK_ID]");
    ByteString comment = ByteString.copyFromUtf8("95");
    Comment.Stage stage = Comment.Stage.UNSET;
    SomeMessage2.SomeMessage3.Alignment alignment = SomeMessage2.SomeMessage3.Alignment.CHAR;
    Comment commentsElement = Comment.newBuilder()
      .setComment(comment)
      .setStage(stage)
      .setAlignment(alignment)
      .build();
    List<Comment> comments = Arrays.asList(commentsElement);

    api.addComments(formattedName, comments);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    AddCommentsRequest actualRequest = (AddCommentsRequest)actualRequests.get(0);

    Assert.assertEquals(formattedName, actualRequest.getName());
    Assert.assertEquals(comments, actualRequest.getCommentsList());
  }

  @Test
  @SuppressWarnings("all")
  public void getBookFromArchiveTest() {
    BookName name2 = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setNameWithResource(name2)
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);

    BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");

    Book actualResponse =
        api.getBookFromArchive(name);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetBookFromArchiveRequest actualRequest = (GetBookFromArchiveRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsResource());
  }

  @Test
  @SuppressWarnings("all")
  public void updateBookIndexTest() {
    Empty expectedResponse = Empty.newBuilder().build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);

    BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    String indexName = "default index";
    String indexMapItem = "indexMapItem1918721251";
    Map<String, String> indexMap = new HashMap<>();
    indexMap.put("default_key", indexMapItem);

    api.updateBookIndex(name, indexName, indexMap);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    UpdateBookIndexRequest actualRequest = (UpdateBookIndexRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsResource());
    Assert.assertEquals(indexName, actualRequest.getIndexName());
    Assert.assertEquals(indexMap, actualRequest.getIndexMap());
  }

  @Test
  @SuppressWarnings("all")
  public void streamShelvesTest() throws Exception {
    StreamShelvesResponse expectedResponse = StreamShelvesResponse.newBuilder().build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);
    StreamShelvesRequest request = StreamShelvesRequest.newBuilder().build();

    MockStreamObserver<StreamShelvesResponse> responseObserver = new MockStreamObserver<>();

    StreamingApiCallable<StreamShelvesRequest, StreamShelvesResponse> callable =
        api.streamShelvesCallable();
    callable.serverStreamingCall(request, responseObserver);

    List<StreamShelvesResponse> actualResponses = responseObserver.future().get();
    Assert.assertEquals(1, actualResponses.size());
    Assert.assertEquals(expectedResponse, actualResponses.get(0));
    Assert.assertEquals(0, responseObserver.errors().size());
  }

  @Test
  @SuppressWarnings("all")
  public void streamBooksTest() throws Exception {
    BookName name2 = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    String author = "author-1406328437";
    String title = "title110371416";
    boolean read = true;
    Book expectedResponse = Book.newBuilder()
      .setNameWithResource(name2)
      .setAuthor(author)
      .setTitle(title)
      .setRead(read)
      .build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);
    String name = "name3373707";
    StreamBooksRequest request = StreamBooksRequest.newBuilder()
      .setName(name)
      .build();

    MockStreamObserver<Book> responseObserver = new MockStreamObserver<>();

    StreamingApiCallable<StreamBooksRequest, Book> callable =
        api.streamBooksCallable();
    callable.serverStreamingCall(request, responseObserver);

    List<Book> actualResponses = responseObserver.future().get();
    Assert.assertEquals(1, actualResponses.size());
    Assert.assertEquals(expectedResponse, actualResponses.get(0));
    Assert.assertEquals(0, responseObserver.errors().size());
  }

  @Test
  @SuppressWarnings("all")
  public void discussBookTest() throws Exception {
    String userName = "userName339340927";
    ByteString comment = ByteString.copyFromUtf8("95");
    Comment expectedResponse = Comment.newBuilder()
      .setUserName(userName)
      .setComment(comment)
      .build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);
    DiscussBookRequest request = DiscussBookRequest.newBuilder().build();

    MockStreamObserver<StreamingRecognizeResponse> responseObserver = new MockStreamObserver<>();

    StreamingApiCallable<DiscussBookRequest, Comment> callable =
        api.discussBookCallable();
    StreamObserver<DiscussBookRequest> requestObserver =
        callable.bidiStreamingCall(responseObserver);

    requestObserver.onNext(request);
    requestObserver.onCompleted();

    List<Comment> actualResponses = responseObserver.future().get();
    Assert.assertEquals(1, actualResponses.size());
    Assert.assertEquals(expectedResponse, actualResponses.get(0));
    Assert.assertEquals(0, responseObserver.errors().size());
  }

  @Test
  @SuppressWarnings("all")
  public void findRelatedBooksTest() {
    String nextPageToken = "";
    BookName namesElement2 = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    List<BookName> names2 = Arrays.asList(namesElement2);
    FindRelatedBooksResponse expectedResponse = FindRelatedBooksResponse.newBuilder()
      .setNextPageToken(nextPageToken)
      .addAllNamesWithResources(names2)
      .build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);

    BookName namesElement = BookName.create("[SHELF_ID]", "[BOOK_ID]");
    List<BookName> names = Arrays.asList(namesElement);
    List<ShelfName> shelves = new ArrayList<>();

    FindRelatedBooksPagedResponse pagedListResponse = api.findRelatedBooks(names, shelves);

    List<String> resources = Lists.newArrayList(pagedListResponse.iterateAllElements());
    Assert.assertEquals(1, resources.size());
    Assert.assertEquals(expectedResponse.getNamesList().get(0), resources.get(0));
    List<BookName> resourcesAsBookName = Lists.newArrayList(pagedListResponse.iterateAllAsBookName());
    Assert.assertEquals(1, resourcesAsBookName.size());
    Assert.assertEquals(expectedResponse.getNamesListAsResources().get(0), resourcesAsBookName.get(0));

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    FindRelatedBooksRequest actualRequest = (FindRelatedBooksRequest)actualRequests.get(0);

    Assert.assertEquals(names, actualRequest.getNamesListAsResources());
    Assert.assertEquals(shelves, actualRequest.getShelvesListAsResources());
  }

  @Test
  @SuppressWarnings("all")
  public void addTagTest() {
    AddTagResponse expectedResponse = AddTagResponse.newBuilder().build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);

    String formattedResource = LibraryServiceApi.formatBookName("[SHELF_ID]", "[BOOK_ID]");
    String tag = "tag114586";

    AddTagResponse actualResponse =
        api.addTag(formattedResource, tag);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    AddTagRequest actualRequest = (AddTagRequest)actualRequests.get(0);

    Assert.assertEquals(formattedResource, actualRequest.getResource());
    Assert.assertEquals(tag, actualRequest.getTag());
  }

  @Test
  @SuppressWarnings("all")
  public void addLabelTest() {
    AddLabelResponse expectedResponse = AddLabelResponse.newBuilder().build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLabeler.setResponses(expectedResponses);

    String formattedResource = LibraryServiceApi.formatBookName("[SHELF_ID]", "[BOOK_ID]");
    String label = "label102727412";

    AddLabelResponse actualResponse =
        api.addLabel(formattedResource, label);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLabeler.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    AddLabelRequest actualRequest = (AddLabelRequest)actualRequests.get(0);

    Assert.assertEquals(formattedResource, actualRequest.getResource());
    Assert.assertEquals(label, actualRequest.getLabel());
  }

  @Test
  @SuppressWarnings("all")
  public void getBigBookTest() {
    String name2 = "name2-1052831874";
    boolean done = true;
    Operation expectedResponse = Operation.newBuilder()
      .setName(name2)
      .setDone(done)
      .build();
    List<GeneratedMessageV3> expectedResponses = new ArrayList<>();
    expectedResponses.add(expectedResponse);
    mockLibraryService.setResponses(expectedResponses);

    BookName name = BookName.create("[SHELF_ID]", "[BOOK_ID]");

    Operation actualResponse =
        api.getBigBook(name);
    Assert.assertEquals(expectedResponse, actualResponse);

    List<GeneratedMessageV3> actualRequests = mockLibraryService.getRequests();
    Assert.assertEquals(1, actualRequests.size());
    GetBookRequest actualRequest = (GetBookRequest)actualRequests.get(0);

    Assert.assertEquals(name, actualRequest.getNameAsResource());
  }

}
