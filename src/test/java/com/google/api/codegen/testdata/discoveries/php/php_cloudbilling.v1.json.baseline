
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Billing API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudbilling
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Cloudbilling($client);


// TODO: Change placeholder below to desired parameter value for the `get` method:

// The resource name of the billing account to retrieve. For example,
// `billingAccounts/012345-567890-ABCDEF`.
$name = 'billingAccounts/{MY-BILLINGACCOUNT}';


$response = $service->billingAccounts->get($name);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Billing API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudbilling
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Cloudbilling($client);


$optParams = array();
do {
  $response = $service->billingAccounts->listBillingAccounts($optParams);

  foreach ($response['billingAccounts'] as $billing_account) {
    // TODO: Change code below to process each `billing_account` resource:
    echo '<pre>', var_export($billing_account, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Billing API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudbilling
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Cloudbilling($client);


// TODO: Change placeholder below to desired parameter value for the `listBillingAccountsProjects` method:

// The resource name of the billing account associated with the projects that you want to list. For
// example, `billingAccounts/012345-567890-ABCDEF`.
$name = 'billingAccounts/{MY-BILLINGACCOUNT}';


$optParams = array();
do {
  $response = $service->billingAccounts_projects->listBillingAccountsProjects($name, $optParams);

  foreach ($response['projectBillingInfo'] as $project_billing_info) {
    // TODO: Change code below to process each `project_billing_info` resource:
    echo '<pre>', var_export($project_billing_info, true), '</pre>', "\n";
  }

  $optParams['pageToken'] = $response->getNextPageToken();
} while ($optParams['pageToken']);
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Billing API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudbilling
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Cloudbilling($client);


// TODO: Change placeholder below to desired parameter value for the `getBillingInfo` method:

// The resource name of the project for which billing information is retrieved. For example,
// `projects/tokyo-rain-123`.
$name = 'projects/{MY-PROJECT}';


$response = $service->projects->getBillingInfo($name);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
<?php
/*
 * BEFORE RUNNING:
 * ---------------
 * 1. If not already done, enable the Google Cloud Billing API
 *    and check the quota for your project at
 *    https://console.developers.google.com/apis/api/cloudbilling
 * 2. This sample uses Application Default Credentials for authentication.
 *    If not already done, install the gcloud CLI from
 *    https://cloud.google.com/sdk/ and run
 *    `gcloud beta auth application-default login`
 * 3. Install the PHP client library with Composer. Check installation
 *    instructions at https://github.com/google/google-api-php-client.
 */

// Autoload Composer.
require_once __DIR__ . '/vendor/autoload.php';

// Use Application Default Credentials for authentication when running locally.
// For more information, see:
// https://developers.google.com/identity/protocols/application-default-credentials
$client = new Google_Client();
$client->setApplicationName('Google Cloud Platform Sample');
$client->useApplicationDefaultCredentials();
$client->addScope('https://www.googleapis.com/auth/cloud-platform');

$service = new Google_Service_Cloudbilling($client);


// TODO: Change placeholder below to desired parameter value for the `updateBillingInfo` method:

// The resource name of the project associated with the billing information that you want to update.
// For example, `projects/tokyo-rain-123`.
$name = 'projects/{MY-PROJECT}';


$requestBody = new Google_Service_Cloudbilling_ProjectBillingInfo();
// TODO: Assign values to desired properties of the `requestBody` object.


$response = $service->projects->updateBillingInfo($name, $requestBody);

// TODO: Change code below to process the `response` object:
echo '<pre>', var_export($response, true), '</pre>', "\n";
?>
