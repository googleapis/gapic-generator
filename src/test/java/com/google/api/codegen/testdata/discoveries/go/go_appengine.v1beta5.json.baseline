
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  appengineService, err := appengine.New(c)
  if err != nil {
    log.Fatal(err)
  }


  rb := appengine.Application{
    // TODO: Add desired fields of the request body.
  }

  resp, err := appengineService.Apps.Create(&rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  appengineService, err := appengine.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the application to get. Example: `apps/myapp`.
  appsId := "{MY-APPS-ID}"
  // TODO: Change placeholder value above.

  resp, err := appengineService.Apps.Get(appsId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  appengineService, err := appengine.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Resource name for the location.
  appsId := "{MY-APPS-ID}"
  // TODO: Change placeholder value above.

  // Part of `name`. See documentation of `appsId`.
  locationsId := "{MY-LOCATIONS-ID}"
  // TODO: Change placeholder value above.

  resp, err := appengineService.Apps.Locations.Get(appsId, locationsId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  appengineService, err := appengine.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. The resource that owns the locations collection, if applicable.
  appsId := "{MY-APPS-ID}"
  // TODO: Change placeholder value above.

  req := appengineService.Apps.Locations.List(appsId)
  if err := req.Pages(ctx, func(page *appengine.ListLocationsResponse) error {
    for _, location := range page.Locations {
      // TODO: Change code below to process each `location` resource:
      fmt.Printf("%#v\n", location)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  appengineService, err := appengine.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. The name of the operation resource.
  appsId := "{MY-APPS-ID}"
  // TODO: Change placeholder value above.

  // Part of `name`. See documentation of `appsId`.
  operationsId := "{MY-OPERATIONS-ID}"
  // TODO: Change placeholder value above.

  resp, err := appengineService.Apps.Operations.Get(appsId, operationsId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  appengineService, err := appengine.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. The name of the operation collection.
  appsId := "{MY-APPS-ID}"
  // TODO: Change placeholder value above.

  req := appengineService.Apps.Operations.List(appsId)
  if err := req.Pages(ctx, func(page *appengine.ListOperationsResponse) error {
    for _, operation := range page.Operations {
      // TODO: Change code below to process each `operation` resource:
      fmt.Printf("%#v\n", operation)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  appengineService, err := appengine.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the application to update. Example: `apps/myapp`.
  appsId := "{MY-APPS-ID}"
  // TODO: Change placeholder value above.

  rb := appengine.Application{
    // TODO: Add desired fields of the request body to be changed.
  }

  resp, err := appengineService.Apps.Patch(appsId, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  appengineService, err := appengine.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the resource requested. Example: `apps/myapp/services/default`.
  appsId := "{MY-APPS-ID}"
  // TODO: Change placeholder value above.

  // Part of `name`. See documentation of `appsId`.
  servicesId := "{MY-SERVICES-ID}"
  // TODO: Change placeholder value above.

  resp, err := appengineService.Apps.Services.Delete(appsId, servicesId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  appengineService, err := appengine.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the resource requested. Example: `apps/myapp/services/default`.
  appsId := "{MY-APPS-ID}"
  // TODO: Change placeholder value above.

  // Part of `name`. See documentation of `appsId`.
  servicesId := "{MY-SERVICES-ID}"
  // TODO: Change placeholder value above.

  resp, err := appengineService.Apps.Services.Get(appsId, servicesId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  appengineService, err := appengine.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the resource requested. Example: `apps/myapp`.
  appsId := "{MY-APPS-ID}"
  // TODO: Change placeholder value above.

  req := appengineService.Apps.Services.List(appsId)
  if err := req.Pages(ctx, func(page *appengine.ListServicesResponse) error {
    for _, service := range page.Services {
      // TODO: Change code below to process each `service` resource:
      fmt.Printf("%#v\n", service)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  appengineService, err := appengine.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the resource to update. Example: `apps/myapp/services/default`.
  appsId := "{MY-APPS-ID}"
  // TODO: Change placeholder value above.

  // Part of `name`. See documentation of `appsId`.
  servicesId := "{MY-SERVICES-ID}"
  // TODO: Change placeholder value above.

  rb := appengine.Service{
    // TODO: Add desired fields of the request body to be changed.
  }

  resp, err := appengineService.Apps.Services.Patch(appsId, servicesId, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  appengineService, err := appengine.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the resource to update. For example: "apps/myapp/services/default".
  appsId := "{MY-APPS-ID}"
  // TODO: Change placeholder value above.

  // Part of `name`. See documentation of `appsId`.
  servicesId := "{MY-SERVICES-ID}"
  // TODO: Change placeholder value above.

  rb := appengine.Version{
    // TODO: Add desired fields of the request body.
  }

  resp, err := appengineService.Apps.Services.Versions.Create(appsId, servicesId, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  appengineService, err := appengine.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the resource requested. Example: `apps/myapp/services/default/versions/v1`.
  appsId := "{MY-APPS-ID}"
  // TODO: Change placeholder value above.

  // Part of `name`. See documentation of `appsId`.
  servicesId := "{MY-SERVICES-ID}"
  // TODO: Change placeholder value above.

  // Part of `name`. See documentation of `appsId`.
  versionsId := "{MY-VERSIONS-ID}"
  // TODO: Change placeholder value above.

  resp, err := appengineService.Apps.Services.Versions.Delete(appsId, servicesId, versionsId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  appengineService, err := appengine.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the resource requested. Example: `apps/myapp/services/default/versions/v1`.
  appsId := "{MY-APPS-ID}"
  // TODO: Change placeholder value above.

  // Part of `name`. See documentation of `appsId`.
  servicesId := "{MY-SERVICES-ID}"
  // TODO: Change placeholder value above.

  // Part of `name`. See documentation of `appsId`.
  versionsId := "{MY-VERSIONS-ID}"
  // TODO: Change placeholder value above.

  resp, err := appengineService.Apps.Services.Versions.Get(appsId, servicesId, versionsId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  appengineService, err := appengine.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the resource requested. Example:
  // `apps/myapp/services/default/versions/v1/instances/instance-1`.
  appsId := "{MY-APPS-ID}"
  // TODO: Change placeholder value above.

  // Part of `name`. See documentation of `appsId`.
  servicesId := "{MY-SERVICES-ID}"
  // TODO: Change placeholder value above.

  // Part of `name`. See documentation of `appsId`.
  versionsId := "{MY-VERSIONS-ID}"
  // TODO: Change placeholder value above.

  // Part of `name`. See documentation of `appsId`.
  instancesId := "{MY-INSTANCES-ID}"
  // TODO: Change placeholder value above.

  rb := appengine.DebugInstanceRequest{
    // TODO: Add desired fields of the request body.
  }

  resp, err := appengineService.Apps.Services.Versions.Instances.Debug(appsId, servicesId, versionsId, instancesId, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  appengineService, err := appengine.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the resource requested. For example:
  // "apps/myapp/services/default/versions/v1/instances/instance-1".
  appsId := "{MY-APPS-ID}"
  // TODO: Change placeholder value above.

  // Part of `name`. See documentation of `appsId`.
  servicesId := "{MY-SERVICES-ID}"
  // TODO: Change placeholder value above.

  // Part of `name`. See documentation of `appsId`.
  versionsId := "{MY-VERSIONS-ID}"
  // TODO: Change placeholder value above.

  // Part of `name`. See documentation of `appsId`.
  instancesId := "{MY-INSTANCES-ID}"
  // TODO: Change placeholder value above.

  resp, err := appengineService.Apps.Services.Versions.Instances.Delete(appsId, servicesId, versionsId, instancesId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  appengineService, err := appengine.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the resource requested. Example:
  // `apps/myapp/services/default/versions/v1/instances/instance-1`.
  appsId := "{MY-APPS-ID}"
  // TODO: Change placeholder value above.

  // Part of `name`. See documentation of `appsId`.
  servicesId := "{MY-SERVICES-ID}"
  // TODO: Change placeholder value above.

  // Part of `name`. See documentation of `appsId`.
  versionsId := "{MY-VERSIONS-ID}"
  // TODO: Change placeholder value above.

  // Part of `name`. See documentation of `appsId`.
  instancesId := "{MY-INSTANCES-ID}"
  // TODO: Change placeholder value above.

  resp, err := appengineService.Apps.Services.Versions.Instances.Get(appsId, servicesId, versionsId, instancesId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  appengineService, err := appengine.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the resource requested. Example: `apps/myapp/services/default/versions/v1`.
  appsId := "{MY-APPS-ID}"
  // TODO: Change placeholder value above.

  // Part of `name`. See documentation of `appsId`.
  servicesId := "{MY-SERVICES-ID}"
  // TODO: Change placeholder value above.

  // Part of `name`. See documentation of `appsId`.
  versionsId := "{MY-VERSIONS-ID}"
  // TODO: Change placeholder value above.

  req := appengineService.Apps.Services.Versions.Instances.List(appsId, servicesId, versionsId)
  if err := req.Pages(ctx, func(page *appengine.ListInstancesResponse) error {
    for _, instance := range page.Instances {
      // TODO: Change code below to process each `instance` resource:
      fmt.Printf("%#v\n", instance)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  appengineService, err := appengine.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the resource requested. Example: `apps/myapp/services/default`.
  appsId := "{MY-APPS-ID}"
  // TODO: Change placeholder value above.

  // Part of `name`. See documentation of `appsId`.
  servicesId := "{MY-SERVICES-ID}"
  // TODO: Change placeholder value above.

  req := appengineService.Apps.Services.Versions.List(appsId, servicesId)
  if err := req.Pages(ctx, func(page *appengine.ListVersionsResponse) error {
    for _, version := range page.Versions {
      // TODO: Change code below to process each `version` resource:
      fmt.Printf("%#v\n", version)
    }
    return nil
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Use Application Default Credentials for authentication when running locally.
  // For more information, see:
  // https://developers.google.com/identity/protocols/application-default-credentials
  c, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  appengineService, err := appengine.New(c)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the resource to update. Example: `apps/myapp/services/default/versions/1`.
  appsId := "{MY-APPS-ID}"
  // TODO: Change placeholder value above.

  // Part of `name`. See documentation of `appsId`.
  servicesId := "{MY-SERVICES-ID}"
  // TODO: Change placeholder value above.

  // Part of `name`. See documentation of `appsId`.
  versionsId := "{MY-VERSIONS-ID}"
  // TODO: Change placeholder value above.

  rb := appengine.Version{
    // TODO: Add desired fields of the request body to be changed.
  }

  resp, err := appengineService.Apps.Services.Versions.Patch(appsId, servicesId, versionsId, &rb).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Change code below to process the `resp` object:
  fmt.Printf("%#v\n", resp)
}
