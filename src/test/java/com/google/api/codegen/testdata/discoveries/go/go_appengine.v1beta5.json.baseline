
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := appengine.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the application to get. For example: "apps/myapp".
  appsId := "{MY-APPS-ID}" // TODO: Update placeholder value(s).

  resp, err := s.Apps.Get(appsId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := appengine.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. The name of the operation resource.
  appsId := "{MY-APPS-ID}" // TODO: Update placeholder value(s).

  // Part of `name`. See documentation of `appsId`.
  operationsId := "{MY-OPERATIONS-ID}" // TODO: Update placeholder value(s).

  resp, err := s.Apps.Operations.Get(appsId, operationsId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := appengine.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. The name of the operation collection.
  appsId := "{MY-APPS-ID}" // TODO: Update placeholder value(s).

  call := s.Apps.Operations.List(appsId)
  if err := call.Pages(ctx, func(page *appengine.ListOperationsResponse) error {
    for _, operation := range page.Operations {
      // TODO: Use operation
      fmt.Printf("%#v\n", operation)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := appengine.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the resource requested. For example: "apps/myapp/services/default".
  appsId := "{MY-APPS-ID}" // TODO: Update placeholder value(s).

  // Part of `name`. See documentation of `appsId`.
  servicesId := "{MY-SERVICES-ID}" // TODO: Update placeholder value(s).

  resp, err := s.Apps.Services.Delete(appsId, servicesId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := appengine.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the resource requested. For example: "apps/myapp/services/default".
  appsId := "{MY-APPS-ID}" // TODO: Update placeholder value(s).

  // Part of `name`. See documentation of `appsId`.
  servicesId := "{MY-SERVICES-ID}" // TODO: Update placeholder value(s).

  resp, err := s.Apps.Services.Get(appsId, servicesId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := appengine.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the resource requested. For example: "apps/myapp".
  appsId := "{MY-APPS-ID}" // TODO: Update placeholder value(s).

  call := s.Apps.Services.List(appsId)
  if err := call.Pages(ctx, func(page *appengine.ListServicesResponse) error {
    for _, service := range page.Services {
      // TODO: Use service
      fmt.Printf("%#v\n", service)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := appengine.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the resource to update. For example: "apps/myapp/services/default".
  appsId := "{MY-APPS-ID}" // TODO: Update placeholder value(s).

  // Part of `name`. See documentation of `appsId`.
  servicesId := "{MY-SERVICES-ID}" // TODO: Update placeholder value(s).

  service := &appengine.Service{
    // TODO: Add the desired fields to be changed.
  }

  resp, err := s.Apps.Services.Patch(appsId, servicesId, &service).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := appengine.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the resource to update. For example: "apps/myapp/services/default".
  appsId := "{MY-APPS-ID}" // TODO: Update placeholder value(s).

  // Part of `name`. See documentation of `appsId`.
  servicesId := "{MY-SERVICES-ID}" // TODO: Update placeholder value(s).

  version := &appengine.Version{
    // TODO: Add the desired fields.
  }

  resp, err := s.Apps.Services.Versions.Create(appsId, servicesId, &version).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := appengine.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the resource requested. For example:
  // "apps/myapp/services/default/versions/v1".
  appsId := "{MY-APPS-ID}" // TODO: Update placeholder value(s).

  // Part of `name`. See documentation of `appsId`.
  servicesId := "{MY-SERVICES-ID}" // TODO: Update placeholder value(s).

  // Part of `name`. See documentation of `appsId`.
  versionsId := "{MY-VERSIONS-ID}" // TODO: Update placeholder value(s).

  resp, err := s.Apps.Services.Versions.Delete(appsId, servicesId, versionsId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := appengine.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the resource requested. For example:
  // "apps/myapp/services/default/versions/v1".
  appsId := "{MY-APPS-ID}" // TODO: Update placeholder value(s).

  // Part of `name`. See documentation of `appsId`.
  servicesId := "{MY-SERVICES-ID}" // TODO: Update placeholder value(s).

  // Part of `name`. See documentation of `appsId`.
  versionsId := "{MY-VERSIONS-ID}" // TODO: Update placeholder value(s).

  resp, err := s.Apps.Services.Versions.Get(appsId, servicesId, versionsId).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := appengine.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the resource requested. For example:
  // "apps/myapp/services/default/versions/v1".
  appsId := "{MY-APPS-ID}" // TODO: Update placeholder value(s).

  // Part of `name`. See documentation of `appsId`.
  servicesId := "{MY-SERVICES-ID}" // TODO: Update placeholder value(s).

  // Part of `name`. See documentation of `appsId`.
  versionsId := "{MY-VERSIONS-ID}" // TODO: Update placeholder value(s).

  call := s.Apps.Services.Versions.Instances.List(appsId, servicesId, versionsId)
  if err := call.Pages(ctx, func(page *appengine.ListInstancesResponse) error {
    for _, instance := range page.Instances {
      // TODO: Use instance
      fmt.Printf("%#v\n", instance)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := appengine.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the resource requested. For example: "apps/myapp/services/default".
  appsId := "{MY-APPS-ID}" // TODO: Update placeholder value(s).

  // Part of `name`. See documentation of `appsId`.
  servicesId := "{MY-SERVICES-ID}" // TODO: Update placeholder value(s).

  call := s.Apps.Services.Versions.List(appsId, servicesId)
  if err := call.Pages(ctx, func(page *appengine.ListVersionsResponse) error {
    for _, version := range page.Versions {
      // TODO: Use version
      fmt.Printf("%#v\n", version)
    }
    return nil // NOTE: Returning a non-nil error stops pagination.
  }); err != nil {
    log.Fatal(err)
  }
}
package main

// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google App Engine Admin API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/appengine
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install and update the Go dependencies by running `go get -u` in the
//    project directory.

import (
  "fmt"
  "log"

  "golang.org/x/net/context"
  "golang.org/x/oauth2/google"

  "google.golang.org/api/appengine/v1beta5"
)

func main() {
  ctx := context.Background()

  // Authentication is provided by the `gcloud` tool when running locally
  // and by built-in service accounts when running on GAE, GCE, or GKE.
  // For more information, see
  // https://developers.google.com/identity/protocols/application-default-credentials
  hc, err := google.DefaultClient(ctx, appengine.CloudPlatformScope)
  if err != nil {
    log.Fatal(err)
  }

  s, err := appengine.New(hc)
  if err != nil {
    log.Fatal(err)
  }

  // Part of `name`. Name of the resource to update. For example:
  // "apps/myapp/services/default/versions/1".
  appsId := "{MY-APPS-ID}" // TODO: Update placeholder value(s).

  // Part of `name`. See documentation of `appsId`.
  servicesId := "{MY-SERVICES-ID}" // TODO: Update placeholder value(s).

  // Part of `name`. See documentation of `appsId`.
  versionsId := "{MY-VERSIONS-ID}" // TODO: Update placeholder value(s).

  version := &appengine.Version{
    // TODO: Add the desired fields to be changed.
  }

  resp, err := s.Apps.Services.Versions.Patch(appsId, servicesId, versionsId, &version).Context(ctx).Do()
  if err != nil {
    log.Fatal(err)
  }

  // TODO: Use resp
  fmt.Printf("%#v\n", resp)
}
