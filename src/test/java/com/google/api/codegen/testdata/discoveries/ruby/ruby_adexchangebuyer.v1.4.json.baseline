
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get_account` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholder below to desired parameter value for the `get_account` method:

# The account id
id = 0


# Perform the call
response = service.get_account(id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list_accounts` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# Perform the call
response = service.list_accounts()

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch_account` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholder below to desired parameter value for the `patch_account` method:

# The account id
id = 0


request_body = Google::Apis::AdexchangebuyerV1_4::Account.new
# TODO: Assign values to desired members of the `request_body` object to be changed.


# Perform the call
response = service.patch_account(id, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update_account` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholder below to desired parameter value for the `update_account` method:

# The account id
id = 0


request_body = Google::Apis::AdexchangebuyerV1_4::Account.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.update_account(id, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get_billing_info` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholder below to desired parameter value for the `get_billing_info` method:

# The account id.
account_id = 0


# Perform the call
response = service.get_billing_info(account_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list_billing_infos` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# Perform the call
response = service.list_billing_infos()

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get_budget` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholders below to desired parameter values for the `get_budget` method:

# The account id to get the budget information for.
account_id = ''

# The billing id to get the budget information for.
billing_id = ''


# Perform the call
response = service.get_budget(account_id, billing_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch_budget` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholders below to desired parameter values for the `patch_budget` method:

# The account id associated with the budget being updated.
account_id = ''

# The billing id associated with the budget being updated.
billing_id = ''


request_body = Google::Apis::AdexchangebuyerV1_4::Budget.new
# TODO: Assign values to desired members of the `request_body` object to be changed.


# Perform the call
response = service.patch_budget(account_id, billing_id, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update_budget` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholders below to desired parameter values for the `update_budget` method:

# The account id associated with the budget being updated.
account_id = ''

# The billing id associated with the budget being updated.
billing_id = ''


request_body = Google::Apis::AdexchangebuyerV1_4::Budget.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.update_budget(account_id, billing_id, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `add_creative_deal` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholders below to desired parameter values for the `add_creative_deal` method:

# The id for the account that will serve this creative.
account_id = 0

# The buyer-specific id for this creative.
buyer_creative_id = '{MY-BUYER-CREATIVE-ID}'

# The id of the deal id to associate with this creative.
deal_id = ''


# Perform the call
service.add_creative_deal(account_id, buyer_creative_id, deal_id)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get_creative` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholders below to desired parameter values for the `get_creative` method:

# The id for the account that will serve this creative.
account_id = 0

# The buyer-specific id for this creative.
buyer_creative_id = '{MY-BUYER-CREATIVE-ID}'


# Perform the call
response = service.get_creative(account_id, buyer_creative_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert_creative` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


request_body = Google::Apis::AdexchangebuyerV1_4::Creative.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_creative(request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list_creatives` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_creatives(, page_token: token)
end

items.each do |creative|
  # TODO: Change code below to process each `creative` resource:
  puts JSON.pretty_generate(creative)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list_creative_deals` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholders below to desired parameter values for the `list_creative_deals` method:

# The id for the account that will serve this creative.
account_id = 0

# The buyer-specific id for this creative.
buyer_creative_id = '{MY-BUYER-CREATIVE-ID}'


# Perform the call
response = service.list_creative_deals(account_id, buyer_creative_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `remove_creative_deal` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholders below to desired parameter values for the `remove_creative_deal` method:

# The id for the account that will serve this creative.
account_id = 0

# The buyer-specific id for this creative.
buyer_creative_id = '{MY-BUYER-CREATIVE-ID}'

# The id of the deal id to disassociate with this creative.
deal_id = ''


# Perform the call
service.remove_creative_deal(account_id, buyer_creative_id, deal_id)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `delete_marketplacedeal_order_deals` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholder below to desired parameter value for the `delete_marketplacedeal_order_deals` method:

# The proposalId to delete deals from.
proposal_id = '{MY-PROPOSAL-ID}'


request_body = Google::Apis::AdexchangebuyerV1_4::DeleteOrderDealsRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.delete_marketplacedeal_order_deals(proposal_id, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert_marketplacedeal` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholder below to desired parameter value for the `insert_marketplacedeal` method:

# proposalId for which deals need to be added.
proposal_id = '{MY-PROPOSAL-ID}'


request_body = Google::Apis::AdexchangebuyerV1_4::AddOrderDealsRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_marketplacedeal(proposal_id, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list_marketplacedeals` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholder below to desired parameter value for the `list_marketplacedeals` method:

# The proposalId to get deals for. To search across all proposals specify order_id = '-' as part of
# the URL.
proposal_id = '{MY-PROPOSAL-ID}'


# Perform the call
response = service.list_marketplacedeals(proposal_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update_marketplacedeal` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholder below to desired parameter value for the `update_marketplacedeal` method:

# The proposalId to edit deals on.
proposal_id = '{MY-PROPOSAL-ID}'


request_body = Google::Apis::AdexchangebuyerV1_4::EditAllOrderDealsRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.update_marketplacedeal(proposal_id, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert_marketplacenote` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholder below to desired parameter value for the `insert_marketplacenote` method:

# The proposalId to add notes for.
proposal_id = '{MY-PROPOSAL-ID}'


request_body = Google::Apis::AdexchangebuyerV1_4::AddOrderNotesRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_marketplacenote(proposal_id, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list_marketplacenotes` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholder below to desired parameter value for the `list_marketplacenotes` method:

# The proposalId to get notes for. To search across all proposals specify order_id = '-' as part of
# the URL.
proposal_id = '{MY-PROPOSAL-ID}'


# Perform the call
response = service.list_marketplacenotes(proposal_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update_marketplace_private_auction_proposal` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholder below to desired parameter value for the `update_marketplace_private_auction_proposal` method:

# The private auction id to be updated.
private_auction_id = '{MY-PRIVATE-AUCTION-ID}'


request_body = Google::Apis::AdexchangebuyerV1_4::UpdatePrivateAuctionProposalRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
service.update_marketplace_private_auction_proposal(private_auction_id, request_body)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list_performance_reports` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholders below to desired parameter values for the `list_performance_reports` method:

# The account id to get the reports.
account_id = ''

# The end time of the report in ISO 8601 timestamp format using UTC.
end_date_time = '{MY-END-DATE-TIME}'

# The start time of the report in ISO 8601 timestamp format using UTC.
start_date_time = '{MY-START-DATE-TIME}'


# Perform the call
response = service.list_performance_reports(account_id, end_date_time, start_date_time)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `delete_pretargeting_config` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholders below to desired parameter values for the `delete_pretargeting_config` method:

# The account id to delete the pretargeting config for.
account_id = ''

# The specific id of the configuration to delete.
config_id = ''


# Perform the call
service.delete_pretargeting_config(account_id, config_id)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get_pretargeting_config` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholders below to desired parameter values for the `get_pretargeting_config` method:

# The account id to get the pretargeting config for.
account_id = ''

# The specific id of the configuration to retrieve.
config_id = ''


# Perform the call
response = service.get_pretargeting_config(account_id, config_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert_pretargeting_config` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholder below to desired parameter value for the `insert_pretargeting_config` method:

# The account id to insert the pretargeting config for.
account_id = ''


request_body = Google::Apis::AdexchangebuyerV1_4::PretargetingConfig.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_pretargeting_config(account_id, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list_pretargeting_configs` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholder below to desired parameter value for the `list_pretargeting_configs` method:

# The account id to get the pretargeting configs for.
account_id = ''


# Perform the call
response = service.list_pretargeting_configs(account_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch_pretargeting_config` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholders below to desired parameter values for the `patch_pretargeting_config` method:

# The account id to update the pretargeting config for.
account_id = ''

# The specific id of the configuration to update.
config_id = ''


request_body = Google::Apis::AdexchangebuyerV1_4::PretargetingConfig.new
# TODO: Assign values to desired members of the `request_body` object to be changed.


# Perform the call
response = service.patch_pretargeting_config(account_id, config_id, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update_pretargeting_config` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholders below to desired parameter values for the `update_pretargeting_config` method:

# The account id to update the pretargeting config for.
account_id = ''

# The specific id of the configuration to update.
config_id = ''


request_body = Google::Apis::AdexchangebuyerV1_4::PretargetingConfig.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.update_pretargeting_config(account_id, config_id, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get_product` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholder below to desired parameter value for the `get_product` method:

# The id for the product to get the head revision for.
product_id = '{MY-PRODUCT-ID}'


# Perform the call
response = service.get_product(product_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `search_products` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# Perform the call
response = service.search_products()

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `get_proposal` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholder below to desired parameter value for the `get_proposal` method:

# Id of the proposal to retrieve.
proposal_id = '{MY-PROPOSAL-ID}'


# Perform the call
response = service.get_proposal(proposal_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `insert_proposal` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


request_body = Google::Apis::AdexchangebuyerV1_4::CreateOrdersRequest.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.insert_proposal(request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `patch_proposal` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholders below to desired parameter values for the `patch_proposal` method:

# The proposal id to update.
proposal_id = '{MY-PROPOSAL-ID}'

# The last known revision number to update. If the head revision in the marketplace database has since
# changed, an error will be thrown. The caller should then fetch the latest proposal at head revision
# and retry the update at that revision.
revision_number = ''

# The proposed action to take on the proposal. This field is required and it must be set when updating
# a proposal.
update_action = '{MY-UPDATE-ACTION}'


request_body = Google::Apis::AdexchangebuyerV1_4::Proposal.new
# TODO: Assign values to desired members of the `request_body` object to be changed.


# Perform the call
response = service.patch_proposal(proposal_id, revision_number, update_action, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `search_proposals` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# Perform the call
response = service.search_proposals()

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `proposal_setup_complete` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholder below to desired parameter value for the `proposal_setup_complete` method:

# The proposal id for which the setup is complete
proposal_id = '{MY-PROPOSAL-ID}'


# Perform the call
service.proposal_setup_complete(proposal_id)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `update_proposal` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholders below to desired parameter values for the `update_proposal` method:

# The proposal id to update.
proposal_id = '{MY-PROPOSAL-ID}'

# The last known revision number to update. If the head revision in the marketplace database has since
# changed, an error will be thrown. The caller should then fetch the latest proposal at head revision
# and retry the update at that revision.
revision_number = ''

# The proposed action to take on the proposal. This field is required and it must be set when updating
# a proposal.
update_action = '{MY-UPDATE-ACTION}'


request_body = Google::Apis::AdexchangebuyerV1_4::Proposal.new
# TODO: Assign values to desired members of the `request_body` object.


# Perform the call
response = service.update_proposal(proposal_id, revision_number, update_action, request_body)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. Install the Ruby client library by running `gem install google-api-client`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# TODO: Change placeholder below to get authentication credentials.
# See: https://foo.com/bar
#
# To use the `list_pub_profiles` method, authorize using one of the following scopes:
#   https://www.googleapis.com/auth/adexchange.buyer
service.authorization = nil


# TODO: Change placeholder below to desired parameter value for the `list_pub_profiles` method:

# The accountId of the publisher to get profiles for.
account_id = 0


# Perform the call
response = service.list_pub_profiles(account_id)

# TODO: Change code below to process the `response` object:
puts JSON.pretty_generate(response)
