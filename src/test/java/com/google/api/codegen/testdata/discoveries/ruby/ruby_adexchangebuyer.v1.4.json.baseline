
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The account id
id = 0 # TODO: Change placeholder value(s).

# Perform the call
response = service.get_account(id)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# Perform the call
response = service.list_accounts()

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The account id
id = 0 # TODO: Change placeholder value(s).

# TODO: Assign values to the desired members to be changed.
account_body = Google::Apis::AdexchangebuyerV1_4::Account.new

# Perform the call
response = service.patch_account(id, account_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The account id
id = 0 # TODO: Change placeholder value(s).

# TODO: Assign values to the desired members.
account_body = Google::Apis::AdexchangebuyerV1_4::Account.new

# Perform the call
response = service.update_account(id, account_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The account id.
account_id = 0 # TODO: Change placeholder value(s).

# Perform the call
response = service.get_billing_info(account_id)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# Perform the call
response = service.list_billing_infos()

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The account id to get the budget information for.
account_id = '' # TODO: Change placeholder value(s).

# The billing id to get the budget information for.
billing_id = '' # TODO: Change placeholder value(s).

# Perform the call
response = service.get_budget(account_id, billing_id)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The account id associated with the budget being updated.
account_id = '' # TODO: Change placeholder value(s).

# The billing id associated with the budget being updated.
billing_id = '' # TODO: Change placeholder value(s).

# TODO: Assign values to the desired members to be changed.
budget_body = Google::Apis::AdexchangebuyerV1_4::Budget.new

# Perform the call
response = service.patch_budget(account_id, billing_id, budget_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The account id associated with the budget being updated.
account_id = '' # TODO: Change placeholder value(s).

# The billing id associated with the budget being updated.
billing_id = '' # TODO: Change placeholder value(s).

# TODO: Assign values to the desired members.
budget_body = Google::Apis::AdexchangebuyerV1_4::Budget.new

# Perform the call
response = service.update_budget(account_id, billing_id, budget_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The id for the account that will serve this creative.
account_id = 0 # TODO: Change placeholder value(s).

# The buyer-specific id for this creative.
buyer_creative_id = '{MY-BUYER-CREATIVE-ID}' # TODO: Change placeholder value(s).

# The id of the deal id to associate with this creative.
deal_id = '' # TODO: Change placeholder value(s).

# Perform the call
service.add_creative_deal(account_id, buyer_creative_id, deal_id)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The id for the account that will serve this creative.
account_id = 0 # TODO: Change placeholder value(s).

# The buyer-specific id for this creative.
buyer_creative_id = '{MY-BUYER-CREATIVE-ID}' # TODO: Change placeholder value(s).

# Perform the call
response = service.get_creative(account_id, buyer_creative_id)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Assign values to the desired members.
creative_body = Google::Apis::AdexchangebuyerV1_4::Creative.new

# Perform the call
response = service.insert_creative(creative_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# Perform the call
items = service.fetch_all(items: :items) do |token|
  service.list_creatives(, page_token: token)
end

items.each do |creative|
  # TODO: Use creative
  puts JSON.pretty_generate(creative)
end
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The id for the account that will serve this creative.
account_id = 0 # TODO: Change placeholder value(s).

# The buyer-specific id for this creative.
buyer_creative_id = '{MY-BUYER-CREATIVE-ID}' # TODO: Change placeholder value(s).

# The id of the deal id to disassociate with this creative.
deal_id = '' # TODO: Change placeholder value(s).

# Perform the call
service.remove_creative_deal(account_id, buyer_creative_id, deal_id)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The proposalId to delete deals from.
proposal_id = '{MY-PROPOSAL-ID}' # TODO: Change placeholder value(s).

# TODO: Assign values to the desired members.
delete_order_deals_request_body = Google::Apis::AdexchangebuyerV1_4::DeleteOrderDealsRequest.new

# Perform the call
response = service.delete_marketplacedeal_order_deals(proposal_id, delete_order_deals_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# proposalId for which deals need to be added.
proposal_id = '{MY-PROPOSAL-ID}' # TODO: Change placeholder value(s).

# TODO: Assign values to the desired members.
add_order_deals_request_body = Google::Apis::AdexchangebuyerV1_4::AddOrderDealsRequest.new

# Perform the call
response = service.insert_marketplacedeal(proposal_id, add_order_deals_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The proposalId to get deals for. To search across proposals specify order_id = '-' as part of the
# URL.
proposal_id = '{MY-PROPOSAL-ID}' # TODO: Change placeholder value(s).

# Perform the call
response = service.list_marketplacedeals(proposal_id)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The proposalId to edit deals on.
proposal_id = '{MY-PROPOSAL-ID}' # TODO: Change placeholder value(s).

# TODO: Assign values to the desired members.
edit_all_order_deals_request_body = Google::Apis::AdexchangebuyerV1_4::EditAllOrderDealsRequest.new

# Perform the call
response = service.update_marketplacedeal(proposal_id, edit_all_order_deals_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The proposalId to add notes for.
proposal_id = '{MY-PROPOSAL-ID}' # TODO: Change placeholder value(s).

# TODO: Assign values to the desired members.
add_order_notes_request_body = Google::Apis::AdexchangebuyerV1_4::AddOrderNotesRequest.new

# Perform the call
response = service.insert_marketplacenote(proposal_id, add_order_notes_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The proposalId to get notes for.
proposal_id = '{MY-PROPOSAL-ID}' # TODO: Change placeholder value(s).

# Perform the call
response = service.list_marketplacenotes(proposal_id)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The private auction id to be updated.
private_auction_id = '{MY-PRIVATE-AUCTION-ID}' # TODO: Change placeholder value(s).

# TODO: Assign values to the desired members.
update_private_auction_proposal_request_body = Google::Apis::AdexchangebuyerV1_4::UpdatePrivateAuctionProposalRequest.new

# Perform the call
service.update_marketplace_private_auction_proposal(private_auction_id, update_private_auction_proposal_request_body)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The account id to get the reports.
account_id = '' # TODO: Change placeholder value(s).

# The end time of the report in ISO 8601 timestamp format using UTC.
end_date_time = '{MY-END-DATE-TIME}' # TODO: Change placeholder value(s).

# The start time of the report in ISO 8601 timestamp format using UTC.
start_date_time = '{MY-START-DATE-TIME}' # TODO: Change placeholder value(s).

# Perform the call
response = service.list_performance_reports(account_id, end_date_time, start_date_time)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The account id to delete the pretargeting config for.
account_id = '' # TODO: Change placeholder value(s).

# The specific id of the configuration to delete.
config_id = '' # TODO: Change placeholder value(s).

# Perform the call
service.delete_pretargeting_config(account_id, config_id)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The account id to get the pretargeting config for.
account_id = '' # TODO: Change placeholder value(s).

# The specific id of the configuration to retrieve.
config_id = '' # TODO: Change placeholder value(s).

# Perform the call
response = service.get_pretargeting_config(account_id, config_id)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The account id to insert the pretargeting config for.
account_id = '' # TODO: Change placeholder value(s).

# TODO: Assign values to the desired members.
pretargeting_config_body = Google::Apis::AdexchangebuyerV1_4::PretargetingConfig.new

# Perform the call
response = service.insert_pretargeting_config(account_id, pretargeting_config_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The account id to get the pretargeting configs for.
account_id = '' # TODO: Change placeholder value(s).

# Perform the call
response = service.list_pretargeting_configs(account_id)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The account id to update the pretargeting config for.
account_id = '' # TODO: Change placeholder value(s).

# The specific id of the configuration to update.
config_id = '' # TODO: Change placeholder value(s).

# TODO: Assign values to the desired members to be changed.
pretargeting_config_body = Google::Apis::AdexchangebuyerV1_4::PretargetingConfig.new

# Perform the call
response = service.patch_pretargeting_config(account_id, config_id, pretargeting_config_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The account id to update the pretargeting config for.
account_id = '' # TODO: Change placeholder value(s).

# The specific id of the configuration to update.
config_id = '' # TODO: Change placeholder value(s).

# TODO: Assign values to the desired members.
pretargeting_config_body = Google::Apis::AdexchangebuyerV1_4::PretargetingConfig.new

# Perform the call
response = service.update_pretargeting_config(account_id, config_id, pretargeting_config_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The id for the product to get the head revision for.
product_id = '{MY-PRODUCT-ID}' # TODO: Change placeholder value(s).

# Perform the call
response = service.get_product(product_id)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# Perform the call
response = service.search_products()

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# Id of the proposal to retrieve.
proposal_id = '{MY-PROPOSAL-ID}' # TODO: Change placeholder value(s).

# Perform the call
response = service.get_proposal(proposal_id)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# TODO: Assign values to the desired members.
create_orders_request_body = Google::Apis::AdexchangebuyerV1_4::CreateOrdersRequest.new

# Perform the call
response = service.insert_proposal(create_orders_request_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The proposal id to update.
proposal_id = '{MY-PROPOSAL-ID}' # TODO: Change placeholder value(s).

# The last known revision number to update. If the head revision in the marketplace database has since
# changed, an error will be thrown. The caller should then fetch the latest proposal at head revision
# and retry the update at that revision.
revision_number = '' # TODO: Change placeholder value(s).

# The proposed action to take on the proposal.
update_action = '{MY-UPDATE-ACTION}' # TODO: Change placeholder value(s).

# TODO: Assign values to the desired members to be changed.
proposal_body = Google::Apis::AdexchangebuyerV1_4::Proposal.new

# Perform the call
response = service.patch_proposal(proposal_id, revision_number, update_action, proposal_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])


# Perform the call
response = service.search_proposals()

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The proposal id for which the setup is complete
proposal_id = '{MY-PROPOSAL-ID}' # TODO: Change placeholder value(s).

# Perform the call
service.proposal_setup_complete(proposal_id)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The proposal id to update.
proposal_id = '{MY-PROPOSAL-ID}' # TODO: Change placeholder value(s).

# The last known revision number to update. If the head revision in the marketplace database has since
# changed, an error will be thrown. The caller should then fetch the latest proposal at head revision
# and retry the update at that revision.
revision_number = '' # TODO: Change placeholder value(s).

# The proposed action to take on the proposal.
update_action = '{MY-UPDATE-ACTION}' # TODO: Change placeholder value(s).

# TODO: Assign values to the desired members.
proposal_body = Google::Apis::AdexchangebuyerV1_4::Proposal.new

# Perform the call
response = service.update_proposal(proposal_id, revision_number, update_action, proposal_body)

# TODO: Use response
puts JSON.pretty_generate(response)
# BEFORE RUNNING:
# ---------------
# 1. If not already done, enable the Ad Exchange Buyer API
#    and check the quota for your project at
#    https://console.developers.google.com/apis/api/adexchangebuyer
# 2. This sample uses Application Default Credentials for authentication.
#    If not already done, install the gcloud CLI from
#    https://cloud.google.com/sdk/ and run
#    `gcloud beta auth application-default login`
# 3. Install the Ruby client library and Application Default Credentials
#    library by running `gem install google-api-client` and
#    `gem install googleauth`
require 'googleauth'
require 'google/apis/adexchangebuyer_v1_4'
require 'json'

service = Google::Apis::AdexchangebuyerV1_4::AdexchangebuyerService.new

# Authentication is provided by the `gcloud` tool when running locally
# and by built-in service accounts when running on GAE, GCE, or GKE.
# For more information, see
# https://developers.google.com/identity/protocols/application-default-credentials
service.authorization = \
    Google::Auth.get_application_default(['https://www.googleapis.com/auth/cloud-platform'])

# The accountId of the publisher to get profiles for.
account_id = 0 # TODO: Change placeholder value(s).

# Perform the call
response = service.list_pub_profiles(account_id)

# TODO: Use response
puts JSON.pretty_generate(response)
