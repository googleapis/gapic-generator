
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The project ID for this request.
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

            // The name of the deployment for this request.
            string deployment = "{MY-DEPLOYMENT}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.DeploymentsCancelPreviewRequest requestBody = new Data.DeploymentsCancelPreviewRequest();

            DeploymentsResource.CancelPreviewRequest request = deploymentManagerService.Deployments.CancelPreview(requestBody, project, deployment);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The project ID for this request.
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

            // The name of the deployment for this request.
            string deployment = "{MY-DEPLOYMENT}"; // TODO: Update placeholder value(s).

            DeploymentsResource.DeleteRequest request = deploymentManagerService.Deployments.Delete(project, deployment);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The project ID for this request.
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

            // The name of the deployment for this request.
            string deployment = "{MY-DEPLOYMENT}"; // TODO: Update placeholder value(s).

            DeploymentsResource.GetRequest request = deploymentManagerService.Deployments.Get(project, deployment);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Deployment response = request.Execute();
            // Data.Deployment response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The project ID for this request.
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.Deployment requestBody = new Data.Deployment();

            DeploymentsResource.InsertRequest request = deploymentManagerService.Deployments.Insert(requestBody, project);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The project ID for this request.
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

            DeploymentsResource.ListRequest request = deploymentManagerService.Deployments.List(project);

            Data.DeploymentsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace request.Execute() as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Deployments == null)
                {
                    continue;
                }
                foreach (Data.Deployment deployment in response.Deployments)
                {
                    // TODO: Use deployment
                    Console.WriteLine(new JavaScriptSerializer().Serialize(deployment));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The project ID for this request.
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

            // The name of the deployment for this request.
            string deployment = "{MY-DEPLOYMENT}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties to be changed.
            Data.Deployment requestBody = new Data.Deployment();

            DeploymentsResource.PatchRequest request = deploymentManagerService.Deployments.Patch(requestBody, project, deployment);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The project ID for this request.
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

            // The name of the deployment for this request.
            string deployment = "{MY-DEPLOYMENT}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.DeploymentsStopRequest requestBody = new Data.DeploymentsStopRequest();

            DeploymentsResource.StopRequest request = deploymentManagerService.Deployments.Stop(requestBody, project, deployment);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The project ID for this request.
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

            // The name of the deployment for this request.
            string deployment = "{MY-DEPLOYMENT}"; // TODO: Update placeholder value(s).

            // TODO: Assign values to the desired properties.
            Data.Deployment requestBody = new Data.Deployment();

            DeploymentsResource.UpdateRequest request = deploymentManagerService.Deployments.Update(requestBody, project, deployment);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The project ID for this request.
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

            // The name of the deployment for this request.
            string deployment = "{MY-DEPLOYMENT}"; // TODO: Update placeholder value(s).

            // The name of the manifest for this request.
            string manifest = "{MY-MANIFEST}"; // TODO: Update placeholder value(s).

            ManifestsResource.GetRequest request = deploymentManagerService.Manifests.Get(project, deployment, manifest);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Manifest response = request.Execute();
            // Data.Manifest response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The project ID for this request.
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

            // The name of the deployment for this request.
            string deployment = "{MY-DEPLOYMENT}"; // TODO: Update placeholder value(s).

            ManifestsResource.ListRequest request = deploymentManagerService.Manifests.List(project, deployment);

            Data.ManifestsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace request.Execute() as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Manifests == null)
                {
                    continue;
                }
                foreach (Data.Manifest manifest in response.Manifests)
                {
                    // TODO: Use manifest
                    Console.WriteLine(new JavaScriptSerializer().Serialize(manifest));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The project ID for this request.
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

            // The name of the operation for this request.
            string operation = "{MY-OPERATION}"; // TODO: Update placeholder value(s).

            OperationsResource.GetRequest request = deploymentManagerService.Operations.Get(project, operation);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The project ID for this request.
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

            OperationsResource.ListRequest request = deploymentManagerService.Operations.List(project);

            Data.OperationsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace request.Execute() as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Operations == null)
                {
                    continue;
                }
                foreach (Data.Operation operation in response.Operations)
                {
                    // TODO: Use operation
                    Console.WriteLine(new JavaScriptSerializer().Serialize(operation));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The project ID for this request.
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

            // The name of the deployment for this request.
            string deployment = "{MY-DEPLOYMENT}"; // TODO: Update placeholder value(s).

            // The name of the resource for this request.
            string resource = "{MY-RESOURCE}"; // TODO: Update placeholder value(s).

            ResourcesResource.GetRequest request = deploymentManagerService.Resources.Get(project, deployment, resource);

            // To execute asynchronously in an async method, replace request.Execute() as shown:
            Data.Resource response = request.Execute();
            // Data.Resource response = await request.ExecuteAsync();

            // TODO: Use response
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The project ID for this request.
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

            // The name of the deployment for this request.
            string deployment = "{MY-DEPLOYMENT}"; // TODO: Update placeholder value(s).

            ResourcesResource.ListRequest request = deploymentManagerService.Resources.List(project, deployment);

            Data.ResourcesListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace request.Execute() as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Resources == null)
                {
                    continue;
                }
                foreach (Data.Resource resource in response.Resources)
                {
                    // TODO: Use resource
                    Console.WriteLine(new JavaScriptSerializer().Serialize(resource));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Authentication is provided by the `gcloud` tool when running locally
            // and by built-in service accounts when running on GCE.
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;

            // Running locally requires scopes to be passed in manually.
            // GCE automatically pulls the scopes from the GCE metadata server.
            // For more information, see
            // https://developers.google.com/identity/protocols/application-default-credentials
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });

            // The project ID for this request.
            string project = "{MY-PROJECT}"; // TODO: Update placeholder value(s).

            TypesResource.ListRequest request = deploymentManagerService.Types.List(project);

            Data.TypesListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace request.Execute() as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Types == null)
                {
                    continue;
                }
                foreach (Data.Type type in response.Types)
                {
                    // TODO: Use type
                    Console.WriteLine(new JavaScriptSerializer().Serialize(type));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
