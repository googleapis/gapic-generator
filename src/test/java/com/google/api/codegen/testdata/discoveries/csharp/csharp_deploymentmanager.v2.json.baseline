
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `CancelPreview` method:

            // The project ID for this request.
            string project = "{MY-PROJECT}";

            // The name of the deployment for this request.
            string deployment = "{MY-DEPLOYMENT}";


            Data.DeploymentsCancelPreviewRequest requestBody = new Data.DeploymentsCancelPreviewRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            DeploymentsResource.CancelPreviewRequest request = deploymentManagerService.Deployments.CancelPreview(requestBody, project, deployment);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Delete` method:

            // The project ID for this request.
            string project = "{MY-PROJECT}";

            // The name of the deployment for this request.
            string deployment = "{MY-DEPLOYMENT}";


            DeploymentsResource.DeleteRequest request = deploymentManagerService.Deployments.Delete(project, deployment);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // The project ID for this request.
            string project = "{MY-PROJECT}";

            // The name of the deployment for this request.
            string deployment = "{MY-DEPLOYMENT}";


            DeploymentsResource.GetRequest request = deploymentManagerService.Deployments.Get(project, deployment);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Deployment response = request.Execute();
            // Data.Deployment response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `Insert` method:

            // The project ID for this request.
            string project = "{MY-PROJECT}";


            Data.Deployment requestBody = new Data.Deployment();
            // TODO: Assign values to desired properties of the `requestBody` object.


            DeploymentsResource.InsertRequest request = deploymentManagerService.Deployments.Insert(requestBody, project);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // The project ID for this request.
            string project = "{MY-PROJECT}";


            DeploymentsResource.ListRequest request = deploymentManagerService.Deployments.List(project);

            Data.DeploymentsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Deployments == null)
                {
                    continue;
                }
                foreach (Data.Deployment deployment in response.Deployments)
                {
                    // TODO: Change code below to process each `deployment` resource:
                    Console.WriteLine(new JavaScriptSerializer().Serialize(deployment));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Patch` method:

            // The project ID for this request.
            string project = "{MY-PROJECT}";

            // The name of the deployment for this request.
            string deployment = "{MY-DEPLOYMENT}";


            Data.Deployment requestBody = new Data.Deployment();
            // TODO: Assign values to desired properties of the `requestBody` object to be changed.


            DeploymentsResource.PatchRequest request = deploymentManagerService.Deployments.Patch(requestBody, project, deployment);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Stop` method:

            // The project ID for this request.
            string project = "{MY-PROJECT}";

            // The name of the deployment for this request.
            string deployment = "{MY-DEPLOYMENT}";


            Data.DeploymentsStopRequest requestBody = new Data.DeploymentsStopRequest();
            // TODO: Assign values to desired properties of the `requestBody` object.


            DeploymentsResource.StopRequest request = deploymentManagerService.Deployments.Stop(requestBody, project, deployment);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Update` method:

            // The project ID for this request.
            string project = "{MY-PROJECT}";

            // The name of the deployment for this request.
            string deployment = "{MY-DEPLOYMENT}";


            Data.Deployment requestBody = new Data.Deployment();
            // TODO: Assign values to desired properties of the `requestBody` object.


            DeploymentsResource.UpdateRequest request = deploymentManagerService.Deployments.Update(requestBody, project, deployment);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // The project ID for this request.
            string project = "{MY-PROJECT}";

            // The name of the deployment for this request.
            string deployment = "{MY-DEPLOYMENT}";

            // The name of the manifest for this request.
            string manifest = "{MY-MANIFEST}";


            ManifestsResource.GetRequest request = deploymentManagerService.Manifests.Get(project, deployment, manifest);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Manifest response = request.Execute();
            // Data.Manifest response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // The project ID for this request.
            string project = "{MY-PROJECT}";

            // The name of the deployment for this request.
            string deployment = "{MY-DEPLOYMENT}";


            ManifestsResource.ListRequest request = deploymentManagerService.Manifests.List(project, deployment);

            Data.ManifestsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Manifests == null)
                {
                    continue;
                }
                foreach (Data.Manifest manifest in response.Manifests)
                {
                    // TODO: Change code below to process each `manifest` resource:
                    Console.WriteLine(new JavaScriptSerializer().Serialize(manifest));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // The project ID for this request.
            string project = "{MY-PROJECT}";

            // The name of the operation for this request.
            string operation = "{MY-OPERATION}";


            OperationsResource.GetRequest request = deploymentManagerService.Operations.Get(project, operation);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Operation response = request.Execute();
            // Data.Operation response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // The project ID for this request.
            string project = "{MY-PROJECT}";


            OperationsResource.ListRequest request = deploymentManagerService.Operations.List(project);

            Data.OperationsListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Operations == null)
                {
                    continue;
                }
                foreach (Data.Operation operation in response.Operations)
                {
                    // TODO: Change code below to process each `operation` resource:
                    Console.WriteLine(new JavaScriptSerializer().Serialize(operation));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `Get` method:

            // The project ID for this request.
            string project = "{MY-PROJECT}";

            // The name of the deployment for this request.
            string deployment = "{MY-DEPLOYMENT}";

            // The name of the resource for this request.
            string resource = "{MY-RESOURCE}";


            ResourcesResource.GetRequest request = deploymentManagerService.Resources.Get(project, deployment, resource);

            // To execute asynchronously in an async method, replace `request.Execute()` as shown:
            Data.Resource response = request.Execute();
            // Data.Resource response = await request.ExecuteAsync();

            // TODO: Change code below to process the `response` object:
            Console.WriteLine(new JavaScriptSerializer().Serialize(response));
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholders below to desired parameter values for the `List` method:

            // The project ID for this request.
            string project = "{MY-PROJECT}";

            // The name of the deployment for this request.
            string deployment = "{MY-DEPLOYMENT}";


            ResourcesResource.ListRequest request = deploymentManagerService.Resources.List(project, deployment);

            Data.ResourcesListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Resources == null)
                {
                    continue;
                }
                foreach (Data.Resource resource in response.Resources)
                {
                    // TODO: Change code below to process each `resource` resource:
                    Console.WriteLine(new JavaScriptSerializer().Serialize(resource));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
// BEFORE RUNNING:
// ---------------
// 1. If not already done, enable the Google Cloud Deployment Manager API
//    and check the quota for your project at
//    https://console.developers.google.com/apis/api/deploymentmanager
// 2. This sample uses Application Default Credentials for authentication.
//    If not already done, install the gcloud CLI from
//    https://cloud.google.com/sdk/ and run
//    `gcloud beta auth application-default login`
// 3. Install the C# client library by adding a dependency on the relevant NuGet
//    package. Libraries published by Google are owned by google-apis-packages:
//    https://www.nuget.org/profiles/google-apis-packages

using Google.Apis.Auth.OAuth2;
using Google.Apis.DeploymentManager.v2;
using Google.Apis.Services;
using System.Threading.Tasks;
using System.Web.Script.Serialization;

using Data = Google.Apis.DeploymentManager.v2.Data;


namespace DeploymentManagerSample
{
    public class DeploymentManagerServiceExample
    {
        public static void Main(string[] args)
        {
            // Use Application Default Credentials for authentication when running locally.
            // For more information, see:
            // https://developers.google.com/identity/protocols/application-default-credentials
            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;
            if (credential.IsCreateScopedRequired)
            {
                credential = credential.CreateScoped("https://www.googleapis.com/auth/cloud-platform");
            }

            DeploymentManagerService deploymentManagerService = new DeploymentManagerService(new BaseClientService.Initializer
            {
                HttpClientInitializer = credential,
                ApplicationName = "Google Cloud Platform Sample",
            });


            // TODO: Change placeholder below to desired parameter value for the `List` method:

            // The project ID for this request.
            string project = "{MY-PROJECT}";


            TypesResource.ListRequest request = deploymentManagerService.Types.List(project);

            Data.TypesListResponse response;
            do
            {
                // To execute asynchronously in an async method, replace `request.Execute()` as shown:
                response = request.Execute();
                // response = await request.ExecuteAsync();

                if (response.Types == null)
                {
                    continue;
                }
                foreach (Data.Type type in response.Types)
                {
                    // TODO: Change code below to process each `type` resource:
                    Console.WriteLine(new JavaScriptSerializer().Serialize(type));
                }
                request.PageToken = response.NextPageToken;
            } while (response.NextPageToken != null);
        }
    }
}
